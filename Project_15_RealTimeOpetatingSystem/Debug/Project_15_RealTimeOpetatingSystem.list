
Project_15_RealTimeOpetatingSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042bc  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0800437c  0800437c  0001437c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044bc  080044bc  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080044bc  080044bc  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044bc  080044bc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044bc  080044bc  000144bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044c0  080044c0  000144c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080044c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010f8  20000074  08004538  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000116c  08004538  0002116c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001450c  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cb3  00000000  00000000  000345a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  00037260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001020  00000000  00000000  000383a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b21d  00000000  00000000  000393c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013df4  00000000  00000000  000545e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fd6a  00000000  00000000  000683d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00108143  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004070  00000000  00000000  00108194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004364 	.word	0x08004364

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08004364 	.word	0x08004364

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	4a06      	ldr	r2, [pc, #24]	; (8000248 <vApplicationGetIdleTaskMemory+0x28>)
 8000230:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	4a05      	ldr	r2, [pc, #20]	; (800024c <vApplicationGetIdleTaskMemory+0x2c>)
 8000236:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2280      	movs	r2, #128	; 0x80
 800023c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	46bd      	mov	sp, r7
 8000242:	b004      	add	sp, #16
 8000244:	bd80      	pop	{r7, pc}
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	20000090 	.word	0x20000090
 800024c:	20000144 	.word	0x20000144

08000250 <send_task01>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void send_task01 (void)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b085      	sub	sp, #20
 8000254:	af00      	add	r7, sp, #0

	uint8_t data[] = "Task_01 rum\n";
 8000256:	003b      	movs	r3, r7
 8000258:	4a0a      	ldr	r2, [pc, #40]	; (8000284 <send_task01+0x34>)
 800025a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800025c:	c313      	stmia	r3!, {r0, r1, r4}
 800025e:	7812      	ldrb	r2, [r2, #0]
 8000260:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2,data,sizeof(data),500);
 8000262:	23fa      	movs	r3, #250	; 0xfa
 8000264:	005b      	lsls	r3, r3, #1
 8000266:	0039      	movs	r1, r7
 8000268:	4807      	ldr	r0, [pc, #28]	; (8000288 <send_task01+0x38>)
 800026a:	220d      	movs	r2, #13
 800026c:	f001 ff16 	bl	800209c <HAL_UART_Transmit>
	HAL_Delay(500);
 8000270:	23fa      	movs	r3, #250	; 0xfa
 8000272:	005b      	lsls	r3, r3, #1
 8000274:	0018      	movs	r0, r3
 8000276:	f000 fb27 	bl	80008c8 <HAL_Delay>


}
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	46bd      	mov	sp, r7
 800027e:	b005      	add	sp, #20
 8000280:	bd90      	pop	{r4, r7, pc}
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	08004398 	.word	0x08004398
 8000288:	20000344 	.word	0x20000344

0800028c <send_task02>:


void send_task02 (void)
{
 800028c:	b590      	push	{r4, r7, lr}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0

	uint8_t data[] = "Task_02 rum\n";
 8000292:	003b      	movs	r3, r7
 8000294:	4a0a      	ldr	r2, [pc, #40]	; (80002c0 <send_task02+0x34>)
 8000296:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000298:	c313      	stmia	r3!, {r0, r1, r4}
 800029a:	7812      	ldrb	r2, [r2, #0]
 800029c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2,data,sizeof(data),500);
 800029e:	23fa      	movs	r3, #250	; 0xfa
 80002a0:	005b      	lsls	r3, r3, #1
 80002a2:	0039      	movs	r1, r7
 80002a4:	4807      	ldr	r0, [pc, #28]	; (80002c4 <send_task02+0x38>)
 80002a6:	220d      	movs	r2, #13
 80002a8:	f001 fef8 	bl	800209c <HAL_UART_Transmit>
	HAL_Delay(500);
 80002ac:	23fa      	movs	r3, #250	; 0xfa
 80002ae:	005b      	lsls	r3, r3, #1
 80002b0:	0018      	movs	r0, r3
 80002b2:	f000 fb09 	bl	80008c8 <HAL_Delay>


}
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	46bd      	mov	sp, r7
 80002ba:	b005      	add	sp, #20
 80002bc:	bd90      	pop	{r4, r7, pc}
 80002be:	46c0      	nop			; (mov r8, r8)
 80002c0:	080043a8 	.word	0x080043a8
 80002c4:	20000344 	.word	0x20000344

080002c8 <send_task03>:

void send_task03 (void)
{
 80002c8:	b590      	push	{r4, r7, lr}
 80002ca:	b085      	sub	sp, #20
 80002cc:	af00      	add	r7, sp, #0

	uint8_t data[] = "Task_03 rum\n";
 80002ce:	003b      	movs	r3, r7
 80002d0:	4a0a      	ldr	r2, [pc, #40]	; (80002fc <send_task03+0x34>)
 80002d2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002d4:	c313      	stmia	r3!, {r0, r1, r4}
 80002d6:	7812      	ldrb	r2, [r2, #0]
 80002d8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2,data,sizeof(data),500);
 80002da:	23fa      	movs	r3, #250	; 0xfa
 80002dc:	005b      	lsls	r3, r3, #1
 80002de:	0039      	movs	r1, r7
 80002e0:	4807      	ldr	r0, [pc, #28]	; (8000300 <send_task03+0x38>)
 80002e2:	220d      	movs	r2, #13
 80002e4:	f001 feda 	bl	800209c <HAL_UART_Transmit>
	HAL_Delay(500);
 80002e8:	23fa      	movs	r3, #250	; 0xfa
 80002ea:	005b      	lsls	r3, r3, #1
 80002ec:	0018      	movs	r0, r3
 80002ee:	f000 faeb 	bl	80008c8 <HAL_Delay>


}
 80002f2:	46c0      	nop			; (mov r8, r8)
 80002f4:	46bd      	mov	sp, r7
 80002f6:	b005      	add	sp, #20
 80002f8:	bd90      	pop	{r4, r7, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)
 80002fc:	080043b8 	.word	0x080043b8
 8000300:	20000344 	.word	0x20000344

08000304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000304:	b5b0      	push	{r4, r5, r7, lr}
 8000306:	b096      	sub	sp, #88	; 0x58
 8000308:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800030a:	f000 faad 	bl	8000868 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800030e:	f000 f845 	bl	800039c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000312:	f000 f8c7 	bl	80004a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000316:	f000 f895 	bl	8000444 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask,  osPriorityAboveNormal, 0, 128);
 800031a:	213c      	movs	r1, #60	; 0x3c
 800031c:	187b      	adds	r3, r7, r1
 800031e:	4a19      	ldr	r2, [pc, #100]	; (8000384 <main+0x80>)
 8000320:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000322:	c331      	stmia	r3!, {r0, r4, r5}
 8000324:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000326:	c331      	stmia	r3!, {r0, r4, r5}
 8000328:	6812      	ldr	r2, [r2, #0]
 800032a:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800032c:	187b      	adds	r3, r7, r1
 800032e:	2100      	movs	r1, #0
 8000330:	0018      	movs	r0, r3
 8000332:	f002 fe66 	bl	8003002 <osThreadCreate>
 8000336:	0002      	movs	r2, r0
 8000338:	4b13      	ldr	r3, [pc, #76]	; (8000388 <main+0x84>)
 800033a:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task02 */
  osThreadDef(Task02, Task02_init, osPriorityNormal, 0, 128);
 800033c:	2120      	movs	r1, #32
 800033e:	187b      	adds	r3, r7, r1
 8000340:	4a12      	ldr	r2, [pc, #72]	; (800038c <main+0x88>)
 8000342:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000344:	c331      	stmia	r3!, {r0, r4, r5}
 8000346:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000348:	c331      	stmia	r3!, {r0, r4, r5}
 800034a:	6812      	ldr	r2, [r2, #0]
 800034c:	601a      	str	r2, [r3, #0]
  Task02Handle = osThreadCreate(osThread(Task02), NULL);
 800034e:	187b      	adds	r3, r7, r1
 8000350:	2100      	movs	r1, #0
 8000352:	0018      	movs	r0, r3
 8000354:	f002 fe55 	bl	8003002 <osThreadCreate>
 8000358:	0002      	movs	r2, r0
 800035a:	4b0d      	ldr	r3, [pc, #52]	; (8000390 <main+0x8c>)
 800035c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  /* add threads, ... */

  osThreadDef(Task03,Task03_init, osPriorityBelowNormal,0,128);
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	4a0c      	ldr	r2, [pc, #48]	; (8000394 <main+0x90>)
 8000362:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000364:	c313      	stmia	r3!, {r0, r1, r4}
 8000366:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000368:	c313      	stmia	r3!, {r0, r1, r4}
 800036a:	6812      	ldr	r2, [r2, #0]
 800036c:	601a      	str	r2, [r3, #0]
  Task03Handle = osThreadCreate(osThread(Task03),NULL);
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	2100      	movs	r1, #0
 8000372:	0018      	movs	r0, r3
 8000374:	f002 fe45 	bl	8003002 <osThreadCreate>
 8000378:	0002      	movs	r2, r0
 800037a:	4b07      	ldr	r3, [pc, #28]	; (8000398 <main+0x94>)
 800037c:	601a      	str	r2, [r3, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800037e:	f002 fe38 	bl	8002ff2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000382:	e7fe      	b.n	8000382 <main+0x7e>
 8000384:	080043c8 	.word	0x080043c8
 8000388:	200003c8 	.word	0x200003c8
 800038c:	080043e4 	.word	0x080043e4
 8000390:	200003cc 	.word	0x200003cc
 8000394:	08004400 	.word	0x08004400
 8000398:	200003d0 	.word	0x200003d0

0800039c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800039c:	b590      	push	{r4, r7, lr}
 800039e:	b099      	sub	sp, #100	; 0x64
 80003a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a2:	242c      	movs	r4, #44	; 0x2c
 80003a4:	193b      	adds	r3, r7, r4
 80003a6:	0018      	movs	r0, r3
 80003a8:	2334      	movs	r3, #52	; 0x34
 80003aa:	001a      	movs	r2, r3
 80003ac:	2100      	movs	r1, #0
 80003ae:	f003 ff03 	bl	80041b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b2:	231c      	movs	r3, #28
 80003b4:	18fb      	adds	r3, r7, r3
 80003b6:	0018      	movs	r0, r3
 80003b8:	2310      	movs	r3, #16
 80003ba:	001a      	movs	r2, r3
 80003bc:	2100      	movs	r1, #0
 80003be:	f003 fefb 	bl	80041b8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003c2:	003b      	movs	r3, r7
 80003c4:	0018      	movs	r0, r3
 80003c6:	231c      	movs	r3, #28
 80003c8:	001a      	movs	r2, r3
 80003ca:	2100      	movs	r1, #0
 80003cc:	f003 fef4 	bl	80041b8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80003d0:	193b      	adds	r3, r7, r4
 80003d2:	2220      	movs	r2, #32
 80003d4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003d6:	193b      	adds	r3, r7, r4
 80003d8:	2201      	movs	r2, #1
 80003da:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003dc:	193b      	adds	r3, r7, r4
 80003de:	2200      	movs	r2, #0
 80003e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e2:	193b      	adds	r3, r7, r4
 80003e4:	0018      	movs	r0, r3
 80003e6:	f000 fd6d 	bl	8000ec4 <HAL_RCC_OscConfig>
 80003ea:	1e03      	subs	r3, r0, #0
 80003ec:	d001      	beq.n	80003f2 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80003ee:	f000 f8e3 	bl	80005b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f2:	211c      	movs	r1, #28
 80003f4:	187b      	adds	r3, r7, r1
 80003f6:	2207      	movs	r2, #7
 80003f8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80003fa:	187b      	adds	r3, r7, r1
 80003fc:	2203      	movs	r2, #3
 80003fe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000400:	187b      	adds	r3, r7, r1
 8000402:	2200      	movs	r2, #0
 8000404:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000406:	187b      	adds	r3, r7, r1
 8000408:	2200      	movs	r2, #0
 800040a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800040c:	187b      	adds	r3, r7, r1
 800040e:	2101      	movs	r1, #1
 8000410:	0018      	movs	r0, r3
 8000412:	f001 f8dd 	bl	80015d0 <HAL_RCC_ClockConfig>
 8000416:	1e03      	subs	r3, r0, #0
 8000418:	d001      	beq.n	800041e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800041a:	f000 f8cd 	bl	80005b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800041e:	003b      	movs	r3, r7
 8000420:	2202      	movs	r2, #2
 8000422:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000424:	003b      	movs	r3, r7
 8000426:	2200      	movs	r2, #0
 8000428:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800042a:	003b      	movs	r3, r7
 800042c:	0018      	movs	r0, r3
 800042e:	f001 fa73 	bl	8001918 <HAL_RCCEx_PeriphCLKConfig>
 8000432:	1e03      	subs	r3, r0, #0
 8000434:	d001      	beq.n	800043a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000436:	f000 f8bf 	bl	80005b8 <Error_Handler>
  }
}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	46bd      	mov	sp, r7
 800043e:	b019      	add	sp, #100	; 0x64
 8000440:	bd90      	pop	{r4, r7, pc}
	...

08000444 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000448:	4b14      	ldr	r3, [pc, #80]	; (800049c <MX_USART2_UART_Init+0x58>)
 800044a:	4a15      	ldr	r2, [pc, #84]	; (80004a0 <MX_USART2_UART_Init+0x5c>)
 800044c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800044e:	4b13      	ldr	r3, [pc, #76]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000450:	2296      	movs	r2, #150	; 0x96
 8000452:	0192      	lsls	r2, r2, #6
 8000454:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000456:	4b11      	ldr	r3, [pc, #68]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000458:	2200      	movs	r2, #0
 800045a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800045c:	4b0f      	ldr	r3, [pc, #60]	; (800049c <MX_USART2_UART_Init+0x58>)
 800045e:	2200      	movs	r2, #0
 8000460:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000462:	4b0e      	ldr	r3, [pc, #56]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000464:	2200      	movs	r2, #0
 8000466:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000468:	4b0c      	ldr	r3, [pc, #48]	; (800049c <MX_USART2_UART_Init+0x58>)
 800046a:	220c      	movs	r2, #12
 800046c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800046e:	4b0b      	ldr	r3, [pc, #44]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000470:	2200      	movs	r2, #0
 8000472:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000474:	4b09      	ldr	r3, [pc, #36]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000476:	2200      	movs	r2, #0
 8000478:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800047a:	4b08      	ldr	r3, [pc, #32]	; (800049c <MX_USART2_UART_Init+0x58>)
 800047c:	2200      	movs	r2, #0
 800047e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000480:	4b06      	ldr	r3, [pc, #24]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000482:	2200      	movs	r2, #0
 8000484:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000486:	4b05      	ldr	r3, [pc, #20]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000488:	0018      	movs	r0, r3
 800048a:	f001 fdb3 	bl	8001ff4 <HAL_UART_Init>
 800048e:	1e03      	subs	r3, r0, #0
 8000490:	d001      	beq.n	8000496 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000492:	f000 f891 	bl	80005b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	20000344 	.word	0x20000344
 80004a0:	40004400 	.word	0x40004400

080004a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a4:	b590      	push	{r4, r7, lr}
 80004a6:	b089      	sub	sp, #36	; 0x24
 80004a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004aa:	240c      	movs	r4, #12
 80004ac:	193b      	adds	r3, r7, r4
 80004ae:	0018      	movs	r0, r3
 80004b0:	2314      	movs	r3, #20
 80004b2:	001a      	movs	r2, r3
 80004b4:	2100      	movs	r1, #0
 80004b6:	f003 fe7f 	bl	80041b8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ba:	4b1d      	ldr	r3, [pc, #116]	; (8000530 <MX_GPIO_Init+0x8c>)
 80004bc:	695a      	ldr	r2, [r3, #20]
 80004be:	4b1c      	ldr	r3, [pc, #112]	; (8000530 <MX_GPIO_Init+0x8c>)
 80004c0:	2180      	movs	r1, #128	; 0x80
 80004c2:	03c9      	lsls	r1, r1, #15
 80004c4:	430a      	orrs	r2, r1
 80004c6:	615a      	str	r2, [r3, #20]
 80004c8:	4b19      	ldr	r3, [pc, #100]	; (8000530 <MX_GPIO_Init+0x8c>)
 80004ca:	695a      	ldr	r2, [r3, #20]
 80004cc:	2380      	movs	r3, #128	; 0x80
 80004ce:	03db      	lsls	r3, r3, #15
 80004d0:	4013      	ands	r3, r2
 80004d2:	60bb      	str	r3, [r7, #8]
 80004d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d6:	4b16      	ldr	r3, [pc, #88]	; (8000530 <MX_GPIO_Init+0x8c>)
 80004d8:	695a      	ldr	r2, [r3, #20]
 80004da:	4b15      	ldr	r3, [pc, #84]	; (8000530 <MX_GPIO_Init+0x8c>)
 80004dc:	2180      	movs	r1, #128	; 0x80
 80004de:	0289      	lsls	r1, r1, #10
 80004e0:	430a      	orrs	r2, r1
 80004e2:	615a      	str	r2, [r3, #20]
 80004e4:	4b12      	ldr	r3, [pc, #72]	; (8000530 <MX_GPIO_Init+0x8c>)
 80004e6:	695a      	ldr	r2, [r3, #20]
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	029b      	lsls	r3, r3, #10
 80004ec:	4013      	ands	r3, r2
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUTPUT01_Pin|OUTPUT02_Pin, GPIO_PIN_RESET);
 80004f2:	2390      	movs	r3, #144	; 0x90
 80004f4:	05db      	lsls	r3, r3, #23
 80004f6:	2200      	movs	r2, #0
 80004f8:	2103      	movs	r1, #3
 80004fa:	0018      	movs	r0, r3
 80004fc:	f000 fcaa 	bl	8000e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OUTPUT01_Pin OUTPUT02_Pin */
  GPIO_InitStruct.Pin = OUTPUT01_Pin|OUTPUT02_Pin;
 8000500:	0021      	movs	r1, r4
 8000502:	187b      	adds	r3, r7, r1
 8000504:	2203      	movs	r2, #3
 8000506:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000508:	187b      	adds	r3, r7, r1
 800050a:	2201      	movs	r2, #1
 800050c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050e:	187b      	adds	r3, r7, r1
 8000510:	2200      	movs	r2, #0
 8000512:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000514:	187b      	adds	r3, r7, r1
 8000516:	2200      	movs	r2, #0
 8000518:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051a:	187a      	adds	r2, r7, r1
 800051c:	2390      	movs	r3, #144	; 0x90
 800051e:	05db      	lsls	r3, r3, #23
 8000520:	0011      	movs	r1, r2
 8000522:	0018      	movs	r0, r3
 8000524:	f000 fb1e 	bl	8000b64 <HAL_GPIO_Init>

}
 8000528:	46c0      	nop			; (mov r8, r8)
 800052a:	46bd      	mov	sp, r7
 800052c:	b009      	add	sp, #36	; 0x24
 800052e:	bd90      	pop	{r4, r7, pc}
 8000530:	40021000 	.word	0x40021000

08000534 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	send_task01();
 800053c:	f7ff fe88 	bl	8000250 <send_task01>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8000540:	2390      	movs	r3, #144	; 0x90
 8000542:	05db      	lsls	r3, r3, #23
 8000544:	2101      	movs	r1, #1
 8000546:	0018      	movs	r0, r3
 8000548:	f000 fca1 	bl	8000e8e <HAL_GPIO_TogglePin>
    osDelay(1000);
 800054c:	23fa      	movs	r3, #250	; 0xfa
 800054e:	009b      	lsls	r3, r3, #2
 8000550:	0018      	movs	r0, r3
 8000552:	f002 fda3 	bl	800309c <osDelay>
	send_task01();
 8000556:	e7f1      	b.n	800053c <StartDefaultTask+0x8>

08000558 <Task02_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task02_init */
void Task02_init(void const * argument)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task02_init */
  /* Infinite loop */
  for(;;)
  {

	send_task02();
 8000560:	f7ff fe94 	bl	800028c <send_task02>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000564:	2390      	movs	r3, #144	; 0x90
 8000566:	05db      	lsls	r3, r3, #23
 8000568:	2102      	movs	r1, #2
 800056a:	0018      	movs	r0, r3
 800056c:	f000 fc8f 	bl	8000e8e <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000570:	23fa      	movs	r3, #250	; 0xfa
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	0018      	movs	r0, r3
 8000576:	f002 fd91 	bl	800309c <osDelay>
	send_task02();
 800057a:	e7f1      	b.n	8000560 <Task02_init+0x8>

0800057c <Task03_init>:
  /* USER CODE END Task02_init */
}


void Task03_init(void const * argument)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task02_init */
  /* Infinite loop */
  while(1)
  {

	  send_task03();
 8000584:	f7ff fea0 	bl	80002c8 <send_task03>
	  osDelay(1000);
 8000588:	23fa      	movs	r3, #250	; 0xfa
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	0018      	movs	r0, r3
 800058e:	f002 fd85 	bl	800309c <osDelay>
	  send_task03();
 8000592:	e7f7      	b.n	8000584 <Task03_init+0x8>

08000594 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d101      	bne.n	80005aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005a6:	f000 f973 	bl	8000890 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	46bd      	mov	sp, r7
 80005ae:	b002      	add	sp, #8
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	40012c00 	.word	0x40012c00

080005b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005bc:	b672      	cpsid	i
}
 80005be:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <Error_Handler+0x8>
	...

080005c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ca:	4b12      	ldr	r3, [pc, #72]	; (8000614 <HAL_MspInit+0x50>)
 80005cc:	699a      	ldr	r2, [r3, #24]
 80005ce:	4b11      	ldr	r3, [pc, #68]	; (8000614 <HAL_MspInit+0x50>)
 80005d0:	2101      	movs	r1, #1
 80005d2:	430a      	orrs	r2, r1
 80005d4:	619a      	str	r2, [r3, #24]
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <HAL_MspInit+0x50>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	2201      	movs	r2, #1
 80005dc:	4013      	ands	r3, r2
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <HAL_MspInit+0x50>)
 80005e4:	69da      	ldr	r2, [r3, #28]
 80005e6:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <HAL_MspInit+0x50>)
 80005e8:	2180      	movs	r1, #128	; 0x80
 80005ea:	0549      	lsls	r1, r1, #21
 80005ec:	430a      	orrs	r2, r1
 80005ee:	61da      	str	r2, [r3, #28]
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <HAL_MspInit+0x50>)
 80005f2:	69da      	ldr	r2, [r3, #28]
 80005f4:	2380      	movs	r3, #128	; 0x80
 80005f6:	055b      	lsls	r3, r3, #21
 80005f8:	4013      	ands	r3, r2
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80005fe:	2302      	movs	r3, #2
 8000600:	425b      	negs	r3, r3
 8000602:	2200      	movs	r2, #0
 8000604:	2103      	movs	r1, #3
 8000606:	0018      	movs	r0, r3
 8000608:	f000 fa0a 	bl	8000a20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060c:	46c0      	nop			; (mov r8, r8)
 800060e:	46bd      	mov	sp, r7
 8000610:	b002      	add	sp, #8
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40021000 	.word	0x40021000

08000618 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000618:	b590      	push	{r4, r7, lr}
 800061a:	b08b      	sub	sp, #44	; 0x2c
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000620:	2414      	movs	r4, #20
 8000622:	193b      	adds	r3, r7, r4
 8000624:	0018      	movs	r0, r3
 8000626:	2314      	movs	r3, #20
 8000628:	001a      	movs	r2, r3
 800062a:	2100      	movs	r1, #0
 800062c:	f003 fdc4 	bl	80041b8 <memset>
  if(huart->Instance==USART2)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a20      	ldr	r2, [pc, #128]	; (80006b8 <HAL_UART_MspInit+0xa0>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d13a      	bne.n	80006b0 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800063a:	4b20      	ldr	r3, [pc, #128]	; (80006bc <HAL_UART_MspInit+0xa4>)
 800063c:	69da      	ldr	r2, [r3, #28]
 800063e:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <HAL_UART_MspInit+0xa4>)
 8000640:	2180      	movs	r1, #128	; 0x80
 8000642:	0289      	lsls	r1, r1, #10
 8000644:	430a      	orrs	r2, r1
 8000646:	61da      	str	r2, [r3, #28]
 8000648:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <HAL_UART_MspInit+0xa4>)
 800064a:	69da      	ldr	r2, [r3, #28]
 800064c:	2380      	movs	r3, #128	; 0x80
 800064e:	029b      	lsls	r3, r3, #10
 8000650:	4013      	ands	r3, r2
 8000652:	613b      	str	r3, [r7, #16]
 8000654:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	4b19      	ldr	r3, [pc, #100]	; (80006bc <HAL_UART_MspInit+0xa4>)
 8000658:	695a      	ldr	r2, [r3, #20]
 800065a:	4b18      	ldr	r3, [pc, #96]	; (80006bc <HAL_UART_MspInit+0xa4>)
 800065c:	2180      	movs	r1, #128	; 0x80
 800065e:	0289      	lsls	r1, r1, #10
 8000660:	430a      	orrs	r2, r1
 8000662:	615a      	str	r2, [r3, #20]
 8000664:	4b15      	ldr	r3, [pc, #84]	; (80006bc <HAL_UART_MspInit+0xa4>)
 8000666:	695a      	ldr	r2, [r3, #20]
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	029b      	lsls	r3, r3, #10
 800066c:	4013      	ands	r3, r2
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = TX02_Pin|RX02_Pin;
 8000672:	0021      	movs	r1, r4
 8000674:	187b      	adds	r3, r7, r1
 8000676:	220c      	movs	r2, #12
 8000678:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067a:	187b      	adds	r3, r7, r1
 800067c:	2202      	movs	r2, #2
 800067e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	187b      	adds	r3, r7, r1
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000686:	187b      	adds	r3, r7, r1
 8000688:	2203      	movs	r2, #3
 800068a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2201      	movs	r2, #1
 8000690:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000692:	187a      	adds	r2, r7, r1
 8000694:	2390      	movs	r3, #144	; 0x90
 8000696:	05db      	lsls	r3, r3, #23
 8000698:	0011      	movs	r1, r2
 800069a:	0018      	movs	r0, r3
 800069c:	f000 fa62 	bl	8000b64 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2103      	movs	r1, #3
 80006a4:	201c      	movs	r0, #28
 80006a6:	f000 f9bb 	bl	8000a20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006aa:	201c      	movs	r0, #28
 80006ac:	f000 f9cd 	bl	8000a4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006b0:	46c0      	nop			; (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	b00b      	add	sp, #44	; 0x2c
 80006b6:	bd90      	pop	{r4, r7, pc}
 80006b8:	40004400 	.word	0x40004400
 80006bc:	40021000 	.word	0x40021000

080006c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c0:	b5b0      	push	{r4, r5, r7, lr}
 80006c2:	b08c      	sub	sp, #48	; 0x30
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80006c8:	2300      	movs	r3, #0
 80006ca:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t              uwPrescalerValue = 0U;
 80006cc:	2300      	movs	r3, #0
 80006ce:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80006d0:	4b38      	ldr	r3, [pc, #224]	; (80007b4 <HAL_InitTick+0xf4>)
 80006d2:	699a      	ldr	r2, [r3, #24]
 80006d4:	4b37      	ldr	r3, [pc, #220]	; (80007b4 <HAL_InitTick+0xf4>)
 80006d6:	2180      	movs	r1, #128	; 0x80
 80006d8:	0109      	lsls	r1, r1, #4
 80006da:	430a      	orrs	r2, r1
 80006dc:	619a      	str	r2, [r3, #24]
 80006de:	4b35      	ldr	r3, [pc, #212]	; (80007b4 <HAL_InitTick+0xf4>)
 80006e0:	699a      	ldr	r2, [r3, #24]
 80006e2:	2380      	movs	r3, #128	; 0x80
 80006e4:	011b      	lsls	r3, r3, #4
 80006e6:	4013      	ands	r3, r2
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006ec:	230c      	movs	r3, #12
 80006ee:	18fa      	adds	r2, r7, r3
 80006f0:	2410      	movs	r4, #16
 80006f2:	193b      	adds	r3, r7, r4
 80006f4:	0011      	movs	r1, r2
 80006f6:	0018      	movs	r0, r3
 80006f8:	f001 f8e4 	bl	80018c4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000704:	2b00      	cmp	r3, #0
 8000706:	d104      	bne.n	8000712 <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000708:	f001 f8c6 	bl	8001898 <HAL_RCC_GetPCLK1Freq>
 800070c:	0003      	movs	r3, r0
 800070e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000710:	e004      	b.n	800071c <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000712:	f001 f8c1 	bl	8001898 <HAL_RCC_GetPCLK1Freq>
 8000716:	0003      	movs	r3, r0
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800071c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800071e:	4926      	ldr	r1, [pc, #152]	; (80007b8 <HAL_InitTick+0xf8>)
 8000720:	0018      	movs	r0, r3
 8000722:	f7ff fcf1 	bl	8000108 <__udivsi3>
 8000726:	0003      	movs	r3, r0
 8000728:	3b01      	subs	r3, #1
 800072a:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800072c:	4b23      	ldr	r3, [pc, #140]	; (80007bc <HAL_InitTick+0xfc>)
 800072e:	4a24      	ldr	r2, [pc, #144]	; (80007c0 <HAL_InitTick+0x100>)
 8000730:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000732:	4b22      	ldr	r3, [pc, #136]	; (80007bc <HAL_InitTick+0xfc>)
 8000734:	4a23      	ldr	r2, [pc, #140]	; (80007c4 <HAL_InitTick+0x104>)
 8000736:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000738:	4b20      	ldr	r3, [pc, #128]	; (80007bc <HAL_InitTick+0xfc>)
 800073a:	6a3a      	ldr	r2, [r7, #32]
 800073c:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 800073e:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <HAL_InitTick+0xfc>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000744:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <HAL_InitTick+0xfc>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074a:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <HAL_InitTick+0xfc>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000750:	252b      	movs	r5, #43	; 0x2b
 8000752:	197c      	adds	r4, r7, r5
 8000754:	4b19      	ldr	r3, [pc, #100]	; (80007bc <HAL_InitTick+0xfc>)
 8000756:	0018      	movs	r0, r3
 8000758:	f001 f9dc 	bl	8001b14 <HAL_TIM_Base_Init>
 800075c:	0003      	movs	r3, r0
 800075e:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000760:	197b      	adds	r3, r7, r5
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d11e      	bne.n	80007a6 <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000768:	197c      	adds	r4, r7, r5
 800076a:	4b14      	ldr	r3, [pc, #80]	; (80007bc <HAL_InitTick+0xfc>)
 800076c:	0018      	movs	r0, r3
 800076e:	f001 fa29 	bl	8001bc4 <HAL_TIM_Base_Start_IT>
 8000772:	0003      	movs	r3, r0
 8000774:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8000776:	197b      	adds	r3, r7, r5
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d113      	bne.n	80007a6 <HAL_InitTick+0xe6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800077e:	200d      	movs	r0, #13
 8000780:	f000 f963 	bl	8000a4a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b03      	cmp	r3, #3
 8000788:	d809      	bhi.n	800079e <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2200      	movs	r2, #0
 800078e:	0019      	movs	r1, r3
 8000790:	200d      	movs	r0, #13
 8000792:	f000 f945 	bl	8000a20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <HAL_InitTick+0x108>)
 8000798:	687a      	ldr	r2, [r7, #4]
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	e003      	b.n	80007a6 <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 800079e:	232b      	movs	r3, #43	; 0x2b
 80007a0:	18fb      	adds	r3, r7, r3
 80007a2:	2201      	movs	r2, #1
 80007a4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 80007a6:	232b      	movs	r3, #43	; 0x2b
 80007a8:	18fb      	adds	r3, r7, r3
 80007aa:	781b      	ldrb	r3, [r3, #0]
}
 80007ac:	0018      	movs	r0, r3
 80007ae:	46bd      	mov	sp, r7
 80007b0:	b00c      	add	sp, #48	; 0x30
 80007b2:	bdb0      	pop	{r4, r5, r7, pc}
 80007b4:	40021000 	.word	0x40021000
 80007b8:	000f4240 	.word	0x000f4240
 80007bc:	200003d4 	.word	0x200003d4
 80007c0:	40012c00 	.word	0x40012c00
 80007c4:	000003e7 	.word	0x000003e7
 80007c8:	20000004 	.word	0x20000004

080007cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <NMI_Handler+0x4>

080007d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d6:	e7fe      	b.n	80007d6 <HardFault_Handler+0x4>

080007d8 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80007dc:	4b03      	ldr	r3, [pc, #12]	; (80007ec <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80007de:	0018      	movs	r0, r3
 80007e0:	f001 fa42 	bl	8001c68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80007e4:	46c0      	nop			; (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	200003d4 	.word	0x200003d4

080007f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007f4:	4b03      	ldr	r3, [pc, #12]	; (8000804 <USART2_IRQHandler+0x14>)
 80007f6:	0018      	movs	r0, r3
 80007f8:	f001 fcfa 	bl	80021f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007fc:	46c0      	nop			; (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	20000344 	.word	0x20000344

08000808 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000814:	480d      	ldr	r0, [pc, #52]	; (800084c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000816:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000818:	480d      	ldr	r0, [pc, #52]	; (8000850 <LoopForever+0x6>)
  ldr r1, =_edata
 800081a:	490e      	ldr	r1, [pc, #56]	; (8000854 <LoopForever+0xa>)
  ldr r2, =_sidata
 800081c:	4a0e      	ldr	r2, [pc, #56]	; (8000858 <LoopForever+0xe>)
  movs r3, #0
 800081e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000820:	e002      	b.n	8000828 <LoopCopyDataInit>

08000822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000826:	3304      	adds	r3, #4

08000828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800082a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800082c:	d3f9      	bcc.n	8000822 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800082e:	4a0b      	ldr	r2, [pc, #44]	; (800085c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000830:	4c0b      	ldr	r4, [pc, #44]	; (8000860 <LoopForever+0x16>)
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000834:	e001      	b.n	800083a <LoopFillZerobss>

08000836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000838:	3204      	adds	r2, #4

0800083a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800083a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800083c:	d3fb      	bcc.n	8000836 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800083e:	f7ff ffe3 	bl	8000808 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000842:	f003 fc93 	bl	800416c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000846:	f7ff fd5d 	bl	8000304 <main>

0800084a <LoopForever>:

LoopForever:
    b LoopForever
 800084a:	e7fe      	b.n	800084a <LoopForever>
  ldr   r0, =_estack
 800084c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000854:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000858:	080044c4 	.word	0x080044c4
  ldr r2, =_sbss
 800085c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000860:	2000116c 	.word	0x2000116c

08000864 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000864:	e7fe      	b.n	8000864 <ADC1_COMP_IRQHandler>
	...

08000868 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <HAL_Init+0x24>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <HAL_Init+0x24>)
 8000872:	2110      	movs	r1, #16
 8000874:	430a      	orrs	r2, r1
 8000876:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000878:	2003      	movs	r0, #3
 800087a:	f7ff ff21 	bl	80006c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800087e:	f7ff fea1 	bl	80005c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000882:	2300      	movs	r3, #0
}
 8000884:	0018      	movs	r0, r3
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	40022000 	.word	0x40022000

08000890 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <HAL_IncTick+0x1c>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	001a      	movs	r2, r3
 800089a:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <HAL_IncTick+0x20>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	18d2      	adds	r2, r2, r3
 80008a0:	4b03      	ldr	r3, [pc, #12]	; (80008b0 <HAL_IncTick+0x20>)
 80008a2:	601a      	str	r2, [r3, #0]
}
 80008a4:	46c0      	nop			; (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	20000008 	.word	0x20000008
 80008b0:	2000041c 	.word	0x2000041c

080008b4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  return uwTick;
 80008b8:	4b02      	ldr	r3, [pc, #8]	; (80008c4 <HAL_GetTick+0x10>)
 80008ba:	681b      	ldr	r3, [r3, #0]
}
 80008bc:	0018      	movs	r0, r3
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	2000041c 	.word	0x2000041c

080008c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008d0:	f7ff fff0 	bl	80008b4 <HAL_GetTick>
 80008d4:	0003      	movs	r3, r0
 80008d6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	3301      	adds	r3, #1
 80008e0:	d005      	beq.n	80008ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008e2:	4b0a      	ldr	r3, [pc, #40]	; (800090c <HAL_Delay+0x44>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	001a      	movs	r2, r3
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	189b      	adds	r3, r3, r2
 80008ec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	f7ff ffe0 	bl	80008b4 <HAL_GetTick>
 80008f4:	0002      	movs	r2, r0
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	68fa      	ldr	r2, [r7, #12]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d8f7      	bhi.n	80008f0 <HAL_Delay+0x28>
  {
  }
}
 8000900:	46c0      	nop			; (mov r8, r8)
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	46bd      	mov	sp, r7
 8000906:	b004      	add	sp, #16
 8000908:	bd80      	pop	{r7, pc}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	20000008 	.word	0x20000008

08000910 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	0002      	movs	r2, r0
 8000918:	1dfb      	adds	r3, r7, #7
 800091a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800091c:	1dfb      	adds	r3, r7, #7
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b7f      	cmp	r3, #127	; 0x7f
 8000922:	d809      	bhi.n	8000938 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000924:	1dfb      	adds	r3, r7, #7
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	001a      	movs	r2, r3
 800092a:	231f      	movs	r3, #31
 800092c:	401a      	ands	r2, r3
 800092e:	4b04      	ldr	r3, [pc, #16]	; (8000940 <__NVIC_EnableIRQ+0x30>)
 8000930:	2101      	movs	r1, #1
 8000932:	4091      	lsls	r1, r2
 8000934:	000a      	movs	r2, r1
 8000936:	601a      	str	r2, [r3, #0]
  }
}
 8000938:	46c0      	nop			; (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	b002      	add	sp, #8
 800093e:	bd80      	pop	{r7, pc}
 8000940:	e000e100 	.word	0xe000e100

08000944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	0002      	movs	r2, r0
 800094c:	6039      	str	r1, [r7, #0]
 800094e:	1dfb      	adds	r3, r7, #7
 8000950:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000952:	1dfb      	adds	r3, r7, #7
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b7f      	cmp	r3, #127	; 0x7f
 8000958:	d828      	bhi.n	80009ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800095a:	4a2f      	ldr	r2, [pc, #188]	; (8000a18 <__NVIC_SetPriority+0xd4>)
 800095c:	1dfb      	adds	r3, r7, #7
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	b25b      	sxtb	r3, r3
 8000962:	089b      	lsrs	r3, r3, #2
 8000964:	33c0      	adds	r3, #192	; 0xc0
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	589b      	ldr	r3, [r3, r2]
 800096a:	1dfa      	adds	r2, r7, #7
 800096c:	7812      	ldrb	r2, [r2, #0]
 800096e:	0011      	movs	r1, r2
 8000970:	2203      	movs	r2, #3
 8000972:	400a      	ands	r2, r1
 8000974:	00d2      	lsls	r2, r2, #3
 8000976:	21ff      	movs	r1, #255	; 0xff
 8000978:	4091      	lsls	r1, r2
 800097a:	000a      	movs	r2, r1
 800097c:	43d2      	mvns	r2, r2
 800097e:	401a      	ands	r2, r3
 8000980:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	019b      	lsls	r3, r3, #6
 8000986:	22ff      	movs	r2, #255	; 0xff
 8000988:	401a      	ands	r2, r3
 800098a:	1dfb      	adds	r3, r7, #7
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	0018      	movs	r0, r3
 8000990:	2303      	movs	r3, #3
 8000992:	4003      	ands	r3, r0
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000998:	481f      	ldr	r0, [pc, #124]	; (8000a18 <__NVIC_SetPriority+0xd4>)
 800099a:	1dfb      	adds	r3, r7, #7
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	b25b      	sxtb	r3, r3
 80009a0:	089b      	lsrs	r3, r3, #2
 80009a2:	430a      	orrs	r2, r1
 80009a4:	33c0      	adds	r3, #192	; 0xc0
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009aa:	e031      	b.n	8000a10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009ac:	4a1b      	ldr	r2, [pc, #108]	; (8000a1c <__NVIC_SetPriority+0xd8>)
 80009ae:	1dfb      	adds	r3, r7, #7
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	0019      	movs	r1, r3
 80009b4:	230f      	movs	r3, #15
 80009b6:	400b      	ands	r3, r1
 80009b8:	3b08      	subs	r3, #8
 80009ba:	089b      	lsrs	r3, r3, #2
 80009bc:	3306      	adds	r3, #6
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	18d3      	adds	r3, r2, r3
 80009c2:	3304      	adds	r3, #4
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	1dfa      	adds	r2, r7, #7
 80009c8:	7812      	ldrb	r2, [r2, #0]
 80009ca:	0011      	movs	r1, r2
 80009cc:	2203      	movs	r2, #3
 80009ce:	400a      	ands	r2, r1
 80009d0:	00d2      	lsls	r2, r2, #3
 80009d2:	21ff      	movs	r1, #255	; 0xff
 80009d4:	4091      	lsls	r1, r2
 80009d6:	000a      	movs	r2, r1
 80009d8:	43d2      	mvns	r2, r2
 80009da:	401a      	ands	r2, r3
 80009dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	019b      	lsls	r3, r3, #6
 80009e2:	22ff      	movs	r2, #255	; 0xff
 80009e4:	401a      	ands	r2, r3
 80009e6:	1dfb      	adds	r3, r7, #7
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	0018      	movs	r0, r3
 80009ec:	2303      	movs	r3, #3
 80009ee:	4003      	ands	r3, r0
 80009f0:	00db      	lsls	r3, r3, #3
 80009f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009f4:	4809      	ldr	r0, [pc, #36]	; (8000a1c <__NVIC_SetPriority+0xd8>)
 80009f6:	1dfb      	adds	r3, r7, #7
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	001c      	movs	r4, r3
 80009fc:	230f      	movs	r3, #15
 80009fe:	4023      	ands	r3, r4
 8000a00:	3b08      	subs	r3, #8
 8000a02:	089b      	lsrs	r3, r3, #2
 8000a04:	430a      	orrs	r2, r1
 8000a06:	3306      	adds	r3, #6
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	18c3      	adds	r3, r0, r3
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	601a      	str	r2, [r3, #0]
}
 8000a10:	46c0      	nop			; (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b003      	add	sp, #12
 8000a16:	bd90      	pop	{r4, r7, pc}
 8000a18:	e000e100 	.word	0xe000e100
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60b9      	str	r1, [r7, #8]
 8000a28:	607a      	str	r2, [r7, #4]
 8000a2a:	210f      	movs	r1, #15
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	1c02      	adds	r2, r0, #0
 8000a30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	b25b      	sxtb	r3, r3
 8000a3a:	0011      	movs	r1, r2
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f7ff ff81 	bl	8000944 <__NVIC_SetPriority>
}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	46bd      	mov	sp, r7
 8000a46:	b004      	add	sp, #16
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	0002      	movs	r2, r0
 8000a52:	1dfb      	adds	r3, r7, #7
 8000a54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a56:	1dfb      	adds	r3, r7, #7
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	b25b      	sxtb	r3, r3
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f7ff ff57 	bl	8000910 <__NVIC_EnableIRQ>
}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	46bd      	mov	sp, r7
 8000a66:	b002      	add	sp, #8
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b082      	sub	sp, #8
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2221      	movs	r2, #33	; 0x21
 8000a76:	5c9b      	ldrb	r3, [r3, r2]
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	2b02      	cmp	r3, #2
 8000a7c:	d008      	beq.n	8000a90 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2204      	movs	r2, #4
 8000a82:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2220      	movs	r2, #32
 8000a88:	2100      	movs	r1, #0
 8000a8a:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	e020      	b.n	8000ad2 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	210e      	movs	r1, #14
 8000a9c:	438a      	bics	r2, r1
 8000a9e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2101      	movs	r1, #1
 8000aac:	438a      	bics	r2, r1
 8000aae:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ab8:	2101      	movs	r1, #1
 8000aba:	4091      	lsls	r1, r2
 8000abc:	000a      	movs	r2, r1
 8000abe:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2221      	movs	r2, #33	; 0x21
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2220      	movs	r2, #32
 8000acc:	2100      	movs	r1, #0
 8000ace:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	b002      	add	sp, #8
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b084      	sub	sp, #16
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ae2:	210f      	movs	r1, #15
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2221      	movs	r2, #33	; 0x21
 8000aee:	5c9b      	ldrb	r3, [r3, r2]
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	2b02      	cmp	r3, #2
 8000af4:	d006      	beq.n	8000b04 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2204      	movs	r2, #4
 8000afa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	2201      	movs	r2, #1
 8000b00:	701a      	strb	r2, [r3, #0]
 8000b02:	e028      	b.n	8000b56 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	210e      	movs	r1, #14
 8000b10:	438a      	bics	r2, r1
 8000b12:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2101      	movs	r1, #1
 8000b20:	438a      	bics	r2, r1
 8000b22:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	4091      	lsls	r1, r2
 8000b30:	000a      	movs	r2, r1
 8000b32:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2221      	movs	r2, #33	; 0x21
 8000b38:	2101      	movs	r1, #1
 8000b3a:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2220      	movs	r2, #32
 8000b40:	2100      	movs	r1, #0
 8000b42:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d004      	beq.n	8000b56 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	0010      	movs	r0, r2
 8000b54:	4798      	blx	r3
    } 
  }
  return status;
 8000b56:	230f      	movs	r3, #15
 8000b58:	18fb      	adds	r3, r7, r3
 8000b5a:	781b      	ldrb	r3, [r3, #0]
}
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	b004      	add	sp, #16
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b72:	e155      	b.n	8000e20 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2101      	movs	r1, #1
 8000b7a:	697a      	ldr	r2, [r7, #20]
 8000b7c:	4091      	lsls	r1, r2
 8000b7e:	000a      	movs	r2, r1
 8000b80:	4013      	ands	r3, r2
 8000b82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d100      	bne.n	8000b8c <HAL_GPIO_Init+0x28>
 8000b8a:	e146      	b.n	8000e1a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	2203      	movs	r2, #3
 8000b92:	4013      	ands	r3, r2
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d005      	beq.n	8000ba4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	2203      	movs	r2, #3
 8000b9e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d130      	bne.n	8000c06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	2203      	movs	r2, #3
 8000bb0:	409a      	lsls	r2, r3
 8000bb2:	0013      	movs	r3, r2
 8000bb4:	43da      	mvns	r2, r3
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	68da      	ldr	r2, [r3, #12]
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	409a      	lsls	r2, r3
 8000bc6:	0013      	movs	r3, r2
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bda:	2201      	movs	r2, #1
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	409a      	lsls	r2, r3
 8000be0:	0013      	movs	r3, r2
 8000be2:	43da      	mvns	r2, r3
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	4013      	ands	r3, r2
 8000be8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	091b      	lsrs	r3, r3, #4
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	401a      	ands	r2, r3
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	409a      	lsls	r2, r3
 8000bf8:	0013      	movs	r3, r2
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	2203      	movs	r2, #3
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	2b03      	cmp	r3, #3
 8000c10:	d017      	beq.n	8000c42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	409a      	lsls	r2, r3
 8000c20:	0013      	movs	r3, r2
 8000c22:	43da      	mvns	r2, r3
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	4013      	ands	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	689a      	ldr	r2, [r3, #8]
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	409a      	lsls	r2, r3
 8000c34:	0013      	movs	r3, r2
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	2203      	movs	r2, #3
 8000c48:	4013      	ands	r3, r2
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d123      	bne.n	8000c96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	08da      	lsrs	r2, r3, #3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	3208      	adds	r2, #8
 8000c56:	0092      	lsls	r2, r2, #2
 8000c58:	58d3      	ldr	r3, [r2, r3]
 8000c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	2207      	movs	r2, #7
 8000c60:	4013      	ands	r3, r2
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	220f      	movs	r2, #15
 8000c66:	409a      	lsls	r2, r3
 8000c68:	0013      	movs	r3, r2
 8000c6a:	43da      	mvns	r2, r3
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	691a      	ldr	r2, [r3, #16]
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	2107      	movs	r1, #7
 8000c7a:	400b      	ands	r3, r1
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	409a      	lsls	r2, r3
 8000c80:	0013      	movs	r3, r2
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	08da      	lsrs	r2, r3, #3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3208      	adds	r2, #8
 8000c90:	0092      	lsls	r2, r2, #2
 8000c92:	6939      	ldr	r1, [r7, #16]
 8000c94:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	2203      	movs	r2, #3
 8000ca2:	409a      	lsls	r2, r3
 8000ca4:	0013      	movs	r3, r2
 8000ca6:	43da      	mvns	r2, r3
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	4013      	ands	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	2203      	movs	r2, #3
 8000cb4:	401a      	ands	r2, r3
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	409a      	lsls	r2, r3
 8000cbc:	0013      	movs	r3, r2
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685a      	ldr	r2, [r3, #4]
 8000cce:	23c0      	movs	r3, #192	; 0xc0
 8000cd0:	029b      	lsls	r3, r3, #10
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	d100      	bne.n	8000cd8 <HAL_GPIO_Init+0x174>
 8000cd6:	e0a0      	b.n	8000e1a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd8:	4b57      	ldr	r3, [pc, #348]	; (8000e38 <HAL_GPIO_Init+0x2d4>)
 8000cda:	699a      	ldr	r2, [r3, #24]
 8000cdc:	4b56      	ldr	r3, [pc, #344]	; (8000e38 <HAL_GPIO_Init+0x2d4>)
 8000cde:	2101      	movs	r1, #1
 8000ce0:	430a      	orrs	r2, r1
 8000ce2:	619a      	str	r2, [r3, #24]
 8000ce4:	4b54      	ldr	r3, [pc, #336]	; (8000e38 <HAL_GPIO_Init+0x2d4>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	2201      	movs	r2, #1
 8000cea:	4013      	ands	r3, r2
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cf0:	4a52      	ldr	r2, [pc, #328]	; (8000e3c <HAL_GPIO_Init+0x2d8>)
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	089b      	lsrs	r3, r3, #2
 8000cf6:	3302      	adds	r3, #2
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	589b      	ldr	r3, [r3, r2]
 8000cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	2203      	movs	r2, #3
 8000d02:	4013      	ands	r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	220f      	movs	r2, #15
 8000d08:	409a      	lsls	r2, r3
 8000d0a:	0013      	movs	r3, r2
 8000d0c:	43da      	mvns	r2, r3
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	4013      	ands	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	2390      	movs	r3, #144	; 0x90
 8000d18:	05db      	lsls	r3, r3, #23
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d019      	beq.n	8000d52 <HAL_GPIO_Init+0x1ee>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a47      	ldr	r2, [pc, #284]	; (8000e40 <HAL_GPIO_Init+0x2dc>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d013      	beq.n	8000d4e <HAL_GPIO_Init+0x1ea>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a46      	ldr	r2, [pc, #280]	; (8000e44 <HAL_GPIO_Init+0x2e0>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d00d      	beq.n	8000d4a <HAL_GPIO_Init+0x1e6>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a45      	ldr	r2, [pc, #276]	; (8000e48 <HAL_GPIO_Init+0x2e4>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d007      	beq.n	8000d46 <HAL_GPIO_Init+0x1e2>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a44      	ldr	r2, [pc, #272]	; (8000e4c <HAL_GPIO_Init+0x2e8>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d101      	bne.n	8000d42 <HAL_GPIO_Init+0x1de>
 8000d3e:	2304      	movs	r3, #4
 8000d40:	e008      	b.n	8000d54 <HAL_GPIO_Init+0x1f0>
 8000d42:	2305      	movs	r3, #5
 8000d44:	e006      	b.n	8000d54 <HAL_GPIO_Init+0x1f0>
 8000d46:	2303      	movs	r3, #3
 8000d48:	e004      	b.n	8000d54 <HAL_GPIO_Init+0x1f0>
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	e002      	b.n	8000d54 <HAL_GPIO_Init+0x1f0>
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e000      	b.n	8000d54 <HAL_GPIO_Init+0x1f0>
 8000d52:	2300      	movs	r3, #0
 8000d54:	697a      	ldr	r2, [r7, #20]
 8000d56:	2103      	movs	r1, #3
 8000d58:	400a      	ands	r2, r1
 8000d5a:	0092      	lsls	r2, r2, #2
 8000d5c:	4093      	lsls	r3, r2
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d64:	4935      	ldr	r1, [pc, #212]	; (8000e3c <HAL_GPIO_Init+0x2d8>)
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	089b      	lsrs	r3, r3, #2
 8000d6a:	3302      	adds	r3, #2
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d72:	4b37      	ldr	r3, [pc, #220]	; (8000e50 <HAL_GPIO_Init+0x2ec>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	43da      	mvns	r2, r3
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685a      	ldr	r2, [r3, #4]
 8000d86:	2380      	movs	r3, #128	; 0x80
 8000d88:	025b      	lsls	r3, r3, #9
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	d003      	beq.n	8000d96 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d96:	4b2e      	ldr	r3, [pc, #184]	; (8000e50 <HAL_GPIO_Init+0x2ec>)
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000d9c:	4b2c      	ldr	r3, [pc, #176]	; (8000e50 <HAL_GPIO_Init+0x2ec>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	43da      	mvns	r2, r3
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	4013      	ands	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685a      	ldr	r2, [r3, #4]
 8000db0:	2380      	movs	r3, #128	; 0x80
 8000db2:	029b      	lsls	r3, r3, #10
 8000db4:	4013      	ands	r3, r2
 8000db6:	d003      	beq.n	8000dc0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000dc0:	4b23      	ldr	r3, [pc, #140]	; (8000e50 <HAL_GPIO_Init+0x2ec>)
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dc6:	4b22      	ldr	r3, [pc, #136]	; (8000e50 <HAL_GPIO_Init+0x2ec>)
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	43da      	mvns	r2, r3
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685a      	ldr	r2, [r3, #4]
 8000dda:	2380      	movs	r3, #128	; 0x80
 8000ddc:	035b      	lsls	r3, r3, #13
 8000dde:	4013      	ands	r3, r2
 8000de0:	d003      	beq.n	8000dea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000dea:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <HAL_GPIO_Init+0x2ec>)
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000df0:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <HAL_GPIO_Init+0x2ec>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	43da      	mvns	r2, r3
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685a      	ldr	r2, [r3, #4]
 8000e04:	2380      	movs	r3, #128	; 0x80
 8000e06:	039b      	lsls	r3, r3, #14
 8000e08:	4013      	ands	r3, r2
 8000e0a:	d003      	beq.n	8000e14 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e14:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <HAL_GPIO_Init+0x2ec>)
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	40da      	lsrs	r2, r3
 8000e28:	1e13      	subs	r3, r2, #0
 8000e2a:	d000      	beq.n	8000e2e <HAL_GPIO_Init+0x2ca>
 8000e2c:	e6a2      	b.n	8000b74 <HAL_GPIO_Init+0x10>
  } 
}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	46c0      	nop			; (mov r8, r8)
 8000e32:	46bd      	mov	sp, r7
 8000e34:	b006      	add	sp, #24
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	40010000 	.word	0x40010000
 8000e40:	48000400 	.word	0x48000400
 8000e44:	48000800 	.word	0x48000800
 8000e48:	48000c00 	.word	0x48000c00
 8000e4c:	48001000 	.word	0x48001000
 8000e50:	40010400 	.word	0x40010400

08000e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	0008      	movs	r0, r1
 8000e5e:	0011      	movs	r1, r2
 8000e60:	1cbb      	adds	r3, r7, #2
 8000e62:	1c02      	adds	r2, r0, #0
 8000e64:	801a      	strh	r2, [r3, #0]
 8000e66:	1c7b      	adds	r3, r7, #1
 8000e68:	1c0a      	adds	r2, r1, #0
 8000e6a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e6c:	1c7b      	adds	r3, r7, #1
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d004      	beq.n	8000e7e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e74:	1cbb      	adds	r3, r7, #2
 8000e76:	881a      	ldrh	r2, [r3, #0]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e7c:	e003      	b.n	8000e86 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e7e:	1cbb      	adds	r3, r7, #2
 8000e80:	881a      	ldrh	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	b002      	add	sp, #8
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b084      	sub	sp, #16
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
 8000e96:	000a      	movs	r2, r1
 8000e98:	1cbb      	adds	r3, r7, #2
 8000e9a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	695b      	ldr	r3, [r3, #20]
 8000ea0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ea2:	1cbb      	adds	r3, r7, #2
 8000ea4:	881b      	ldrh	r3, [r3, #0]
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	041a      	lsls	r2, r3, #16
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	1cb9      	adds	r1, r7, #2
 8000eb2:	8809      	ldrh	r1, [r1, #0]
 8000eb4:	400b      	ands	r3, r1
 8000eb6:	431a      	orrs	r2, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	619a      	str	r2, [r3, #24]
}
 8000ebc:	46c0      	nop			; (mov r8, r8)
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	b004      	add	sp, #16
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d102      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	f000 fb76 	bl	80015c4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2201      	movs	r2, #1
 8000ede:	4013      	ands	r3, r2
 8000ee0:	d100      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x20>
 8000ee2:	e08e      	b.n	8001002 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ee4:	4bc5      	ldr	r3, [pc, #788]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	220c      	movs	r2, #12
 8000eea:	4013      	ands	r3, r2
 8000eec:	2b04      	cmp	r3, #4
 8000eee:	d00e      	beq.n	8000f0e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ef0:	4bc2      	ldr	r3, [pc, #776]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	220c      	movs	r2, #12
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	2b08      	cmp	r3, #8
 8000efa:	d117      	bne.n	8000f2c <HAL_RCC_OscConfig+0x68>
 8000efc:	4bbf      	ldr	r3, [pc, #764]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 8000efe:	685a      	ldr	r2, [r3, #4]
 8000f00:	23c0      	movs	r3, #192	; 0xc0
 8000f02:	025b      	lsls	r3, r3, #9
 8000f04:	401a      	ands	r2, r3
 8000f06:	2380      	movs	r3, #128	; 0x80
 8000f08:	025b      	lsls	r3, r3, #9
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d10e      	bne.n	8000f2c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f0e:	4bbb      	ldr	r3, [pc, #748]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	2380      	movs	r3, #128	; 0x80
 8000f14:	029b      	lsls	r3, r3, #10
 8000f16:	4013      	ands	r3, r2
 8000f18:	d100      	bne.n	8000f1c <HAL_RCC_OscConfig+0x58>
 8000f1a:	e071      	b.n	8001000 <HAL_RCC_OscConfig+0x13c>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d000      	beq.n	8000f26 <HAL_RCC_OscConfig+0x62>
 8000f24:	e06c      	b.n	8001000 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	f000 fb4c 	bl	80015c4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d107      	bne.n	8000f44 <HAL_RCC_OscConfig+0x80>
 8000f34:	4bb1      	ldr	r3, [pc, #708]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4bb0      	ldr	r3, [pc, #704]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 8000f3a:	2180      	movs	r1, #128	; 0x80
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	e02f      	b.n	8000fa4 <HAL_RCC_OscConfig+0xe0>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d10c      	bne.n	8000f66 <HAL_RCC_OscConfig+0xa2>
 8000f4c:	4bab      	ldr	r3, [pc, #684]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4baa      	ldr	r3, [pc, #680]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 8000f52:	49ab      	ldr	r1, [pc, #684]	; (8001200 <HAL_RCC_OscConfig+0x33c>)
 8000f54:	400a      	ands	r2, r1
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	4ba8      	ldr	r3, [pc, #672]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4ba7      	ldr	r3, [pc, #668]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 8000f5e:	49a9      	ldr	r1, [pc, #676]	; (8001204 <HAL_RCC_OscConfig+0x340>)
 8000f60:	400a      	ands	r2, r1
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	e01e      	b.n	8000fa4 <HAL_RCC_OscConfig+0xe0>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	2b05      	cmp	r3, #5
 8000f6c:	d10e      	bne.n	8000f8c <HAL_RCC_OscConfig+0xc8>
 8000f6e:	4ba3      	ldr	r3, [pc, #652]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	4ba2      	ldr	r3, [pc, #648]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 8000f74:	2180      	movs	r1, #128	; 0x80
 8000f76:	02c9      	lsls	r1, r1, #11
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	4b9f      	ldr	r3, [pc, #636]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4b9e      	ldr	r3, [pc, #632]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 8000f82:	2180      	movs	r1, #128	; 0x80
 8000f84:	0249      	lsls	r1, r1, #9
 8000f86:	430a      	orrs	r2, r1
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	e00b      	b.n	8000fa4 <HAL_RCC_OscConfig+0xe0>
 8000f8c:	4b9b      	ldr	r3, [pc, #620]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4b9a      	ldr	r3, [pc, #616]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 8000f92:	499b      	ldr	r1, [pc, #620]	; (8001200 <HAL_RCC_OscConfig+0x33c>)
 8000f94:	400a      	ands	r2, r1
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	4b98      	ldr	r3, [pc, #608]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b97      	ldr	r3, [pc, #604]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 8000f9e:	4999      	ldr	r1, [pc, #612]	; (8001204 <HAL_RCC_OscConfig+0x340>)
 8000fa0:	400a      	ands	r2, r1
 8000fa2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d014      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fac:	f7ff fc82 	bl	80008b4 <HAL_GetTick>
 8000fb0:	0003      	movs	r3, r0
 8000fb2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb4:	e008      	b.n	8000fc8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fb6:	f7ff fc7d 	bl	80008b4 <HAL_GetTick>
 8000fba:	0002      	movs	r2, r0
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b64      	cmp	r3, #100	; 0x64
 8000fc2:	d901      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e2fd      	b.n	80015c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fc8:	4b8c      	ldr	r3, [pc, #560]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	2380      	movs	r3, #128	; 0x80
 8000fce:	029b      	lsls	r3, r3, #10
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	d0f0      	beq.n	8000fb6 <HAL_RCC_OscConfig+0xf2>
 8000fd4:	e015      	b.n	8001002 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd6:	f7ff fc6d 	bl	80008b4 <HAL_GetTick>
 8000fda:	0003      	movs	r3, r0
 8000fdc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fde:	e008      	b.n	8000ff2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fe0:	f7ff fc68 	bl	80008b4 <HAL_GetTick>
 8000fe4:	0002      	movs	r2, r0
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	2b64      	cmp	r3, #100	; 0x64
 8000fec:	d901      	bls.n	8000ff2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	e2e8      	b.n	80015c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ff2:	4b82      	ldr	r3, [pc, #520]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	029b      	lsls	r3, r3, #10
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	d1f0      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x11c>
 8000ffe:	e000      	b.n	8001002 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001000:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2202      	movs	r2, #2
 8001008:	4013      	ands	r3, r2
 800100a:	d100      	bne.n	800100e <HAL_RCC_OscConfig+0x14a>
 800100c:	e06c      	b.n	80010e8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800100e:	4b7b      	ldr	r3, [pc, #492]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	220c      	movs	r2, #12
 8001014:	4013      	ands	r3, r2
 8001016:	d00e      	beq.n	8001036 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001018:	4b78      	ldr	r3, [pc, #480]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	220c      	movs	r2, #12
 800101e:	4013      	ands	r3, r2
 8001020:	2b08      	cmp	r3, #8
 8001022:	d11f      	bne.n	8001064 <HAL_RCC_OscConfig+0x1a0>
 8001024:	4b75      	ldr	r3, [pc, #468]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	23c0      	movs	r3, #192	; 0xc0
 800102a:	025b      	lsls	r3, r3, #9
 800102c:	401a      	ands	r2, r3
 800102e:	2380      	movs	r3, #128	; 0x80
 8001030:	021b      	lsls	r3, r3, #8
 8001032:	429a      	cmp	r2, r3
 8001034:	d116      	bne.n	8001064 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001036:	4b71      	ldr	r3, [pc, #452]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2202      	movs	r2, #2
 800103c:	4013      	ands	r3, r2
 800103e:	d005      	beq.n	800104c <HAL_RCC_OscConfig+0x188>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d001      	beq.n	800104c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e2bb      	b.n	80015c4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800104c:	4b6b      	ldr	r3, [pc, #428]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	22f8      	movs	r2, #248	; 0xf8
 8001052:	4393      	bics	r3, r2
 8001054:	0019      	movs	r1, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	691b      	ldr	r3, [r3, #16]
 800105a:	00da      	lsls	r2, r3, #3
 800105c:	4b67      	ldr	r3, [pc, #412]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 800105e:	430a      	orrs	r2, r1
 8001060:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001062:	e041      	b.n	80010e8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d024      	beq.n	80010b6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800106c:	4b63      	ldr	r3, [pc, #396]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b62      	ldr	r3, [pc, #392]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 8001072:	2101      	movs	r1, #1
 8001074:	430a      	orrs	r2, r1
 8001076:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001078:	f7ff fc1c 	bl	80008b4 <HAL_GetTick>
 800107c:	0003      	movs	r3, r0
 800107e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001080:	e008      	b.n	8001094 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001082:	f7ff fc17 	bl	80008b4 <HAL_GetTick>
 8001086:	0002      	movs	r2, r0
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	2b02      	cmp	r3, #2
 800108e:	d901      	bls.n	8001094 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	e297      	b.n	80015c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001094:	4b59      	ldr	r3, [pc, #356]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2202      	movs	r2, #2
 800109a:	4013      	ands	r3, r2
 800109c:	d0f1      	beq.n	8001082 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800109e:	4b57      	ldr	r3, [pc, #348]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	22f8      	movs	r2, #248	; 0xf8
 80010a4:	4393      	bics	r3, r2
 80010a6:	0019      	movs	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	691b      	ldr	r3, [r3, #16]
 80010ac:	00da      	lsls	r2, r3, #3
 80010ae:	4b53      	ldr	r3, [pc, #332]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 80010b0:	430a      	orrs	r2, r1
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	e018      	b.n	80010e8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010b6:	4b51      	ldr	r3, [pc, #324]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	4b50      	ldr	r3, [pc, #320]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 80010bc:	2101      	movs	r1, #1
 80010be:	438a      	bics	r2, r1
 80010c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c2:	f7ff fbf7 	bl	80008b4 <HAL_GetTick>
 80010c6:	0003      	movs	r3, r0
 80010c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ca:	e008      	b.n	80010de <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010cc:	f7ff fbf2 	bl	80008b4 <HAL_GetTick>
 80010d0:	0002      	movs	r2, r0
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d901      	bls.n	80010de <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e272      	b.n	80015c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010de:	4b47      	ldr	r3, [pc, #284]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2202      	movs	r2, #2
 80010e4:	4013      	ands	r3, r2
 80010e6:	d1f1      	bne.n	80010cc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2208      	movs	r2, #8
 80010ee:	4013      	ands	r3, r2
 80010f0:	d036      	beq.n	8001160 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d019      	beq.n	800112e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010fa:	4b40      	ldr	r3, [pc, #256]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 80010fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010fe:	4b3f      	ldr	r3, [pc, #252]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 8001100:	2101      	movs	r1, #1
 8001102:	430a      	orrs	r2, r1
 8001104:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001106:	f7ff fbd5 	bl	80008b4 <HAL_GetTick>
 800110a:	0003      	movs	r3, r0
 800110c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800110e:	e008      	b.n	8001122 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001110:	f7ff fbd0 	bl	80008b4 <HAL_GetTick>
 8001114:	0002      	movs	r2, r0
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b02      	cmp	r3, #2
 800111c:	d901      	bls.n	8001122 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e250      	b.n	80015c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001122:	4b36      	ldr	r3, [pc, #216]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 8001124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001126:	2202      	movs	r2, #2
 8001128:	4013      	ands	r3, r2
 800112a:	d0f1      	beq.n	8001110 <HAL_RCC_OscConfig+0x24c>
 800112c:	e018      	b.n	8001160 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800112e:	4b33      	ldr	r3, [pc, #204]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 8001130:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001132:	4b32      	ldr	r3, [pc, #200]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 8001134:	2101      	movs	r1, #1
 8001136:	438a      	bics	r2, r1
 8001138:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800113a:	f7ff fbbb 	bl	80008b4 <HAL_GetTick>
 800113e:	0003      	movs	r3, r0
 8001140:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001142:	e008      	b.n	8001156 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001144:	f7ff fbb6 	bl	80008b4 <HAL_GetTick>
 8001148:	0002      	movs	r2, r0
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b02      	cmp	r3, #2
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e236      	b.n	80015c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001156:	4b29      	ldr	r3, [pc, #164]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 8001158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115a:	2202      	movs	r2, #2
 800115c:	4013      	ands	r3, r2
 800115e:	d1f1      	bne.n	8001144 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2204      	movs	r2, #4
 8001166:	4013      	ands	r3, r2
 8001168:	d100      	bne.n	800116c <HAL_RCC_OscConfig+0x2a8>
 800116a:	e0b5      	b.n	80012d8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800116c:	201f      	movs	r0, #31
 800116e:	183b      	adds	r3, r7, r0
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001174:	4b21      	ldr	r3, [pc, #132]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 8001176:	69da      	ldr	r2, [r3, #28]
 8001178:	2380      	movs	r3, #128	; 0x80
 800117a:	055b      	lsls	r3, r3, #21
 800117c:	4013      	ands	r3, r2
 800117e:	d110      	bne.n	80011a2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001180:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 8001182:	69da      	ldr	r2, [r3, #28]
 8001184:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 8001186:	2180      	movs	r1, #128	; 0x80
 8001188:	0549      	lsls	r1, r1, #21
 800118a:	430a      	orrs	r2, r1
 800118c:	61da      	str	r2, [r3, #28]
 800118e:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 8001190:	69da      	ldr	r2, [r3, #28]
 8001192:	2380      	movs	r3, #128	; 0x80
 8001194:	055b      	lsls	r3, r3, #21
 8001196:	4013      	ands	r3, r2
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800119c:	183b      	adds	r3, r7, r0
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a2:	4b19      	ldr	r3, [pc, #100]	; (8001208 <HAL_RCC_OscConfig+0x344>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	2380      	movs	r3, #128	; 0x80
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	4013      	ands	r3, r2
 80011ac:	d11a      	bne.n	80011e4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011ae:	4b16      	ldr	r3, [pc, #88]	; (8001208 <HAL_RCC_OscConfig+0x344>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <HAL_RCC_OscConfig+0x344>)
 80011b4:	2180      	movs	r1, #128	; 0x80
 80011b6:	0049      	lsls	r1, r1, #1
 80011b8:	430a      	orrs	r2, r1
 80011ba:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011bc:	f7ff fb7a 	bl	80008b4 <HAL_GetTick>
 80011c0:	0003      	movs	r3, r0
 80011c2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c4:	e008      	b.n	80011d8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011c6:	f7ff fb75 	bl	80008b4 <HAL_GetTick>
 80011ca:	0002      	movs	r2, r0
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b64      	cmp	r3, #100	; 0x64
 80011d2:	d901      	bls.n	80011d8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e1f5      	b.n	80015c4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d8:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <HAL_RCC_OscConfig+0x344>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	2380      	movs	r3, #128	; 0x80
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	4013      	ands	r3, r2
 80011e2:	d0f0      	beq.n	80011c6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d10f      	bne.n	800120c <HAL_RCC_OscConfig+0x348>
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 80011ee:	6a1a      	ldr	r2, [r3, #32]
 80011f0:	4b02      	ldr	r3, [pc, #8]	; (80011fc <HAL_RCC_OscConfig+0x338>)
 80011f2:	2101      	movs	r1, #1
 80011f4:	430a      	orrs	r2, r1
 80011f6:	621a      	str	r2, [r3, #32]
 80011f8:	e036      	b.n	8001268 <HAL_RCC_OscConfig+0x3a4>
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	40021000 	.word	0x40021000
 8001200:	fffeffff 	.word	0xfffeffff
 8001204:	fffbffff 	.word	0xfffbffff
 8001208:	40007000 	.word	0x40007000
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d10c      	bne.n	800122e <HAL_RCC_OscConfig+0x36a>
 8001214:	4bca      	ldr	r3, [pc, #808]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 8001216:	6a1a      	ldr	r2, [r3, #32]
 8001218:	4bc9      	ldr	r3, [pc, #804]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 800121a:	2101      	movs	r1, #1
 800121c:	438a      	bics	r2, r1
 800121e:	621a      	str	r2, [r3, #32]
 8001220:	4bc7      	ldr	r3, [pc, #796]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 8001222:	6a1a      	ldr	r2, [r3, #32]
 8001224:	4bc6      	ldr	r3, [pc, #792]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 8001226:	2104      	movs	r1, #4
 8001228:	438a      	bics	r2, r1
 800122a:	621a      	str	r2, [r3, #32]
 800122c:	e01c      	b.n	8001268 <HAL_RCC_OscConfig+0x3a4>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	2b05      	cmp	r3, #5
 8001234:	d10c      	bne.n	8001250 <HAL_RCC_OscConfig+0x38c>
 8001236:	4bc2      	ldr	r3, [pc, #776]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 8001238:	6a1a      	ldr	r2, [r3, #32]
 800123a:	4bc1      	ldr	r3, [pc, #772]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 800123c:	2104      	movs	r1, #4
 800123e:	430a      	orrs	r2, r1
 8001240:	621a      	str	r2, [r3, #32]
 8001242:	4bbf      	ldr	r3, [pc, #764]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 8001244:	6a1a      	ldr	r2, [r3, #32]
 8001246:	4bbe      	ldr	r3, [pc, #760]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 8001248:	2101      	movs	r1, #1
 800124a:	430a      	orrs	r2, r1
 800124c:	621a      	str	r2, [r3, #32]
 800124e:	e00b      	b.n	8001268 <HAL_RCC_OscConfig+0x3a4>
 8001250:	4bbb      	ldr	r3, [pc, #748]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 8001252:	6a1a      	ldr	r2, [r3, #32]
 8001254:	4bba      	ldr	r3, [pc, #744]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 8001256:	2101      	movs	r1, #1
 8001258:	438a      	bics	r2, r1
 800125a:	621a      	str	r2, [r3, #32]
 800125c:	4bb8      	ldr	r3, [pc, #736]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 800125e:	6a1a      	ldr	r2, [r3, #32]
 8001260:	4bb7      	ldr	r3, [pc, #732]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 8001262:	2104      	movs	r1, #4
 8001264:	438a      	bics	r2, r1
 8001266:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d014      	beq.n	800129a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001270:	f7ff fb20 	bl	80008b4 <HAL_GetTick>
 8001274:	0003      	movs	r3, r0
 8001276:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001278:	e009      	b.n	800128e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800127a:	f7ff fb1b 	bl	80008b4 <HAL_GetTick>
 800127e:	0002      	movs	r2, r0
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	4aaf      	ldr	r2, [pc, #700]	; (8001544 <HAL_RCC_OscConfig+0x680>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e19a      	b.n	80015c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800128e:	4bac      	ldr	r3, [pc, #688]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 8001290:	6a1b      	ldr	r3, [r3, #32]
 8001292:	2202      	movs	r2, #2
 8001294:	4013      	ands	r3, r2
 8001296:	d0f0      	beq.n	800127a <HAL_RCC_OscConfig+0x3b6>
 8001298:	e013      	b.n	80012c2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129a:	f7ff fb0b 	bl	80008b4 <HAL_GetTick>
 800129e:	0003      	movs	r3, r0
 80012a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a2:	e009      	b.n	80012b8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012a4:	f7ff fb06 	bl	80008b4 <HAL_GetTick>
 80012a8:	0002      	movs	r2, r0
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	4aa5      	ldr	r2, [pc, #660]	; (8001544 <HAL_RCC_OscConfig+0x680>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e185      	b.n	80015c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012b8:	4ba1      	ldr	r3, [pc, #644]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 80012ba:	6a1b      	ldr	r3, [r3, #32]
 80012bc:	2202      	movs	r2, #2
 80012be:	4013      	ands	r3, r2
 80012c0:	d1f0      	bne.n	80012a4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80012c2:	231f      	movs	r3, #31
 80012c4:	18fb      	adds	r3, r7, r3
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d105      	bne.n	80012d8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012cc:	4b9c      	ldr	r3, [pc, #624]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 80012ce:	69da      	ldr	r2, [r3, #28]
 80012d0:	4b9b      	ldr	r3, [pc, #620]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 80012d2:	499d      	ldr	r1, [pc, #628]	; (8001548 <HAL_RCC_OscConfig+0x684>)
 80012d4:	400a      	ands	r2, r1
 80012d6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2210      	movs	r2, #16
 80012de:	4013      	ands	r3, r2
 80012e0:	d063      	beq.n	80013aa <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d12a      	bne.n	8001340 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80012ea:	4b95      	ldr	r3, [pc, #596]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 80012ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012ee:	4b94      	ldr	r3, [pc, #592]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 80012f0:	2104      	movs	r1, #4
 80012f2:	430a      	orrs	r2, r1
 80012f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80012f6:	4b92      	ldr	r3, [pc, #584]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 80012f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012fa:	4b91      	ldr	r3, [pc, #580]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 80012fc:	2101      	movs	r1, #1
 80012fe:	430a      	orrs	r2, r1
 8001300:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001302:	f7ff fad7 	bl	80008b4 <HAL_GetTick>
 8001306:	0003      	movs	r3, r0
 8001308:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800130c:	f7ff fad2 	bl	80008b4 <HAL_GetTick>
 8001310:	0002      	movs	r2, r0
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e152      	b.n	80015c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800131e:	4b88      	ldr	r3, [pc, #544]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 8001320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001322:	2202      	movs	r2, #2
 8001324:	4013      	ands	r3, r2
 8001326:	d0f1      	beq.n	800130c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001328:	4b85      	ldr	r3, [pc, #532]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 800132a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800132c:	22f8      	movs	r2, #248	; 0xf8
 800132e:	4393      	bics	r3, r2
 8001330:	0019      	movs	r1, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	00da      	lsls	r2, r3, #3
 8001338:	4b81      	ldr	r3, [pc, #516]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 800133a:	430a      	orrs	r2, r1
 800133c:	635a      	str	r2, [r3, #52]	; 0x34
 800133e:	e034      	b.n	80013aa <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	695b      	ldr	r3, [r3, #20]
 8001344:	3305      	adds	r3, #5
 8001346:	d111      	bne.n	800136c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001348:	4b7d      	ldr	r3, [pc, #500]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 800134a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800134c:	4b7c      	ldr	r3, [pc, #496]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 800134e:	2104      	movs	r1, #4
 8001350:	438a      	bics	r2, r1
 8001352:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001354:	4b7a      	ldr	r3, [pc, #488]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 8001356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001358:	22f8      	movs	r2, #248	; 0xf8
 800135a:	4393      	bics	r3, r2
 800135c:	0019      	movs	r1, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	00da      	lsls	r2, r3, #3
 8001364:	4b76      	ldr	r3, [pc, #472]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 8001366:	430a      	orrs	r2, r1
 8001368:	635a      	str	r2, [r3, #52]	; 0x34
 800136a:	e01e      	b.n	80013aa <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800136c:	4b74      	ldr	r3, [pc, #464]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 800136e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001370:	4b73      	ldr	r3, [pc, #460]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 8001372:	2104      	movs	r1, #4
 8001374:	430a      	orrs	r2, r1
 8001376:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001378:	4b71      	ldr	r3, [pc, #452]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 800137a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800137c:	4b70      	ldr	r3, [pc, #448]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 800137e:	2101      	movs	r1, #1
 8001380:	438a      	bics	r2, r1
 8001382:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001384:	f7ff fa96 	bl	80008b4 <HAL_GetTick>
 8001388:	0003      	movs	r3, r0
 800138a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800138e:	f7ff fa91 	bl	80008b4 <HAL_GetTick>
 8001392:	0002      	movs	r2, r0
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e111      	b.n	80015c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013a0:	4b67      	ldr	r3, [pc, #412]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 80013a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013a4:	2202      	movs	r2, #2
 80013a6:	4013      	ands	r3, r2
 80013a8:	d1f1      	bne.n	800138e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2220      	movs	r2, #32
 80013b0:	4013      	ands	r3, r2
 80013b2:	d05c      	beq.n	800146e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80013b4:	4b62      	ldr	r3, [pc, #392]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	220c      	movs	r2, #12
 80013ba:	4013      	ands	r3, r2
 80013bc:	2b0c      	cmp	r3, #12
 80013be:	d00e      	beq.n	80013de <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80013c0:	4b5f      	ldr	r3, [pc, #380]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	220c      	movs	r2, #12
 80013c6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80013c8:	2b08      	cmp	r3, #8
 80013ca:	d114      	bne.n	80013f6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80013cc:	4b5c      	ldr	r3, [pc, #368]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	23c0      	movs	r3, #192	; 0xc0
 80013d2:	025b      	lsls	r3, r3, #9
 80013d4:	401a      	ands	r2, r3
 80013d6:	23c0      	movs	r3, #192	; 0xc0
 80013d8:	025b      	lsls	r3, r3, #9
 80013da:	429a      	cmp	r2, r3
 80013dc:	d10b      	bne.n	80013f6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80013de:	4b58      	ldr	r3, [pc, #352]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 80013e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013e2:	2380      	movs	r3, #128	; 0x80
 80013e4:	025b      	lsls	r3, r3, #9
 80013e6:	4013      	ands	r3, r2
 80013e8:	d040      	beq.n	800146c <HAL_RCC_OscConfig+0x5a8>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a1b      	ldr	r3, [r3, #32]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d03c      	beq.n	800146c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e0e6      	b.n	80015c4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a1b      	ldr	r3, [r3, #32]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d01b      	beq.n	8001436 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80013fe:	4b50      	ldr	r3, [pc, #320]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 8001400:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001402:	4b4f      	ldr	r3, [pc, #316]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 8001404:	2180      	movs	r1, #128	; 0x80
 8001406:	0249      	lsls	r1, r1, #9
 8001408:	430a      	orrs	r2, r1
 800140a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140c:	f7ff fa52 	bl	80008b4 <HAL_GetTick>
 8001410:	0003      	movs	r3, r0
 8001412:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001416:	f7ff fa4d 	bl	80008b4 <HAL_GetTick>
 800141a:	0002      	movs	r2, r0
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e0cd      	b.n	80015c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001428:	4b45      	ldr	r3, [pc, #276]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 800142a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	025b      	lsls	r3, r3, #9
 8001430:	4013      	ands	r3, r2
 8001432:	d0f0      	beq.n	8001416 <HAL_RCC_OscConfig+0x552>
 8001434:	e01b      	b.n	800146e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001436:	4b42      	ldr	r3, [pc, #264]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 8001438:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800143a:	4b41      	ldr	r3, [pc, #260]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 800143c:	4943      	ldr	r1, [pc, #268]	; (800154c <HAL_RCC_OscConfig+0x688>)
 800143e:	400a      	ands	r2, r1
 8001440:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001442:	f7ff fa37 	bl	80008b4 <HAL_GetTick>
 8001446:	0003      	movs	r3, r0
 8001448:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800144c:	f7ff fa32 	bl	80008b4 <HAL_GetTick>
 8001450:	0002      	movs	r2, r0
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e0b2      	b.n	80015c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800145e:	4b38      	ldr	r3, [pc, #224]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 8001460:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001462:	2380      	movs	r3, #128	; 0x80
 8001464:	025b      	lsls	r3, r3, #9
 8001466:	4013      	ands	r3, r2
 8001468:	d1f0      	bne.n	800144c <HAL_RCC_OscConfig+0x588>
 800146a:	e000      	b.n	800146e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800146c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001472:	2b00      	cmp	r3, #0
 8001474:	d100      	bne.n	8001478 <HAL_RCC_OscConfig+0x5b4>
 8001476:	e0a4      	b.n	80015c2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001478:	4b31      	ldr	r3, [pc, #196]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	220c      	movs	r2, #12
 800147e:	4013      	ands	r3, r2
 8001480:	2b08      	cmp	r3, #8
 8001482:	d100      	bne.n	8001486 <HAL_RCC_OscConfig+0x5c2>
 8001484:	e078      	b.n	8001578 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148a:	2b02      	cmp	r3, #2
 800148c:	d14c      	bne.n	8001528 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800148e:	4b2c      	ldr	r3, [pc, #176]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	4b2b      	ldr	r3, [pc, #172]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 8001494:	492e      	ldr	r1, [pc, #184]	; (8001550 <HAL_RCC_OscConfig+0x68c>)
 8001496:	400a      	ands	r2, r1
 8001498:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149a:	f7ff fa0b 	bl	80008b4 <HAL_GetTick>
 800149e:	0003      	movs	r3, r0
 80014a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a4:	f7ff fa06 	bl	80008b4 <HAL_GetTick>
 80014a8:	0002      	movs	r2, r0
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e086      	b.n	80015c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b6:	4b22      	ldr	r3, [pc, #136]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	2380      	movs	r3, #128	; 0x80
 80014bc:	049b      	lsls	r3, r3, #18
 80014be:	4013      	ands	r3, r2
 80014c0:	d1f0      	bne.n	80014a4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014c2:	4b1f      	ldr	r3, [pc, #124]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 80014c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c6:	220f      	movs	r2, #15
 80014c8:	4393      	bics	r3, r2
 80014ca:	0019      	movs	r1, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014d0:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 80014d2:	430a      	orrs	r2, r1
 80014d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80014d6:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	4a1e      	ldr	r2, [pc, #120]	; (8001554 <HAL_RCC_OscConfig+0x690>)
 80014dc:	4013      	ands	r3, r2
 80014de:	0019      	movs	r1, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e8:	431a      	orrs	r2, r3
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 80014ec:	430a      	orrs	r2, r1
 80014ee:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014f0:	4b13      	ldr	r3, [pc, #76]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 80014f6:	2180      	movs	r1, #128	; 0x80
 80014f8:	0449      	lsls	r1, r1, #17
 80014fa:	430a      	orrs	r2, r1
 80014fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fe:	f7ff f9d9 	bl	80008b4 <HAL_GetTick>
 8001502:	0003      	movs	r3, r0
 8001504:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001508:	f7ff f9d4 	bl	80008b4 <HAL_GetTick>
 800150c:	0002      	movs	r2, r0
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e054      	b.n	80015c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	2380      	movs	r3, #128	; 0x80
 8001520:	049b      	lsls	r3, r3, #18
 8001522:	4013      	ands	r3, r2
 8001524:	d0f0      	beq.n	8001508 <HAL_RCC_OscConfig+0x644>
 8001526:	e04c      	b.n	80015c2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <HAL_RCC_OscConfig+0x67c>)
 800152e:	4908      	ldr	r1, [pc, #32]	; (8001550 <HAL_RCC_OscConfig+0x68c>)
 8001530:	400a      	ands	r2, r1
 8001532:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001534:	f7ff f9be 	bl	80008b4 <HAL_GetTick>
 8001538:	0003      	movs	r3, r0
 800153a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800153c:	e015      	b.n	800156a <HAL_RCC_OscConfig+0x6a6>
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	40021000 	.word	0x40021000
 8001544:	00001388 	.word	0x00001388
 8001548:	efffffff 	.word	0xefffffff
 800154c:	fffeffff 	.word	0xfffeffff
 8001550:	feffffff 	.word	0xfeffffff
 8001554:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001558:	f7ff f9ac 	bl	80008b4 <HAL_GetTick>
 800155c:	0002      	movs	r2, r0
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e02c      	b.n	80015c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800156a:	4b18      	ldr	r3, [pc, #96]	; (80015cc <HAL_RCC_OscConfig+0x708>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	2380      	movs	r3, #128	; 0x80
 8001570:	049b      	lsls	r3, r3, #18
 8001572:	4013      	ands	r3, r2
 8001574:	d1f0      	bne.n	8001558 <HAL_RCC_OscConfig+0x694>
 8001576:	e024      	b.n	80015c2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157c:	2b01      	cmp	r3, #1
 800157e:	d101      	bne.n	8001584 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e01f      	b.n	80015c4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001584:	4b11      	ldr	r3, [pc, #68]	; (80015cc <HAL_RCC_OscConfig+0x708>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <HAL_RCC_OscConfig+0x708>)
 800158c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	23c0      	movs	r3, #192	; 0xc0
 8001594:	025b      	lsls	r3, r3, #9
 8001596:	401a      	ands	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159c:	429a      	cmp	r2, r3
 800159e:	d10e      	bne.n	80015be <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	220f      	movs	r2, #15
 80015a4:	401a      	ands	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d107      	bne.n	80015be <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	23f0      	movs	r3, #240	; 0xf0
 80015b2:	039b      	lsls	r3, r3, #14
 80015b4:	401a      	ands	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d001      	beq.n	80015c2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e000      	b.n	80015c4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	0018      	movs	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	b008      	add	sp, #32
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40021000 	.word	0x40021000

080015d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d101      	bne.n	80015e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e0bf      	b.n	8001764 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015e4:	4b61      	ldr	r3, [pc, #388]	; (800176c <HAL_RCC_ClockConfig+0x19c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2201      	movs	r2, #1
 80015ea:	4013      	ands	r3, r2
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d911      	bls.n	8001616 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015f2:	4b5e      	ldr	r3, [pc, #376]	; (800176c <HAL_RCC_ClockConfig+0x19c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2201      	movs	r2, #1
 80015f8:	4393      	bics	r3, r2
 80015fa:	0019      	movs	r1, r3
 80015fc:	4b5b      	ldr	r3, [pc, #364]	; (800176c <HAL_RCC_ClockConfig+0x19c>)
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	430a      	orrs	r2, r1
 8001602:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001604:	4b59      	ldr	r3, [pc, #356]	; (800176c <HAL_RCC_ClockConfig+0x19c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2201      	movs	r2, #1
 800160a:	4013      	ands	r3, r2
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	429a      	cmp	r2, r3
 8001610:	d001      	beq.n	8001616 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e0a6      	b.n	8001764 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2202      	movs	r2, #2
 800161c:	4013      	ands	r3, r2
 800161e:	d015      	beq.n	800164c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2204      	movs	r2, #4
 8001626:	4013      	ands	r3, r2
 8001628:	d006      	beq.n	8001638 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800162a:	4b51      	ldr	r3, [pc, #324]	; (8001770 <HAL_RCC_ClockConfig+0x1a0>)
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	4b50      	ldr	r3, [pc, #320]	; (8001770 <HAL_RCC_ClockConfig+0x1a0>)
 8001630:	21e0      	movs	r1, #224	; 0xe0
 8001632:	00c9      	lsls	r1, r1, #3
 8001634:	430a      	orrs	r2, r1
 8001636:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001638:	4b4d      	ldr	r3, [pc, #308]	; (8001770 <HAL_RCC_ClockConfig+0x1a0>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	22f0      	movs	r2, #240	; 0xf0
 800163e:	4393      	bics	r3, r2
 8001640:	0019      	movs	r1, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	4b4a      	ldr	r3, [pc, #296]	; (8001770 <HAL_RCC_ClockConfig+0x1a0>)
 8001648:	430a      	orrs	r2, r1
 800164a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2201      	movs	r2, #1
 8001652:	4013      	ands	r3, r2
 8001654:	d04c      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d107      	bne.n	800166e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165e:	4b44      	ldr	r3, [pc, #272]	; (8001770 <HAL_RCC_ClockConfig+0x1a0>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	2380      	movs	r3, #128	; 0x80
 8001664:	029b      	lsls	r3, r3, #10
 8001666:	4013      	ands	r3, r2
 8001668:	d120      	bne.n	80016ac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e07a      	b.n	8001764 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d107      	bne.n	8001686 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001676:	4b3e      	ldr	r3, [pc, #248]	; (8001770 <HAL_RCC_ClockConfig+0x1a0>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	2380      	movs	r3, #128	; 0x80
 800167c:	049b      	lsls	r3, r3, #18
 800167e:	4013      	ands	r3, r2
 8001680:	d114      	bne.n	80016ac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e06e      	b.n	8001764 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b03      	cmp	r3, #3
 800168c:	d107      	bne.n	800169e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800168e:	4b38      	ldr	r3, [pc, #224]	; (8001770 <HAL_RCC_ClockConfig+0x1a0>)
 8001690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001692:	2380      	movs	r3, #128	; 0x80
 8001694:	025b      	lsls	r3, r3, #9
 8001696:	4013      	ands	r3, r2
 8001698:	d108      	bne.n	80016ac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e062      	b.n	8001764 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800169e:	4b34      	ldr	r3, [pc, #208]	; (8001770 <HAL_RCC_ClockConfig+0x1a0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2202      	movs	r2, #2
 80016a4:	4013      	ands	r3, r2
 80016a6:	d101      	bne.n	80016ac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e05b      	b.n	8001764 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ac:	4b30      	ldr	r3, [pc, #192]	; (8001770 <HAL_RCC_ClockConfig+0x1a0>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2203      	movs	r2, #3
 80016b2:	4393      	bics	r3, r2
 80016b4:	0019      	movs	r1, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	4b2d      	ldr	r3, [pc, #180]	; (8001770 <HAL_RCC_ClockConfig+0x1a0>)
 80016bc:	430a      	orrs	r2, r1
 80016be:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016c0:	f7ff f8f8 	bl	80008b4 <HAL_GetTick>
 80016c4:	0003      	movs	r3, r0
 80016c6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016c8:	e009      	b.n	80016de <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ca:	f7ff f8f3 	bl	80008b4 <HAL_GetTick>
 80016ce:	0002      	movs	r2, r0
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	4a27      	ldr	r2, [pc, #156]	; (8001774 <HAL_RCC_ClockConfig+0x1a4>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e042      	b.n	8001764 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016de:	4b24      	ldr	r3, [pc, #144]	; (8001770 <HAL_RCC_ClockConfig+0x1a0>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	220c      	movs	r2, #12
 80016e4:	401a      	ands	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d1ec      	bne.n	80016ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016f0:	4b1e      	ldr	r3, [pc, #120]	; (800176c <HAL_RCC_ClockConfig+0x19c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2201      	movs	r2, #1
 80016f6:	4013      	ands	r3, r2
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d211      	bcs.n	8001722 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016fe:	4b1b      	ldr	r3, [pc, #108]	; (800176c <HAL_RCC_ClockConfig+0x19c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2201      	movs	r2, #1
 8001704:	4393      	bics	r3, r2
 8001706:	0019      	movs	r1, r3
 8001708:	4b18      	ldr	r3, [pc, #96]	; (800176c <HAL_RCC_ClockConfig+0x19c>)
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	430a      	orrs	r2, r1
 800170e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001710:	4b16      	ldr	r3, [pc, #88]	; (800176c <HAL_RCC_ClockConfig+0x19c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2201      	movs	r2, #1
 8001716:	4013      	ands	r3, r2
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	429a      	cmp	r2, r3
 800171c:	d001      	beq.n	8001722 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e020      	b.n	8001764 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2204      	movs	r2, #4
 8001728:	4013      	ands	r3, r2
 800172a:	d009      	beq.n	8001740 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800172c:	4b10      	ldr	r3, [pc, #64]	; (8001770 <HAL_RCC_ClockConfig+0x1a0>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	4a11      	ldr	r2, [pc, #68]	; (8001778 <HAL_RCC_ClockConfig+0x1a8>)
 8001732:	4013      	ands	r3, r2
 8001734:	0019      	movs	r1, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68da      	ldr	r2, [r3, #12]
 800173a:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <HAL_RCC_ClockConfig+0x1a0>)
 800173c:	430a      	orrs	r2, r1
 800173e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001740:	f000 f820 	bl	8001784 <HAL_RCC_GetSysClockFreq>
 8001744:	0001      	movs	r1, r0
 8001746:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <HAL_RCC_ClockConfig+0x1a0>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	091b      	lsrs	r3, r3, #4
 800174c:	220f      	movs	r2, #15
 800174e:	4013      	ands	r3, r2
 8001750:	4a0a      	ldr	r2, [pc, #40]	; (800177c <HAL_RCC_ClockConfig+0x1ac>)
 8001752:	5cd3      	ldrb	r3, [r2, r3]
 8001754:	000a      	movs	r2, r1
 8001756:	40da      	lsrs	r2, r3
 8001758:	4b09      	ldr	r3, [pc, #36]	; (8001780 <HAL_RCC_ClockConfig+0x1b0>)
 800175a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800175c:	2003      	movs	r0, #3
 800175e:	f7fe ffaf 	bl	80006c0 <HAL_InitTick>
  
  return HAL_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	0018      	movs	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	b004      	add	sp, #16
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40022000 	.word	0x40022000
 8001770:	40021000 	.word	0x40021000
 8001774:	00001388 	.word	0x00001388
 8001778:	fffff8ff 	.word	0xfffff8ff
 800177c:	08004444 	.word	0x08004444
 8001780:	20000000 	.word	0x20000000

08001784 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001784:	b590      	push	{r4, r7, lr}
 8001786:	b08f      	sub	sp, #60	; 0x3c
 8001788:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800178a:	2314      	movs	r3, #20
 800178c:	18fb      	adds	r3, r7, r3
 800178e:	4a38      	ldr	r2, [pc, #224]	; (8001870 <HAL_RCC_GetSysClockFreq+0xec>)
 8001790:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001792:	c313      	stmia	r3!, {r0, r1, r4}
 8001794:	6812      	ldr	r2, [r2, #0]
 8001796:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	4a36      	ldr	r2, [pc, #216]	; (8001874 <HAL_RCC_GetSysClockFreq+0xf0>)
 800179c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800179e:	c313      	stmia	r3!, {r0, r1, r4}
 80017a0:	6812      	ldr	r2, [r2, #0]
 80017a2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017a8:	2300      	movs	r3, #0
 80017aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80017ac:	2300      	movs	r3, #0
 80017ae:	637b      	str	r3, [r7, #52]	; 0x34
 80017b0:	2300      	movs	r3, #0
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80017b8:	4b2f      	ldr	r3, [pc, #188]	; (8001878 <HAL_RCC_GetSysClockFreq+0xf4>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c0:	220c      	movs	r2, #12
 80017c2:	4013      	ands	r3, r2
 80017c4:	2b0c      	cmp	r3, #12
 80017c6:	d047      	beq.n	8001858 <HAL_RCC_GetSysClockFreq+0xd4>
 80017c8:	d849      	bhi.n	800185e <HAL_RCC_GetSysClockFreq+0xda>
 80017ca:	2b04      	cmp	r3, #4
 80017cc:	d002      	beq.n	80017d4 <HAL_RCC_GetSysClockFreq+0x50>
 80017ce:	2b08      	cmp	r3, #8
 80017d0:	d003      	beq.n	80017da <HAL_RCC_GetSysClockFreq+0x56>
 80017d2:	e044      	b.n	800185e <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017d4:	4b29      	ldr	r3, [pc, #164]	; (800187c <HAL_RCC_GetSysClockFreq+0xf8>)
 80017d6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80017d8:	e044      	b.n	8001864 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80017da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017dc:	0c9b      	lsrs	r3, r3, #18
 80017de:	220f      	movs	r2, #15
 80017e0:	4013      	ands	r3, r2
 80017e2:	2214      	movs	r2, #20
 80017e4:	18ba      	adds	r2, r7, r2
 80017e6:	5cd3      	ldrb	r3, [r2, r3]
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80017ea:	4b23      	ldr	r3, [pc, #140]	; (8001878 <HAL_RCC_GetSysClockFreq+0xf4>)
 80017ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ee:	220f      	movs	r2, #15
 80017f0:	4013      	ands	r3, r2
 80017f2:	1d3a      	adds	r2, r7, #4
 80017f4:	5cd3      	ldrb	r3, [r2, r3]
 80017f6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80017f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017fa:	23c0      	movs	r3, #192	; 0xc0
 80017fc:	025b      	lsls	r3, r3, #9
 80017fe:	401a      	ands	r2, r3
 8001800:	2380      	movs	r3, #128	; 0x80
 8001802:	025b      	lsls	r3, r3, #9
 8001804:	429a      	cmp	r2, r3
 8001806:	d109      	bne.n	800181c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001808:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800180a:	481c      	ldr	r0, [pc, #112]	; (800187c <HAL_RCC_GetSysClockFreq+0xf8>)
 800180c:	f7fe fc7c 	bl	8000108 <__udivsi3>
 8001810:	0003      	movs	r3, r0
 8001812:	001a      	movs	r2, r3
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001816:	4353      	muls	r3, r2
 8001818:	637b      	str	r3, [r7, #52]	; 0x34
 800181a:	e01a      	b.n	8001852 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800181c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800181e:	23c0      	movs	r3, #192	; 0xc0
 8001820:	025b      	lsls	r3, r3, #9
 8001822:	401a      	ands	r2, r3
 8001824:	23c0      	movs	r3, #192	; 0xc0
 8001826:	025b      	lsls	r3, r3, #9
 8001828:	429a      	cmp	r2, r3
 800182a:	d109      	bne.n	8001840 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800182c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800182e:	4814      	ldr	r0, [pc, #80]	; (8001880 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001830:	f7fe fc6a 	bl	8000108 <__udivsi3>
 8001834:	0003      	movs	r3, r0
 8001836:	001a      	movs	r2, r3
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	4353      	muls	r3, r2
 800183c:	637b      	str	r3, [r7, #52]	; 0x34
 800183e:	e008      	b.n	8001852 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001840:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001842:	480e      	ldr	r0, [pc, #56]	; (800187c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001844:	f7fe fc60 	bl	8000108 <__udivsi3>
 8001848:	0003      	movs	r3, r0
 800184a:	001a      	movs	r2, r3
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	4353      	muls	r3, r2
 8001850:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001854:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001856:	e005      	b.n	8001864 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001858:	4b09      	ldr	r3, [pc, #36]	; (8001880 <HAL_RCC_GetSysClockFreq+0xfc>)
 800185a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800185c:	e002      	b.n	8001864 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800185e:	4b07      	ldr	r3, [pc, #28]	; (800187c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001860:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001862:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001866:	0018      	movs	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	b00f      	add	sp, #60	; 0x3c
 800186c:	bd90      	pop	{r4, r7, pc}
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	0800441c 	.word	0x0800441c
 8001874:	0800442c 	.word	0x0800442c
 8001878:	40021000 	.word	0x40021000
 800187c:	007a1200 	.word	0x007a1200
 8001880:	02dc6c00 	.word	0x02dc6c00

08001884 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001888:	4b02      	ldr	r3, [pc, #8]	; (8001894 <HAL_RCC_GetHCLKFreq+0x10>)
 800188a:	681b      	ldr	r3, [r3, #0]
}
 800188c:	0018      	movs	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	20000000 	.word	0x20000000

08001898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800189c:	f7ff fff2 	bl	8001884 <HAL_RCC_GetHCLKFreq>
 80018a0:	0001      	movs	r1, r0
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	0a1b      	lsrs	r3, r3, #8
 80018a8:	2207      	movs	r2, #7
 80018aa:	4013      	ands	r3, r2
 80018ac:	4a04      	ldr	r2, [pc, #16]	; (80018c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80018ae:	5cd3      	ldrb	r3, [r2, r3]
 80018b0:	40d9      	lsrs	r1, r3
 80018b2:	000b      	movs	r3, r1
}    
 80018b4:	0018      	movs	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	40021000 	.word	0x40021000
 80018c0:	08004454 	.word	0x08004454

080018c4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2207      	movs	r2, #7
 80018d2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018d4:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <HAL_RCC_GetClockConfig+0x4c>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2203      	movs	r2, #3
 80018da:	401a      	ands	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80018e0:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <HAL_RCC_GetClockConfig+0x4c>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	22f0      	movs	r2, #240	; 0xf0
 80018e6:	401a      	ands	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <HAL_RCC_GetClockConfig+0x4c>)
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	23e0      	movs	r3, #224	; 0xe0
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	401a      	ands	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_RCC_GetClockConfig+0x50>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2201      	movs	r2, #1
 8001900:	401a      	ands	r2, r3
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	601a      	str	r2, [r3, #0]
}
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	46bd      	mov	sp, r7
 800190a:	b002      	add	sp, #8
 800190c:	bd80      	pop	{r7, pc}
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	40021000 	.word	0x40021000
 8001914:	40022000 	.word	0x40022000

08001918 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	2380      	movs	r3, #128	; 0x80
 800192e:	025b      	lsls	r3, r3, #9
 8001930:	4013      	ands	r3, r2
 8001932:	d100      	bne.n	8001936 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001934:	e08e      	b.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001936:	2017      	movs	r0, #23
 8001938:	183b      	adds	r3, r7, r0
 800193a:	2200      	movs	r2, #0
 800193c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800193e:	4b6e      	ldr	r3, [pc, #440]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001940:	69da      	ldr	r2, [r3, #28]
 8001942:	2380      	movs	r3, #128	; 0x80
 8001944:	055b      	lsls	r3, r3, #21
 8001946:	4013      	ands	r3, r2
 8001948:	d110      	bne.n	800196c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800194a:	4b6b      	ldr	r3, [pc, #428]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800194c:	69da      	ldr	r2, [r3, #28]
 800194e:	4b6a      	ldr	r3, [pc, #424]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001950:	2180      	movs	r1, #128	; 0x80
 8001952:	0549      	lsls	r1, r1, #21
 8001954:	430a      	orrs	r2, r1
 8001956:	61da      	str	r2, [r3, #28]
 8001958:	4b67      	ldr	r3, [pc, #412]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800195a:	69da      	ldr	r2, [r3, #28]
 800195c:	2380      	movs	r3, #128	; 0x80
 800195e:	055b      	lsls	r3, r3, #21
 8001960:	4013      	ands	r3, r2
 8001962:	60bb      	str	r3, [r7, #8]
 8001964:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001966:	183b      	adds	r3, r7, r0
 8001968:	2201      	movs	r2, #1
 800196a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800196c:	4b63      	ldr	r3, [pc, #396]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	4013      	ands	r3, r2
 8001976:	d11a      	bne.n	80019ae <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001978:	4b60      	ldr	r3, [pc, #384]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4b5f      	ldr	r3, [pc, #380]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800197e:	2180      	movs	r1, #128	; 0x80
 8001980:	0049      	lsls	r1, r1, #1
 8001982:	430a      	orrs	r2, r1
 8001984:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001986:	f7fe ff95 	bl	80008b4 <HAL_GetTick>
 800198a:	0003      	movs	r3, r0
 800198c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198e:	e008      	b.n	80019a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001990:	f7fe ff90 	bl	80008b4 <HAL_GetTick>
 8001994:	0002      	movs	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b64      	cmp	r3, #100	; 0x64
 800199c:	d901      	bls.n	80019a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e0a6      	b.n	8001af0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a2:	4b56      	ldr	r3, [pc, #344]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	2380      	movs	r3, #128	; 0x80
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4013      	ands	r3, r2
 80019ac:	d0f0      	beq.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80019ae:	4b52      	ldr	r3, [pc, #328]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019b0:	6a1a      	ldr	r2, [r3, #32]
 80019b2:	23c0      	movs	r3, #192	; 0xc0
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4013      	ands	r3, r2
 80019b8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d034      	beq.n	8001a2a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	23c0      	movs	r3, #192	; 0xc0
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4013      	ands	r3, r2
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d02c      	beq.n	8001a2a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80019d0:	4b49      	ldr	r3, [pc, #292]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	4a4a      	ldr	r2, [pc, #296]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80019d6:	4013      	ands	r3, r2
 80019d8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80019da:	4b47      	ldr	r3, [pc, #284]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019dc:	6a1a      	ldr	r2, [r3, #32]
 80019de:	4b46      	ldr	r3, [pc, #280]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019e0:	2180      	movs	r1, #128	; 0x80
 80019e2:	0249      	lsls	r1, r1, #9
 80019e4:	430a      	orrs	r2, r1
 80019e6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80019e8:	4b43      	ldr	r3, [pc, #268]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019ea:	6a1a      	ldr	r2, [r3, #32]
 80019ec:	4b42      	ldr	r3, [pc, #264]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019ee:	4945      	ldr	r1, [pc, #276]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80019f0:	400a      	ands	r2, r1
 80019f2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80019f4:	4b40      	ldr	r3, [pc, #256]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2201      	movs	r2, #1
 80019fe:	4013      	ands	r3, r2
 8001a00:	d013      	beq.n	8001a2a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a02:	f7fe ff57 	bl	80008b4 <HAL_GetTick>
 8001a06:	0003      	movs	r3, r0
 8001a08:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a0a:	e009      	b.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a0c:	f7fe ff52 	bl	80008b4 <HAL_GetTick>
 8001a10:	0002      	movs	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	4a3c      	ldr	r2, [pc, #240]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e067      	b.n	8001af0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a20:	4b35      	ldr	r3, [pc, #212]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	2202      	movs	r2, #2
 8001a26:	4013      	ands	r3, r2
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a2a:	4b33      	ldr	r3, [pc, #204]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	4a34      	ldr	r2, [pc, #208]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001a30:	4013      	ands	r3, r2
 8001a32:	0019      	movs	r1, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	4b2f      	ldr	r3, [pc, #188]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a3e:	2317      	movs	r3, #23
 8001a40:	18fb      	adds	r3, r7, r3
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d105      	bne.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a48:	4b2b      	ldr	r3, [pc, #172]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a4a:	69da      	ldr	r2, [r3, #28]
 8001a4c:	4b2a      	ldr	r3, [pc, #168]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a4e:	492f      	ldr	r1, [pc, #188]	; (8001b0c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001a50:	400a      	ands	r2, r1
 8001a52:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d009      	beq.n	8001a72 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a5e:	4b26      	ldr	r3, [pc, #152]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	2203      	movs	r2, #3
 8001a64:	4393      	bics	r3, r2
 8001a66:	0019      	movs	r1, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	4b22      	ldr	r3, [pc, #136]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2202      	movs	r2, #2
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d009      	beq.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a7c:	4b1e      	ldr	r3, [pc, #120]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a80:	4a23      	ldr	r2, [pc, #140]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a82:	4013      	ands	r3, r2
 8001a84:	0019      	movs	r1, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68da      	ldr	r2, [r3, #12]
 8001a8a:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2220      	movs	r2, #32
 8001a96:	4013      	ands	r3, r2
 8001a98:	d009      	beq.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001a9a:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	2210      	movs	r2, #16
 8001aa0:	4393      	bics	r3, r2
 8001aa2:	0019      	movs	r1, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	691a      	ldr	r2, [r3, #16]
 8001aa8:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	2380      	movs	r3, #128	; 0x80
 8001ab4:	029b      	lsls	r3, r3, #10
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d009      	beq.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001aba:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	2280      	movs	r2, #128	; 0x80
 8001ac0:	4393      	bics	r3, r2
 8001ac2:	0019      	movs	r1, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	699a      	ldr	r2, [r3, #24]
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001aca:	430a      	orrs	r2, r1
 8001acc:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	2380      	movs	r3, #128	; 0x80
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d009      	beq.n	8001aee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001ada:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	2240      	movs	r2, #64	; 0x40
 8001ae0:	4393      	bics	r3, r2
 8001ae2:	0019      	movs	r1, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	695a      	ldr	r2, [r3, #20]
 8001ae8:	4b03      	ldr	r3, [pc, #12]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001aea:	430a      	orrs	r2, r1
 8001aec:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	0018      	movs	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	b006      	add	sp, #24
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40021000 	.word	0x40021000
 8001afc:	40007000 	.word	0x40007000
 8001b00:	fffffcff 	.word	0xfffffcff
 8001b04:	fffeffff 	.word	0xfffeffff
 8001b08:	00001388 	.word	0x00001388
 8001b0c:	efffffff 	.word	0xefffffff
 8001b10:	fffcffff 	.word	0xfffcffff

08001b14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e042      	b.n	8001bac <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	223d      	movs	r2, #61	; 0x3d
 8001b2a:	5c9b      	ldrb	r3, [r3, r2]
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d107      	bne.n	8001b42 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	223c      	movs	r2, #60	; 0x3c
 8001b36:	2100      	movs	r1, #0
 8001b38:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	f000 f839 	bl	8001bb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	223d      	movs	r2, #61	; 0x3d
 8001b46:	2102      	movs	r1, #2
 8001b48:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	3304      	adds	r3, #4
 8001b52:	0019      	movs	r1, r3
 8001b54:	0010      	movs	r0, r2
 8001b56:	f000 f9bd 	bl	8001ed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2246      	movs	r2, #70	; 0x46
 8001b5e:	2101      	movs	r1, #1
 8001b60:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	223e      	movs	r2, #62	; 0x3e
 8001b66:	2101      	movs	r1, #1
 8001b68:	5499      	strb	r1, [r3, r2]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	223f      	movs	r2, #63	; 0x3f
 8001b6e:	2101      	movs	r1, #1
 8001b70:	5499      	strb	r1, [r3, r2]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2240      	movs	r2, #64	; 0x40
 8001b76:	2101      	movs	r1, #1
 8001b78:	5499      	strb	r1, [r3, r2]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2241      	movs	r2, #65	; 0x41
 8001b7e:	2101      	movs	r1, #1
 8001b80:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2242      	movs	r2, #66	; 0x42
 8001b86:	2101      	movs	r1, #1
 8001b88:	5499      	strb	r1, [r3, r2]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2243      	movs	r2, #67	; 0x43
 8001b8e:	2101      	movs	r1, #1
 8001b90:	5499      	strb	r1, [r3, r2]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2244      	movs	r2, #68	; 0x44
 8001b96:	2101      	movs	r1, #1
 8001b98:	5499      	strb	r1, [r3, r2]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2245      	movs	r2, #69	; 0x45
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	223d      	movs	r2, #61	; 0x3d
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	0018      	movs	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	b002      	add	sp, #8
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bbc:	46c0      	nop			; (mov r8, r8)
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	b002      	add	sp, #8
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	223d      	movs	r2, #61	; 0x3d
 8001bd0:	5c9b      	ldrb	r3, [r3, r2]
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d001      	beq.n	8001bdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e03b      	b.n	8001c54 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	223d      	movs	r2, #61	; 0x3d
 8001be0:	2102      	movs	r1, #2
 8001be2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68da      	ldr	r2, [r3, #12]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2101      	movs	r1, #1
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a18      	ldr	r2, [pc, #96]	; (8001c5c <HAL_TIM_Base_Start_IT+0x98>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d00f      	beq.n	8001c1e <HAL_TIM_Base_Start_IT+0x5a>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	2380      	movs	r3, #128	; 0x80
 8001c04:	05db      	lsls	r3, r3, #23
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d009      	beq.n	8001c1e <HAL_TIM_Base_Start_IT+0x5a>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a14      	ldr	r2, [pc, #80]	; (8001c60 <HAL_TIM_Base_Start_IT+0x9c>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d004      	beq.n	8001c1e <HAL_TIM_Base_Start_IT+0x5a>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a12      	ldr	r2, [pc, #72]	; (8001c64 <HAL_TIM_Base_Start_IT+0xa0>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d111      	bne.n	8001c42 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	2207      	movs	r2, #7
 8001c26:	4013      	ands	r3, r2
 8001c28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2b06      	cmp	r3, #6
 8001c2e:	d010      	beq.n	8001c52 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c40:	e007      	b.n	8001c52 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	0018      	movs	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	b004      	add	sp, #16
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40012c00 	.word	0x40012c00
 8001c60:	40000400 	.word	0x40000400
 8001c64:	40014000 	.word	0x40014000

08001c68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	2202      	movs	r2, #2
 8001c78:	4013      	ands	r3, r2
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d124      	bne.n	8001cc8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	2202      	movs	r2, #2
 8001c86:	4013      	ands	r3, r2
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d11d      	bne.n	8001cc8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2203      	movs	r2, #3
 8001c92:	4252      	negs	r2, r2
 8001c94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	2203      	movs	r2, #3
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d004      	beq.n	8001cb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	0018      	movs	r0, r3
 8001cac:	f000 f8fa 	bl	8001ea4 <HAL_TIM_IC_CaptureCallback>
 8001cb0:	e007      	b.n	8001cc2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	f000 f8ed 	bl	8001e94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	f000 f8f9 	bl	8001eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	2204      	movs	r2, #4
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	d125      	bne.n	8001d22 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	2204      	movs	r2, #4
 8001cde:	4013      	ands	r3, r2
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	d11e      	bne.n	8001d22 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2205      	movs	r2, #5
 8001cea:	4252      	negs	r2, r2
 8001cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	699a      	ldr	r2, [r3, #24]
 8001cfa:	23c0      	movs	r3, #192	; 0xc0
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4013      	ands	r3, r2
 8001d00:	d004      	beq.n	8001d0c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	0018      	movs	r0, r3
 8001d06:	f000 f8cd 	bl	8001ea4 <HAL_TIM_IC_CaptureCallback>
 8001d0a:	e007      	b.n	8001d1c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	0018      	movs	r0, r3
 8001d10:	f000 f8c0 	bl	8001e94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	0018      	movs	r0, r3
 8001d18:	f000 f8cc 	bl	8001eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	2208      	movs	r2, #8
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d124      	bne.n	8001d7a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	2208      	movs	r2, #8
 8001d38:	4013      	ands	r3, r2
 8001d3a:	2b08      	cmp	r3, #8
 8001d3c:	d11d      	bne.n	8001d7a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2209      	movs	r2, #9
 8001d44:	4252      	negs	r2, r2
 8001d46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	2203      	movs	r2, #3
 8001d56:	4013      	ands	r3, r2
 8001d58:	d004      	beq.n	8001d64 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	f000 f8a1 	bl	8001ea4 <HAL_TIM_IC_CaptureCallback>
 8001d62:	e007      	b.n	8001d74 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	0018      	movs	r0, r3
 8001d68:	f000 f894 	bl	8001e94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f000 f8a0 	bl	8001eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	2210      	movs	r2, #16
 8001d82:	4013      	ands	r3, r2
 8001d84:	2b10      	cmp	r3, #16
 8001d86:	d125      	bne.n	8001dd4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	2210      	movs	r2, #16
 8001d90:	4013      	ands	r3, r2
 8001d92:	2b10      	cmp	r3, #16
 8001d94:	d11e      	bne.n	8001dd4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2211      	movs	r2, #17
 8001d9c:	4252      	negs	r2, r2
 8001d9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2208      	movs	r2, #8
 8001da4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	69da      	ldr	r2, [r3, #28]
 8001dac:	23c0      	movs	r3, #192	; 0xc0
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4013      	ands	r3, r2
 8001db2:	d004      	beq.n	8001dbe <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	0018      	movs	r0, r3
 8001db8:	f000 f874 	bl	8001ea4 <HAL_TIM_IC_CaptureCallback>
 8001dbc:	e007      	b.n	8001dce <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f000 f867 	bl	8001e94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	0018      	movs	r0, r3
 8001dca:	f000 f873 	bl	8001eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	4013      	ands	r3, r2
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d10f      	bne.n	8001e02 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	2201      	movs	r2, #1
 8001dea:	4013      	ands	r3, r2
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d108      	bne.n	8001e02 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2202      	movs	r2, #2
 8001df6:	4252      	negs	r2, r2
 8001df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	f7fe fbc9 	bl	8000594 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	2280      	movs	r2, #128	; 0x80
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b80      	cmp	r3, #128	; 0x80
 8001e0e:	d10f      	bne.n	8001e30 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	2280      	movs	r2, #128	; 0x80
 8001e18:	4013      	ands	r3, r2
 8001e1a:	2b80      	cmp	r3, #128	; 0x80
 8001e1c:	d108      	bne.n	8001e30 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2281      	movs	r2, #129	; 0x81
 8001e24:	4252      	negs	r2, r2
 8001e26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	f000 f8da 	bl	8001fe4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	2240      	movs	r2, #64	; 0x40
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b40      	cmp	r3, #64	; 0x40
 8001e3c:	d10f      	bne.n	8001e5e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	2240      	movs	r2, #64	; 0x40
 8001e46:	4013      	ands	r3, r2
 8001e48:	2b40      	cmp	r3, #64	; 0x40
 8001e4a:	d108      	bne.n	8001e5e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2241      	movs	r2, #65	; 0x41
 8001e52:	4252      	negs	r2, r2
 8001e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	0018      	movs	r0, r3
 8001e5a:	f000 f833 	bl	8001ec4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	2220      	movs	r2, #32
 8001e66:	4013      	ands	r3, r2
 8001e68:	2b20      	cmp	r3, #32
 8001e6a:	d10f      	bne.n	8001e8c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	2220      	movs	r2, #32
 8001e74:	4013      	ands	r3, r2
 8001e76:	2b20      	cmp	r3, #32
 8001e78:	d108      	bne.n	8001e8c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2221      	movs	r2, #33	; 0x21
 8001e80:	4252      	negs	r2, r2
 8001e82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	0018      	movs	r0, r3
 8001e88:	f000 f8a4 	bl	8001fd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e8c:	46c0      	nop			; (mov r8, r8)
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	b002      	add	sp, #8
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e9c:	46c0      	nop			; (mov r8, r8)
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	b002      	add	sp, #8
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001eac:	46c0      	nop			; (mov r8, r8)
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	b002      	add	sp, #8
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ebc:	46c0      	nop			; (mov r8, r8)
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	b002      	add	sp, #8
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ecc:	46c0      	nop			; (mov r8, r8)
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	b002      	add	sp, #8
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a34      	ldr	r2, [pc, #208]	; (8001fb8 <TIM_Base_SetConfig+0xe4>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d008      	beq.n	8001efe <TIM_Base_SetConfig+0x2a>
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	05db      	lsls	r3, r3, #23
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d003      	beq.n	8001efe <TIM_Base_SetConfig+0x2a>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a30      	ldr	r2, [pc, #192]	; (8001fbc <TIM_Base_SetConfig+0xe8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d108      	bne.n	8001f10 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2270      	movs	r2, #112	; 0x70
 8001f02:	4393      	bics	r3, r2
 8001f04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a29      	ldr	r2, [pc, #164]	; (8001fb8 <TIM_Base_SetConfig+0xe4>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d018      	beq.n	8001f4a <TIM_Base_SetConfig+0x76>
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	2380      	movs	r3, #128	; 0x80
 8001f1c:	05db      	lsls	r3, r3, #23
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d013      	beq.n	8001f4a <TIM_Base_SetConfig+0x76>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a25      	ldr	r2, [pc, #148]	; (8001fbc <TIM_Base_SetConfig+0xe8>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d00f      	beq.n	8001f4a <TIM_Base_SetConfig+0x76>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a24      	ldr	r2, [pc, #144]	; (8001fc0 <TIM_Base_SetConfig+0xec>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d00b      	beq.n	8001f4a <TIM_Base_SetConfig+0x76>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a23      	ldr	r2, [pc, #140]	; (8001fc4 <TIM_Base_SetConfig+0xf0>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d007      	beq.n	8001f4a <TIM_Base_SetConfig+0x76>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a22      	ldr	r2, [pc, #136]	; (8001fc8 <TIM_Base_SetConfig+0xf4>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d003      	beq.n	8001f4a <TIM_Base_SetConfig+0x76>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a21      	ldr	r2, [pc, #132]	; (8001fcc <TIM_Base_SetConfig+0xf8>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d108      	bne.n	8001f5c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	4a20      	ldr	r2, [pc, #128]	; (8001fd0 <TIM_Base_SetConfig+0xfc>)
 8001f4e:	4013      	ands	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2280      	movs	r2, #128	; 0x80
 8001f60:	4393      	bics	r3, r2
 8001f62:	001a      	movs	r2, r3
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a0c      	ldr	r2, [pc, #48]	; (8001fb8 <TIM_Base_SetConfig+0xe4>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d00b      	beq.n	8001fa2 <TIM_Base_SetConfig+0xce>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a0d      	ldr	r2, [pc, #52]	; (8001fc4 <TIM_Base_SetConfig+0xf0>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d007      	beq.n	8001fa2 <TIM_Base_SetConfig+0xce>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a0c      	ldr	r2, [pc, #48]	; (8001fc8 <TIM_Base_SetConfig+0xf4>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d003      	beq.n	8001fa2 <TIM_Base_SetConfig+0xce>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a0b      	ldr	r2, [pc, #44]	; (8001fcc <TIM_Base_SetConfig+0xf8>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d103      	bne.n	8001faa <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	691a      	ldr	r2, [r3, #16]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	615a      	str	r2, [r3, #20]
}
 8001fb0:	46c0      	nop			; (mov r8, r8)
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	b004      	add	sp, #16
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40012c00 	.word	0x40012c00
 8001fbc:	40000400 	.word	0x40000400
 8001fc0:	40002000 	.word	0x40002000
 8001fc4:	40014000 	.word	0x40014000
 8001fc8:	40014400 	.word	0x40014400
 8001fcc:	40014800 	.word	0x40014800
 8001fd0:	fffffcff 	.word	0xfffffcff

08001fd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fdc:	46c0      	nop			; (mov r8, r8)
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	b002      	add	sp, #8
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fec:	46c0      	nop			; (mov r8, r8)
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	b002      	add	sp, #8
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e044      	b.n	8002090 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800200a:	2b00      	cmp	r3, #0
 800200c:	d107      	bne.n	800201e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2274      	movs	r2, #116	; 0x74
 8002012:	2100      	movs	r1, #0
 8002014:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	0018      	movs	r0, r3
 800201a:	f7fe fafd 	bl	8000618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2224      	movs	r2, #36	; 0x24
 8002022:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2101      	movs	r1, #1
 8002030:	438a      	bics	r2, r1
 8002032:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	0018      	movs	r0, r3
 8002038:	f000 fbce 	bl	80027d8 <UART_SetConfig>
 800203c:	0003      	movs	r3, r0
 800203e:	2b01      	cmp	r3, #1
 8002040:	d101      	bne.n	8002046 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e024      	b.n	8002090 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	0018      	movs	r0, r3
 8002052:	f000 fd49 	bl	8002ae8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	490d      	ldr	r1, [pc, #52]	; (8002098 <HAL_UART_Init+0xa4>)
 8002062:	400a      	ands	r2, r1
 8002064:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	212a      	movs	r1, #42	; 0x2a
 8002072:	438a      	bics	r2, r1
 8002074:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2101      	movs	r1, #1
 8002082:	430a      	orrs	r2, r1
 8002084:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	0018      	movs	r0, r3
 800208a:	f000 fde1 	bl	8002c50 <UART_CheckIdleState>
 800208e:	0003      	movs	r3, r0
}
 8002090:	0018      	movs	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	b002      	add	sp, #8
 8002096:	bd80      	pop	{r7, pc}
 8002098:	ffffb7ff 	.word	0xffffb7ff

0800209c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08a      	sub	sp, #40	; 0x28
 80020a0:	af02      	add	r7, sp, #8
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	603b      	str	r3, [r7, #0]
 80020a8:	1dbb      	adds	r3, r7, #6
 80020aa:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020b0:	2b20      	cmp	r3, #32
 80020b2:	d000      	beq.n	80020b6 <HAL_UART_Transmit+0x1a>
 80020b4:	e096      	b.n	80021e4 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_UART_Transmit+0x28>
 80020bc:	1dbb      	adds	r3, r7, #6
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e08e      	b.n	80021e6 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	015b      	lsls	r3, r3, #5
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d109      	bne.n	80020e8 <HAL_UART_Transmit+0x4c>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d105      	bne.n	80020e8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2201      	movs	r2, #1
 80020e0:	4013      	ands	r3, r2
 80020e2:	d001      	beq.n	80020e8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e07e      	b.n	80021e6 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2274      	movs	r2, #116	; 0x74
 80020ec:	5c9b      	ldrb	r3, [r3, r2]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d101      	bne.n	80020f6 <HAL_UART_Transmit+0x5a>
 80020f2:	2302      	movs	r3, #2
 80020f4:	e077      	b.n	80021e6 <HAL_UART_Transmit+0x14a>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2274      	movs	r2, #116	; 0x74
 80020fa:	2101      	movs	r1, #1
 80020fc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2280      	movs	r2, #128	; 0x80
 8002102:	2100      	movs	r1, #0
 8002104:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2221      	movs	r2, #33	; 0x21
 800210a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800210c:	f7fe fbd2 	bl	80008b4 <HAL_GetTick>
 8002110:	0003      	movs	r3, r0
 8002112:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	1dba      	adds	r2, r7, #6
 8002118:	2150      	movs	r1, #80	; 0x50
 800211a:	8812      	ldrh	r2, [r2, #0]
 800211c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	1dba      	adds	r2, r7, #6
 8002122:	2152      	movs	r1, #82	; 0x52
 8002124:	8812      	ldrh	r2, [r2, #0]
 8002126:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	015b      	lsls	r3, r3, #5
 8002130:	429a      	cmp	r2, r3
 8002132:	d108      	bne.n	8002146 <HAL_UART_Transmit+0xaa>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d104      	bne.n	8002146 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800213c:	2300      	movs	r3, #0
 800213e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	61bb      	str	r3, [r7, #24]
 8002144:	e003      	b.n	800214e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800214a:	2300      	movs	r3, #0
 800214c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2274      	movs	r2, #116	; 0x74
 8002152:	2100      	movs	r1, #0
 8002154:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002156:	e02d      	b.n	80021b4 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	0013      	movs	r3, r2
 8002162:	2200      	movs	r2, #0
 8002164:	2180      	movs	r1, #128	; 0x80
 8002166:	f000 fdbb 	bl	8002ce0 <UART_WaitOnFlagUntilTimeout>
 800216a:	1e03      	subs	r3, r0, #0
 800216c:	d001      	beq.n	8002172 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e039      	b.n	80021e6 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10b      	bne.n	8002190 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	881a      	ldrh	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	05d2      	lsls	r2, r2, #23
 8002182:	0dd2      	lsrs	r2, r2, #23
 8002184:	b292      	uxth	r2, r2
 8002186:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	3302      	adds	r3, #2
 800218c:	61bb      	str	r3, [r7, #24]
 800218e:	e008      	b.n	80021a2 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	781a      	ldrb	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	b292      	uxth	r2, r2
 800219a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	3301      	adds	r3, #1
 80021a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2252      	movs	r2, #82	; 0x52
 80021a6:	5a9b      	ldrh	r3, [r3, r2]
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	3b01      	subs	r3, #1
 80021ac:	b299      	uxth	r1, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2252      	movs	r2, #82	; 0x52
 80021b2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2252      	movs	r2, #82	; 0x52
 80021b8:	5a9b      	ldrh	r3, [r3, r2]
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1cb      	bne.n	8002158 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	0013      	movs	r3, r2
 80021ca:	2200      	movs	r2, #0
 80021cc:	2140      	movs	r1, #64	; 0x40
 80021ce:	f000 fd87 	bl	8002ce0 <UART_WaitOnFlagUntilTimeout>
 80021d2:	1e03      	subs	r3, r0, #0
 80021d4:	d001      	beq.n	80021da <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e005      	b.n	80021e6 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2220      	movs	r2, #32
 80021de:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80021e0:	2300      	movs	r3, #0
 80021e2:	e000      	b.n	80021e6 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80021e4:	2302      	movs	r3, #2
  }
}
 80021e6:	0018      	movs	r0, r3
 80021e8:	46bd      	mov	sp, r7
 80021ea:	b008      	add	sp, #32
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80021f0:	b590      	push	{r4, r7, lr}
 80021f2:	b0ab      	sub	sp, #172	; 0xac
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	22a4      	movs	r2, #164	; 0xa4
 8002200:	18b9      	adds	r1, r7, r2
 8002202:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	20a0      	movs	r0, #160	; 0xa0
 800220c:	1839      	adds	r1, r7, r0
 800220e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	219c      	movs	r1, #156	; 0x9c
 8002218:	1879      	adds	r1, r7, r1
 800221a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800221c:	0011      	movs	r1, r2
 800221e:	18bb      	adds	r3, r7, r2
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a99      	ldr	r2, [pc, #612]	; (8002488 <HAL_UART_IRQHandler+0x298>)
 8002224:	4013      	ands	r3, r2
 8002226:	2298      	movs	r2, #152	; 0x98
 8002228:	18bc      	adds	r4, r7, r2
 800222a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800222c:	18bb      	adds	r3, r7, r2
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d114      	bne.n	800225e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002234:	187b      	adds	r3, r7, r1
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2220      	movs	r2, #32
 800223a:	4013      	ands	r3, r2
 800223c:	d00f      	beq.n	800225e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800223e:	183b      	adds	r3, r7, r0
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2220      	movs	r2, #32
 8002244:	4013      	ands	r3, r2
 8002246:	d00a      	beq.n	800225e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800224c:	2b00      	cmp	r3, #0
 800224e:	d100      	bne.n	8002252 <HAL_UART_IRQHandler+0x62>
 8002250:	e296      	b.n	8002780 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	0010      	movs	r0, r2
 800225a:	4798      	blx	r3
      }
      return;
 800225c:	e290      	b.n	8002780 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800225e:	2398      	movs	r3, #152	; 0x98
 8002260:	18fb      	adds	r3, r7, r3
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d100      	bne.n	800226a <HAL_UART_IRQHandler+0x7a>
 8002268:	e114      	b.n	8002494 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800226a:	239c      	movs	r3, #156	; 0x9c
 800226c:	18fb      	adds	r3, r7, r3
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2201      	movs	r2, #1
 8002272:	4013      	ands	r3, r2
 8002274:	d106      	bne.n	8002284 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002276:	23a0      	movs	r3, #160	; 0xa0
 8002278:	18fb      	adds	r3, r7, r3
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a83      	ldr	r2, [pc, #524]	; (800248c <HAL_UART_IRQHandler+0x29c>)
 800227e:	4013      	ands	r3, r2
 8002280:	d100      	bne.n	8002284 <HAL_UART_IRQHandler+0x94>
 8002282:	e107      	b.n	8002494 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002284:	23a4      	movs	r3, #164	; 0xa4
 8002286:	18fb      	adds	r3, r7, r3
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2201      	movs	r2, #1
 800228c:	4013      	ands	r3, r2
 800228e:	d012      	beq.n	80022b6 <HAL_UART_IRQHandler+0xc6>
 8002290:	23a0      	movs	r3, #160	; 0xa0
 8002292:	18fb      	adds	r3, r7, r3
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	2380      	movs	r3, #128	; 0x80
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	4013      	ands	r3, r2
 800229c:	d00b      	beq.n	80022b6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2201      	movs	r2, #1
 80022a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2280      	movs	r2, #128	; 0x80
 80022aa:	589b      	ldr	r3, [r3, r2]
 80022ac:	2201      	movs	r2, #1
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2180      	movs	r1, #128	; 0x80
 80022b4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80022b6:	23a4      	movs	r3, #164	; 0xa4
 80022b8:	18fb      	adds	r3, r7, r3
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2202      	movs	r2, #2
 80022be:	4013      	ands	r3, r2
 80022c0:	d011      	beq.n	80022e6 <HAL_UART_IRQHandler+0xf6>
 80022c2:	239c      	movs	r3, #156	; 0x9c
 80022c4:	18fb      	adds	r3, r7, r3
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2201      	movs	r2, #1
 80022ca:	4013      	ands	r3, r2
 80022cc:	d00b      	beq.n	80022e6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2202      	movs	r2, #2
 80022d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2280      	movs	r2, #128	; 0x80
 80022da:	589b      	ldr	r3, [r3, r2]
 80022dc:	2204      	movs	r2, #4
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2180      	movs	r1, #128	; 0x80
 80022e4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80022e6:	23a4      	movs	r3, #164	; 0xa4
 80022e8:	18fb      	adds	r3, r7, r3
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2204      	movs	r2, #4
 80022ee:	4013      	ands	r3, r2
 80022f0:	d011      	beq.n	8002316 <HAL_UART_IRQHandler+0x126>
 80022f2:	239c      	movs	r3, #156	; 0x9c
 80022f4:	18fb      	adds	r3, r7, r3
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2201      	movs	r2, #1
 80022fa:	4013      	ands	r3, r2
 80022fc:	d00b      	beq.n	8002316 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2204      	movs	r2, #4
 8002304:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2280      	movs	r2, #128	; 0x80
 800230a:	589b      	ldr	r3, [r3, r2]
 800230c:	2202      	movs	r2, #2
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2180      	movs	r1, #128	; 0x80
 8002314:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002316:	23a4      	movs	r3, #164	; 0xa4
 8002318:	18fb      	adds	r3, r7, r3
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2208      	movs	r2, #8
 800231e:	4013      	ands	r3, r2
 8002320:	d017      	beq.n	8002352 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002322:	23a0      	movs	r3, #160	; 0xa0
 8002324:	18fb      	adds	r3, r7, r3
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2220      	movs	r2, #32
 800232a:	4013      	ands	r3, r2
 800232c:	d105      	bne.n	800233a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800232e:	239c      	movs	r3, #156	; 0x9c
 8002330:	18fb      	adds	r3, r7, r3
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2201      	movs	r2, #1
 8002336:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002338:	d00b      	beq.n	8002352 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2208      	movs	r2, #8
 8002340:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2280      	movs	r2, #128	; 0x80
 8002346:	589b      	ldr	r3, [r3, r2]
 8002348:	2208      	movs	r2, #8
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2180      	movs	r1, #128	; 0x80
 8002350:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002352:	23a4      	movs	r3, #164	; 0xa4
 8002354:	18fb      	adds	r3, r7, r3
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	2380      	movs	r3, #128	; 0x80
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	4013      	ands	r3, r2
 800235e:	d013      	beq.n	8002388 <HAL_UART_IRQHandler+0x198>
 8002360:	23a0      	movs	r3, #160	; 0xa0
 8002362:	18fb      	adds	r3, r7, r3
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	2380      	movs	r3, #128	; 0x80
 8002368:	04db      	lsls	r3, r3, #19
 800236a:	4013      	ands	r3, r2
 800236c:	d00c      	beq.n	8002388 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2280      	movs	r2, #128	; 0x80
 8002374:	0112      	lsls	r2, r2, #4
 8002376:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2280      	movs	r2, #128	; 0x80
 800237c:	589b      	ldr	r3, [r3, r2]
 800237e:	2220      	movs	r2, #32
 8002380:	431a      	orrs	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2180      	movs	r1, #128	; 0x80
 8002386:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2280      	movs	r2, #128	; 0x80
 800238c:	589b      	ldr	r3, [r3, r2]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d100      	bne.n	8002394 <HAL_UART_IRQHandler+0x1a4>
 8002392:	e1f7      	b.n	8002784 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002394:	23a4      	movs	r3, #164	; 0xa4
 8002396:	18fb      	adds	r3, r7, r3
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2220      	movs	r2, #32
 800239c:	4013      	ands	r3, r2
 800239e:	d00e      	beq.n	80023be <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80023a0:	23a0      	movs	r3, #160	; 0xa0
 80023a2:	18fb      	adds	r3, r7, r3
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2220      	movs	r2, #32
 80023a8:	4013      	ands	r3, r2
 80023aa:	d008      	beq.n	80023be <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d004      	beq.n	80023be <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	0010      	movs	r0, r2
 80023bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2280      	movs	r2, #128	; 0x80
 80023c2:	589b      	ldr	r3, [r3, r2]
 80023c4:	2194      	movs	r1, #148	; 0x94
 80023c6:	187a      	adds	r2, r7, r1
 80023c8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	2240      	movs	r2, #64	; 0x40
 80023d2:	4013      	ands	r3, r2
 80023d4:	2b40      	cmp	r3, #64	; 0x40
 80023d6:	d004      	beq.n	80023e2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80023d8:	187b      	adds	r3, r7, r1
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2228      	movs	r2, #40	; 0x28
 80023de:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80023e0:	d047      	beq.n	8002472 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	0018      	movs	r0, r3
 80023e6:	f000 fd3f 	bl	8002e68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2240      	movs	r2, #64	; 0x40
 80023f2:	4013      	ands	r3, r2
 80023f4:	2b40      	cmp	r3, #64	; 0x40
 80023f6:	d137      	bne.n	8002468 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023f8:	f3ef 8310 	mrs	r3, PRIMASK
 80023fc:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80023fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002400:	2090      	movs	r0, #144	; 0x90
 8002402:	183a      	adds	r2, r7, r0
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	2301      	movs	r3, #1
 8002408:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800240a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800240c:	f383 8810 	msr	PRIMASK, r3
}
 8002410:	46c0      	nop			; (mov r8, r8)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2140      	movs	r1, #64	; 0x40
 800241e:	438a      	bics	r2, r1
 8002420:	609a      	str	r2, [r3, #8]
 8002422:	183b      	adds	r3, r7, r0
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002428:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800242a:	f383 8810 	msr	PRIMASK, r3
}
 800242e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002434:	2b00      	cmp	r3, #0
 8002436:	d012      	beq.n	800245e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243c:	4a14      	ldr	r2, [pc, #80]	; (8002490 <HAL_UART_IRQHandler+0x2a0>)
 800243e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002444:	0018      	movs	r0, r3
 8002446:	f7fe fb48 	bl	8000ada <HAL_DMA_Abort_IT>
 800244a:	1e03      	subs	r3, r0, #0
 800244c:	d01a      	beq.n	8002484 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002452:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002458:	0018      	movs	r0, r3
 800245a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800245c:	e012      	b.n	8002484 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	0018      	movs	r0, r3
 8002462:	f000 f9a5 	bl	80027b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002466:	e00d      	b.n	8002484 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	0018      	movs	r0, r3
 800246c:	f000 f9a0 	bl	80027b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002470:	e008      	b.n	8002484 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	0018      	movs	r0, r3
 8002476:	f000 f99b 	bl	80027b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2280      	movs	r2, #128	; 0x80
 800247e:	2100      	movs	r1, #0
 8002480:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002482:	e17f      	b.n	8002784 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002484:	46c0      	nop			; (mov r8, r8)
    return;
 8002486:	e17d      	b.n	8002784 <HAL_UART_IRQHandler+0x594>
 8002488:	0000080f 	.word	0x0000080f
 800248c:	04000120 	.word	0x04000120
 8002490:	08002f2d 	.word	0x08002f2d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002498:	2b01      	cmp	r3, #1
 800249a:	d000      	beq.n	800249e <HAL_UART_IRQHandler+0x2ae>
 800249c:	e131      	b.n	8002702 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800249e:	23a4      	movs	r3, #164	; 0xa4
 80024a0:	18fb      	adds	r3, r7, r3
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2210      	movs	r2, #16
 80024a6:	4013      	ands	r3, r2
 80024a8:	d100      	bne.n	80024ac <HAL_UART_IRQHandler+0x2bc>
 80024aa:	e12a      	b.n	8002702 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80024ac:	23a0      	movs	r3, #160	; 0xa0
 80024ae:	18fb      	adds	r3, r7, r3
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2210      	movs	r2, #16
 80024b4:	4013      	ands	r3, r2
 80024b6:	d100      	bne.n	80024ba <HAL_UART_IRQHandler+0x2ca>
 80024b8:	e123      	b.n	8002702 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2210      	movs	r2, #16
 80024c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2240      	movs	r2, #64	; 0x40
 80024ca:	4013      	ands	r3, r2
 80024cc:	2b40      	cmp	r3, #64	; 0x40
 80024ce:	d000      	beq.n	80024d2 <HAL_UART_IRQHandler+0x2e2>
 80024d0:	e09b      	b.n	800260a <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	217e      	movs	r1, #126	; 0x7e
 80024dc:	187b      	adds	r3, r7, r1
 80024de:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80024e0:	187b      	adds	r3, r7, r1
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d100      	bne.n	80024ea <HAL_UART_IRQHandler+0x2fa>
 80024e8:	e14e      	b.n	8002788 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2258      	movs	r2, #88	; 0x58
 80024ee:	5a9b      	ldrh	r3, [r3, r2]
 80024f0:	187a      	adds	r2, r7, r1
 80024f2:	8812      	ldrh	r2, [r2, #0]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d300      	bcc.n	80024fa <HAL_UART_IRQHandler+0x30a>
 80024f8:	e146      	b.n	8002788 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	187a      	adds	r2, r7, r1
 80024fe:	215a      	movs	r1, #90	; 0x5a
 8002500:	8812      	ldrh	r2, [r2, #0]
 8002502:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	2b20      	cmp	r3, #32
 800250c:	d06e      	beq.n	80025ec <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800250e:	f3ef 8310 	mrs	r3, PRIMASK
 8002512:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002516:	67bb      	str	r3, [r7, #120]	; 0x78
 8002518:	2301      	movs	r3, #1
 800251a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800251c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800251e:	f383 8810 	msr	PRIMASK, r3
}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	499a      	ldr	r1, [pc, #616]	; (8002798 <HAL_UART_IRQHandler+0x5a8>)
 8002530:	400a      	ands	r2, r1
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002536:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800253a:	f383 8810 	msr	PRIMASK, r3
}
 800253e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002540:	f3ef 8310 	mrs	r3, PRIMASK
 8002544:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002548:	677b      	str	r3, [r7, #116]	; 0x74
 800254a:	2301      	movs	r3, #1
 800254c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800254e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002550:	f383 8810 	msr	PRIMASK, r3
}
 8002554:	46c0      	nop			; (mov r8, r8)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2101      	movs	r1, #1
 8002562:	438a      	bics	r2, r1
 8002564:	609a      	str	r2, [r3, #8]
 8002566:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002568:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800256a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800256c:	f383 8810 	msr	PRIMASK, r3
}
 8002570:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002572:	f3ef 8310 	mrs	r3, PRIMASK
 8002576:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002578:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800257a:	673b      	str	r3, [r7, #112]	; 0x70
 800257c:	2301      	movs	r3, #1
 800257e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002582:	f383 8810 	msr	PRIMASK, r3
}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2140      	movs	r1, #64	; 0x40
 8002594:	438a      	bics	r2, r1
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800259a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800259c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800259e:	f383 8810 	msr	PRIMASK, r3
}
 80025a2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2220      	movs	r2, #32
 80025a8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025b0:	f3ef 8310 	mrs	r3, PRIMASK
 80025b4:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80025b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80025ba:	2301      	movs	r3, #1
 80025bc:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025c0:	f383 8810 	msr	PRIMASK, r3
}
 80025c4:	46c0      	nop			; (mov r8, r8)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2110      	movs	r1, #16
 80025d2:	438a      	bics	r2, r1
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025dc:	f383 8810 	msr	PRIMASK, r3
}
 80025e0:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e6:	0018      	movs	r0, r3
 80025e8:	f7fe fa3f 	bl	8000a6a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2258      	movs	r2, #88	; 0x58
 80025f0:	5a9a      	ldrh	r2, [r3, r2]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	215a      	movs	r1, #90	; 0x5a
 80025f6:	5a5b      	ldrh	r3, [r3, r1]
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	0011      	movs	r1, r2
 8002602:	0018      	movs	r0, r3
 8002604:	f000 f8dc 	bl	80027c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002608:	e0be      	b.n	8002788 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2258      	movs	r2, #88	; 0x58
 800260e:	5a99      	ldrh	r1, [r3, r2]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	225a      	movs	r2, #90	; 0x5a
 8002614:	5a9b      	ldrh	r3, [r3, r2]
 8002616:	b29a      	uxth	r2, r3
 8002618:	208e      	movs	r0, #142	; 0x8e
 800261a:	183b      	adds	r3, r7, r0
 800261c:	1a8a      	subs	r2, r1, r2
 800261e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	225a      	movs	r2, #90	; 0x5a
 8002624:	5a9b      	ldrh	r3, [r3, r2]
 8002626:	b29b      	uxth	r3, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	d100      	bne.n	800262e <HAL_UART_IRQHandler+0x43e>
 800262c:	e0ae      	b.n	800278c <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800262e:	183b      	adds	r3, r7, r0
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d100      	bne.n	8002638 <HAL_UART_IRQHandler+0x448>
 8002636:	e0a9      	b.n	800278c <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002638:	f3ef 8310 	mrs	r3, PRIMASK
 800263c:	60fb      	str	r3, [r7, #12]
  return(result);
 800263e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002640:	2488      	movs	r4, #136	; 0x88
 8002642:	193a      	adds	r2, r7, r4
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	2301      	movs	r3, #1
 8002648:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	f383 8810 	msr	PRIMASK, r3
}
 8002650:	46c0      	nop			; (mov r8, r8)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	494f      	ldr	r1, [pc, #316]	; (800279c <HAL_UART_IRQHandler+0x5ac>)
 800265e:	400a      	ands	r2, r1
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	193b      	adds	r3, r7, r4
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	f383 8810 	msr	PRIMASK, r3
}
 800266e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002670:	f3ef 8310 	mrs	r3, PRIMASK
 8002674:	61bb      	str	r3, [r7, #24]
  return(result);
 8002676:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002678:	2484      	movs	r4, #132	; 0x84
 800267a:	193a      	adds	r2, r7, r4
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	2301      	movs	r3, #1
 8002680:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	f383 8810 	msr	PRIMASK, r3
}
 8002688:	46c0      	nop			; (mov r8, r8)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2101      	movs	r1, #1
 8002696:	438a      	bics	r2, r1
 8002698:	609a      	str	r2, [r3, #8]
 800269a:	193b      	adds	r3, r7, r4
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	f383 8810 	msr	PRIMASK, r3
}
 80026a6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2220      	movs	r2, #32
 80026ac:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026ba:	f3ef 8310 	mrs	r3, PRIMASK
 80026be:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026c2:	2480      	movs	r4, #128	; 0x80
 80026c4:	193a      	adds	r2, r7, r4
 80026c6:	6013      	str	r3, [r2, #0]
 80026c8:	2301      	movs	r3, #1
 80026ca:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ce:	f383 8810 	msr	PRIMASK, r3
}
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2110      	movs	r1, #16
 80026e0:	438a      	bics	r2, r1
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	193b      	adds	r3, r7, r4
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ec:	f383 8810 	msr	PRIMASK, r3
}
 80026f0:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80026f2:	183b      	adds	r3, r7, r0
 80026f4:	881a      	ldrh	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	0011      	movs	r1, r2
 80026fa:	0018      	movs	r0, r3
 80026fc:	f000 f860 	bl	80027c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002700:	e044      	b.n	800278c <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002702:	23a4      	movs	r3, #164	; 0xa4
 8002704:	18fb      	adds	r3, r7, r3
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	2380      	movs	r3, #128	; 0x80
 800270a:	035b      	lsls	r3, r3, #13
 800270c:	4013      	ands	r3, r2
 800270e:	d010      	beq.n	8002732 <HAL_UART_IRQHandler+0x542>
 8002710:	239c      	movs	r3, #156	; 0x9c
 8002712:	18fb      	adds	r3, r7, r3
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	2380      	movs	r3, #128	; 0x80
 8002718:	03db      	lsls	r3, r3, #15
 800271a:	4013      	ands	r3, r2
 800271c:	d009      	beq.n	8002732 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2280      	movs	r2, #128	; 0x80
 8002724:	0352      	lsls	r2, r2, #13
 8002726:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	0018      	movs	r0, r3
 800272c:	f000 fc40 	bl	8002fb0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002730:	e02f      	b.n	8002792 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002732:	23a4      	movs	r3, #164	; 0xa4
 8002734:	18fb      	adds	r3, r7, r3
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2280      	movs	r2, #128	; 0x80
 800273a:	4013      	ands	r3, r2
 800273c:	d00f      	beq.n	800275e <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800273e:	23a0      	movs	r3, #160	; 0xa0
 8002740:	18fb      	adds	r3, r7, r3
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2280      	movs	r2, #128	; 0x80
 8002746:	4013      	ands	r3, r2
 8002748:	d009      	beq.n	800275e <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800274e:	2b00      	cmp	r3, #0
 8002750:	d01e      	beq.n	8002790 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	0010      	movs	r0, r2
 800275a:	4798      	blx	r3
    }
    return;
 800275c:	e018      	b.n	8002790 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800275e:	23a4      	movs	r3, #164	; 0xa4
 8002760:	18fb      	adds	r3, r7, r3
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2240      	movs	r2, #64	; 0x40
 8002766:	4013      	ands	r3, r2
 8002768:	d013      	beq.n	8002792 <HAL_UART_IRQHandler+0x5a2>
 800276a:	23a0      	movs	r3, #160	; 0xa0
 800276c:	18fb      	adds	r3, r7, r3
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2240      	movs	r2, #64	; 0x40
 8002772:	4013      	ands	r3, r2
 8002774:	d00d      	beq.n	8002792 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	0018      	movs	r0, r3
 800277a:	f000 fbee 	bl	8002f5a <UART_EndTransmit_IT>
    return;
 800277e:	e008      	b.n	8002792 <HAL_UART_IRQHandler+0x5a2>
      return;
 8002780:	46c0      	nop			; (mov r8, r8)
 8002782:	e006      	b.n	8002792 <HAL_UART_IRQHandler+0x5a2>
    return;
 8002784:	46c0      	nop			; (mov r8, r8)
 8002786:	e004      	b.n	8002792 <HAL_UART_IRQHandler+0x5a2>
      return;
 8002788:	46c0      	nop			; (mov r8, r8)
 800278a:	e002      	b.n	8002792 <HAL_UART_IRQHandler+0x5a2>
      return;
 800278c:	46c0      	nop			; (mov r8, r8)
 800278e:	e000      	b.n	8002792 <HAL_UART_IRQHandler+0x5a2>
    return;
 8002790:	46c0      	nop			; (mov r8, r8)
  }

}
 8002792:	46bd      	mov	sp, r7
 8002794:	b02b      	add	sp, #172	; 0xac
 8002796:	bd90      	pop	{r4, r7, pc}
 8002798:	fffffeff 	.word	0xfffffeff
 800279c:	fffffedf 	.word	0xfffffedf

080027a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80027a8:	46c0      	nop			; (mov r8, r8)
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b002      	add	sp, #8
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80027b8:	46c0      	nop			; (mov r8, r8)
 80027ba:	46bd      	mov	sp, r7
 80027bc:	b002      	add	sp, #8
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	000a      	movs	r2, r1
 80027ca:	1cbb      	adds	r3, r7, #2
 80027cc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	46bd      	mov	sp, r7
 80027d2:	b002      	add	sp, #8
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b088      	sub	sp, #32
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80027e0:	231e      	movs	r3, #30
 80027e2:	18fb      	adds	r3, r7, r3
 80027e4:	2200      	movs	r2, #0
 80027e6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	431a      	orrs	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69db      	ldr	r3, [r3, #28]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4aaf      	ldr	r2, [pc, #700]	; (8002ac4 <UART_SetConfig+0x2ec>)
 8002808:	4013      	ands	r3, r2
 800280a:	0019      	movs	r1, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	430a      	orrs	r2, r1
 8002814:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	4aaa      	ldr	r2, [pc, #680]	; (8002ac8 <UART_SetConfig+0x2f0>)
 800281e:	4013      	ands	r3, r2
 8002820:	0019      	movs	r1, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	4313      	orrs	r3, r2
 800283c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	4aa1      	ldr	r2, [pc, #644]	; (8002acc <UART_SetConfig+0x2f4>)
 8002846:	4013      	ands	r3, r2
 8002848:	0019      	movs	r1, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	430a      	orrs	r2, r1
 8002852:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a9d      	ldr	r2, [pc, #628]	; (8002ad0 <UART_SetConfig+0x2f8>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d127      	bne.n	80028ae <UART_SetConfig+0xd6>
 800285e:	4b9d      	ldr	r3, [pc, #628]	; (8002ad4 <UART_SetConfig+0x2fc>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	2203      	movs	r2, #3
 8002864:	4013      	ands	r3, r2
 8002866:	2b03      	cmp	r3, #3
 8002868:	d00d      	beq.n	8002886 <UART_SetConfig+0xae>
 800286a:	d81b      	bhi.n	80028a4 <UART_SetConfig+0xcc>
 800286c:	2b02      	cmp	r3, #2
 800286e:	d014      	beq.n	800289a <UART_SetConfig+0xc2>
 8002870:	d818      	bhi.n	80028a4 <UART_SetConfig+0xcc>
 8002872:	2b00      	cmp	r3, #0
 8002874:	d002      	beq.n	800287c <UART_SetConfig+0xa4>
 8002876:	2b01      	cmp	r3, #1
 8002878:	d00a      	beq.n	8002890 <UART_SetConfig+0xb8>
 800287a:	e013      	b.n	80028a4 <UART_SetConfig+0xcc>
 800287c:	231f      	movs	r3, #31
 800287e:	18fb      	adds	r3, r7, r3
 8002880:	2200      	movs	r2, #0
 8002882:	701a      	strb	r2, [r3, #0]
 8002884:	e065      	b.n	8002952 <UART_SetConfig+0x17a>
 8002886:	231f      	movs	r3, #31
 8002888:	18fb      	adds	r3, r7, r3
 800288a:	2202      	movs	r2, #2
 800288c:	701a      	strb	r2, [r3, #0]
 800288e:	e060      	b.n	8002952 <UART_SetConfig+0x17a>
 8002890:	231f      	movs	r3, #31
 8002892:	18fb      	adds	r3, r7, r3
 8002894:	2204      	movs	r2, #4
 8002896:	701a      	strb	r2, [r3, #0]
 8002898:	e05b      	b.n	8002952 <UART_SetConfig+0x17a>
 800289a:	231f      	movs	r3, #31
 800289c:	18fb      	adds	r3, r7, r3
 800289e:	2208      	movs	r2, #8
 80028a0:	701a      	strb	r2, [r3, #0]
 80028a2:	e056      	b.n	8002952 <UART_SetConfig+0x17a>
 80028a4:	231f      	movs	r3, #31
 80028a6:	18fb      	adds	r3, r7, r3
 80028a8:	2210      	movs	r2, #16
 80028aa:	701a      	strb	r2, [r3, #0]
 80028ac:	e051      	b.n	8002952 <UART_SetConfig+0x17a>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a89      	ldr	r2, [pc, #548]	; (8002ad8 <UART_SetConfig+0x300>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d134      	bne.n	8002922 <UART_SetConfig+0x14a>
 80028b8:	4b86      	ldr	r3, [pc, #536]	; (8002ad4 <UART_SetConfig+0x2fc>)
 80028ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028bc:	23c0      	movs	r3, #192	; 0xc0
 80028be:	029b      	lsls	r3, r3, #10
 80028c0:	4013      	ands	r3, r2
 80028c2:	22c0      	movs	r2, #192	; 0xc0
 80028c4:	0292      	lsls	r2, r2, #10
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d017      	beq.n	80028fa <UART_SetConfig+0x122>
 80028ca:	22c0      	movs	r2, #192	; 0xc0
 80028cc:	0292      	lsls	r2, r2, #10
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d822      	bhi.n	8002918 <UART_SetConfig+0x140>
 80028d2:	2280      	movs	r2, #128	; 0x80
 80028d4:	0292      	lsls	r2, r2, #10
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d019      	beq.n	800290e <UART_SetConfig+0x136>
 80028da:	2280      	movs	r2, #128	; 0x80
 80028dc:	0292      	lsls	r2, r2, #10
 80028de:	4293      	cmp	r3, r2
 80028e0:	d81a      	bhi.n	8002918 <UART_SetConfig+0x140>
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d004      	beq.n	80028f0 <UART_SetConfig+0x118>
 80028e6:	2280      	movs	r2, #128	; 0x80
 80028e8:	0252      	lsls	r2, r2, #9
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d00a      	beq.n	8002904 <UART_SetConfig+0x12c>
 80028ee:	e013      	b.n	8002918 <UART_SetConfig+0x140>
 80028f0:	231f      	movs	r3, #31
 80028f2:	18fb      	adds	r3, r7, r3
 80028f4:	2200      	movs	r2, #0
 80028f6:	701a      	strb	r2, [r3, #0]
 80028f8:	e02b      	b.n	8002952 <UART_SetConfig+0x17a>
 80028fa:	231f      	movs	r3, #31
 80028fc:	18fb      	adds	r3, r7, r3
 80028fe:	2202      	movs	r2, #2
 8002900:	701a      	strb	r2, [r3, #0]
 8002902:	e026      	b.n	8002952 <UART_SetConfig+0x17a>
 8002904:	231f      	movs	r3, #31
 8002906:	18fb      	adds	r3, r7, r3
 8002908:	2204      	movs	r2, #4
 800290a:	701a      	strb	r2, [r3, #0]
 800290c:	e021      	b.n	8002952 <UART_SetConfig+0x17a>
 800290e:	231f      	movs	r3, #31
 8002910:	18fb      	adds	r3, r7, r3
 8002912:	2208      	movs	r2, #8
 8002914:	701a      	strb	r2, [r3, #0]
 8002916:	e01c      	b.n	8002952 <UART_SetConfig+0x17a>
 8002918:	231f      	movs	r3, #31
 800291a:	18fb      	adds	r3, r7, r3
 800291c:	2210      	movs	r2, #16
 800291e:	701a      	strb	r2, [r3, #0]
 8002920:	e017      	b.n	8002952 <UART_SetConfig+0x17a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a6d      	ldr	r2, [pc, #436]	; (8002adc <UART_SetConfig+0x304>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d104      	bne.n	8002936 <UART_SetConfig+0x15e>
 800292c:	231f      	movs	r3, #31
 800292e:	18fb      	adds	r3, r7, r3
 8002930:	2200      	movs	r2, #0
 8002932:	701a      	strb	r2, [r3, #0]
 8002934:	e00d      	b.n	8002952 <UART_SetConfig+0x17a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a69      	ldr	r2, [pc, #420]	; (8002ae0 <UART_SetConfig+0x308>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d104      	bne.n	800294a <UART_SetConfig+0x172>
 8002940:	231f      	movs	r3, #31
 8002942:	18fb      	adds	r3, r7, r3
 8002944:	2200      	movs	r2, #0
 8002946:	701a      	strb	r2, [r3, #0]
 8002948:	e003      	b.n	8002952 <UART_SetConfig+0x17a>
 800294a:	231f      	movs	r3, #31
 800294c:	18fb      	adds	r3, r7, r3
 800294e:	2210      	movs	r2, #16
 8002950:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	69da      	ldr	r2, [r3, #28]
 8002956:	2380      	movs	r3, #128	; 0x80
 8002958:	021b      	lsls	r3, r3, #8
 800295a:	429a      	cmp	r2, r3
 800295c:	d15d      	bne.n	8002a1a <UART_SetConfig+0x242>
  {
    switch (clocksource)
 800295e:	231f      	movs	r3, #31
 8002960:	18fb      	adds	r3, r7, r3
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b08      	cmp	r3, #8
 8002966:	d015      	beq.n	8002994 <UART_SetConfig+0x1bc>
 8002968:	dc18      	bgt.n	800299c <UART_SetConfig+0x1c4>
 800296a:	2b04      	cmp	r3, #4
 800296c:	d00d      	beq.n	800298a <UART_SetConfig+0x1b2>
 800296e:	dc15      	bgt.n	800299c <UART_SetConfig+0x1c4>
 8002970:	2b00      	cmp	r3, #0
 8002972:	d002      	beq.n	800297a <UART_SetConfig+0x1a2>
 8002974:	2b02      	cmp	r3, #2
 8002976:	d005      	beq.n	8002984 <UART_SetConfig+0x1ac>
 8002978:	e010      	b.n	800299c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800297a:	f7fe ff8d 	bl	8001898 <HAL_RCC_GetPCLK1Freq>
 800297e:	0003      	movs	r3, r0
 8002980:	61bb      	str	r3, [r7, #24]
        break;
 8002982:	e012      	b.n	80029aa <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002984:	4b57      	ldr	r3, [pc, #348]	; (8002ae4 <UART_SetConfig+0x30c>)
 8002986:	61bb      	str	r3, [r7, #24]
        break;
 8002988:	e00f      	b.n	80029aa <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800298a:	f7fe fefb 	bl	8001784 <HAL_RCC_GetSysClockFreq>
 800298e:	0003      	movs	r3, r0
 8002990:	61bb      	str	r3, [r7, #24]
        break;
 8002992:	e00a      	b.n	80029aa <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002994:	2380      	movs	r3, #128	; 0x80
 8002996:	021b      	lsls	r3, r3, #8
 8002998:	61bb      	str	r3, [r7, #24]
        break;
 800299a:	e006      	b.n	80029aa <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800299c:	2300      	movs	r3, #0
 800299e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80029a0:	231e      	movs	r3, #30
 80029a2:	18fb      	adds	r3, r7, r3
 80029a4:	2201      	movs	r2, #1
 80029a6:	701a      	strb	r2, [r3, #0]
        break;
 80029a8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d100      	bne.n	80029b2 <UART_SetConfig+0x1da>
 80029b0:	e07b      	b.n	8002aaa <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	005a      	lsls	r2, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	085b      	lsrs	r3, r3, #1
 80029bc:	18d2      	adds	r2, r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	0019      	movs	r1, r3
 80029c4:	0010      	movs	r0, r2
 80029c6:	f7fd fb9f 	bl	8000108 <__udivsi3>
 80029ca:	0003      	movs	r3, r0
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	2b0f      	cmp	r3, #15
 80029d4:	d91c      	bls.n	8002a10 <UART_SetConfig+0x238>
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	2380      	movs	r3, #128	; 0x80
 80029da:	025b      	lsls	r3, r3, #9
 80029dc:	429a      	cmp	r2, r3
 80029de:	d217      	bcs.n	8002a10 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	200e      	movs	r0, #14
 80029e6:	183b      	adds	r3, r7, r0
 80029e8:	210f      	movs	r1, #15
 80029ea:	438a      	bics	r2, r1
 80029ec:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	085b      	lsrs	r3, r3, #1
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	2207      	movs	r2, #7
 80029f6:	4013      	ands	r3, r2
 80029f8:	b299      	uxth	r1, r3
 80029fa:	183b      	adds	r3, r7, r0
 80029fc:	183a      	adds	r2, r7, r0
 80029fe:	8812      	ldrh	r2, [r2, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	183a      	adds	r2, r7, r0
 8002a0a:	8812      	ldrh	r2, [r2, #0]
 8002a0c:	60da      	str	r2, [r3, #12]
 8002a0e:	e04c      	b.n	8002aaa <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8002a10:	231e      	movs	r3, #30
 8002a12:	18fb      	adds	r3, r7, r3
 8002a14:	2201      	movs	r2, #1
 8002a16:	701a      	strb	r2, [r3, #0]
 8002a18:	e047      	b.n	8002aaa <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a1a:	231f      	movs	r3, #31
 8002a1c:	18fb      	adds	r3, r7, r3
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b08      	cmp	r3, #8
 8002a22:	d015      	beq.n	8002a50 <UART_SetConfig+0x278>
 8002a24:	dc18      	bgt.n	8002a58 <UART_SetConfig+0x280>
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d00d      	beq.n	8002a46 <UART_SetConfig+0x26e>
 8002a2a:	dc15      	bgt.n	8002a58 <UART_SetConfig+0x280>
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d002      	beq.n	8002a36 <UART_SetConfig+0x25e>
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d005      	beq.n	8002a40 <UART_SetConfig+0x268>
 8002a34:	e010      	b.n	8002a58 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a36:	f7fe ff2f 	bl	8001898 <HAL_RCC_GetPCLK1Freq>
 8002a3a:	0003      	movs	r3, r0
 8002a3c:	61bb      	str	r3, [r7, #24]
        break;
 8002a3e:	e012      	b.n	8002a66 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a40:	4b28      	ldr	r3, [pc, #160]	; (8002ae4 <UART_SetConfig+0x30c>)
 8002a42:	61bb      	str	r3, [r7, #24]
        break;
 8002a44:	e00f      	b.n	8002a66 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a46:	f7fe fe9d 	bl	8001784 <HAL_RCC_GetSysClockFreq>
 8002a4a:	0003      	movs	r3, r0
 8002a4c:	61bb      	str	r3, [r7, #24]
        break;
 8002a4e:	e00a      	b.n	8002a66 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a50:	2380      	movs	r3, #128	; 0x80
 8002a52:	021b      	lsls	r3, r3, #8
 8002a54:	61bb      	str	r3, [r7, #24]
        break;
 8002a56:	e006      	b.n	8002a66 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a5c:	231e      	movs	r3, #30
 8002a5e:	18fb      	adds	r3, r7, r3
 8002a60:	2201      	movs	r2, #1
 8002a62:	701a      	strb	r2, [r3, #0]
        break;
 8002a64:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d01e      	beq.n	8002aaa <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	085a      	lsrs	r2, r3, #1
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	18d2      	adds	r2, r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	0019      	movs	r1, r3
 8002a7c:	0010      	movs	r0, r2
 8002a7e:	f7fd fb43 	bl	8000108 <__udivsi3>
 8002a82:	0003      	movs	r3, r0
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	2b0f      	cmp	r3, #15
 8002a8c:	d909      	bls.n	8002aa2 <UART_SetConfig+0x2ca>
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	2380      	movs	r3, #128	; 0x80
 8002a92:	025b      	lsls	r3, r3, #9
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d204      	bcs.n	8002aa2 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	60da      	str	r2, [r3, #12]
 8002aa0:	e003      	b.n	8002aaa <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8002aa2:	231e      	movs	r3, #30
 8002aa4:	18fb      	adds	r3, r7, r3
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002ab6:	231e      	movs	r3, #30
 8002ab8:	18fb      	adds	r3, r7, r3
 8002aba:	781b      	ldrb	r3, [r3, #0]
}
 8002abc:	0018      	movs	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	b008      	add	sp, #32
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	efff69f3 	.word	0xefff69f3
 8002ac8:	ffffcfff 	.word	0xffffcfff
 8002acc:	fffff4ff 	.word	0xfffff4ff
 8002ad0:	40013800 	.word	0x40013800
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	40004400 	.word	0x40004400
 8002adc:	40004800 	.word	0x40004800
 8002ae0:	40004c00 	.word	0x40004c00
 8002ae4:	007a1200 	.word	0x007a1200

08002ae8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	2201      	movs	r2, #1
 8002af6:	4013      	ands	r3, r2
 8002af8:	d00b      	beq.n	8002b12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	4a4a      	ldr	r2, [pc, #296]	; (8002c2c <UART_AdvFeatureConfig+0x144>)
 8002b02:	4013      	ands	r3, r2
 8002b04:	0019      	movs	r1, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	2202      	movs	r2, #2
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d00b      	beq.n	8002b34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	4a43      	ldr	r2, [pc, #268]	; (8002c30 <UART_AdvFeatureConfig+0x148>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	0019      	movs	r1, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	2204      	movs	r2, #4
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d00b      	beq.n	8002b56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	4a3b      	ldr	r2, [pc, #236]	; (8002c34 <UART_AdvFeatureConfig+0x14c>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	0019      	movs	r1, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	2208      	movs	r2, #8
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	d00b      	beq.n	8002b78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	4a34      	ldr	r2, [pc, #208]	; (8002c38 <UART_AdvFeatureConfig+0x150>)
 8002b68:	4013      	ands	r3, r2
 8002b6a:	0019      	movs	r1, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	2210      	movs	r2, #16
 8002b7e:	4013      	ands	r3, r2
 8002b80:	d00b      	beq.n	8002b9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	4a2c      	ldr	r2, [pc, #176]	; (8002c3c <UART_AdvFeatureConfig+0x154>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	0019      	movs	r1, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	d00b      	beq.n	8002bbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	4a25      	ldr	r2, [pc, #148]	; (8002c40 <UART_AdvFeatureConfig+0x158>)
 8002bac:	4013      	ands	r3, r2
 8002bae:	0019      	movs	r1, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	2240      	movs	r2, #64	; 0x40
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	d01d      	beq.n	8002c02 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	4a1d      	ldr	r2, [pc, #116]	; (8002c44 <UART_AdvFeatureConfig+0x15c>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	0019      	movs	r1, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002be2:	2380      	movs	r3, #128	; 0x80
 8002be4:	035b      	lsls	r3, r3, #13
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d10b      	bne.n	8002c02 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	4a15      	ldr	r2, [pc, #84]	; (8002c48 <UART_AdvFeatureConfig+0x160>)
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	0019      	movs	r1, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	2280      	movs	r2, #128	; 0x80
 8002c08:	4013      	ands	r3, r2
 8002c0a:	d00b      	beq.n	8002c24 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	4a0e      	ldr	r2, [pc, #56]	; (8002c4c <UART_AdvFeatureConfig+0x164>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	0019      	movs	r1, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	605a      	str	r2, [r3, #4]
  }
}
 8002c24:	46c0      	nop			; (mov r8, r8)
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b002      	add	sp, #8
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	fffdffff 	.word	0xfffdffff
 8002c30:	fffeffff 	.word	0xfffeffff
 8002c34:	fffbffff 	.word	0xfffbffff
 8002c38:	ffff7fff 	.word	0xffff7fff
 8002c3c:	ffffefff 	.word	0xffffefff
 8002c40:	ffffdfff 	.word	0xffffdfff
 8002c44:	ffefffff 	.word	0xffefffff
 8002c48:	ff9fffff 	.word	0xff9fffff
 8002c4c:	fff7ffff 	.word	0xfff7ffff

08002c50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af02      	add	r7, sp, #8
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2280      	movs	r2, #128	; 0x80
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c60:	f7fd fe28 	bl	80008b4 <HAL_GetTick>
 8002c64:	0003      	movs	r3, r0
 8002c66:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2208      	movs	r2, #8
 8002c70:	4013      	ands	r3, r2
 8002c72:	2b08      	cmp	r3, #8
 8002c74:	d10c      	bne.n	8002c90 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2280      	movs	r2, #128	; 0x80
 8002c7a:	0391      	lsls	r1, r2, #14
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	4a17      	ldr	r2, [pc, #92]	; (8002cdc <UART_CheckIdleState+0x8c>)
 8002c80:	9200      	str	r2, [sp, #0]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f000 f82c 	bl	8002ce0 <UART_WaitOnFlagUntilTimeout>
 8002c88:	1e03      	subs	r3, r0, #0
 8002c8a:	d001      	beq.n	8002c90 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e021      	b.n	8002cd4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2204      	movs	r2, #4
 8002c98:	4013      	ands	r3, r2
 8002c9a:	2b04      	cmp	r3, #4
 8002c9c:	d10c      	bne.n	8002cb8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2280      	movs	r2, #128	; 0x80
 8002ca2:	03d1      	lsls	r1, r2, #15
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	4a0d      	ldr	r2, [pc, #52]	; (8002cdc <UART_CheckIdleState+0x8c>)
 8002ca8:	9200      	str	r2, [sp, #0]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f000 f818 	bl	8002ce0 <UART_WaitOnFlagUntilTimeout>
 8002cb0:	1e03      	subs	r3, r0, #0
 8002cb2:	d001      	beq.n	8002cb8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e00d      	b.n	8002cd4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2274      	movs	r2, #116	; 0x74
 8002cce:	2100      	movs	r1, #0
 8002cd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	b004      	add	sp, #16
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	01ffffff 	.word	0x01ffffff

08002ce0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b094      	sub	sp, #80	; 0x50
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	603b      	str	r3, [r7, #0]
 8002cec:	1dfb      	adds	r3, r7, #7
 8002cee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cf0:	e0a3      	b.n	8002e3a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	d100      	bne.n	8002cfa <UART_WaitOnFlagUntilTimeout+0x1a>
 8002cf8:	e09f      	b.n	8002e3a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cfa:	f7fd fddb 	bl	80008b4 <HAL_GetTick>
 8002cfe:	0002      	movs	r2, r0
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d302      	bcc.n	8002d10 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d13d      	bne.n	8002d8c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d10:	f3ef 8310 	mrs	r3, PRIMASK
 8002d14:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d18:	647b      	str	r3, [r7, #68]	; 0x44
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d20:	f383 8810 	msr	PRIMASK, r3
}
 8002d24:	46c0      	nop			; (mov r8, r8)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	494c      	ldr	r1, [pc, #304]	; (8002e64 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002d32:	400a      	ands	r2, r1
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d38:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3c:	f383 8810 	msr	PRIMASK, r3
}
 8002d40:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d42:	f3ef 8310 	mrs	r3, PRIMASK
 8002d46:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d4a:	643b      	str	r3, [r7, #64]	; 0x40
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d52:	f383 8810 	msr	PRIMASK, r3
}
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689a      	ldr	r2, [r3, #8]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2101      	movs	r1, #1
 8002d64:	438a      	bics	r2, r1
 8002d66:	609a      	str	r2, [r3, #8]
 8002d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d6e:	f383 8810 	msr	PRIMASK, r3
}
 8002d72:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2220      	movs	r2, #32
 8002d78:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2274      	movs	r2, #116	; 0x74
 8002d84:	2100      	movs	r1, #0
 8002d86:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e067      	b.n	8002e5c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2204      	movs	r2, #4
 8002d94:	4013      	ands	r3, r2
 8002d96:	d050      	beq.n	8002e3a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	69da      	ldr	r2, [r3, #28]
 8002d9e:	2380      	movs	r3, #128	; 0x80
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	401a      	ands	r2, r3
 8002da4:	2380      	movs	r3, #128	; 0x80
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d146      	bne.n	8002e3a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2280      	movs	r2, #128	; 0x80
 8002db2:	0112      	lsls	r2, r2, #4
 8002db4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002db6:	f3ef 8310 	mrs	r3, PRIMASK
 8002dba:	613b      	str	r3, [r7, #16]
  return(result);
 8002dbc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f383 8810 	msr	PRIMASK, r3
}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4923      	ldr	r1, [pc, #140]	; (8002e64 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002dd8:	400a      	ands	r2, r1
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dde:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	f383 8810 	msr	PRIMASK, r3
}
 8002de6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002de8:	f3ef 8310 	mrs	r3, PRIMASK
 8002dec:	61fb      	str	r3, [r7, #28]
  return(result);
 8002dee:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002df0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002df2:	2301      	movs	r3, #1
 8002df4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df6:	6a3b      	ldr	r3, [r7, #32]
 8002df8:	f383 8810 	msr	PRIMASK, r3
}
 8002dfc:	46c0      	nop			; (mov r8, r8)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2101      	movs	r1, #1
 8002e0a:	438a      	bics	r2, r1
 8002e0c:	609a      	str	r2, [r3, #8]
 8002e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	f383 8810 	msr	PRIMASK, r3
}
 8002e18:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2220      	movs	r2, #32
 8002e24:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2280      	movs	r2, #128	; 0x80
 8002e2a:	2120      	movs	r1, #32
 8002e2c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2274      	movs	r2, #116	; 0x74
 8002e32:	2100      	movs	r1, #0
 8002e34:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e010      	b.n	8002e5c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	4013      	ands	r3, r2
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	425a      	negs	r2, r3
 8002e4a:	4153      	adcs	r3, r2
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	001a      	movs	r2, r3
 8002e50:	1dfb      	adds	r3, r7, #7
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d100      	bne.n	8002e5a <UART_WaitOnFlagUntilTimeout+0x17a>
 8002e58:	e74b      	b.n	8002cf2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b014      	add	sp, #80	; 0x50
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	fffffe5f 	.word	0xfffffe5f

08002e68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08e      	sub	sp, #56	; 0x38
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e70:	f3ef 8310 	mrs	r3, PRIMASK
 8002e74:	617b      	str	r3, [r7, #20]
  return(result);
 8002e76:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e78:	637b      	str	r3, [r7, #52]	; 0x34
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	f383 8810 	msr	PRIMASK, r3
}
 8002e84:	46c0      	nop			; (mov r8, r8)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4925      	ldr	r1, [pc, #148]	; (8002f28 <UART_EndRxTransfer+0xc0>)
 8002e92:	400a      	ands	r2, r1
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	f383 8810 	msr	PRIMASK, r3
}
 8002ea0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ea2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ea6:	623b      	str	r3, [r7, #32]
  return(result);
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eaa:	633b      	str	r3, [r7, #48]	; 0x30
 8002eac:	2301      	movs	r3, #1
 8002eae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	f383 8810 	msr	PRIMASK, r3
}
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689a      	ldr	r2, [r3, #8]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	438a      	bics	r2, r1
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eca:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ece:	f383 8810 	msr	PRIMASK, r3
}
 8002ed2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d118      	bne.n	8002f0e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002edc:	f3ef 8310 	mrs	r3, PRIMASK
 8002ee0:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ee2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f383 8810 	msr	PRIMASK, r3
}
 8002ef0:	46c0      	nop			; (mov r8, r8)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2110      	movs	r1, #16
 8002efe:	438a      	bics	r2, r1
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	f383 8810 	msr	PRIMASK, r3
}
 8002f0c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2220      	movs	r2, #32
 8002f12:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002f20:	46c0      	nop			; (mov r8, r8)
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b00e      	add	sp, #56	; 0x38
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	fffffedf 	.word	0xfffffedf

08002f2c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	225a      	movs	r2, #90	; 0x5a
 8002f3e:	2100      	movs	r1, #0
 8002f40:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2252      	movs	r2, #82	; 0x52
 8002f46:	2100      	movs	r1, #0
 8002f48:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	f7ff fc2f 	bl	80027b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	46bd      	mov	sp, r7
 8002f56:	b004      	add	sp, #16
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b086      	sub	sp, #24
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f62:	f3ef 8310 	mrs	r3, PRIMASK
 8002f66:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f68:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002f6a:	617b      	str	r3, [r7, #20]
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f383 8810 	msr	PRIMASK, r3
}
 8002f76:	46c0      	nop			; (mov r8, r8)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2140      	movs	r1, #64	; 0x40
 8002f84:	438a      	bics	r2, r1
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	f383 8810 	msr	PRIMASK, r3
}
 8002f92:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2220      	movs	r2, #32
 8002f98:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f7ff fbfc 	bl	80027a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fa8:	46c0      	nop			; (mov r8, r8)
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b006      	add	sp, #24
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002fb8:	46c0      	nop			; (mov r8, r8)
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b002      	add	sp, #8
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	0002      	movs	r2, r0
 8002fc8:	1dbb      	adds	r3, r7, #6
 8002fca:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002fd0:	1dbb      	adds	r3, r7, #6
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	5e9b      	ldrsh	r3, [r3, r2]
 8002fd6:	2b84      	cmp	r3, #132	; 0x84
 8002fd8:	d006      	beq.n	8002fe8 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8002fda:	1dbb      	adds	r3, r7, #6
 8002fdc:	2200      	movs	r2, #0
 8002fde:	5e9a      	ldrsh	r2, [r3, r2]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	18d3      	adds	r3, r2, r3
 8002fe4:	3303      	adds	r3, #3
 8002fe6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
}
 8002fea:	0018      	movs	r0, r3
 8002fec:	46bd      	mov	sp, r7
 8002fee:	b004      	add	sp, #16
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002ff6:	f000 fab7 	bl	8003568 <vTaskStartScheduler>
  
  return osOK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003002:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003004:	b089      	sub	sp, #36	; 0x24
 8003006:	af04      	add	r7, sp, #16
 8003008:	6078      	str	r0, [r7, #4]
 800300a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d020      	beq.n	8003056 <osThreadCreate+0x54>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d01c      	beq.n	8003056 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685c      	ldr	r4, [r3, #4]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681d      	ldr	r5, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691e      	ldr	r6, [r3, #16]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2208      	movs	r2, #8
 800302c:	5e9b      	ldrsh	r3, [r3, r2]
 800302e:	0018      	movs	r0, r3
 8003030:	f7ff ffc6 	bl	8002fc0 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	695a      	ldr	r2, [r3, #20]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800303c:	6839      	ldr	r1, [r7, #0]
 800303e:	9302      	str	r3, [sp, #8]
 8003040:	9201      	str	r2, [sp, #4]
 8003042:	9000      	str	r0, [sp, #0]
 8003044:	000b      	movs	r3, r1
 8003046:	0032      	movs	r2, r6
 8003048:	0029      	movs	r1, r5
 800304a:	0020      	movs	r0, r4
 800304c:	f000 f8e3 	bl	8003216 <xTaskCreateStatic>
 8003050:	0003      	movs	r3, r0
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	e01d      	b.n	8003092 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685c      	ldr	r4, [r3, #4]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003062:	b29e      	uxth	r6, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2208      	movs	r2, #8
 8003068:	5e9b      	ldrsh	r3, [r3, r2]
 800306a:	0018      	movs	r0, r3
 800306c:	f7ff ffa8 	bl	8002fc0 <makeFreeRtosPriority>
 8003070:	0001      	movs	r1, r0
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	230c      	movs	r3, #12
 8003076:	18fb      	adds	r3, r7, r3
 8003078:	9301      	str	r3, [sp, #4]
 800307a:	9100      	str	r1, [sp, #0]
 800307c:	0013      	movs	r3, r2
 800307e:	0032      	movs	r2, r6
 8003080:	0029      	movs	r1, r5
 8003082:	0020      	movs	r0, r4
 8003084:	f000 f90a 	bl	800329c <xTaskCreate>
 8003088:	0003      	movs	r3, r0
 800308a:	2b01      	cmp	r3, #1
 800308c:	d001      	beq.n	8003092 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 800308e:	2300      	movs	r3, #0
 8003090:	e000      	b.n	8003094 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003092:	68fb      	ldr	r3, [r7, #12]
}
 8003094:	0018      	movs	r0, r3
 8003096:	46bd      	mov	sp, r7
 8003098:	b005      	add	sp, #20
 800309a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800309c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <osDelay+0x16>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	e000      	b.n	80030b4 <osDelay+0x18>
 80030b2:	2301      	movs	r3, #1
 80030b4:	0018      	movs	r0, r3
 80030b6:	f000 fa31 	bl	800351c <vTaskDelay>
  
  return osOK;
 80030ba:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80030bc:	0018      	movs	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	b004      	add	sp, #16
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3308      	adds	r3, #8
 80030d0:	001a      	movs	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	4252      	negs	r2, r2
 80030dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3308      	adds	r3, #8
 80030e2:	001a      	movs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3308      	adds	r3, #8
 80030ec:	001a      	movs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80030f8:	46c0      	nop			; (mov r8, r8)
 80030fa:	46bd      	mov	sp, r7
 80030fc:	b002      	add	sp, #8
 80030fe:	bd80      	pop	{r7, pc}

08003100 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800310e:	46c0      	nop			; (mov r8, r8)
 8003110:	46bd      	mov	sp, r7
 8003112:	b002      	add	sp, #8
 8003114:	bd80      	pop	{r7, pc}

08003116 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b084      	sub	sp, #16
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	601a      	str	r2, [r3, #0]
}
 8003152:	46c0      	nop			; (mov r8, r8)
 8003154:	46bd      	mov	sp, r7
 8003156:	b004      	add	sp, #16
 8003158:	bd80      	pop	{r7, pc}

0800315a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b084      	sub	sp, #16
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	3301      	adds	r3, #1
 800316e:	d103      	bne.n	8003178 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	e00c      	b.n	8003192 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3308      	adds	r3, #8
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	e002      	b.n	8003186 <vListInsert+0x2c>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	60fb      	str	r3, [r7, #12]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	429a      	cmp	r2, r3
 8003190:	d2f6      	bcs.n	8003180 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	685a      	ldr	r2, [r3, #4]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	1c5a      	adds	r2, r3, #1
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	601a      	str	r2, [r3, #0]
}
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	46bd      	mov	sp, r7
 80031c2:	b004      	add	sp, #16
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b084      	sub	sp, #16
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6892      	ldr	r2, [r2, #8]
 80031dc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6852      	ldr	r2, [r2, #4]
 80031e6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d103      	bne.n	80031fa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689a      	ldr	r2, [r3, #8]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	1e5a      	subs	r2, r3, #1
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
}
 800320e:	0018      	movs	r0, r3
 8003210:	46bd      	mov	sp, r7
 8003212:	b004      	add	sp, #16
 8003214:	bd80      	pop	{r7, pc}

08003216 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003216:	b590      	push	{r4, r7, lr}
 8003218:	b08d      	sub	sp, #52	; 0x34
 800321a:	af04      	add	r7, sp, #16
 800321c:	60f8      	str	r0, [r7, #12]
 800321e:	60b9      	str	r1, [r7, #8]
 8003220:	607a      	str	r2, [r7, #4]
 8003222:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <xTaskCreateStatic+0x18>
 800322a:	b672      	cpsid	i
 800322c:	e7fe      	b.n	800322c <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800322e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <xTaskCreateStatic+0x22>
 8003234:	b672      	cpsid	i
 8003236:	e7fe      	b.n	8003236 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003238:	23b4      	movs	r3, #180	; 0xb4
 800323a:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	2bb4      	cmp	r3, #180	; 0xb4
 8003240:	d001      	beq.n	8003246 <xTaskCreateStatic+0x30>
 8003242:	b672      	cpsid	i
 8003244:	e7fe      	b.n	8003244 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003248:	2b00      	cmp	r3, #0
 800324a:	d020      	beq.n	800328e <xTaskCreateStatic+0x78>
 800324c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800324e:	2b00      	cmp	r3, #0
 8003250:	d01d      	beq.n	800328e <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003254:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800325a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	22b1      	movs	r2, #177	; 0xb1
 8003260:	2102      	movs	r1, #2
 8003262:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003264:	683c      	ldr	r4, [r7, #0]
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	68b9      	ldr	r1, [r7, #8]
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	2300      	movs	r3, #0
 800326e:	9303      	str	r3, [sp, #12]
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	9302      	str	r3, [sp, #8]
 8003274:	2318      	movs	r3, #24
 8003276:	18fb      	adds	r3, r7, r3
 8003278:	9301      	str	r3, [sp, #4]
 800327a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	0023      	movs	r3, r4
 8003280:	f000 f858 	bl	8003334 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	0018      	movs	r0, r3
 8003288:	f000 f8e4 	bl	8003454 <prvAddNewTaskToReadyList>
 800328c:	e001      	b.n	8003292 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 800328e:	2300      	movs	r3, #0
 8003290:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003292:	69bb      	ldr	r3, [r7, #24]
	}
 8003294:	0018      	movs	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	b009      	add	sp, #36	; 0x24
 800329a:	bd90      	pop	{r4, r7, pc}

0800329c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800329c:	b590      	push	{r4, r7, lr}
 800329e:	b08d      	sub	sp, #52	; 0x34
 80032a0:	af04      	add	r7, sp, #16
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	603b      	str	r3, [r7, #0]
 80032a8:	1dbb      	adds	r3, r7, #6
 80032aa:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032ac:	1dbb      	adds	r3, r7, #6
 80032ae:	881b      	ldrh	r3, [r3, #0]
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	0018      	movs	r0, r3
 80032b4:	f000 fdb4 	bl	8003e20 <pvPortMalloc>
 80032b8:	0003      	movs	r3, r0
 80032ba:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d010      	beq.n	80032e4 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80032c2:	20b4      	movs	r0, #180	; 0xb4
 80032c4:	f000 fdac 	bl	8003e20 <pvPortMalloc>
 80032c8:	0003      	movs	r3, r0
 80032ca:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	631a      	str	r2, [r3, #48]	; 0x30
 80032d8:	e006      	b.n	80032e8 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	0018      	movs	r0, r3
 80032de:	f000 fe45 	bl	8003f6c <vPortFree>
 80032e2:	e001      	b.n	80032e8 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80032e4:	2300      	movs	r3, #0
 80032e6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d01a      	beq.n	8003324 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	22b1      	movs	r2, #177	; 0xb1
 80032f2:	2100      	movs	r1, #0
 80032f4:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80032f6:	1dbb      	adds	r3, r7, #6
 80032f8:	881a      	ldrh	r2, [r3, #0]
 80032fa:	683c      	ldr	r4, [r7, #0]
 80032fc:	68b9      	ldr	r1, [r7, #8]
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	2300      	movs	r3, #0
 8003302:	9303      	str	r3, [sp, #12]
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	9302      	str	r3, [sp, #8]
 8003308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800330a:	9301      	str	r3, [sp, #4]
 800330c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	0023      	movs	r3, r4
 8003312:	f000 f80f 	bl	8003334 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	0018      	movs	r0, r3
 800331a:	f000 f89b 	bl	8003454 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800331e:	2301      	movs	r3, #1
 8003320:	61bb      	str	r3, [r7, #24]
 8003322:	e002      	b.n	800332a <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003324:	2301      	movs	r3, #1
 8003326:	425b      	negs	r3, r3
 8003328:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800332a:	69bb      	ldr	r3, [r7, #24]
	}
 800332c:	0018      	movs	r0, r3
 800332e:	46bd      	mov	sp, r7
 8003330:	b009      	add	sp, #36	; 0x24
 8003332:	bd90      	pop	{r4, r7, pc}

08003334 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
 8003340:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003344:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	493e      	ldr	r1, [pc, #248]	; (8003444 <prvInitialiseNewTask+0x110>)
 800334a:	468c      	mov	ip, r1
 800334c:	4463      	add	r3, ip
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	18d3      	adds	r3, r2, r3
 8003352:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	2207      	movs	r2, #7
 8003358:	4393      	bics	r3, r2
 800335a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	2207      	movs	r2, #7
 8003360:	4013      	ands	r3, r2
 8003362:	d001      	beq.n	8003368 <prvInitialiseNewTask+0x34>
 8003364:	b672      	cpsid	i
 8003366:	e7fe      	b.n	8003366 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003368:	2300      	movs	r3, #0
 800336a:	617b      	str	r3, [r7, #20]
 800336c:	e013      	b.n	8003396 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	18d3      	adds	r3, r2, r3
 8003374:	7818      	ldrb	r0, [r3, #0]
 8003376:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003378:	2134      	movs	r1, #52	; 0x34
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	18d3      	adds	r3, r2, r3
 800337e:	185b      	adds	r3, r3, r1
 8003380:	1c02      	adds	r2, r0, #0
 8003382:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	18d3      	adds	r3, r2, r3
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d006      	beq.n	800339e <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	3301      	adds	r3, #1
 8003394:	617b      	str	r3, [r7, #20]
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	2b0f      	cmp	r3, #15
 800339a:	d9e8      	bls.n	800336e <prvInitialiseNewTask+0x3a>
 800339c:	e000      	b.n	80033a0 <prvInitialiseNewTask+0x6c>
		{
			break;
 800339e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80033a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a2:	2243      	movs	r2, #67	; 0x43
 80033a4:	2100      	movs	r1, #0
 80033a6:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80033a8:	6a3b      	ldr	r3, [r7, #32]
 80033aa:	2b06      	cmp	r3, #6
 80033ac:	d901      	bls.n	80033b2 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80033ae:	2306      	movs	r3, #6
 80033b0:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80033b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b4:	6a3a      	ldr	r2, [r7, #32]
 80033b6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80033b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ba:	6a3a      	ldr	r2, [r7, #32]
 80033bc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80033be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c0:	2200      	movs	r2, #0
 80033c2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80033c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c6:	3304      	adds	r3, #4
 80033c8:	0018      	movs	r0, r3
 80033ca:	f7ff fe99 	bl	8003100 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80033ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d0:	3318      	adds	r3, #24
 80033d2:	0018      	movs	r0, r3
 80033d4:	f7ff fe94 	bl	8003100 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80033d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033dc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	2207      	movs	r2, #7
 80033e2:	1ad2      	subs	r2, r2, r3
 80033e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80033e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033ec:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80033ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f0:	22ac      	movs	r2, #172	; 0xac
 80033f2:	2100      	movs	r1, #0
 80033f4:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80033f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f8:	22b0      	movs	r2, #176	; 0xb0
 80033fa:	2100      	movs	r1, #0
 80033fc:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80033fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003400:	334c      	adds	r3, #76	; 0x4c
 8003402:	2260      	movs	r2, #96	; 0x60
 8003404:	2100      	movs	r1, #0
 8003406:	0018      	movs	r0, r3
 8003408:	f000 fed6 	bl	80041b8 <memset>
 800340c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340e:	4a0e      	ldr	r2, [pc, #56]	; (8003448 <prvInitialiseNewTask+0x114>)
 8003410:	651a      	str	r2, [r3, #80]	; 0x50
 8003412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003414:	4a0d      	ldr	r2, [pc, #52]	; (800344c <prvInitialiseNewTask+0x118>)
 8003416:	655a      	str	r2, [r3, #84]	; 0x54
 8003418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341a:	4a0d      	ldr	r2, [pc, #52]	; (8003450 <prvInitialiseNewTask+0x11c>)
 800341c:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	68f9      	ldr	r1, [r7, #12]
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	0018      	movs	r0, r3
 8003426:	f000 fbc5 	bl	8003bb4 <pxPortInitialiseStack>
 800342a:	0002      	movs	r2, r0
 800342c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	2b00      	cmp	r3, #0
 8003434:	d002      	beq.n	800343c <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800343a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800343c:	46c0      	nop			; (mov r8, r8)
 800343e:	46bd      	mov	sp, r7
 8003440:	b006      	add	sp, #24
 8003442:	bd80      	pop	{r7, pc}
 8003444:	3fffffff 	.word	0x3fffffff
 8003448:	0800447c 	.word	0x0800447c
 800344c:	0800449c 	.word	0x0800449c
 8003450:	0800445c 	.word	0x0800445c

08003454 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800345c:	f000 fc48 	bl	8003cf0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003460:	4b28      	ldr	r3, [pc, #160]	; (8003504 <prvAddNewTaskToReadyList+0xb0>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	1c5a      	adds	r2, r3, #1
 8003466:	4b27      	ldr	r3, [pc, #156]	; (8003504 <prvAddNewTaskToReadyList+0xb0>)
 8003468:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800346a:	4b27      	ldr	r3, [pc, #156]	; (8003508 <prvAddNewTaskToReadyList+0xb4>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d109      	bne.n	8003486 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003472:	4b25      	ldr	r3, [pc, #148]	; (8003508 <prvAddNewTaskToReadyList+0xb4>)
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003478:	4b22      	ldr	r3, [pc, #136]	; (8003504 <prvAddNewTaskToReadyList+0xb0>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d110      	bne.n	80034a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003480:	f000 fa80 	bl	8003984 <prvInitialiseTaskLists>
 8003484:	e00d      	b.n	80034a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003486:	4b21      	ldr	r3, [pc, #132]	; (800350c <prvAddNewTaskToReadyList+0xb8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d109      	bne.n	80034a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800348e:	4b1e      	ldr	r3, [pc, #120]	; (8003508 <prvAddNewTaskToReadyList+0xb4>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003498:	429a      	cmp	r2, r3
 800349a:	d802      	bhi.n	80034a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800349c:	4b1a      	ldr	r3, [pc, #104]	; (8003508 <prvAddNewTaskToReadyList+0xb4>)
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80034a2:	4b1b      	ldr	r3, [pc, #108]	; (8003510 <prvAddNewTaskToReadyList+0xbc>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	1c5a      	adds	r2, r3, #1
 80034a8:	4b19      	ldr	r3, [pc, #100]	; (8003510 <prvAddNewTaskToReadyList+0xbc>)
 80034aa:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b0:	4b18      	ldr	r3, [pc, #96]	; (8003514 <prvAddNewTaskToReadyList+0xc0>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d903      	bls.n	80034c0 <prvAddNewTaskToReadyList+0x6c>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034bc:	4b15      	ldr	r3, [pc, #84]	; (8003514 <prvAddNewTaskToReadyList+0xc0>)
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c4:	0013      	movs	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	189b      	adds	r3, r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4a12      	ldr	r2, [pc, #72]	; (8003518 <prvAddNewTaskToReadyList+0xc4>)
 80034ce:	189a      	adds	r2, r3, r2
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3304      	adds	r3, #4
 80034d4:	0019      	movs	r1, r3
 80034d6:	0010      	movs	r0, r2
 80034d8:	f7ff fe1d 	bl	8003116 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80034dc:	f000 fc1a 	bl	8003d14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80034e0:	4b0a      	ldr	r3, [pc, #40]	; (800350c <prvAddNewTaskToReadyList+0xb8>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d008      	beq.n	80034fa <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80034e8:	4b07      	ldr	r3, [pc, #28]	; (8003508 <prvAddNewTaskToReadyList+0xb4>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d201      	bcs.n	80034fa <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80034f6:	f000 fbeb 	bl	8003cd0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	46bd      	mov	sp, r7
 80034fe:	b002      	add	sp, #8
 8003500:	bd80      	pop	{r7, pc}
 8003502:	46c0      	nop			; (mov r8, r8)
 8003504:	20000520 	.word	0x20000520
 8003508:	20000420 	.word	0x20000420
 800350c:	2000052c 	.word	0x2000052c
 8003510:	2000053c 	.word	0x2000053c
 8003514:	20000528 	.word	0x20000528
 8003518:	20000424 	.word	0x20000424

0800351c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003524:	2300      	movs	r3, #0
 8003526:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d010      	beq.n	8003550 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800352e:	4b0d      	ldr	r3, [pc, #52]	; (8003564 <vTaskDelay+0x48>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <vTaskDelay+0x1e>
 8003536:	b672      	cpsid	i
 8003538:	e7fe      	b.n	8003538 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800353a:	f000 f86d 	bl	8003618 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2100      	movs	r1, #0
 8003542:	0018      	movs	r0, r3
 8003544:	f000 fae2 	bl	8003b0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003548:	f000 f872 	bl	8003630 <xTaskResumeAll>
 800354c:	0003      	movs	r3, r0
 800354e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8003556:	f000 fbbb 	bl	8003cd0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	46bd      	mov	sp, r7
 800355e:	b004      	add	sp, #16
 8003560:	bd80      	pop	{r7, pc}
 8003562:	46c0      	nop			; (mov r8, r8)
 8003564:	20000548 	.word	0x20000548

08003568 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003568:	b590      	push	{r4, r7, lr}
 800356a:	b089      	sub	sp, #36	; 0x24
 800356c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800356e:	2300      	movs	r3, #0
 8003570:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003572:	2300      	movs	r3, #0
 8003574:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003576:	003a      	movs	r2, r7
 8003578:	1d39      	adds	r1, r7, #4
 800357a:	2308      	movs	r3, #8
 800357c:	18fb      	adds	r3, r7, r3
 800357e:	0018      	movs	r0, r3
 8003580:	f7fc fe4e 	bl	8000220 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003584:	683c      	ldr	r4, [r7, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	491b      	ldr	r1, [pc, #108]	; (80035f8 <vTaskStartScheduler+0x90>)
 800358c:	481b      	ldr	r0, [pc, #108]	; (80035fc <vTaskStartScheduler+0x94>)
 800358e:	9202      	str	r2, [sp, #8]
 8003590:	9301      	str	r3, [sp, #4]
 8003592:	2300      	movs	r3, #0
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	2300      	movs	r3, #0
 8003598:	0022      	movs	r2, r4
 800359a:	f7ff fe3c 	bl	8003216 <xTaskCreateStatic>
 800359e:	0002      	movs	r2, r0
 80035a0:	4b17      	ldr	r3, [pc, #92]	; (8003600 <vTaskStartScheduler+0x98>)
 80035a2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80035a4:	4b16      	ldr	r3, [pc, #88]	; (8003600 <vTaskStartScheduler+0x98>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80035ac:	2301      	movs	r3, #1
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	e001      	b.n	80035b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d113      	bne.n	80035e4 <vTaskStartScheduler+0x7c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80035bc:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80035be:	4b11      	ldr	r3, [pc, #68]	; (8003604 <vTaskStartScheduler+0x9c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	334c      	adds	r3, #76	; 0x4c
 80035c4:	001a      	movs	r2, r3
 80035c6:	4b10      	ldr	r3, [pc, #64]	; (8003608 <vTaskStartScheduler+0xa0>)
 80035c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80035ca:	4b10      	ldr	r3, [pc, #64]	; (800360c <vTaskStartScheduler+0xa4>)
 80035cc:	2201      	movs	r2, #1
 80035ce:	4252      	negs	r2, r2
 80035d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80035d2:	4b0f      	ldr	r3, [pc, #60]	; (8003610 <vTaskStartScheduler+0xa8>)
 80035d4:	2201      	movs	r2, #1
 80035d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80035d8:	4b0e      	ldr	r3, [pc, #56]	; (8003614 <vTaskStartScheduler+0xac>)
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80035de:	f000 fb53 	bl	8003c88 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80035e2:	e004      	b.n	80035ee <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	3301      	adds	r3, #1
 80035e8:	d101      	bne.n	80035ee <vTaskStartScheduler+0x86>
 80035ea:	b672      	cpsid	i
 80035ec:	e7fe      	b.n	80035ec <vTaskStartScheduler+0x84>
}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	46bd      	mov	sp, r7
 80035f2:	b005      	add	sp, #20
 80035f4:	bd90      	pop	{r4, r7, pc}
 80035f6:	46c0      	nop			; (mov r8, r8)
 80035f8:	0800443c 	.word	0x0800443c
 80035fc:	08003965 	.word	0x08003965
 8003600:	20000544 	.word	0x20000544
 8003604:	20000420 	.word	0x20000420
 8003608:	20000010 	.word	0x20000010
 800360c:	20000540 	.word	0x20000540
 8003610:	2000052c 	.word	0x2000052c
 8003614:	20000524 	.word	0x20000524

08003618 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800361c:	4b03      	ldr	r3, [pc, #12]	; (800362c <vTaskSuspendAll+0x14>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	1c5a      	adds	r2, r3, #1
 8003622:	4b02      	ldr	r3, [pc, #8]	; (800362c <vTaskSuspendAll+0x14>)
 8003624:	601a      	str	r2, [r3, #0]
}
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	20000548 	.word	0x20000548

08003630 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003636:	2300      	movs	r3, #0
 8003638:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800363a:	2300      	movs	r3, #0
 800363c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800363e:	4b3a      	ldr	r3, [pc, #232]	; (8003728 <xTaskResumeAll+0xf8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <xTaskResumeAll+0x1a>
 8003646:	b672      	cpsid	i
 8003648:	e7fe      	b.n	8003648 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800364a:	f000 fb51 	bl	8003cf0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800364e:	4b36      	ldr	r3, [pc, #216]	; (8003728 <xTaskResumeAll+0xf8>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	1e5a      	subs	r2, r3, #1
 8003654:	4b34      	ldr	r3, [pc, #208]	; (8003728 <xTaskResumeAll+0xf8>)
 8003656:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003658:	4b33      	ldr	r3, [pc, #204]	; (8003728 <xTaskResumeAll+0xf8>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d15b      	bne.n	8003718 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003660:	4b32      	ldr	r3, [pc, #200]	; (800372c <xTaskResumeAll+0xfc>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d057      	beq.n	8003718 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003668:	e02f      	b.n	80036ca <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800366a:	4b31      	ldr	r3, [pc, #196]	; (8003730 <xTaskResumeAll+0x100>)
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	3318      	adds	r3, #24
 8003676:	0018      	movs	r0, r3
 8003678:	f7ff fda5 	bl	80031c6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	3304      	adds	r3, #4
 8003680:	0018      	movs	r0, r3
 8003682:	f7ff fda0 	bl	80031c6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800368a:	4b2a      	ldr	r3, [pc, #168]	; (8003734 <xTaskResumeAll+0x104>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	429a      	cmp	r2, r3
 8003690:	d903      	bls.n	800369a <xTaskResumeAll+0x6a>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003696:	4b27      	ldr	r3, [pc, #156]	; (8003734 <xTaskResumeAll+0x104>)
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800369e:	0013      	movs	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	189b      	adds	r3, r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4a24      	ldr	r2, [pc, #144]	; (8003738 <xTaskResumeAll+0x108>)
 80036a8:	189a      	adds	r2, r3, r2
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	3304      	adds	r3, #4
 80036ae:	0019      	movs	r1, r3
 80036b0:	0010      	movs	r0, r2
 80036b2:	f7ff fd30 	bl	8003116 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ba:	4b20      	ldr	r3, [pc, #128]	; (800373c <xTaskResumeAll+0x10c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d302      	bcc.n	80036ca <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80036c4:	4b1e      	ldr	r3, [pc, #120]	; (8003740 <xTaskResumeAll+0x110>)
 80036c6:	2201      	movs	r2, #1
 80036c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036ca:	4b19      	ldr	r3, [pc, #100]	; (8003730 <xTaskResumeAll+0x100>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1cb      	bne.n	800366a <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80036d8:	f000 f9f4 	bl	8003ac4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80036dc:	4b19      	ldr	r3, [pc, #100]	; (8003744 <xTaskResumeAll+0x114>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00f      	beq.n	8003708 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80036e8:	f000 f82e 	bl	8003748 <xTaskIncrementTick>
 80036ec:	1e03      	subs	r3, r0, #0
 80036ee:	d002      	beq.n	80036f6 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80036f0:	4b13      	ldr	r3, [pc, #76]	; (8003740 <xTaskResumeAll+0x110>)
 80036f2:	2201      	movs	r2, #1
 80036f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	3b01      	subs	r3, #1
 80036fa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1f2      	bne.n	80036e8 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8003702:	4b10      	ldr	r3, [pc, #64]	; (8003744 <xTaskResumeAll+0x114>)
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003708:	4b0d      	ldr	r3, [pc, #52]	; (8003740 <xTaskResumeAll+0x110>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d003      	beq.n	8003718 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003710:	2301      	movs	r3, #1
 8003712:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003714:	f000 fadc 	bl	8003cd0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003718:	f000 fafc 	bl	8003d14 <vPortExitCritical>

	return xAlreadyYielded;
 800371c:	68bb      	ldr	r3, [r7, #8]
}
 800371e:	0018      	movs	r0, r3
 8003720:	46bd      	mov	sp, r7
 8003722:	b004      	add	sp, #16
 8003724:	bd80      	pop	{r7, pc}
 8003726:	46c0      	nop			; (mov r8, r8)
 8003728:	20000548 	.word	0x20000548
 800372c:	20000520 	.word	0x20000520
 8003730:	200004e0 	.word	0x200004e0
 8003734:	20000528 	.word	0x20000528
 8003738:	20000424 	.word	0x20000424
 800373c:	20000420 	.word	0x20000420
 8003740:	20000534 	.word	0x20000534
 8003744:	20000530 	.word	0x20000530

08003748 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800374e:	2300      	movs	r3, #0
 8003750:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003752:	4b4c      	ldr	r3, [pc, #304]	; (8003884 <xTaskIncrementTick+0x13c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d000      	beq.n	800375c <xTaskIncrementTick+0x14>
 800375a:	e083      	b.n	8003864 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800375c:	4b4a      	ldr	r3, [pc, #296]	; (8003888 <xTaskIncrementTick+0x140>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	3301      	adds	r3, #1
 8003762:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003764:	4b48      	ldr	r3, [pc, #288]	; (8003888 <xTaskIncrementTick+0x140>)
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d117      	bne.n	80037a0 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8003770:	4b46      	ldr	r3, [pc, #280]	; (800388c <xTaskIncrementTick+0x144>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <xTaskIncrementTick+0x36>
 800377a:	b672      	cpsid	i
 800377c:	e7fe      	b.n	800377c <xTaskIncrementTick+0x34>
 800377e:	4b43      	ldr	r3, [pc, #268]	; (800388c <xTaskIncrementTick+0x144>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	60fb      	str	r3, [r7, #12]
 8003784:	4b42      	ldr	r3, [pc, #264]	; (8003890 <xTaskIncrementTick+0x148>)
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	4b40      	ldr	r3, [pc, #256]	; (800388c <xTaskIncrementTick+0x144>)
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	4b40      	ldr	r3, [pc, #256]	; (8003890 <xTaskIncrementTick+0x148>)
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	4b40      	ldr	r3, [pc, #256]	; (8003894 <xTaskIncrementTick+0x14c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	1c5a      	adds	r2, r3, #1
 8003798:	4b3e      	ldr	r3, [pc, #248]	; (8003894 <xTaskIncrementTick+0x14c>)
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	f000 f992 	bl	8003ac4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80037a0:	4b3d      	ldr	r3, [pc, #244]	; (8003898 <xTaskIncrementTick+0x150>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d34e      	bcc.n	8003848 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037aa:	4b38      	ldr	r3, [pc, #224]	; (800388c <xTaskIncrementTick+0x144>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <xTaskIncrementTick+0x70>
 80037b4:	2301      	movs	r3, #1
 80037b6:	e000      	b.n	80037ba <xTaskIncrementTick+0x72>
 80037b8:	2300      	movs	r3, #0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d004      	beq.n	80037c8 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037be:	4b36      	ldr	r3, [pc, #216]	; (8003898 <xTaskIncrementTick+0x150>)
 80037c0:	2201      	movs	r2, #1
 80037c2:	4252      	negs	r2, r2
 80037c4:	601a      	str	r2, [r3, #0]
					break;
 80037c6:	e03f      	b.n	8003848 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80037c8:	4b30      	ldr	r3, [pc, #192]	; (800388c <xTaskIncrementTick+0x144>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d203      	bcs.n	80037e8 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80037e0:	4b2d      	ldr	r3, [pc, #180]	; (8003898 <xTaskIncrementTick+0x150>)
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	601a      	str	r2, [r3, #0]
						break;
 80037e6:	e02f      	b.n	8003848 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	3304      	adds	r3, #4
 80037ec:	0018      	movs	r0, r3
 80037ee:	f7ff fcea 	bl	80031c6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d004      	beq.n	8003804 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	3318      	adds	r3, #24
 80037fe:	0018      	movs	r0, r3
 8003800:	f7ff fce1 	bl	80031c6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003808:	4b24      	ldr	r3, [pc, #144]	; (800389c <xTaskIncrementTick+0x154>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	d903      	bls.n	8003818 <xTaskIncrementTick+0xd0>
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003814:	4b21      	ldr	r3, [pc, #132]	; (800389c <xTaskIncrementTick+0x154>)
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800381c:	0013      	movs	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	189b      	adds	r3, r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4a1e      	ldr	r2, [pc, #120]	; (80038a0 <xTaskIncrementTick+0x158>)
 8003826:	189a      	adds	r2, r3, r2
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	3304      	adds	r3, #4
 800382c:	0019      	movs	r1, r3
 800382e:	0010      	movs	r0, r2
 8003830:	f7ff fc71 	bl	8003116 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003838:	4b1a      	ldr	r3, [pc, #104]	; (80038a4 <xTaskIncrementTick+0x15c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383e:	429a      	cmp	r2, r3
 8003840:	d3b3      	bcc.n	80037aa <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8003842:	2301      	movs	r3, #1
 8003844:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003846:	e7b0      	b.n	80037aa <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003848:	4b16      	ldr	r3, [pc, #88]	; (80038a4 <xTaskIncrementTick+0x15c>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800384e:	4914      	ldr	r1, [pc, #80]	; (80038a0 <xTaskIncrementTick+0x158>)
 8003850:	0013      	movs	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	189b      	adds	r3, r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	585b      	ldr	r3, [r3, r1]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d907      	bls.n	800386e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800385e:	2301      	movs	r3, #1
 8003860:	617b      	str	r3, [r7, #20]
 8003862:	e004      	b.n	800386e <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003864:	4b10      	ldr	r3, [pc, #64]	; (80038a8 <xTaskIncrementTick+0x160>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	1c5a      	adds	r2, r3, #1
 800386a:	4b0f      	ldr	r3, [pc, #60]	; (80038a8 <xTaskIncrementTick+0x160>)
 800386c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800386e:	4b0f      	ldr	r3, [pc, #60]	; (80038ac <xTaskIncrementTick+0x164>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8003876:	2301      	movs	r3, #1
 8003878:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800387a:	697b      	ldr	r3, [r7, #20]
}
 800387c:	0018      	movs	r0, r3
 800387e:	46bd      	mov	sp, r7
 8003880:	b006      	add	sp, #24
 8003882:	bd80      	pop	{r7, pc}
 8003884:	20000548 	.word	0x20000548
 8003888:	20000524 	.word	0x20000524
 800388c:	200004d8 	.word	0x200004d8
 8003890:	200004dc 	.word	0x200004dc
 8003894:	20000538 	.word	0x20000538
 8003898:	20000540 	.word	0x20000540
 800389c:	20000528 	.word	0x20000528
 80038a0:	20000424 	.word	0x20000424
 80038a4:	20000420 	.word	0x20000420
 80038a8:	20000530 	.word	0x20000530
 80038ac:	20000534 	.word	0x20000534

080038b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80038b6:	4b25      	ldr	r3, [pc, #148]	; (800394c <vTaskSwitchContext+0x9c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80038be:	4b24      	ldr	r3, [pc, #144]	; (8003950 <vTaskSwitchContext+0xa0>)
 80038c0:	2201      	movs	r2, #1
 80038c2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80038c4:	e03d      	b.n	8003942 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 80038c6:	4b22      	ldr	r3, [pc, #136]	; (8003950 <vTaskSwitchContext+0xa0>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80038cc:	4b21      	ldr	r3, [pc, #132]	; (8003954 <vTaskSwitchContext+0xa4>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	607b      	str	r3, [r7, #4]
 80038d2:	e007      	b.n	80038e4 <vTaskSwitchContext+0x34>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <vTaskSwitchContext+0x2e>
 80038da:	b672      	cpsid	i
 80038dc:	e7fe      	b.n	80038dc <vTaskSwitchContext+0x2c>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	3b01      	subs	r3, #1
 80038e2:	607b      	str	r3, [r7, #4]
 80038e4:	491c      	ldr	r1, [pc, #112]	; (8003958 <vTaskSwitchContext+0xa8>)
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	0013      	movs	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	189b      	adds	r3, r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	585b      	ldr	r3, [r3, r1]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0ee      	beq.n	80038d4 <vTaskSwitchContext+0x24>
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	0013      	movs	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	189b      	adds	r3, r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4a15      	ldr	r2, [pc, #84]	; (8003958 <vTaskSwitchContext+0xa8>)
 8003902:	189b      	adds	r3, r3, r2
 8003904:	603b      	str	r3, [r7, #0]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	605a      	str	r2, [r3, #4]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	3308      	adds	r3, #8
 8003918:	429a      	cmp	r2, r3
 800391a:	d104      	bne.n	8003926 <vTaskSwitchContext+0x76>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	605a      	str	r2, [r3, #4]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	68da      	ldr	r2, [r3, #12]
 800392c:	4b0b      	ldr	r3, [pc, #44]	; (800395c <vTaskSwitchContext+0xac>)
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	4b08      	ldr	r3, [pc, #32]	; (8003954 <vTaskSwitchContext+0xa4>)
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003936:	4b09      	ldr	r3, [pc, #36]	; (800395c <vTaskSwitchContext+0xac>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	334c      	adds	r3, #76	; 0x4c
 800393c:	001a      	movs	r2, r3
 800393e:	4b08      	ldr	r3, [pc, #32]	; (8003960 <vTaskSwitchContext+0xb0>)
 8003940:	601a      	str	r2, [r3, #0]
}
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	46bd      	mov	sp, r7
 8003946:	b002      	add	sp, #8
 8003948:	bd80      	pop	{r7, pc}
 800394a:	46c0      	nop			; (mov r8, r8)
 800394c:	20000548 	.word	0x20000548
 8003950:	20000534 	.word	0x20000534
 8003954:	20000528 	.word	0x20000528
 8003958:	20000424 	.word	0x20000424
 800395c:	20000420 	.word	0x20000420
 8003960:	20000010 	.word	0x20000010

08003964 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800396c:	f000 f84e 	bl	8003a0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003970:	4b03      	ldr	r3, [pc, #12]	; (8003980 <prvIdleTask+0x1c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d9f9      	bls.n	800396c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003978:	f000 f9aa 	bl	8003cd0 <vPortYield>
		prvCheckTasksWaitingTermination();
 800397c:	e7f6      	b.n	800396c <prvIdleTask+0x8>
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	20000424 	.word	0x20000424

08003984 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800398a:	2300      	movs	r3, #0
 800398c:	607b      	str	r3, [r7, #4]
 800398e:	e00c      	b.n	80039aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	0013      	movs	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	189b      	adds	r3, r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4a14      	ldr	r2, [pc, #80]	; (80039ec <prvInitialiseTaskLists+0x68>)
 800399c:	189b      	adds	r3, r3, r2
 800399e:	0018      	movs	r0, r3
 80039a0:	f7ff fb90 	bl	80030c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3301      	adds	r3, #1
 80039a8:	607b      	str	r3, [r7, #4]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b06      	cmp	r3, #6
 80039ae:	d9ef      	bls.n	8003990 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80039b0:	4b0f      	ldr	r3, [pc, #60]	; (80039f0 <prvInitialiseTaskLists+0x6c>)
 80039b2:	0018      	movs	r0, r3
 80039b4:	f7ff fb86 	bl	80030c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80039b8:	4b0e      	ldr	r3, [pc, #56]	; (80039f4 <prvInitialiseTaskLists+0x70>)
 80039ba:	0018      	movs	r0, r3
 80039bc:	f7ff fb82 	bl	80030c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80039c0:	4b0d      	ldr	r3, [pc, #52]	; (80039f8 <prvInitialiseTaskLists+0x74>)
 80039c2:	0018      	movs	r0, r3
 80039c4:	f7ff fb7e 	bl	80030c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80039c8:	4b0c      	ldr	r3, [pc, #48]	; (80039fc <prvInitialiseTaskLists+0x78>)
 80039ca:	0018      	movs	r0, r3
 80039cc:	f7ff fb7a 	bl	80030c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80039d0:	4b0b      	ldr	r3, [pc, #44]	; (8003a00 <prvInitialiseTaskLists+0x7c>)
 80039d2:	0018      	movs	r0, r3
 80039d4:	f7ff fb76 	bl	80030c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80039d8:	4b0a      	ldr	r3, [pc, #40]	; (8003a04 <prvInitialiseTaskLists+0x80>)
 80039da:	4a05      	ldr	r2, [pc, #20]	; (80039f0 <prvInitialiseTaskLists+0x6c>)
 80039dc:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80039de:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <prvInitialiseTaskLists+0x84>)
 80039e0:	4a04      	ldr	r2, [pc, #16]	; (80039f4 <prvInitialiseTaskLists+0x70>)
 80039e2:	601a      	str	r2, [r3, #0]
}
 80039e4:	46c0      	nop			; (mov r8, r8)
 80039e6:	46bd      	mov	sp, r7
 80039e8:	b002      	add	sp, #8
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	20000424 	.word	0x20000424
 80039f0:	200004b0 	.word	0x200004b0
 80039f4:	200004c4 	.word	0x200004c4
 80039f8:	200004e0 	.word	0x200004e0
 80039fc:	200004f4 	.word	0x200004f4
 8003a00:	2000050c 	.word	0x2000050c
 8003a04:	200004d8 	.word	0x200004d8
 8003a08:	200004dc 	.word	0x200004dc

08003a0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a12:	e01a      	b.n	8003a4a <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8003a14:	f000 f96c 	bl	8003cf0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003a18:	4b10      	ldr	r3, [pc, #64]	; (8003a5c <prvCheckTasksWaitingTermination+0x50>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3304      	adds	r3, #4
 8003a24:	0018      	movs	r0, r3
 8003a26:	f7ff fbce 	bl	80031c6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003a2a:	4b0d      	ldr	r3, [pc, #52]	; (8003a60 <prvCheckTasksWaitingTermination+0x54>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	1e5a      	subs	r2, r3, #1
 8003a30:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <prvCheckTasksWaitingTermination+0x54>)
 8003a32:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003a34:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <prvCheckTasksWaitingTermination+0x58>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	1e5a      	subs	r2, r3, #1
 8003a3a:	4b0a      	ldr	r3, [pc, #40]	; (8003a64 <prvCheckTasksWaitingTermination+0x58>)
 8003a3c:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8003a3e:	f000 f969 	bl	8003d14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	0018      	movs	r0, r3
 8003a46:	f000 f80f 	bl	8003a68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a4a:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <prvCheckTasksWaitingTermination+0x58>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1e0      	bne.n	8003a14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003a52:	46c0      	nop			; (mov r8, r8)
 8003a54:	46c0      	nop			; (mov r8, r8)
 8003a56:	46bd      	mov	sp, r7
 8003a58:	b002      	add	sp, #8
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	200004f4 	.word	0x200004f4
 8003a60:	20000520 	.word	0x20000520
 8003a64:	20000508 	.word	0x20000508

08003a68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	334c      	adds	r3, #76	; 0x4c
 8003a74:	0018      	movs	r0, r3
 8003a76:	f000 fbb5 	bl	80041e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	22b1      	movs	r2, #177	; 0xb1
 8003a7e:	5c9b      	ldrb	r3, [r3, r2]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d109      	bne.n	8003a98 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a88:	0018      	movs	r0, r3
 8003a8a:	f000 fa6f 	bl	8003f6c <vPortFree>
				vPortFree( pxTCB );
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	0018      	movs	r0, r3
 8003a92:	f000 fa6b 	bl	8003f6c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003a96:	e010      	b.n	8003aba <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	22b1      	movs	r2, #177	; 0xb1
 8003a9c:	5c9b      	ldrb	r3, [r3, r2]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d104      	bne.n	8003aac <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	f000 fa61 	bl	8003f6c <vPortFree>
	}
 8003aaa:	e006      	b.n	8003aba <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	22b1      	movs	r2, #177	; 0xb1
 8003ab0:	5c9b      	ldrb	r3, [r3, r2]
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d001      	beq.n	8003aba <prvDeleteTCB+0x52>
 8003ab6:	b672      	cpsid	i
 8003ab8:	e7fe      	b.n	8003ab8 <prvDeleteTCB+0x50>
	}
 8003aba:	46c0      	nop			; (mov r8, r8)
 8003abc:	46bd      	mov	sp, r7
 8003abe:	b002      	add	sp, #8
 8003ac0:	bd80      	pop	{r7, pc}
	...

08003ac4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003aca:	4b0e      	ldr	r3, [pc, #56]	; (8003b04 <prvResetNextTaskUnblockTime+0x40>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <prvResetNextTaskUnblockTime+0x14>
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e000      	b.n	8003ada <prvResetNextTaskUnblockTime+0x16>
 8003ad8:	2300      	movs	r3, #0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d004      	beq.n	8003ae8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ade:	4b0a      	ldr	r3, [pc, #40]	; (8003b08 <prvResetNextTaskUnblockTime+0x44>)
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	4252      	negs	r2, r2
 8003ae4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003ae6:	e008      	b.n	8003afa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003ae8:	4b06      	ldr	r3, [pc, #24]	; (8003b04 <prvResetNextTaskUnblockTime+0x40>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	4b04      	ldr	r3, [pc, #16]	; (8003b08 <prvResetNextTaskUnblockTime+0x44>)
 8003af8:	601a      	str	r2, [r3, #0]
}
 8003afa:	46c0      	nop			; (mov r8, r8)
 8003afc:	46bd      	mov	sp, r7
 8003afe:	b002      	add	sp, #8
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	46c0      	nop			; (mov r8, r8)
 8003b04:	200004d8 	.word	0x200004d8
 8003b08:	20000540 	.word	0x20000540

08003b0c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003b16:	4b21      	ldr	r3, [pc, #132]	; (8003b9c <prvAddCurrentTaskToDelayedList+0x90>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b1c:	4b20      	ldr	r3, [pc, #128]	; (8003ba0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	3304      	adds	r3, #4
 8003b22:	0018      	movs	r0, r3
 8003b24:	f7ff fb4f 	bl	80031c6 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	d10b      	bne.n	8003b46 <prvAddCurrentTaskToDelayedList+0x3a>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d008      	beq.n	8003b46 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b34:	4b1a      	ldr	r3, [pc, #104]	; (8003ba0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	1d1a      	adds	r2, r3, #4
 8003b3a:	4b1a      	ldr	r3, [pc, #104]	; (8003ba4 <prvAddCurrentTaskToDelayedList+0x98>)
 8003b3c:	0011      	movs	r1, r2
 8003b3e:	0018      	movs	r0, r3
 8003b40:	f7ff fae9 	bl	8003116 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003b44:	e026      	b.n	8003b94 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	18d3      	adds	r3, r2, r3
 8003b4c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b4e:	4b14      	ldr	r3, [pc, #80]	; (8003ba0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d209      	bcs.n	8003b72 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b5e:	4b12      	ldr	r3, [pc, #72]	; (8003ba8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	4b0f      	ldr	r3, [pc, #60]	; (8003ba0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	3304      	adds	r3, #4
 8003b68:	0019      	movs	r1, r3
 8003b6a:	0010      	movs	r0, r2
 8003b6c:	f7ff faf5 	bl	800315a <vListInsert>
}
 8003b70:	e010      	b.n	8003b94 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b72:	4b0e      	ldr	r3, [pc, #56]	; (8003bac <prvAddCurrentTaskToDelayedList+0xa0>)
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	4b0a      	ldr	r3, [pc, #40]	; (8003ba0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	3304      	adds	r3, #4
 8003b7c:	0019      	movs	r1, r3
 8003b7e:	0010      	movs	r0, r2
 8003b80:	f7ff faeb 	bl	800315a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003b84:	4b0a      	ldr	r3, [pc, #40]	; (8003bb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d202      	bcs.n	8003b94 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003b8e:	4b08      	ldr	r3, [pc, #32]	; (8003bb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	601a      	str	r2, [r3, #0]
}
 8003b94:	46c0      	nop			; (mov r8, r8)
 8003b96:	46bd      	mov	sp, r7
 8003b98:	b004      	add	sp, #16
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	20000524 	.word	0x20000524
 8003ba0:	20000420 	.word	0x20000420
 8003ba4:	2000050c 	.word	0x2000050c
 8003ba8:	200004dc 	.word	0x200004dc
 8003bac:	200004d8 	.word	0x200004d8
 8003bb0:	20000540 	.word	0x20000540

08003bb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	3b04      	subs	r3, #4
 8003bc4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2280      	movs	r2, #128	; 0x80
 8003bca:	0452      	lsls	r2, r2, #17
 8003bcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	3b04      	subs	r3, #4
 8003bd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	3b04      	subs	r3, #4
 8003bde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003be0:	4a08      	ldr	r2, [pc, #32]	; (8003c04 <pxPortInitialiseStack+0x50>)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	3b14      	subs	r3, #20
 8003bea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	3b20      	subs	r3, #32
 8003bf6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
}
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	b004      	add	sp, #16
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	46c0      	nop			; (mov r8, r8)
 8003c04:	08003c09 	.word	0x08003c09

08003c08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003c12:	4b08      	ldr	r3, [pc, #32]	; (8003c34 <prvTaskExitError+0x2c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	3301      	adds	r3, #1
 8003c18:	d001      	beq.n	8003c1e <prvTaskExitError+0x16>
 8003c1a:	b672      	cpsid	i
 8003c1c:	e7fe      	b.n	8003c1c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8003c1e:	b672      	cpsid	i
	while( ulDummy == 0 )
 8003c20:	46c0      	nop			; (mov r8, r8)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0fc      	beq.n	8003c22 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003c28:	46c0      	nop			; (mov r8, r8)
 8003c2a:	46c0      	nop			; (mov r8, r8)
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	b002      	add	sp, #8
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	46c0      	nop			; (mov r8, r8)
 8003c34:	2000000c 	.word	0x2000000c

08003c38 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8003c3c:	46c0      	nop			; (mov r8, r8)
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
	...

08003c50 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8003c50:	4a0b      	ldr	r2, [pc, #44]	; (8003c80 <pxCurrentTCBConst2>)
 8003c52:	6813      	ldr	r3, [r2, #0]
 8003c54:	6818      	ldr	r0, [r3, #0]
 8003c56:	3020      	adds	r0, #32
 8003c58:	f380 8809 	msr	PSP, r0
 8003c5c:	2002      	movs	r0, #2
 8003c5e:	f380 8814 	msr	CONTROL, r0
 8003c62:	f3bf 8f6f 	isb	sy
 8003c66:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8003c68:	46ae      	mov	lr, r5
 8003c6a:	bc08      	pop	{r3}
 8003c6c:	bc04      	pop	{r2}
 8003c6e:	b662      	cpsie	i
 8003c70:	4718      	bx	r3
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	46c0      	nop			; (mov r8, r8)
 8003c76:	46c0      	nop			; (mov r8, r8)
 8003c78:	46c0      	nop			; (mov r8, r8)
 8003c7a:	46c0      	nop			; (mov r8, r8)
 8003c7c:	46c0      	nop			; (mov r8, r8)
 8003c7e:	46c0      	nop			; (mov r8, r8)

08003c80 <pxCurrentTCBConst2>:
 8003c80:	20000420 	.word	0x20000420
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8003c84:	46c0      	nop			; (mov r8, r8)
 8003c86:	46c0      	nop			; (mov r8, r8)

08003c88 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8003c8c:	4b0e      	ldr	r3, [pc, #56]	; (8003cc8 <xPortStartScheduler+0x40>)
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	4b0d      	ldr	r3, [pc, #52]	; (8003cc8 <xPortStartScheduler+0x40>)
 8003c92:	21ff      	movs	r1, #255	; 0xff
 8003c94:	0409      	lsls	r1, r1, #16
 8003c96:	430a      	orrs	r2, r1
 8003c98:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8003c9a:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <xPortStartScheduler+0x40>)
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	4b0a      	ldr	r3, [pc, #40]	; (8003cc8 <xPortStartScheduler+0x40>)
 8003ca0:	21ff      	movs	r1, #255	; 0xff
 8003ca2:	0609      	lsls	r1, r1, #24
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8003ca8:	f000 f898 	bl	8003ddc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003cac:	4b07      	ldr	r3, [pc, #28]	; (8003ccc <xPortStartScheduler+0x44>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8003cb2:	f7ff ffcd 	bl	8003c50 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003cb6:	f7ff fdfb 	bl	80038b0 <vTaskSwitchContext>
	prvTaskExitError();
 8003cba:	f7ff ffa5 	bl	8003c08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	46c0      	nop			; (mov r8, r8)
 8003cc8:	e000ed20 	.word	0xe000ed20
 8003ccc:	2000000c 	.word	0x2000000c

08003cd0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8003cd4:	4b05      	ldr	r3, [pc, #20]	; (8003cec <vPortYield+0x1c>)
 8003cd6:	2280      	movs	r2, #128	; 0x80
 8003cd8:	0552      	lsls	r2, r2, #21
 8003cda:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8003cdc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003ce0:	f3bf 8f6f 	isb	sy
}
 8003ce4:	46c0      	nop			; (mov r8, r8)
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	46c0      	nop			; (mov r8, r8)
 8003cec:	e000ed04 	.word	0xe000ed04

08003cf0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8003cf4:	b672      	cpsid	i
    uxCriticalNesting++;
 8003cf6:	4b06      	ldr	r3, [pc, #24]	; (8003d10 <vPortEnterCritical+0x20>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	1c5a      	adds	r2, r3, #1
 8003cfc:	4b04      	ldr	r3, [pc, #16]	; (8003d10 <vPortEnterCritical+0x20>)
 8003cfe:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8003d00:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003d04:	f3bf 8f6f 	isb	sy
}
 8003d08:	46c0      	nop			; (mov r8, r8)
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	46c0      	nop			; (mov r8, r8)
 8003d10:	2000000c 	.word	0x2000000c

08003d14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003d18:	4b09      	ldr	r3, [pc, #36]	; (8003d40 <vPortExitCritical+0x2c>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d101      	bne.n	8003d24 <vPortExitCritical+0x10>
 8003d20:	b672      	cpsid	i
 8003d22:	e7fe      	b.n	8003d22 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8003d24:	4b06      	ldr	r3, [pc, #24]	; (8003d40 <vPortExitCritical+0x2c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	1e5a      	subs	r2, r3, #1
 8003d2a:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <vPortExitCritical+0x2c>)
 8003d2c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8003d2e:	4b04      	ldr	r3, [pc, #16]	; (8003d40 <vPortExitCritical+0x2c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d100      	bne.n	8003d38 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8003d36:	b662      	cpsie	i
    }
}
 8003d38:	46c0      	nop			; (mov r8, r8)
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	46c0      	nop			; (mov r8, r8)
 8003d40:	2000000c 	.word	0x2000000c

08003d44 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8003d44:	f3ef 8010 	mrs	r0, PRIMASK
 8003d48:	b672      	cpsid	i
 8003d4a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8003d4c:	46c0      	nop			; (mov r8, r8)
 8003d4e:	0018      	movs	r0, r3

08003d50 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8003d50:	f380 8810 	msr	PRIMASK, r0
 8003d54:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8003d56:	46c0      	nop			; (mov r8, r8)
	...

08003d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003d60:	f3ef 8009 	mrs	r0, PSP
 8003d64:	4b0e      	ldr	r3, [pc, #56]	; (8003da0 <pxCurrentTCBConst>)
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	3820      	subs	r0, #32
 8003d6a:	6010      	str	r0, [r2, #0]
 8003d6c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8003d6e:	4644      	mov	r4, r8
 8003d70:	464d      	mov	r5, r9
 8003d72:	4656      	mov	r6, sl
 8003d74:	465f      	mov	r7, fp
 8003d76:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8003d78:	b508      	push	{r3, lr}
 8003d7a:	b672      	cpsid	i
 8003d7c:	f7ff fd98 	bl	80038b0 <vTaskSwitchContext>
 8003d80:	b662      	cpsie	i
 8003d82:	bc0c      	pop	{r2, r3}
 8003d84:	6811      	ldr	r1, [r2, #0]
 8003d86:	6808      	ldr	r0, [r1, #0]
 8003d88:	3010      	adds	r0, #16
 8003d8a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8003d8c:	46a0      	mov	r8, r4
 8003d8e:	46a9      	mov	r9, r5
 8003d90:	46b2      	mov	sl, r6
 8003d92:	46bb      	mov	fp, r7
 8003d94:	f380 8809 	msr	PSP, r0
 8003d98:	3820      	subs	r0, #32
 8003d9a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8003d9c:	4718      	bx	r3
 8003d9e:	46c0      	nop			; (mov r8, r8)

08003da0 <pxCurrentTCBConst>:
 8003da0:	20000420 	.word	0x20000420
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8003da4:	46c0      	nop			; (mov r8, r8)
 8003da6:	46c0      	nop			; (mov r8, r8)

08003da8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8003dae:	f7ff ffc9 	bl	8003d44 <ulSetInterruptMaskFromISR>
 8003db2:	0003      	movs	r3, r0
 8003db4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003db6:	f7ff fcc7 	bl	8003748 <xTaskIncrementTick>
 8003dba:	1e03      	subs	r3, r0, #0
 8003dbc:	d003      	beq.n	8003dc6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8003dbe:	4b06      	ldr	r3, [pc, #24]	; (8003dd8 <SysTick_Handler+0x30>)
 8003dc0:	2280      	movs	r2, #128	; 0x80
 8003dc2:	0552      	lsls	r2, r2, #21
 8003dc4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f7ff ffc1 	bl	8003d50 <vClearInterruptMaskFromISR>
}
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	b002      	add	sp, #8
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	e000ed04 	.word	0xe000ed04

08003ddc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8003de0:	4b0b      	ldr	r3, [pc, #44]	; (8003e10 <prvSetupTimerInterrupt+0x34>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8003de6:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <prvSetupTimerInterrupt+0x38>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003dec:	4b0a      	ldr	r3, [pc, #40]	; (8003e18 <prvSetupTimerInterrupt+0x3c>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	22fa      	movs	r2, #250	; 0xfa
 8003df2:	0091      	lsls	r1, r2, #2
 8003df4:	0018      	movs	r0, r3
 8003df6:	f7fc f987 	bl	8000108 <__udivsi3>
 8003dfa:	0003      	movs	r3, r0
 8003dfc:	001a      	movs	r2, r3
 8003dfe:	4b07      	ldr	r3, [pc, #28]	; (8003e1c <prvSetupTimerInterrupt+0x40>)
 8003e00:	3a01      	subs	r2, #1
 8003e02:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8003e04:	4b02      	ldr	r3, [pc, #8]	; (8003e10 <prvSetupTimerInterrupt+0x34>)
 8003e06:	2207      	movs	r2, #7
 8003e08:	601a      	str	r2, [r3, #0]
}
 8003e0a:	46c0      	nop			; (mov r8, r8)
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	e000e010 	.word	0xe000e010
 8003e14:	e000e018 	.word	0xe000e018
 8003e18:	20000000 	.word	0x20000000
 8003e1c:	e000e014 	.word	0xe000e014

08003e20 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8003e2c:	f7ff fbf4 	bl	8003618 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003e30:	4b49      	ldr	r3, [pc, #292]	; (8003f58 <pvPortMalloc+0x138>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d101      	bne.n	8003e3c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003e38:	f000 f8e0 	bl	8003ffc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003e3c:	4b47      	ldr	r3, [pc, #284]	; (8003f5c <pvPortMalloc+0x13c>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	4013      	ands	r3, r2
 8003e44:	d000      	beq.n	8003e48 <pvPortMalloc+0x28>
 8003e46:	e079      	b.n	8003f3c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d012      	beq.n	8003e74 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8003e4e:	2208      	movs	r2, #8
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	189b      	adds	r3, r3, r2
 8003e54:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2207      	movs	r2, #7
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	d00a      	beq.n	8003e74 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2207      	movs	r2, #7
 8003e62:	4393      	bics	r3, r2
 8003e64:	3308      	adds	r3, #8
 8003e66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2207      	movs	r2, #7
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	d001      	beq.n	8003e74 <pvPortMalloc+0x54>
 8003e70:	b672      	cpsid	i
 8003e72:	e7fe      	b.n	8003e72 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d060      	beq.n	8003f3c <pvPortMalloc+0x11c>
 8003e7a:	4b39      	ldr	r3, [pc, #228]	; (8003f60 <pvPortMalloc+0x140>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d85b      	bhi.n	8003f3c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003e84:	4b37      	ldr	r3, [pc, #220]	; (8003f64 <pvPortMalloc+0x144>)
 8003e86:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8003e88:	4b36      	ldr	r3, [pc, #216]	; (8003f64 <pvPortMalloc+0x144>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e8e:	e004      	b.n	8003e9a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d903      	bls.n	8003eac <pvPortMalloc+0x8c>
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1f1      	bne.n	8003e90 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003eac:	4b2a      	ldr	r3, [pc, #168]	; (8003f58 <pvPortMalloc+0x138>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d042      	beq.n	8003f3c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2208      	movs	r2, #8
 8003ebc:	189b      	adds	r3, r3, r2
 8003ebe:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	1ad2      	subs	r2, r2, r3
 8003ed0:	2308      	movs	r3, #8
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d916      	bls.n	8003f06 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	18d3      	adds	r3, r2, r3
 8003ede:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	2207      	movs	r2, #7
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	d001      	beq.n	8003eec <pvPortMalloc+0xcc>
 8003ee8:	b672      	cpsid	i
 8003eea:	e7fe      	b.n	8003eea <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	1ad2      	subs	r2, r2, r3
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	0018      	movs	r0, r3
 8003f02:	f000 f8db 	bl	80040bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003f06:	4b16      	ldr	r3, [pc, #88]	; (8003f60 <pvPortMalloc+0x140>)
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	1ad2      	subs	r2, r2, r3
 8003f10:	4b13      	ldr	r3, [pc, #76]	; (8003f60 <pvPortMalloc+0x140>)
 8003f12:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003f14:	4b12      	ldr	r3, [pc, #72]	; (8003f60 <pvPortMalloc+0x140>)
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	4b13      	ldr	r3, [pc, #76]	; (8003f68 <pvPortMalloc+0x148>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d203      	bcs.n	8003f28 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003f20:	4b0f      	ldr	r3, [pc, #60]	; (8003f60 <pvPortMalloc+0x140>)
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	4b10      	ldr	r3, [pc, #64]	; (8003f68 <pvPortMalloc+0x148>)
 8003f26:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	4b0b      	ldr	r3, [pc, #44]	; (8003f5c <pvPortMalloc+0x13c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	431a      	orrs	r2, r3
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003f3c:	f7ff fb78 	bl	8003630 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2207      	movs	r2, #7
 8003f44:	4013      	ands	r3, r2
 8003f46:	d001      	beq.n	8003f4c <pvPortMalloc+0x12c>
 8003f48:	b672      	cpsid	i
 8003f4a:	e7fe      	b.n	8003f4a <pvPortMalloc+0x12a>
	return pvReturn;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
}
 8003f4e:	0018      	movs	r0, r3
 8003f50:	46bd      	mov	sp, r7
 8003f52:	b006      	add	sp, #24
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	46c0      	nop			; (mov r8, r8)
 8003f58:	20001154 	.word	0x20001154
 8003f5c:	20001160 	.word	0x20001160
 8003f60:	20001158 	.word	0x20001158
 8003f64:	2000114c 	.word	0x2000114c
 8003f68:	2000115c 	.word	0x2000115c

08003f6c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d035      	beq.n	8003fea <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003f7e:	2308      	movs	r3, #8
 8003f80:	425b      	negs	r3, r3
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	18d3      	adds	r3, r2, r3
 8003f86:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	4b18      	ldr	r3, [pc, #96]	; (8003ff4 <vPortFree+0x88>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4013      	ands	r3, r2
 8003f96:	d101      	bne.n	8003f9c <vPortFree+0x30>
 8003f98:	b672      	cpsid	i
 8003f9a:	e7fe      	b.n	8003f9a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <vPortFree+0x3c>
 8003fa4:	b672      	cpsid	i
 8003fa6:	e7fe      	b.n	8003fa6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	4b11      	ldr	r3, [pc, #68]	; (8003ff4 <vPortFree+0x88>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	d01a      	beq.n	8003fea <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d116      	bne.n	8003fea <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	4b0c      	ldr	r3, [pc, #48]	; (8003ff4 <vPortFree+0x88>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	401a      	ands	r2, r3
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003fcc:	f7ff fb24 	bl	8003618 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	4b08      	ldr	r3, [pc, #32]	; (8003ff8 <vPortFree+0x8c>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	18d2      	adds	r2, r2, r3
 8003fda:	4b07      	ldr	r3, [pc, #28]	; (8003ff8 <vPortFree+0x8c>)
 8003fdc:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	f000 f86b 	bl	80040bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003fe6:	f7ff fb23 	bl	8003630 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003fea:	46c0      	nop			; (mov r8, r8)
 8003fec:	46bd      	mov	sp, r7
 8003fee:	b004      	add	sp, #16
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	46c0      	nop			; (mov r8, r8)
 8003ff4:	20001160 	.word	0x20001160
 8003ff8:	20001158 	.word	0x20001158

08003ffc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004002:	23c0      	movs	r3, #192	; 0xc0
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004008:	4b26      	ldr	r3, [pc, #152]	; (80040a4 <prvHeapInit+0xa8>)
 800400a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2207      	movs	r2, #7
 8004010:	4013      	ands	r3, r2
 8004012:	d00c      	beq.n	800402e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	3307      	adds	r3, #7
 8004018:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2207      	movs	r2, #7
 800401e:	4393      	bics	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	1ad2      	subs	r2, r2, r3
 8004028:	4b1e      	ldr	r3, [pc, #120]	; (80040a4 <prvHeapInit+0xa8>)
 800402a:	18d3      	adds	r3, r2, r3
 800402c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004032:	4b1d      	ldr	r3, [pc, #116]	; (80040a8 <prvHeapInit+0xac>)
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004038:	4b1b      	ldr	r3, [pc, #108]	; (80040a8 <prvHeapInit+0xac>)
 800403a:	2200      	movs	r2, #0
 800403c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	18d3      	adds	r3, r2, r3
 8004044:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004046:	2208      	movs	r2, #8
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	1a9b      	subs	r3, r3, r2
 800404c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2207      	movs	r2, #7
 8004052:	4393      	bics	r3, r2
 8004054:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	4b14      	ldr	r3, [pc, #80]	; (80040ac <prvHeapInit+0xb0>)
 800405a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800405c:	4b13      	ldr	r3, [pc, #76]	; (80040ac <prvHeapInit+0xb0>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2200      	movs	r2, #0
 8004062:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004064:	4b11      	ldr	r3, [pc, #68]	; (80040ac <prvHeapInit+0xb0>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	1ad2      	subs	r2, r2, r3
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800407a:	4b0c      	ldr	r3, [pc, #48]	; (80040ac <prvHeapInit+0xb0>)
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	4b0a      	ldr	r3, [pc, #40]	; (80040b0 <prvHeapInit+0xb4>)
 8004088:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	4b09      	ldr	r3, [pc, #36]	; (80040b4 <prvHeapInit+0xb8>)
 8004090:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004092:	4b09      	ldr	r3, [pc, #36]	; (80040b8 <prvHeapInit+0xbc>)
 8004094:	2280      	movs	r2, #128	; 0x80
 8004096:	0612      	lsls	r2, r2, #24
 8004098:	601a      	str	r2, [r3, #0]
}
 800409a:	46c0      	nop			; (mov r8, r8)
 800409c:	46bd      	mov	sp, r7
 800409e:	b004      	add	sp, #16
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	2000054c 	.word	0x2000054c
 80040a8:	2000114c 	.word	0x2000114c
 80040ac:	20001154 	.word	0x20001154
 80040b0:	2000115c 	.word	0x2000115c
 80040b4:	20001158 	.word	0x20001158
 80040b8:	20001160 	.word	0x20001160

080040bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80040c4:	4b27      	ldr	r3, [pc, #156]	; (8004164 <prvInsertBlockIntoFreeList+0xa8>)
 80040c6:	60fb      	str	r3, [r7, #12]
 80040c8:	e002      	b.n	80040d0 <prvInsertBlockIntoFreeList+0x14>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d8f7      	bhi.n	80040ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	18d3      	adds	r3, r2, r3
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d108      	bne.n	80040fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	18d2      	adds	r2, r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	18d2      	adds	r2, r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	429a      	cmp	r2, r3
 8004110:	d118      	bne.n	8004144 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	4b14      	ldr	r3, [pc, #80]	; (8004168 <prvInsertBlockIntoFreeList+0xac>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	429a      	cmp	r2, r3
 800411c:	d00d      	beq.n	800413a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	18d2      	adds	r2, r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	e008      	b.n	800414c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800413a:	4b0b      	ldr	r3, [pc, #44]	; (8004168 <prvInsertBlockIntoFreeList+0xac>)
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	e003      	b.n	800414c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	429a      	cmp	r2, r3
 8004152:	d002      	beq.n	800415a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800415a:	46c0      	nop			; (mov r8, r8)
 800415c:	46bd      	mov	sp, r7
 800415e:	b004      	add	sp, #16
 8004160:	bd80      	pop	{r7, pc}
 8004162:	46c0      	nop			; (mov r8, r8)
 8004164:	2000114c 	.word	0x2000114c
 8004168:	20001154 	.word	0x20001154

0800416c <__libc_init_array>:
 800416c:	b570      	push	{r4, r5, r6, lr}
 800416e:	2600      	movs	r6, #0
 8004170:	4d0c      	ldr	r5, [pc, #48]	; (80041a4 <__libc_init_array+0x38>)
 8004172:	4c0d      	ldr	r4, [pc, #52]	; (80041a8 <__libc_init_array+0x3c>)
 8004174:	1b64      	subs	r4, r4, r5
 8004176:	10a4      	asrs	r4, r4, #2
 8004178:	42a6      	cmp	r6, r4
 800417a:	d109      	bne.n	8004190 <__libc_init_array+0x24>
 800417c:	2600      	movs	r6, #0
 800417e:	f000 f8f1 	bl	8004364 <_init>
 8004182:	4d0a      	ldr	r5, [pc, #40]	; (80041ac <__libc_init_array+0x40>)
 8004184:	4c0a      	ldr	r4, [pc, #40]	; (80041b0 <__libc_init_array+0x44>)
 8004186:	1b64      	subs	r4, r4, r5
 8004188:	10a4      	asrs	r4, r4, #2
 800418a:	42a6      	cmp	r6, r4
 800418c:	d105      	bne.n	800419a <__libc_init_array+0x2e>
 800418e:	bd70      	pop	{r4, r5, r6, pc}
 8004190:	00b3      	lsls	r3, r6, #2
 8004192:	58eb      	ldr	r3, [r5, r3]
 8004194:	4798      	blx	r3
 8004196:	3601      	adds	r6, #1
 8004198:	e7ee      	b.n	8004178 <__libc_init_array+0xc>
 800419a:	00b3      	lsls	r3, r6, #2
 800419c:	58eb      	ldr	r3, [r5, r3]
 800419e:	4798      	blx	r3
 80041a0:	3601      	adds	r6, #1
 80041a2:	e7f2      	b.n	800418a <__libc_init_array+0x1e>
 80041a4:	080044bc 	.word	0x080044bc
 80041a8:	080044bc 	.word	0x080044bc
 80041ac:	080044bc 	.word	0x080044bc
 80041b0:	080044c0 	.word	0x080044c0

080041b4 <__retarget_lock_acquire_recursive>:
 80041b4:	4770      	bx	lr

080041b6 <__retarget_lock_release_recursive>:
 80041b6:	4770      	bx	lr

080041b8 <memset>:
 80041b8:	0003      	movs	r3, r0
 80041ba:	1882      	adds	r2, r0, r2
 80041bc:	4293      	cmp	r3, r2
 80041be:	d100      	bne.n	80041c2 <memset+0xa>
 80041c0:	4770      	bx	lr
 80041c2:	7019      	strb	r1, [r3, #0]
 80041c4:	3301      	adds	r3, #1
 80041c6:	e7f9      	b.n	80041bc <memset+0x4>

080041c8 <cleanup_glue>:
 80041c8:	b570      	push	{r4, r5, r6, lr}
 80041ca:	000d      	movs	r5, r1
 80041cc:	6809      	ldr	r1, [r1, #0]
 80041ce:	0004      	movs	r4, r0
 80041d0:	2900      	cmp	r1, #0
 80041d2:	d001      	beq.n	80041d8 <cleanup_glue+0x10>
 80041d4:	f7ff fff8 	bl	80041c8 <cleanup_glue>
 80041d8:	0029      	movs	r1, r5
 80041da:	0020      	movs	r0, r4
 80041dc:	f000 f878 	bl	80042d0 <_free_r>
 80041e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080041e4 <_reclaim_reent>:
 80041e4:	4b31      	ldr	r3, [pc, #196]	; (80042ac <_reclaim_reent+0xc8>)
 80041e6:	b570      	push	{r4, r5, r6, lr}
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	0004      	movs	r4, r0
 80041ec:	4283      	cmp	r3, r0
 80041ee:	d049      	beq.n	8004284 <_reclaim_reent+0xa0>
 80041f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00a      	beq.n	800420c <_reclaim_reent+0x28>
 80041f6:	2500      	movs	r5, #0
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	42ab      	cmp	r3, r5
 80041fc:	d147      	bne.n	800428e <_reclaim_reent+0xaa>
 80041fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004200:	6819      	ldr	r1, [r3, #0]
 8004202:	2900      	cmp	r1, #0
 8004204:	d002      	beq.n	800420c <_reclaim_reent+0x28>
 8004206:	0020      	movs	r0, r4
 8004208:	f000 f862 	bl	80042d0 <_free_r>
 800420c:	6961      	ldr	r1, [r4, #20]
 800420e:	2900      	cmp	r1, #0
 8004210:	d002      	beq.n	8004218 <_reclaim_reent+0x34>
 8004212:	0020      	movs	r0, r4
 8004214:	f000 f85c 	bl	80042d0 <_free_r>
 8004218:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800421a:	2900      	cmp	r1, #0
 800421c:	d002      	beq.n	8004224 <_reclaim_reent+0x40>
 800421e:	0020      	movs	r0, r4
 8004220:	f000 f856 	bl	80042d0 <_free_r>
 8004224:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004226:	2900      	cmp	r1, #0
 8004228:	d002      	beq.n	8004230 <_reclaim_reent+0x4c>
 800422a:	0020      	movs	r0, r4
 800422c:	f000 f850 	bl	80042d0 <_free_r>
 8004230:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004232:	2900      	cmp	r1, #0
 8004234:	d002      	beq.n	800423c <_reclaim_reent+0x58>
 8004236:	0020      	movs	r0, r4
 8004238:	f000 f84a 	bl	80042d0 <_free_r>
 800423c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800423e:	2900      	cmp	r1, #0
 8004240:	d002      	beq.n	8004248 <_reclaim_reent+0x64>
 8004242:	0020      	movs	r0, r4
 8004244:	f000 f844 	bl	80042d0 <_free_r>
 8004248:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800424a:	2900      	cmp	r1, #0
 800424c:	d002      	beq.n	8004254 <_reclaim_reent+0x70>
 800424e:	0020      	movs	r0, r4
 8004250:	f000 f83e 	bl	80042d0 <_free_r>
 8004254:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004256:	2900      	cmp	r1, #0
 8004258:	d002      	beq.n	8004260 <_reclaim_reent+0x7c>
 800425a:	0020      	movs	r0, r4
 800425c:	f000 f838 	bl	80042d0 <_free_r>
 8004260:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004262:	2900      	cmp	r1, #0
 8004264:	d002      	beq.n	800426c <_reclaim_reent+0x88>
 8004266:	0020      	movs	r0, r4
 8004268:	f000 f832 	bl	80042d0 <_free_r>
 800426c:	69a3      	ldr	r3, [r4, #24]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d008      	beq.n	8004284 <_reclaim_reent+0xa0>
 8004272:	0020      	movs	r0, r4
 8004274:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004276:	4798      	blx	r3
 8004278:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800427a:	2900      	cmp	r1, #0
 800427c:	d002      	beq.n	8004284 <_reclaim_reent+0xa0>
 800427e:	0020      	movs	r0, r4
 8004280:	f7ff ffa2 	bl	80041c8 <cleanup_glue>
 8004284:	bd70      	pop	{r4, r5, r6, pc}
 8004286:	5949      	ldr	r1, [r1, r5]
 8004288:	2900      	cmp	r1, #0
 800428a:	d108      	bne.n	800429e <_reclaim_reent+0xba>
 800428c:	3504      	adds	r5, #4
 800428e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004290:	68d9      	ldr	r1, [r3, #12]
 8004292:	2d80      	cmp	r5, #128	; 0x80
 8004294:	d1f7      	bne.n	8004286 <_reclaim_reent+0xa2>
 8004296:	0020      	movs	r0, r4
 8004298:	f000 f81a 	bl	80042d0 <_free_r>
 800429c:	e7af      	b.n	80041fe <_reclaim_reent+0x1a>
 800429e:	680e      	ldr	r6, [r1, #0]
 80042a0:	0020      	movs	r0, r4
 80042a2:	f000 f815 	bl	80042d0 <_free_r>
 80042a6:	0031      	movs	r1, r6
 80042a8:	e7ee      	b.n	8004288 <_reclaim_reent+0xa4>
 80042aa:	46c0      	nop			; (mov r8, r8)
 80042ac:	20000010 	.word	0x20000010

080042b0 <__malloc_lock>:
 80042b0:	b510      	push	{r4, lr}
 80042b2:	4802      	ldr	r0, [pc, #8]	; (80042bc <__malloc_lock+0xc>)
 80042b4:	f7ff ff7e 	bl	80041b4 <__retarget_lock_acquire_recursive>
 80042b8:	bd10      	pop	{r4, pc}
 80042ba:	46c0      	nop			; (mov r8, r8)
 80042bc:	20001164 	.word	0x20001164

080042c0 <__malloc_unlock>:
 80042c0:	b510      	push	{r4, lr}
 80042c2:	4802      	ldr	r0, [pc, #8]	; (80042cc <__malloc_unlock+0xc>)
 80042c4:	f7ff ff77 	bl	80041b6 <__retarget_lock_release_recursive>
 80042c8:	bd10      	pop	{r4, pc}
 80042ca:	46c0      	nop			; (mov r8, r8)
 80042cc:	20001164 	.word	0x20001164

080042d0 <_free_r>:
 80042d0:	b570      	push	{r4, r5, r6, lr}
 80042d2:	0005      	movs	r5, r0
 80042d4:	2900      	cmp	r1, #0
 80042d6:	d010      	beq.n	80042fa <_free_r+0x2a>
 80042d8:	1f0c      	subs	r4, r1, #4
 80042da:	6823      	ldr	r3, [r4, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	da00      	bge.n	80042e2 <_free_r+0x12>
 80042e0:	18e4      	adds	r4, r4, r3
 80042e2:	0028      	movs	r0, r5
 80042e4:	f7ff ffe4 	bl	80042b0 <__malloc_lock>
 80042e8:	4a1d      	ldr	r2, [pc, #116]	; (8004360 <_free_r+0x90>)
 80042ea:	6813      	ldr	r3, [r2, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d105      	bne.n	80042fc <_free_r+0x2c>
 80042f0:	6063      	str	r3, [r4, #4]
 80042f2:	6014      	str	r4, [r2, #0]
 80042f4:	0028      	movs	r0, r5
 80042f6:	f7ff ffe3 	bl	80042c0 <__malloc_unlock>
 80042fa:	bd70      	pop	{r4, r5, r6, pc}
 80042fc:	42a3      	cmp	r3, r4
 80042fe:	d908      	bls.n	8004312 <_free_r+0x42>
 8004300:	6821      	ldr	r1, [r4, #0]
 8004302:	1860      	adds	r0, r4, r1
 8004304:	4283      	cmp	r3, r0
 8004306:	d1f3      	bne.n	80042f0 <_free_r+0x20>
 8004308:	6818      	ldr	r0, [r3, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	1841      	adds	r1, r0, r1
 800430e:	6021      	str	r1, [r4, #0]
 8004310:	e7ee      	b.n	80042f0 <_free_r+0x20>
 8004312:	001a      	movs	r2, r3
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <_free_r+0x4e>
 800431a:	42a3      	cmp	r3, r4
 800431c:	d9f9      	bls.n	8004312 <_free_r+0x42>
 800431e:	6811      	ldr	r1, [r2, #0]
 8004320:	1850      	adds	r0, r2, r1
 8004322:	42a0      	cmp	r0, r4
 8004324:	d10b      	bne.n	800433e <_free_r+0x6e>
 8004326:	6820      	ldr	r0, [r4, #0]
 8004328:	1809      	adds	r1, r1, r0
 800432a:	1850      	adds	r0, r2, r1
 800432c:	6011      	str	r1, [r2, #0]
 800432e:	4283      	cmp	r3, r0
 8004330:	d1e0      	bne.n	80042f4 <_free_r+0x24>
 8004332:	6818      	ldr	r0, [r3, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	1841      	adds	r1, r0, r1
 8004338:	6011      	str	r1, [r2, #0]
 800433a:	6053      	str	r3, [r2, #4]
 800433c:	e7da      	b.n	80042f4 <_free_r+0x24>
 800433e:	42a0      	cmp	r0, r4
 8004340:	d902      	bls.n	8004348 <_free_r+0x78>
 8004342:	230c      	movs	r3, #12
 8004344:	602b      	str	r3, [r5, #0]
 8004346:	e7d5      	b.n	80042f4 <_free_r+0x24>
 8004348:	6821      	ldr	r1, [r4, #0]
 800434a:	1860      	adds	r0, r4, r1
 800434c:	4283      	cmp	r3, r0
 800434e:	d103      	bne.n	8004358 <_free_r+0x88>
 8004350:	6818      	ldr	r0, [r3, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	1841      	adds	r1, r0, r1
 8004356:	6021      	str	r1, [r4, #0]
 8004358:	6063      	str	r3, [r4, #4]
 800435a:	6054      	str	r4, [r2, #4]
 800435c:	e7ca      	b.n	80042f4 <_free_r+0x24>
 800435e:	46c0      	nop			; (mov r8, r8)
 8004360:	20001168 	.word	0x20001168

08004364 <_init>:
 8004364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004366:	46c0      	nop			; (mov r8, r8)
 8004368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800436a:	bc08      	pop	{r3}
 800436c:	469e      	mov	lr, r3
 800436e:	4770      	bx	lr

08004370 <_fini>:
 8004370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004372:	46c0      	nop			; (mov r8, r8)
 8004374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004376:	bc08      	pop	{r3}
 8004378:	469e      	mov	lr, r3
 800437a:	4770      	bx	lr
