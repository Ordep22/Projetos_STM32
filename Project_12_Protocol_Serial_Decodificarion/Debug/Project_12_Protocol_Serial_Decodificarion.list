
Project_12_Protocol_Serial_Decodificarion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032d8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003398  08003398  00013398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033d0  080033d0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080033d0  080033d0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033d0  080033d0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033d0  080033d0  000133d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033d4  080033d4  000133d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080033d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000070  08003448  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08003448  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a326  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c72  00000000  00000000  0002a3be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d8  00000000  00000000  0002c030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000710  00000000  00000000  0002c808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ba3  00000000  00000000  0002cf18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b4d5  00000000  00000000  00046abb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000920be  00000000  00000000  00051f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e404e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001be4  00000000  00000000  000e40a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003380 	.word	0x08003380

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003380 	.word	0x08003380

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b09e      	sub	sp, #120	; 0x78
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fb03 	bl	8000830 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f867 	bl	80002fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f941 	bl	80004b4 <MX_GPIO_Init>
  MX_CRC_Init();
 8000232:	f000 f8bb 	bl	80003ac <MX_CRC_Init>
  MX_USART2_UART_Init();
 8000236:	f000 f8dd 	bl	80003f4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800023a:	f000 f90b 	bl	8000454 <MX_USART3_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  uint8_t Informacao_Recebida[99]= {0};
 800023e:	003b      	movs	r3, r7
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]
 8000244:	3304      	adds	r3, #4
 8000246:	225f      	movs	r2, #95	; 0x5f
 8000248:	2100      	movs	r1, #0
 800024a:	0018      	movs	r0, r3
 800024c:	f002 ffd4 	bl	80031f8 <memset>

	  unsigned char *Informacao_Tratada;

	  int   Num_elementos = 0;
 8000250:	2300      	movs	r3, #0
 8000252:	677b      	str	r3, [r7, #116]	; 0x74

	  int V_Contro_Info_Tratada = 0;
 8000254:	2300      	movs	r3, #0
 8000256:	673b      	str	r3, [r7, #112]	; 0x70




	  HAL_Delay(100);
 8000258:	2064      	movs	r0, #100	; 0x64
 800025a:	f000 fb4d 	bl	80008f8 <HAL_Delay>

	  HAL_UART_Receive_IT(&huart2, Informacao_Recebida,100);
 800025e:	0039      	movs	r1, r7
 8000260:	4b25      	ldr	r3, [pc, #148]	; (80002f8 <main+0xd8>)
 8000262:	2264      	movs	r2, #100	; 0x64
 8000264:	0018      	movs	r0, r3
 8000266:	f001 fe2a 	bl	8001ebe <HAL_UART_Receive_IT>

	  HAL_Delay(100);
 800026a:	2064      	movs	r0, #100	; 0x64
 800026c:	f000 fb44 	bl	80008f8 <HAL_Delay>


	  for (int y = 0; y <= sizeof(Informacao_Recebida); y++)
 8000270:	2300      	movs	r3, #0
 8000272:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000274:	e00b      	b.n	800028e <main+0x6e>
	  {

		  if (Informacao_Recebida[y] != '\0')
 8000276:	003a      	movs	r2, r7
 8000278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800027a:	18d3      	adds	r3, r2, r3
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d002      	beq.n	8000288 <main+0x68>
		  {

			  Num_elementos++;
 8000282:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000284:	3301      	adds	r3, #1
 8000286:	677b      	str	r3, [r7, #116]	; 0x74
	  for (int y = 0; y <= sizeof(Informacao_Recebida); y++)
 8000288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800028a:	3301      	adds	r3, #1
 800028c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800028e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000290:	2b63      	cmp	r3, #99	; 0x63
 8000292:	d9f0      	bls.n	8000276 <main+0x56>
		  }

	  }


	  Informacao_Tratada = (unsigned char*) malloc(Num_elementos * sizeof(unsigned char));
 8000294:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000296:	0018      	movs	r0, r3
 8000298:	f002 ffa4 	bl	80031e4 <malloc>
 800029c:	0003      	movs	r3, r0
 800029e:	667b      	str	r3, [r7, #100]	; 0x64


	  for (int i = 0; i < Num_elementos; i++)
 80002a0:	2300      	movs	r3, #0
 80002a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80002a4:	e018      	b.n	80002d8 <main+0xb8>
	  {

		  if (Informacao_Recebida[i] != '\0')
 80002a6:	003a      	movs	r2, r7
 80002a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80002aa:	18d3      	adds	r3, r2, r3
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d00a      	beq.n	80002c8 <main+0xa8>
		  {

			  Informacao_Tratada[V_Contro_Info_Tratada] = Informacao_Recebida[i];
 80002b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80002b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80002b6:	18d3      	adds	r3, r2, r3
 80002b8:	0039      	movs	r1, r7
 80002ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80002bc:	188a      	adds	r2, r1, r2
 80002be:	7812      	ldrb	r2, [r2, #0]
 80002c0:	701a      	strb	r2, [r3, #0]

			  V_Contro_Info_Tratada++;
 80002c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80002c4:	3301      	adds	r3, #1
 80002c6:	673b      	str	r3, [r7, #112]	; 0x70
		  }


		  Informacao_Recebida[i] = 0;
 80002c8:	003a      	movs	r2, r7
 80002ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	2200      	movs	r2, #0
 80002d0:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i < Num_elementos; i++)
 80002d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80002d4:	3301      	adds	r3, #1
 80002d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80002d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80002da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80002dc:	429a      	cmp	r2, r3
 80002de:	dbe2      	blt.n	80002a6 <main+0x86>

	  }



	  if (Informacao_Tratada[0] != '\0')
 80002e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d0aa      	beq.n	800023e <main+0x1e>
	  {
		  HAL_UART_Transmit(&huart2, Informacao_Tratada, Num_elementos, 100);
 80002e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80002ea:	b29a      	uxth	r2, r3
 80002ec:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80002ee:	4802      	ldr	r0, [pc, #8]	; (80002f8 <main+0xd8>)
 80002f0:	2364      	movs	r3, #100	; 0x64
 80002f2:	f001 fd3b 	bl	8001d6c <HAL_UART_Transmit>
  {
 80002f6:	e7a2      	b.n	800023e <main+0x1e>
 80002f8:	200000b0 	.word	0x200000b0

080002fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002fc:	b590      	push	{r4, r7, lr}
 80002fe:	b099      	sub	sp, #100	; 0x64
 8000300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000302:	242c      	movs	r4, #44	; 0x2c
 8000304:	193b      	adds	r3, r7, r4
 8000306:	0018      	movs	r0, r3
 8000308:	2334      	movs	r3, #52	; 0x34
 800030a:	001a      	movs	r2, r3
 800030c:	2100      	movs	r1, #0
 800030e:	f002 ff73 	bl	80031f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000312:	231c      	movs	r3, #28
 8000314:	18fb      	adds	r3, r7, r3
 8000316:	0018      	movs	r0, r3
 8000318:	2310      	movs	r3, #16
 800031a:	001a      	movs	r2, r3
 800031c:	2100      	movs	r1, #0
 800031e:	f002 ff6b 	bl	80031f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000322:	003b      	movs	r3, r7
 8000324:	0018      	movs	r0, r3
 8000326:	231c      	movs	r3, #28
 8000328:	001a      	movs	r2, r3
 800032a:	2100      	movs	r1, #0
 800032c:	f002 ff64 	bl	80031f8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000330:	0021      	movs	r1, r4
 8000332:	187b      	adds	r3, r7, r1
 8000334:	2202      	movs	r2, #2
 8000336:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000338:	187b      	adds	r3, r7, r1
 800033a:	2201      	movs	r2, #1
 800033c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800033e:	187b      	adds	r3, r7, r1
 8000340:	2210      	movs	r2, #16
 8000342:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000344:	187b      	adds	r3, r7, r1
 8000346:	2200      	movs	r2, #0
 8000348:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800034a:	187b      	adds	r3, r7, r1
 800034c:	0018      	movs	r0, r3
 800034e:	f000 febb 	bl	80010c8 <HAL_RCC_OscConfig>
 8000352:	1e03      	subs	r3, r0, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000356:	f000 f8f5 	bl	8000544 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800035a:	211c      	movs	r1, #28
 800035c:	187b      	adds	r3, r7, r1
 800035e:	2207      	movs	r2, #7
 8000360:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000362:	187b      	adds	r3, r7, r1
 8000364:	2200      	movs	r2, #0
 8000366:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000368:	187b      	adds	r3, r7, r1
 800036a:	2200      	movs	r2, #0
 800036c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800036e:	187b      	adds	r3, r7, r1
 8000370:	2200      	movs	r2, #0
 8000372:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000374:	187b      	adds	r3, r7, r1
 8000376:	2100      	movs	r1, #0
 8000378:	0018      	movs	r0, r3
 800037a:	f001 fa2b 	bl	80017d4 <HAL_RCC_ClockConfig>
 800037e:	1e03      	subs	r3, r0, #0
 8000380:	d001      	beq.n	8000386 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000382:	f000 f8df 	bl	8000544 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000386:	003b      	movs	r3, r7
 8000388:	2202      	movs	r2, #2
 800038a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800038c:	003b      	movs	r3, r7
 800038e:	2200      	movs	r2, #0
 8000390:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000392:	003b      	movs	r3, r7
 8000394:	0018      	movs	r0, r3
 8000396:	f001 fb97 	bl	8001ac8 <HAL_RCCEx_PeriphCLKConfig>
 800039a:	1e03      	subs	r3, r0, #0
 800039c:	d001      	beq.n	80003a2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800039e:	f000 f8d1 	bl	8000544 <Error_Handler>
  }
}
 80003a2:	46c0      	nop			; (mov r8, r8)
 80003a4:	46bd      	mov	sp, r7
 80003a6:	b019      	add	sp, #100	; 0x64
 80003a8:	bd90      	pop	{r4, r7, pc}
	...

080003ac <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80003b0:	4b0e      	ldr	r3, [pc, #56]	; (80003ec <MX_CRC_Init+0x40>)
 80003b2:	4a0f      	ldr	r2, [pc, #60]	; (80003f0 <MX_CRC_Init+0x44>)
 80003b4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80003b6:	4b0d      	ldr	r3, [pc, #52]	; (80003ec <MX_CRC_Init+0x40>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80003bc:	4b0b      	ldr	r3, [pc, #44]	; (80003ec <MX_CRC_Init+0x40>)
 80003be:	2200      	movs	r2, #0
 80003c0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80003c2:	4b0a      	ldr	r3, [pc, #40]	; (80003ec <MX_CRC_Init+0x40>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80003c8:	4b08      	ldr	r3, [pc, #32]	; (80003ec <MX_CRC_Init+0x40>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80003ce:	4b07      	ldr	r3, [pc, #28]	; (80003ec <MX_CRC_Init+0x40>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80003d4:	4b05      	ldr	r3, [pc, #20]	; (80003ec <MX_CRC_Init+0x40>)
 80003d6:	0018      	movs	r0, r3
 80003d8:	f000 fb90 	bl	8000afc <HAL_CRC_Init>
 80003dc:	1e03      	subs	r3, r0, #0
 80003de:	d001      	beq.n	80003e4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80003e0:	f000 f8b0 	bl	8000544 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80003e4:	46c0      	nop			; (mov r8, r8)
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	2000008c 	.word	0x2000008c
 80003f0:	40023000 	.word	0x40023000

080003f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003f8:	4b14      	ldr	r3, [pc, #80]	; (800044c <MX_USART2_UART_Init+0x58>)
 80003fa:	4a15      	ldr	r2, [pc, #84]	; (8000450 <MX_USART2_UART_Init+0x5c>)
 80003fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80003fe:	4b13      	ldr	r3, [pc, #76]	; (800044c <MX_USART2_UART_Init+0x58>)
 8000400:	2296      	movs	r2, #150	; 0x96
 8000402:	0192      	lsls	r2, r2, #6
 8000404:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000406:	4b11      	ldr	r3, [pc, #68]	; (800044c <MX_USART2_UART_Init+0x58>)
 8000408:	2200      	movs	r2, #0
 800040a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800040c:	4b0f      	ldr	r3, [pc, #60]	; (800044c <MX_USART2_UART_Init+0x58>)
 800040e:	2200      	movs	r2, #0
 8000410:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000412:	4b0e      	ldr	r3, [pc, #56]	; (800044c <MX_USART2_UART_Init+0x58>)
 8000414:	2200      	movs	r2, #0
 8000416:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000418:	4b0c      	ldr	r3, [pc, #48]	; (800044c <MX_USART2_UART_Init+0x58>)
 800041a:	220c      	movs	r2, #12
 800041c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800041e:	4b0b      	ldr	r3, [pc, #44]	; (800044c <MX_USART2_UART_Init+0x58>)
 8000420:	2200      	movs	r2, #0
 8000422:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000424:	4b09      	ldr	r3, [pc, #36]	; (800044c <MX_USART2_UART_Init+0x58>)
 8000426:	2200      	movs	r2, #0
 8000428:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800042a:	4b08      	ldr	r3, [pc, #32]	; (800044c <MX_USART2_UART_Init+0x58>)
 800042c:	2200      	movs	r2, #0
 800042e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000430:	4b06      	ldr	r3, [pc, #24]	; (800044c <MX_USART2_UART_Init+0x58>)
 8000432:	2200      	movs	r2, #0
 8000434:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000436:	4b05      	ldr	r3, [pc, #20]	; (800044c <MX_USART2_UART_Init+0x58>)
 8000438:	0018      	movs	r0, r3
 800043a:	f001 fc43 	bl	8001cc4 <HAL_UART_Init>
 800043e:	1e03      	subs	r3, r0, #0
 8000440:	d001      	beq.n	8000446 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000442:	f000 f87f 	bl	8000544 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	200000b0 	.word	0x200000b0
 8000450:	40004400 	.word	0x40004400

08000454 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000458:	4b14      	ldr	r3, [pc, #80]	; (80004ac <MX_USART3_UART_Init+0x58>)
 800045a:	4a15      	ldr	r2, [pc, #84]	; (80004b0 <MX_USART3_UART_Init+0x5c>)
 800045c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800045e:	4b13      	ldr	r3, [pc, #76]	; (80004ac <MX_USART3_UART_Init+0x58>)
 8000460:	2296      	movs	r2, #150	; 0x96
 8000462:	0192      	lsls	r2, r2, #6
 8000464:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000466:	4b11      	ldr	r3, [pc, #68]	; (80004ac <MX_USART3_UART_Init+0x58>)
 8000468:	2200      	movs	r2, #0
 800046a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800046c:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <MX_USART3_UART_Init+0x58>)
 800046e:	2200      	movs	r2, #0
 8000470:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000472:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <MX_USART3_UART_Init+0x58>)
 8000474:	2200      	movs	r2, #0
 8000476:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000478:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <MX_USART3_UART_Init+0x58>)
 800047a:	220c      	movs	r2, #12
 800047c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800047e:	4b0b      	ldr	r3, [pc, #44]	; (80004ac <MX_USART3_UART_Init+0x58>)
 8000480:	2200      	movs	r2, #0
 8000482:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000484:	4b09      	ldr	r3, [pc, #36]	; (80004ac <MX_USART3_UART_Init+0x58>)
 8000486:	2200      	movs	r2, #0
 8000488:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800048a:	4b08      	ldr	r3, [pc, #32]	; (80004ac <MX_USART3_UART_Init+0x58>)
 800048c:	2200      	movs	r2, #0
 800048e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000490:	4b06      	ldr	r3, [pc, #24]	; (80004ac <MX_USART3_UART_Init+0x58>)
 8000492:	2200      	movs	r2, #0
 8000494:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000496:	4b05      	ldr	r3, [pc, #20]	; (80004ac <MX_USART3_UART_Init+0x58>)
 8000498:	0018      	movs	r0, r3
 800049a:	f001 fc13 	bl	8001cc4 <HAL_UART_Init>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d001      	beq.n	80004a6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80004a2:	f000 f84f 	bl	8000544 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	20000134 	.word	0x20000134
 80004b0:	40004800 	.word	0x40004800

080004b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b4:	b590      	push	{r4, r7, lr}
 80004b6:	b089      	sub	sp, #36	; 0x24
 80004b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ba:	240c      	movs	r4, #12
 80004bc:	193b      	adds	r3, r7, r4
 80004be:	0018      	movs	r0, r3
 80004c0:	2314      	movs	r3, #20
 80004c2:	001a      	movs	r2, r3
 80004c4:	2100      	movs	r1, #0
 80004c6:	f002 fe97 	bl	80031f8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ca:	4b1d      	ldr	r3, [pc, #116]	; (8000540 <MX_GPIO_Init+0x8c>)
 80004cc:	695a      	ldr	r2, [r3, #20]
 80004ce:	4b1c      	ldr	r3, [pc, #112]	; (8000540 <MX_GPIO_Init+0x8c>)
 80004d0:	2180      	movs	r1, #128	; 0x80
 80004d2:	0289      	lsls	r1, r1, #10
 80004d4:	430a      	orrs	r2, r1
 80004d6:	615a      	str	r2, [r3, #20]
 80004d8:	4b19      	ldr	r3, [pc, #100]	; (8000540 <MX_GPIO_Init+0x8c>)
 80004da:	695a      	ldr	r2, [r3, #20]
 80004dc:	2380      	movs	r3, #128	; 0x80
 80004de:	029b      	lsls	r3, r3, #10
 80004e0:	4013      	ands	r3, r2
 80004e2:	60bb      	str	r3, [r7, #8]
 80004e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e6:	4b16      	ldr	r3, [pc, #88]	; (8000540 <MX_GPIO_Init+0x8c>)
 80004e8:	695a      	ldr	r2, [r3, #20]
 80004ea:	4b15      	ldr	r3, [pc, #84]	; (8000540 <MX_GPIO_Init+0x8c>)
 80004ec:	2180      	movs	r1, #128	; 0x80
 80004ee:	0309      	lsls	r1, r1, #12
 80004f0:	430a      	orrs	r2, r1
 80004f2:	615a      	str	r2, [r3, #20]
 80004f4:	4b12      	ldr	r3, [pc, #72]	; (8000540 <MX_GPIO_Init+0x8c>)
 80004f6:	695a      	ldr	r2, [r3, #20]
 80004f8:	2380      	movs	r3, #128	; 0x80
 80004fa:	031b      	lsls	r3, r3, #12
 80004fc:	4013      	ands	r3, r2
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED02_GPIO_Port, LED02_Pin, GPIO_PIN_RESET);
 8000502:	2390      	movs	r3, #144	; 0x90
 8000504:	05db      	lsls	r3, r3, #23
 8000506:	2200      	movs	r2, #0
 8000508:	2120      	movs	r1, #32
 800050a:	0018      	movs	r0, r3
 800050c:	f000 fdbe 	bl	800108c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED02_Pin */
  GPIO_InitStruct.Pin = LED02_Pin;
 8000510:	0021      	movs	r1, r4
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2220      	movs	r2, #32
 8000516:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000518:	187b      	adds	r3, r7, r1
 800051a:	2201      	movs	r2, #1
 800051c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2200      	movs	r2, #0
 8000528:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED02_GPIO_Port, &GPIO_InitStruct);
 800052a:	187a      	adds	r2, r7, r1
 800052c:	2390      	movs	r3, #144	; 0x90
 800052e:	05db      	lsls	r3, r3, #23
 8000530:	0011      	movs	r1, r2
 8000532:	0018      	movs	r0, r3
 8000534:	f000 fc32 	bl	8000d9c <HAL_GPIO_Init>

}
 8000538:	46c0      	nop			; (mov r8, r8)
 800053a:	46bd      	mov	sp, r7
 800053c:	b009      	add	sp, #36	; 0x24
 800053e:	bd90      	pop	{r4, r7, pc}
 8000540:	40021000 	.word	0x40021000

08000544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000548:	b672      	cpsid	i
}
 800054a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800054c:	e7fe      	b.n	800054c <Error_Handler+0x8>
	...

08000550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000556:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <HAL_MspInit+0x44>)
 8000558:	699a      	ldr	r2, [r3, #24]
 800055a:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <HAL_MspInit+0x44>)
 800055c:	2101      	movs	r1, #1
 800055e:	430a      	orrs	r2, r1
 8000560:	619a      	str	r2, [r3, #24]
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <HAL_MspInit+0x44>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	2201      	movs	r2, #1
 8000568:	4013      	ands	r3, r2
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800056e:	4b09      	ldr	r3, [pc, #36]	; (8000594 <HAL_MspInit+0x44>)
 8000570:	69da      	ldr	r2, [r3, #28]
 8000572:	4b08      	ldr	r3, [pc, #32]	; (8000594 <HAL_MspInit+0x44>)
 8000574:	2180      	movs	r1, #128	; 0x80
 8000576:	0549      	lsls	r1, r1, #21
 8000578:	430a      	orrs	r2, r1
 800057a:	61da      	str	r2, [r3, #28]
 800057c:	4b05      	ldr	r3, [pc, #20]	; (8000594 <HAL_MspInit+0x44>)
 800057e:	69da      	ldr	r2, [r3, #28]
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	055b      	lsls	r3, r3, #21
 8000584:	4013      	ands	r3, r2
 8000586:	603b      	str	r3, [r7, #0]
 8000588:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	46bd      	mov	sp, r7
 800058e:	b002      	add	sp, #8
 8000590:	bd80      	pop	{r7, pc}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	40021000 	.word	0x40021000

08000598 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a09      	ldr	r2, [pc, #36]	; (80005cc <HAL_CRC_MspInit+0x34>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d10b      	bne.n	80005c2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80005aa:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <HAL_CRC_MspInit+0x38>)
 80005ac:	695a      	ldr	r2, [r3, #20]
 80005ae:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <HAL_CRC_MspInit+0x38>)
 80005b0:	2140      	movs	r1, #64	; 0x40
 80005b2:	430a      	orrs	r2, r1
 80005b4:	615a      	str	r2, [r3, #20]
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <HAL_CRC_MspInit+0x38>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	2240      	movs	r2, #64	; 0x40
 80005bc:	4013      	ands	r3, r2
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	46bd      	mov	sp, r7
 80005c6:	b004      	add	sp, #16
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	40023000 	.word	0x40023000
 80005d0:	40021000 	.word	0x40021000

080005d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005d4:	b590      	push	{r4, r7, lr}
 80005d6:	b08d      	sub	sp, #52	; 0x34
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005dc:	241c      	movs	r4, #28
 80005de:	193b      	adds	r3, r7, r4
 80005e0:	0018      	movs	r0, r3
 80005e2:	2314      	movs	r3, #20
 80005e4:	001a      	movs	r2, r3
 80005e6:	2100      	movs	r1, #0
 80005e8:	f002 fe06 	bl	80031f8 <memset>
  if(huart->Instance==USART2)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a40      	ldr	r2, [pc, #256]	; (80006f4 <HAL_UART_MspInit+0x120>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d13b      	bne.n	800066e <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005f6:	4b40      	ldr	r3, [pc, #256]	; (80006f8 <HAL_UART_MspInit+0x124>)
 80005f8:	69da      	ldr	r2, [r3, #28]
 80005fa:	4b3f      	ldr	r3, [pc, #252]	; (80006f8 <HAL_UART_MspInit+0x124>)
 80005fc:	2180      	movs	r1, #128	; 0x80
 80005fe:	0289      	lsls	r1, r1, #10
 8000600:	430a      	orrs	r2, r1
 8000602:	61da      	str	r2, [r3, #28]
 8000604:	4b3c      	ldr	r3, [pc, #240]	; (80006f8 <HAL_UART_MspInit+0x124>)
 8000606:	69da      	ldr	r2, [r3, #28]
 8000608:	2380      	movs	r3, #128	; 0x80
 800060a:	029b      	lsls	r3, r3, #10
 800060c:	4013      	ands	r3, r2
 800060e:	61bb      	str	r3, [r7, #24]
 8000610:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	4b39      	ldr	r3, [pc, #228]	; (80006f8 <HAL_UART_MspInit+0x124>)
 8000614:	695a      	ldr	r2, [r3, #20]
 8000616:	4b38      	ldr	r3, [pc, #224]	; (80006f8 <HAL_UART_MspInit+0x124>)
 8000618:	2180      	movs	r1, #128	; 0x80
 800061a:	0289      	lsls	r1, r1, #10
 800061c:	430a      	orrs	r2, r1
 800061e:	615a      	str	r2, [r3, #20]
 8000620:	4b35      	ldr	r3, [pc, #212]	; (80006f8 <HAL_UART_MspInit+0x124>)
 8000622:	695a      	ldr	r2, [r3, #20]
 8000624:	2380      	movs	r3, #128	; 0x80
 8000626:	029b      	lsls	r3, r3, #10
 8000628:	4013      	ands	r3, r2
 800062a:	617b      	str	r3, [r7, #20]
 800062c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = TX_02_Pin|RX_02_Pin;
 800062e:	0021      	movs	r1, r4
 8000630:	187b      	adds	r3, r7, r1
 8000632:	220c      	movs	r2, #12
 8000634:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000636:	187b      	adds	r3, r7, r1
 8000638:	2202      	movs	r2, #2
 800063a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	187b      	adds	r3, r7, r1
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000642:	187b      	adds	r3, r7, r1
 8000644:	2203      	movs	r2, #3
 8000646:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2201      	movs	r2, #1
 800064c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064e:	187a      	adds	r2, r7, r1
 8000650:	2390      	movs	r3, #144	; 0x90
 8000652:	05db      	lsls	r3, r3, #23
 8000654:	0011      	movs	r1, r2
 8000656:	0018      	movs	r0, r3
 8000658:	f000 fba0 	bl	8000d9c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800065c:	2200      	movs	r2, #0
 800065e:	2100      	movs	r1, #0
 8000660:	201c      	movs	r0, #28
 8000662:	f000 fa19 	bl	8000a98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000666:	201c      	movs	r0, #28
 8000668:	f000 fa2b 	bl	8000ac2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800066c:	e03e      	b.n	80006ec <HAL_UART_MspInit+0x118>
  else if(huart->Instance==USART3)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a22      	ldr	r2, [pc, #136]	; (80006fc <HAL_UART_MspInit+0x128>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d139      	bne.n	80006ec <HAL_UART_MspInit+0x118>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <HAL_UART_MspInit+0x124>)
 800067a:	69da      	ldr	r2, [r3, #28]
 800067c:	4b1e      	ldr	r3, [pc, #120]	; (80006f8 <HAL_UART_MspInit+0x124>)
 800067e:	2180      	movs	r1, #128	; 0x80
 8000680:	02c9      	lsls	r1, r1, #11
 8000682:	430a      	orrs	r2, r1
 8000684:	61da      	str	r2, [r3, #28]
 8000686:	4b1c      	ldr	r3, [pc, #112]	; (80006f8 <HAL_UART_MspInit+0x124>)
 8000688:	69da      	ldr	r2, [r3, #28]
 800068a:	2380      	movs	r3, #128	; 0x80
 800068c:	02db      	lsls	r3, r3, #11
 800068e:	4013      	ands	r3, r2
 8000690:	613b      	str	r3, [r7, #16]
 8000692:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000694:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <HAL_UART_MspInit+0x124>)
 8000696:	695a      	ldr	r2, [r3, #20]
 8000698:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <HAL_UART_MspInit+0x124>)
 800069a:	2180      	movs	r1, #128	; 0x80
 800069c:	0309      	lsls	r1, r1, #12
 800069e:	430a      	orrs	r2, r1
 80006a0:	615a      	str	r2, [r3, #20]
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <HAL_UART_MspInit+0x124>)
 80006a4:	695a      	ldr	r2, [r3, #20]
 80006a6:	2380      	movs	r3, #128	; 0x80
 80006a8:	031b      	lsls	r3, r3, #12
 80006aa:	4013      	ands	r3, r2
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TX_03_Pin|RX_03_Pin;
 80006b0:	211c      	movs	r1, #28
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2230      	movs	r2, #48	; 0x30
 80006b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2202      	movs	r2, #2
 80006bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2203      	movs	r2, #3
 80006c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2201      	movs	r2, #1
 80006ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	4a0b      	ldr	r2, [pc, #44]	; (8000700 <HAL_UART_MspInit+0x12c>)
 80006d4:	0019      	movs	r1, r3
 80006d6:	0010      	movs	r0, r2
 80006d8:	f000 fb60 	bl	8000d9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 80006dc:	2200      	movs	r2, #0
 80006de:	2100      	movs	r1, #0
 80006e0:	201d      	movs	r0, #29
 80006e2:	f000 f9d9 	bl	8000a98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 80006e6:	201d      	movs	r0, #29
 80006e8:	f000 f9eb 	bl	8000ac2 <HAL_NVIC_EnableIRQ>
}
 80006ec:	46c0      	nop			; (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	b00d      	add	sp, #52	; 0x34
 80006f2:	bd90      	pop	{r4, r7, pc}
 80006f4:	40004400 	.word	0x40004400
 80006f8:	40021000 	.word	0x40021000
 80006fc:	40004800 	.word	0x40004800
 8000700:	48000800 	.word	0x48000800

08000704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000708:	e7fe      	b.n	8000708 <NMI_Handler+0x4>

0800070a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800070e:	e7fe      	b.n	800070e <HardFault_Handler+0x4>

08000710 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}

0800071a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000728:	f000 f8ca 	bl	80008c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800072c:	46c0      	nop			; (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000738:	4b03      	ldr	r3, [pc, #12]	; (8000748 <USART2_IRQHandler+0x14>)
 800073a:	0018      	movs	r0, r3
 800073c:	f001 fc20 	bl	8001f80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000740:	46c0      	nop			; (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	200000b0 	.word	0x200000b0

0800074c <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000750:	4b03      	ldr	r3, [pc, #12]	; (8000760 <USART3_4_IRQHandler+0x14>)
 8000752:	0018      	movs	r0, r3
 8000754:	f001 fc14 	bl	8001f80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8000758:	46c0      	nop			; (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	20000134 	.word	0x20000134

08000764 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800076c:	4a14      	ldr	r2, [pc, #80]	; (80007c0 <_sbrk+0x5c>)
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <_sbrk+0x60>)
 8000770:	1ad3      	subs	r3, r2, r3
 8000772:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000778:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <_sbrk+0x64>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d102      	bne.n	8000786 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <_sbrk+0x64>)
 8000782:	4a12      	ldr	r2, [pc, #72]	; (80007cc <_sbrk+0x68>)
 8000784:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <_sbrk+0x64>)
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	18d3      	adds	r3, r2, r3
 800078e:	693a      	ldr	r2, [r7, #16]
 8000790:	429a      	cmp	r2, r3
 8000792:	d207      	bcs.n	80007a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000794:	f002 fcfc 	bl	8003190 <__errno>
 8000798:	0003      	movs	r3, r0
 800079a:	220c      	movs	r2, #12
 800079c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800079e:	2301      	movs	r3, #1
 80007a0:	425b      	negs	r3, r3
 80007a2:	e009      	b.n	80007b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007a4:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <_sbrk+0x64>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007aa:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <_sbrk+0x64>)
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	18d2      	adds	r2, r2, r3
 80007b2:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <_sbrk+0x64>)
 80007b4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80007b6:	68fb      	ldr	r3, [r7, #12]
}
 80007b8:	0018      	movs	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	b006      	add	sp, #24
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20004000 	.word	0x20004000
 80007c4:	00000400 	.word	0x00000400
 80007c8:	200001b8 	.word	0x200001b8
 80007cc:	200001d0 	.word	0x200001d0

080007d0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80007d4:	46c0      	nop			; (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007dc:	480d      	ldr	r0, [pc, #52]	; (8000814 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007de:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e0:	480d      	ldr	r0, [pc, #52]	; (8000818 <LoopForever+0x6>)
  ldr r1, =_edata
 80007e2:	490e      	ldr	r1, [pc, #56]	; (800081c <LoopForever+0xa>)
  ldr r2, =_sidata
 80007e4:	4a0e      	ldr	r2, [pc, #56]	; (8000820 <LoopForever+0xe>)
  movs r3, #0
 80007e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e8:	e002      	b.n	80007f0 <LoopCopyDataInit>

080007ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ee:	3304      	adds	r3, #4

080007f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f4:	d3f9      	bcc.n	80007ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007f6:	4a0b      	ldr	r2, [pc, #44]	; (8000824 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007f8:	4c0b      	ldr	r4, [pc, #44]	; (8000828 <LoopForever+0x16>)
  movs r3, #0
 80007fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007fc:	e001      	b.n	8000802 <LoopFillZerobss>

080007fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000800:	3204      	adds	r2, #4

08000802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000804:	d3fb      	bcc.n	80007fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000806:	f7ff ffe3 	bl	80007d0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800080a:	f002 fcc7 	bl	800319c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800080e:	f7ff fd07 	bl	8000220 <main>

08000812 <LoopForever>:

LoopForever:
    b LoopForever
 8000812:	e7fe      	b.n	8000812 <LoopForever>
  ldr   r0, =_estack
 8000814:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800081c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000820:	080033d8 	.word	0x080033d8
  ldr r2, =_sbss
 8000824:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000828:	200001d0 	.word	0x200001d0

0800082c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800082c:	e7fe      	b.n	800082c <ADC1_COMP_IRQHandler>
	...

08000830 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000834:	4b07      	ldr	r3, [pc, #28]	; (8000854 <HAL_Init+0x24>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <HAL_Init+0x24>)
 800083a:	2110      	movs	r1, #16
 800083c:	430a      	orrs	r2, r1
 800083e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000840:	2003      	movs	r0, #3
 8000842:	f000 f809 	bl	8000858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000846:	f7ff fe83 	bl	8000550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800084a:	2300      	movs	r3, #0
}
 800084c:	0018      	movs	r0, r3
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	40022000 	.word	0x40022000

08000858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <HAL_InitTick+0x5c>)
 8000862:	681c      	ldr	r4, [r3, #0]
 8000864:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <HAL_InitTick+0x60>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	0019      	movs	r1, r3
 800086a:	23fa      	movs	r3, #250	; 0xfa
 800086c:	0098      	lsls	r0, r3, #2
 800086e:	f7ff fc4b 	bl	8000108 <__udivsi3>
 8000872:	0003      	movs	r3, r0
 8000874:	0019      	movs	r1, r3
 8000876:	0020      	movs	r0, r4
 8000878:	f7ff fc46 	bl	8000108 <__udivsi3>
 800087c:	0003      	movs	r3, r0
 800087e:	0018      	movs	r0, r3
 8000880:	f000 f92f 	bl	8000ae2 <HAL_SYSTICK_Config>
 8000884:	1e03      	subs	r3, r0, #0
 8000886:	d001      	beq.n	800088c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000888:	2301      	movs	r3, #1
 800088a:	e00f      	b.n	80008ac <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2b03      	cmp	r3, #3
 8000890:	d80b      	bhi.n	80008aa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000892:	6879      	ldr	r1, [r7, #4]
 8000894:	2301      	movs	r3, #1
 8000896:	425b      	negs	r3, r3
 8000898:	2200      	movs	r2, #0
 800089a:	0018      	movs	r0, r3
 800089c:	f000 f8fc 	bl	8000a98 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <HAL_InitTick+0x64>)
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80008a6:	2300      	movs	r3, #0
 80008a8:	e000      	b.n	80008ac <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008aa:	2301      	movs	r3, #1
}
 80008ac:	0018      	movs	r0, r3
 80008ae:	46bd      	mov	sp, r7
 80008b0:	b003      	add	sp, #12
 80008b2:	bd90      	pop	{r4, r7, pc}
 80008b4:	20000000 	.word	0x20000000
 80008b8:	20000008 	.word	0x20000008
 80008bc:	20000004 	.word	0x20000004

080008c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c4:	4b05      	ldr	r3, [pc, #20]	; (80008dc <HAL_IncTick+0x1c>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	001a      	movs	r2, r3
 80008ca:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <HAL_IncTick+0x20>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	18d2      	adds	r2, r2, r3
 80008d0:	4b03      	ldr	r3, [pc, #12]	; (80008e0 <HAL_IncTick+0x20>)
 80008d2:	601a      	str	r2, [r3, #0]
}
 80008d4:	46c0      	nop			; (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	20000008 	.word	0x20000008
 80008e0:	200001bc 	.word	0x200001bc

080008e4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  return uwTick;
 80008e8:	4b02      	ldr	r3, [pc, #8]	; (80008f4 <HAL_GetTick+0x10>)
 80008ea:	681b      	ldr	r3, [r3, #0]
}
 80008ec:	0018      	movs	r0, r3
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	200001bc 	.word	0x200001bc

080008f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000900:	f7ff fff0 	bl	80008e4 <HAL_GetTick>
 8000904:	0003      	movs	r3, r0
 8000906:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	3301      	adds	r3, #1
 8000910:	d005      	beq.n	800091e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000912:	4b0a      	ldr	r3, [pc, #40]	; (800093c <HAL_Delay+0x44>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	001a      	movs	r2, r3
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	189b      	adds	r3, r3, r2
 800091c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	f7ff ffe0 	bl	80008e4 <HAL_GetTick>
 8000924:	0002      	movs	r2, r0
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	68fa      	ldr	r2, [r7, #12]
 800092c:	429a      	cmp	r2, r3
 800092e:	d8f7      	bhi.n	8000920 <HAL_Delay+0x28>
  {
  }
}
 8000930:	46c0      	nop			; (mov r8, r8)
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	46bd      	mov	sp, r7
 8000936:	b004      	add	sp, #16
 8000938:	bd80      	pop	{r7, pc}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	20000008 	.word	0x20000008

08000940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	0002      	movs	r2, r0
 8000948:	1dfb      	adds	r3, r7, #7
 800094a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800094c:	1dfb      	adds	r3, r7, #7
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b7f      	cmp	r3, #127	; 0x7f
 8000952:	d809      	bhi.n	8000968 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000954:	1dfb      	adds	r3, r7, #7
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	001a      	movs	r2, r3
 800095a:	231f      	movs	r3, #31
 800095c:	401a      	ands	r2, r3
 800095e:	4b04      	ldr	r3, [pc, #16]	; (8000970 <__NVIC_EnableIRQ+0x30>)
 8000960:	2101      	movs	r1, #1
 8000962:	4091      	lsls	r1, r2
 8000964:	000a      	movs	r2, r1
 8000966:	601a      	str	r2, [r3, #0]
  }
}
 8000968:	46c0      	nop			; (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	b002      	add	sp, #8
 800096e:	bd80      	pop	{r7, pc}
 8000970:	e000e100 	.word	0xe000e100

08000974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000974:	b590      	push	{r4, r7, lr}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	0002      	movs	r2, r0
 800097c:	6039      	str	r1, [r7, #0]
 800097e:	1dfb      	adds	r3, r7, #7
 8000980:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000982:	1dfb      	adds	r3, r7, #7
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b7f      	cmp	r3, #127	; 0x7f
 8000988:	d828      	bhi.n	80009dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800098a:	4a2f      	ldr	r2, [pc, #188]	; (8000a48 <__NVIC_SetPriority+0xd4>)
 800098c:	1dfb      	adds	r3, r7, #7
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	b25b      	sxtb	r3, r3
 8000992:	089b      	lsrs	r3, r3, #2
 8000994:	33c0      	adds	r3, #192	; 0xc0
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	589b      	ldr	r3, [r3, r2]
 800099a:	1dfa      	adds	r2, r7, #7
 800099c:	7812      	ldrb	r2, [r2, #0]
 800099e:	0011      	movs	r1, r2
 80009a0:	2203      	movs	r2, #3
 80009a2:	400a      	ands	r2, r1
 80009a4:	00d2      	lsls	r2, r2, #3
 80009a6:	21ff      	movs	r1, #255	; 0xff
 80009a8:	4091      	lsls	r1, r2
 80009aa:	000a      	movs	r2, r1
 80009ac:	43d2      	mvns	r2, r2
 80009ae:	401a      	ands	r2, r3
 80009b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	019b      	lsls	r3, r3, #6
 80009b6:	22ff      	movs	r2, #255	; 0xff
 80009b8:	401a      	ands	r2, r3
 80009ba:	1dfb      	adds	r3, r7, #7
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	0018      	movs	r0, r3
 80009c0:	2303      	movs	r3, #3
 80009c2:	4003      	ands	r3, r0
 80009c4:	00db      	lsls	r3, r3, #3
 80009c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009c8:	481f      	ldr	r0, [pc, #124]	; (8000a48 <__NVIC_SetPriority+0xd4>)
 80009ca:	1dfb      	adds	r3, r7, #7
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b25b      	sxtb	r3, r3
 80009d0:	089b      	lsrs	r3, r3, #2
 80009d2:	430a      	orrs	r2, r1
 80009d4:	33c0      	adds	r3, #192	; 0xc0
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009da:	e031      	b.n	8000a40 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009dc:	4a1b      	ldr	r2, [pc, #108]	; (8000a4c <__NVIC_SetPriority+0xd8>)
 80009de:	1dfb      	adds	r3, r7, #7
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	0019      	movs	r1, r3
 80009e4:	230f      	movs	r3, #15
 80009e6:	400b      	ands	r3, r1
 80009e8:	3b08      	subs	r3, #8
 80009ea:	089b      	lsrs	r3, r3, #2
 80009ec:	3306      	adds	r3, #6
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	18d3      	adds	r3, r2, r3
 80009f2:	3304      	adds	r3, #4
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	1dfa      	adds	r2, r7, #7
 80009f8:	7812      	ldrb	r2, [r2, #0]
 80009fa:	0011      	movs	r1, r2
 80009fc:	2203      	movs	r2, #3
 80009fe:	400a      	ands	r2, r1
 8000a00:	00d2      	lsls	r2, r2, #3
 8000a02:	21ff      	movs	r1, #255	; 0xff
 8000a04:	4091      	lsls	r1, r2
 8000a06:	000a      	movs	r2, r1
 8000a08:	43d2      	mvns	r2, r2
 8000a0a:	401a      	ands	r2, r3
 8000a0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	019b      	lsls	r3, r3, #6
 8000a12:	22ff      	movs	r2, #255	; 0xff
 8000a14:	401a      	ands	r2, r3
 8000a16:	1dfb      	adds	r3, r7, #7
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	4003      	ands	r3, r0
 8000a20:	00db      	lsls	r3, r3, #3
 8000a22:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a24:	4809      	ldr	r0, [pc, #36]	; (8000a4c <__NVIC_SetPriority+0xd8>)
 8000a26:	1dfb      	adds	r3, r7, #7
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	001c      	movs	r4, r3
 8000a2c:	230f      	movs	r3, #15
 8000a2e:	4023      	ands	r3, r4
 8000a30:	3b08      	subs	r3, #8
 8000a32:	089b      	lsrs	r3, r3, #2
 8000a34:	430a      	orrs	r2, r1
 8000a36:	3306      	adds	r3, #6
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	18c3      	adds	r3, r0, r3
 8000a3c:	3304      	adds	r3, #4
 8000a3e:	601a      	str	r2, [r3, #0]
}
 8000a40:	46c0      	nop			; (mov r8, r8)
 8000a42:	46bd      	mov	sp, r7
 8000a44:	b003      	add	sp, #12
 8000a46:	bd90      	pop	{r4, r7, pc}
 8000a48:	e000e100 	.word	0xe000e100
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	1e5a      	subs	r2, r3, #1
 8000a5c:	2380      	movs	r3, #128	; 0x80
 8000a5e:	045b      	lsls	r3, r3, #17
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d301      	bcc.n	8000a68 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a64:	2301      	movs	r3, #1
 8000a66:	e010      	b.n	8000a8a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a68:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <SysTick_Config+0x44>)
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	3a01      	subs	r2, #1
 8000a6e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a70:	2301      	movs	r3, #1
 8000a72:	425b      	negs	r3, r3
 8000a74:	2103      	movs	r1, #3
 8000a76:	0018      	movs	r0, r3
 8000a78:	f7ff ff7c 	bl	8000974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a7c:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <SysTick_Config+0x44>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a82:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <SysTick_Config+0x44>)
 8000a84:	2207      	movs	r2, #7
 8000a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	b002      	add	sp, #8
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	e000e010 	.word	0xe000e010

08000a98 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60b9      	str	r1, [r7, #8]
 8000aa0:	607a      	str	r2, [r7, #4]
 8000aa2:	210f      	movs	r1, #15
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	1c02      	adds	r2, r0, #0
 8000aa8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	b25b      	sxtb	r3, r3
 8000ab2:	0011      	movs	r1, r2
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f7ff ff5d 	bl	8000974 <__NVIC_SetPriority>
}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	46bd      	mov	sp, r7
 8000abe:	b004      	add	sp, #16
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b082      	sub	sp, #8
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	0002      	movs	r2, r0
 8000aca:	1dfb      	adds	r3, r7, #7
 8000acc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ace:	1dfb      	adds	r3, r7, #7
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	b25b      	sxtb	r3, r3
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f7ff ff33 	bl	8000940 <__NVIC_EnableIRQ>
}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	46bd      	mov	sp, r7
 8000ade:	b002      	add	sp, #8
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b082      	sub	sp, #8
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	0018      	movs	r0, r3
 8000aee:	f7ff ffaf 	bl	8000a50 <SysTick_Config>
 8000af2:	0003      	movs	r3, r0
}
 8000af4:	0018      	movs	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	b002      	add	sp, #8
 8000afa:	bd80      	pop	{r7, pc}

08000afc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d101      	bne.n	8000b0e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e056      	b.n	8000bbc <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	7f5b      	ldrb	r3, [r3, #29]
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d106      	bne.n	8000b26 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	0018      	movs	r0, r3
 8000b22:	f7ff fd39 	bl	8000598 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2202      	movs	r2, #2
 8000b2a:	775a      	strb	r2, [r3, #29]

#if defined(CRC_POL_POL)
  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	791b      	ldrb	r3, [r3, #4]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d10c      	bne.n	8000b4e <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a22      	ldr	r2, [pc, #136]	; (8000bc4 <HAL_CRC_Init+0xc8>)
 8000b3a:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	689a      	ldr	r2, [r3, #8]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2118      	movs	r1, #24
 8000b48:	438a      	bics	r2, r1
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	e00b      	b.n	8000b66 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6899      	ldr	r1, [r3, #8]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	68da      	ldr	r2, [r3, #12]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f000 f835 	bl	8000bc8 <HAL_CRCEx_Polynomial_Set>
 8000b5e:	1e03      	subs	r3, r0, #0
 8000b60:	d001      	beq.n	8000b66 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e02a      	b.n	8000bbc <HAL_CRC_Init+0xc0>
#endif /* CRC_POL_POL */

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	795b      	ldrb	r3, [r3, #5]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d105      	bne.n	8000b7a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2201      	movs	r2, #1
 8000b74:	4252      	negs	r2, r2
 8000b76:	611a      	str	r2, [r3, #16]
 8000b78:	e004      	b.n	8000b84 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	6912      	ldr	r2, [r2, #16]
 8000b82:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	2260      	movs	r2, #96	; 0x60
 8000b8c:	4393      	bics	r3, r2
 8000b8e:	0019      	movs	r1, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	695a      	ldr	r2, [r3, #20]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	430a      	orrs	r2, r1
 8000b9a:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	2280      	movs	r2, #128	; 0x80
 8000ba4:	4393      	bics	r3, r2
 8000ba6:	0019      	movs	r1, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	699a      	ldr	r2, [r3, #24]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000bba:	2300      	movs	r3, #0
}
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	b002      	add	sp, #8
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	04c11db7 	.word	0x04c11db7

08000bc8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bd4:	2317      	movs	r3, #23
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	2200      	movs	r2, #0
 8000bda:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000bdc:	231f      	movs	r3, #31
 8000bde:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000be0:	46c0      	nop			; (mov r8, r8)
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	1e5a      	subs	r2, r3, #1
 8000be6:	613a      	str	r2, [r7, #16]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d008      	beq.n	8000bfe <HAL_CRCEx_Polynomial_Set+0x36>
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	221f      	movs	r2, #31
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	40da      	lsrs	r2, r3
 8000bf6:	0013      	movs	r3, r2
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	d0f1      	beq.n	8000be2 <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2b18      	cmp	r3, #24
 8000c02:	d00f      	beq.n	8000c24 <HAL_CRCEx_Polynomial_Set+0x5c>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b18      	cmp	r3, #24
 8000c08:	d824      	bhi.n	8000c54 <HAL_CRCEx_Polynomial_Set+0x8c>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2b10      	cmp	r3, #16
 8000c0e:	d011      	beq.n	8000c34 <HAL_CRCEx_Polynomial_Set+0x6c>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b10      	cmp	r3, #16
 8000c14:	d81e      	bhi.n	8000c54 <HAL_CRCEx_Polynomial_Set+0x8c>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d020      	beq.n	8000c5e <HAL_CRCEx_Polynomial_Set+0x96>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b08      	cmp	r3, #8
 8000c20:	d010      	beq.n	8000c44 <HAL_CRCEx_Polynomial_Set+0x7c>
 8000c22:	e017      	b.n	8000c54 <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	2b06      	cmp	r3, #6
 8000c28:	d91b      	bls.n	8000c62 <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 8000c2a:	2317      	movs	r3, #23
 8000c2c:	18fb      	adds	r3, r7, r3
 8000c2e:	2201      	movs	r2, #1
 8000c30:	701a      	strb	r2, [r3, #0]
      }
      break;
 8000c32:	e016      	b.n	8000c62 <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	2b07      	cmp	r3, #7
 8000c38:	d915      	bls.n	8000c66 <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 8000c3a:	2317      	movs	r3, #23
 8000c3c:	18fb      	adds	r3, r7, r3
 8000c3e:	2201      	movs	r2, #1
 8000c40:	701a      	strb	r2, [r3, #0]
      }
      break;
 8000c42:	e010      	b.n	8000c66 <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	2b0f      	cmp	r3, #15
 8000c48:	d90f      	bls.n	8000c6a <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 8000c4a:	2317      	movs	r3, #23
 8000c4c:	18fb      	adds	r3, r7, r3
 8000c4e:	2201      	movs	r2, #1
 8000c50:	701a      	strb	r2, [r3, #0]
      }
      break;
 8000c52:	e00a      	b.n	8000c6a <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8000c54:	2317      	movs	r3, #23
 8000c56:	18fb      	adds	r3, r7, r3
 8000c58:	2201      	movs	r2, #1
 8000c5a:	701a      	strb	r2, [r3, #0]
      break;
 8000c5c:	e006      	b.n	8000c6c <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	e004      	b.n	8000c6c <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	e002      	b.n	8000c6c <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	e000      	b.n	8000c6c <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8000c6a:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 8000c6c:	2317      	movs	r3, #23
 8000c6e:	18fb      	adds	r3, r7, r3
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d10e      	bne.n	8000c94 <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	2218      	movs	r2, #24
 8000c86:	4393      	bics	r3, r2
 8000c88:	0019      	movs	r1, r3
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	430a      	orrs	r2, r1
 8000c92:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000c94:	2317      	movs	r3, #23
 8000c96:	18fb      	adds	r3, r7, r3
 8000c98:	781b      	ldrb	r3, [r3, #0]
}
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	b006      	add	sp, #24
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2221      	movs	r2, #33	; 0x21
 8000cae:	5c9b      	ldrb	r3, [r3, r2]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d008      	beq.n	8000cc8 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2204      	movs	r2, #4
 8000cba:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2220      	movs	r2, #32
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	e020      	b.n	8000d0a <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	210e      	movs	r1, #14
 8000cd4:	438a      	bics	r2, r1
 8000cd6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	438a      	bics	r2, r1
 8000ce6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	4091      	lsls	r1, r2
 8000cf4:	000a      	movs	r2, r1
 8000cf6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2221      	movs	r2, #33	; 0x21
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2220      	movs	r2, #32
 8000d04:	2100      	movs	r1, #0
 8000d06:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b002      	add	sp, #8
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b084      	sub	sp, #16
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d1a:	210f      	movs	r1, #15
 8000d1c:	187b      	adds	r3, r7, r1
 8000d1e:	2200      	movs	r2, #0
 8000d20:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2221      	movs	r2, #33	; 0x21
 8000d26:	5c9b      	ldrb	r3, [r3, r2]
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d006      	beq.n	8000d3c <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2204      	movs	r2, #4
 8000d32:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	2201      	movs	r2, #1
 8000d38:	701a      	strb	r2, [r3, #0]
 8000d3a:	e028      	b.n	8000d8e <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	210e      	movs	r1, #14
 8000d48:	438a      	bics	r2, r1
 8000d4a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2101      	movs	r1, #1
 8000d58:	438a      	bics	r2, r1
 8000d5a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d64:	2101      	movs	r1, #1
 8000d66:	4091      	lsls	r1, r2
 8000d68:	000a      	movs	r2, r1
 8000d6a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2221      	movs	r2, #33	; 0x21
 8000d70:	2101      	movs	r1, #1
 8000d72:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2220      	movs	r2, #32
 8000d78:	2100      	movs	r1, #0
 8000d7a:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d004      	beq.n	8000d8e <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	0010      	movs	r0, r2
 8000d8c:	4798      	blx	r3
    } 
  }
  return status;
 8000d8e:	230f      	movs	r3, #15
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	781b      	ldrb	r3, [r3, #0]
}
 8000d94:	0018      	movs	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	b004      	add	sp, #16
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000daa:	e155      	b.n	8001058 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2101      	movs	r1, #1
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	4091      	lsls	r1, r2
 8000db6:	000a      	movs	r2, r1
 8000db8:	4013      	ands	r3, r2
 8000dba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d100      	bne.n	8000dc4 <HAL_GPIO_Init+0x28>
 8000dc2:	e146      	b.n	8001052 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	2203      	movs	r2, #3
 8000dca:	4013      	ands	r3, r2
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d005      	beq.n	8000ddc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d130      	bne.n	8000e3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	2203      	movs	r2, #3
 8000de8:	409a      	lsls	r2, r3
 8000dea:	0013      	movs	r3, r2
 8000dec:	43da      	mvns	r2, r3
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	68da      	ldr	r2, [r3, #12]
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	409a      	lsls	r2, r3
 8000dfe:	0013      	movs	r3, r2
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e12:	2201      	movs	r2, #1
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	409a      	lsls	r2, r3
 8000e18:	0013      	movs	r3, r2
 8000e1a:	43da      	mvns	r2, r3
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	091b      	lsrs	r3, r3, #4
 8000e28:	2201      	movs	r2, #1
 8000e2a:	401a      	ands	r2, r3
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	409a      	lsls	r2, r3
 8000e30:	0013      	movs	r3, r2
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	2203      	movs	r2, #3
 8000e44:	4013      	ands	r3, r2
 8000e46:	2b03      	cmp	r3, #3
 8000e48:	d017      	beq.n	8000e7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	2203      	movs	r2, #3
 8000e56:	409a      	lsls	r2, r3
 8000e58:	0013      	movs	r3, r2
 8000e5a:	43da      	mvns	r2, r3
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	689a      	ldr	r2, [r3, #8]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	409a      	lsls	r2, r3
 8000e6c:	0013      	movs	r3, r2
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	2203      	movs	r2, #3
 8000e80:	4013      	ands	r3, r2
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d123      	bne.n	8000ece <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	08da      	lsrs	r2, r3, #3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	3208      	adds	r2, #8
 8000e8e:	0092      	lsls	r2, r2, #2
 8000e90:	58d3      	ldr	r3, [r2, r3]
 8000e92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	2207      	movs	r2, #7
 8000e98:	4013      	ands	r3, r2
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	220f      	movs	r2, #15
 8000e9e:	409a      	lsls	r2, r3
 8000ea0:	0013      	movs	r3, r2
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	691a      	ldr	r2, [r3, #16]
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	2107      	movs	r1, #7
 8000eb2:	400b      	ands	r3, r1
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	409a      	lsls	r2, r3
 8000eb8:	0013      	movs	r3, r2
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	08da      	lsrs	r2, r3, #3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3208      	adds	r2, #8
 8000ec8:	0092      	lsls	r2, r2, #2
 8000eca:	6939      	ldr	r1, [r7, #16]
 8000ecc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	2203      	movs	r2, #3
 8000eda:	409a      	lsls	r2, r3
 8000edc:	0013      	movs	r3, r2
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	2203      	movs	r2, #3
 8000eec:	401a      	ands	r2, r3
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	409a      	lsls	r2, r3
 8000ef4:	0013      	movs	r3, r2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	23c0      	movs	r3, #192	; 0xc0
 8000f08:	029b      	lsls	r3, r3, #10
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	d100      	bne.n	8000f10 <HAL_GPIO_Init+0x174>
 8000f0e:	e0a0      	b.n	8001052 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f10:	4b57      	ldr	r3, [pc, #348]	; (8001070 <HAL_GPIO_Init+0x2d4>)
 8000f12:	699a      	ldr	r2, [r3, #24]
 8000f14:	4b56      	ldr	r3, [pc, #344]	; (8001070 <HAL_GPIO_Init+0x2d4>)
 8000f16:	2101      	movs	r1, #1
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	619a      	str	r2, [r3, #24]
 8000f1c:	4b54      	ldr	r3, [pc, #336]	; (8001070 <HAL_GPIO_Init+0x2d4>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	2201      	movs	r2, #1
 8000f22:	4013      	ands	r3, r2
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f28:	4a52      	ldr	r2, [pc, #328]	; (8001074 <HAL_GPIO_Init+0x2d8>)
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	089b      	lsrs	r3, r3, #2
 8000f2e:	3302      	adds	r3, #2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	589b      	ldr	r3, [r3, r2]
 8000f34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	2203      	movs	r2, #3
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	220f      	movs	r2, #15
 8000f40:	409a      	lsls	r2, r3
 8000f42:	0013      	movs	r3, r2
 8000f44:	43da      	mvns	r2, r3
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	2390      	movs	r3, #144	; 0x90
 8000f50:	05db      	lsls	r3, r3, #23
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d019      	beq.n	8000f8a <HAL_GPIO_Init+0x1ee>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a47      	ldr	r2, [pc, #284]	; (8001078 <HAL_GPIO_Init+0x2dc>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d013      	beq.n	8000f86 <HAL_GPIO_Init+0x1ea>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a46      	ldr	r2, [pc, #280]	; (800107c <HAL_GPIO_Init+0x2e0>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d00d      	beq.n	8000f82 <HAL_GPIO_Init+0x1e6>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a45      	ldr	r2, [pc, #276]	; (8001080 <HAL_GPIO_Init+0x2e4>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d007      	beq.n	8000f7e <HAL_GPIO_Init+0x1e2>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a44      	ldr	r2, [pc, #272]	; (8001084 <HAL_GPIO_Init+0x2e8>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d101      	bne.n	8000f7a <HAL_GPIO_Init+0x1de>
 8000f76:	2304      	movs	r3, #4
 8000f78:	e008      	b.n	8000f8c <HAL_GPIO_Init+0x1f0>
 8000f7a:	2305      	movs	r3, #5
 8000f7c:	e006      	b.n	8000f8c <HAL_GPIO_Init+0x1f0>
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e004      	b.n	8000f8c <HAL_GPIO_Init+0x1f0>
 8000f82:	2302      	movs	r3, #2
 8000f84:	e002      	b.n	8000f8c <HAL_GPIO_Init+0x1f0>
 8000f86:	2301      	movs	r3, #1
 8000f88:	e000      	b.n	8000f8c <HAL_GPIO_Init+0x1f0>
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	2103      	movs	r1, #3
 8000f90:	400a      	ands	r2, r1
 8000f92:	0092      	lsls	r2, r2, #2
 8000f94:	4093      	lsls	r3, r2
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f9c:	4935      	ldr	r1, [pc, #212]	; (8001074 <HAL_GPIO_Init+0x2d8>)
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	089b      	lsrs	r3, r3, #2
 8000fa2:	3302      	adds	r3, #2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000faa:	4b37      	ldr	r3, [pc, #220]	; (8001088 <HAL_GPIO_Init+0x2ec>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	43da      	mvns	r2, r3
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	2380      	movs	r3, #128	; 0x80
 8000fc0:	025b      	lsls	r3, r3, #9
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fce:	4b2e      	ldr	r3, [pc, #184]	; (8001088 <HAL_GPIO_Init+0x2ec>)
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000fd4:	4b2c      	ldr	r3, [pc, #176]	; (8001088 <HAL_GPIO_Init+0x2ec>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	43da      	mvns	r2, r3
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685a      	ldr	r2, [r3, #4]
 8000fe8:	2380      	movs	r3, #128	; 0x80
 8000fea:	029b      	lsls	r3, r3, #10
 8000fec:	4013      	ands	r3, r2
 8000fee:	d003      	beq.n	8000ff8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ff8:	4b23      	ldr	r3, [pc, #140]	; (8001088 <HAL_GPIO_Init+0x2ec>)
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ffe:	4b22      	ldr	r3, [pc, #136]	; (8001088 <HAL_GPIO_Init+0x2ec>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	43da      	mvns	r2, r3
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	4013      	ands	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685a      	ldr	r2, [r3, #4]
 8001012:	2380      	movs	r3, #128	; 0x80
 8001014:	035b      	lsls	r3, r3, #13
 8001016:	4013      	ands	r3, r2
 8001018:	d003      	beq.n	8001022 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4313      	orrs	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001022:	4b19      	ldr	r3, [pc, #100]	; (8001088 <HAL_GPIO_Init+0x2ec>)
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001028:	4b17      	ldr	r3, [pc, #92]	; (8001088 <HAL_GPIO_Init+0x2ec>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	43da      	mvns	r2, r3
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685a      	ldr	r2, [r3, #4]
 800103c:	2380      	movs	r3, #128	; 0x80
 800103e:	039b      	lsls	r3, r3, #14
 8001040:	4013      	ands	r3, r2
 8001042:	d003      	beq.n	800104c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800104c:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <HAL_GPIO_Init+0x2ec>)
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	3301      	adds	r3, #1
 8001056:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	40da      	lsrs	r2, r3
 8001060:	1e13      	subs	r3, r2, #0
 8001062:	d000      	beq.n	8001066 <HAL_GPIO_Init+0x2ca>
 8001064:	e6a2      	b.n	8000dac <HAL_GPIO_Init+0x10>
  } 
}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	46c0      	nop			; (mov r8, r8)
 800106a:	46bd      	mov	sp, r7
 800106c:	b006      	add	sp, #24
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40021000 	.word	0x40021000
 8001074:	40010000 	.word	0x40010000
 8001078:	48000400 	.word	0x48000400
 800107c:	48000800 	.word	0x48000800
 8001080:	48000c00 	.word	0x48000c00
 8001084:	48001000 	.word	0x48001000
 8001088:	40010400 	.word	0x40010400

0800108c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	0008      	movs	r0, r1
 8001096:	0011      	movs	r1, r2
 8001098:	1cbb      	adds	r3, r7, #2
 800109a:	1c02      	adds	r2, r0, #0
 800109c:	801a      	strh	r2, [r3, #0]
 800109e:	1c7b      	adds	r3, r7, #1
 80010a0:	1c0a      	adds	r2, r1, #0
 80010a2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010a4:	1c7b      	adds	r3, r7, #1
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d004      	beq.n	80010b6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010ac:	1cbb      	adds	r3, r7, #2
 80010ae:	881a      	ldrh	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010b4:	e003      	b.n	80010be <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010b6:	1cbb      	adds	r3, r7, #2
 80010b8:	881a      	ldrh	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	46bd      	mov	sp, r7
 80010c2:	b002      	add	sp, #8
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d102      	bne.n	80010dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	f000 fb76 	bl	80017c8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2201      	movs	r2, #1
 80010e2:	4013      	ands	r3, r2
 80010e4:	d100      	bne.n	80010e8 <HAL_RCC_OscConfig+0x20>
 80010e6:	e08e      	b.n	8001206 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010e8:	4bc5      	ldr	r3, [pc, #788]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	220c      	movs	r2, #12
 80010ee:	4013      	ands	r3, r2
 80010f0:	2b04      	cmp	r3, #4
 80010f2:	d00e      	beq.n	8001112 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010f4:	4bc2      	ldr	r3, [pc, #776]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	220c      	movs	r2, #12
 80010fa:	4013      	ands	r3, r2
 80010fc:	2b08      	cmp	r3, #8
 80010fe:	d117      	bne.n	8001130 <HAL_RCC_OscConfig+0x68>
 8001100:	4bbf      	ldr	r3, [pc, #764]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	23c0      	movs	r3, #192	; 0xc0
 8001106:	025b      	lsls	r3, r3, #9
 8001108:	401a      	ands	r2, r3
 800110a:	2380      	movs	r3, #128	; 0x80
 800110c:	025b      	lsls	r3, r3, #9
 800110e:	429a      	cmp	r2, r3
 8001110:	d10e      	bne.n	8001130 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001112:	4bbb      	ldr	r3, [pc, #748]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	029b      	lsls	r3, r3, #10
 800111a:	4013      	ands	r3, r2
 800111c:	d100      	bne.n	8001120 <HAL_RCC_OscConfig+0x58>
 800111e:	e071      	b.n	8001204 <HAL_RCC_OscConfig+0x13c>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d000      	beq.n	800112a <HAL_RCC_OscConfig+0x62>
 8001128:	e06c      	b.n	8001204 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	f000 fb4c 	bl	80017c8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d107      	bne.n	8001148 <HAL_RCC_OscConfig+0x80>
 8001138:	4bb1      	ldr	r3, [pc, #708]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4bb0      	ldr	r3, [pc, #704]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 800113e:	2180      	movs	r1, #128	; 0x80
 8001140:	0249      	lsls	r1, r1, #9
 8001142:	430a      	orrs	r2, r1
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	e02f      	b.n	80011a8 <HAL_RCC_OscConfig+0xe0>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d10c      	bne.n	800116a <HAL_RCC_OscConfig+0xa2>
 8001150:	4bab      	ldr	r3, [pc, #684]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4baa      	ldr	r3, [pc, #680]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001156:	49ab      	ldr	r1, [pc, #684]	; (8001404 <HAL_RCC_OscConfig+0x33c>)
 8001158:	400a      	ands	r2, r1
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	4ba8      	ldr	r3, [pc, #672]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4ba7      	ldr	r3, [pc, #668]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001162:	49a9      	ldr	r1, [pc, #676]	; (8001408 <HAL_RCC_OscConfig+0x340>)
 8001164:	400a      	ands	r2, r1
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	e01e      	b.n	80011a8 <HAL_RCC_OscConfig+0xe0>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	2b05      	cmp	r3, #5
 8001170:	d10e      	bne.n	8001190 <HAL_RCC_OscConfig+0xc8>
 8001172:	4ba3      	ldr	r3, [pc, #652]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	4ba2      	ldr	r3, [pc, #648]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001178:	2180      	movs	r1, #128	; 0x80
 800117a:	02c9      	lsls	r1, r1, #11
 800117c:	430a      	orrs	r2, r1
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	4b9f      	ldr	r3, [pc, #636]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b9e      	ldr	r3, [pc, #632]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001186:	2180      	movs	r1, #128	; 0x80
 8001188:	0249      	lsls	r1, r1, #9
 800118a:	430a      	orrs	r2, r1
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	e00b      	b.n	80011a8 <HAL_RCC_OscConfig+0xe0>
 8001190:	4b9b      	ldr	r3, [pc, #620]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4b9a      	ldr	r3, [pc, #616]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001196:	499b      	ldr	r1, [pc, #620]	; (8001404 <HAL_RCC_OscConfig+0x33c>)
 8001198:	400a      	ands	r2, r1
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	4b98      	ldr	r3, [pc, #608]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b97      	ldr	r3, [pc, #604]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 80011a2:	4999      	ldr	r1, [pc, #612]	; (8001408 <HAL_RCC_OscConfig+0x340>)
 80011a4:	400a      	ands	r2, r1
 80011a6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d014      	beq.n	80011da <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b0:	f7ff fb98 	bl	80008e4 <HAL_GetTick>
 80011b4:	0003      	movs	r3, r0
 80011b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b8:	e008      	b.n	80011cc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ba:	f7ff fb93 	bl	80008e4 <HAL_GetTick>
 80011be:	0002      	movs	r2, r0
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b64      	cmp	r3, #100	; 0x64
 80011c6:	d901      	bls.n	80011cc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e2fd      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011cc:	4b8c      	ldr	r3, [pc, #560]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	029b      	lsls	r3, r3, #10
 80011d4:	4013      	ands	r3, r2
 80011d6:	d0f0      	beq.n	80011ba <HAL_RCC_OscConfig+0xf2>
 80011d8:	e015      	b.n	8001206 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011da:	f7ff fb83 	bl	80008e4 <HAL_GetTick>
 80011de:	0003      	movs	r3, r0
 80011e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011e4:	f7ff fb7e 	bl	80008e4 <HAL_GetTick>
 80011e8:	0002      	movs	r2, r0
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b64      	cmp	r3, #100	; 0x64
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e2e8      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f6:	4b82      	ldr	r3, [pc, #520]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	2380      	movs	r3, #128	; 0x80
 80011fc:	029b      	lsls	r3, r3, #10
 80011fe:	4013      	ands	r3, r2
 8001200:	d1f0      	bne.n	80011e4 <HAL_RCC_OscConfig+0x11c>
 8001202:	e000      	b.n	8001206 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001204:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2202      	movs	r2, #2
 800120c:	4013      	ands	r3, r2
 800120e:	d100      	bne.n	8001212 <HAL_RCC_OscConfig+0x14a>
 8001210:	e06c      	b.n	80012ec <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001212:	4b7b      	ldr	r3, [pc, #492]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	220c      	movs	r2, #12
 8001218:	4013      	ands	r3, r2
 800121a:	d00e      	beq.n	800123a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800121c:	4b78      	ldr	r3, [pc, #480]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	220c      	movs	r2, #12
 8001222:	4013      	ands	r3, r2
 8001224:	2b08      	cmp	r3, #8
 8001226:	d11f      	bne.n	8001268 <HAL_RCC_OscConfig+0x1a0>
 8001228:	4b75      	ldr	r3, [pc, #468]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	23c0      	movs	r3, #192	; 0xc0
 800122e:	025b      	lsls	r3, r3, #9
 8001230:	401a      	ands	r2, r3
 8001232:	2380      	movs	r3, #128	; 0x80
 8001234:	021b      	lsls	r3, r3, #8
 8001236:	429a      	cmp	r2, r3
 8001238:	d116      	bne.n	8001268 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123a:	4b71      	ldr	r3, [pc, #452]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2202      	movs	r2, #2
 8001240:	4013      	ands	r3, r2
 8001242:	d005      	beq.n	8001250 <HAL_RCC_OscConfig+0x188>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d001      	beq.n	8001250 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e2bb      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001250:	4b6b      	ldr	r3, [pc, #428]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	22f8      	movs	r2, #248	; 0xf8
 8001256:	4393      	bics	r3, r2
 8001258:	0019      	movs	r1, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	00da      	lsls	r2, r3, #3
 8001260:	4b67      	ldr	r3, [pc, #412]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001262:	430a      	orrs	r2, r1
 8001264:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001266:	e041      	b.n	80012ec <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d024      	beq.n	80012ba <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001270:	4b63      	ldr	r3, [pc, #396]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b62      	ldr	r3, [pc, #392]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001276:	2101      	movs	r1, #1
 8001278:	430a      	orrs	r2, r1
 800127a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127c:	f7ff fb32 	bl	80008e4 <HAL_GetTick>
 8001280:	0003      	movs	r3, r0
 8001282:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001284:	e008      	b.n	8001298 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001286:	f7ff fb2d 	bl	80008e4 <HAL_GetTick>
 800128a:	0002      	movs	r2, r0
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e297      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001298:	4b59      	ldr	r3, [pc, #356]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2202      	movs	r2, #2
 800129e:	4013      	ands	r3, r2
 80012a0:	d0f1      	beq.n	8001286 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a2:	4b57      	ldr	r3, [pc, #348]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	22f8      	movs	r2, #248	; 0xf8
 80012a8:	4393      	bics	r3, r2
 80012aa:	0019      	movs	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	00da      	lsls	r2, r3, #3
 80012b2:	4b53      	ldr	r3, [pc, #332]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 80012b4:	430a      	orrs	r2, r1
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	e018      	b.n	80012ec <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ba:	4b51      	ldr	r3, [pc, #324]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	4b50      	ldr	r3, [pc, #320]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 80012c0:	2101      	movs	r1, #1
 80012c2:	438a      	bics	r2, r1
 80012c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c6:	f7ff fb0d 	bl	80008e4 <HAL_GetTick>
 80012ca:	0003      	movs	r3, r0
 80012cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012d0:	f7ff fb08 	bl	80008e4 <HAL_GetTick>
 80012d4:	0002      	movs	r2, r0
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e272      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e2:	4b47      	ldr	r3, [pc, #284]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2202      	movs	r2, #2
 80012e8:	4013      	ands	r3, r2
 80012ea:	d1f1      	bne.n	80012d0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2208      	movs	r2, #8
 80012f2:	4013      	ands	r3, r2
 80012f4:	d036      	beq.n	8001364 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d019      	beq.n	8001332 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012fe:	4b40      	ldr	r3, [pc, #256]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001300:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001302:	4b3f      	ldr	r3, [pc, #252]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001304:	2101      	movs	r1, #1
 8001306:	430a      	orrs	r2, r1
 8001308:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800130a:	f7ff faeb 	bl	80008e4 <HAL_GetTick>
 800130e:	0003      	movs	r3, r0
 8001310:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001314:	f7ff fae6 	bl	80008e4 <HAL_GetTick>
 8001318:	0002      	movs	r2, r0
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e250      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001326:	4b36      	ldr	r3, [pc, #216]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132a:	2202      	movs	r2, #2
 800132c:	4013      	ands	r3, r2
 800132e:	d0f1      	beq.n	8001314 <HAL_RCC_OscConfig+0x24c>
 8001330:	e018      	b.n	8001364 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001332:	4b33      	ldr	r3, [pc, #204]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001334:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001336:	4b32      	ldr	r3, [pc, #200]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001338:	2101      	movs	r1, #1
 800133a:	438a      	bics	r2, r1
 800133c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800133e:	f7ff fad1 	bl	80008e4 <HAL_GetTick>
 8001342:	0003      	movs	r3, r0
 8001344:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001348:	f7ff facc 	bl	80008e4 <HAL_GetTick>
 800134c:	0002      	movs	r2, r0
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e236      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800135a:	4b29      	ldr	r3, [pc, #164]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 800135c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135e:	2202      	movs	r2, #2
 8001360:	4013      	ands	r3, r2
 8001362:	d1f1      	bne.n	8001348 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2204      	movs	r2, #4
 800136a:	4013      	ands	r3, r2
 800136c:	d100      	bne.n	8001370 <HAL_RCC_OscConfig+0x2a8>
 800136e:	e0b5      	b.n	80014dc <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001370:	201f      	movs	r0, #31
 8001372:	183b      	adds	r3, r7, r0
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001378:	4b21      	ldr	r3, [pc, #132]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 800137a:	69da      	ldr	r2, [r3, #28]
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	055b      	lsls	r3, r3, #21
 8001380:	4013      	ands	r3, r2
 8001382:	d110      	bne.n	80013a6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001384:	4b1e      	ldr	r3, [pc, #120]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001386:	69da      	ldr	r2, [r3, #28]
 8001388:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 800138a:	2180      	movs	r1, #128	; 0x80
 800138c:	0549      	lsls	r1, r1, #21
 800138e:	430a      	orrs	r2, r1
 8001390:	61da      	str	r2, [r3, #28]
 8001392:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001394:	69da      	ldr	r2, [r3, #28]
 8001396:	2380      	movs	r3, #128	; 0x80
 8001398:	055b      	lsls	r3, r3, #21
 800139a:	4013      	ands	r3, r2
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80013a0:	183b      	adds	r3, r7, r0
 80013a2:	2201      	movs	r2, #1
 80013a4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a6:	4b19      	ldr	r3, [pc, #100]	; (800140c <HAL_RCC_OscConfig+0x344>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	2380      	movs	r3, #128	; 0x80
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	4013      	ands	r3, r2
 80013b0:	d11a      	bne.n	80013e8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013b2:	4b16      	ldr	r3, [pc, #88]	; (800140c <HAL_RCC_OscConfig+0x344>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <HAL_RCC_OscConfig+0x344>)
 80013b8:	2180      	movs	r1, #128	; 0x80
 80013ba:	0049      	lsls	r1, r1, #1
 80013bc:	430a      	orrs	r2, r1
 80013be:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013c0:	f7ff fa90 	bl	80008e4 <HAL_GetTick>
 80013c4:	0003      	movs	r3, r0
 80013c6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ca:	f7ff fa8b 	bl	80008e4 <HAL_GetTick>
 80013ce:	0002      	movs	r2, r0
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b64      	cmp	r3, #100	; 0x64
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e1f5      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013dc:	4b0b      	ldr	r3, [pc, #44]	; (800140c <HAL_RCC_OscConfig+0x344>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	2380      	movs	r3, #128	; 0x80
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	4013      	ands	r3, r2
 80013e6:	d0f0      	beq.n	80013ca <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d10f      	bne.n	8001410 <HAL_RCC_OscConfig+0x348>
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 80013f2:	6a1a      	ldr	r2, [r3, #32]
 80013f4:	4b02      	ldr	r3, [pc, #8]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 80013f6:	2101      	movs	r1, #1
 80013f8:	430a      	orrs	r2, r1
 80013fa:	621a      	str	r2, [r3, #32]
 80013fc:	e036      	b.n	800146c <HAL_RCC_OscConfig+0x3a4>
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	40021000 	.word	0x40021000
 8001404:	fffeffff 	.word	0xfffeffff
 8001408:	fffbffff 	.word	0xfffbffff
 800140c:	40007000 	.word	0x40007000
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d10c      	bne.n	8001432 <HAL_RCC_OscConfig+0x36a>
 8001418:	4bca      	ldr	r3, [pc, #808]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 800141a:	6a1a      	ldr	r2, [r3, #32]
 800141c:	4bc9      	ldr	r3, [pc, #804]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 800141e:	2101      	movs	r1, #1
 8001420:	438a      	bics	r2, r1
 8001422:	621a      	str	r2, [r3, #32]
 8001424:	4bc7      	ldr	r3, [pc, #796]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001426:	6a1a      	ldr	r2, [r3, #32]
 8001428:	4bc6      	ldr	r3, [pc, #792]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 800142a:	2104      	movs	r1, #4
 800142c:	438a      	bics	r2, r1
 800142e:	621a      	str	r2, [r3, #32]
 8001430:	e01c      	b.n	800146c <HAL_RCC_OscConfig+0x3a4>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	2b05      	cmp	r3, #5
 8001438:	d10c      	bne.n	8001454 <HAL_RCC_OscConfig+0x38c>
 800143a:	4bc2      	ldr	r3, [pc, #776]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 800143c:	6a1a      	ldr	r2, [r3, #32]
 800143e:	4bc1      	ldr	r3, [pc, #772]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001440:	2104      	movs	r1, #4
 8001442:	430a      	orrs	r2, r1
 8001444:	621a      	str	r2, [r3, #32]
 8001446:	4bbf      	ldr	r3, [pc, #764]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001448:	6a1a      	ldr	r2, [r3, #32]
 800144a:	4bbe      	ldr	r3, [pc, #760]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 800144c:	2101      	movs	r1, #1
 800144e:	430a      	orrs	r2, r1
 8001450:	621a      	str	r2, [r3, #32]
 8001452:	e00b      	b.n	800146c <HAL_RCC_OscConfig+0x3a4>
 8001454:	4bbb      	ldr	r3, [pc, #748]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001456:	6a1a      	ldr	r2, [r3, #32]
 8001458:	4bba      	ldr	r3, [pc, #744]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 800145a:	2101      	movs	r1, #1
 800145c:	438a      	bics	r2, r1
 800145e:	621a      	str	r2, [r3, #32]
 8001460:	4bb8      	ldr	r3, [pc, #736]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001462:	6a1a      	ldr	r2, [r3, #32]
 8001464:	4bb7      	ldr	r3, [pc, #732]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001466:	2104      	movs	r1, #4
 8001468:	438a      	bics	r2, r1
 800146a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d014      	beq.n	800149e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001474:	f7ff fa36 	bl	80008e4 <HAL_GetTick>
 8001478:	0003      	movs	r3, r0
 800147a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800147c:	e009      	b.n	8001492 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800147e:	f7ff fa31 	bl	80008e4 <HAL_GetTick>
 8001482:	0002      	movs	r2, r0
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	4aaf      	ldr	r2, [pc, #700]	; (8001748 <HAL_RCC_OscConfig+0x680>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e19a      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001492:	4bac      	ldr	r3, [pc, #688]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	2202      	movs	r2, #2
 8001498:	4013      	ands	r3, r2
 800149a:	d0f0      	beq.n	800147e <HAL_RCC_OscConfig+0x3b6>
 800149c:	e013      	b.n	80014c6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149e:	f7ff fa21 	bl	80008e4 <HAL_GetTick>
 80014a2:	0003      	movs	r3, r0
 80014a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014a6:	e009      	b.n	80014bc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014a8:	f7ff fa1c 	bl	80008e4 <HAL_GetTick>
 80014ac:	0002      	movs	r2, r0
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	4aa5      	ldr	r2, [pc, #660]	; (8001748 <HAL_RCC_OscConfig+0x680>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e185      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014bc:	4ba1      	ldr	r3, [pc, #644]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	2202      	movs	r2, #2
 80014c2:	4013      	ands	r3, r2
 80014c4:	d1f0      	bne.n	80014a8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014c6:	231f      	movs	r3, #31
 80014c8:	18fb      	adds	r3, r7, r3
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d105      	bne.n	80014dc <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014d0:	4b9c      	ldr	r3, [pc, #624]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 80014d2:	69da      	ldr	r2, [r3, #28]
 80014d4:	4b9b      	ldr	r3, [pc, #620]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 80014d6:	499d      	ldr	r1, [pc, #628]	; (800174c <HAL_RCC_OscConfig+0x684>)
 80014d8:	400a      	ands	r2, r1
 80014da:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2210      	movs	r2, #16
 80014e2:	4013      	ands	r3, r2
 80014e4:	d063      	beq.n	80015ae <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d12a      	bne.n	8001544 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80014ee:	4b95      	ldr	r3, [pc, #596]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 80014f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014f2:	4b94      	ldr	r3, [pc, #592]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 80014f4:	2104      	movs	r1, #4
 80014f6:	430a      	orrs	r2, r1
 80014f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80014fa:	4b92      	ldr	r3, [pc, #584]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 80014fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014fe:	4b91      	ldr	r3, [pc, #580]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001500:	2101      	movs	r1, #1
 8001502:	430a      	orrs	r2, r1
 8001504:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001506:	f7ff f9ed 	bl	80008e4 <HAL_GetTick>
 800150a:	0003      	movs	r3, r0
 800150c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001510:	f7ff f9e8 	bl	80008e4 <HAL_GetTick>
 8001514:	0002      	movs	r2, r0
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e152      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001522:	4b88      	ldr	r3, [pc, #544]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001526:	2202      	movs	r2, #2
 8001528:	4013      	ands	r3, r2
 800152a:	d0f1      	beq.n	8001510 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800152c:	4b85      	ldr	r3, [pc, #532]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 800152e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001530:	22f8      	movs	r2, #248	; 0xf8
 8001532:	4393      	bics	r3, r2
 8001534:	0019      	movs	r1, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	00da      	lsls	r2, r3, #3
 800153c:	4b81      	ldr	r3, [pc, #516]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 800153e:	430a      	orrs	r2, r1
 8001540:	635a      	str	r2, [r3, #52]	; 0x34
 8001542:	e034      	b.n	80015ae <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	695b      	ldr	r3, [r3, #20]
 8001548:	3305      	adds	r3, #5
 800154a:	d111      	bne.n	8001570 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800154c:	4b7d      	ldr	r3, [pc, #500]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 800154e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001550:	4b7c      	ldr	r3, [pc, #496]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001552:	2104      	movs	r1, #4
 8001554:	438a      	bics	r2, r1
 8001556:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001558:	4b7a      	ldr	r3, [pc, #488]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 800155a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800155c:	22f8      	movs	r2, #248	; 0xf8
 800155e:	4393      	bics	r3, r2
 8001560:	0019      	movs	r1, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	00da      	lsls	r2, r3, #3
 8001568:	4b76      	ldr	r3, [pc, #472]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 800156a:	430a      	orrs	r2, r1
 800156c:	635a      	str	r2, [r3, #52]	; 0x34
 800156e:	e01e      	b.n	80015ae <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001570:	4b74      	ldr	r3, [pc, #464]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001572:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001574:	4b73      	ldr	r3, [pc, #460]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001576:	2104      	movs	r1, #4
 8001578:	430a      	orrs	r2, r1
 800157a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800157c:	4b71      	ldr	r3, [pc, #452]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 800157e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001580:	4b70      	ldr	r3, [pc, #448]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001582:	2101      	movs	r1, #1
 8001584:	438a      	bics	r2, r1
 8001586:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001588:	f7ff f9ac 	bl	80008e4 <HAL_GetTick>
 800158c:	0003      	movs	r3, r0
 800158e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001592:	f7ff f9a7 	bl	80008e4 <HAL_GetTick>
 8001596:	0002      	movs	r2, r0
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e111      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80015a4:	4b67      	ldr	r3, [pc, #412]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 80015a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015a8:	2202      	movs	r2, #2
 80015aa:	4013      	ands	r3, r2
 80015ac:	d1f1      	bne.n	8001592 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2220      	movs	r2, #32
 80015b4:	4013      	ands	r3, r2
 80015b6:	d05c      	beq.n	8001672 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80015b8:	4b62      	ldr	r3, [pc, #392]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	220c      	movs	r2, #12
 80015be:	4013      	ands	r3, r2
 80015c0:	2b0c      	cmp	r3, #12
 80015c2:	d00e      	beq.n	80015e2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80015c4:	4b5f      	ldr	r3, [pc, #380]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	220c      	movs	r2, #12
 80015ca:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80015cc:	2b08      	cmp	r3, #8
 80015ce:	d114      	bne.n	80015fa <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80015d0:	4b5c      	ldr	r3, [pc, #368]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	23c0      	movs	r3, #192	; 0xc0
 80015d6:	025b      	lsls	r3, r3, #9
 80015d8:	401a      	ands	r2, r3
 80015da:	23c0      	movs	r3, #192	; 0xc0
 80015dc:	025b      	lsls	r3, r3, #9
 80015de:	429a      	cmp	r2, r3
 80015e0:	d10b      	bne.n	80015fa <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80015e2:	4b58      	ldr	r3, [pc, #352]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 80015e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015e6:	2380      	movs	r3, #128	; 0x80
 80015e8:	025b      	lsls	r3, r3, #9
 80015ea:	4013      	ands	r3, r2
 80015ec:	d040      	beq.n	8001670 <HAL_RCC_OscConfig+0x5a8>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a1b      	ldr	r3, [r3, #32]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d03c      	beq.n	8001670 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e0e6      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d01b      	beq.n	800163a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001602:	4b50      	ldr	r3, [pc, #320]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001604:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001606:	4b4f      	ldr	r3, [pc, #316]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001608:	2180      	movs	r1, #128	; 0x80
 800160a:	0249      	lsls	r1, r1, #9
 800160c:	430a      	orrs	r2, r1
 800160e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001610:	f7ff f968 	bl	80008e4 <HAL_GetTick>
 8001614:	0003      	movs	r3, r0
 8001616:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800161a:	f7ff f963 	bl	80008e4 <HAL_GetTick>
 800161e:	0002      	movs	r2, r0
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e0cd      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800162c:	4b45      	ldr	r3, [pc, #276]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 800162e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001630:	2380      	movs	r3, #128	; 0x80
 8001632:	025b      	lsls	r3, r3, #9
 8001634:	4013      	ands	r3, r2
 8001636:	d0f0      	beq.n	800161a <HAL_RCC_OscConfig+0x552>
 8001638:	e01b      	b.n	8001672 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800163a:	4b42      	ldr	r3, [pc, #264]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 800163c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800163e:	4b41      	ldr	r3, [pc, #260]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001640:	4943      	ldr	r1, [pc, #268]	; (8001750 <HAL_RCC_OscConfig+0x688>)
 8001642:	400a      	ands	r2, r1
 8001644:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001646:	f7ff f94d 	bl	80008e4 <HAL_GetTick>
 800164a:	0003      	movs	r3, r0
 800164c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001650:	f7ff f948 	bl	80008e4 <HAL_GetTick>
 8001654:	0002      	movs	r2, r0
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e0b2      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001662:	4b38      	ldr	r3, [pc, #224]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001666:	2380      	movs	r3, #128	; 0x80
 8001668:	025b      	lsls	r3, r3, #9
 800166a:	4013      	ands	r3, r2
 800166c:	d1f0      	bne.n	8001650 <HAL_RCC_OscConfig+0x588>
 800166e:	e000      	b.n	8001672 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001670:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001676:	2b00      	cmp	r3, #0
 8001678:	d100      	bne.n	800167c <HAL_RCC_OscConfig+0x5b4>
 800167a:	e0a4      	b.n	80017c6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800167c:	4b31      	ldr	r3, [pc, #196]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	220c      	movs	r2, #12
 8001682:	4013      	ands	r3, r2
 8001684:	2b08      	cmp	r3, #8
 8001686:	d100      	bne.n	800168a <HAL_RCC_OscConfig+0x5c2>
 8001688:	e078      	b.n	800177c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168e:	2b02      	cmp	r3, #2
 8001690:	d14c      	bne.n	800172c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001692:	4b2c      	ldr	r3, [pc, #176]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	4b2b      	ldr	r3, [pc, #172]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001698:	492e      	ldr	r1, [pc, #184]	; (8001754 <HAL_RCC_OscConfig+0x68c>)
 800169a:	400a      	ands	r2, r1
 800169c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169e:	f7ff f921 	bl	80008e4 <HAL_GetTick>
 80016a2:	0003      	movs	r3, r0
 80016a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a8:	f7ff f91c 	bl	80008e4 <HAL_GetTick>
 80016ac:	0002      	movs	r2, r0
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e086      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ba:	4b22      	ldr	r3, [pc, #136]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	2380      	movs	r3, #128	; 0x80
 80016c0:	049b      	lsls	r3, r3, #18
 80016c2:	4013      	ands	r3, r2
 80016c4:	d1f0      	bne.n	80016a8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016c6:	4b1f      	ldr	r3, [pc, #124]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 80016c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ca:	220f      	movs	r2, #15
 80016cc:	4393      	bics	r3, r2
 80016ce:	0019      	movs	r1, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016d4:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 80016d6:	430a      	orrs	r2, r1
 80016d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80016da:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	4a1e      	ldr	r2, [pc, #120]	; (8001758 <HAL_RCC_OscConfig+0x690>)
 80016e0:	4013      	ands	r3, r2
 80016e2:	0019      	movs	r1, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ec:	431a      	orrs	r2, r3
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 80016f0:	430a      	orrs	r2, r1
 80016f2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016f4:	4b13      	ldr	r3, [pc, #76]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 80016fa:	2180      	movs	r1, #128	; 0x80
 80016fc:	0449      	lsls	r1, r1, #17
 80016fe:	430a      	orrs	r2, r1
 8001700:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001702:	f7ff f8ef 	bl	80008e4 <HAL_GetTick>
 8001706:	0003      	movs	r3, r0
 8001708:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800170c:	f7ff f8ea 	bl	80008e4 <HAL_GetTick>
 8001710:	0002      	movs	r2, r0
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e054      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	049b      	lsls	r3, r3, #18
 8001726:	4013      	ands	r3, r2
 8001728:	d0f0      	beq.n	800170c <HAL_RCC_OscConfig+0x644>
 800172a:	e04c      	b.n	80017c6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800172c:	4b05      	ldr	r3, [pc, #20]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b04      	ldr	r3, [pc, #16]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001732:	4908      	ldr	r1, [pc, #32]	; (8001754 <HAL_RCC_OscConfig+0x68c>)
 8001734:	400a      	ands	r2, r1
 8001736:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001738:	f7ff f8d4 	bl	80008e4 <HAL_GetTick>
 800173c:	0003      	movs	r3, r0
 800173e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001740:	e015      	b.n	800176e <HAL_RCC_OscConfig+0x6a6>
 8001742:	46c0      	nop			; (mov r8, r8)
 8001744:	40021000 	.word	0x40021000
 8001748:	00001388 	.word	0x00001388
 800174c:	efffffff 	.word	0xefffffff
 8001750:	fffeffff 	.word	0xfffeffff
 8001754:	feffffff 	.word	0xfeffffff
 8001758:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800175c:	f7ff f8c2 	bl	80008e4 <HAL_GetTick>
 8001760:	0002      	movs	r2, r0
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e02c      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800176e:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <HAL_RCC_OscConfig+0x708>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	2380      	movs	r3, #128	; 0x80
 8001774:	049b      	lsls	r3, r3, #18
 8001776:	4013      	ands	r3, r2
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x694>
 800177a:	e024      	b.n	80017c6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	2b01      	cmp	r3, #1
 8001782:	d101      	bne.n	8001788 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e01f      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001788:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <HAL_RCC_OscConfig+0x708>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <HAL_RCC_OscConfig+0x708>)
 8001790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001792:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001794:	697a      	ldr	r2, [r7, #20]
 8001796:	23c0      	movs	r3, #192	; 0xc0
 8001798:	025b      	lsls	r3, r3, #9
 800179a:	401a      	ands	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d10e      	bne.n	80017c2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	220f      	movs	r2, #15
 80017a8:	401a      	ands	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d107      	bne.n	80017c2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	23f0      	movs	r3, #240	; 0xf0
 80017b6:	039b      	lsls	r3, r3, #14
 80017b8:	401a      	ands	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80017be:	429a      	cmp	r2, r3
 80017c0:	d001      	beq.n	80017c6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e000      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	0018      	movs	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	b008      	add	sp, #32
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40021000 	.word	0x40021000

080017d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0bf      	b.n	8001968 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017e8:	4b61      	ldr	r3, [pc, #388]	; (8001970 <HAL_RCC_ClockConfig+0x19c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2201      	movs	r2, #1
 80017ee:	4013      	ands	r3, r2
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d911      	bls.n	800181a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f6:	4b5e      	ldr	r3, [pc, #376]	; (8001970 <HAL_RCC_ClockConfig+0x19c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2201      	movs	r2, #1
 80017fc:	4393      	bics	r3, r2
 80017fe:	0019      	movs	r1, r3
 8001800:	4b5b      	ldr	r3, [pc, #364]	; (8001970 <HAL_RCC_ClockConfig+0x19c>)
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	430a      	orrs	r2, r1
 8001806:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001808:	4b59      	ldr	r3, [pc, #356]	; (8001970 <HAL_RCC_ClockConfig+0x19c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2201      	movs	r2, #1
 800180e:	4013      	ands	r3, r2
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	429a      	cmp	r2, r3
 8001814:	d001      	beq.n	800181a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e0a6      	b.n	8001968 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2202      	movs	r2, #2
 8001820:	4013      	ands	r3, r2
 8001822:	d015      	beq.n	8001850 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2204      	movs	r2, #4
 800182a:	4013      	ands	r3, r2
 800182c:	d006      	beq.n	800183c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800182e:	4b51      	ldr	r3, [pc, #324]	; (8001974 <HAL_RCC_ClockConfig+0x1a0>)
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	4b50      	ldr	r3, [pc, #320]	; (8001974 <HAL_RCC_ClockConfig+0x1a0>)
 8001834:	21e0      	movs	r1, #224	; 0xe0
 8001836:	00c9      	lsls	r1, r1, #3
 8001838:	430a      	orrs	r2, r1
 800183a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800183c:	4b4d      	ldr	r3, [pc, #308]	; (8001974 <HAL_RCC_ClockConfig+0x1a0>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	22f0      	movs	r2, #240	; 0xf0
 8001842:	4393      	bics	r3, r2
 8001844:	0019      	movs	r1, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	4b4a      	ldr	r3, [pc, #296]	; (8001974 <HAL_RCC_ClockConfig+0x1a0>)
 800184c:	430a      	orrs	r2, r1
 800184e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2201      	movs	r2, #1
 8001856:	4013      	ands	r3, r2
 8001858:	d04c      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d107      	bne.n	8001872 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001862:	4b44      	ldr	r3, [pc, #272]	; (8001974 <HAL_RCC_ClockConfig+0x1a0>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	029b      	lsls	r3, r3, #10
 800186a:	4013      	ands	r3, r2
 800186c:	d120      	bne.n	80018b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e07a      	b.n	8001968 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b02      	cmp	r3, #2
 8001878:	d107      	bne.n	800188a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800187a:	4b3e      	ldr	r3, [pc, #248]	; (8001974 <HAL_RCC_ClockConfig+0x1a0>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	2380      	movs	r3, #128	; 0x80
 8001880:	049b      	lsls	r3, r3, #18
 8001882:	4013      	ands	r3, r2
 8001884:	d114      	bne.n	80018b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e06e      	b.n	8001968 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b03      	cmp	r3, #3
 8001890:	d107      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001892:	4b38      	ldr	r3, [pc, #224]	; (8001974 <HAL_RCC_ClockConfig+0x1a0>)
 8001894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001896:	2380      	movs	r3, #128	; 0x80
 8001898:	025b      	lsls	r3, r3, #9
 800189a:	4013      	ands	r3, r2
 800189c:	d108      	bne.n	80018b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e062      	b.n	8001968 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a2:	4b34      	ldr	r3, [pc, #208]	; (8001974 <HAL_RCC_ClockConfig+0x1a0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2202      	movs	r2, #2
 80018a8:	4013      	ands	r3, r2
 80018aa:	d101      	bne.n	80018b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e05b      	b.n	8001968 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018b0:	4b30      	ldr	r3, [pc, #192]	; (8001974 <HAL_RCC_ClockConfig+0x1a0>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2203      	movs	r2, #3
 80018b6:	4393      	bics	r3, r2
 80018b8:	0019      	movs	r1, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	4b2d      	ldr	r3, [pc, #180]	; (8001974 <HAL_RCC_ClockConfig+0x1a0>)
 80018c0:	430a      	orrs	r2, r1
 80018c2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018c4:	f7ff f80e 	bl	80008e4 <HAL_GetTick>
 80018c8:	0003      	movs	r3, r0
 80018ca:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018cc:	e009      	b.n	80018e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ce:	f7ff f809 	bl	80008e4 <HAL_GetTick>
 80018d2:	0002      	movs	r2, r0
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	4a27      	ldr	r2, [pc, #156]	; (8001978 <HAL_RCC_ClockConfig+0x1a4>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e042      	b.n	8001968 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e2:	4b24      	ldr	r3, [pc, #144]	; (8001974 <HAL_RCC_ClockConfig+0x1a0>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	220c      	movs	r2, #12
 80018e8:	401a      	ands	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d1ec      	bne.n	80018ce <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018f4:	4b1e      	ldr	r3, [pc, #120]	; (8001970 <HAL_RCC_ClockConfig+0x19c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2201      	movs	r2, #1
 80018fa:	4013      	ands	r3, r2
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d211      	bcs.n	8001926 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001902:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <HAL_RCC_ClockConfig+0x19c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2201      	movs	r2, #1
 8001908:	4393      	bics	r3, r2
 800190a:	0019      	movs	r1, r3
 800190c:	4b18      	ldr	r3, [pc, #96]	; (8001970 <HAL_RCC_ClockConfig+0x19c>)
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	430a      	orrs	r2, r1
 8001912:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001914:	4b16      	ldr	r3, [pc, #88]	; (8001970 <HAL_RCC_ClockConfig+0x19c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2201      	movs	r2, #1
 800191a:	4013      	ands	r3, r2
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	429a      	cmp	r2, r3
 8001920:	d001      	beq.n	8001926 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e020      	b.n	8001968 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2204      	movs	r2, #4
 800192c:	4013      	ands	r3, r2
 800192e:	d009      	beq.n	8001944 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001930:	4b10      	ldr	r3, [pc, #64]	; (8001974 <HAL_RCC_ClockConfig+0x1a0>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	4a11      	ldr	r2, [pc, #68]	; (800197c <HAL_RCC_ClockConfig+0x1a8>)
 8001936:	4013      	ands	r3, r2
 8001938:	0019      	movs	r1, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68da      	ldr	r2, [r3, #12]
 800193e:	4b0d      	ldr	r3, [pc, #52]	; (8001974 <HAL_RCC_ClockConfig+0x1a0>)
 8001940:	430a      	orrs	r2, r1
 8001942:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001944:	f000 f820 	bl	8001988 <HAL_RCC_GetSysClockFreq>
 8001948:	0001      	movs	r1, r0
 800194a:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <HAL_RCC_ClockConfig+0x1a0>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	091b      	lsrs	r3, r3, #4
 8001950:	220f      	movs	r2, #15
 8001952:	4013      	ands	r3, r2
 8001954:	4a0a      	ldr	r2, [pc, #40]	; (8001980 <HAL_RCC_ClockConfig+0x1ac>)
 8001956:	5cd3      	ldrb	r3, [r2, r3]
 8001958:	000a      	movs	r2, r1
 800195a:	40da      	lsrs	r2, r3
 800195c:	4b09      	ldr	r3, [pc, #36]	; (8001984 <HAL_RCC_ClockConfig+0x1b0>)
 800195e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001960:	2003      	movs	r0, #3
 8001962:	f7fe ff79 	bl	8000858 <HAL_InitTick>
  
  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	0018      	movs	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	b004      	add	sp, #16
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40022000 	.word	0x40022000
 8001974:	40021000 	.word	0x40021000
 8001978:	00001388 	.word	0x00001388
 800197c:	fffff8ff 	.word	0xfffff8ff
 8001980:	080033b8 	.word	0x080033b8
 8001984:	20000000 	.word	0x20000000

08001988 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001988:	b590      	push	{r4, r7, lr}
 800198a:	b08f      	sub	sp, #60	; 0x3c
 800198c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800198e:	2314      	movs	r3, #20
 8001990:	18fb      	adds	r3, r7, r3
 8001992:	4a38      	ldr	r2, [pc, #224]	; (8001a74 <HAL_RCC_GetSysClockFreq+0xec>)
 8001994:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001996:	c313      	stmia	r3!, {r0, r1, r4}
 8001998:	6812      	ldr	r2, [r2, #0]
 800199a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	4a36      	ldr	r2, [pc, #216]	; (8001a78 <HAL_RCC_GetSysClockFreq+0xf0>)
 80019a0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80019a2:	c313      	stmia	r3!, {r0, r1, r4}
 80019a4:	6812      	ldr	r2, [r2, #0]
 80019a6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019ac:	2300      	movs	r3, #0
 80019ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80019b0:	2300      	movs	r3, #0
 80019b2:	637b      	str	r3, [r7, #52]	; 0x34
 80019b4:	2300      	movs	r3, #0
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80019bc:	4b2f      	ldr	r3, [pc, #188]	; (8001a7c <HAL_RCC_GetSysClockFreq+0xf4>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c4:	220c      	movs	r2, #12
 80019c6:	4013      	ands	r3, r2
 80019c8:	2b0c      	cmp	r3, #12
 80019ca:	d047      	beq.n	8001a5c <HAL_RCC_GetSysClockFreq+0xd4>
 80019cc:	d849      	bhi.n	8001a62 <HAL_RCC_GetSysClockFreq+0xda>
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	d002      	beq.n	80019d8 <HAL_RCC_GetSysClockFreq+0x50>
 80019d2:	2b08      	cmp	r3, #8
 80019d4:	d003      	beq.n	80019de <HAL_RCC_GetSysClockFreq+0x56>
 80019d6:	e044      	b.n	8001a62 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019d8:	4b29      	ldr	r3, [pc, #164]	; (8001a80 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019dc:	e044      	b.n	8001a68 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80019de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e0:	0c9b      	lsrs	r3, r3, #18
 80019e2:	220f      	movs	r2, #15
 80019e4:	4013      	ands	r3, r2
 80019e6:	2214      	movs	r2, #20
 80019e8:	18ba      	adds	r2, r7, r2
 80019ea:	5cd3      	ldrb	r3, [r2, r3]
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80019ee:	4b23      	ldr	r3, [pc, #140]	; (8001a7c <HAL_RCC_GetSysClockFreq+0xf4>)
 80019f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f2:	220f      	movs	r2, #15
 80019f4:	4013      	ands	r3, r2
 80019f6:	1d3a      	adds	r2, r7, #4
 80019f8:	5cd3      	ldrb	r3, [r2, r3]
 80019fa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80019fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019fe:	23c0      	movs	r3, #192	; 0xc0
 8001a00:	025b      	lsls	r3, r3, #9
 8001a02:	401a      	ands	r2, r3
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	025b      	lsls	r3, r3, #9
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d109      	bne.n	8001a20 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a0e:	481c      	ldr	r0, [pc, #112]	; (8001a80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a10:	f7fe fb7a 	bl	8000108 <__udivsi3>
 8001a14:	0003      	movs	r3, r0
 8001a16:	001a      	movs	r2, r3
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	4353      	muls	r3, r2
 8001a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8001a1e:	e01a      	b.n	8001a56 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001a20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a22:	23c0      	movs	r3, #192	; 0xc0
 8001a24:	025b      	lsls	r3, r3, #9
 8001a26:	401a      	ands	r2, r3
 8001a28:	23c0      	movs	r3, #192	; 0xc0
 8001a2a:	025b      	lsls	r3, r3, #9
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d109      	bne.n	8001a44 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a32:	4814      	ldr	r0, [pc, #80]	; (8001a84 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a34:	f7fe fb68 	bl	8000108 <__udivsi3>
 8001a38:	0003      	movs	r3, r0
 8001a3a:	001a      	movs	r2, r3
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	4353      	muls	r3, r2
 8001a40:	637b      	str	r3, [r7, #52]	; 0x34
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a46:	480e      	ldr	r0, [pc, #56]	; (8001a80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a48:	f7fe fb5e 	bl	8000108 <__udivsi3>
 8001a4c:	0003      	movs	r3, r0
 8001a4e:	001a      	movs	r2, r3
 8001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a52:	4353      	muls	r3, r2
 8001a54:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a58:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a5a:	e005      	b.n	8001a68 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001a5c:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a5e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a60:	e002      	b.n	8001a68 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a62:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a64:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a66:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	b00f      	add	sp, #60	; 0x3c
 8001a70:	bd90      	pop	{r4, r7, pc}
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	08003398 	.word	0x08003398
 8001a78:	080033a8 	.word	0x080033a8
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	007a1200 	.word	0x007a1200
 8001a84:	02dc6c00 	.word	0x02dc6c00

08001a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a8c:	4b02      	ldr	r3, [pc, #8]	; (8001a98 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
}
 8001a90:	0018      	movs	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	20000000 	.word	0x20000000

08001a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001aa0:	f7ff fff2 	bl	8001a88 <HAL_RCC_GetHCLKFreq>
 8001aa4:	0001      	movs	r1, r0
 8001aa6:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	0a1b      	lsrs	r3, r3, #8
 8001aac:	2207      	movs	r2, #7
 8001aae:	4013      	ands	r3, r2
 8001ab0:	4a04      	ldr	r2, [pc, #16]	; (8001ac4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ab2:	5cd3      	ldrb	r3, [r2, r3]
 8001ab4:	40d9      	lsrs	r1, r3
 8001ab6:	000b      	movs	r3, r1
}    
 8001ab8:	0018      	movs	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	080033c8 	.word	0x080033c8

08001ac8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	025b      	lsls	r3, r3, #9
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d100      	bne.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001ae4:	e08e      	b.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001ae6:	2017      	movs	r0, #23
 8001ae8:	183b      	adds	r3, r7, r0
 8001aea:	2200      	movs	r2, #0
 8001aec:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aee:	4b6e      	ldr	r3, [pc, #440]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001af0:	69da      	ldr	r2, [r3, #28]
 8001af2:	2380      	movs	r3, #128	; 0x80
 8001af4:	055b      	lsls	r3, r3, #21
 8001af6:	4013      	ands	r3, r2
 8001af8:	d110      	bne.n	8001b1c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	4b6b      	ldr	r3, [pc, #428]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001afc:	69da      	ldr	r2, [r3, #28]
 8001afe:	4b6a      	ldr	r3, [pc, #424]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b00:	2180      	movs	r1, #128	; 0x80
 8001b02:	0549      	lsls	r1, r1, #21
 8001b04:	430a      	orrs	r2, r1
 8001b06:	61da      	str	r2, [r3, #28]
 8001b08:	4b67      	ldr	r3, [pc, #412]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b0a:	69da      	ldr	r2, [r3, #28]
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	055b      	lsls	r3, r3, #21
 8001b10:	4013      	ands	r3, r2
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b16:	183b      	adds	r3, r7, r0
 8001b18:	2201      	movs	r2, #1
 8001b1a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1c:	4b63      	ldr	r3, [pc, #396]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	2380      	movs	r3, #128	; 0x80
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	4013      	ands	r3, r2
 8001b26:	d11a      	bne.n	8001b5e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b28:	4b60      	ldr	r3, [pc, #384]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	4b5f      	ldr	r3, [pc, #380]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b2e:	2180      	movs	r1, #128	; 0x80
 8001b30:	0049      	lsls	r1, r1, #1
 8001b32:	430a      	orrs	r2, r1
 8001b34:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b36:	f7fe fed5 	bl	80008e4 <HAL_GetTick>
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b3e:	e008      	b.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b40:	f7fe fed0 	bl	80008e4 <HAL_GetTick>
 8001b44:	0002      	movs	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b64      	cmp	r3, #100	; 0x64
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e0a6      	b.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b52:	4b56      	ldr	r3, [pc, #344]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	2380      	movs	r3, #128	; 0x80
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d0f0      	beq.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b5e:	4b52      	ldr	r3, [pc, #328]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b60:	6a1a      	ldr	r2, [r3, #32]
 8001b62:	23c0      	movs	r3, #192	; 0xc0
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4013      	ands	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d034      	beq.n	8001bda <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	23c0      	movs	r3, #192	; 0xc0
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4013      	ands	r3, r2
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d02c      	beq.n	8001bda <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b80:	4b49      	ldr	r3, [pc, #292]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	4a4a      	ldr	r2, [pc, #296]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001b86:	4013      	ands	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b8a:	4b47      	ldr	r3, [pc, #284]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b8c:	6a1a      	ldr	r2, [r3, #32]
 8001b8e:	4b46      	ldr	r3, [pc, #280]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b90:	2180      	movs	r1, #128	; 0x80
 8001b92:	0249      	lsls	r1, r1, #9
 8001b94:	430a      	orrs	r2, r1
 8001b96:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b98:	4b43      	ldr	r3, [pc, #268]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b9a:	6a1a      	ldr	r2, [r3, #32]
 8001b9c:	4b42      	ldr	r3, [pc, #264]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b9e:	4945      	ldr	r1, [pc, #276]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001ba0:	400a      	ands	r2, r1
 8001ba2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ba4:	4b40      	ldr	r3, [pc, #256]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2201      	movs	r2, #1
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d013      	beq.n	8001bda <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb2:	f7fe fe97 	bl	80008e4 <HAL_GetTick>
 8001bb6:	0003      	movs	r3, r0
 8001bb8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bba:	e009      	b.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bbc:	f7fe fe92 	bl	80008e4 <HAL_GetTick>
 8001bc0:	0002      	movs	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	4a3c      	ldr	r2, [pc, #240]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e067      	b.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd0:	4b35      	ldr	r3, [pc, #212]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d0f0      	beq.n	8001bbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bda:	4b33      	ldr	r3, [pc, #204]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	4a34      	ldr	r2, [pc, #208]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001be0:	4013      	ands	r3, r2
 8001be2:	0019      	movs	r1, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	4b2f      	ldr	r3, [pc, #188]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bea:	430a      	orrs	r2, r1
 8001bec:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bee:	2317      	movs	r3, #23
 8001bf0:	18fb      	adds	r3, r7, r3
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d105      	bne.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bf8:	4b2b      	ldr	r3, [pc, #172]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bfa:	69da      	ldr	r2, [r3, #28]
 8001bfc:	4b2a      	ldr	r3, [pc, #168]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bfe:	492f      	ldr	r1, [pc, #188]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001c00:	400a      	ands	r2, r1
 8001c02:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d009      	beq.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c0e:	4b26      	ldr	r3, [pc, #152]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	2203      	movs	r2, #3
 8001c14:	4393      	bics	r3, r2
 8001c16:	0019      	movs	r1, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	4b22      	ldr	r3, [pc, #136]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2202      	movs	r2, #2
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d009      	beq.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c30:	4a23      	ldr	r2, [pc, #140]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c32:	4013      	ands	r3, r2
 8001c34:	0019      	movs	r1, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68da      	ldr	r2, [r3, #12]
 8001c3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2220      	movs	r2, #32
 8001c46:	4013      	ands	r3, r2
 8001c48:	d009      	beq.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c4a:	4b17      	ldr	r3, [pc, #92]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	2210      	movs	r2, #16
 8001c50:	4393      	bics	r3, r2
 8001c52:	0019      	movs	r1, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	691a      	ldr	r2, [r3, #16]
 8001c58:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	2380      	movs	r3, #128	; 0x80
 8001c64:	029b      	lsls	r3, r3, #10
 8001c66:	4013      	ands	r3, r2
 8001c68:	d009      	beq.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	2280      	movs	r2, #128	; 0x80
 8001c70:	4393      	bics	r3, r2
 8001c72:	0019      	movs	r1, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	699a      	ldr	r2, [r3, #24]
 8001c78:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	2380      	movs	r3, #128	; 0x80
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	4013      	ands	r3, r2
 8001c88:	d009      	beq.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001c8a:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	2240      	movs	r2, #64	; 0x40
 8001c90:	4393      	bics	r3, r2
 8001c92:	0019      	movs	r1, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	695a      	ldr	r2, [r3, #20]
 8001c98:	4b03      	ldr	r3, [pc, #12]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	b006      	add	sp, #24
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40007000 	.word	0x40007000
 8001cb0:	fffffcff 	.word	0xfffffcff
 8001cb4:	fffeffff 	.word	0xfffeffff
 8001cb8:	00001388 	.word	0x00001388
 8001cbc:	efffffff 	.word	0xefffffff
 8001cc0:	fffcffff 	.word	0xfffcffff

08001cc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e044      	b.n	8001d60 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d107      	bne.n	8001cee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2274      	movs	r2, #116	; 0x74
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	0018      	movs	r0, r3
 8001cea:	f7fe fc73 	bl	80005d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2224      	movs	r2, #36	; 0x24
 8001cf2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2101      	movs	r1, #1
 8001d00:	438a      	bics	r2, r1
 8001d02:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	0018      	movs	r0, r3
 8001d08:	f000 fc36 	bl	8002578 <UART_SetConfig>
 8001d0c:	0003      	movs	r3, r0
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d101      	bne.n	8001d16 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e024      	b.n	8001d60 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	0018      	movs	r0, r3
 8001d22:	f000 fdb1 	bl	8002888 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	490d      	ldr	r1, [pc, #52]	; (8001d68 <HAL_UART_Init+0xa4>)
 8001d32:	400a      	ands	r2, r1
 8001d34:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	212a      	movs	r1, #42	; 0x2a
 8001d42:	438a      	bics	r2, r1
 8001d44:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2101      	movs	r1, #1
 8001d52:	430a      	orrs	r2, r1
 8001d54:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f000 fe49 	bl	80029f0 <UART_CheckIdleState>
 8001d5e:	0003      	movs	r3, r0
}
 8001d60:	0018      	movs	r0, r3
 8001d62:	46bd      	mov	sp, r7
 8001d64:	b002      	add	sp, #8
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	ffffb7ff 	.word	0xffffb7ff

08001d6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	; 0x28
 8001d70:	af02      	add	r7, sp, #8
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	603b      	str	r3, [r7, #0]
 8001d78:	1dbb      	adds	r3, r7, #6
 8001d7a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d80:	2b20      	cmp	r3, #32
 8001d82:	d000      	beq.n	8001d86 <HAL_UART_Transmit+0x1a>
 8001d84:	e096      	b.n	8001eb4 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <HAL_UART_Transmit+0x28>
 8001d8c:	1dbb      	adds	r3, r7, #6
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e08e      	b.n	8001eb6 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	015b      	lsls	r3, r3, #5
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d109      	bne.n	8001db8 <HAL_UART_Transmit+0x4c>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d105      	bne.n	8001db8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	2201      	movs	r2, #1
 8001db0:	4013      	ands	r3, r2
 8001db2:	d001      	beq.n	8001db8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e07e      	b.n	8001eb6 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2274      	movs	r2, #116	; 0x74
 8001dbc:	5c9b      	ldrb	r3, [r3, r2]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d101      	bne.n	8001dc6 <HAL_UART_Transmit+0x5a>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	e077      	b.n	8001eb6 <HAL_UART_Transmit+0x14a>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2274      	movs	r2, #116	; 0x74
 8001dca:	2101      	movs	r1, #1
 8001dcc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2280      	movs	r2, #128	; 0x80
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2221      	movs	r2, #33	; 0x21
 8001dda:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ddc:	f7fe fd82 	bl	80008e4 <HAL_GetTick>
 8001de0:	0003      	movs	r3, r0
 8001de2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	1dba      	adds	r2, r7, #6
 8001de8:	2150      	movs	r1, #80	; 0x50
 8001dea:	8812      	ldrh	r2, [r2, #0]
 8001dec:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	1dba      	adds	r2, r7, #6
 8001df2:	2152      	movs	r1, #82	; 0x52
 8001df4:	8812      	ldrh	r2, [r2, #0]
 8001df6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	2380      	movs	r3, #128	; 0x80
 8001dfe:	015b      	lsls	r3, r3, #5
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d108      	bne.n	8001e16 <HAL_UART_Transmit+0xaa>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d104      	bne.n	8001e16 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	61bb      	str	r3, [r7, #24]
 8001e14:	e003      	b.n	8001e1e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2274      	movs	r2, #116	; 0x74
 8001e22:	2100      	movs	r1, #0
 8001e24:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8001e26:	e02d      	b.n	8001e84 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	0013      	movs	r3, r2
 8001e32:	2200      	movs	r2, #0
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	f000 fe23 	bl	8002a80 <UART_WaitOnFlagUntilTimeout>
 8001e3a:	1e03      	subs	r3, r0, #0
 8001e3c:	d001      	beq.n	8001e42 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e039      	b.n	8001eb6 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d10b      	bne.n	8001e60 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	881a      	ldrh	r2, [r3, #0]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	05d2      	lsls	r2, r2, #23
 8001e52:	0dd2      	lsrs	r2, r2, #23
 8001e54:	b292      	uxth	r2, r2
 8001e56:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	3302      	adds	r3, #2
 8001e5c:	61bb      	str	r3, [r7, #24]
 8001e5e:	e008      	b.n	8001e72 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	781a      	ldrb	r2, [r3, #0]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	b292      	uxth	r2, r2
 8001e6a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2252      	movs	r2, #82	; 0x52
 8001e76:	5a9b      	ldrh	r3, [r3, r2]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	b299      	uxth	r1, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2252      	movs	r2, #82	; 0x52
 8001e82:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2252      	movs	r2, #82	; 0x52
 8001e88:	5a9b      	ldrh	r3, [r3, r2]
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1cb      	bne.n	8001e28 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	0013      	movs	r3, r2
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2140      	movs	r1, #64	; 0x40
 8001e9e:	f000 fdef 	bl	8002a80 <UART_WaitOnFlagUntilTimeout>
 8001ea2:	1e03      	subs	r3, r0, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e005      	b.n	8001eb6 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2220      	movs	r2, #32
 8001eae:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	e000      	b.n	8001eb6 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001eb4:	2302      	movs	r3, #2
  }
}
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	b008      	add	sp, #32
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b088      	sub	sp, #32
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	60f8      	str	r0, [r7, #12]
 8001ec6:	60b9      	str	r1, [r7, #8]
 8001ec8:	1dbb      	adds	r3, r7, #6
 8001eca:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ed0:	2b20      	cmp	r3, #32
 8001ed2:	d150      	bne.n	8001f76 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_UART_Receive_IT+0x24>
 8001eda:	1dbb      	adds	r3, r7, #6
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e048      	b.n	8001f78 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	2380      	movs	r3, #128	; 0x80
 8001eec:	015b      	lsls	r3, r3, #5
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d109      	bne.n	8001f06 <HAL_UART_Receive_IT+0x48>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d105      	bne.n	8001f06 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	2201      	movs	r2, #1
 8001efe:	4013      	ands	r3, r2
 8001f00:	d001      	beq.n	8001f06 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e038      	b.n	8001f78 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2274      	movs	r2, #116	; 0x74
 8001f0a:	5c9b      	ldrb	r3, [r3, r2]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d101      	bne.n	8001f14 <HAL_UART_Receive_IT+0x56>
 8001f10:	2302      	movs	r3, #2
 8001f12:	e031      	b.n	8001f78 <HAL_UART_Receive_IT+0xba>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2274      	movs	r2, #116	; 0x74
 8001f18:	2101      	movs	r1, #1
 8001f1a:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	2380      	movs	r3, #128	; 0x80
 8001f2a:	041b      	lsls	r3, r3, #16
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	d019      	beq.n	8001f64 <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f30:	f3ef 8310 	mrs	r3, PRIMASK
 8001f34:	613b      	str	r3, [r7, #16]
  return(result);
 8001f36:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001f38:	61fb      	str	r3, [r7, #28]
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f383 8810 	msr	PRIMASK, r3
}
 8001f44:	46c0      	nop			; (mov r8, r8)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2180      	movs	r1, #128	; 0x80
 8001f52:	04c9      	lsls	r1, r1, #19
 8001f54:	430a      	orrs	r2, r1
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	f383 8810 	msr	PRIMASK, r3
}
 8001f62:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001f64:	1dbb      	adds	r3, r7, #6
 8001f66:	881a      	ldrh	r2, [r3, #0]
 8001f68:	68b9      	ldr	r1, [r7, #8]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f000 fe4b 	bl	8002c08 <UART_Start_Receive_IT>
 8001f72:	0003      	movs	r3, r0
 8001f74:	e000      	b.n	8001f78 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8001f76:	2302      	movs	r3, #2
  }
}
 8001f78:	0018      	movs	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	b008      	add	sp, #32
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f80:	b590      	push	{r4, r7, lr}
 8001f82:	b0ab      	sub	sp, #172	; 0xac
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	22a4      	movs	r2, #164	; 0xa4
 8001f90:	18b9      	adds	r1, r7, r2
 8001f92:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	20a0      	movs	r0, #160	; 0xa0
 8001f9c:	1839      	adds	r1, r7, r0
 8001f9e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	219c      	movs	r1, #156	; 0x9c
 8001fa8:	1879      	adds	r1, r7, r1
 8001faa:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001fac:	0011      	movs	r1, r2
 8001fae:	18bb      	adds	r3, r7, r2
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a99      	ldr	r2, [pc, #612]	; (8002218 <HAL_UART_IRQHandler+0x298>)
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	2298      	movs	r2, #152	; 0x98
 8001fb8:	18bc      	adds	r4, r7, r2
 8001fba:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8001fbc:	18bb      	adds	r3, r7, r2
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d114      	bne.n	8001fee <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001fc4:	187b      	adds	r3, r7, r1
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2220      	movs	r2, #32
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d00f      	beq.n	8001fee <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001fce:	183b      	adds	r3, r7, r0
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d00a      	beq.n	8001fee <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d100      	bne.n	8001fe2 <HAL_UART_IRQHandler+0x62>
 8001fe0:	e296      	b.n	8002510 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	0010      	movs	r0, r2
 8001fea:	4798      	blx	r3
      }
      return;
 8001fec:	e290      	b.n	8002510 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001fee:	2398      	movs	r3, #152	; 0x98
 8001ff0:	18fb      	adds	r3, r7, r3
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d100      	bne.n	8001ffa <HAL_UART_IRQHandler+0x7a>
 8001ff8:	e114      	b.n	8002224 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001ffa:	239c      	movs	r3, #156	; 0x9c
 8001ffc:	18fb      	adds	r3, r7, r3
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2201      	movs	r2, #1
 8002002:	4013      	ands	r3, r2
 8002004:	d106      	bne.n	8002014 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002006:	23a0      	movs	r3, #160	; 0xa0
 8002008:	18fb      	adds	r3, r7, r3
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a83      	ldr	r2, [pc, #524]	; (800221c <HAL_UART_IRQHandler+0x29c>)
 800200e:	4013      	ands	r3, r2
 8002010:	d100      	bne.n	8002014 <HAL_UART_IRQHandler+0x94>
 8002012:	e107      	b.n	8002224 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002014:	23a4      	movs	r3, #164	; 0xa4
 8002016:	18fb      	adds	r3, r7, r3
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2201      	movs	r2, #1
 800201c:	4013      	ands	r3, r2
 800201e:	d012      	beq.n	8002046 <HAL_UART_IRQHandler+0xc6>
 8002020:	23a0      	movs	r3, #160	; 0xa0
 8002022:	18fb      	adds	r3, r7, r3
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	4013      	ands	r3, r2
 800202c:	d00b      	beq.n	8002046 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2201      	movs	r2, #1
 8002034:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2280      	movs	r2, #128	; 0x80
 800203a:	589b      	ldr	r3, [r3, r2]
 800203c:	2201      	movs	r2, #1
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2180      	movs	r1, #128	; 0x80
 8002044:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002046:	23a4      	movs	r3, #164	; 0xa4
 8002048:	18fb      	adds	r3, r7, r3
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2202      	movs	r2, #2
 800204e:	4013      	ands	r3, r2
 8002050:	d011      	beq.n	8002076 <HAL_UART_IRQHandler+0xf6>
 8002052:	239c      	movs	r3, #156	; 0x9c
 8002054:	18fb      	adds	r3, r7, r3
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2201      	movs	r2, #1
 800205a:	4013      	ands	r3, r2
 800205c:	d00b      	beq.n	8002076 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2202      	movs	r2, #2
 8002064:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2280      	movs	r2, #128	; 0x80
 800206a:	589b      	ldr	r3, [r3, r2]
 800206c:	2204      	movs	r2, #4
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2180      	movs	r1, #128	; 0x80
 8002074:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002076:	23a4      	movs	r3, #164	; 0xa4
 8002078:	18fb      	adds	r3, r7, r3
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2204      	movs	r2, #4
 800207e:	4013      	ands	r3, r2
 8002080:	d011      	beq.n	80020a6 <HAL_UART_IRQHandler+0x126>
 8002082:	239c      	movs	r3, #156	; 0x9c
 8002084:	18fb      	adds	r3, r7, r3
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2201      	movs	r2, #1
 800208a:	4013      	ands	r3, r2
 800208c:	d00b      	beq.n	80020a6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2204      	movs	r2, #4
 8002094:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2280      	movs	r2, #128	; 0x80
 800209a:	589b      	ldr	r3, [r3, r2]
 800209c:	2202      	movs	r2, #2
 800209e:	431a      	orrs	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2180      	movs	r1, #128	; 0x80
 80020a4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80020a6:	23a4      	movs	r3, #164	; 0xa4
 80020a8:	18fb      	adds	r3, r7, r3
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2208      	movs	r2, #8
 80020ae:	4013      	ands	r3, r2
 80020b0:	d017      	beq.n	80020e2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80020b2:	23a0      	movs	r3, #160	; 0xa0
 80020b4:	18fb      	adds	r3, r7, r3
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2220      	movs	r2, #32
 80020ba:	4013      	ands	r3, r2
 80020bc:	d105      	bne.n	80020ca <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80020be:	239c      	movs	r3, #156	; 0x9c
 80020c0:	18fb      	adds	r3, r7, r3
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2201      	movs	r2, #1
 80020c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80020c8:	d00b      	beq.n	80020e2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2208      	movs	r2, #8
 80020d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2280      	movs	r2, #128	; 0x80
 80020d6:	589b      	ldr	r3, [r3, r2]
 80020d8:	2208      	movs	r2, #8
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2180      	movs	r1, #128	; 0x80
 80020e0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80020e2:	23a4      	movs	r3, #164	; 0xa4
 80020e4:	18fb      	adds	r3, r7, r3
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	2380      	movs	r3, #128	; 0x80
 80020ea:	011b      	lsls	r3, r3, #4
 80020ec:	4013      	ands	r3, r2
 80020ee:	d013      	beq.n	8002118 <HAL_UART_IRQHandler+0x198>
 80020f0:	23a0      	movs	r3, #160	; 0xa0
 80020f2:	18fb      	adds	r3, r7, r3
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	2380      	movs	r3, #128	; 0x80
 80020f8:	04db      	lsls	r3, r3, #19
 80020fa:	4013      	ands	r3, r2
 80020fc:	d00c      	beq.n	8002118 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2280      	movs	r2, #128	; 0x80
 8002104:	0112      	lsls	r2, r2, #4
 8002106:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2280      	movs	r2, #128	; 0x80
 800210c:	589b      	ldr	r3, [r3, r2]
 800210e:	2220      	movs	r2, #32
 8002110:	431a      	orrs	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2180      	movs	r1, #128	; 0x80
 8002116:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2280      	movs	r2, #128	; 0x80
 800211c:	589b      	ldr	r3, [r3, r2]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d100      	bne.n	8002124 <HAL_UART_IRQHandler+0x1a4>
 8002122:	e1f7      	b.n	8002514 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002124:	23a4      	movs	r3, #164	; 0xa4
 8002126:	18fb      	adds	r3, r7, r3
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2220      	movs	r2, #32
 800212c:	4013      	ands	r3, r2
 800212e:	d00e      	beq.n	800214e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002130:	23a0      	movs	r3, #160	; 0xa0
 8002132:	18fb      	adds	r3, r7, r3
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2220      	movs	r2, #32
 8002138:	4013      	ands	r3, r2
 800213a:	d008      	beq.n	800214e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002140:	2b00      	cmp	r3, #0
 8002142:	d004      	beq.n	800214e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	0010      	movs	r0, r2
 800214c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2280      	movs	r2, #128	; 0x80
 8002152:	589b      	ldr	r3, [r3, r2]
 8002154:	2194      	movs	r1, #148	; 0x94
 8002156:	187a      	adds	r2, r7, r1
 8002158:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2240      	movs	r2, #64	; 0x40
 8002162:	4013      	ands	r3, r2
 8002164:	2b40      	cmp	r3, #64	; 0x40
 8002166:	d004      	beq.n	8002172 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002168:	187b      	adds	r3, r7, r1
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2228      	movs	r2, #40	; 0x28
 800216e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002170:	d047      	beq.n	8002202 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	0018      	movs	r0, r3
 8002176:	f000 fdf7 	bl	8002d68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	2240      	movs	r2, #64	; 0x40
 8002182:	4013      	ands	r3, r2
 8002184:	2b40      	cmp	r3, #64	; 0x40
 8002186:	d137      	bne.n	80021f8 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002188:	f3ef 8310 	mrs	r3, PRIMASK
 800218c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800218e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002190:	2090      	movs	r0, #144	; 0x90
 8002192:	183a      	adds	r2, r7, r0
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	2301      	movs	r3, #1
 8002198:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800219a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800219c:	f383 8810 	msr	PRIMASK, r3
}
 80021a0:	46c0      	nop			; (mov r8, r8)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2140      	movs	r1, #64	; 0x40
 80021ae:	438a      	bics	r2, r1
 80021b0:	609a      	str	r2, [r3, #8]
 80021b2:	183b      	adds	r3, r7, r0
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021ba:	f383 8810 	msr	PRIMASK, r3
}
 80021be:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d012      	beq.n	80021ee <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021cc:	4a14      	ldr	r2, [pc, #80]	; (8002220 <HAL_UART_IRQHandler+0x2a0>)
 80021ce:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d4:	0018      	movs	r0, r3
 80021d6:	f7fe fd9c 	bl	8000d12 <HAL_DMA_Abort_IT>
 80021da:	1e03      	subs	r3, r0, #0
 80021dc:	d01a      	beq.n	8002214 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e8:	0018      	movs	r0, r3
 80021ea:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021ec:	e012      	b.n	8002214 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	0018      	movs	r0, r3
 80021f2:	f000 f9ad 	bl	8002550 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021f6:	e00d      	b.n	8002214 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	0018      	movs	r0, r3
 80021fc:	f000 f9a8 	bl	8002550 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002200:	e008      	b.n	8002214 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	0018      	movs	r0, r3
 8002206:	f000 f9a3 	bl	8002550 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2280      	movs	r2, #128	; 0x80
 800220e:	2100      	movs	r1, #0
 8002210:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002212:	e17f      	b.n	8002514 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002214:	46c0      	nop			; (mov r8, r8)
    return;
 8002216:	e17d      	b.n	8002514 <HAL_UART_IRQHandler+0x594>
 8002218:	0000080f 	.word	0x0000080f
 800221c:	04000120 	.word	0x04000120
 8002220:	08002e2d 	.word	0x08002e2d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002228:	2b01      	cmp	r3, #1
 800222a:	d000      	beq.n	800222e <HAL_UART_IRQHandler+0x2ae>
 800222c:	e131      	b.n	8002492 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800222e:	23a4      	movs	r3, #164	; 0xa4
 8002230:	18fb      	adds	r3, r7, r3
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2210      	movs	r2, #16
 8002236:	4013      	ands	r3, r2
 8002238:	d100      	bne.n	800223c <HAL_UART_IRQHandler+0x2bc>
 800223a:	e12a      	b.n	8002492 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800223c:	23a0      	movs	r3, #160	; 0xa0
 800223e:	18fb      	adds	r3, r7, r3
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2210      	movs	r2, #16
 8002244:	4013      	ands	r3, r2
 8002246:	d100      	bne.n	800224a <HAL_UART_IRQHandler+0x2ca>
 8002248:	e123      	b.n	8002492 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2210      	movs	r2, #16
 8002250:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	2240      	movs	r2, #64	; 0x40
 800225a:	4013      	ands	r3, r2
 800225c:	2b40      	cmp	r3, #64	; 0x40
 800225e:	d000      	beq.n	8002262 <HAL_UART_IRQHandler+0x2e2>
 8002260:	e09b      	b.n	800239a <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	217e      	movs	r1, #126	; 0x7e
 800226c:	187b      	adds	r3, r7, r1
 800226e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002270:	187b      	adds	r3, r7, r1
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d100      	bne.n	800227a <HAL_UART_IRQHandler+0x2fa>
 8002278:	e14e      	b.n	8002518 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2258      	movs	r2, #88	; 0x58
 800227e:	5a9b      	ldrh	r3, [r3, r2]
 8002280:	187a      	adds	r2, r7, r1
 8002282:	8812      	ldrh	r2, [r2, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d300      	bcc.n	800228a <HAL_UART_IRQHandler+0x30a>
 8002288:	e146      	b.n	8002518 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	187a      	adds	r2, r7, r1
 800228e:	215a      	movs	r1, #90	; 0x5a
 8002290:	8812      	ldrh	r2, [r2, #0]
 8002292:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	2b20      	cmp	r3, #32
 800229c:	d06e      	beq.n	800237c <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800229e:	f3ef 8310 	mrs	r3, PRIMASK
 80022a2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80022a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80022a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80022a8:	2301      	movs	r3, #1
 80022aa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ae:	f383 8810 	msr	PRIMASK, r3
}
 80022b2:	46c0      	nop			; (mov r8, r8)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	499a      	ldr	r1, [pc, #616]	; (8002528 <HAL_UART_IRQHandler+0x5a8>)
 80022c0:	400a      	ands	r2, r1
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022c6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ca:	f383 8810 	msr	PRIMASK, r3
}
 80022ce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022d0:	f3ef 8310 	mrs	r3, PRIMASK
 80022d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80022d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022d8:	677b      	str	r3, [r7, #116]	; 0x74
 80022da:	2301      	movs	r3, #1
 80022dc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022e0:	f383 8810 	msr	PRIMASK, r3
}
 80022e4:	46c0      	nop			; (mov r8, r8)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2101      	movs	r1, #1
 80022f2:	438a      	bics	r2, r1
 80022f4:	609a      	str	r2, [r3, #8]
 80022f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022f8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022fc:	f383 8810 	msr	PRIMASK, r3
}
 8002300:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002302:	f3ef 8310 	mrs	r3, PRIMASK
 8002306:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002308:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800230a:	673b      	str	r3, [r7, #112]	; 0x70
 800230c:	2301      	movs	r3, #1
 800230e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002312:	f383 8810 	msr	PRIMASK, r3
}
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2140      	movs	r1, #64	; 0x40
 8002324:	438a      	bics	r2, r1
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800232a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800232c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800232e:	f383 8810 	msr	PRIMASK, r3
}
 8002332:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2220      	movs	r2, #32
 8002338:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002340:	f3ef 8310 	mrs	r3, PRIMASK
 8002344:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002346:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002348:	66fb      	str	r3, [r7, #108]	; 0x6c
 800234a:	2301      	movs	r3, #1
 800234c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800234e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002350:	f383 8810 	msr	PRIMASK, r3
}
 8002354:	46c0      	nop			; (mov r8, r8)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2110      	movs	r1, #16
 8002362:	438a      	bics	r2, r1
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002368:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800236a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800236c:	f383 8810 	msr	PRIMASK, r3
}
 8002370:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002376:	0018      	movs	r0, r3
 8002378:	f7fe fc93 	bl	8000ca2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2258      	movs	r2, #88	; 0x58
 8002380:	5a9a      	ldrh	r2, [r3, r2]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	215a      	movs	r1, #90	; 0x5a
 8002386:	5a5b      	ldrh	r3, [r3, r1]
 8002388:	b29b      	uxth	r3, r3
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	b29a      	uxth	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	0011      	movs	r1, r2
 8002392:	0018      	movs	r0, r3
 8002394:	f000 f8e4 	bl	8002560 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002398:	e0be      	b.n	8002518 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2258      	movs	r2, #88	; 0x58
 800239e:	5a99      	ldrh	r1, [r3, r2]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	225a      	movs	r2, #90	; 0x5a
 80023a4:	5a9b      	ldrh	r3, [r3, r2]
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	208e      	movs	r0, #142	; 0x8e
 80023aa:	183b      	adds	r3, r7, r0
 80023ac:	1a8a      	subs	r2, r1, r2
 80023ae:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	225a      	movs	r2, #90	; 0x5a
 80023b4:	5a9b      	ldrh	r3, [r3, r2]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d100      	bne.n	80023be <HAL_UART_IRQHandler+0x43e>
 80023bc:	e0ae      	b.n	800251c <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80023be:	183b      	adds	r3, r7, r0
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d100      	bne.n	80023c8 <HAL_UART_IRQHandler+0x448>
 80023c6:	e0a9      	b.n	800251c <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023c8:	f3ef 8310 	mrs	r3, PRIMASK
 80023cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80023ce:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023d0:	2488      	movs	r4, #136	; 0x88
 80023d2:	193a      	adds	r2, r7, r4
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	2301      	movs	r3, #1
 80023d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	f383 8810 	msr	PRIMASK, r3
}
 80023e0:	46c0      	nop			; (mov r8, r8)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	494f      	ldr	r1, [pc, #316]	; (800252c <HAL_UART_IRQHandler+0x5ac>)
 80023ee:	400a      	ands	r2, r1
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	193b      	adds	r3, r7, r4
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	f383 8810 	msr	PRIMASK, r3
}
 80023fe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002400:	f3ef 8310 	mrs	r3, PRIMASK
 8002404:	61bb      	str	r3, [r7, #24]
  return(result);
 8002406:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002408:	2484      	movs	r4, #132	; 0x84
 800240a:	193a      	adds	r2, r7, r4
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	2301      	movs	r3, #1
 8002410:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	f383 8810 	msr	PRIMASK, r3
}
 8002418:	46c0      	nop			; (mov r8, r8)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2101      	movs	r1, #1
 8002426:	438a      	bics	r2, r1
 8002428:	609a      	str	r2, [r3, #8]
 800242a:	193b      	adds	r3, r7, r4
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002430:	6a3b      	ldr	r3, [r7, #32]
 8002432:	f383 8810 	msr	PRIMASK, r3
}
 8002436:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2220      	movs	r2, #32
 800243c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800244a:	f3ef 8310 	mrs	r3, PRIMASK
 800244e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002452:	2480      	movs	r4, #128	; 0x80
 8002454:	193a      	adds	r2, r7, r4
 8002456:	6013      	str	r3, [r2, #0]
 8002458:	2301      	movs	r3, #1
 800245a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800245c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245e:	f383 8810 	msr	PRIMASK, r3
}
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2110      	movs	r1, #16
 8002470:	438a      	bics	r2, r1
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	193b      	adds	r3, r7, r4
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800247a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247c:	f383 8810 	msr	PRIMASK, r3
}
 8002480:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002482:	183b      	adds	r3, r7, r0
 8002484:	881a      	ldrh	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	0011      	movs	r1, r2
 800248a:	0018      	movs	r0, r3
 800248c:	f000 f868 	bl	8002560 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002490:	e044      	b.n	800251c <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002492:	23a4      	movs	r3, #164	; 0xa4
 8002494:	18fb      	adds	r3, r7, r3
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	2380      	movs	r3, #128	; 0x80
 800249a:	035b      	lsls	r3, r3, #13
 800249c:	4013      	ands	r3, r2
 800249e:	d010      	beq.n	80024c2 <HAL_UART_IRQHandler+0x542>
 80024a0:	239c      	movs	r3, #156	; 0x9c
 80024a2:	18fb      	adds	r3, r7, r3
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	2380      	movs	r3, #128	; 0x80
 80024a8:	03db      	lsls	r3, r3, #15
 80024aa:	4013      	ands	r3, r2
 80024ac:	d009      	beq.n	80024c2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2280      	movs	r2, #128	; 0x80
 80024b4:	0352      	lsls	r2, r2, #13
 80024b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	0018      	movs	r0, r3
 80024bc:	f000 fe60 	bl	8003180 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80024c0:	e02f      	b.n	8002522 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80024c2:	23a4      	movs	r3, #164	; 0xa4
 80024c4:	18fb      	adds	r3, r7, r3
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2280      	movs	r2, #128	; 0x80
 80024ca:	4013      	ands	r3, r2
 80024cc:	d00f      	beq.n	80024ee <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80024ce:	23a0      	movs	r3, #160	; 0xa0
 80024d0:	18fb      	adds	r3, r7, r3
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2280      	movs	r2, #128	; 0x80
 80024d6:	4013      	ands	r3, r2
 80024d8:	d009      	beq.n	80024ee <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d01e      	beq.n	8002520 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	0010      	movs	r0, r2
 80024ea:	4798      	blx	r3
    }
    return;
 80024ec:	e018      	b.n	8002520 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80024ee:	23a4      	movs	r3, #164	; 0xa4
 80024f0:	18fb      	adds	r3, r7, r3
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2240      	movs	r2, #64	; 0x40
 80024f6:	4013      	ands	r3, r2
 80024f8:	d013      	beq.n	8002522 <HAL_UART_IRQHandler+0x5a2>
 80024fa:	23a0      	movs	r3, #160	; 0xa0
 80024fc:	18fb      	adds	r3, r7, r3
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2240      	movs	r2, #64	; 0x40
 8002502:	4013      	ands	r3, r2
 8002504:	d00d      	beq.n	8002522 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	0018      	movs	r0, r3
 800250a:	f000 fca6 	bl	8002e5a <UART_EndTransmit_IT>
    return;
 800250e:	e008      	b.n	8002522 <HAL_UART_IRQHandler+0x5a2>
      return;
 8002510:	46c0      	nop			; (mov r8, r8)
 8002512:	e006      	b.n	8002522 <HAL_UART_IRQHandler+0x5a2>
    return;
 8002514:	46c0      	nop			; (mov r8, r8)
 8002516:	e004      	b.n	8002522 <HAL_UART_IRQHandler+0x5a2>
      return;
 8002518:	46c0      	nop			; (mov r8, r8)
 800251a:	e002      	b.n	8002522 <HAL_UART_IRQHandler+0x5a2>
      return;
 800251c:	46c0      	nop			; (mov r8, r8)
 800251e:	e000      	b.n	8002522 <HAL_UART_IRQHandler+0x5a2>
    return;
 8002520:	46c0      	nop			; (mov r8, r8)
  }

}
 8002522:	46bd      	mov	sp, r7
 8002524:	b02b      	add	sp, #172	; 0xac
 8002526:	bd90      	pop	{r4, r7, pc}
 8002528:	fffffeff 	.word	0xfffffeff
 800252c:	fffffedf 	.word	0xfffffedf

08002530 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002538:	46c0      	nop			; (mov r8, r8)
 800253a:	46bd      	mov	sp, r7
 800253c:	b002      	add	sp, #8
 800253e:	bd80      	pop	{r7, pc}

08002540 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002548:	46c0      	nop			; (mov r8, r8)
 800254a:	46bd      	mov	sp, r7
 800254c:	b002      	add	sp, #8
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002558:	46c0      	nop			; (mov r8, r8)
 800255a:	46bd      	mov	sp, r7
 800255c:	b002      	add	sp, #8
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	000a      	movs	r2, r1
 800256a:	1cbb      	adds	r3, r7, #2
 800256c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	46bd      	mov	sp, r7
 8002572:	b002      	add	sp, #8
 8002574:	bd80      	pop	{r7, pc}
	...

08002578 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b088      	sub	sp, #32
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002580:	231e      	movs	r3, #30
 8002582:	18fb      	adds	r3, r7, r3
 8002584:	2200      	movs	r2, #0
 8002586:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	431a      	orrs	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	431a      	orrs	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	4313      	orrs	r3, r2
 800259e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4aaf      	ldr	r2, [pc, #700]	; (8002864 <UART_SetConfig+0x2ec>)
 80025a8:	4013      	ands	r3, r2
 80025aa:	0019      	movs	r1, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	4aaa      	ldr	r2, [pc, #680]	; (8002868 <UART_SetConfig+0x2f0>)
 80025be:	4013      	ands	r3, r2
 80025c0:	0019      	movs	r1, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	4313      	orrs	r3, r2
 80025dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	4aa1      	ldr	r2, [pc, #644]	; (800286c <UART_SetConfig+0x2f4>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	0019      	movs	r1, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a9d      	ldr	r2, [pc, #628]	; (8002870 <UART_SetConfig+0x2f8>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d127      	bne.n	800264e <UART_SetConfig+0xd6>
 80025fe:	4b9d      	ldr	r3, [pc, #628]	; (8002874 <UART_SetConfig+0x2fc>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	2203      	movs	r2, #3
 8002604:	4013      	ands	r3, r2
 8002606:	2b03      	cmp	r3, #3
 8002608:	d00d      	beq.n	8002626 <UART_SetConfig+0xae>
 800260a:	d81b      	bhi.n	8002644 <UART_SetConfig+0xcc>
 800260c:	2b02      	cmp	r3, #2
 800260e:	d014      	beq.n	800263a <UART_SetConfig+0xc2>
 8002610:	d818      	bhi.n	8002644 <UART_SetConfig+0xcc>
 8002612:	2b00      	cmp	r3, #0
 8002614:	d002      	beq.n	800261c <UART_SetConfig+0xa4>
 8002616:	2b01      	cmp	r3, #1
 8002618:	d00a      	beq.n	8002630 <UART_SetConfig+0xb8>
 800261a:	e013      	b.n	8002644 <UART_SetConfig+0xcc>
 800261c:	231f      	movs	r3, #31
 800261e:	18fb      	adds	r3, r7, r3
 8002620:	2200      	movs	r2, #0
 8002622:	701a      	strb	r2, [r3, #0]
 8002624:	e065      	b.n	80026f2 <UART_SetConfig+0x17a>
 8002626:	231f      	movs	r3, #31
 8002628:	18fb      	adds	r3, r7, r3
 800262a:	2202      	movs	r2, #2
 800262c:	701a      	strb	r2, [r3, #0]
 800262e:	e060      	b.n	80026f2 <UART_SetConfig+0x17a>
 8002630:	231f      	movs	r3, #31
 8002632:	18fb      	adds	r3, r7, r3
 8002634:	2204      	movs	r2, #4
 8002636:	701a      	strb	r2, [r3, #0]
 8002638:	e05b      	b.n	80026f2 <UART_SetConfig+0x17a>
 800263a:	231f      	movs	r3, #31
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	2208      	movs	r2, #8
 8002640:	701a      	strb	r2, [r3, #0]
 8002642:	e056      	b.n	80026f2 <UART_SetConfig+0x17a>
 8002644:	231f      	movs	r3, #31
 8002646:	18fb      	adds	r3, r7, r3
 8002648:	2210      	movs	r2, #16
 800264a:	701a      	strb	r2, [r3, #0]
 800264c:	e051      	b.n	80026f2 <UART_SetConfig+0x17a>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a89      	ldr	r2, [pc, #548]	; (8002878 <UART_SetConfig+0x300>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d134      	bne.n	80026c2 <UART_SetConfig+0x14a>
 8002658:	4b86      	ldr	r3, [pc, #536]	; (8002874 <UART_SetConfig+0x2fc>)
 800265a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800265c:	23c0      	movs	r3, #192	; 0xc0
 800265e:	029b      	lsls	r3, r3, #10
 8002660:	4013      	ands	r3, r2
 8002662:	22c0      	movs	r2, #192	; 0xc0
 8002664:	0292      	lsls	r2, r2, #10
 8002666:	4293      	cmp	r3, r2
 8002668:	d017      	beq.n	800269a <UART_SetConfig+0x122>
 800266a:	22c0      	movs	r2, #192	; 0xc0
 800266c:	0292      	lsls	r2, r2, #10
 800266e:	4293      	cmp	r3, r2
 8002670:	d822      	bhi.n	80026b8 <UART_SetConfig+0x140>
 8002672:	2280      	movs	r2, #128	; 0x80
 8002674:	0292      	lsls	r2, r2, #10
 8002676:	4293      	cmp	r3, r2
 8002678:	d019      	beq.n	80026ae <UART_SetConfig+0x136>
 800267a:	2280      	movs	r2, #128	; 0x80
 800267c:	0292      	lsls	r2, r2, #10
 800267e:	4293      	cmp	r3, r2
 8002680:	d81a      	bhi.n	80026b8 <UART_SetConfig+0x140>
 8002682:	2b00      	cmp	r3, #0
 8002684:	d004      	beq.n	8002690 <UART_SetConfig+0x118>
 8002686:	2280      	movs	r2, #128	; 0x80
 8002688:	0252      	lsls	r2, r2, #9
 800268a:	4293      	cmp	r3, r2
 800268c:	d00a      	beq.n	80026a4 <UART_SetConfig+0x12c>
 800268e:	e013      	b.n	80026b8 <UART_SetConfig+0x140>
 8002690:	231f      	movs	r3, #31
 8002692:	18fb      	adds	r3, r7, r3
 8002694:	2200      	movs	r2, #0
 8002696:	701a      	strb	r2, [r3, #0]
 8002698:	e02b      	b.n	80026f2 <UART_SetConfig+0x17a>
 800269a:	231f      	movs	r3, #31
 800269c:	18fb      	adds	r3, r7, r3
 800269e:	2202      	movs	r2, #2
 80026a0:	701a      	strb	r2, [r3, #0]
 80026a2:	e026      	b.n	80026f2 <UART_SetConfig+0x17a>
 80026a4:	231f      	movs	r3, #31
 80026a6:	18fb      	adds	r3, r7, r3
 80026a8:	2204      	movs	r2, #4
 80026aa:	701a      	strb	r2, [r3, #0]
 80026ac:	e021      	b.n	80026f2 <UART_SetConfig+0x17a>
 80026ae:	231f      	movs	r3, #31
 80026b0:	18fb      	adds	r3, r7, r3
 80026b2:	2208      	movs	r2, #8
 80026b4:	701a      	strb	r2, [r3, #0]
 80026b6:	e01c      	b.n	80026f2 <UART_SetConfig+0x17a>
 80026b8:	231f      	movs	r3, #31
 80026ba:	18fb      	adds	r3, r7, r3
 80026bc:	2210      	movs	r2, #16
 80026be:	701a      	strb	r2, [r3, #0]
 80026c0:	e017      	b.n	80026f2 <UART_SetConfig+0x17a>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a6d      	ldr	r2, [pc, #436]	; (800287c <UART_SetConfig+0x304>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d104      	bne.n	80026d6 <UART_SetConfig+0x15e>
 80026cc:	231f      	movs	r3, #31
 80026ce:	18fb      	adds	r3, r7, r3
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]
 80026d4:	e00d      	b.n	80026f2 <UART_SetConfig+0x17a>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a69      	ldr	r2, [pc, #420]	; (8002880 <UART_SetConfig+0x308>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d104      	bne.n	80026ea <UART_SetConfig+0x172>
 80026e0:	231f      	movs	r3, #31
 80026e2:	18fb      	adds	r3, r7, r3
 80026e4:	2200      	movs	r2, #0
 80026e6:	701a      	strb	r2, [r3, #0]
 80026e8:	e003      	b.n	80026f2 <UART_SetConfig+0x17a>
 80026ea:	231f      	movs	r3, #31
 80026ec:	18fb      	adds	r3, r7, r3
 80026ee:	2210      	movs	r2, #16
 80026f0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69da      	ldr	r2, [r3, #28]
 80026f6:	2380      	movs	r3, #128	; 0x80
 80026f8:	021b      	lsls	r3, r3, #8
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d15d      	bne.n	80027ba <UART_SetConfig+0x242>
  {
    switch (clocksource)
 80026fe:	231f      	movs	r3, #31
 8002700:	18fb      	adds	r3, r7, r3
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b08      	cmp	r3, #8
 8002706:	d015      	beq.n	8002734 <UART_SetConfig+0x1bc>
 8002708:	dc18      	bgt.n	800273c <UART_SetConfig+0x1c4>
 800270a:	2b04      	cmp	r3, #4
 800270c:	d00d      	beq.n	800272a <UART_SetConfig+0x1b2>
 800270e:	dc15      	bgt.n	800273c <UART_SetConfig+0x1c4>
 8002710:	2b00      	cmp	r3, #0
 8002712:	d002      	beq.n	800271a <UART_SetConfig+0x1a2>
 8002714:	2b02      	cmp	r3, #2
 8002716:	d005      	beq.n	8002724 <UART_SetConfig+0x1ac>
 8002718:	e010      	b.n	800273c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800271a:	f7ff f9bf 	bl	8001a9c <HAL_RCC_GetPCLK1Freq>
 800271e:	0003      	movs	r3, r0
 8002720:	61bb      	str	r3, [r7, #24]
        break;
 8002722:	e012      	b.n	800274a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002724:	4b57      	ldr	r3, [pc, #348]	; (8002884 <UART_SetConfig+0x30c>)
 8002726:	61bb      	str	r3, [r7, #24]
        break;
 8002728:	e00f      	b.n	800274a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800272a:	f7ff f92d 	bl	8001988 <HAL_RCC_GetSysClockFreq>
 800272e:	0003      	movs	r3, r0
 8002730:	61bb      	str	r3, [r7, #24]
        break;
 8002732:	e00a      	b.n	800274a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002734:	2380      	movs	r3, #128	; 0x80
 8002736:	021b      	lsls	r3, r3, #8
 8002738:	61bb      	str	r3, [r7, #24]
        break;
 800273a:	e006      	b.n	800274a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800273c:	2300      	movs	r3, #0
 800273e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002740:	231e      	movs	r3, #30
 8002742:	18fb      	adds	r3, r7, r3
 8002744:	2201      	movs	r2, #1
 8002746:	701a      	strb	r2, [r3, #0]
        break;
 8002748:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d100      	bne.n	8002752 <UART_SetConfig+0x1da>
 8002750:	e07b      	b.n	800284a <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	005a      	lsls	r2, r3, #1
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	085b      	lsrs	r3, r3, #1
 800275c:	18d2      	adds	r2, r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	0019      	movs	r1, r3
 8002764:	0010      	movs	r0, r2
 8002766:	f7fd fccf 	bl	8000108 <__udivsi3>
 800276a:	0003      	movs	r3, r0
 800276c:	b29b      	uxth	r3, r3
 800276e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	2b0f      	cmp	r3, #15
 8002774:	d91c      	bls.n	80027b0 <UART_SetConfig+0x238>
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	2380      	movs	r3, #128	; 0x80
 800277a:	025b      	lsls	r3, r3, #9
 800277c:	429a      	cmp	r2, r3
 800277e:	d217      	bcs.n	80027b0 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	b29a      	uxth	r2, r3
 8002784:	200e      	movs	r0, #14
 8002786:	183b      	adds	r3, r7, r0
 8002788:	210f      	movs	r1, #15
 800278a:	438a      	bics	r2, r1
 800278c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	085b      	lsrs	r3, r3, #1
 8002792:	b29b      	uxth	r3, r3
 8002794:	2207      	movs	r2, #7
 8002796:	4013      	ands	r3, r2
 8002798:	b299      	uxth	r1, r3
 800279a:	183b      	adds	r3, r7, r0
 800279c:	183a      	adds	r2, r7, r0
 800279e:	8812      	ldrh	r2, [r2, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	183a      	adds	r2, r7, r0
 80027aa:	8812      	ldrh	r2, [r2, #0]
 80027ac:	60da      	str	r2, [r3, #12]
 80027ae:	e04c      	b.n	800284a <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80027b0:	231e      	movs	r3, #30
 80027b2:	18fb      	adds	r3, r7, r3
 80027b4:	2201      	movs	r2, #1
 80027b6:	701a      	strb	r2, [r3, #0]
 80027b8:	e047      	b.n	800284a <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80027ba:	231f      	movs	r3, #31
 80027bc:	18fb      	adds	r3, r7, r3
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d015      	beq.n	80027f0 <UART_SetConfig+0x278>
 80027c4:	dc18      	bgt.n	80027f8 <UART_SetConfig+0x280>
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d00d      	beq.n	80027e6 <UART_SetConfig+0x26e>
 80027ca:	dc15      	bgt.n	80027f8 <UART_SetConfig+0x280>
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d002      	beq.n	80027d6 <UART_SetConfig+0x25e>
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d005      	beq.n	80027e0 <UART_SetConfig+0x268>
 80027d4:	e010      	b.n	80027f8 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027d6:	f7ff f961 	bl	8001a9c <HAL_RCC_GetPCLK1Freq>
 80027da:	0003      	movs	r3, r0
 80027dc:	61bb      	str	r3, [r7, #24]
        break;
 80027de:	e012      	b.n	8002806 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027e0:	4b28      	ldr	r3, [pc, #160]	; (8002884 <UART_SetConfig+0x30c>)
 80027e2:	61bb      	str	r3, [r7, #24]
        break;
 80027e4:	e00f      	b.n	8002806 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027e6:	f7ff f8cf 	bl	8001988 <HAL_RCC_GetSysClockFreq>
 80027ea:	0003      	movs	r3, r0
 80027ec:	61bb      	str	r3, [r7, #24]
        break;
 80027ee:	e00a      	b.n	8002806 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027f0:	2380      	movs	r3, #128	; 0x80
 80027f2:	021b      	lsls	r3, r3, #8
 80027f4:	61bb      	str	r3, [r7, #24]
        break;
 80027f6:	e006      	b.n	8002806 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80027fc:	231e      	movs	r3, #30
 80027fe:	18fb      	adds	r3, r7, r3
 8002800:	2201      	movs	r2, #1
 8002802:	701a      	strb	r2, [r3, #0]
        break;
 8002804:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d01e      	beq.n	800284a <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	085a      	lsrs	r2, r3, #1
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	18d2      	adds	r2, r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	0019      	movs	r1, r3
 800281c:	0010      	movs	r0, r2
 800281e:	f7fd fc73 	bl	8000108 <__udivsi3>
 8002822:	0003      	movs	r3, r0
 8002824:	b29b      	uxth	r3, r3
 8002826:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	2b0f      	cmp	r3, #15
 800282c:	d909      	bls.n	8002842 <UART_SetConfig+0x2ca>
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	2380      	movs	r3, #128	; 0x80
 8002832:	025b      	lsls	r3, r3, #9
 8002834:	429a      	cmp	r2, r3
 8002836:	d204      	bcs.n	8002842 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	60da      	str	r2, [r3, #12]
 8002840:	e003      	b.n	800284a <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8002842:	231e      	movs	r3, #30
 8002844:	18fb      	adds	r3, r7, r3
 8002846:	2201      	movs	r2, #1
 8002848:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002856:	231e      	movs	r3, #30
 8002858:	18fb      	adds	r3, r7, r3
 800285a:	781b      	ldrb	r3, [r3, #0]
}
 800285c:	0018      	movs	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	b008      	add	sp, #32
 8002862:	bd80      	pop	{r7, pc}
 8002864:	efff69f3 	.word	0xefff69f3
 8002868:	ffffcfff 	.word	0xffffcfff
 800286c:	fffff4ff 	.word	0xfffff4ff
 8002870:	40013800 	.word	0x40013800
 8002874:	40021000 	.word	0x40021000
 8002878:	40004400 	.word	0x40004400
 800287c:	40004800 	.word	0x40004800
 8002880:	40004c00 	.word	0x40004c00
 8002884:	007a1200 	.word	0x007a1200

08002888 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	2201      	movs	r2, #1
 8002896:	4013      	ands	r3, r2
 8002898:	d00b      	beq.n	80028b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	4a4a      	ldr	r2, [pc, #296]	; (80029cc <UART_AdvFeatureConfig+0x144>)
 80028a2:	4013      	ands	r3, r2
 80028a4:	0019      	movs	r1, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	2202      	movs	r2, #2
 80028b8:	4013      	ands	r3, r2
 80028ba:	d00b      	beq.n	80028d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	4a43      	ldr	r2, [pc, #268]	; (80029d0 <UART_AdvFeatureConfig+0x148>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	0019      	movs	r1, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	2204      	movs	r2, #4
 80028da:	4013      	ands	r3, r2
 80028dc:	d00b      	beq.n	80028f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	4a3b      	ldr	r2, [pc, #236]	; (80029d4 <UART_AdvFeatureConfig+0x14c>)
 80028e6:	4013      	ands	r3, r2
 80028e8:	0019      	movs	r1, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	2208      	movs	r2, #8
 80028fc:	4013      	ands	r3, r2
 80028fe:	d00b      	beq.n	8002918 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	4a34      	ldr	r2, [pc, #208]	; (80029d8 <UART_AdvFeatureConfig+0x150>)
 8002908:	4013      	ands	r3, r2
 800290a:	0019      	movs	r1, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	2210      	movs	r2, #16
 800291e:	4013      	ands	r3, r2
 8002920:	d00b      	beq.n	800293a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	4a2c      	ldr	r2, [pc, #176]	; (80029dc <UART_AdvFeatureConfig+0x154>)
 800292a:	4013      	ands	r3, r2
 800292c:	0019      	movs	r1, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	430a      	orrs	r2, r1
 8002938:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	2220      	movs	r2, #32
 8002940:	4013      	ands	r3, r2
 8002942:	d00b      	beq.n	800295c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	4a25      	ldr	r2, [pc, #148]	; (80029e0 <UART_AdvFeatureConfig+0x158>)
 800294c:	4013      	ands	r3, r2
 800294e:	0019      	movs	r1, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	2240      	movs	r2, #64	; 0x40
 8002962:	4013      	ands	r3, r2
 8002964:	d01d      	beq.n	80029a2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	4a1d      	ldr	r2, [pc, #116]	; (80029e4 <UART_AdvFeatureConfig+0x15c>)
 800296e:	4013      	ands	r3, r2
 8002970:	0019      	movs	r1, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	430a      	orrs	r2, r1
 800297c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002982:	2380      	movs	r3, #128	; 0x80
 8002984:	035b      	lsls	r3, r3, #13
 8002986:	429a      	cmp	r2, r3
 8002988:	d10b      	bne.n	80029a2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	4a15      	ldr	r2, [pc, #84]	; (80029e8 <UART_AdvFeatureConfig+0x160>)
 8002992:	4013      	ands	r3, r2
 8002994:	0019      	movs	r1, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a6:	2280      	movs	r2, #128	; 0x80
 80029a8:	4013      	ands	r3, r2
 80029aa:	d00b      	beq.n	80029c4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	4a0e      	ldr	r2, [pc, #56]	; (80029ec <UART_AdvFeatureConfig+0x164>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	0019      	movs	r1, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	605a      	str	r2, [r3, #4]
  }
}
 80029c4:	46c0      	nop			; (mov r8, r8)
 80029c6:	46bd      	mov	sp, r7
 80029c8:	b002      	add	sp, #8
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	fffdffff 	.word	0xfffdffff
 80029d0:	fffeffff 	.word	0xfffeffff
 80029d4:	fffbffff 	.word	0xfffbffff
 80029d8:	ffff7fff 	.word	0xffff7fff
 80029dc:	ffffefff 	.word	0xffffefff
 80029e0:	ffffdfff 	.word	0xffffdfff
 80029e4:	ffefffff 	.word	0xffefffff
 80029e8:	ff9fffff 	.word	0xff9fffff
 80029ec:	fff7ffff 	.word	0xfff7ffff

080029f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af02      	add	r7, sp, #8
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2280      	movs	r2, #128	; 0x80
 80029fc:	2100      	movs	r1, #0
 80029fe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002a00:	f7fd ff70 	bl	80008e4 <HAL_GetTick>
 8002a04:	0003      	movs	r3, r0
 8002a06:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2208      	movs	r2, #8
 8002a10:	4013      	ands	r3, r2
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d10c      	bne.n	8002a30 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2280      	movs	r2, #128	; 0x80
 8002a1a:	0391      	lsls	r1, r2, #14
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	4a17      	ldr	r2, [pc, #92]	; (8002a7c <UART_CheckIdleState+0x8c>)
 8002a20:	9200      	str	r2, [sp, #0]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f000 f82c 	bl	8002a80 <UART_WaitOnFlagUntilTimeout>
 8002a28:	1e03      	subs	r3, r0, #0
 8002a2a:	d001      	beq.n	8002a30 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e021      	b.n	8002a74 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2204      	movs	r2, #4
 8002a38:	4013      	ands	r3, r2
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	d10c      	bne.n	8002a58 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2280      	movs	r2, #128	; 0x80
 8002a42:	03d1      	lsls	r1, r2, #15
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	4a0d      	ldr	r2, [pc, #52]	; (8002a7c <UART_CheckIdleState+0x8c>)
 8002a48:	9200      	str	r2, [sp, #0]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f000 f818 	bl	8002a80 <UART_WaitOnFlagUntilTimeout>
 8002a50:	1e03      	subs	r3, r0, #0
 8002a52:	d001      	beq.n	8002a58 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e00d      	b.n	8002a74 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2220      	movs	r2, #32
 8002a62:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2274      	movs	r2, #116	; 0x74
 8002a6e:	2100      	movs	r1, #0
 8002a70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	0018      	movs	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	b004      	add	sp, #16
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	01ffffff 	.word	0x01ffffff

08002a80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b094      	sub	sp, #80	; 0x50
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	603b      	str	r3, [r7, #0]
 8002a8c:	1dfb      	adds	r3, r7, #7
 8002a8e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a90:	e0a3      	b.n	8002bda <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a94:	3301      	adds	r3, #1
 8002a96:	d100      	bne.n	8002a9a <UART_WaitOnFlagUntilTimeout+0x1a>
 8002a98:	e09f      	b.n	8002bda <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a9a:	f7fd ff23 	bl	80008e4 <HAL_GetTick>
 8002a9e:	0002      	movs	r2, r0
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d302      	bcc.n	8002ab0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002aaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d13d      	bne.n	8002b2c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ab0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ab8:	647b      	str	r3, [r7, #68]	; 0x44
 8002aba:	2301      	movs	r3, #1
 8002abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac0:	f383 8810 	msr	PRIMASK, r3
}
 8002ac4:	46c0      	nop			; (mov r8, r8)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	494c      	ldr	r1, [pc, #304]	; (8002c04 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002ad2:	400a      	ands	r2, r1
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ad8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002adc:	f383 8810 	msr	PRIMASK, r3
}
 8002ae0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ae6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aea:	643b      	str	r3, [r7, #64]	; 0x40
 8002aec:	2301      	movs	r3, #1
 8002aee:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af2:	f383 8810 	msr	PRIMASK, r3
}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2101      	movs	r1, #1
 8002b04:	438a      	bics	r2, r1
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b0e:	f383 8810 	msr	PRIMASK, r3
}
 8002b12:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2220      	movs	r2, #32
 8002b18:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2274      	movs	r2, #116	; 0x74
 8002b24:	2100      	movs	r1, #0
 8002b26:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e067      	b.n	8002bfc <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2204      	movs	r2, #4
 8002b34:	4013      	ands	r3, r2
 8002b36:	d050      	beq.n	8002bda <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	69da      	ldr	r2, [r3, #28]
 8002b3e:	2380      	movs	r3, #128	; 0x80
 8002b40:	011b      	lsls	r3, r3, #4
 8002b42:	401a      	ands	r2, r3
 8002b44:	2380      	movs	r3, #128	; 0x80
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d146      	bne.n	8002bda <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2280      	movs	r2, #128	; 0x80
 8002b52:	0112      	lsls	r2, r2, #4
 8002b54:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b56:	f3ef 8310 	mrs	r3, PRIMASK
 8002b5a:	613b      	str	r3, [r7, #16]
  return(result);
 8002b5c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b60:	2301      	movs	r3, #1
 8002b62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	f383 8810 	msr	PRIMASK, r3
}
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4923      	ldr	r1, [pc, #140]	; (8002c04 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002b78:	400a      	ands	r2, r1
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b7e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	f383 8810 	msr	PRIMASK, r3
}
 8002b86:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b88:	f3ef 8310 	mrs	r3, PRIMASK
 8002b8c:	61fb      	str	r3, [r7, #28]
  return(result);
 8002b8e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b90:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b92:	2301      	movs	r3, #1
 8002b94:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b96:	6a3b      	ldr	r3, [r7, #32]
 8002b98:	f383 8810 	msr	PRIMASK, r3
}
 8002b9c:	46c0      	nop			; (mov r8, r8)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2101      	movs	r1, #1
 8002baa:	438a      	bics	r2, r1
 8002bac:	609a      	str	r2, [r3, #8]
 8002bae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bb0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	f383 8810 	msr	PRIMASK, r3
}
 8002bb8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2280      	movs	r2, #128	; 0x80
 8002bca:	2120      	movs	r1, #32
 8002bcc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2274      	movs	r2, #116	; 0x74
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e010      	b.n	8002bfc <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	4013      	ands	r3, r2
 8002be4:	68ba      	ldr	r2, [r7, #8]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	425a      	negs	r2, r3
 8002bea:	4153      	adcs	r3, r2
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	001a      	movs	r2, r3
 8002bf0:	1dfb      	adds	r3, r7, #7
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d100      	bne.n	8002bfa <UART_WaitOnFlagUntilTimeout+0x17a>
 8002bf8:	e74b      	b.n	8002a92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	b014      	add	sp, #80	; 0x50
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	fffffe5f 	.word	0xfffffe5f

08002c08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b08c      	sub	sp, #48	; 0x30
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	1dbb      	adds	r3, r7, #6
 8002c14:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	1dba      	adds	r2, r7, #6
 8002c20:	2158      	movs	r1, #88	; 0x58
 8002c22:	8812      	ldrh	r2, [r2, #0]
 8002c24:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	1dba      	adds	r2, r7, #6
 8002c2a:	215a      	movs	r1, #90	; 0x5a
 8002c2c:	8812      	ldrh	r2, [r2, #0]
 8002c2e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	689a      	ldr	r2, [r3, #8]
 8002c3a:	2380      	movs	r3, #128	; 0x80
 8002c3c:	015b      	lsls	r3, r3, #5
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d10d      	bne.n	8002c5e <UART_Start_Receive_IT+0x56>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d104      	bne.n	8002c54 <UART_Start_Receive_IT+0x4c>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	225c      	movs	r2, #92	; 0x5c
 8002c4e:	4943      	ldr	r1, [pc, #268]	; (8002d5c <UART_Start_Receive_IT+0x154>)
 8002c50:	5299      	strh	r1, [r3, r2]
 8002c52:	e02e      	b.n	8002cb2 <UART_Start_Receive_IT+0xaa>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	225c      	movs	r2, #92	; 0x5c
 8002c58:	21ff      	movs	r1, #255	; 0xff
 8002c5a:	5299      	strh	r1, [r3, r2]
 8002c5c:	e029      	b.n	8002cb2 <UART_Start_Receive_IT+0xaa>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10d      	bne.n	8002c82 <UART_Start_Receive_IT+0x7a>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d104      	bne.n	8002c78 <UART_Start_Receive_IT+0x70>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	225c      	movs	r2, #92	; 0x5c
 8002c72:	21ff      	movs	r1, #255	; 0xff
 8002c74:	5299      	strh	r1, [r3, r2]
 8002c76:	e01c      	b.n	8002cb2 <UART_Start_Receive_IT+0xaa>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	225c      	movs	r2, #92	; 0x5c
 8002c7c:	217f      	movs	r1, #127	; 0x7f
 8002c7e:	5299      	strh	r1, [r3, r2]
 8002c80:	e017      	b.n	8002cb2 <UART_Start_Receive_IT+0xaa>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	2380      	movs	r3, #128	; 0x80
 8002c88:	055b      	lsls	r3, r3, #21
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d10d      	bne.n	8002caa <UART_Start_Receive_IT+0xa2>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d104      	bne.n	8002ca0 <UART_Start_Receive_IT+0x98>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	225c      	movs	r2, #92	; 0x5c
 8002c9a:	217f      	movs	r1, #127	; 0x7f
 8002c9c:	5299      	strh	r1, [r3, r2]
 8002c9e:	e008      	b.n	8002cb2 <UART_Start_Receive_IT+0xaa>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	225c      	movs	r2, #92	; 0x5c
 8002ca4:	213f      	movs	r1, #63	; 0x3f
 8002ca6:	5299      	strh	r1, [r3, r2]
 8002ca8:	e003      	b.n	8002cb2 <UART_Start_Receive_IT+0xaa>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	225c      	movs	r2, #92	; 0x5c
 8002cae:	2100      	movs	r1, #0
 8002cb0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2280      	movs	r2, #128	; 0x80
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2222      	movs	r2, #34	; 0x22
 8002cbe:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cc0:	f3ef 8310 	mrs	r3, PRIMASK
 8002cc4:	61fb      	str	r3, [r7, #28]
  return(result);
 8002cc6:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cca:	2301      	movs	r3, #1
 8002ccc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cce:	6a3b      	ldr	r3, [r7, #32]
 8002cd0:	f383 8810 	msr	PRIMASK, r3
}
 8002cd4:	46c0      	nop			; (mov r8, r8)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	609a      	str	r2, [r3, #8]
 8002ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	f383 8810 	msr	PRIMASK, r3
}
 8002cf0:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	2380      	movs	r3, #128	; 0x80
 8002cf8:	015b      	lsls	r3, r3, #5
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d107      	bne.n	8002d0e <UART_Start_Receive_IT+0x106>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d103      	bne.n	8002d0e <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	4a15      	ldr	r2, [pc, #84]	; (8002d60 <UART_Start_Receive_IT+0x158>)
 8002d0a:	665a      	str	r2, [r3, #100]	; 0x64
 8002d0c:	e002      	b.n	8002d14 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	4a14      	ldr	r2, [pc, #80]	; (8002d64 <UART_Start_Receive_IT+0x15c>)
 8002d12:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2274      	movs	r2, #116	; 0x74
 8002d18:	2100      	movs	r1, #0
 8002d1a:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d1c:	f3ef 8310 	mrs	r3, PRIMASK
 8002d20:	613b      	str	r3, [r7, #16]
  return(result);
 8002d22:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d26:	2301      	movs	r3, #1
 8002d28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f383 8810 	msr	PRIMASK, r3
}
 8002d30:	46c0      	nop			; (mov r8, r8)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2190      	movs	r1, #144	; 0x90
 8002d3e:	0049      	lsls	r1, r1, #1
 8002d40:	430a      	orrs	r2, r1
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d46:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	f383 8810 	msr	PRIMASK, r3
}
 8002d4e:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	0018      	movs	r0, r3
 8002d54:	46bd      	mov	sp, r7
 8002d56:	b00c      	add	sp, #48	; 0x30
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	46c0      	nop			; (mov r8, r8)
 8002d5c:	000001ff 	.word	0x000001ff
 8002d60:	08003019 	.word	0x08003019
 8002d64:	08002eb1 	.word	0x08002eb1

08002d68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b08e      	sub	sp, #56	; 0x38
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d70:	f3ef 8310 	mrs	r3, PRIMASK
 8002d74:	617b      	str	r3, [r7, #20]
  return(result);
 8002d76:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d78:	637b      	str	r3, [r7, #52]	; 0x34
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	f383 8810 	msr	PRIMASK, r3
}
 8002d84:	46c0      	nop			; (mov r8, r8)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4925      	ldr	r1, [pc, #148]	; (8002e28 <UART_EndRxTransfer+0xc0>)
 8002d92:	400a      	ands	r2, r1
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	f383 8810 	msr	PRIMASK, r3
}
 8002da0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002da2:	f3ef 8310 	mrs	r3, PRIMASK
 8002da6:	623b      	str	r3, [r7, #32]
  return(result);
 8002da8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002daa:	633b      	str	r3, [r7, #48]	; 0x30
 8002dac:	2301      	movs	r3, #1
 8002dae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	f383 8810 	msr	PRIMASK, r3
}
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	438a      	bics	r2, r1
 8002dc6:	609a      	str	r2, [r3, #8]
 8002dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dca:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dce:	f383 8810 	msr	PRIMASK, r3
}
 8002dd2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d118      	bne.n	8002e0e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ddc:	f3ef 8310 	mrs	r3, PRIMASK
 8002de0:	60bb      	str	r3, [r7, #8]
  return(result);
 8002de2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002de4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002de6:	2301      	movs	r3, #1
 8002de8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f383 8810 	msr	PRIMASK, r3
}
 8002df0:	46c0      	nop			; (mov r8, r8)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2110      	movs	r1, #16
 8002dfe:	438a      	bics	r2, r1
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	f383 8810 	msr	PRIMASK, r3
}
 8002e0c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2220      	movs	r2, #32
 8002e12:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002e20:	46c0      	nop			; (mov r8, r8)
 8002e22:	46bd      	mov	sp, r7
 8002e24:	b00e      	add	sp, #56	; 0x38
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	fffffedf 	.word	0xfffffedf

08002e2c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	225a      	movs	r2, #90	; 0x5a
 8002e3e:	2100      	movs	r1, #0
 8002e40:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2252      	movs	r2, #82	; 0x52
 8002e46:	2100      	movs	r1, #0
 8002e48:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	f7ff fb7f 	bl	8002550 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	46bd      	mov	sp, r7
 8002e56:	b004      	add	sp, #16
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b086      	sub	sp, #24
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e62:	f3ef 8310 	mrs	r3, PRIMASK
 8002e66:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e68:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f383 8810 	msr	PRIMASK, r3
}
 8002e76:	46c0      	nop			; (mov r8, r8)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2140      	movs	r1, #64	; 0x40
 8002e84:	438a      	bics	r2, r1
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	f383 8810 	msr	PRIMASK, r3
}
 8002e92:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2220      	movs	r2, #32
 8002e98:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	f7ff fb44 	bl	8002530 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ea8:	46c0      	nop			; (mov r8, r8)
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	b006      	add	sp, #24
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b090      	sub	sp, #64	; 0x40
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8002eb8:	203e      	movs	r0, #62	; 0x3e
 8002eba:	183b      	adds	r3, r7, r0
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	215c      	movs	r1, #92	; 0x5c
 8002ec0:	5a52      	ldrh	r2, [r2, r1]
 8002ec2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ec8:	2b22      	cmp	r3, #34	; 0x22
 8002eca:	d000      	beq.n	8002ece <UART_RxISR_8BIT+0x1e>
 8002ecc:	e095      	b.n	8002ffa <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	213c      	movs	r1, #60	; 0x3c
 8002ed4:	187b      	adds	r3, r7, r1
 8002ed6:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002ed8:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002eda:	187b      	adds	r3, r7, r1
 8002edc:	881b      	ldrh	r3, [r3, #0]
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	183b      	adds	r3, r7, r0
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	b2d9      	uxtb	r1, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eea:	400a      	ands	r2, r1
 8002eec:	b2d2      	uxtb	r2, r2
 8002eee:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	225a      	movs	r2, #90	; 0x5a
 8002efe:	5a9b      	ldrh	r3, [r3, r2]
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b299      	uxth	r1, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	225a      	movs	r2, #90	; 0x5a
 8002f0a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	225a      	movs	r2, #90	; 0x5a
 8002f10:	5a9b      	ldrh	r3, [r3, r2]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d178      	bne.n	800300a <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f18:	f3ef 8310 	mrs	r3, PRIMASK
 8002f1c:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f1e:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f20:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f22:	2301      	movs	r3, #1
 8002f24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	f383 8810 	msr	PRIMASK, r3
}
 8002f2c:	46c0      	nop			; (mov r8, r8)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4936      	ldr	r1, [pc, #216]	; (8003014 <UART_RxISR_8BIT+0x164>)
 8002f3a:	400a      	ands	r2, r1
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f40:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	f383 8810 	msr	PRIMASK, r3
}
 8002f48:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f4a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f4e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f52:	637b      	str	r3, [r7, #52]	; 0x34
 8002f54:	2301      	movs	r3, #1
 8002f56:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5a:	f383 8810 	msr	PRIMASK, r3
}
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	438a      	bics	r2, r1
 8002f6e:	609a      	str	r2, [r3, #8]
 8002f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f76:	f383 8810 	msr	PRIMASK, r3
}
 8002f7a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d12f      	bne.n	8002ff0 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f96:	f3ef 8310 	mrs	r3, PRIMASK
 8002f9a:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f9c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f9e:	633b      	str	r3, [r7, #48]	; 0x30
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	f383 8810 	msr	PRIMASK, r3
}
 8002faa:	46c0      	nop			; (mov r8, r8)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2110      	movs	r1, #16
 8002fb8:	438a      	bics	r2, r1
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f383 8810 	msr	PRIMASK, r3
}
 8002fc6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	2210      	movs	r2, #16
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	2b10      	cmp	r3, #16
 8002fd4:	d103      	bne.n	8002fde <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2210      	movs	r2, #16
 8002fdc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2258      	movs	r2, #88	; 0x58
 8002fe2:	5a9a      	ldrh	r2, [r3, r2]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	0011      	movs	r1, r2
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f7ff fab9 	bl	8002560 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002fee:	e00c      	b.n	800300a <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	f7ff faa4 	bl	8002540 <HAL_UART_RxCpltCallback>
}
 8002ff8:	e007      	b.n	800300a <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	699a      	ldr	r2, [r3, #24]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2108      	movs	r1, #8
 8003006:	430a      	orrs	r2, r1
 8003008:	619a      	str	r2, [r3, #24]
}
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	46bd      	mov	sp, r7
 800300e:	b010      	add	sp, #64	; 0x40
 8003010:	bd80      	pop	{r7, pc}
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	fffffedf 	.word	0xfffffedf

08003018 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b090      	sub	sp, #64	; 0x40
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003020:	203e      	movs	r0, #62	; 0x3e
 8003022:	183b      	adds	r3, r7, r0
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	215c      	movs	r1, #92	; 0x5c
 8003028:	5a52      	ldrh	r2, [r2, r1]
 800302a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003030:	2b22      	cmp	r3, #34	; 0x22
 8003032:	d000      	beq.n	8003036 <UART_RxISR_16BIT+0x1e>
 8003034:	e095      	b.n	8003162 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	213c      	movs	r1, #60	; 0x3c
 800303c:	187b      	adds	r3, r7, r1
 800303e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003040:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003046:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8003048:	187b      	adds	r3, r7, r1
 800304a:	183a      	adds	r2, r7, r0
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	8812      	ldrh	r2, [r2, #0]
 8003050:	4013      	ands	r3, r2
 8003052:	b29a      	uxth	r2, r3
 8003054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003056:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305c:	1c9a      	adds	r2, r3, #2
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	225a      	movs	r2, #90	; 0x5a
 8003066:	5a9b      	ldrh	r3, [r3, r2]
 8003068:	b29b      	uxth	r3, r3
 800306a:	3b01      	subs	r3, #1
 800306c:	b299      	uxth	r1, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	225a      	movs	r2, #90	; 0x5a
 8003072:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	225a      	movs	r2, #90	; 0x5a
 8003078:	5a9b      	ldrh	r3, [r3, r2]
 800307a:	b29b      	uxth	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	d178      	bne.n	8003172 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003080:	f3ef 8310 	mrs	r3, PRIMASK
 8003084:	617b      	str	r3, [r7, #20]
  return(result);
 8003086:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003088:	637b      	str	r3, [r7, #52]	; 0x34
 800308a:	2301      	movs	r3, #1
 800308c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	f383 8810 	msr	PRIMASK, r3
}
 8003094:	46c0      	nop			; (mov r8, r8)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4936      	ldr	r1, [pc, #216]	; (800317c <UART_RxISR_16BIT+0x164>)
 80030a2:	400a      	ands	r2, r1
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	f383 8810 	msr	PRIMASK, r3
}
 80030b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030b2:	f3ef 8310 	mrs	r3, PRIMASK
 80030b6:	623b      	str	r3, [r7, #32]
  return(result);
 80030b8:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ba:	633b      	str	r3, [r7, #48]	; 0x30
 80030bc:	2301      	movs	r3, #1
 80030be:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	f383 8810 	msr	PRIMASK, r3
}
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2101      	movs	r1, #1
 80030d4:	438a      	bics	r2, r1
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030da:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030de:	f383 8810 	msr	PRIMASK, r3
}
 80030e2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2220      	movs	r2, #32
 80030e8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d12f      	bne.n	8003158 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003102:	60bb      	str	r3, [r7, #8]
  return(result);
 8003104:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003106:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003108:	2301      	movs	r3, #1
 800310a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f383 8810 	msr	PRIMASK, r3
}
 8003112:	46c0      	nop			; (mov r8, r8)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2110      	movs	r1, #16
 8003120:	438a      	bics	r2, r1
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003126:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	f383 8810 	msr	PRIMASK, r3
}
 800312e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	2210      	movs	r2, #16
 8003138:	4013      	ands	r3, r2
 800313a:	2b10      	cmp	r3, #16
 800313c:	d103      	bne.n	8003146 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2210      	movs	r2, #16
 8003144:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2258      	movs	r2, #88	; 0x58
 800314a:	5a9a      	ldrh	r2, [r3, r2]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	0011      	movs	r1, r2
 8003150:	0018      	movs	r0, r3
 8003152:	f7ff fa05 	bl	8002560 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003156:	e00c      	b.n	8003172 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	0018      	movs	r0, r3
 800315c:	f7ff f9f0 	bl	8002540 <HAL_UART_RxCpltCallback>
}
 8003160:	e007      	b.n	8003172 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	699a      	ldr	r2, [r3, #24]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2108      	movs	r1, #8
 800316e:	430a      	orrs	r2, r1
 8003170:	619a      	str	r2, [r3, #24]
}
 8003172:	46c0      	nop			; (mov r8, r8)
 8003174:	46bd      	mov	sp, r7
 8003176:	b010      	add	sp, #64	; 0x40
 8003178:	bd80      	pop	{r7, pc}
 800317a:	46c0      	nop			; (mov r8, r8)
 800317c:	fffffedf 	.word	0xfffffedf

08003180 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003188:	46c0      	nop			; (mov r8, r8)
 800318a:	46bd      	mov	sp, r7
 800318c:	b002      	add	sp, #8
 800318e:	bd80      	pop	{r7, pc}

08003190 <__errno>:
 8003190:	4b01      	ldr	r3, [pc, #4]	; (8003198 <__errno+0x8>)
 8003192:	6818      	ldr	r0, [r3, #0]
 8003194:	4770      	bx	lr
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	2000000c 	.word	0x2000000c

0800319c <__libc_init_array>:
 800319c:	b570      	push	{r4, r5, r6, lr}
 800319e:	2600      	movs	r6, #0
 80031a0:	4d0c      	ldr	r5, [pc, #48]	; (80031d4 <__libc_init_array+0x38>)
 80031a2:	4c0d      	ldr	r4, [pc, #52]	; (80031d8 <__libc_init_array+0x3c>)
 80031a4:	1b64      	subs	r4, r4, r5
 80031a6:	10a4      	asrs	r4, r4, #2
 80031a8:	42a6      	cmp	r6, r4
 80031aa:	d109      	bne.n	80031c0 <__libc_init_array+0x24>
 80031ac:	2600      	movs	r6, #0
 80031ae:	f000 f8e7 	bl	8003380 <_init>
 80031b2:	4d0a      	ldr	r5, [pc, #40]	; (80031dc <__libc_init_array+0x40>)
 80031b4:	4c0a      	ldr	r4, [pc, #40]	; (80031e0 <__libc_init_array+0x44>)
 80031b6:	1b64      	subs	r4, r4, r5
 80031b8:	10a4      	asrs	r4, r4, #2
 80031ba:	42a6      	cmp	r6, r4
 80031bc:	d105      	bne.n	80031ca <__libc_init_array+0x2e>
 80031be:	bd70      	pop	{r4, r5, r6, pc}
 80031c0:	00b3      	lsls	r3, r6, #2
 80031c2:	58eb      	ldr	r3, [r5, r3]
 80031c4:	4798      	blx	r3
 80031c6:	3601      	adds	r6, #1
 80031c8:	e7ee      	b.n	80031a8 <__libc_init_array+0xc>
 80031ca:	00b3      	lsls	r3, r6, #2
 80031cc:	58eb      	ldr	r3, [r5, r3]
 80031ce:	4798      	blx	r3
 80031d0:	3601      	adds	r6, #1
 80031d2:	e7f2      	b.n	80031ba <__libc_init_array+0x1e>
 80031d4:	080033d0 	.word	0x080033d0
 80031d8:	080033d0 	.word	0x080033d0
 80031dc:	080033d0 	.word	0x080033d0
 80031e0:	080033d4 	.word	0x080033d4

080031e4 <malloc>:
 80031e4:	b510      	push	{r4, lr}
 80031e6:	4b03      	ldr	r3, [pc, #12]	; (80031f4 <malloc+0x10>)
 80031e8:	0001      	movs	r1, r0
 80031ea:	6818      	ldr	r0, [r3, #0]
 80031ec:	f000 f82e 	bl	800324c <_malloc_r>
 80031f0:	bd10      	pop	{r4, pc}
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	2000000c 	.word	0x2000000c

080031f8 <memset>:
 80031f8:	0003      	movs	r3, r0
 80031fa:	1882      	adds	r2, r0, r2
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d100      	bne.n	8003202 <memset+0xa>
 8003200:	4770      	bx	lr
 8003202:	7019      	strb	r1, [r3, #0]
 8003204:	3301      	adds	r3, #1
 8003206:	e7f9      	b.n	80031fc <memset+0x4>

08003208 <sbrk_aligned>:
 8003208:	b570      	push	{r4, r5, r6, lr}
 800320a:	4e0f      	ldr	r6, [pc, #60]	; (8003248 <sbrk_aligned+0x40>)
 800320c:	000d      	movs	r5, r1
 800320e:	6831      	ldr	r1, [r6, #0]
 8003210:	0004      	movs	r4, r0
 8003212:	2900      	cmp	r1, #0
 8003214:	d102      	bne.n	800321c <sbrk_aligned+0x14>
 8003216:	f000 f88f 	bl	8003338 <_sbrk_r>
 800321a:	6030      	str	r0, [r6, #0]
 800321c:	0029      	movs	r1, r5
 800321e:	0020      	movs	r0, r4
 8003220:	f000 f88a 	bl	8003338 <_sbrk_r>
 8003224:	1c43      	adds	r3, r0, #1
 8003226:	d00a      	beq.n	800323e <sbrk_aligned+0x36>
 8003228:	2303      	movs	r3, #3
 800322a:	1cc5      	adds	r5, r0, #3
 800322c:	439d      	bics	r5, r3
 800322e:	42a8      	cmp	r0, r5
 8003230:	d007      	beq.n	8003242 <sbrk_aligned+0x3a>
 8003232:	1a29      	subs	r1, r5, r0
 8003234:	0020      	movs	r0, r4
 8003236:	f000 f87f 	bl	8003338 <_sbrk_r>
 800323a:	1c43      	adds	r3, r0, #1
 800323c:	d101      	bne.n	8003242 <sbrk_aligned+0x3a>
 800323e:	2501      	movs	r5, #1
 8003240:	426d      	negs	r5, r5
 8003242:	0028      	movs	r0, r5
 8003244:	bd70      	pop	{r4, r5, r6, pc}
 8003246:	46c0      	nop			; (mov r8, r8)
 8003248:	200001c4 	.word	0x200001c4

0800324c <_malloc_r>:
 800324c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800324e:	2203      	movs	r2, #3
 8003250:	1ccb      	adds	r3, r1, #3
 8003252:	4393      	bics	r3, r2
 8003254:	3308      	adds	r3, #8
 8003256:	0006      	movs	r6, r0
 8003258:	001f      	movs	r7, r3
 800325a:	2b0c      	cmp	r3, #12
 800325c:	d232      	bcs.n	80032c4 <_malloc_r+0x78>
 800325e:	270c      	movs	r7, #12
 8003260:	42b9      	cmp	r1, r7
 8003262:	d831      	bhi.n	80032c8 <_malloc_r+0x7c>
 8003264:	0030      	movs	r0, r6
 8003266:	f000 f879 	bl	800335c <__malloc_lock>
 800326a:	4d32      	ldr	r5, [pc, #200]	; (8003334 <_malloc_r+0xe8>)
 800326c:	682b      	ldr	r3, [r5, #0]
 800326e:	001c      	movs	r4, r3
 8003270:	2c00      	cmp	r4, #0
 8003272:	d12e      	bne.n	80032d2 <_malloc_r+0x86>
 8003274:	0039      	movs	r1, r7
 8003276:	0030      	movs	r0, r6
 8003278:	f7ff ffc6 	bl	8003208 <sbrk_aligned>
 800327c:	0004      	movs	r4, r0
 800327e:	1c43      	adds	r3, r0, #1
 8003280:	d11e      	bne.n	80032c0 <_malloc_r+0x74>
 8003282:	682c      	ldr	r4, [r5, #0]
 8003284:	0025      	movs	r5, r4
 8003286:	2d00      	cmp	r5, #0
 8003288:	d14a      	bne.n	8003320 <_malloc_r+0xd4>
 800328a:	6823      	ldr	r3, [r4, #0]
 800328c:	0029      	movs	r1, r5
 800328e:	18e3      	adds	r3, r4, r3
 8003290:	0030      	movs	r0, r6
 8003292:	9301      	str	r3, [sp, #4]
 8003294:	f000 f850 	bl	8003338 <_sbrk_r>
 8003298:	9b01      	ldr	r3, [sp, #4]
 800329a:	4283      	cmp	r3, r0
 800329c:	d143      	bne.n	8003326 <_malloc_r+0xda>
 800329e:	6823      	ldr	r3, [r4, #0]
 80032a0:	3703      	adds	r7, #3
 80032a2:	1aff      	subs	r7, r7, r3
 80032a4:	2303      	movs	r3, #3
 80032a6:	439f      	bics	r7, r3
 80032a8:	3708      	adds	r7, #8
 80032aa:	2f0c      	cmp	r7, #12
 80032ac:	d200      	bcs.n	80032b0 <_malloc_r+0x64>
 80032ae:	270c      	movs	r7, #12
 80032b0:	0039      	movs	r1, r7
 80032b2:	0030      	movs	r0, r6
 80032b4:	f7ff ffa8 	bl	8003208 <sbrk_aligned>
 80032b8:	1c43      	adds	r3, r0, #1
 80032ba:	d034      	beq.n	8003326 <_malloc_r+0xda>
 80032bc:	6823      	ldr	r3, [r4, #0]
 80032be:	19df      	adds	r7, r3, r7
 80032c0:	6027      	str	r7, [r4, #0]
 80032c2:	e013      	b.n	80032ec <_malloc_r+0xa0>
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	dacb      	bge.n	8003260 <_malloc_r+0x14>
 80032c8:	230c      	movs	r3, #12
 80032ca:	2500      	movs	r5, #0
 80032cc:	6033      	str	r3, [r6, #0]
 80032ce:	0028      	movs	r0, r5
 80032d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80032d2:	6822      	ldr	r2, [r4, #0]
 80032d4:	1bd1      	subs	r1, r2, r7
 80032d6:	d420      	bmi.n	800331a <_malloc_r+0xce>
 80032d8:	290b      	cmp	r1, #11
 80032da:	d917      	bls.n	800330c <_malloc_r+0xc0>
 80032dc:	19e2      	adds	r2, r4, r7
 80032de:	6027      	str	r7, [r4, #0]
 80032e0:	42a3      	cmp	r3, r4
 80032e2:	d111      	bne.n	8003308 <_malloc_r+0xbc>
 80032e4:	602a      	str	r2, [r5, #0]
 80032e6:	6863      	ldr	r3, [r4, #4]
 80032e8:	6011      	str	r1, [r2, #0]
 80032ea:	6053      	str	r3, [r2, #4]
 80032ec:	0030      	movs	r0, r6
 80032ee:	0025      	movs	r5, r4
 80032f0:	f000 f83c 	bl	800336c <__malloc_unlock>
 80032f4:	2207      	movs	r2, #7
 80032f6:	350b      	adds	r5, #11
 80032f8:	1d23      	adds	r3, r4, #4
 80032fa:	4395      	bics	r5, r2
 80032fc:	1aea      	subs	r2, r5, r3
 80032fe:	429d      	cmp	r5, r3
 8003300:	d0e5      	beq.n	80032ce <_malloc_r+0x82>
 8003302:	1b5b      	subs	r3, r3, r5
 8003304:	50a3      	str	r3, [r4, r2]
 8003306:	e7e2      	b.n	80032ce <_malloc_r+0x82>
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	e7ec      	b.n	80032e6 <_malloc_r+0x9a>
 800330c:	6862      	ldr	r2, [r4, #4]
 800330e:	42a3      	cmp	r3, r4
 8003310:	d101      	bne.n	8003316 <_malloc_r+0xca>
 8003312:	602a      	str	r2, [r5, #0]
 8003314:	e7ea      	b.n	80032ec <_malloc_r+0xa0>
 8003316:	605a      	str	r2, [r3, #4]
 8003318:	e7e8      	b.n	80032ec <_malloc_r+0xa0>
 800331a:	0023      	movs	r3, r4
 800331c:	6864      	ldr	r4, [r4, #4]
 800331e:	e7a7      	b.n	8003270 <_malloc_r+0x24>
 8003320:	002c      	movs	r4, r5
 8003322:	686d      	ldr	r5, [r5, #4]
 8003324:	e7af      	b.n	8003286 <_malloc_r+0x3a>
 8003326:	230c      	movs	r3, #12
 8003328:	0030      	movs	r0, r6
 800332a:	6033      	str	r3, [r6, #0]
 800332c:	f000 f81e 	bl	800336c <__malloc_unlock>
 8003330:	e7cd      	b.n	80032ce <_malloc_r+0x82>
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	200001c0 	.word	0x200001c0

08003338 <_sbrk_r>:
 8003338:	2300      	movs	r3, #0
 800333a:	b570      	push	{r4, r5, r6, lr}
 800333c:	4d06      	ldr	r5, [pc, #24]	; (8003358 <_sbrk_r+0x20>)
 800333e:	0004      	movs	r4, r0
 8003340:	0008      	movs	r0, r1
 8003342:	602b      	str	r3, [r5, #0]
 8003344:	f7fd fa0e 	bl	8000764 <_sbrk>
 8003348:	1c43      	adds	r3, r0, #1
 800334a:	d103      	bne.n	8003354 <_sbrk_r+0x1c>
 800334c:	682b      	ldr	r3, [r5, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d000      	beq.n	8003354 <_sbrk_r+0x1c>
 8003352:	6023      	str	r3, [r4, #0]
 8003354:	bd70      	pop	{r4, r5, r6, pc}
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	200001c8 	.word	0x200001c8

0800335c <__malloc_lock>:
 800335c:	b510      	push	{r4, lr}
 800335e:	4802      	ldr	r0, [pc, #8]	; (8003368 <__malloc_lock+0xc>)
 8003360:	f000 f80c 	bl	800337c <__retarget_lock_acquire_recursive>
 8003364:	bd10      	pop	{r4, pc}
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	200001cc 	.word	0x200001cc

0800336c <__malloc_unlock>:
 800336c:	b510      	push	{r4, lr}
 800336e:	4802      	ldr	r0, [pc, #8]	; (8003378 <__malloc_unlock+0xc>)
 8003370:	f000 f805 	bl	800337e <__retarget_lock_release_recursive>
 8003374:	bd10      	pop	{r4, pc}
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	200001cc 	.word	0x200001cc

0800337c <__retarget_lock_acquire_recursive>:
 800337c:	4770      	bx	lr

0800337e <__retarget_lock_release_recursive>:
 800337e:	4770      	bx	lr

08003380 <_init>:
 8003380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003382:	46c0      	nop			; (mov r8, r8)
 8003384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003386:	bc08      	pop	{r3}
 8003388:	469e      	mov	lr, r3
 800338a:	4770      	bx	lr

0800338c <_fini>:
 800338c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800338e:	46c0      	nop			; (mov r8, r8)
 8003390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003392:	bc08      	pop	{r3}
 8003394:	469e      	mov	lr, r3
 8003396:	4770      	bx	lr
