
Project_19_AD_Convesion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a160  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800a220  0800a220  0001a220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a784  0800a784  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a784  0800a784  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a784  0800a784  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a784  0800a784  0001a784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a788  0800a788  0001a788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a78c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  200001e0  0800a96c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  0800a96c  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa1b  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022eb  00000000  00000000  0002fc23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  00031f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf8  00000000  00000000  00032cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b2c4  00000000  00000000  000339e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000109fa  00000000  00000000  0004ecac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cb65  00000000  00000000  0005f6a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fc20b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046d8  00000000  00000000  000fc25c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a208 	.word	0x0800a208

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800a208 	.word	0x0800a208

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ff7d 	bl	800133c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fecd 	bl	80011ec <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff6f 	bl	800133c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff65 	bl	800133c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fef5 	bl	8001270 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 feeb 	bl	8001270 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_d2uiz>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	2200      	movs	r2, #0
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004ae:	0004      	movs	r4, r0
 80004b0:	000d      	movs	r5, r1
 80004b2:	f7ff ffef 	bl	8000494 <__aeabi_dcmpge>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d104      	bne.n	80004c4 <__aeabi_d2uiz+0x1c>
 80004ba:	0020      	movs	r0, r4
 80004bc:	0029      	movs	r1, r5
 80004be:	f001 fdbd 	bl	800203c <__aeabi_d2iz>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	0020      	movs	r0, r4
 80004ca:	0029      	movs	r1, r5
 80004cc:	f001 fa06 	bl	80018dc <__aeabi_dsub>
 80004d0:	f001 fdb4 	bl	800203c <__aeabi_d2iz>
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	061b      	lsls	r3, r3, #24
 80004d8:	469c      	mov	ip, r3
 80004da:	4460      	add	r0, ip
 80004dc:	e7f1      	b.n	80004c2 <__aeabi_d2uiz+0x1a>
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	41e00000 	.word	0x41e00000

080004e4 <__aeabi_d2lz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	0005      	movs	r5, r0
 80004e8:	000c      	movs	r4, r1
 80004ea:	2200      	movs	r2, #0
 80004ec:	2300      	movs	r3, #0
 80004ee:	0028      	movs	r0, r5
 80004f0:	0021      	movs	r1, r4
 80004f2:	f7ff ffb1 	bl	8000458 <__aeabi_dcmplt>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	d108      	bne.n	800050c <__aeabi_d2lz+0x28>
 80004fa:	0028      	movs	r0, r5
 80004fc:	0021      	movs	r1, r4
 80004fe:	f000 f80f 	bl	8000520 <__aeabi_d2ulz>
 8000502:	0002      	movs	r2, r0
 8000504:	000b      	movs	r3, r1
 8000506:	0010      	movs	r0, r2
 8000508:	0019      	movs	r1, r3
 800050a:	bd70      	pop	{r4, r5, r6, pc}
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	061b      	lsls	r3, r3, #24
 8000510:	18e1      	adds	r1, r4, r3
 8000512:	0028      	movs	r0, r5
 8000514:	f000 f804 	bl	8000520 <__aeabi_d2ulz>
 8000518:	2300      	movs	r3, #0
 800051a:	4242      	negs	r2, r0
 800051c:	418b      	sbcs	r3, r1
 800051e:	e7f2      	b.n	8000506 <__aeabi_d2lz+0x22>

08000520 <__aeabi_d2ulz>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	2200      	movs	r2, #0
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <__aeabi_d2ulz+0x34>)
 8000526:	000d      	movs	r5, r1
 8000528:	0004      	movs	r4, r0
 800052a:	f000 ff6b 	bl	8001404 <__aeabi_dmul>
 800052e:	f7ff ffbb 	bl	80004a8 <__aeabi_d2uiz>
 8000532:	0006      	movs	r6, r0
 8000534:	f001 fde8 	bl	8002108 <__aeabi_ui2d>
 8000538:	2200      	movs	r2, #0
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <__aeabi_d2ulz+0x38>)
 800053c:	f000 ff62 	bl	8001404 <__aeabi_dmul>
 8000540:	0002      	movs	r2, r0
 8000542:	000b      	movs	r3, r1
 8000544:	0020      	movs	r0, r4
 8000546:	0029      	movs	r1, r5
 8000548:	f001 f9c8 	bl	80018dc <__aeabi_dsub>
 800054c:	f7ff ffac 	bl	80004a8 <__aeabi_d2uiz>
 8000550:	0031      	movs	r1, r6
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	3df00000 	.word	0x3df00000
 8000558:	41f00000 	.word	0x41f00000

0800055c <__aeabi_l2d>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	0006      	movs	r6, r0
 8000560:	0008      	movs	r0, r1
 8000562:	f001 fda1 	bl	80020a8 <__aeabi_i2d>
 8000566:	2200      	movs	r2, #0
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <__aeabi_l2d+0x28>)
 800056a:	f000 ff4b 	bl	8001404 <__aeabi_dmul>
 800056e:	000d      	movs	r5, r1
 8000570:	0004      	movs	r4, r0
 8000572:	0030      	movs	r0, r6
 8000574:	f001 fdc8 	bl	8002108 <__aeabi_ui2d>
 8000578:	002b      	movs	r3, r5
 800057a:	0022      	movs	r2, r4
 800057c:	f000 f804 	bl	8000588 <__aeabi_dadd>
 8000580:	bd70      	pop	{r4, r5, r6, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	41f00000 	.word	0x41f00000

08000588 <__aeabi_dadd>:
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058a:	464f      	mov	r7, r9
 800058c:	4646      	mov	r6, r8
 800058e:	46d6      	mov	lr, sl
 8000590:	000d      	movs	r5, r1
 8000592:	0004      	movs	r4, r0
 8000594:	b5c0      	push	{r6, r7, lr}
 8000596:	001f      	movs	r7, r3
 8000598:	0011      	movs	r1, r2
 800059a:	0328      	lsls	r0, r5, #12
 800059c:	0f62      	lsrs	r2, r4, #29
 800059e:	0a40      	lsrs	r0, r0, #9
 80005a0:	4310      	orrs	r0, r2
 80005a2:	007a      	lsls	r2, r7, #1
 80005a4:	0d52      	lsrs	r2, r2, #21
 80005a6:	00e3      	lsls	r3, r4, #3
 80005a8:	033c      	lsls	r4, r7, #12
 80005aa:	4691      	mov	r9, r2
 80005ac:	0a64      	lsrs	r4, r4, #9
 80005ae:	0ffa      	lsrs	r2, r7, #31
 80005b0:	0f4f      	lsrs	r7, r1, #29
 80005b2:	006e      	lsls	r6, r5, #1
 80005b4:	4327      	orrs	r7, r4
 80005b6:	4692      	mov	sl, r2
 80005b8:	46b8      	mov	r8, r7
 80005ba:	0d76      	lsrs	r6, r6, #21
 80005bc:	0fed      	lsrs	r5, r5, #31
 80005be:	00c9      	lsls	r1, r1, #3
 80005c0:	4295      	cmp	r5, r2
 80005c2:	d100      	bne.n	80005c6 <__aeabi_dadd+0x3e>
 80005c4:	e099      	b.n	80006fa <__aeabi_dadd+0x172>
 80005c6:	464c      	mov	r4, r9
 80005c8:	1b34      	subs	r4, r6, r4
 80005ca:	46a4      	mov	ip, r4
 80005cc:	2c00      	cmp	r4, #0
 80005ce:	dc00      	bgt.n	80005d2 <__aeabi_dadd+0x4a>
 80005d0:	e07c      	b.n	80006cc <__aeabi_dadd+0x144>
 80005d2:	464a      	mov	r2, r9
 80005d4:	2a00      	cmp	r2, #0
 80005d6:	d100      	bne.n	80005da <__aeabi_dadd+0x52>
 80005d8:	e0b8      	b.n	800074c <__aeabi_dadd+0x1c4>
 80005da:	4ac5      	ldr	r2, [pc, #788]	; (80008f0 <__aeabi_dadd+0x368>)
 80005dc:	4296      	cmp	r6, r2
 80005de:	d100      	bne.n	80005e2 <__aeabi_dadd+0x5a>
 80005e0:	e11c      	b.n	800081c <__aeabi_dadd+0x294>
 80005e2:	2280      	movs	r2, #128	; 0x80
 80005e4:	003c      	movs	r4, r7
 80005e6:	0412      	lsls	r2, r2, #16
 80005e8:	4314      	orrs	r4, r2
 80005ea:	46a0      	mov	r8, r4
 80005ec:	4662      	mov	r2, ip
 80005ee:	2a38      	cmp	r2, #56	; 0x38
 80005f0:	dd00      	ble.n	80005f4 <__aeabi_dadd+0x6c>
 80005f2:	e161      	b.n	80008b8 <__aeabi_dadd+0x330>
 80005f4:	2a1f      	cmp	r2, #31
 80005f6:	dd00      	ble.n	80005fa <__aeabi_dadd+0x72>
 80005f8:	e1cc      	b.n	8000994 <__aeabi_dadd+0x40c>
 80005fa:	4664      	mov	r4, ip
 80005fc:	2220      	movs	r2, #32
 80005fe:	1b12      	subs	r2, r2, r4
 8000600:	4644      	mov	r4, r8
 8000602:	4094      	lsls	r4, r2
 8000604:	000f      	movs	r7, r1
 8000606:	46a1      	mov	r9, r4
 8000608:	4664      	mov	r4, ip
 800060a:	4091      	lsls	r1, r2
 800060c:	40e7      	lsrs	r7, r4
 800060e:	464c      	mov	r4, r9
 8000610:	1e4a      	subs	r2, r1, #1
 8000612:	4191      	sbcs	r1, r2
 8000614:	433c      	orrs	r4, r7
 8000616:	4642      	mov	r2, r8
 8000618:	4321      	orrs	r1, r4
 800061a:	4664      	mov	r4, ip
 800061c:	40e2      	lsrs	r2, r4
 800061e:	1a80      	subs	r0, r0, r2
 8000620:	1a5c      	subs	r4, r3, r1
 8000622:	42a3      	cmp	r3, r4
 8000624:	419b      	sbcs	r3, r3
 8000626:	425f      	negs	r7, r3
 8000628:	1bc7      	subs	r7, r0, r7
 800062a:	023b      	lsls	r3, r7, #8
 800062c:	d400      	bmi.n	8000630 <__aeabi_dadd+0xa8>
 800062e:	e0d0      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000630:	027f      	lsls	r7, r7, #9
 8000632:	0a7f      	lsrs	r7, r7, #9
 8000634:	2f00      	cmp	r7, #0
 8000636:	d100      	bne.n	800063a <__aeabi_dadd+0xb2>
 8000638:	e0ff      	b.n	800083a <__aeabi_dadd+0x2b2>
 800063a:	0038      	movs	r0, r7
 800063c:	f001 fe12 	bl	8002264 <__clzsi2>
 8000640:	0001      	movs	r1, r0
 8000642:	3908      	subs	r1, #8
 8000644:	2320      	movs	r3, #32
 8000646:	0022      	movs	r2, r4
 8000648:	1a5b      	subs	r3, r3, r1
 800064a:	408f      	lsls	r7, r1
 800064c:	40da      	lsrs	r2, r3
 800064e:	408c      	lsls	r4, r1
 8000650:	4317      	orrs	r7, r2
 8000652:	42b1      	cmp	r1, r6
 8000654:	da00      	bge.n	8000658 <__aeabi_dadd+0xd0>
 8000656:	e0ff      	b.n	8000858 <__aeabi_dadd+0x2d0>
 8000658:	1b89      	subs	r1, r1, r6
 800065a:	1c4b      	adds	r3, r1, #1
 800065c:	2b1f      	cmp	r3, #31
 800065e:	dd00      	ble.n	8000662 <__aeabi_dadd+0xda>
 8000660:	e0a8      	b.n	80007b4 <__aeabi_dadd+0x22c>
 8000662:	2220      	movs	r2, #32
 8000664:	0039      	movs	r1, r7
 8000666:	1ad2      	subs	r2, r2, r3
 8000668:	0020      	movs	r0, r4
 800066a:	4094      	lsls	r4, r2
 800066c:	4091      	lsls	r1, r2
 800066e:	40d8      	lsrs	r0, r3
 8000670:	1e62      	subs	r2, r4, #1
 8000672:	4194      	sbcs	r4, r2
 8000674:	40df      	lsrs	r7, r3
 8000676:	2600      	movs	r6, #0
 8000678:	4301      	orrs	r1, r0
 800067a:	430c      	orrs	r4, r1
 800067c:	0763      	lsls	r3, r4, #29
 800067e:	d009      	beq.n	8000694 <__aeabi_dadd+0x10c>
 8000680:	230f      	movs	r3, #15
 8000682:	4023      	ands	r3, r4
 8000684:	2b04      	cmp	r3, #4
 8000686:	d005      	beq.n	8000694 <__aeabi_dadd+0x10c>
 8000688:	1d23      	adds	r3, r4, #4
 800068a:	42a3      	cmp	r3, r4
 800068c:	41a4      	sbcs	r4, r4
 800068e:	4264      	negs	r4, r4
 8000690:	193f      	adds	r7, r7, r4
 8000692:	001c      	movs	r4, r3
 8000694:	023b      	lsls	r3, r7, #8
 8000696:	d400      	bmi.n	800069a <__aeabi_dadd+0x112>
 8000698:	e09e      	b.n	80007d8 <__aeabi_dadd+0x250>
 800069a:	4b95      	ldr	r3, [pc, #596]	; (80008f0 <__aeabi_dadd+0x368>)
 800069c:	3601      	adds	r6, #1
 800069e:	429e      	cmp	r6, r3
 80006a0:	d100      	bne.n	80006a4 <__aeabi_dadd+0x11c>
 80006a2:	e0b7      	b.n	8000814 <__aeabi_dadd+0x28c>
 80006a4:	4a93      	ldr	r2, [pc, #588]	; (80008f4 <__aeabi_dadd+0x36c>)
 80006a6:	08e4      	lsrs	r4, r4, #3
 80006a8:	4017      	ands	r7, r2
 80006aa:	077b      	lsls	r3, r7, #29
 80006ac:	0571      	lsls	r1, r6, #21
 80006ae:	027f      	lsls	r7, r7, #9
 80006b0:	4323      	orrs	r3, r4
 80006b2:	0b3f      	lsrs	r7, r7, #12
 80006b4:	0d4a      	lsrs	r2, r1, #21
 80006b6:	0512      	lsls	r2, r2, #20
 80006b8:	433a      	orrs	r2, r7
 80006ba:	07ed      	lsls	r5, r5, #31
 80006bc:	432a      	orrs	r2, r5
 80006be:	0018      	movs	r0, r3
 80006c0:	0011      	movs	r1, r2
 80006c2:	bce0      	pop	{r5, r6, r7}
 80006c4:	46ba      	mov	sl, r7
 80006c6:	46b1      	mov	r9, r6
 80006c8:	46a8      	mov	r8, r5
 80006ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006cc:	2c00      	cmp	r4, #0
 80006ce:	d04b      	beq.n	8000768 <__aeabi_dadd+0x1e0>
 80006d0:	464c      	mov	r4, r9
 80006d2:	1ba4      	subs	r4, r4, r6
 80006d4:	46a4      	mov	ip, r4
 80006d6:	2e00      	cmp	r6, #0
 80006d8:	d000      	beq.n	80006dc <__aeabi_dadd+0x154>
 80006da:	e123      	b.n	8000924 <__aeabi_dadd+0x39c>
 80006dc:	0004      	movs	r4, r0
 80006de:	431c      	orrs	r4, r3
 80006e0:	d100      	bne.n	80006e4 <__aeabi_dadd+0x15c>
 80006e2:	e1af      	b.n	8000a44 <__aeabi_dadd+0x4bc>
 80006e4:	4662      	mov	r2, ip
 80006e6:	1e54      	subs	r4, r2, #1
 80006e8:	2a01      	cmp	r2, #1
 80006ea:	d100      	bne.n	80006ee <__aeabi_dadd+0x166>
 80006ec:	e215      	b.n	8000b1a <__aeabi_dadd+0x592>
 80006ee:	4d80      	ldr	r5, [pc, #512]	; (80008f0 <__aeabi_dadd+0x368>)
 80006f0:	45ac      	cmp	ip, r5
 80006f2:	d100      	bne.n	80006f6 <__aeabi_dadd+0x16e>
 80006f4:	e1c8      	b.n	8000a88 <__aeabi_dadd+0x500>
 80006f6:	46a4      	mov	ip, r4
 80006f8:	e11b      	b.n	8000932 <__aeabi_dadd+0x3aa>
 80006fa:	464a      	mov	r2, r9
 80006fc:	1ab2      	subs	r2, r6, r2
 80006fe:	4694      	mov	ip, r2
 8000700:	2a00      	cmp	r2, #0
 8000702:	dc00      	bgt.n	8000706 <__aeabi_dadd+0x17e>
 8000704:	e0ac      	b.n	8000860 <__aeabi_dadd+0x2d8>
 8000706:	464a      	mov	r2, r9
 8000708:	2a00      	cmp	r2, #0
 800070a:	d043      	beq.n	8000794 <__aeabi_dadd+0x20c>
 800070c:	4a78      	ldr	r2, [pc, #480]	; (80008f0 <__aeabi_dadd+0x368>)
 800070e:	4296      	cmp	r6, r2
 8000710:	d100      	bne.n	8000714 <__aeabi_dadd+0x18c>
 8000712:	e1af      	b.n	8000a74 <__aeabi_dadd+0x4ec>
 8000714:	2280      	movs	r2, #128	; 0x80
 8000716:	003c      	movs	r4, r7
 8000718:	0412      	lsls	r2, r2, #16
 800071a:	4314      	orrs	r4, r2
 800071c:	46a0      	mov	r8, r4
 800071e:	4662      	mov	r2, ip
 8000720:	2a38      	cmp	r2, #56	; 0x38
 8000722:	dc67      	bgt.n	80007f4 <__aeabi_dadd+0x26c>
 8000724:	2a1f      	cmp	r2, #31
 8000726:	dc00      	bgt.n	800072a <__aeabi_dadd+0x1a2>
 8000728:	e15f      	b.n	80009ea <__aeabi_dadd+0x462>
 800072a:	4647      	mov	r7, r8
 800072c:	3a20      	subs	r2, #32
 800072e:	40d7      	lsrs	r7, r2
 8000730:	4662      	mov	r2, ip
 8000732:	2a20      	cmp	r2, #32
 8000734:	d005      	beq.n	8000742 <__aeabi_dadd+0x1ba>
 8000736:	4664      	mov	r4, ip
 8000738:	2240      	movs	r2, #64	; 0x40
 800073a:	1b12      	subs	r2, r2, r4
 800073c:	4644      	mov	r4, r8
 800073e:	4094      	lsls	r4, r2
 8000740:	4321      	orrs	r1, r4
 8000742:	1e4a      	subs	r2, r1, #1
 8000744:	4191      	sbcs	r1, r2
 8000746:	000c      	movs	r4, r1
 8000748:	433c      	orrs	r4, r7
 800074a:	e057      	b.n	80007fc <__aeabi_dadd+0x274>
 800074c:	003a      	movs	r2, r7
 800074e:	430a      	orrs	r2, r1
 8000750:	d100      	bne.n	8000754 <__aeabi_dadd+0x1cc>
 8000752:	e105      	b.n	8000960 <__aeabi_dadd+0x3d8>
 8000754:	0022      	movs	r2, r4
 8000756:	3a01      	subs	r2, #1
 8000758:	2c01      	cmp	r4, #1
 800075a:	d100      	bne.n	800075e <__aeabi_dadd+0x1d6>
 800075c:	e182      	b.n	8000a64 <__aeabi_dadd+0x4dc>
 800075e:	4c64      	ldr	r4, [pc, #400]	; (80008f0 <__aeabi_dadd+0x368>)
 8000760:	45a4      	cmp	ip, r4
 8000762:	d05b      	beq.n	800081c <__aeabi_dadd+0x294>
 8000764:	4694      	mov	ip, r2
 8000766:	e741      	b.n	80005ec <__aeabi_dadd+0x64>
 8000768:	4c63      	ldr	r4, [pc, #396]	; (80008f8 <__aeabi_dadd+0x370>)
 800076a:	1c77      	adds	r7, r6, #1
 800076c:	4227      	tst	r7, r4
 800076e:	d000      	beq.n	8000772 <__aeabi_dadd+0x1ea>
 8000770:	e0c4      	b.n	80008fc <__aeabi_dadd+0x374>
 8000772:	0004      	movs	r4, r0
 8000774:	431c      	orrs	r4, r3
 8000776:	2e00      	cmp	r6, #0
 8000778:	d000      	beq.n	800077c <__aeabi_dadd+0x1f4>
 800077a:	e169      	b.n	8000a50 <__aeabi_dadd+0x4c8>
 800077c:	2c00      	cmp	r4, #0
 800077e:	d100      	bne.n	8000782 <__aeabi_dadd+0x1fa>
 8000780:	e1bf      	b.n	8000b02 <__aeabi_dadd+0x57a>
 8000782:	4644      	mov	r4, r8
 8000784:	430c      	orrs	r4, r1
 8000786:	d000      	beq.n	800078a <__aeabi_dadd+0x202>
 8000788:	e1d0      	b.n	8000b2c <__aeabi_dadd+0x5a4>
 800078a:	0742      	lsls	r2, r0, #29
 800078c:	08db      	lsrs	r3, r3, #3
 800078e:	4313      	orrs	r3, r2
 8000790:	08c0      	lsrs	r0, r0, #3
 8000792:	e029      	b.n	80007e8 <__aeabi_dadd+0x260>
 8000794:	003a      	movs	r2, r7
 8000796:	430a      	orrs	r2, r1
 8000798:	d100      	bne.n	800079c <__aeabi_dadd+0x214>
 800079a:	e170      	b.n	8000a7e <__aeabi_dadd+0x4f6>
 800079c:	4662      	mov	r2, ip
 800079e:	4664      	mov	r4, ip
 80007a0:	3a01      	subs	r2, #1
 80007a2:	2c01      	cmp	r4, #1
 80007a4:	d100      	bne.n	80007a8 <__aeabi_dadd+0x220>
 80007a6:	e0e0      	b.n	800096a <__aeabi_dadd+0x3e2>
 80007a8:	4c51      	ldr	r4, [pc, #324]	; (80008f0 <__aeabi_dadd+0x368>)
 80007aa:	45a4      	cmp	ip, r4
 80007ac:	d100      	bne.n	80007b0 <__aeabi_dadd+0x228>
 80007ae:	e161      	b.n	8000a74 <__aeabi_dadd+0x4ec>
 80007b0:	4694      	mov	ip, r2
 80007b2:	e7b4      	b.n	800071e <__aeabi_dadd+0x196>
 80007b4:	003a      	movs	r2, r7
 80007b6:	391f      	subs	r1, #31
 80007b8:	40ca      	lsrs	r2, r1
 80007ba:	0011      	movs	r1, r2
 80007bc:	2b20      	cmp	r3, #32
 80007be:	d003      	beq.n	80007c8 <__aeabi_dadd+0x240>
 80007c0:	2240      	movs	r2, #64	; 0x40
 80007c2:	1ad3      	subs	r3, r2, r3
 80007c4:	409f      	lsls	r7, r3
 80007c6:	433c      	orrs	r4, r7
 80007c8:	1e63      	subs	r3, r4, #1
 80007ca:	419c      	sbcs	r4, r3
 80007cc:	2700      	movs	r7, #0
 80007ce:	2600      	movs	r6, #0
 80007d0:	430c      	orrs	r4, r1
 80007d2:	0763      	lsls	r3, r4, #29
 80007d4:	d000      	beq.n	80007d8 <__aeabi_dadd+0x250>
 80007d6:	e753      	b.n	8000680 <__aeabi_dadd+0xf8>
 80007d8:	46b4      	mov	ip, r6
 80007da:	08e4      	lsrs	r4, r4, #3
 80007dc:	077b      	lsls	r3, r7, #29
 80007de:	4323      	orrs	r3, r4
 80007e0:	08f8      	lsrs	r0, r7, #3
 80007e2:	4a43      	ldr	r2, [pc, #268]	; (80008f0 <__aeabi_dadd+0x368>)
 80007e4:	4594      	cmp	ip, r2
 80007e6:	d01d      	beq.n	8000824 <__aeabi_dadd+0x29c>
 80007e8:	4662      	mov	r2, ip
 80007ea:	0307      	lsls	r7, r0, #12
 80007ec:	0552      	lsls	r2, r2, #21
 80007ee:	0b3f      	lsrs	r7, r7, #12
 80007f0:	0d52      	lsrs	r2, r2, #21
 80007f2:	e760      	b.n	80006b6 <__aeabi_dadd+0x12e>
 80007f4:	4644      	mov	r4, r8
 80007f6:	430c      	orrs	r4, r1
 80007f8:	1e62      	subs	r2, r4, #1
 80007fa:	4194      	sbcs	r4, r2
 80007fc:	18e4      	adds	r4, r4, r3
 80007fe:	429c      	cmp	r4, r3
 8000800:	419b      	sbcs	r3, r3
 8000802:	425f      	negs	r7, r3
 8000804:	183f      	adds	r7, r7, r0
 8000806:	023b      	lsls	r3, r7, #8
 8000808:	d5e3      	bpl.n	80007d2 <__aeabi_dadd+0x24a>
 800080a:	4b39      	ldr	r3, [pc, #228]	; (80008f0 <__aeabi_dadd+0x368>)
 800080c:	3601      	adds	r6, #1
 800080e:	429e      	cmp	r6, r3
 8000810:	d000      	beq.n	8000814 <__aeabi_dadd+0x28c>
 8000812:	e0b5      	b.n	8000980 <__aeabi_dadd+0x3f8>
 8000814:	0032      	movs	r2, r6
 8000816:	2700      	movs	r7, #0
 8000818:	2300      	movs	r3, #0
 800081a:	e74c      	b.n	80006b6 <__aeabi_dadd+0x12e>
 800081c:	0742      	lsls	r2, r0, #29
 800081e:	08db      	lsrs	r3, r3, #3
 8000820:	4313      	orrs	r3, r2
 8000822:	08c0      	lsrs	r0, r0, #3
 8000824:	001a      	movs	r2, r3
 8000826:	4302      	orrs	r2, r0
 8000828:	d100      	bne.n	800082c <__aeabi_dadd+0x2a4>
 800082a:	e1e1      	b.n	8000bf0 <__aeabi_dadd+0x668>
 800082c:	2780      	movs	r7, #128	; 0x80
 800082e:	033f      	lsls	r7, r7, #12
 8000830:	4307      	orrs	r7, r0
 8000832:	033f      	lsls	r7, r7, #12
 8000834:	4a2e      	ldr	r2, [pc, #184]	; (80008f0 <__aeabi_dadd+0x368>)
 8000836:	0b3f      	lsrs	r7, r7, #12
 8000838:	e73d      	b.n	80006b6 <__aeabi_dadd+0x12e>
 800083a:	0020      	movs	r0, r4
 800083c:	f001 fd12 	bl	8002264 <__clzsi2>
 8000840:	0001      	movs	r1, r0
 8000842:	3118      	adds	r1, #24
 8000844:	291f      	cmp	r1, #31
 8000846:	dc00      	bgt.n	800084a <__aeabi_dadd+0x2c2>
 8000848:	e6fc      	b.n	8000644 <__aeabi_dadd+0xbc>
 800084a:	3808      	subs	r0, #8
 800084c:	4084      	lsls	r4, r0
 800084e:	0027      	movs	r7, r4
 8000850:	2400      	movs	r4, #0
 8000852:	42b1      	cmp	r1, r6
 8000854:	db00      	blt.n	8000858 <__aeabi_dadd+0x2d0>
 8000856:	e6ff      	b.n	8000658 <__aeabi_dadd+0xd0>
 8000858:	4a26      	ldr	r2, [pc, #152]	; (80008f4 <__aeabi_dadd+0x36c>)
 800085a:	1a76      	subs	r6, r6, r1
 800085c:	4017      	ands	r7, r2
 800085e:	e70d      	b.n	800067c <__aeabi_dadd+0xf4>
 8000860:	2a00      	cmp	r2, #0
 8000862:	d02f      	beq.n	80008c4 <__aeabi_dadd+0x33c>
 8000864:	464a      	mov	r2, r9
 8000866:	1b92      	subs	r2, r2, r6
 8000868:	4694      	mov	ip, r2
 800086a:	2e00      	cmp	r6, #0
 800086c:	d100      	bne.n	8000870 <__aeabi_dadd+0x2e8>
 800086e:	e0ad      	b.n	80009cc <__aeabi_dadd+0x444>
 8000870:	4a1f      	ldr	r2, [pc, #124]	; (80008f0 <__aeabi_dadd+0x368>)
 8000872:	4591      	cmp	r9, r2
 8000874:	d100      	bne.n	8000878 <__aeabi_dadd+0x2f0>
 8000876:	e10f      	b.n	8000a98 <__aeabi_dadd+0x510>
 8000878:	2280      	movs	r2, #128	; 0x80
 800087a:	0412      	lsls	r2, r2, #16
 800087c:	4310      	orrs	r0, r2
 800087e:	4662      	mov	r2, ip
 8000880:	2a38      	cmp	r2, #56	; 0x38
 8000882:	dd00      	ble.n	8000886 <__aeabi_dadd+0x2fe>
 8000884:	e10f      	b.n	8000aa6 <__aeabi_dadd+0x51e>
 8000886:	2a1f      	cmp	r2, #31
 8000888:	dd00      	ble.n	800088c <__aeabi_dadd+0x304>
 800088a:	e180      	b.n	8000b8e <__aeabi_dadd+0x606>
 800088c:	4664      	mov	r4, ip
 800088e:	2220      	movs	r2, #32
 8000890:	001e      	movs	r6, r3
 8000892:	1b12      	subs	r2, r2, r4
 8000894:	4667      	mov	r7, ip
 8000896:	0004      	movs	r4, r0
 8000898:	4093      	lsls	r3, r2
 800089a:	4094      	lsls	r4, r2
 800089c:	40fe      	lsrs	r6, r7
 800089e:	1e5a      	subs	r2, r3, #1
 80008a0:	4193      	sbcs	r3, r2
 80008a2:	40f8      	lsrs	r0, r7
 80008a4:	4334      	orrs	r4, r6
 80008a6:	431c      	orrs	r4, r3
 80008a8:	4480      	add	r8, r0
 80008aa:	1864      	adds	r4, r4, r1
 80008ac:	428c      	cmp	r4, r1
 80008ae:	41bf      	sbcs	r7, r7
 80008b0:	427f      	negs	r7, r7
 80008b2:	464e      	mov	r6, r9
 80008b4:	4447      	add	r7, r8
 80008b6:	e7a6      	b.n	8000806 <__aeabi_dadd+0x27e>
 80008b8:	4642      	mov	r2, r8
 80008ba:	430a      	orrs	r2, r1
 80008bc:	0011      	movs	r1, r2
 80008be:	1e4a      	subs	r2, r1, #1
 80008c0:	4191      	sbcs	r1, r2
 80008c2:	e6ad      	b.n	8000620 <__aeabi_dadd+0x98>
 80008c4:	4c0c      	ldr	r4, [pc, #48]	; (80008f8 <__aeabi_dadd+0x370>)
 80008c6:	1c72      	adds	r2, r6, #1
 80008c8:	4222      	tst	r2, r4
 80008ca:	d000      	beq.n	80008ce <__aeabi_dadd+0x346>
 80008cc:	e0a1      	b.n	8000a12 <__aeabi_dadd+0x48a>
 80008ce:	0002      	movs	r2, r0
 80008d0:	431a      	orrs	r2, r3
 80008d2:	2e00      	cmp	r6, #0
 80008d4:	d000      	beq.n	80008d8 <__aeabi_dadd+0x350>
 80008d6:	e0fa      	b.n	8000ace <__aeabi_dadd+0x546>
 80008d8:	2a00      	cmp	r2, #0
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x356>
 80008dc:	e145      	b.n	8000b6a <__aeabi_dadd+0x5e2>
 80008de:	003a      	movs	r2, r7
 80008e0:	430a      	orrs	r2, r1
 80008e2:	d000      	beq.n	80008e6 <__aeabi_dadd+0x35e>
 80008e4:	e146      	b.n	8000b74 <__aeabi_dadd+0x5ec>
 80008e6:	0742      	lsls	r2, r0, #29
 80008e8:	08db      	lsrs	r3, r3, #3
 80008ea:	4313      	orrs	r3, r2
 80008ec:	08c0      	lsrs	r0, r0, #3
 80008ee:	e77b      	b.n	80007e8 <__aeabi_dadd+0x260>
 80008f0:	000007ff 	.word	0x000007ff
 80008f4:	ff7fffff 	.word	0xff7fffff
 80008f8:	000007fe 	.word	0x000007fe
 80008fc:	4647      	mov	r7, r8
 80008fe:	1a5c      	subs	r4, r3, r1
 8000900:	1bc2      	subs	r2, r0, r7
 8000902:	42a3      	cmp	r3, r4
 8000904:	41bf      	sbcs	r7, r7
 8000906:	427f      	negs	r7, r7
 8000908:	46b9      	mov	r9, r7
 800090a:	0017      	movs	r7, r2
 800090c:	464a      	mov	r2, r9
 800090e:	1abf      	subs	r7, r7, r2
 8000910:	023a      	lsls	r2, r7, #8
 8000912:	d500      	bpl.n	8000916 <__aeabi_dadd+0x38e>
 8000914:	e08d      	b.n	8000a32 <__aeabi_dadd+0x4aa>
 8000916:	0023      	movs	r3, r4
 8000918:	433b      	orrs	r3, r7
 800091a:	d000      	beq.n	800091e <__aeabi_dadd+0x396>
 800091c:	e68a      	b.n	8000634 <__aeabi_dadd+0xac>
 800091e:	2000      	movs	r0, #0
 8000920:	2500      	movs	r5, #0
 8000922:	e761      	b.n	80007e8 <__aeabi_dadd+0x260>
 8000924:	4cb4      	ldr	r4, [pc, #720]	; (8000bf8 <__aeabi_dadd+0x670>)
 8000926:	45a1      	cmp	r9, r4
 8000928:	d100      	bne.n	800092c <__aeabi_dadd+0x3a4>
 800092a:	e0ad      	b.n	8000a88 <__aeabi_dadd+0x500>
 800092c:	2480      	movs	r4, #128	; 0x80
 800092e:	0424      	lsls	r4, r4, #16
 8000930:	4320      	orrs	r0, r4
 8000932:	4664      	mov	r4, ip
 8000934:	2c38      	cmp	r4, #56	; 0x38
 8000936:	dc3d      	bgt.n	80009b4 <__aeabi_dadd+0x42c>
 8000938:	4662      	mov	r2, ip
 800093a:	2c1f      	cmp	r4, #31
 800093c:	dd00      	ble.n	8000940 <__aeabi_dadd+0x3b8>
 800093e:	e0b7      	b.n	8000ab0 <__aeabi_dadd+0x528>
 8000940:	2520      	movs	r5, #32
 8000942:	001e      	movs	r6, r3
 8000944:	1b2d      	subs	r5, r5, r4
 8000946:	0004      	movs	r4, r0
 8000948:	40ab      	lsls	r3, r5
 800094a:	40ac      	lsls	r4, r5
 800094c:	40d6      	lsrs	r6, r2
 800094e:	40d0      	lsrs	r0, r2
 8000950:	4642      	mov	r2, r8
 8000952:	1e5d      	subs	r5, r3, #1
 8000954:	41ab      	sbcs	r3, r5
 8000956:	4334      	orrs	r4, r6
 8000958:	1a12      	subs	r2, r2, r0
 800095a:	4690      	mov	r8, r2
 800095c:	4323      	orrs	r3, r4
 800095e:	e02c      	b.n	80009ba <__aeabi_dadd+0x432>
 8000960:	0742      	lsls	r2, r0, #29
 8000962:	08db      	lsrs	r3, r3, #3
 8000964:	4313      	orrs	r3, r2
 8000966:	08c0      	lsrs	r0, r0, #3
 8000968:	e73b      	b.n	80007e2 <__aeabi_dadd+0x25a>
 800096a:	185c      	adds	r4, r3, r1
 800096c:	429c      	cmp	r4, r3
 800096e:	419b      	sbcs	r3, r3
 8000970:	4440      	add	r0, r8
 8000972:	425b      	negs	r3, r3
 8000974:	18c7      	adds	r7, r0, r3
 8000976:	2601      	movs	r6, #1
 8000978:	023b      	lsls	r3, r7, #8
 800097a:	d400      	bmi.n	800097e <__aeabi_dadd+0x3f6>
 800097c:	e729      	b.n	80007d2 <__aeabi_dadd+0x24a>
 800097e:	2602      	movs	r6, #2
 8000980:	4a9e      	ldr	r2, [pc, #632]	; (8000bfc <__aeabi_dadd+0x674>)
 8000982:	0863      	lsrs	r3, r4, #1
 8000984:	4017      	ands	r7, r2
 8000986:	2201      	movs	r2, #1
 8000988:	4014      	ands	r4, r2
 800098a:	431c      	orrs	r4, r3
 800098c:	07fb      	lsls	r3, r7, #31
 800098e:	431c      	orrs	r4, r3
 8000990:	087f      	lsrs	r7, r7, #1
 8000992:	e673      	b.n	800067c <__aeabi_dadd+0xf4>
 8000994:	4644      	mov	r4, r8
 8000996:	3a20      	subs	r2, #32
 8000998:	40d4      	lsrs	r4, r2
 800099a:	4662      	mov	r2, ip
 800099c:	2a20      	cmp	r2, #32
 800099e:	d005      	beq.n	80009ac <__aeabi_dadd+0x424>
 80009a0:	4667      	mov	r7, ip
 80009a2:	2240      	movs	r2, #64	; 0x40
 80009a4:	1bd2      	subs	r2, r2, r7
 80009a6:	4647      	mov	r7, r8
 80009a8:	4097      	lsls	r7, r2
 80009aa:	4339      	orrs	r1, r7
 80009ac:	1e4a      	subs	r2, r1, #1
 80009ae:	4191      	sbcs	r1, r2
 80009b0:	4321      	orrs	r1, r4
 80009b2:	e635      	b.n	8000620 <__aeabi_dadd+0x98>
 80009b4:	4303      	orrs	r3, r0
 80009b6:	1e58      	subs	r0, r3, #1
 80009b8:	4183      	sbcs	r3, r0
 80009ba:	1acc      	subs	r4, r1, r3
 80009bc:	42a1      	cmp	r1, r4
 80009be:	41bf      	sbcs	r7, r7
 80009c0:	4643      	mov	r3, r8
 80009c2:	427f      	negs	r7, r7
 80009c4:	4655      	mov	r5, sl
 80009c6:	464e      	mov	r6, r9
 80009c8:	1bdf      	subs	r7, r3, r7
 80009ca:	e62e      	b.n	800062a <__aeabi_dadd+0xa2>
 80009cc:	0002      	movs	r2, r0
 80009ce:	431a      	orrs	r2, r3
 80009d0:	d100      	bne.n	80009d4 <__aeabi_dadd+0x44c>
 80009d2:	e0bd      	b.n	8000b50 <__aeabi_dadd+0x5c8>
 80009d4:	4662      	mov	r2, ip
 80009d6:	4664      	mov	r4, ip
 80009d8:	3a01      	subs	r2, #1
 80009da:	2c01      	cmp	r4, #1
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x458>
 80009de:	e0e5      	b.n	8000bac <__aeabi_dadd+0x624>
 80009e0:	4c85      	ldr	r4, [pc, #532]	; (8000bf8 <__aeabi_dadd+0x670>)
 80009e2:	45a4      	cmp	ip, r4
 80009e4:	d058      	beq.n	8000a98 <__aeabi_dadd+0x510>
 80009e6:	4694      	mov	ip, r2
 80009e8:	e749      	b.n	800087e <__aeabi_dadd+0x2f6>
 80009ea:	4664      	mov	r4, ip
 80009ec:	2220      	movs	r2, #32
 80009ee:	1b12      	subs	r2, r2, r4
 80009f0:	4644      	mov	r4, r8
 80009f2:	4094      	lsls	r4, r2
 80009f4:	000f      	movs	r7, r1
 80009f6:	46a1      	mov	r9, r4
 80009f8:	4664      	mov	r4, ip
 80009fa:	4091      	lsls	r1, r2
 80009fc:	40e7      	lsrs	r7, r4
 80009fe:	464c      	mov	r4, r9
 8000a00:	1e4a      	subs	r2, r1, #1
 8000a02:	4191      	sbcs	r1, r2
 8000a04:	433c      	orrs	r4, r7
 8000a06:	4642      	mov	r2, r8
 8000a08:	430c      	orrs	r4, r1
 8000a0a:	4661      	mov	r1, ip
 8000a0c:	40ca      	lsrs	r2, r1
 8000a0e:	1880      	adds	r0, r0, r2
 8000a10:	e6f4      	b.n	80007fc <__aeabi_dadd+0x274>
 8000a12:	4c79      	ldr	r4, [pc, #484]	; (8000bf8 <__aeabi_dadd+0x670>)
 8000a14:	42a2      	cmp	r2, r4
 8000a16:	d100      	bne.n	8000a1a <__aeabi_dadd+0x492>
 8000a18:	e6fd      	b.n	8000816 <__aeabi_dadd+0x28e>
 8000a1a:	1859      	adds	r1, r3, r1
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	419b      	sbcs	r3, r3
 8000a20:	4440      	add	r0, r8
 8000a22:	425f      	negs	r7, r3
 8000a24:	19c7      	adds	r7, r0, r7
 8000a26:	07fc      	lsls	r4, r7, #31
 8000a28:	0849      	lsrs	r1, r1, #1
 8000a2a:	0016      	movs	r6, r2
 8000a2c:	430c      	orrs	r4, r1
 8000a2e:	087f      	lsrs	r7, r7, #1
 8000a30:	e6cf      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000a32:	1acc      	subs	r4, r1, r3
 8000a34:	42a1      	cmp	r1, r4
 8000a36:	41bf      	sbcs	r7, r7
 8000a38:	4643      	mov	r3, r8
 8000a3a:	427f      	negs	r7, r7
 8000a3c:	1a18      	subs	r0, r3, r0
 8000a3e:	4655      	mov	r5, sl
 8000a40:	1bc7      	subs	r7, r0, r7
 8000a42:	e5f7      	b.n	8000634 <__aeabi_dadd+0xac>
 8000a44:	08c9      	lsrs	r1, r1, #3
 8000a46:	077b      	lsls	r3, r7, #29
 8000a48:	4655      	mov	r5, sl
 8000a4a:	430b      	orrs	r3, r1
 8000a4c:	08f8      	lsrs	r0, r7, #3
 8000a4e:	e6c8      	b.n	80007e2 <__aeabi_dadd+0x25a>
 8000a50:	2c00      	cmp	r4, #0
 8000a52:	d000      	beq.n	8000a56 <__aeabi_dadd+0x4ce>
 8000a54:	e081      	b.n	8000b5a <__aeabi_dadd+0x5d2>
 8000a56:	4643      	mov	r3, r8
 8000a58:	430b      	orrs	r3, r1
 8000a5a:	d115      	bne.n	8000a88 <__aeabi_dadd+0x500>
 8000a5c:	2080      	movs	r0, #128	; 0x80
 8000a5e:	2500      	movs	r5, #0
 8000a60:	0300      	lsls	r0, r0, #12
 8000a62:	e6e3      	b.n	800082c <__aeabi_dadd+0x2a4>
 8000a64:	1a5c      	subs	r4, r3, r1
 8000a66:	42a3      	cmp	r3, r4
 8000a68:	419b      	sbcs	r3, r3
 8000a6a:	1bc7      	subs	r7, r0, r7
 8000a6c:	425b      	negs	r3, r3
 8000a6e:	2601      	movs	r6, #1
 8000a70:	1aff      	subs	r7, r7, r3
 8000a72:	e5da      	b.n	800062a <__aeabi_dadd+0xa2>
 8000a74:	0742      	lsls	r2, r0, #29
 8000a76:	08db      	lsrs	r3, r3, #3
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	08c0      	lsrs	r0, r0, #3
 8000a7c:	e6d2      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000a7e:	0742      	lsls	r2, r0, #29
 8000a80:	08db      	lsrs	r3, r3, #3
 8000a82:	4313      	orrs	r3, r2
 8000a84:	08c0      	lsrs	r0, r0, #3
 8000a86:	e6ac      	b.n	80007e2 <__aeabi_dadd+0x25a>
 8000a88:	4643      	mov	r3, r8
 8000a8a:	4642      	mov	r2, r8
 8000a8c:	08c9      	lsrs	r1, r1, #3
 8000a8e:	075b      	lsls	r3, r3, #29
 8000a90:	4655      	mov	r5, sl
 8000a92:	430b      	orrs	r3, r1
 8000a94:	08d0      	lsrs	r0, r2, #3
 8000a96:	e6c5      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000a98:	4643      	mov	r3, r8
 8000a9a:	4642      	mov	r2, r8
 8000a9c:	075b      	lsls	r3, r3, #29
 8000a9e:	08c9      	lsrs	r1, r1, #3
 8000aa0:	430b      	orrs	r3, r1
 8000aa2:	08d0      	lsrs	r0, r2, #3
 8000aa4:	e6be      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000aa6:	4303      	orrs	r3, r0
 8000aa8:	001c      	movs	r4, r3
 8000aaa:	1e63      	subs	r3, r4, #1
 8000aac:	419c      	sbcs	r4, r3
 8000aae:	e6fc      	b.n	80008aa <__aeabi_dadd+0x322>
 8000ab0:	0002      	movs	r2, r0
 8000ab2:	3c20      	subs	r4, #32
 8000ab4:	40e2      	lsrs	r2, r4
 8000ab6:	0014      	movs	r4, r2
 8000ab8:	4662      	mov	r2, ip
 8000aba:	2a20      	cmp	r2, #32
 8000abc:	d003      	beq.n	8000ac6 <__aeabi_dadd+0x53e>
 8000abe:	2540      	movs	r5, #64	; 0x40
 8000ac0:	1aad      	subs	r5, r5, r2
 8000ac2:	40a8      	lsls	r0, r5
 8000ac4:	4303      	orrs	r3, r0
 8000ac6:	1e58      	subs	r0, r3, #1
 8000ac8:	4183      	sbcs	r3, r0
 8000aca:	4323      	orrs	r3, r4
 8000acc:	e775      	b.n	80009ba <__aeabi_dadd+0x432>
 8000ace:	2a00      	cmp	r2, #0
 8000ad0:	d0e2      	beq.n	8000a98 <__aeabi_dadd+0x510>
 8000ad2:	003a      	movs	r2, r7
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	d0cd      	beq.n	8000a74 <__aeabi_dadd+0x4ec>
 8000ad8:	0742      	lsls	r2, r0, #29
 8000ada:	08db      	lsrs	r3, r3, #3
 8000adc:	4313      	orrs	r3, r2
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	08c0      	lsrs	r0, r0, #3
 8000ae2:	0312      	lsls	r2, r2, #12
 8000ae4:	4210      	tst	r0, r2
 8000ae6:	d006      	beq.n	8000af6 <__aeabi_dadd+0x56e>
 8000ae8:	08fc      	lsrs	r4, r7, #3
 8000aea:	4214      	tst	r4, r2
 8000aec:	d103      	bne.n	8000af6 <__aeabi_dadd+0x56e>
 8000aee:	0020      	movs	r0, r4
 8000af0:	08cb      	lsrs	r3, r1, #3
 8000af2:	077a      	lsls	r2, r7, #29
 8000af4:	4313      	orrs	r3, r2
 8000af6:	0f5a      	lsrs	r2, r3, #29
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	0752      	lsls	r2, r2, #29
 8000afc:	08db      	lsrs	r3, r3, #3
 8000afe:	4313      	orrs	r3, r2
 8000b00:	e690      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000b02:	4643      	mov	r3, r8
 8000b04:	430b      	orrs	r3, r1
 8000b06:	d100      	bne.n	8000b0a <__aeabi_dadd+0x582>
 8000b08:	e709      	b.n	800091e <__aeabi_dadd+0x396>
 8000b0a:	4643      	mov	r3, r8
 8000b0c:	4642      	mov	r2, r8
 8000b0e:	08c9      	lsrs	r1, r1, #3
 8000b10:	075b      	lsls	r3, r3, #29
 8000b12:	4655      	mov	r5, sl
 8000b14:	430b      	orrs	r3, r1
 8000b16:	08d0      	lsrs	r0, r2, #3
 8000b18:	e666      	b.n	80007e8 <__aeabi_dadd+0x260>
 8000b1a:	1acc      	subs	r4, r1, r3
 8000b1c:	42a1      	cmp	r1, r4
 8000b1e:	4189      	sbcs	r1, r1
 8000b20:	1a3f      	subs	r7, r7, r0
 8000b22:	4249      	negs	r1, r1
 8000b24:	4655      	mov	r5, sl
 8000b26:	2601      	movs	r6, #1
 8000b28:	1a7f      	subs	r7, r7, r1
 8000b2a:	e57e      	b.n	800062a <__aeabi_dadd+0xa2>
 8000b2c:	4642      	mov	r2, r8
 8000b2e:	1a5c      	subs	r4, r3, r1
 8000b30:	1a87      	subs	r7, r0, r2
 8000b32:	42a3      	cmp	r3, r4
 8000b34:	4192      	sbcs	r2, r2
 8000b36:	4252      	negs	r2, r2
 8000b38:	1abf      	subs	r7, r7, r2
 8000b3a:	023a      	lsls	r2, r7, #8
 8000b3c:	d53d      	bpl.n	8000bba <__aeabi_dadd+0x632>
 8000b3e:	1acc      	subs	r4, r1, r3
 8000b40:	42a1      	cmp	r1, r4
 8000b42:	4189      	sbcs	r1, r1
 8000b44:	4643      	mov	r3, r8
 8000b46:	4249      	negs	r1, r1
 8000b48:	1a1f      	subs	r7, r3, r0
 8000b4a:	4655      	mov	r5, sl
 8000b4c:	1a7f      	subs	r7, r7, r1
 8000b4e:	e595      	b.n	800067c <__aeabi_dadd+0xf4>
 8000b50:	077b      	lsls	r3, r7, #29
 8000b52:	08c9      	lsrs	r1, r1, #3
 8000b54:	430b      	orrs	r3, r1
 8000b56:	08f8      	lsrs	r0, r7, #3
 8000b58:	e643      	b.n	80007e2 <__aeabi_dadd+0x25a>
 8000b5a:	4644      	mov	r4, r8
 8000b5c:	08db      	lsrs	r3, r3, #3
 8000b5e:	430c      	orrs	r4, r1
 8000b60:	d130      	bne.n	8000bc4 <__aeabi_dadd+0x63c>
 8000b62:	0742      	lsls	r2, r0, #29
 8000b64:	4313      	orrs	r3, r2
 8000b66:	08c0      	lsrs	r0, r0, #3
 8000b68:	e65c      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000b6a:	077b      	lsls	r3, r7, #29
 8000b6c:	08c9      	lsrs	r1, r1, #3
 8000b6e:	430b      	orrs	r3, r1
 8000b70:	08f8      	lsrs	r0, r7, #3
 8000b72:	e639      	b.n	80007e8 <__aeabi_dadd+0x260>
 8000b74:	185c      	adds	r4, r3, r1
 8000b76:	429c      	cmp	r4, r3
 8000b78:	419b      	sbcs	r3, r3
 8000b7a:	4440      	add	r0, r8
 8000b7c:	425b      	negs	r3, r3
 8000b7e:	18c7      	adds	r7, r0, r3
 8000b80:	023b      	lsls	r3, r7, #8
 8000b82:	d400      	bmi.n	8000b86 <__aeabi_dadd+0x5fe>
 8000b84:	e625      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000b86:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <__aeabi_dadd+0x674>)
 8000b88:	2601      	movs	r6, #1
 8000b8a:	401f      	ands	r7, r3
 8000b8c:	e621      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000b8e:	0004      	movs	r4, r0
 8000b90:	3a20      	subs	r2, #32
 8000b92:	40d4      	lsrs	r4, r2
 8000b94:	4662      	mov	r2, ip
 8000b96:	2a20      	cmp	r2, #32
 8000b98:	d004      	beq.n	8000ba4 <__aeabi_dadd+0x61c>
 8000b9a:	2240      	movs	r2, #64	; 0x40
 8000b9c:	4666      	mov	r6, ip
 8000b9e:	1b92      	subs	r2, r2, r6
 8000ba0:	4090      	lsls	r0, r2
 8000ba2:	4303      	orrs	r3, r0
 8000ba4:	1e5a      	subs	r2, r3, #1
 8000ba6:	4193      	sbcs	r3, r2
 8000ba8:	431c      	orrs	r4, r3
 8000baa:	e67e      	b.n	80008aa <__aeabi_dadd+0x322>
 8000bac:	185c      	adds	r4, r3, r1
 8000bae:	428c      	cmp	r4, r1
 8000bb0:	4189      	sbcs	r1, r1
 8000bb2:	4440      	add	r0, r8
 8000bb4:	4249      	negs	r1, r1
 8000bb6:	1847      	adds	r7, r0, r1
 8000bb8:	e6dd      	b.n	8000976 <__aeabi_dadd+0x3ee>
 8000bba:	0023      	movs	r3, r4
 8000bbc:	433b      	orrs	r3, r7
 8000bbe:	d100      	bne.n	8000bc2 <__aeabi_dadd+0x63a>
 8000bc0:	e6ad      	b.n	800091e <__aeabi_dadd+0x396>
 8000bc2:	e606      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000bc4:	0744      	lsls	r4, r0, #29
 8000bc6:	4323      	orrs	r3, r4
 8000bc8:	2480      	movs	r4, #128	; 0x80
 8000bca:	08c0      	lsrs	r0, r0, #3
 8000bcc:	0324      	lsls	r4, r4, #12
 8000bce:	4220      	tst	r0, r4
 8000bd0:	d008      	beq.n	8000be4 <__aeabi_dadd+0x65c>
 8000bd2:	4642      	mov	r2, r8
 8000bd4:	08d6      	lsrs	r6, r2, #3
 8000bd6:	4226      	tst	r6, r4
 8000bd8:	d104      	bne.n	8000be4 <__aeabi_dadd+0x65c>
 8000bda:	4655      	mov	r5, sl
 8000bdc:	0030      	movs	r0, r6
 8000bde:	08cb      	lsrs	r3, r1, #3
 8000be0:	0751      	lsls	r1, r2, #29
 8000be2:	430b      	orrs	r3, r1
 8000be4:	0f5a      	lsrs	r2, r3, #29
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	08db      	lsrs	r3, r3, #3
 8000bea:	0752      	lsls	r2, r2, #29
 8000bec:	4313      	orrs	r3, r2
 8000bee:	e619      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	4a01      	ldr	r2, [pc, #4]	; (8000bf8 <__aeabi_dadd+0x670>)
 8000bf4:	001f      	movs	r7, r3
 8000bf6:	e55e      	b.n	80006b6 <__aeabi_dadd+0x12e>
 8000bf8:	000007ff 	.word	0x000007ff
 8000bfc:	ff7fffff 	.word	0xff7fffff

08000c00 <__aeabi_ddiv>:
 8000c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c02:	4657      	mov	r7, sl
 8000c04:	464e      	mov	r6, r9
 8000c06:	4645      	mov	r5, r8
 8000c08:	46de      	mov	lr, fp
 8000c0a:	b5e0      	push	{r5, r6, r7, lr}
 8000c0c:	4681      	mov	r9, r0
 8000c0e:	0005      	movs	r5, r0
 8000c10:	030c      	lsls	r4, r1, #12
 8000c12:	0048      	lsls	r0, r1, #1
 8000c14:	4692      	mov	sl, r2
 8000c16:	001f      	movs	r7, r3
 8000c18:	b085      	sub	sp, #20
 8000c1a:	0b24      	lsrs	r4, r4, #12
 8000c1c:	0d40      	lsrs	r0, r0, #21
 8000c1e:	0fce      	lsrs	r6, r1, #31
 8000c20:	2800      	cmp	r0, #0
 8000c22:	d100      	bne.n	8000c26 <__aeabi_ddiv+0x26>
 8000c24:	e156      	b.n	8000ed4 <__aeabi_ddiv+0x2d4>
 8000c26:	4bd4      	ldr	r3, [pc, #848]	; (8000f78 <__aeabi_ddiv+0x378>)
 8000c28:	4298      	cmp	r0, r3
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_ddiv+0x2e>
 8000c2c:	e172      	b.n	8000f14 <__aeabi_ddiv+0x314>
 8000c2e:	0f6b      	lsrs	r3, r5, #29
 8000c30:	00e4      	lsls	r4, r4, #3
 8000c32:	431c      	orrs	r4, r3
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	041b      	lsls	r3, r3, #16
 8000c38:	4323      	orrs	r3, r4
 8000c3a:	4698      	mov	r8, r3
 8000c3c:	4bcf      	ldr	r3, [pc, #828]	; (8000f7c <__aeabi_ddiv+0x37c>)
 8000c3e:	00ed      	lsls	r5, r5, #3
 8000c40:	469b      	mov	fp, r3
 8000c42:	2300      	movs	r3, #0
 8000c44:	4699      	mov	r9, r3
 8000c46:	4483      	add	fp, r0
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	033c      	lsls	r4, r7, #12
 8000c4c:	007b      	lsls	r3, r7, #1
 8000c4e:	4650      	mov	r0, sl
 8000c50:	0b24      	lsrs	r4, r4, #12
 8000c52:	0d5b      	lsrs	r3, r3, #21
 8000c54:	0fff      	lsrs	r7, r7, #31
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d100      	bne.n	8000c5c <__aeabi_ddiv+0x5c>
 8000c5a:	e11f      	b.n	8000e9c <__aeabi_ddiv+0x29c>
 8000c5c:	4ac6      	ldr	r2, [pc, #792]	; (8000f78 <__aeabi_ddiv+0x378>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d100      	bne.n	8000c64 <__aeabi_ddiv+0x64>
 8000c62:	e162      	b.n	8000f2a <__aeabi_ddiv+0x32a>
 8000c64:	49c5      	ldr	r1, [pc, #788]	; (8000f7c <__aeabi_ddiv+0x37c>)
 8000c66:	0f42      	lsrs	r2, r0, #29
 8000c68:	468c      	mov	ip, r1
 8000c6a:	00e4      	lsls	r4, r4, #3
 8000c6c:	4659      	mov	r1, fp
 8000c6e:	4314      	orrs	r4, r2
 8000c70:	2280      	movs	r2, #128	; 0x80
 8000c72:	4463      	add	r3, ip
 8000c74:	0412      	lsls	r2, r2, #16
 8000c76:	1acb      	subs	r3, r1, r3
 8000c78:	4314      	orrs	r4, r2
 8000c7a:	469b      	mov	fp, r3
 8000c7c:	00c2      	lsls	r2, r0, #3
 8000c7e:	2000      	movs	r0, #0
 8000c80:	0033      	movs	r3, r6
 8000c82:	407b      	eors	r3, r7
 8000c84:	469a      	mov	sl, r3
 8000c86:	464b      	mov	r3, r9
 8000c88:	2b0f      	cmp	r3, #15
 8000c8a:	d827      	bhi.n	8000cdc <__aeabi_ddiv+0xdc>
 8000c8c:	49bc      	ldr	r1, [pc, #752]	; (8000f80 <__aeabi_ddiv+0x380>)
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	58cb      	ldr	r3, [r1, r3]
 8000c92:	469f      	mov	pc, r3
 8000c94:	46b2      	mov	sl, r6
 8000c96:	9b00      	ldr	r3, [sp, #0]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d016      	beq.n	8000cca <__aeabi_ddiv+0xca>
 8000c9c:	2b03      	cmp	r3, #3
 8000c9e:	d100      	bne.n	8000ca2 <__aeabi_ddiv+0xa2>
 8000ca0:	e28e      	b.n	80011c0 <__aeabi_ddiv+0x5c0>
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d000      	beq.n	8000ca8 <__aeabi_ddiv+0xa8>
 8000ca6:	e0d9      	b.n	8000e5c <__aeabi_ddiv+0x25c>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	2400      	movs	r4, #0
 8000cac:	2500      	movs	r5, #0
 8000cae:	4652      	mov	r2, sl
 8000cb0:	051b      	lsls	r3, r3, #20
 8000cb2:	4323      	orrs	r3, r4
 8000cb4:	07d2      	lsls	r2, r2, #31
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	0028      	movs	r0, r5
 8000cba:	0019      	movs	r1, r3
 8000cbc:	b005      	add	sp, #20
 8000cbe:	bcf0      	pop	{r4, r5, r6, r7}
 8000cc0:	46bb      	mov	fp, r7
 8000cc2:	46b2      	mov	sl, r6
 8000cc4:	46a9      	mov	r9, r5
 8000cc6:	46a0      	mov	r8, r4
 8000cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cca:	2400      	movs	r4, #0
 8000ccc:	2500      	movs	r5, #0
 8000cce:	4baa      	ldr	r3, [pc, #680]	; (8000f78 <__aeabi_ddiv+0x378>)
 8000cd0:	e7ed      	b.n	8000cae <__aeabi_ddiv+0xae>
 8000cd2:	46ba      	mov	sl, r7
 8000cd4:	46a0      	mov	r8, r4
 8000cd6:	0015      	movs	r5, r2
 8000cd8:	9000      	str	r0, [sp, #0]
 8000cda:	e7dc      	b.n	8000c96 <__aeabi_ddiv+0x96>
 8000cdc:	4544      	cmp	r4, r8
 8000cde:	d200      	bcs.n	8000ce2 <__aeabi_ddiv+0xe2>
 8000ce0:	e1c7      	b.n	8001072 <__aeabi_ddiv+0x472>
 8000ce2:	d100      	bne.n	8000ce6 <__aeabi_ddiv+0xe6>
 8000ce4:	e1c2      	b.n	800106c <__aeabi_ddiv+0x46c>
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	425b      	negs	r3, r3
 8000cea:	469c      	mov	ip, r3
 8000cec:	002e      	movs	r6, r5
 8000cee:	4640      	mov	r0, r8
 8000cf0:	2500      	movs	r5, #0
 8000cf2:	44e3      	add	fp, ip
 8000cf4:	0223      	lsls	r3, r4, #8
 8000cf6:	0e14      	lsrs	r4, r2, #24
 8000cf8:	431c      	orrs	r4, r3
 8000cfa:	0c1b      	lsrs	r3, r3, #16
 8000cfc:	4699      	mov	r9, r3
 8000cfe:	0423      	lsls	r3, r4, #16
 8000d00:	0c1f      	lsrs	r7, r3, #16
 8000d02:	0212      	lsls	r2, r2, #8
 8000d04:	4649      	mov	r1, r9
 8000d06:	9200      	str	r2, [sp, #0]
 8000d08:	9701      	str	r7, [sp, #4]
 8000d0a:	f7ff fa9f 	bl	800024c <__aeabi_uidivmod>
 8000d0e:	0002      	movs	r2, r0
 8000d10:	437a      	muls	r2, r7
 8000d12:	040b      	lsls	r3, r1, #16
 8000d14:	0c31      	lsrs	r1, r6, #16
 8000d16:	4680      	mov	r8, r0
 8000d18:	4319      	orrs	r1, r3
 8000d1a:	428a      	cmp	r2, r1
 8000d1c:	d907      	bls.n	8000d2e <__aeabi_ddiv+0x12e>
 8000d1e:	2301      	movs	r3, #1
 8000d20:	425b      	negs	r3, r3
 8000d22:	469c      	mov	ip, r3
 8000d24:	1909      	adds	r1, r1, r4
 8000d26:	44e0      	add	r8, ip
 8000d28:	428c      	cmp	r4, r1
 8000d2a:	d800      	bhi.n	8000d2e <__aeabi_ddiv+0x12e>
 8000d2c:	e207      	b.n	800113e <__aeabi_ddiv+0x53e>
 8000d2e:	1a88      	subs	r0, r1, r2
 8000d30:	4649      	mov	r1, r9
 8000d32:	f7ff fa8b 	bl	800024c <__aeabi_uidivmod>
 8000d36:	0409      	lsls	r1, r1, #16
 8000d38:	468c      	mov	ip, r1
 8000d3a:	0431      	lsls	r1, r6, #16
 8000d3c:	4666      	mov	r6, ip
 8000d3e:	9a01      	ldr	r2, [sp, #4]
 8000d40:	0c09      	lsrs	r1, r1, #16
 8000d42:	4342      	muls	r2, r0
 8000d44:	0003      	movs	r3, r0
 8000d46:	4331      	orrs	r1, r6
 8000d48:	428a      	cmp	r2, r1
 8000d4a:	d904      	bls.n	8000d56 <__aeabi_ddiv+0x156>
 8000d4c:	1909      	adds	r1, r1, r4
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	428c      	cmp	r4, r1
 8000d52:	d800      	bhi.n	8000d56 <__aeabi_ddiv+0x156>
 8000d54:	e1ed      	b.n	8001132 <__aeabi_ddiv+0x532>
 8000d56:	1a88      	subs	r0, r1, r2
 8000d58:	4642      	mov	r2, r8
 8000d5a:	0412      	lsls	r2, r2, #16
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	4690      	mov	r8, r2
 8000d60:	4641      	mov	r1, r8
 8000d62:	9b00      	ldr	r3, [sp, #0]
 8000d64:	040e      	lsls	r6, r1, #16
 8000d66:	0c1b      	lsrs	r3, r3, #16
 8000d68:	001f      	movs	r7, r3
 8000d6a:	9302      	str	r3, [sp, #8]
 8000d6c:	9b00      	ldr	r3, [sp, #0]
 8000d6e:	0c36      	lsrs	r6, r6, #16
 8000d70:	041b      	lsls	r3, r3, #16
 8000d72:	0c19      	lsrs	r1, r3, #16
 8000d74:	000b      	movs	r3, r1
 8000d76:	4373      	muls	r3, r6
 8000d78:	0c12      	lsrs	r2, r2, #16
 8000d7a:	437e      	muls	r6, r7
 8000d7c:	9103      	str	r1, [sp, #12]
 8000d7e:	4351      	muls	r1, r2
 8000d80:	437a      	muls	r2, r7
 8000d82:	0c1f      	lsrs	r7, r3, #16
 8000d84:	46bc      	mov	ip, r7
 8000d86:	1876      	adds	r6, r6, r1
 8000d88:	4466      	add	r6, ip
 8000d8a:	42b1      	cmp	r1, r6
 8000d8c:	d903      	bls.n	8000d96 <__aeabi_ddiv+0x196>
 8000d8e:	2180      	movs	r1, #128	; 0x80
 8000d90:	0249      	lsls	r1, r1, #9
 8000d92:	468c      	mov	ip, r1
 8000d94:	4462      	add	r2, ip
 8000d96:	0c31      	lsrs	r1, r6, #16
 8000d98:	188a      	adds	r2, r1, r2
 8000d9a:	0431      	lsls	r1, r6, #16
 8000d9c:	041e      	lsls	r6, r3, #16
 8000d9e:	0c36      	lsrs	r6, r6, #16
 8000da0:	198e      	adds	r6, r1, r6
 8000da2:	4290      	cmp	r0, r2
 8000da4:	d302      	bcc.n	8000dac <__aeabi_ddiv+0x1ac>
 8000da6:	d112      	bne.n	8000dce <__aeabi_ddiv+0x1ce>
 8000da8:	42b5      	cmp	r5, r6
 8000daa:	d210      	bcs.n	8000dce <__aeabi_ddiv+0x1ce>
 8000dac:	4643      	mov	r3, r8
 8000dae:	1e59      	subs	r1, r3, #1
 8000db0:	9b00      	ldr	r3, [sp, #0]
 8000db2:	469c      	mov	ip, r3
 8000db4:	4465      	add	r5, ip
 8000db6:	001f      	movs	r7, r3
 8000db8:	429d      	cmp	r5, r3
 8000dba:	419b      	sbcs	r3, r3
 8000dbc:	425b      	negs	r3, r3
 8000dbe:	191b      	adds	r3, r3, r4
 8000dc0:	18c0      	adds	r0, r0, r3
 8000dc2:	4284      	cmp	r4, r0
 8000dc4:	d200      	bcs.n	8000dc8 <__aeabi_ddiv+0x1c8>
 8000dc6:	e1a0      	b.n	800110a <__aeabi_ddiv+0x50a>
 8000dc8:	d100      	bne.n	8000dcc <__aeabi_ddiv+0x1cc>
 8000dca:	e19b      	b.n	8001104 <__aeabi_ddiv+0x504>
 8000dcc:	4688      	mov	r8, r1
 8000dce:	1bae      	subs	r6, r5, r6
 8000dd0:	42b5      	cmp	r5, r6
 8000dd2:	41ad      	sbcs	r5, r5
 8000dd4:	1a80      	subs	r0, r0, r2
 8000dd6:	426d      	negs	r5, r5
 8000dd8:	1b40      	subs	r0, r0, r5
 8000dda:	4284      	cmp	r4, r0
 8000ddc:	d100      	bne.n	8000de0 <__aeabi_ddiv+0x1e0>
 8000dde:	e1d5      	b.n	800118c <__aeabi_ddiv+0x58c>
 8000de0:	4649      	mov	r1, r9
 8000de2:	f7ff fa33 	bl	800024c <__aeabi_uidivmod>
 8000de6:	9a01      	ldr	r2, [sp, #4]
 8000de8:	040b      	lsls	r3, r1, #16
 8000dea:	4342      	muls	r2, r0
 8000dec:	0c31      	lsrs	r1, r6, #16
 8000dee:	0005      	movs	r5, r0
 8000df0:	4319      	orrs	r1, r3
 8000df2:	428a      	cmp	r2, r1
 8000df4:	d900      	bls.n	8000df8 <__aeabi_ddiv+0x1f8>
 8000df6:	e16c      	b.n	80010d2 <__aeabi_ddiv+0x4d2>
 8000df8:	1a88      	subs	r0, r1, r2
 8000dfa:	4649      	mov	r1, r9
 8000dfc:	f7ff fa26 	bl	800024c <__aeabi_uidivmod>
 8000e00:	9a01      	ldr	r2, [sp, #4]
 8000e02:	0436      	lsls	r6, r6, #16
 8000e04:	4342      	muls	r2, r0
 8000e06:	0409      	lsls	r1, r1, #16
 8000e08:	0c36      	lsrs	r6, r6, #16
 8000e0a:	0003      	movs	r3, r0
 8000e0c:	430e      	orrs	r6, r1
 8000e0e:	42b2      	cmp	r2, r6
 8000e10:	d900      	bls.n	8000e14 <__aeabi_ddiv+0x214>
 8000e12:	e153      	b.n	80010bc <__aeabi_ddiv+0x4bc>
 8000e14:	9803      	ldr	r0, [sp, #12]
 8000e16:	1ab6      	subs	r6, r6, r2
 8000e18:	0002      	movs	r2, r0
 8000e1a:	042d      	lsls	r5, r5, #16
 8000e1c:	431d      	orrs	r5, r3
 8000e1e:	9f02      	ldr	r7, [sp, #8]
 8000e20:	042b      	lsls	r3, r5, #16
 8000e22:	0c1b      	lsrs	r3, r3, #16
 8000e24:	435a      	muls	r2, r3
 8000e26:	437b      	muls	r3, r7
 8000e28:	469c      	mov	ip, r3
 8000e2a:	0c29      	lsrs	r1, r5, #16
 8000e2c:	4348      	muls	r0, r1
 8000e2e:	0c13      	lsrs	r3, r2, #16
 8000e30:	4484      	add	ip, r0
 8000e32:	4463      	add	r3, ip
 8000e34:	4379      	muls	r1, r7
 8000e36:	4298      	cmp	r0, r3
 8000e38:	d903      	bls.n	8000e42 <__aeabi_ddiv+0x242>
 8000e3a:	2080      	movs	r0, #128	; 0x80
 8000e3c:	0240      	lsls	r0, r0, #9
 8000e3e:	4684      	mov	ip, r0
 8000e40:	4461      	add	r1, ip
 8000e42:	0c18      	lsrs	r0, r3, #16
 8000e44:	0412      	lsls	r2, r2, #16
 8000e46:	041b      	lsls	r3, r3, #16
 8000e48:	0c12      	lsrs	r2, r2, #16
 8000e4a:	1841      	adds	r1, r0, r1
 8000e4c:	189b      	adds	r3, r3, r2
 8000e4e:	428e      	cmp	r6, r1
 8000e50:	d200      	bcs.n	8000e54 <__aeabi_ddiv+0x254>
 8000e52:	e0ff      	b.n	8001054 <__aeabi_ddiv+0x454>
 8000e54:	d100      	bne.n	8000e58 <__aeabi_ddiv+0x258>
 8000e56:	e0fa      	b.n	800104e <__aeabi_ddiv+0x44e>
 8000e58:	2301      	movs	r3, #1
 8000e5a:	431d      	orrs	r5, r3
 8000e5c:	4a49      	ldr	r2, [pc, #292]	; (8000f84 <__aeabi_ddiv+0x384>)
 8000e5e:	445a      	add	r2, fp
 8000e60:	2a00      	cmp	r2, #0
 8000e62:	dc00      	bgt.n	8000e66 <__aeabi_ddiv+0x266>
 8000e64:	e0aa      	b.n	8000fbc <__aeabi_ddiv+0x3bc>
 8000e66:	076b      	lsls	r3, r5, #29
 8000e68:	d000      	beq.n	8000e6c <__aeabi_ddiv+0x26c>
 8000e6a:	e13d      	b.n	80010e8 <__aeabi_ddiv+0x4e8>
 8000e6c:	08ed      	lsrs	r5, r5, #3
 8000e6e:	4643      	mov	r3, r8
 8000e70:	01db      	lsls	r3, r3, #7
 8000e72:	d506      	bpl.n	8000e82 <__aeabi_ddiv+0x282>
 8000e74:	4642      	mov	r2, r8
 8000e76:	4b44      	ldr	r3, [pc, #272]	; (8000f88 <__aeabi_ddiv+0x388>)
 8000e78:	401a      	ands	r2, r3
 8000e7a:	4690      	mov	r8, r2
 8000e7c:	2280      	movs	r2, #128	; 0x80
 8000e7e:	00d2      	lsls	r2, r2, #3
 8000e80:	445a      	add	r2, fp
 8000e82:	4b42      	ldr	r3, [pc, #264]	; (8000f8c <__aeabi_ddiv+0x38c>)
 8000e84:	429a      	cmp	r2, r3
 8000e86:	dd00      	ble.n	8000e8a <__aeabi_ddiv+0x28a>
 8000e88:	e71f      	b.n	8000cca <__aeabi_ddiv+0xca>
 8000e8a:	4643      	mov	r3, r8
 8000e8c:	075b      	lsls	r3, r3, #29
 8000e8e:	431d      	orrs	r5, r3
 8000e90:	4643      	mov	r3, r8
 8000e92:	0552      	lsls	r2, r2, #21
 8000e94:	025c      	lsls	r4, r3, #9
 8000e96:	0b24      	lsrs	r4, r4, #12
 8000e98:	0d53      	lsrs	r3, r2, #21
 8000e9a:	e708      	b.n	8000cae <__aeabi_ddiv+0xae>
 8000e9c:	4652      	mov	r2, sl
 8000e9e:	4322      	orrs	r2, r4
 8000ea0:	d100      	bne.n	8000ea4 <__aeabi_ddiv+0x2a4>
 8000ea2:	e07b      	b.n	8000f9c <__aeabi_ddiv+0x39c>
 8000ea4:	2c00      	cmp	r4, #0
 8000ea6:	d100      	bne.n	8000eaa <__aeabi_ddiv+0x2aa>
 8000ea8:	e0fa      	b.n	80010a0 <__aeabi_ddiv+0x4a0>
 8000eaa:	0020      	movs	r0, r4
 8000eac:	f001 f9da 	bl	8002264 <__clzsi2>
 8000eb0:	0002      	movs	r2, r0
 8000eb2:	3a0b      	subs	r2, #11
 8000eb4:	231d      	movs	r3, #29
 8000eb6:	0001      	movs	r1, r0
 8000eb8:	1a9b      	subs	r3, r3, r2
 8000eba:	4652      	mov	r2, sl
 8000ebc:	3908      	subs	r1, #8
 8000ebe:	40da      	lsrs	r2, r3
 8000ec0:	408c      	lsls	r4, r1
 8000ec2:	4314      	orrs	r4, r2
 8000ec4:	4652      	mov	r2, sl
 8000ec6:	408a      	lsls	r2, r1
 8000ec8:	4b31      	ldr	r3, [pc, #196]	; (8000f90 <__aeabi_ddiv+0x390>)
 8000eca:	4458      	add	r0, fp
 8000ecc:	469b      	mov	fp, r3
 8000ece:	4483      	add	fp, r0
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	e6d5      	b.n	8000c80 <__aeabi_ddiv+0x80>
 8000ed4:	464b      	mov	r3, r9
 8000ed6:	4323      	orrs	r3, r4
 8000ed8:	4698      	mov	r8, r3
 8000eda:	d044      	beq.n	8000f66 <__aeabi_ddiv+0x366>
 8000edc:	2c00      	cmp	r4, #0
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_ddiv+0x2e2>
 8000ee0:	e0ce      	b.n	8001080 <__aeabi_ddiv+0x480>
 8000ee2:	0020      	movs	r0, r4
 8000ee4:	f001 f9be 	bl	8002264 <__clzsi2>
 8000ee8:	0001      	movs	r1, r0
 8000eea:	0002      	movs	r2, r0
 8000eec:	390b      	subs	r1, #11
 8000eee:	231d      	movs	r3, #29
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	0010      	movs	r0, r2
 8000ef6:	40d9      	lsrs	r1, r3
 8000ef8:	3808      	subs	r0, #8
 8000efa:	4084      	lsls	r4, r0
 8000efc:	000b      	movs	r3, r1
 8000efe:	464d      	mov	r5, r9
 8000f00:	4323      	orrs	r3, r4
 8000f02:	4698      	mov	r8, r3
 8000f04:	4085      	lsls	r5, r0
 8000f06:	4823      	ldr	r0, [pc, #140]	; (8000f94 <__aeabi_ddiv+0x394>)
 8000f08:	1a83      	subs	r3, r0, r2
 8000f0a:	469b      	mov	fp, r3
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	4699      	mov	r9, r3
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	e69a      	b.n	8000c4a <__aeabi_ddiv+0x4a>
 8000f14:	464b      	mov	r3, r9
 8000f16:	4323      	orrs	r3, r4
 8000f18:	4698      	mov	r8, r3
 8000f1a:	d11d      	bne.n	8000f58 <__aeabi_ddiv+0x358>
 8000f1c:	2308      	movs	r3, #8
 8000f1e:	4699      	mov	r9, r3
 8000f20:	3b06      	subs	r3, #6
 8000f22:	2500      	movs	r5, #0
 8000f24:	4683      	mov	fp, r0
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	e68f      	b.n	8000c4a <__aeabi_ddiv+0x4a>
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	4322      	orrs	r2, r4
 8000f2e:	d109      	bne.n	8000f44 <__aeabi_ddiv+0x344>
 8000f30:	2302      	movs	r3, #2
 8000f32:	4649      	mov	r1, r9
 8000f34:	4319      	orrs	r1, r3
 8000f36:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <__aeabi_ddiv+0x398>)
 8000f38:	4689      	mov	r9, r1
 8000f3a:	469c      	mov	ip, r3
 8000f3c:	2400      	movs	r4, #0
 8000f3e:	2002      	movs	r0, #2
 8000f40:	44e3      	add	fp, ip
 8000f42:	e69d      	b.n	8000c80 <__aeabi_ddiv+0x80>
 8000f44:	2303      	movs	r3, #3
 8000f46:	464a      	mov	r2, r9
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <__aeabi_ddiv+0x398>)
 8000f4c:	4691      	mov	r9, r2
 8000f4e:	469c      	mov	ip, r3
 8000f50:	4652      	mov	r2, sl
 8000f52:	2003      	movs	r0, #3
 8000f54:	44e3      	add	fp, ip
 8000f56:	e693      	b.n	8000c80 <__aeabi_ddiv+0x80>
 8000f58:	230c      	movs	r3, #12
 8000f5a:	4699      	mov	r9, r3
 8000f5c:	3b09      	subs	r3, #9
 8000f5e:	46a0      	mov	r8, r4
 8000f60:	4683      	mov	fp, r0
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	e671      	b.n	8000c4a <__aeabi_ddiv+0x4a>
 8000f66:	2304      	movs	r3, #4
 8000f68:	4699      	mov	r9, r3
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	469b      	mov	fp, r3
 8000f6e:	3301      	adds	r3, #1
 8000f70:	2500      	movs	r5, #0
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	e669      	b.n	8000c4a <__aeabi_ddiv+0x4a>
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	000007ff 	.word	0x000007ff
 8000f7c:	fffffc01 	.word	0xfffffc01
 8000f80:	0800a248 	.word	0x0800a248
 8000f84:	000003ff 	.word	0x000003ff
 8000f88:	feffffff 	.word	0xfeffffff
 8000f8c:	000007fe 	.word	0x000007fe
 8000f90:	000003f3 	.word	0x000003f3
 8000f94:	fffffc0d 	.word	0xfffffc0d
 8000f98:	fffff801 	.word	0xfffff801
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	4319      	orrs	r1, r3
 8000fa2:	4689      	mov	r9, r1
 8000fa4:	2400      	movs	r4, #0
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	e66a      	b.n	8000c80 <__aeabi_ddiv+0x80>
 8000faa:	2300      	movs	r3, #0
 8000fac:	2480      	movs	r4, #128	; 0x80
 8000fae:	469a      	mov	sl, r3
 8000fb0:	2500      	movs	r5, #0
 8000fb2:	4b8a      	ldr	r3, [pc, #552]	; (80011dc <__aeabi_ddiv+0x5dc>)
 8000fb4:	0324      	lsls	r4, r4, #12
 8000fb6:	e67a      	b.n	8000cae <__aeabi_ddiv+0xae>
 8000fb8:	2501      	movs	r5, #1
 8000fba:	426d      	negs	r5, r5
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	1a9b      	subs	r3, r3, r2
 8000fc0:	2b38      	cmp	r3, #56	; 0x38
 8000fc2:	dd00      	ble.n	8000fc6 <__aeabi_ddiv+0x3c6>
 8000fc4:	e670      	b.n	8000ca8 <__aeabi_ddiv+0xa8>
 8000fc6:	2b1f      	cmp	r3, #31
 8000fc8:	dc00      	bgt.n	8000fcc <__aeabi_ddiv+0x3cc>
 8000fca:	e0bf      	b.n	800114c <__aeabi_ddiv+0x54c>
 8000fcc:	211f      	movs	r1, #31
 8000fce:	4249      	negs	r1, r1
 8000fd0:	1a8a      	subs	r2, r1, r2
 8000fd2:	4641      	mov	r1, r8
 8000fd4:	40d1      	lsrs	r1, r2
 8000fd6:	000a      	movs	r2, r1
 8000fd8:	2b20      	cmp	r3, #32
 8000fda:	d004      	beq.n	8000fe6 <__aeabi_ddiv+0x3e6>
 8000fdc:	4641      	mov	r1, r8
 8000fde:	4b80      	ldr	r3, [pc, #512]	; (80011e0 <__aeabi_ddiv+0x5e0>)
 8000fe0:	445b      	add	r3, fp
 8000fe2:	4099      	lsls	r1, r3
 8000fe4:	430d      	orrs	r5, r1
 8000fe6:	1e6b      	subs	r3, r5, #1
 8000fe8:	419d      	sbcs	r5, r3
 8000fea:	2307      	movs	r3, #7
 8000fec:	432a      	orrs	r2, r5
 8000fee:	001d      	movs	r5, r3
 8000ff0:	2400      	movs	r4, #0
 8000ff2:	4015      	ands	r5, r2
 8000ff4:	4213      	tst	r3, r2
 8000ff6:	d100      	bne.n	8000ffa <__aeabi_ddiv+0x3fa>
 8000ff8:	e0d4      	b.n	80011a4 <__aeabi_ddiv+0x5a4>
 8000ffa:	210f      	movs	r1, #15
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	4011      	ands	r1, r2
 8001000:	2904      	cmp	r1, #4
 8001002:	d100      	bne.n	8001006 <__aeabi_ddiv+0x406>
 8001004:	e0cb      	b.n	800119e <__aeabi_ddiv+0x59e>
 8001006:	1d11      	adds	r1, r2, #4
 8001008:	4291      	cmp	r1, r2
 800100a:	4192      	sbcs	r2, r2
 800100c:	4252      	negs	r2, r2
 800100e:	189b      	adds	r3, r3, r2
 8001010:	000a      	movs	r2, r1
 8001012:	0219      	lsls	r1, r3, #8
 8001014:	d400      	bmi.n	8001018 <__aeabi_ddiv+0x418>
 8001016:	e0c2      	b.n	800119e <__aeabi_ddiv+0x59e>
 8001018:	2301      	movs	r3, #1
 800101a:	2400      	movs	r4, #0
 800101c:	2500      	movs	r5, #0
 800101e:	e646      	b.n	8000cae <__aeabi_ddiv+0xae>
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	4641      	mov	r1, r8
 8001024:	031b      	lsls	r3, r3, #12
 8001026:	4219      	tst	r1, r3
 8001028:	d008      	beq.n	800103c <__aeabi_ddiv+0x43c>
 800102a:	421c      	tst	r4, r3
 800102c:	d106      	bne.n	800103c <__aeabi_ddiv+0x43c>
 800102e:	431c      	orrs	r4, r3
 8001030:	0324      	lsls	r4, r4, #12
 8001032:	46ba      	mov	sl, r7
 8001034:	0015      	movs	r5, r2
 8001036:	4b69      	ldr	r3, [pc, #420]	; (80011dc <__aeabi_ddiv+0x5dc>)
 8001038:	0b24      	lsrs	r4, r4, #12
 800103a:	e638      	b.n	8000cae <__aeabi_ddiv+0xae>
 800103c:	2480      	movs	r4, #128	; 0x80
 800103e:	4643      	mov	r3, r8
 8001040:	0324      	lsls	r4, r4, #12
 8001042:	431c      	orrs	r4, r3
 8001044:	0324      	lsls	r4, r4, #12
 8001046:	46b2      	mov	sl, r6
 8001048:	4b64      	ldr	r3, [pc, #400]	; (80011dc <__aeabi_ddiv+0x5dc>)
 800104a:	0b24      	lsrs	r4, r4, #12
 800104c:	e62f      	b.n	8000cae <__aeabi_ddiv+0xae>
 800104e:	2b00      	cmp	r3, #0
 8001050:	d100      	bne.n	8001054 <__aeabi_ddiv+0x454>
 8001052:	e703      	b.n	8000e5c <__aeabi_ddiv+0x25c>
 8001054:	19a6      	adds	r6, r4, r6
 8001056:	1e68      	subs	r0, r5, #1
 8001058:	42a6      	cmp	r6, r4
 800105a:	d200      	bcs.n	800105e <__aeabi_ddiv+0x45e>
 800105c:	e08d      	b.n	800117a <__aeabi_ddiv+0x57a>
 800105e:	428e      	cmp	r6, r1
 8001060:	d200      	bcs.n	8001064 <__aeabi_ddiv+0x464>
 8001062:	e0a3      	b.n	80011ac <__aeabi_ddiv+0x5ac>
 8001064:	d100      	bne.n	8001068 <__aeabi_ddiv+0x468>
 8001066:	e0b3      	b.n	80011d0 <__aeabi_ddiv+0x5d0>
 8001068:	0005      	movs	r5, r0
 800106a:	e6f5      	b.n	8000e58 <__aeabi_ddiv+0x258>
 800106c:	42aa      	cmp	r2, r5
 800106e:	d900      	bls.n	8001072 <__aeabi_ddiv+0x472>
 8001070:	e639      	b.n	8000ce6 <__aeabi_ddiv+0xe6>
 8001072:	4643      	mov	r3, r8
 8001074:	07de      	lsls	r6, r3, #31
 8001076:	0858      	lsrs	r0, r3, #1
 8001078:	086b      	lsrs	r3, r5, #1
 800107a:	431e      	orrs	r6, r3
 800107c:	07ed      	lsls	r5, r5, #31
 800107e:	e639      	b.n	8000cf4 <__aeabi_ddiv+0xf4>
 8001080:	4648      	mov	r0, r9
 8001082:	f001 f8ef 	bl	8002264 <__clzsi2>
 8001086:	0001      	movs	r1, r0
 8001088:	0002      	movs	r2, r0
 800108a:	3115      	adds	r1, #21
 800108c:	3220      	adds	r2, #32
 800108e:	291c      	cmp	r1, #28
 8001090:	dc00      	bgt.n	8001094 <__aeabi_ddiv+0x494>
 8001092:	e72c      	b.n	8000eee <__aeabi_ddiv+0x2ee>
 8001094:	464b      	mov	r3, r9
 8001096:	3808      	subs	r0, #8
 8001098:	4083      	lsls	r3, r0
 800109a:	2500      	movs	r5, #0
 800109c:	4698      	mov	r8, r3
 800109e:	e732      	b.n	8000f06 <__aeabi_ddiv+0x306>
 80010a0:	f001 f8e0 	bl	8002264 <__clzsi2>
 80010a4:	0003      	movs	r3, r0
 80010a6:	001a      	movs	r2, r3
 80010a8:	3215      	adds	r2, #21
 80010aa:	3020      	adds	r0, #32
 80010ac:	2a1c      	cmp	r2, #28
 80010ae:	dc00      	bgt.n	80010b2 <__aeabi_ddiv+0x4b2>
 80010b0:	e700      	b.n	8000eb4 <__aeabi_ddiv+0x2b4>
 80010b2:	4654      	mov	r4, sl
 80010b4:	3b08      	subs	r3, #8
 80010b6:	2200      	movs	r2, #0
 80010b8:	409c      	lsls	r4, r3
 80010ba:	e705      	b.n	8000ec8 <__aeabi_ddiv+0x2c8>
 80010bc:	1936      	adds	r6, r6, r4
 80010be:	3b01      	subs	r3, #1
 80010c0:	42b4      	cmp	r4, r6
 80010c2:	d900      	bls.n	80010c6 <__aeabi_ddiv+0x4c6>
 80010c4:	e6a6      	b.n	8000e14 <__aeabi_ddiv+0x214>
 80010c6:	42b2      	cmp	r2, r6
 80010c8:	d800      	bhi.n	80010cc <__aeabi_ddiv+0x4cc>
 80010ca:	e6a3      	b.n	8000e14 <__aeabi_ddiv+0x214>
 80010cc:	1e83      	subs	r3, r0, #2
 80010ce:	1936      	adds	r6, r6, r4
 80010d0:	e6a0      	b.n	8000e14 <__aeabi_ddiv+0x214>
 80010d2:	1909      	adds	r1, r1, r4
 80010d4:	3d01      	subs	r5, #1
 80010d6:	428c      	cmp	r4, r1
 80010d8:	d900      	bls.n	80010dc <__aeabi_ddiv+0x4dc>
 80010da:	e68d      	b.n	8000df8 <__aeabi_ddiv+0x1f8>
 80010dc:	428a      	cmp	r2, r1
 80010de:	d800      	bhi.n	80010e2 <__aeabi_ddiv+0x4e2>
 80010e0:	e68a      	b.n	8000df8 <__aeabi_ddiv+0x1f8>
 80010e2:	1e85      	subs	r5, r0, #2
 80010e4:	1909      	adds	r1, r1, r4
 80010e6:	e687      	b.n	8000df8 <__aeabi_ddiv+0x1f8>
 80010e8:	230f      	movs	r3, #15
 80010ea:	402b      	ands	r3, r5
 80010ec:	2b04      	cmp	r3, #4
 80010ee:	d100      	bne.n	80010f2 <__aeabi_ddiv+0x4f2>
 80010f0:	e6bc      	b.n	8000e6c <__aeabi_ddiv+0x26c>
 80010f2:	2305      	movs	r3, #5
 80010f4:	425b      	negs	r3, r3
 80010f6:	42ab      	cmp	r3, r5
 80010f8:	419b      	sbcs	r3, r3
 80010fa:	3504      	adds	r5, #4
 80010fc:	425b      	negs	r3, r3
 80010fe:	08ed      	lsrs	r5, r5, #3
 8001100:	4498      	add	r8, r3
 8001102:	e6b4      	b.n	8000e6e <__aeabi_ddiv+0x26e>
 8001104:	42af      	cmp	r7, r5
 8001106:	d900      	bls.n	800110a <__aeabi_ddiv+0x50a>
 8001108:	e660      	b.n	8000dcc <__aeabi_ddiv+0x1cc>
 800110a:	4282      	cmp	r2, r0
 800110c:	d804      	bhi.n	8001118 <__aeabi_ddiv+0x518>
 800110e:	d000      	beq.n	8001112 <__aeabi_ddiv+0x512>
 8001110:	e65c      	b.n	8000dcc <__aeabi_ddiv+0x1cc>
 8001112:	42ae      	cmp	r6, r5
 8001114:	d800      	bhi.n	8001118 <__aeabi_ddiv+0x518>
 8001116:	e659      	b.n	8000dcc <__aeabi_ddiv+0x1cc>
 8001118:	2302      	movs	r3, #2
 800111a:	425b      	negs	r3, r3
 800111c:	469c      	mov	ip, r3
 800111e:	9b00      	ldr	r3, [sp, #0]
 8001120:	44e0      	add	r8, ip
 8001122:	469c      	mov	ip, r3
 8001124:	4465      	add	r5, ip
 8001126:	429d      	cmp	r5, r3
 8001128:	419b      	sbcs	r3, r3
 800112a:	425b      	negs	r3, r3
 800112c:	191b      	adds	r3, r3, r4
 800112e:	18c0      	adds	r0, r0, r3
 8001130:	e64d      	b.n	8000dce <__aeabi_ddiv+0x1ce>
 8001132:	428a      	cmp	r2, r1
 8001134:	d800      	bhi.n	8001138 <__aeabi_ddiv+0x538>
 8001136:	e60e      	b.n	8000d56 <__aeabi_ddiv+0x156>
 8001138:	1e83      	subs	r3, r0, #2
 800113a:	1909      	adds	r1, r1, r4
 800113c:	e60b      	b.n	8000d56 <__aeabi_ddiv+0x156>
 800113e:	428a      	cmp	r2, r1
 8001140:	d800      	bhi.n	8001144 <__aeabi_ddiv+0x544>
 8001142:	e5f4      	b.n	8000d2e <__aeabi_ddiv+0x12e>
 8001144:	1e83      	subs	r3, r0, #2
 8001146:	4698      	mov	r8, r3
 8001148:	1909      	adds	r1, r1, r4
 800114a:	e5f0      	b.n	8000d2e <__aeabi_ddiv+0x12e>
 800114c:	4925      	ldr	r1, [pc, #148]	; (80011e4 <__aeabi_ddiv+0x5e4>)
 800114e:	0028      	movs	r0, r5
 8001150:	4459      	add	r1, fp
 8001152:	408d      	lsls	r5, r1
 8001154:	4642      	mov	r2, r8
 8001156:	408a      	lsls	r2, r1
 8001158:	1e69      	subs	r1, r5, #1
 800115a:	418d      	sbcs	r5, r1
 800115c:	4641      	mov	r1, r8
 800115e:	40d8      	lsrs	r0, r3
 8001160:	40d9      	lsrs	r1, r3
 8001162:	4302      	orrs	r2, r0
 8001164:	432a      	orrs	r2, r5
 8001166:	000b      	movs	r3, r1
 8001168:	0751      	lsls	r1, r2, #29
 800116a:	d100      	bne.n	800116e <__aeabi_ddiv+0x56e>
 800116c:	e751      	b.n	8001012 <__aeabi_ddiv+0x412>
 800116e:	210f      	movs	r1, #15
 8001170:	4011      	ands	r1, r2
 8001172:	2904      	cmp	r1, #4
 8001174:	d000      	beq.n	8001178 <__aeabi_ddiv+0x578>
 8001176:	e746      	b.n	8001006 <__aeabi_ddiv+0x406>
 8001178:	e74b      	b.n	8001012 <__aeabi_ddiv+0x412>
 800117a:	0005      	movs	r5, r0
 800117c:	428e      	cmp	r6, r1
 800117e:	d000      	beq.n	8001182 <__aeabi_ddiv+0x582>
 8001180:	e66a      	b.n	8000e58 <__aeabi_ddiv+0x258>
 8001182:	9a00      	ldr	r2, [sp, #0]
 8001184:	4293      	cmp	r3, r2
 8001186:	d000      	beq.n	800118a <__aeabi_ddiv+0x58a>
 8001188:	e666      	b.n	8000e58 <__aeabi_ddiv+0x258>
 800118a:	e667      	b.n	8000e5c <__aeabi_ddiv+0x25c>
 800118c:	4a16      	ldr	r2, [pc, #88]	; (80011e8 <__aeabi_ddiv+0x5e8>)
 800118e:	445a      	add	r2, fp
 8001190:	2a00      	cmp	r2, #0
 8001192:	dc00      	bgt.n	8001196 <__aeabi_ddiv+0x596>
 8001194:	e710      	b.n	8000fb8 <__aeabi_ddiv+0x3b8>
 8001196:	2301      	movs	r3, #1
 8001198:	2500      	movs	r5, #0
 800119a:	4498      	add	r8, r3
 800119c:	e667      	b.n	8000e6e <__aeabi_ddiv+0x26e>
 800119e:	075d      	lsls	r5, r3, #29
 80011a0:	025b      	lsls	r3, r3, #9
 80011a2:	0b1c      	lsrs	r4, r3, #12
 80011a4:	08d2      	lsrs	r2, r2, #3
 80011a6:	2300      	movs	r3, #0
 80011a8:	4315      	orrs	r5, r2
 80011aa:	e580      	b.n	8000cae <__aeabi_ddiv+0xae>
 80011ac:	9800      	ldr	r0, [sp, #0]
 80011ae:	3d02      	subs	r5, #2
 80011b0:	0042      	lsls	r2, r0, #1
 80011b2:	4282      	cmp	r2, r0
 80011b4:	41bf      	sbcs	r7, r7
 80011b6:	427f      	negs	r7, r7
 80011b8:	193c      	adds	r4, r7, r4
 80011ba:	1936      	adds	r6, r6, r4
 80011bc:	9200      	str	r2, [sp, #0]
 80011be:	e7dd      	b.n	800117c <__aeabi_ddiv+0x57c>
 80011c0:	2480      	movs	r4, #128	; 0x80
 80011c2:	4643      	mov	r3, r8
 80011c4:	0324      	lsls	r4, r4, #12
 80011c6:	431c      	orrs	r4, r3
 80011c8:	0324      	lsls	r4, r4, #12
 80011ca:	4b04      	ldr	r3, [pc, #16]	; (80011dc <__aeabi_ddiv+0x5dc>)
 80011cc:	0b24      	lsrs	r4, r4, #12
 80011ce:	e56e      	b.n	8000cae <__aeabi_ddiv+0xae>
 80011d0:	9a00      	ldr	r2, [sp, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d3ea      	bcc.n	80011ac <__aeabi_ddiv+0x5ac>
 80011d6:	0005      	movs	r5, r0
 80011d8:	e7d3      	b.n	8001182 <__aeabi_ddiv+0x582>
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	000007ff 	.word	0x000007ff
 80011e0:	0000043e 	.word	0x0000043e
 80011e4:	0000041e 	.word	0x0000041e
 80011e8:	000003ff 	.word	0x000003ff

080011ec <__eqdf2>:
 80011ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ee:	464e      	mov	r6, r9
 80011f0:	4645      	mov	r5, r8
 80011f2:	46de      	mov	lr, fp
 80011f4:	4657      	mov	r7, sl
 80011f6:	4690      	mov	r8, r2
 80011f8:	b5e0      	push	{r5, r6, r7, lr}
 80011fa:	0017      	movs	r7, r2
 80011fc:	031a      	lsls	r2, r3, #12
 80011fe:	0b12      	lsrs	r2, r2, #12
 8001200:	0005      	movs	r5, r0
 8001202:	4684      	mov	ip, r0
 8001204:	4819      	ldr	r0, [pc, #100]	; (800126c <__eqdf2+0x80>)
 8001206:	030e      	lsls	r6, r1, #12
 8001208:	004c      	lsls	r4, r1, #1
 800120a:	4691      	mov	r9, r2
 800120c:	005a      	lsls	r2, r3, #1
 800120e:	0fdb      	lsrs	r3, r3, #31
 8001210:	469b      	mov	fp, r3
 8001212:	0b36      	lsrs	r6, r6, #12
 8001214:	0d64      	lsrs	r4, r4, #21
 8001216:	0fc9      	lsrs	r1, r1, #31
 8001218:	0d52      	lsrs	r2, r2, #21
 800121a:	4284      	cmp	r4, r0
 800121c:	d019      	beq.n	8001252 <__eqdf2+0x66>
 800121e:	4282      	cmp	r2, r0
 8001220:	d010      	beq.n	8001244 <__eqdf2+0x58>
 8001222:	2001      	movs	r0, #1
 8001224:	4294      	cmp	r4, r2
 8001226:	d10e      	bne.n	8001246 <__eqdf2+0x5a>
 8001228:	454e      	cmp	r6, r9
 800122a:	d10c      	bne.n	8001246 <__eqdf2+0x5a>
 800122c:	2001      	movs	r0, #1
 800122e:	45c4      	cmp	ip, r8
 8001230:	d109      	bne.n	8001246 <__eqdf2+0x5a>
 8001232:	4559      	cmp	r1, fp
 8001234:	d017      	beq.n	8001266 <__eqdf2+0x7a>
 8001236:	2c00      	cmp	r4, #0
 8001238:	d105      	bne.n	8001246 <__eqdf2+0x5a>
 800123a:	0030      	movs	r0, r6
 800123c:	4328      	orrs	r0, r5
 800123e:	1e43      	subs	r3, r0, #1
 8001240:	4198      	sbcs	r0, r3
 8001242:	e000      	b.n	8001246 <__eqdf2+0x5a>
 8001244:	2001      	movs	r0, #1
 8001246:	bcf0      	pop	{r4, r5, r6, r7}
 8001248:	46bb      	mov	fp, r7
 800124a:	46b2      	mov	sl, r6
 800124c:	46a9      	mov	r9, r5
 800124e:	46a0      	mov	r8, r4
 8001250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001252:	0033      	movs	r3, r6
 8001254:	2001      	movs	r0, #1
 8001256:	432b      	orrs	r3, r5
 8001258:	d1f5      	bne.n	8001246 <__eqdf2+0x5a>
 800125a:	42a2      	cmp	r2, r4
 800125c:	d1f3      	bne.n	8001246 <__eqdf2+0x5a>
 800125e:	464b      	mov	r3, r9
 8001260:	433b      	orrs	r3, r7
 8001262:	d1f0      	bne.n	8001246 <__eqdf2+0x5a>
 8001264:	e7e2      	b.n	800122c <__eqdf2+0x40>
 8001266:	2000      	movs	r0, #0
 8001268:	e7ed      	b.n	8001246 <__eqdf2+0x5a>
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	000007ff 	.word	0x000007ff

08001270 <__gedf2>:
 8001270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001272:	4647      	mov	r7, r8
 8001274:	46ce      	mov	lr, r9
 8001276:	0004      	movs	r4, r0
 8001278:	0018      	movs	r0, r3
 800127a:	0016      	movs	r6, r2
 800127c:	031b      	lsls	r3, r3, #12
 800127e:	0b1b      	lsrs	r3, r3, #12
 8001280:	4d2d      	ldr	r5, [pc, #180]	; (8001338 <__gedf2+0xc8>)
 8001282:	004a      	lsls	r2, r1, #1
 8001284:	4699      	mov	r9, r3
 8001286:	b580      	push	{r7, lr}
 8001288:	0043      	lsls	r3, r0, #1
 800128a:	030f      	lsls	r7, r1, #12
 800128c:	46a4      	mov	ip, r4
 800128e:	46b0      	mov	r8, r6
 8001290:	0b3f      	lsrs	r7, r7, #12
 8001292:	0d52      	lsrs	r2, r2, #21
 8001294:	0fc9      	lsrs	r1, r1, #31
 8001296:	0d5b      	lsrs	r3, r3, #21
 8001298:	0fc0      	lsrs	r0, r0, #31
 800129a:	42aa      	cmp	r2, r5
 800129c:	d021      	beq.n	80012e2 <__gedf2+0x72>
 800129e:	42ab      	cmp	r3, r5
 80012a0:	d013      	beq.n	80012ca <__gedf2+0x5a>
 80012a2:	2a00      	cmp	r2, #0
 80012a4:	d122      	bne.n	80012ec <__gedf2+0x7c>
 80012a6:	433c      	orrs	r4, r7
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d102      	bne.n	80012b2 <__gedf2+0x42>
 80012ac:	464d      	mov	r5, r9
 80012ae:	432e      	orrs	r6, r5
 80012b0:	d022      	beq.n	80012f8 <__gedf2+0x88>
 80012b2:	2c00      	cmp	r4, #0
 80012b4:	d010      	beq.n	80012d8 <__gedf2+0x68>
 80012b6:	4281      	cmp	r1, r0
 80012b8:	d022      	beq.n	8001300 <__gedf2+0x90>
 80012ba:	2002      	movs	r0, #2
 80012bc:	3901      	subs	r1, #1
 80012be:	4008      	ands	r0, r1
 80012c0:	3801      	subs	r0, #1
 80012c2:	bcc0      	pop	{r6, r7}
 80012c4:	46b9      	mov	r9, r7
 80012c6:	46b0      	mov	r8, r6
 80012c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ca:	464d      	mov	r5, r9
 80012cc:	432e      	orrs	r6, r5
 80012ce:	d129      	bne.n	8001324 <__gedf2+0xb4>
 80012d0:	2a00      	cmp	r2, #0
 80012d2:	d1f0      	bne.n	80012b6 <__gedf2+0x46>
 80012d4:	433c      	orrs	r4, r7
 80012d6:	d1ee      	bne.n	80012b6 <__gedf2+0x46>
 80012d8:	2800      	cmp	r0, #0
 80012da:	d1f2      	bne.n	80012c2 <__gedf2+0x52>
 80012dc:	2001      	movs	r0, #1
 80012de:	4240      	negs	r0, r0
 80012e0:	e7ef      	b.n	80012c2 <__gedf2+0x52>
 80012e2:	003d      	movs	r5, r7
 80012e4:	4325      	orrs	r5, r4
 80012e6:	d11d      	bne.n	8001324 <__gedf2+0xb4>
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d0ee      	beq.n	80012ca <__gedf2+0x5a>
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1e2      	bne.n	80012b6 <__gedf2+0x46>
 80012f0:	464c      	mov	r4, r9
 80012f2:	4326      	orrs	r6, r4
 80012f4:	d1df      	bne.n	80012b6 <__gedf2+0x46>
 80012f6:	e7e0      	b.n	80012ba <__gedf2+0x4a>
 80012f8:	2000      	movs	r0, #0
 80012fa:	2c00      	cmp	r4, #0
 80012fc:	d0e1      	beq.n	80012c2 <__gedf2+0x52>
 80012fe:	e7dc      	b.n	80012ba <__gedf2+0x4a>
 8001300:	429a      	cmp	r2, r3
 8001302:	dc0a      	bgt.n	800131a <__gedf2+0xaa>
 8001304:	dbe8      	blt.n	80012d8 <__gedf2+0x68>
 8001306:	454f      	cmp	r7, r9
 8001308:	d8d7      	bhi.n	80012ba <__gedf2+0x4a>
 800130a:	d00e      	beq.n	800132a <__gedf2+0xba>
 800130c:	2000      	movs	r0, #0
 800130e:	454f      	cmp	r7, r9
 8001310:	d2d7      	bcs.n	80012c2 <__gedf2+0x52>
 8001312:	2900      	cmp	r1, #0
 8001314:	d0e2      	beq.n	80012dc <__gedf2+0x6c>
 8001316:	0008      	movs	r0, r1
 8001318:	e7d3      	b.n	80012c2 <__gedf2+0x52>
 800131a:	4243      	negs	r3, r0
 800131c:	4158      	adcs	r0, r3
 800131e:	0040      	lsls	r0, r0, #1
 8001320:	3801      	subs	r0, #1
 8001322:	e7ce      	b.n	80012c2 <__gedf2+0x52>
 8001324:	2002      	movs	r0, #2
 8001326:	4240      	negs	r0, r0
 8001328:	e7cb      	b.n	80012c2 <__gedf2+0x52>
 800132a:	45c4      	cmp	ip, r8
 800132c:	d8c5      	bhi.n	80012ba <__gedf2+0x4a>
 800132e:	2000      	movs	r0, #0
 8001330:	45c4      	cmp	ip, r8
 8001332:	d2c6      	bcs.n	80012c2 <__gedf2+0x52>
 8001334:	e7ed      	b.n	8001312 <__gedf2+0xa2>
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	000007ff 	.word	0x000007ff

0800133c <__ledf2>:
 800133c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133e:	4647      	mov	r7, r8
 8001340:	46ce      	mov	lr, r9
 8001342:	0004      	movs	r4, r0
 8001344:	0018      	movs	r0, r3
 8001346:	0016      	movs	r6, r2
 8001348:	031b      	lsls	r3, r3, #12
 800134a:	0b1b      	lsrs	r3, r3, #12
 800134c:	4d2c      	ldr	r5, [pc, #176]	; (8001400 <__ledf2+0xc4>)
 800134e:	004a      	lsls	r2, r1, #1
 8001350:	4699      	mov	r9, r3
 8001352:	b580      	push	{r7, lr}
 8001354:	0043      	lsls	r3, r0, #1
 8001356:	030f      	lsls	r7, r1, #12
 8001358:	46a4      	mov	ip, r4
 800135a:	46b0      	mov	r8, r6
 800135c:	0b3f      	lsrs	r7, r7, #12
 800135e:	0d52      	lsrs	r2, r2, #21
 8001360:	0fc9      	lsrs	r1, r1, #31
 8001362:	0d5b      	lsrs	r3, r3, #21
 8001364:	0fc0      	lsrs	r0, r0, #31
 8001366:	42aa      	cmp	r2, r5
 8001368:	d00d      	beq.n	8001386 <__ledf2+0x4a>
 800136a:	42ab      	cmp	r3, r5
 800136c:	d010      	beq.n	8001390 <__ledf2+0x54>
 800136e:	2a00      	cmp	r2, #0
 8001370:	d127      	bne.n	80013c2 <__ledf2+0x86>
 8001372:	433c      	orrs	r4, r7
 8001374:	2b00      	cmp	r3, #0
 8001376:	d111      	bne.n	800139c <__ledf2+0x60>
 8001378:	464d      	mov	r5, r9
 800137a:	432e      	orrs	r6, r5
 800137c:	d10e      	bne.n	800139c <__ledf2+0x60>
 800137e:	2000      	movs	r0, #0
 8001380:	2c00      	cmp	r4, #0
 8001382:	d015      	beq.n	80013b0 <__ledf2+0x74>
 8001384:	e00e      	b.n	80013a4 <__ledf2+0x68>
 8001386:	003d      	movs	r5, r7
 8001388:	4325      	orrs	r5, r4
 800138a:	d110      	bne.n	80013ae <__ledf2+0x72>
 800138c:	4293      	cmp	r3, r2
 800138e:	d118      	bne.n	80013c2 <__ledf2+0x86>
 8001390:	464d      	mov	r5, r9
 8001392:	432e      	orrs	r6, r5
 8001394:	d10b      	bne.n	80013ae <__ledf2+0x72>
 8001396:	2a00      	cmp	r2, #0
 8001398:	d102      	bne.n	80013a0 <__ledf2+0x64>
 800139a:	433c      	orrs	r4, r7
 800139c:	2c00      	cmp	r4, #0
 800139e:	d00b      	beq.n	80013b8 <__ledf2+0x7c>
 80013a0:	4281      	cmp	r1, r0
 80013a2:	d014      	beq.n	80013ce <__ledf2+0x92>
 80013a4:	2002      	movs	r0, #2
 80013a6:	3901      	subs	r1, #1
 80013a8:	4008      	ands	r0, r1
 80013aa:	3801      	subs	r0, #1
 80013ac:	e000      	b.n	80013b0 <__ledf2+0x74>
 80013ae:	2002      	movs	r0, #2
 80013b0:	bcc0      	pop	{r6, r7}
 80013b2:	46b9      	mov	r9, r7
 80013b4:	46b0      	mov	r8, r6
 80013b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013b8:	2800      	cmp	r0, #0
 80013ba:	d1f9      	bne.n	80013b0 <__ledf2+0x74>
 80013bc:	2001      	movs	r0, #1
 80013be:	4240      	negs	r0, r0
 80013c0:	e7f6      	b.n	80013b0 <__ledf2+0x74>
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1ec      	bne.n	80013a0 <__ledf2+0x64>
 80013c6:	464c      	mov	r4, r9
 80013c8:	4326      	orrs	r6, r4
 80013ca:	d1e9      	bne.n	80013a0 <__ledf2+0x64>
 80013cc:	e7ea      	b.n	80013a4 <__ledf2+0x68>
 80013ce:	429a      	cmp	r2, r3
 80013d0:	dd04      	ble.n	80013dc <__ledf2+0xa0>
 80013d2:	4243      	negs	r3, r0
 80013d4:	4158      	adcs	r0, r3
 80013d6:	0040      	lsls	r0, r0, #1
 80013d8:	3801      	subs	r0, #1
 80013da:	e7e9      	b.n	80013b0 <__ledf2+0x74>
 80013dc:	429a      	cmp	r2, r3
 80013de:	dbeb      	blt.n	80013b8 <__ledf2+0x7c>
 80013e0:	454f      	cmp	r7, r9
 80013e2:	d8df      	bhi.n	80013a4 <__ledf2+0x68>
 80013e4:	d006      	beq.n	80013f4 <__ledf2+0xb8>
 80013e6:	2000      	movs	r0, #0
 80013e8:	454f      	cmp	r7, r9
 80013ea:	d2e1      	bcs.n	80013b0 <__ledf2+0x74>
 80013ec:	2900      	cmp	r1, #0
 80013ee:	d0e5      	beq.n	80013bc <__ledf2+0x80>
 80013f0:	0008      	movs	r0, r1
 80013f2:	e7dd      	b.n	80013b0 <__ledf2+0x74>
 80013f4:	45c4      	cmp	ip, r8
 80013f6:	d8d5      	bhi.n	80013a4 <__ledf2+0x68>
 80013f8:	2000      	movs	r0, #0
 80013fa:	45c4      	cmp	ip, r8
 80013fc:	d2d8      	bcs.n	80013b0 <__ledf2+0x74>
 80013fe:	e7f5      	b.n	80013ec <__ledf2+0xb0>
 8001400:	000007ff 	.word	0x000007ff

08001404 <__aeabi_dmul>:
 8001404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001406:	4657      	mov	r7, sl
 8001408:	464e      	mov	r6, r9
 800140a:	4645      	mov	r5, r8
 800140c:	46de      	mov	lr, fp
 800140e:	b5e0      	push	{r5, r6, r7, lr}
 8001410:	4698      	mov	r8, r3
 8001412:	030c      	lsls	r4, r1, #12
 8001414:	004b      	lsls	r3, r1, #1
 8001416:	0006      	movs	r6, r0
 8001418:	4692      	mov	sl, r2
 800141a:	b087      	sub	sp, #28
 800141c:	0b24      	lsrs	r4, r4, #12
 800141e:	0d5b      	lsrs	r3, r3, #21
 8001420:	0fcf      	lsrs	r7, r1, #31
 8001422:	2b00      	cmp	r3, #0
 8001424:	d100      	bne.n	8001428 <__aeabi_dmul+0x24>
 8001426:	e15c      	b.n	80016e2 <__aeabi_dmul+0x2de>
 8001428:	4ad9      	ldr	r2, [pc, #868]	; (8001790 <__aeabi_dmul+0x38c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d100      	bne.n	8001430 <__aeabi_dmul+0x2c>
 800142e:	e175      	b.n	800171c <__aeabi_dmul+0x318>
 8001430:	0f42      	lsrs	r2, r0, #29
 8001432:	00e4      	lsls	r4, r4, #3
 8001434:	4314      	orrs	r4, r2
 8001436:	2280      	movs	r2, #128	; 0x80
 8001438:	0412      	lsls	r2, r2, #16
 800143a:	4314      	orrs	r4, r2
 800143c:	4ad5      	ldr	r2, [pc, #852]	; (8001794 <__aeabi_dmul+0x390>)
 800143e:	00c5      	lsls	r5, r0, #3
 8001440:	4694      	mov	ip, r2
 8001442:	4463      	add	r3, ip
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2300      	movs	r3, #0
 8001448:	4699      	mov	r9, r3
 800144a:	469b      	mov	fp, r3
 800144c:	4643      	mov	r3, r8
 800144e:	4642      	mov	r2, r8
 8001450:	031e      	lsls	r6, r3, #12
 8001452:	0fd2      	lsrs	r2, r2, #31
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	4650      	mov	r0, sl
 8001458:	4690      	mov	r8, r2
 800145a:	0b36      	lsrs	r6, r6, #12
 800145c:	0d5b      	lsrs	r3, r3, #21
 800145e:	d100      	bne.n	8001462 <__aeabi_dmul+0x5e>
 8001460:	e120      	b.n	80016a4 <__aeabi_dmul+0x2a0>
 8001462:	4acb      	ldr	r2, [pc, #812]	; (8001790 <__aeabi_dmul+0x38c>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d100      	bne.n	800146a <__aeabi_dmul+0x66>
 8001468:	e162      	b.n	8001730 <__aeabi_dmul+0x32c>
 800146a:	49ca      	ldr	r1, [pc, #808]	; (8001794 <__aeabi_dmul+0x390>)
 800146c:	0f42      	lsrs	r2, r0, #29
 800146e:	468c      	mov	ip, r1
 8001470:	9900      	ldr	r1, [sp, #0]
 8001472:	4463      	add	r3, ip
 8001474:	00f6      	lsls	r6, r6, #3
 8001476:	468c      	mov	ip, r1
 8001478:	4316      	orrs	r6, r2
 800147a:	2280      	movs	r2, #128	; 0x80
 800147c:	449c      	add	ip, r3
 800147e:	0412      	lsls	r2, r2, #16
 8001480:	4663      	mov	r3, ip
 8001482:	4316      	orrs	r6, r2
 8001484:	00c2      	lsls	r2, r0, #3
 8001486:	2000      	movs	r0, #0
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	9900      	ldr	r1, [sp, #0]
 800148c:	4643      	mov	r3, r8
 800148e:	3101      	adds	r1, #1
 8001490:	468c      	mov	ip, r1
 8001492:	4649      	mov	r1, r9
 8001494:	407b      	eors	r3, r7
 8001496:	9301      	str	r3, [sp, #4]
 8001498:	290f      	cmp	r1, #15
 800149a:	d826      	bhi.n	80014ea <__aeabi_dmul+0xe6>
 800149c:	4bbe      	ldr	r3, [pc, #760]	; (8001798 <__aeabi_dmul+0x394>)
 800149e:	0089      	lsls	r1, r1, #2
 80014a0:	5859      	ldr	r1, [r3, r1]
 80014a2:	468f      	mov	pc, r1
 80014a4:	4643      	mov	r3, r8
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	0034      	movs	r4, r6
 80014aa:	0015      	movs	r5, r2
 80014ac:	4683      	mov	fp, r0
 80014ae:	465b      	mov	r3, fp
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d016      	beq.n	80014e2 <__aeabi_dmul+0xde>
 80014b4:	2b03      	cmp	r3, #3
 80014b6:	d100      	bne.n	80014ba <__aeabi_dmul+0xb6>
 80014b8:	e203      	b.n	80018c2 <__aeabi_dmul+0x4be>
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d000      	beq.n	80014c0 <__aeabi_dmul+0xbc>
 80014be:	e0cd      	b.n	800165c <__aeabi_dmul+0x258>
 80014c0:	2200      	movs	r2, #0
 80014c2:	2400      	movs	r4, #0
 80014c4:	2500      	movs	r5, #0
 80014c6:	9b01      	ldr	r3, [sp, #4]
 80014c8:	0512      	lsls	r2, r2, #20
 80014ca:	4322      	orrs	r2, r4
 80014cc:	07db      	lsls	r3, r3, #31
 80014ce:	431a      	orrs	r2, r3
 80014d0:	0028      	movs	r0, r5
 80014d2:	0011      	movs	r1, r2
 80014d4:	b007      	add	sp, #28
 80014d6:	bcf0      	pop	{r4, r5, r6, r7}
 80014d8:	46bb      	mov	fp, r7
 80014da:	46b2      	mov	sl, r6
 80014dc:	46a9      	mov	r9, r5
 80014de:	46a0      	mov	r8, r4
 80014e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e2:	2400      	movs	r4, #0
 80014e4:	2500      	movs	r5, #0
 80014e6:	4aaa      	ldr	r2, [pc, #680]	; (8001790 <__aeabi_dmul+0x38c>)
 80014e8:	e7ed      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80014ea:	0c28      	lsrs	r0, r5, #16
 80014ec:	042d      	lsls	r5, r5, #16
 80014ee:	0c2d      	lsrs	r5, r5, #16
 80014f0:	002b      	movs	r3, r5
 80014f2:	0c11      	lsrs	r1, r2, #16
 80014f4:	0412      	lsls	r2, r2, #16
 80014f6:	0c12      	lsrs	r2, r2, #16
 80014f8:	4353      	muls	r3, r2
 80014fa:	4698      	mov	r8, r3
 80014fc:	0013      	movs	r3, r2
 80014fe:	002f      	movs	r7, r5
 8001500:	4343      	muls	r3, r0
 8001502:	4699      	mov	r9, r3
 8001504:	434f      	muls	r7, r1
 8001506:	444f      	add	r7, r9
 8001508:	46bb      	mov	fp, r7
 800150a:	4647      	mov	r7, r8
 800150c:	000b      	movs	r3, r1
 800150e:	0c3f      	lsrs	r7, r7, #16
 8001510:	46ba      	mov	sl, r7
 8001512:	4343      	muls	r3, r0
 8001514:	44da      	add	sl, fp
 8001516:	9302      	str	r3, [sp, #8]
 8001518:	45d1      	cmp	r9, sl
 800151a:	d904      	bls.n	8001526 <__aeabi_dmul+0x122>
 800151c:	2780      	movs	r7, #128	; 0x80
 800151e:	027f      	lsls	r7, r7, #9
 8001520:	46b9      	mov	r9, r7
 8001522:	444b      	add	r3, r9
 8001524:	9302      	str	r3, [sp, #8]
 8001526:	4653      	mov	r3, sl
 8001528:	0c1b      	lsrs	r3, r3, #16
 800152a:	469b      	mov	fp, r3
 800152c:	4653      	mov	r3, sl
 800152e:	041f      	lsls	r7, r3, #16
 8001530:	4643      	mov	r3, r8
 8001532:	041b      	lsls	r3, r3, #16
 8001534:	0c1b      	lsrs	r3, r3, #16
 8001536:	4698      	mov	r8, r3
 8001538:	003b      	movs	r3, r7
 800153a:	4443      	add	r3, r8
 800153c:	9304      	str	r3, [sp, #16]
 800153e:	0c33      	lsrs	r3, r6, #16
 8001540:	0436      	lsls	r6, r6, #16
 8001542:	0c36      	lsrs	r6, r6, #16
 8001544:	4698      	mov	r8, r3
 8001546:	0033      	movs	r3, r6
 8001548:	4343      	muls	r3, r0
 800154a:	4699      	mov	r9, r3
 800154c:	4643      	mov	r3, r8
 800154e:	4343      	muls	r3, r0
 8001550:	002f      	movs	r7, r5
 8001552:	469a      	mov	sl, r3
 8001554:	4643      	mov	r3, r8
 8001556:	4377      	muls	r7, r6
 8001558:	435d      	muls	r5, r3
 800155a:	0c38      	lsrs	r0, r7, #16
 800155c:	444d      	add	r5, r9
 800155e:	1945      	adds	r5, r0, r5
 8001560:	45a9      	cmp	r9, r5
 8001562:	d903      	bls.n	800156c <__aeabi_dmul+0x168>
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	025b      	lsls	r3, r3, #9
 8001568:	4699      	mov	r9, r3
 800156a:	44ca      	add	sl, r9
 800156c:	043f      	lsls	r7, r7, #16
 800156e:	0c28      	lsrs	r0, r5, #16
 8001570:	0c3f      	lsrs	r7, r7, #16
 8001572:	042d      	lsls	r5, r5, #16
 8001574:	19ed      	adds	r5, r5, r7
 8001576:	0c27      	lsrs	r7, r4, #16
 8001578:	0424      	lsls	r4, r4, #16
 800157a:	0c24      	lsrs	r4, r4, #16
 800157c:	0003      	movs	r3, r0
 800157e:	0020      	movs	r0, r4
 8001580:	4350      	muls	r0, r2
 8001582:	437a      	muls	r2, r7
 8001584:	4691      	mov	r9, r2
 8001586:	003a      	movs	r2, r7
 8001588:	4453      	add	r3, sl
 800158a:	9305      	str	r3, [sp, #20]
 800158c:	0c03      	lsrs	r3, r0, #16
 800158e:	469a      	mov	sl, r3
 8001590:	434a      	muls	r2, r1
 8001592:	4361      	muls	r1, r4
 8001594:	4449      	add	r1, r9
 8001596:	4451      	add	r1, sl
 8001598:	44ab      	add	fp, r5
 800159a:	4589      	cmp	r9, r1
 800159c:	d903      	bls.n	80015a6 <__aeabi_dmul+0x1a2>
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	025b      	lsls	r3, r3, #9
 80015a2:	4699      	mov	r9, r3
 80015a4:	444a      	add	r2, r9
 80015a6:	0400      	lsls	r0, r0, #16
 80015a8:	0c0b      	lsrs	r3, r1, #16
 80015aa:	0c00      	lsrs	r0, r0, #16
 80015ac:	0409      	lsls	r1, r1, #16
 80015ae:	1809      	adds	r1, r1, r0
 80015b0:	0020      	movs	r0, r4
 80015b2:	4699      	mov	r9, r3
 80015b4:	4643      	mov	r3, r8
 80015b6:	4370      	muls	r0, r6
 80015b8:	435c      	muls	r4, r3
 80015ba:	437e      	muls	r6, r7
 80015bc:	435f      	muls	r7, r3
 80015be:	0c03      	lsrs	r3, r0, #16
 80015c0:	4698      	mov	r8, r3
 80015c2:	19a4      	adds	r4, r4, r6
 80015c4:	4444      	add	r4, r8
 80015c6:	444a      	add	r2, r9
 80015c8:	9703      	str	r7, [sp, #12]
 80015ca:	42a6      	cmp	r6, r4
 80015cc:	d904      	bls.n	80015d8 <__aeabi_dmul+0x1d4>
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	025b      	lsls	r3, r3, #9
 80015d2:	4698      	mov	r8, r3
 80015d4:	4447      	add	r7, r8
 80015d6:	9703      	str	r7, [sp, #12]
 80015d8:	0423      	lsls	r3, r4, #16
 80015da:	9e02      	ldr	r6, [sp, #8]
 80015dc:	469a      	mov	sl, r3
 80015de:	9b05      	ldr	r3, [sp, #20]
 80015e0:	445e      	add	r6, fp
 80015e2:	4698      	mov	r8, r3
 80015e4:	42ae      	cmp	r6, r5
 80015e6:	41ad      	sbcs	r5, r5
 80015e8:	1876      	adds	r6, r6, r1
 80015ea:	428e      	cmp	r6, r1
 80015ec:	4189      	sbcs	r1, r1
 80015ee:	0400      	lsls	r0, r0, #16
 80015f0:	0c00      	lsrs	r0, r0, #16
 80015f2:	4450      	add	r0, sl
 80015f4:	4440      	add	r0, r8
 80015f6:	426d      	negs	r5, r5
 80015f8:	1947      	adds	r7, r0, r5
 80015fa:	46b8      	mov	r8, r7
 80015fc:	4693      	mov	fp, r2
 80015fe:	4249      	negs	r1, r1
 8001600:	4689      	mov	r9, r1
 8001602:	44c3      	add	fp, r8
 8001604:	44d9      	add	r9, fp
 8001606:	4298      	cmp	r0, r3
 8001608:	4180      	sbcs	r0, r0
 800160a:	45a8      	cmp	r8, r5
 800160c:	41ad      	sbcs	r5, r5
 800160e:	4593      	cmp	fp, r2
 8001610:	4192      	sbcs	r2, r2
 8001612:	4589      	cmp	r9, r1
 8001614:	4189      	sbcs	r1, r1
 8001616:	426d      	negs	r5, r5
 8001618:	4240      	negs	r0, r0
 800161a:	4328      	orrs	r0, r5
 800161c:	0c24      	lsrs	r4, r4, #16
 800161e:	4252      	negs	r2, r2
 8001620:	4249      	negs	r1, r1
 8001622:	430a      	orrs	r2, r1
 8001624:	9b03      	ldr	r3, [sp, #12]
 8001626:	1900      	adds	r0, r0, r4
 8001628:	1880      	adds	r0, r0, r2
 800162a:	18c7      	adds	r7, r0, r3
 800162c:	464b      	mov	r3, r9
 800162e:	0ddc      	lsrs	r4, r3, #23
 8001630:	9b04      	ldr	r3, [sp, #16]
 8001632:	0275      	lsls	r5, r6, #9
 8001634:	431d      	orrs	r5, r3
 8001636:	1e6a      	subs	r2, r5, #1
 8001638:	4195      	sbcs	r5, r2
 800163a:	464b      	mov	r3, r9
 800163c:	0df6      	lsrs	r6, r6, #23
 800163e:	027f      	lsls	r7, r7, #9
 8001640:	4335      	orrs	r5, r6
 8001642:	025a      	lsls	r2, r3, #9
 8001644:	433c      	orrs	r4, r7
 8001646:	4315      	orrs	r5, r2
 8001648:	01fb      	lsls	r3, r7, #7
 800164a:	d400      	bmi.n	800164e <__aeabi_dmul+0x24a>
 800164c:	e11c      	b.n	8001888 <__aeabi_dmul+0x484>
 800164e:	2101      	movs	r1, #1
 8001650:	086a      	lsrs	r2, r5, #1
 8001652:	400d      	ands	r5, r1
 8001654:	4315      	orrs	r5, r2
 8001656:	07e2      	lsls	r2, r4, #31
 8001658:	4315      	orrs	r5, r2
 800165a:	0864      	lsrs	r4, r4, #1
 800165c:	494f      	ldr	r1, [pc, #316]	; (800179c <__aeabi_dmul+0x398>)
 800165e:	4461      	add	r1, ip
 8001660:	2900      	cmp	r1, #0
 8001662:	dc00      	bgt.n	8001666 <__aeabi_dmul+0x262>
 8001664:	e0b0      	b.n	80017c8 <__aeabi_dmul+0x3c4>
 8001666:	076b      	lsls	r3, r5, #29
 8001668:	d009      	beq.n	800167e <__aeabi_dmul+0x27a>
 800166a:	220f      	movs	r2, #15
 800166c:	402a      	ands	r2, r5
 800166e:	2a04      	cmp	r2, #4
 8001670:	d005      	beq.n	800167e <__aeabi_dmul+0x27a>
 8001672:	1d2a      	adds	r2, r5, #4
 8001674:	42aa      	cmp	r2, r5
 8001676:	41ad      	sbcs	r5, r5
 8001678:	426d      	negs	r5, r5
 800167a:	1964      	adds	r4, r4, r5
 800167c:	0015      	movs	r5, r2
 800167e:	01e3      	lsls	r3, r4, #7
 8001680:	d504      	bpl.n	800168c <__aeabi_dmul+0x288>
 8001682:	2180      	movs	r1, #128	; 0x80
 8001684:	4a46      	ldr	r2, [pc, #280]	; (80017a0 <__aeabi_dmul+0x39c>)
 8001686:	00c9      	lsls	r1, r1, #3
 8001688:	4014      	ands	r4, r2
 800168a:	4461      	add	r1, ip
 800168c:	4a45      	ldr	r2, [pc, #276]	; (80017a4 <__aeabi_dmul+0x3a0>)
 800168e:	4291      	cmp	r1, r2
 8001690:	dd00      	ble.n	8001694 <__aeabi_dmul+0x290>
 8001692:	e726      	b.n	80014e2 <__aeabi_dmul+0xde>
 8001694:	0762      	lsls	r2, r4, #29
 8001696:	08ed      	lsrs	r5, r5, #3
 8001698:	0264      	lsls	r4, r4, #9
 800169a:	0549      	lsls	r1, r1, #21
 800169c:	4315      	orrs	r5, r2
 800169e:	0b24      	lsrs	r4, r4, #12
 80016a0:	0d4a      	lsrs	r2, r1, #21
 80016a2:	e710      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80016a4:	4652      	mov	r2, sl
 80016a6:	4332      	orrs	r2, r6
 80016a8:	d100      	bne.n	80016ac <__aeabi_dmul+0x2a8>
 80016aa:	e07f      	b.n	80017ac <__aeabi_dmul+0x3a8>
 80016ac:	2e00      	cmp	r6, #0
 80016ae:	d100      	bne.n	80016b2 <__aeabi_dmul+0x2ae>
 80016b0:	e0dc      	b.n	800186c <__aeabi_dmul+0x468>
 80016b2:	0030      	movs	r0, r6
 80016b4:	f000 fdd6 	bl	8002264 <__clzsi2>
 80016b8:	0002      	movs	r2, r0
 80016ba:	3a0b      	subs	r2, #11
 80016bc:	231d      	movs	r3, #29
 80016be:	0001      	movs	r1, r0
 80016c0:	1a9b      	subs	r3, r3, r2
 80016c2:	4652      	mov	r2, sl
 80016c4:	3908      	subs	r1, #8
 80016c6:	40da      	lsrs	r2, r3
 80016c8:	408e      	lsls	r6, r1
 80016ca:	4316      	orrs	r6, r2
 80016cc:	4652      	mov	r2, sl
 80016ce:	408a      	lsls	r2, r1
 80016d0:	9b00      	ldr	r3, [sp, #0]
 80016d2:	4935      	ldr	r1, [pc, #212]	; (80017a8 <__aeabi_dmul+0x3a4>)
 80016d4:	1a18      	subs	r0, r3, r0
 80016d6:	0003      	movs	r3, r0
 80016d8:	468c      	mov	ip, r1
 80016da:	4463      	add	r3, ip
 80016dc:	2000      	movs	r0, #0
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	e6d3      	b.n	800148a <__aeabi_dmul+0x86>
 80016e2:	0025      	movs	r5, r4
 80016e4:	4305      	orrs	r5, r0
 80016e6:	d04a      	beq.n	800177e <__aeabi_dmul+0x37a>
 80016e8:	2c00      	cmp	r4, #0
 80016ea:	d100      	bne.n	80016ee <__aeabi_dmul+0x2ea>
 80016ec:	e0b0      	b.n	8001850 <__aeabi_dmul+0x44c>
 80016ee:	0020      	movs	r0, r4
 80016f0:	f000 fdb8 	bl	8002264 <__clzsi2>
 80016f4:	0001      	movs	r1, r0
 80016f6:	0002      	movs	r2, r0
 80016f8:	390b      	subs	r1, #11
 80016fa:	231d      	movs	r3, #29
 80016fc:	0010      	movs	r0, r2
 80016fe:	1a5b      	subs	r3, r3, r1
 8001700:	0031      	movs	r1, r6
 8001702:	0035      	movs	r5, r6
 8001704:	3808      	subs	r0, #8
 8001706:	4084      	lsls	r4, r0
 8001708:	40d9      	lsrs	r1, r3
 800170a:	4085      	lsls	r5, r0
 800170c:	430c      	orrs	r4, r1
 800170e:	4826      	ldr	r0, [pc, #152]	; (80017a8 <__aeabi_dmul+0x3a4>)
 8001710:	1a83      	subs	r3, r0, r2
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	2300      	movs	r3, #0
 8001716:	4699      	mov	r9, r3
 8001718:	469b      	mov	fp, r3
 800171a:	e697      	b.n	800144c <__aeabi_dmul+0x48>
 800171c:	0005      	movs	r5, r0
 800171e:	4325      	orrs	r5, r4
 8001720:	d126      	bne.n	8001770 <__aeabi_dmul+0x36c>
 8001722:	2208      	movs	r2, #8
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	2302      	movs	r3, #2
 8001728:	2400      	movs	r4, #0
 800172a:	4691      	mov	r9, r2
 800172c:	469b      	mov	fp, r3
 800172e:	e68d      	b.n	800144c <__aeabi_dmul+0x48>
 8001730:	4652      	mov	r2, sl
 8001732:	9b00      	ldr	r3, [sp, #0]
 8001734:	4332      	orrs	r2, r6
 8001736:	d110      	bne.n	800175a <__aeabi_dmul+0x356>
 8001738:	4915      	ldr	r1, [pc, #84]	; (8001790 <__aeabi_dmul+0x38c>)
 800173a:	2600      	movs	r6, #0
 800173c:	468c      	mov	ip, r1
 800173e:	4463      	add	r3, ip
 8001740:	4649      	mov	r1, r9
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	2302      	movs	r3, #2
 8001746:	4319      	orrs	r1, r3
 8001748:	4689      	mov	r9, r1
 800174a:	2002      	movs	r0, #2
 800174c:	e69d      	b.n	800148a <__aeabi_dmul+0x86>
 800174e:	465b      	mov	r3, fp
 8001750:	9701      	str	r7, [sp, #4]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d000      	beq.n	8001758 <__aeabi_dmul+0x354>
 8001756:	e6ad      	b.n	80014b4 <__aeabi_dmul+0xb0>
 8001758:	e6c3      	b.n	80014e2 <__aeabi_dmul+0xde>
 800175a:	4a0d      	ldr	r2, [pc, #52]	; (8001790 <__aeabi_dmul+0x38c>)
 800175c:	2003      	movs	r0, #3
 800175e:	4694      	mov	ip, r2
 8001760:	4463      	add	r3, ip
 8001762:	464a      	mov	r2, r9
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	2303      	movs	r3, #3
 8001768:	431a      	orrs	r2, r3
 800176a:	4691      	mov	r9, r2
 800176c:	4652      	mov	r2, sl
 800176e:	e68c      	b.n	800148a <__aeabi_dmul+0x86>
 8001770:	220c      	movs	r2, #12
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	2303      	movs	r3, #3
 8001776:	0005      	movs	r5, r0
 8001778:	4691      	mov	r9, r2
 800177a:	469b      	mov	fp, r3
 800177c:	e666      	b.n	800144c <__aeabi_dmul+0x48>
 800177e:	2304      	movs	r3, #4
 8001780:	4699      	mov	r9, r3
 8001782:	2300      	movs	r3, #0
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	3301      	adds	r3, #1
 8001788:	2400      	movs	r4, #0
 800178a:	469b      	mov	fp, r3
 800178c:	e65e      	b.n	800144c <__aeabi_dmul+0x48>
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	000007ff 	.word	0x000007ff
 8001794:	fffffc01 	.word	0xfffffc01
 8001798:	0800a288 	.word	0x0800a288
 800179c:	000003ff 	.word	0x000003ff
 80017a0:	feffffff 	.word	0xfeffffff
 80017a4:	000007fe 	.word	0x000007fe
 80017a8:	fffffc0d 	.word	0xfffffc0d
 80017ac:	4649      	mov	r1, r9
 80017ae:	2301      	movs	r3, #1
 80017b0:	4319      	orrs	r1, r3
 80017b2:	4689      	mov	r9, r1
 80017b4:	2600      	movs	r6, #0
 80017b6:	2001      	movs	r0, #1
 80017b8:	e667      	b.n	800148a <__aeabi_dmul+0x86>
 80017ba:	2300      	movs	r3, #0
 80017bc:	2480      	movs	r4, #128	; 0x80
 80017be:	2500      	movs	r5, #0
 80017c0:	4a43      	ldr	r2, [pc, #268]	; (80018d0 <__aeabi_dmul+0x4cc>)
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	0324      	lsls	r4, r4, #12
 80017c6:	e67e      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80017c8:	2001      	movs	r0, #1
 80017ca:	1a40      	subs	r0, r0, r1
 80017cc:	2838      	cmp	r0, #56	; 0x38
 80017ce:	dd00      	ble.n	80017d2 <__aeabi_dmul+0x3ce>
 80017d0:	e676      	b.n	80014c0 <__aeabi_dmul+0xbc>
 80017d2:	281f      	cmp	r0, #31
 80017d4:	dd5b      	ble.n	800188e <__aeabi_dmul+0x48a>
 80017d6:	221f      	movs	r2, #31
 80017d8:	0023      	movs	r3, r4
 80017da:	4252      	negs	r2, r2
 80017dc:	1a51      	subs	r1, r2, r1
 80017de:	40cb      	lsrs	r3, r1
 80017e0:	0019      	movs	r1, r3
 80017e2:	2820      	cmp	r0, #32
 80017e4:	d003      	beq.n	80017ee <__aeabi_dmul+0x3ea>
 80017e6:	4a3b      	ldr	r2, [pc, #236]	; (80018d4 <__aeabi_dmul+0x4d0>)
 80017e8:	4462      	add	r2, ip
 80017ea:	4094      	lsls	r4, r2
 80017ec:	4325      	orrs	r5, r4
 80017ee:	1e6a      	subs	r2, r5, #1
 80017f0:	4195      	sbcs	r5, r2
 80017f2:	002a      	movs	r2, r5
 80017f4:	430a      	orrs	r2, r1
 80017f6:	2107      	movs	r1, #7
 80017f8:	000d      	movs	r5, r1
 80017fa:	2400      	movs	r4, #0
 80017fc:	4015      	ands	r5, r2
 80017fe:	4211      	tst	r1, r2
 8001800:	d05b      	beq.n	80018ba <__aeabi_dmul+0x4b6>
 8001802:	210f      	movs	r1, #15
 8001804:	2400      	movs	r4, #0
 8001806:	4011      	ands	r1, r2
 8001808:	2904      	cmp	r1, #4
 800180a:	d053      	beq.n	80018b4 <__aeabi_dmul+0x4b0>
 800180c:	1d11      	adds	r1, r2, #4
 800180e:	4291      	cmp	r1, r2
 8001810:	4192      	sbcs	r2, r2
 8001812:	4252      	negs	r2, r2
 8001814:	18a4      	adds	r4, r4, r2
 8001816:	000a      	movs	r2, r1
 8001818:	0223      	lsls	r3, r4, #8
 800181a:	d54b      	bpl.n	80018b4 <__aeabi_dmul+0x4b0>
 800181c:	2201      	movs	r2, #1
 800181e:	2400      	movs	r4, #0
 8001820:	2500      	movs	r5, #0
 8001822:	e650      	b.n	80014c6 <__aeabi_dmul+0xc2>
 8001824:	2380      	movs	r3, #128	; 0x80
 8001826:	031b      	lsls	r3, r3, #12
 8001828:	421c      	tst	r4, r3
 800182a:	d009      	beq.n	8001840 <__aeabi_dmul+0x43c>
 800182c:	421e      	tst	r6, r3
 800182e:	d107      	bne.n	8001840 <__aeabi_dmul+0x43c>
 8001830:	4333      	orrs	r3, r6
 8001832:	031c      	lsls	r4, r3, #12
 8001834:	4643      	mov	r3, r8
 8001836:	0015      	movs	r5, r2
 8001838:	0b24      	lsrs	r4, r4, #12
 800183a:	4a25      	ldr	r2, [pc, #148]	; (80018d0 <__aeabi_dmul+0x4cc>)
 800183c:	9301      	str	r3, [sp, #4]
 800183e:	e642      	b.n	80014c6 <__aeabi_dmul+0xc2>
 8001840:	2280      	movs	r2, #128	; 0x80
 8001842:	0312      	lsls	r2, r2, #12
 8001844:	4314      	orrs	r4, r2
 8001846:	0324      	lsls	r4, r4, #12
 8001848:	4a21      	ldr	r2, [pc, #132]	; (80018d0 <__aeabi_dmul+0x4cc>)
 800184a:	0b24      	lsrs	r4, r4, #12
 800184c:	9701      	str	r7, [sp, #4]
 800184e:	e63a      	b.n	80014c6 <__aeabi_dmul+0xc2>
 8001850:	f000 fd08 	bl	8002264 <__clzsi2>
 8001854:	0001      	movs	r1, r0
 8001856:	0002      	movs	r2, r0
 8001858:	3115      	adds	r1, #21
 800185a:	3220      	adds	r2, #32
 800185c:	291c      	cmp	r1, #28
 800185e:	dc00      	bgt.n	8001862 <__aeabi_dmul+0x45e>
 8001860:	e74b      	b.n	80016fa <__aeabi_dmul+0x2f6>
 8001862:	0034      	movs	r4, r6
 8001864:	3808      	subs	r0, #8
 8001866:	2500      	movs	r5, #0
 8001868:	4084      	lsls	r4, r0
 800186a:	e750      	b.n	800170e <__aeabi_dmul+0x30a>
 800186c:	f000 fcfa 	bl	8002264 <__clzsi2>
 8001870:	0003      	movs	r3, r0
 8001872:	001a      	movs	r2, r3
 8001874:	3215      	adds	r2, #21
 8001876:	3020      	adds	r0, #32
 8001878:	2a1c      	cmp	r2, #28
 800187a:	dc00      	bgt.n	800187e <__aeabi_dmul+0x47a>
 800187c:	e71e      	b.n	80016bc <__aeabi_dmul+0x2b8>
 800187e:	4656      	mov	r6, sl
 8001880:	3b08      	subs	r3, #8
 8001882:	2200      	movs	r2, #0
 8001884:	409e      	lsls	r6, r3
 8001886:	e723      	b.n	80016d0 <__aeabi_dmul+0x2cc>
 8001888:	9b00      	ldr	r3, [sp, #0]
 800188a:	469c      	mov	ip, r3
 800188c:	e6e6      	b.n	800165c <__aeabi_dmul+0x258>
 800188e:	4912      	ldr	r1, [pc, #72]	; (80018d8 <__aeabi_dmul+0x4d4>)
 8001890:	0022      	movs	r2, r4
 8001892:	4461      	add	r1, ip
 8001894:	002e      	movs	r6, r5
 8001896:	408d      	lsls	r5, r1
 8001898:	408a      	lsls	r2, r1
 800189a:	40c6      	lsrs	r6, r0
 800189c:	1e69      	subs	r1, r5, #1
 800189e:	418d      	sbcs	r5, r1
 80018a0:	4332      	orrs	r2, r6
 80018a2:	432a      	orrs	r2, r5
 80018a4:	40c4      	lsrs	r4, r0
 80018a6:	0753      	lsls	r3, r2, #29
 80018a8:	d0b6      	beq.n	8001818 <__aeabi_dmul+0x414>
 80018aa:	210f      	movs	r1, #15
 80018ac:	4011      	ands	r1, r2
 80018ae:	2904      	cmp	r1, #4
 80018b0:	d1ac      	bne.n	800180c <__aeabi_dmul+0x408>
 80018b2:	e7b1      	b.n	8001818 <__aeabi_dmul+0x414>
 80018b4:	0765      	lsls	r5, r4, #29
 80018b6:	0264      	lsls	r4, r4, #9
 80018b8:	0b24      	lsrs	r4, r4, #12
 80018ba:	08d2      	lsrs	r2, r2, #3
 80018bc:	4315      	orrs	r5, r2
 80018be:	2200      	movs	r2, #0
 80018c0:	e601      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80018c2:	2280      	movs	r2, #128	; 0x80
 80018c4:	0312      	lsls	r2, r2, #12
 80018c6:	4314      	orrs	r4, r2
 80018c8:	0324      	lsls	r4, r4, #12
 80018ca:	4a01      	ldr	r2, [pc, #4]	; (80018d0 <__aeabi_dmul+0x4cc>)
 80018cc:	0b24      	lsrs	r4, r4, #12
 80018ce:	e5fa      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80018d0:	000007ff 	.word	0x000007ff
 80018d4:	0000043e 	.word	0x0000043e
 80018d8:	0000041e 	.word	0x0000041e

080018dc <__aeabi_dsub>:
 80018dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018de:	4657      	mov	r7, sl
 80018e0:	464e      	mov	r6, r9
 80018e2:	4645      	mov	r5, r8
 80018e4:	46de      	mov	lr, fp
 80018e6:	b5e0      	push	{r5, r6, r7, lr}
 80018e8:	001e      	movs	r6, r3
 80018ea:	0017      	movs	r7, r2
 80018ec:	004a      	lsls	r2, r1, #1
 80018ee:	030b      	lsls	r3, r1, #12
 80018f0:	0d52      	lsrs	r2, r2, #21
 80018f2:	0a5b      	lsrs	r3, r3, #9
 80018f4:	4690      	mov	r8, r2
 80018f6:	0f42      	lsrs	r2, r0, #29
 80018f8:	431a      	orrs	r2, r3
 80018fa:	0fcd      	lsrs	r5, r1, #31
 80018fc:	4ccd      	ldr	r4, [pc, #820]	; (8001c34 <__aeabi_dsub+0x358>)
 80018fe:	0331      	lsls	r1, r6, #12
 8001900:	00c3      	lsls	r3, r0, #3
 8001902:	4694      	mov	ip, r2
 8001904:	0070      	lsls	r0, r6, #1
 8001906:	0f7a      	lsrs	r2, r7, #29
 8001908:	0a49      	lsrs	r1, r1, #9
 800190a:	00ff      	lsls	r7, r7, #3
 800190c:	469a      	mov	sl, r3
 800190e:	46b9      	mov	r9, r7
 8001910:	0d40      	lsrs	r0, r0, #21
 8001912:	0ff6      	lsrs	r6, r6, #31
 8001914:	4311      	orrs	r1, r2
 8001916:	42a0      	cmp	r0, r4
 8001918:	d100      	bne.n	800191c <__aeabi_dsub+0x40>
 800191a:	e0b1      	b.n	8001a80 <__aeabi_dsub+0x1a4>
 800191c:	2201      	movs	r2, #1
 800191e:	4056      	eors	r6, r2
 8001920:	46b3      	mov	fp, r6
 8001922:	42b5      	cmp	r5, r6
 8001924:	d100      	bne.n	8001928 <__aeabi_dsub+0x4c>
 8001926:	e088      	b.n	8001a3a <__aeabi_dsub+0x15e>
 8001928:	4642      	mov	r2, r8
 800192a:	1a12      	subs	r2, r2, r0
 800192c:	2a00      	cmp	r2, #0
 800192e:	dc00      	bgt.n	8001932 <__aeabi_dsub+0x56>
 8001930:	e0ae      	b.n	8001a90 <__aeabi_dsub+0x1b4>
 8001932:	2800      	cmp	r0, #0
 8001934:	d100      	bne.n	8001938 <__aeabi_dsub+0x5c>
 8001936:	e0c1      	b.n	8001abc <__aeabi_dsub+0x1e0>
 8001938:	48be      	ldr	r0, [pc, #760]	; (8001c34 <__aeabi_dsub+0x358>)
 800193a:	4580      	cmp	r8, r0
 800193c:	d100      	bne.n	8001940 <__aeabi_dsub+0x64>
 800193e:	e151      	b.n	8001be4 <__aeabi_dsub+0x308>
 8001940:	2080      	movs	r0, #128	; 0x80
 8001942:	0400      	lsls	r0, r0, #16
 8001944:	4301      	orrs	r1, r0
 8001946:	2a38      	cmp	r2, #56	; 0x38
 8001948:	dd00      	ble.n	800194c <__aeabi_dsub+0x70>
 800194a:	e17b      	b.n	8001c44 <__aeabi_dsub+0x368>
 800194c:	2a1f      	cmp	r2, #31
 800194e:	dd00      	ble.n	8001952 <__aeabi_dsub+0x76>
 8001950:	e1ee      	b.n	8001d30 <__aeabi_dsub+0x454>
 8001952:	2020      	movs	r0, #32
 8001954:	003e      	movs	r6, r7
 8001956:	1a80      	subs	r0, r0, r2
 8001958:	000c      	movs	r4, r1
 800195a:	40d6      	lsrs	r6, r2
 800195c:	40d1      	lsrs	r1, r2
 800195e:	4087      	lsls	r7, r0
 8001960:	4662      	mov	r2, ip
 8001962:	4084      	lsls	r4, r0
 8001964:	1a52      	subs	r2, r2, r1
 8001966:	1e78      	subs	r0, r7, #1
 8001968:	4187      	sbcs	r7, r0
 800196a:	4694      	mov	ip, r2
 800196c:	4334      	orrs	r4, r6
 800196e:	4327      	orrs	r7, r4
 8001970:	1bdc      	subs	r4, r3, r7
 8001972:	42a3      	cmp	r3, r4
 8001974:	419b      	sbcs	r3, r3
 8001976:	4662      	mov	r2, ip
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	4699      	mov	r9, r3
 800197e:	464b      	mov	r3, r9
 8001980:	021b      	lsls	r3, r3, #8
 8001982:	d400      	bmi.n	8001986 <__aeabi_dsub+0xaa>
 8001984:	e118      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001986:	464b      	mov	r3, r9
 8001988:	0258      	lsls	r0, r3, #9
 800198a:	0a43      	lsrs	r3, r0, #9
 800198c:	4699      	mov	r9, r3
 800198e:	464b      	mov	r3, r9
 8001990:	2b00      	cmp	r3, #0
 8001992:	d100      	bne.n	8001996 <__aeabi_dsub+0xba>
 8001994:	e137      	b.n	8001c06 <__aeabi_dsub+0x32a>
 8001996:	4648      	mov	r0, r9
 8001998:	f000 fc64 	bl	8002264 <__clzsi2>
 800199c:	0001      	movs	r1, r0
 800199e:	3908      	subs	r1, #8
 80019a0:	2320      	movs	r3, #32
 80019a2:	0022      	movs	r2, r4
 80019a4:	4648      	mov	r0, r9
 80019a6:	1a5b      	subs	r3, r3, r1
 80019a8:	40da      	lsrs	r2, r3
 80019aa:	4088      	lsls	r0, r1
 80019ac:	408c      	lsls	r4, r1
 80019ae:	4643      	mov	r3, r8
 80019b0:	4310      	orrs	r0, r2
 80019b2:	4588      	cmp	r8, r1
 80019b4:	dd00      	ble.n	80019b8 <__aeabi_dsub+0xdc>
 80019b6:	e136      	b.n	8001c26 <__aeabi_dsub+0x34a>
 80019b8:	1ac9      	subs	r1, r1, r3
 80019ba:	1c4b      	adds	r3, r1, #1
 80019bc:	2b1f      	cmp	r3, #31
 80019be:	dd00      	ble.n	80019c2 <__aeabi_dsub+0xe6>
 80019c0:	e0ea      	b.n	8001b98 <__aeabi_dsub+0x2bc>
 80019c2:	2220      	movs	r2, #32
 80019c4:	0026      	movs	r6, r4
 80019c6:	1ad2      	subs	r2, r2, r3
 80019c8:	0001      	movs	r1, r0
 80019ca:	4094      	lsls	r4, r2
 80019cc:	40de      	lsrs	r6, r3
 80019ce:	40d8      	lsrs	r0, r3
 80019d0:	2300      	movs	r3, #0
 80019d2:	4091      	lsls	r1, r2
 80019d4:	1e62      	subs	r2, r4, #1
 80019d6:	4194      	sbcs	r4, r2
 80019d8:	4681      	mov	r9, r0
 80019da:	4698      	mov	r8, r3
 80019dc:	4331      	orrs	r1, r6
 80019de:	430c      	orrs	r4, r1
 80019e0:	0763      	lsls	r3, r4, #29
 80019e2:	d009      	beq.n	80019f8 <__aeabi_dsub+0x11c>
 80019e4:	230f      	movs	r3, #15
 80019e6:	4023      	ands	r3, r4
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d005      	beq.n	80019f8 <__aeabi_dsub+0x11c>
 80019ec:	1d23      	adds	r3, r4, #4
 80019ee:	42a3      	cmp	r3, r4
 80019f0:	41a4      	sbcs	r4, r4
 80019f2:	4264      	negs	r4, r4
 80019f4:	44a1      	add	r9, r4
 80019f6:	001c      	movs	r4, r3
 80019f8:	464b      	mov	r3, r9
 80019fa:	021b      	lsls	r3, r3, #8
 80019fc:	d400      	bmi.n	8001a00 <__aeabi_dsub+0x124>
 80019fe:	e0de      	b.n	8001bbe <__aeabi_dsub+0x2e2>
 8001a00:	4641      	mov	r1, r8
 8001a02:	4b8c      	ldr	r3, [pc, #560]	; (8001c34 <__aeabi_dsub+0x358>)
 8001a04:	3101      	adds	r1, #1
 8001a06:	4299      	cmp	r1, r3
 8001a08:	d100      	bne.n	8001a0c <__aeabi_dsub+0x130>
 8001a0a:	e0e7      	b.n	8001bdc <__aeabi_dsub+0x300>
 8001a0c:	464b      	mov	r3, r9
 8001a0e:	488a      	ldr	r0, [pc, #552]	; (8001c38 <__aeabi_dsub+0x35c>)
 8001a10:	08e4      	lsrs	r4, r4, #3
 8001a12:	4003      	ands	r3, r0
 8001a14:	0018      	movs	r0, r3
 8001a16:	0549      	lsls	r1, r1, #21
 8001a18:	075b      	lsls	r3, r3, #29
 8001a1a:	0240      	lsls	r0, r0, #9
 8001a1c:	4323      	orrs	r3, r4
 8001a1e:	0d4a      	lsrs	r2, r1, #21
 8001a20:	0b04      	lsrs	r4, r0, #12
 8001a22:	0512      	lsls	r2, r2, #20
 8001a24:	07ed      	lsls	r5, r5, #31
 8001a26:	4322      	orrs	r2, r4
 8001a28:	432a      	orrs	r2, r5
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	0011      	movs	r1, r2
 8001a2e:	bcf0      	pop	{r4, r5, r6, r7}
 8001a30:	46bb      	mov	fp, r7
 8001a32:	46b2      	mov	sl, r6
 8001a34:	46a9      	mov	r9, r5
 8001a36:	46a0      	mov	r8, r4
 8001a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a3a:	4642      	mov	r2, r8
 8001a3c:	1a12      	subs	r2, r2, r0
 8001a3e:	2a00      	cmp	r2, #0
 8001a40:	dd52      	ble.n	8001ae8 <__aeabi_dsub+0x20c>
 8001a42:	2800      	cmp	r0, #0
 8001a44:	d100      	bne.n	8001a48 <__aeabi_dsub+0x16c>
 8001a46:	e09c      	b.n	8001b82 <__aeabi_dsub+0x2a6>
 8001a48:	45a0      	cmp	r8, r4
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dsub+0x172>
 8001a4c:	e0ca      	b.n	8001be4 <__aeabi_dsub+0x308>
 8001a4e:	2080      	movs	r0, #128	; 0x80
 8001a50:	0400      	lsls	r0, r0, #16
 8001a52:	4301      	orrs	r1, r0
 8001a54:	2a38      	cmp	r2, #56	; 0x38
 8001a56:	dd00      	ble.n	8001a5a <__aeabi_dsub+0x17e>
 8001a58:	e149      	b.n	8001cee <__aeabi_dsub+0x412>
 8001a5a:	2a1f      	cmp	r2, #31
 8001a5c:	dc00      	bgt.n	8001a60 <__aeabi_dsub+0x184>
 8001a5e:	e197      	b.n	8001d90 <__aeabi_dsub+0x4b4>
 8001a60:	0010      	movs	r0, r2
 8001a62:	000e      	movs	r6, r1
 8001a64:	3820      	subs	r0, #32
 8001a66:	40c6      	lsrs	r6, r0
 8001a68:	2a20      	cmp	r2, #32
 8001a6a:	d004      	beq.n	8001a76 <__aeabi_dsub+0x19a>
 8001a6c:	2040      	movs	r0, #64	; 0x40
 8001a6e:	1a82      	subs	r2, r0, r2
 8001a70:	4091      	lsls	r1, r2
 8001a72:	430f      	orrs	r7, r1
 8001a74:	46b9      	mov	r9, r7
 8001a76:	464c      	mov	r4, r9
 8001a78:	1e62      	subs	r2, r4, #1
 8001a7a:	4194      	sbcs	r4, r2
 8001a7c:	4334      	orrs	r4, r6
 8001a7e:	e13a      	b.n	8001cf6 <__aeabi_dsub+0x41a>
 8001a80:	000a      	movs	r2, r1
 8001a82:	433a      	orrs	r2, r7
 8001a84:	d028      	beq.n	8001ad8 <__aeabi_dsub+0x1fc>
 8001a86:	46b3      	mov	fp, r6
 8001a88:	42b5      	cmp	r5, r6
 8001a8a:	d02b      	beq.n	8001ae4 <__aeabi_dsub+0x208>
 8001a8c:	4a6b      	ldr	r2, [pc, #428]	; (8001c3c <__aeabi_dsub+0x360>)
 8001a8e:	4442      	add	r2, r8
 8001a90:	2a00      	cmp	r2, #0
 8001a92:	d05d      	beq.n	8001b50 <__aeabi_dsub+0x274>
 8001a94:	4642      	mov	r2, r8
 8001a96:	4644      	mov	r4, r8
 8001a98:	1a82      	subs	r2, r0, r2
 8001a9a:	2c00      	cmp	r4, #0
 8001a9c:	d000      	beq.n	8001aa0 <__aeabi_dsub+0x1c4>
 8001a9e:	e0f5      	b.n	8001c8c <__aeabi_dsub+0x3b0>
 8001aa0:	4665      	mov	r5, ip
 8001aa2:	431d      	orrs	r5, r3
 8001aa4:	d100      	bne.n	8001aa8 <__aeabi_dsub+0x1cc>
 8001aa6:	e19c      	b.n	8001de2 <__aeabi_dsub+0x506>
 8001aa8:	1e55      	subs	r5, r2, #1
 8001aaa:	2a01      	cmp	r2, #1
 8001aac:	d100      	bne.n	8001ab0 <__aeabi_dsub+0x1d4>
 8001aae:	e1fb      	b.n	8001ea8 <__aeabi_dsub+0x5cc>
 8001ab0:	4c60      	ldr	r4, [pc, #384]	; (8001c34 <__aeabi_dsub+0x358>)
 8001ab2:	42a2      	cmp	r2, r4
 8001ab4:	d100      	bne.n	8001ab8 <__aeabi_dsub+0x1dc>
 8001ab6:	e1bd      	b.n	8001e34 <__aeabi_dsub+0x558>
 8001ab8:	002a      	movs	r2, r5
 8001aba:	e0f0      	b.n	8001c9e <__aeabi_dsub+0x3c2>
 8001abc:	0008      	movs	r0, r1
 8001abe:	4338      	orrs	r0, r7
 8001ac0:	d100      	bne.n	8001ac4 <__aeabi_dsub+0x1e8>
 8001ac2:	e0c3      	b.n	8001c4c <__aeabi_dsub+0x370>
 8001ac4:	1e50      	subs	r0, r2, #1
 8001ac6:	2a01      	cmp	r2, #1
 8001ac8:	d100      	bne.n	8001acc <__aeabi_dsub+0x1f0>
 8001aca:	e1a8      	b.n	8001e1e <__aeabi_dsub+0x542>
 8001acc:	4c59      	ldr	r4, [pc, #356]	; (8001c34 <__aeabi_dsub+0x358>)
 8001ace:	42a2      	cmp	r2, r4
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dsub+0x1f8>
 8001ad2:	e087      	b.n	8001be4 <__aeabi_dsub+0x308>
 8001ad4:	0002      	movs	r2, r0
 8001ad6:	e736      	b.n	8001946 <__aeabi_dsub+0x6a>
 8001ad8:	2201      	movs	r2, #1
 8001ada:	4056      	eors	r6, r2
 8001adc:	46b3      	mov	fp, r6
 8001ade:	42b5      	cmp	r5, r6
 8001ae0:	d000      	beq.n	8001ae4 <__aeabi_dsub+0x208>
 8001ae2:	e721      	b.n	8001928 <__aeabi_dsub+0x4c>
 8001ae4:	4a55      	ldr	r2, [pc, #340]	; (8001c3c <__aeabi_dsub+0x360>)
 8001ae6:	4442      	add	r2, r8
 8001ae8:	2a00      	cmp	r2, #0
 8001aea:	d100      	bne.n	8001aee <__aeabi_dsub+0x212>
 8001aec:	e0b5      	b.n	8001c5a <__aeabi_dsub+0x37e>
 8001aee:	4642      	mov	r2, r8
 8001af0:	4644      	mov	r4, r8
 8001af2:	1a82      	subs	r2, r0, r2
 8001af4:	2c00      	cmp	r4, #0
 8001af6:	d100      	bne.n	8001afa <__aeabi_dsub+0x21e>
 8001af8:	e138      	b.n	8001d6c <__aeabi_dsub+0x490>
 8001afa:	4e4e      	ldr	r6, [pc, #312]	; (8001c34 <__aeabi_dsub+0x358>)
 8001afc:	42b0      	cmp	r0, r6
 8001afe:	d100      	bne.n	8001b02 <__aeabi_dsub+0x226>
 8001b00:	e1de      	b.n	8001ec0 <__aeabi_dsub+0x5e4>
 8001b02:	2680      	movs	r6, #128	; 0x80
 8001b04:	4664      	mov	r4, ip
 8001b06:	0436      	lsls	r6, r6, #16
 8001b08:	4334      	orrs	r4, r6
 8001b0a:	46a4      	mov	ip, r4
 8001b0c:	2a38      	cmp	r2, #56	; 0x38
 8001b0e:	dd00      	ble.n	8001b12 <__aeabi_dsub+0x236>
 8001b10:	e196      	b.n	8001e40 <__aeabi_dsub+0x564>
 8001b12:	2a1f      	cmp	r2, #31
 8001b14:	dd00      	ble.n	8001b18 <__aeabi_dsub+0x23c>
 8001b16:	e224      	b.n	8001f62 <__aeabi_dsub+0x686>
 8001b18:	2620      	movs	r6, #32
 8001b1a:	1ab4      	subs	r4, r6, r2
 8001b1c:	46a2      	mov	sl, r4
 8001b1e:	4664      	mov	r4, ip
 8001b20:	4656      	mov	r6, sl
 8001b22:	40b4      	lsls	r4, r6
 8001b24:	46a1      	mov	r9, r4
 8001b26:	001c      	movs	r4, r3
 8001b28:	464e      	mov	r6, r9
 8001b2a:	40d4      	lsrs	r4, r2
 8001b2c:	4326      	orrs	r6, r4
 8001b2e:	0034      	movs	r4, r6
 8001b30:	4656      	mov	r6, sl
 8001b32:	40b3      	lsls	r3, r6
 8001b34:	1e5e      	subs	r6, r3, #1
 8001b36:	41b3      	sbcs	r3, r6
 8001b38:	431c      	orrs	r4, r3
 8001b3a:	4663      	mov	r3, ip
 8001b3c:	40d3      	lsrs	r3, r2
 8001b3e:	18c9      	adds	r1, r1, r3
 8001b40:	19e4      	adds	r4, r4, r7
 8001b42:	42bc      	cmp	r4, r7
 8001b44:	41bf      	sbcs	r7, r7
 8001b46:	427f      	negs	r7, r7
 8001b48:	46b9      	mov	r9, r7
 8001b4a:	4680      	mov	r8, r0
 8001b4c:	4489      	add	r9, r1
 8001b4e:	e0d8      	b.n	8001d02 <__aeabi_dsub+0x426>
 8001b50:	4640      	mov	r0, r8
 8001b52:	4c3b      	ldr	r4, [pc, #236]	; (8001c40 <__aeabi_dsub+0x364>)
 8001b54:	3001      	adds	r0, #1
 8001b56:	4220      	tst	r0, r4
 8001b58:	d000      	beq.n	8001b5c <__aeabi_dsub+0x280>
 8001b5a:	e0b4      	b.n	8001cc6 <__aeabi_dsub+0x3ea>
 8001b5c:	4640      	mov	r0, r8
 8001b5e:	2800      	cmp	r0, #0
 8001b60:	d000      	beq.n	8001b64 <__aeabi_dsub+0x288>
 8001b62:	e144      	b.n	8001dee <__aeabi_dsub+0x512>
 8001b64:	4660      	mov	r0, ip
 8001b66:	4318      	orrs	r0, r3
 8001b68:	d100      	bne.n	8001b6c <__aeabi_dsub+0x290>
 8001b6a:	e190      	b.n	8001e8e <__aeabi_dsub+0x5b2>
 8001b6c:	0008      	movs	r0, r1
 8001b6e:	4338      	orrs	r0, r7
 8001b70:	d000      	beq.n	8001b74 <__aeabi_dsub+0x298>
 8001b72:	e1aa      	b.n	8001eca <__aeabi_dsub+0x5ee>
 8001b74:	4661      	mov	r1, ip
 8001b76:	08db      	lsrs	r3, r3, #3
 8001b78:	0749      	lsls	r1, r1, #29
 8001b7a:	430b      	orrs	r3, r1
 8001b7c:	4661      	mov	r1, ip
 8001b7e:	08cc      	lsrs	r4, r1, #3
 8001b80:	e027      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001b82:	0008      	movs	r0, r1
 8001b84:	4338      	orrs	r0, r7
 8001b86:	d061      	beq.n	8001c4c <__aeabi_dsub+0x370>
 8001b88:	1e50      	subs	r0, r2, #1
 8001b8a:	2a01      	cmp	r2, #1
 8001b8c:	d100      	bne.n	8001b90 <__aeabi_dsub+0x2b4>
 8001b8e:	e139      	b.n	8001e04 <__aeabi_dsub+0x528>
 8001b90:	42a2      	cmp	r2, r4
 8001b92:	d027      	beq.n	8001be4 <__aeabi_dsub+0x308>
 8001b94:	0002      	movs	r2, r0
 8001b96:	e75d      	b.n	8001a54 <__aeabi_dsub+0x178>
 8001b98:	0002      	movs	r2, r0
 8001b9a:	391f      	subs	r1, #31
 8001b9c:	40ca      	lsrs	r2, r1
 8001b9e:	0011      	movs	r1, r2
 8001ba0:	2b20      	cmp	r3, #32
 8001ba2:	d003      	beq.n	8001bac <__aeabi_dsub+0x2d0>
 8001ba4:	2240      	movs	r2, #64	; 0x40
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	4098      	lsls	r0, r3
 8001baa:	4304      	orrs	r4, r0
 8001bac:	1e63      	subs	r3, r4, #1
 8001bae:	419c      	sbcs	r4, r3
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	4699      	mov	r9, r3
 8001bb4:	4698      	mov	r8, r3
 8001bb6:	430c      	orrs	r4, r1
 8001bb8:	0763      	lsls	r3, r4, #29
 8001bba:	d000      	beq.n	8001bbe <__aeabi_dsub+0x2e2>
 8001bbc:	e712      	b.n	80019e4 <__aeabi_dsub+0x108>
 8001bbe:	464b      	mov	r3, r9
 8001bc0:	464a      	mov	r2, r9
 8001bc2:	08e4      	lsrs	r4, r4, #3
 8001bc4:	075b      	lsls	r3, r3, #29
 8001bc6:	4323      	orrs	r3, r4
 8001bc8:	08d4      	lsrs	r4, r2, #3
 8001bca:	4642      	mov	r2, r8
 8001bcc:	4919      	ldr	r1, [pc, #100]	; (8001c34 <__aeabi_dsub+0x358>)
 8001bce:	428a      	cmp	r2, r1
 8001bd0:	d00e      	beq.n	8001bf0 <__aeabi_dsub+0x314>
 8001bd2:	0324      	lsls	r4, r4, #12
 8001bd4:	0552      	lsls	r2, r2, #21
 8001bd6:	0b24      	lsrs	r4, r4, #12
 8001bd8:	0d52      	lsrs	r2, r2, #21
 8001bda:	e722      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001bdc:	000a      	movs	r2, r1
 8001bde:	2400      	movs	r4, #0
 8001be0:	2300      	movs	r3, #0
 8001be2:	e71e      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001be4:	08db      	lsrs	r3, r3, #3
 8001be6:	4662      	mov	r2, ip
 8001be8:	0752      	lsls	r2, r2, #29
 8001bea:	4313      	orrs	r3, r2
 8001bec:	4662      	mov	r2, ip
 8001bee:	08d4      	lsrs	r4, r2, #3
 8001bf0:	001a      	movs	r2, r3
 8001bf2:	4322      	orrs	r2, r4
 8001bf4:	d100      	bne.n	8001bf8 <__aeabi_dsub+0x31c>
 8001bf6:	e1fc      	b.n	8001ff2 <__aeabi_dsub+0x716>
 8001bf8:	2280      	movs	r2, #128	; 0x80
 8001bfa:	0312      	lsls	r2, r2, #12
 8001bfc:	4314      	orrs	r4, r2
 8001bfe:	0324      	lsls	r4, r4, #12
 8001c00:	4a0c      	ldr	r2, [pc, #48]	; (8001c34 <__aeabi_dsub+0x358>)
 8001c02:	0b24      	lsrs	r4, r4, #12
 8001c04:	e70d      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001c06:	0020      	movs	r0, r4
 8001c08:	f000 fb2c 	bl	8002264 <__clzsi2>
 8001c0c:	0001      	movs	r1, r0
 8001c0e:	3118      	adds	r1, #24
 8001c10:	291f      	cmp	r1, #31
 8001c12:	dc00      	bgt.n	8001c16 <__aeabi_dsub+0x33a>
 8001c14:	e6c4      	b.n	80019a0 <__aeabi_dsub+0xc4>
 8001c16:	3808      	subs	r0, #8
 8001c18:	4084      	lsls	r4, r0
 8001c1a:	4643      	mov	r3, r8
 8001c1c:	0020      	movs	r0, r4
 8001c1e:	2400      	movs	r4, #0
 8001c20:	4588      	cmp	r8, r1
 8001c22:	dc00      	bgt.n	8001c26 <__aeabi_dsub+0x34a>
 8001c24:	e6c8      	b.n	80019b8 <__aeabi_dsub+0xdc>
 8001c26:	4a04      	ldr	r2, [pc, #16]	; (8001c38 <__aeabi_dsub+0x35c>)
 8001c28:	1a5b      	subs	r3, r3, r1
 8001c2a:	4010      	ands	r0, r2
 8001c2c:	4698      	mov	r8, r3
 8001c2e:	4681      	mov	r9, r0
 8001c30:	e6d6      	b.n	80019e0 <__aeabi_dsub+0x104>
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	000007ff 	.word	0x000007ff
 8001c38:	ff7fffff 	.word	0xff7fffff
 8001c3c:	fffff801 	.word	0xfffff801
 8001c40:	000007fe 	.word	0x000007fe
 8001c44:	430f      	orrs	r7, r1
 8001c46:	1e7a      	subs	r2, r7, #1
 8001c48:	4197      	sbcs	r7, r2
 8001c4a:	e691      	b.n	8001970 <__aeabi_dsub+0x94>
 8001c4c:	4661      	mov	r1, ip
 8001c4e:	08db      	lsrs	r3, r3, #3
 8001c50:	0749      	lsls	r1, r1, #29
 8001c52:	430b      	orrs	r3, r1
 8001c54:	4661      	mov	r1, ip
 8001c56:	08cc      	lsrs	r4, r1, #3
 8001c58:	e7b8      	b.n	8001bcc <__aeabi_dsub+0x2f0>
 8001c5a:	4640      	mov	r0, r8
 8001c5c:	4cd3      	ldr	r4, [pc, #844]	; (8001fac <__aeabi_dsub+0x6d0>)
 8001c5e:	3001      	adds	r0, #1
 8001c60:	4220      	tst	r0, r4
 8001c62:	d000      	beq.n	8001c66 <__aeabi_dsub+0x38a>
 8001c64:	e0a2      	b.n	8001dac <__aeabi_dsub+0x4d0>
 8001c66:	4640      	mov	r0, r8
 8001c68:	2800      	cmp	r0, #0
 8001c6a:	d000      	beq.n	8001c6e <__aeabi_dsub+0x392>
 8001c6c:	e101      	b.n	8001e72 <__aeabi_dsub+0x596>
 8001c6e:	4660      	mov	r0, ip
 8001c70:	4318      	orrs	r0, r3
 8001c72:	d100      	bne.n	8001c76 <__aeabi_dsub+0x39a>
 8001c74:	e15e      	b.n	8001f34 <__aeabi_dsub+0x658>
 8001c76:	0008      	movs	r0, r1
 8001c78:	4338      	orrs	r0, r7
 8001c7a:	d000      	beq.n	8001c7e <__aeabi_dsub+0x3a2>
 8001c7c:	e15f      	b.n	8001f3e <__aeabi_dsub+0x662>
 8001c7e:	4661      	mov	r1, ip
 8001c80:	08db      	lsrs	r3, r3, #3
 8001c82:	0749      	lsls	r1, r1, #29
 8001c84:	430b      	orrs	r3, r1
 8001c86:	4661      	mov	r1, ip
 8001c88:	08cc      	lsrs	r4, r1, #3
 8001c8a:	e7a2      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001c8c:	4dc8      	ldr	r5, [pc, #800]	; (8001fb0 <__aeabi_dsub+0x6d4>)
 8001c8e:	42a8      	cmp	r0, r5
 8001c90:	d100      	bne.n	8001c94 <__aeabi_dsub+0x3b8>
 8001c92:	e0cf      	b.n	8001e34 <__aeabi_dsub+0x558>
 8001c94:	2580      	movs	r5, #128	; 0x80
 8001c96:	4664      	mov	r4, ip
 8001c98:	042d      	lsls	r5, r5, #16
 8001c9a:	432c      	orrs	r4, r5
 8001c9c:	46a4      	mov	ip, r4
 8001c9e:	2a38      	cmp	r2, #56	; 0x38
 8001ca0:	dc56      	bgt.n	8001d50 <__aeabi_dsub+0x474>
 8001ca2:	2a1f      	cmp	r2, #31
 8001ca4:	dd00      	ble.n	8001ca8 <__aeabi_dsub+0x3cc>
 8001ca6:	e0d1      	b.n	8001e4c <__aeabi_dsub+0x570>
 8001ca8:	2520      	movs	r5, #32
 8001caa:	001e      	movs	r6, r3
 8001cac:	1aad      	subs	r5, r5, r2
 8001cae:	4664      	mov	r4, ip
 8001cb0:	40ab      	lsls	r3, r5
 8001cb2:	40ac      	lsls	r4, r5
 8001cb4:	40d6      	lsrs	r6, r2
 8001cb6:	1e5d      	subs	r5, r3, #1
 8001cb8:	41ab      	sbcs	r3, r5
 8001cba:	4334      	orrs	r4, r6
 8001cbc:	4323      	orrs	r3, r4
 8001cbe:	4664      	mov	r4, ip
 8001cc0:	40d4      	lsrs	r4, r2
 8001cc2:	1b09      	subs	r1, r1, r4
 8001cc4:	e049      	b.n	8001d5a <__aeabi_dsub+0x47e>
 8001cc6:	4660      	mov	r0, ip
 8001cc8:	1bdc      	subs	r4, r3, r7
 8001cca:	1a46      	subs	r6, r0, r1
 8001ccc:	42a3      	cmp	r3, r4
 8001cce:	4180      	sbcs	r0, r0
 8001cd0:	4240      	negs	r0, r0
 8001cd2:	4681      	mov	r9, r0
 8001cd4:	0030      	movs	r0, r6
 8001cd6:	464e      	mov	r6, r9
 8001cd8:	1b80      	subs	r0, r0, r6
 8001cda:	4681      	mov	r9, r0
 8001cdc:	0200      	lsls	r0, r0, #8
 8001cde:	d476      	bmi.n	8001dce <__aeabi_dsub+0x4f2>
 8001ce0:	464b      	mov	r3, r9
 8001ce2:	4323      	orrs	r3, r4
 8001ce4:	d000      	beq.n	8001ce8 <__aeabi_dsub+0x40c>
 8001ce6:	e652      	b.n	800198e <__aeabi_dsub+0xb2>
 8001ce8:	2400      	movs	r4, #0
 8001cea:	2500      	movs	r5, #0
 8001cec:	e771      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001cee:	4339      	orrs	r1, r7
 8001cf0:	000c      	movs	r4, r1
 8001cf2:	1e62      	subs	r2, r4, #1
 8001cf4:	4194      	sbcs	r4, r2
 8001cf6:	18e4      	adds	r4, r4, r3
 8001cf8:	429c      	cmp	r4, r3
 8001cfa:	419b      	sbcs	r3, r3
 8001cfc:	425b      	negs	r3, r3
 8001cfe:	4463      	add	r3, ip
 8001d00:	4699      	mov	r9, r3
 8001d02:	464b      	mov	r3, r9
 8001d04:	021b      	lsls	r3, r3, #8
 8001d06:	d400      	bmi.n	8001d0a <__aeabi_dsub+0x42e>
 8001d08:	e756      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	469c      	mov	ip, r3
 8001d0e:	4ba8      	ldr	r3, [pc, #672]	; (8001fb0 <__aeabi_dsub+0x6d4>)
 8001d10:	44e0      	add	r8, ip
 8001d12:	4598      	cmp	r8, r3
 8001d14:	d038      	beq.n	8001d88 <__aeabi_dsub+0x4ac>
 8001d16:	464b      	mov	r3, r9
 8001d18:	48a6      	ldr	r0, [pc, #664]	; (8001fb4 <__aeabi_dsub+0x6d8>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	4003      	ands	r3, r0
 8001d1e:	0018      	movs	r0, r3
 8001d20:	0863      	lsrs	r3, r4, #1
 8001d22:	4014      	ands	r4, r2
 8001d24:	431c      	orrs	r4, r3
 8001d26:	07c3      	lsls	r3, r0, #31
 8001d28:	431c      	orrs	r4, r3
 8001d2a:	0843      	lsrs	r3, r0, #1
 8001d2c:	4699      	mov	r9, r3
 8001d2e:	e657      	b.n	80019e0 <__aeabi_dsub+0x104>
 8001d30:	0010      	movs	r0, r2
 8001d32:	000e      	movs	r6, r1
 8001d34:	3820      	subs	r0, #32
 8001d36:	40c6      	lsrs	r6, r0
 8001d38:	2a20      	cmp	r2, #32
 8001d3a:	d004      	beq.n	8001d46 <__aeabi_dsub+0x46a>
 8001d3c:	2040      	movs	r0, #64	; 0x40
 8001d3e:	1a82      	subs	r2, r0, r2
 8001d40:	4091      	lsls	r1, r2
 8001d42:	430f      	orrs	r7, r1
 8001d44:	46b9      	mov	r9, r7
 8001d46:	464f      	mov	r7, r9
 8001d48:	1e7a      	subs	r2, r7, #1
 8001d4a:	4197      	sbcs	r7, r2
 8001d4c:	4337      	orrs	r7, r6
 8001d4e:	e60f      	b.n	8001970 <__aeabi_dsub+0x94>
 8001d50:	4662      	mov	r2, ip
 8001d52:	431a      	orrs	r2, r3
 8001d54:	0013      	movs	r3, r2
 8001d56:	1e5a      	subs	r2, r3, #1
 8001d58:	4193      	sbcs	r3, r2
 8001d5a:	1afc      	subs	r4, r7, r3
 8001d5c:	42a7      	cmp	r7, r4
 8001d5e:	41bf      	sbcs	r7, r7
 8001d60:	427f      	negs	r7, r7
 8001d62:	1bcb      	subs	r3, r1, r7
 8001d64:	4699      	mov	r9, r3
 8001d66:	465d      	mov	r5, fp
 8001d68:	4680      	mov	r8, r0
 8001d6a:	e608      	b.n	800197e <__aeabi_dsub+0xa2>
 8001d6c:	4666      	mov	r6, ip
 8001d6e:	431e      	orrs	r6, r3
 8001d70:	d100      	bne.n	8001d74 <__aeabi_dsub+0x498>
 8001d72:	e0be      	b.n	8001ef2 <__aeabi_dsub+0x616>
 8001d74:	1e56      	subs	r6, r2, #1
 8001d76:	2a01      	cmp	r2, #1
 8001d78:	d100      	bne.n	8001d7c <__aeabi_dsub+0x4a0>
 8001d7a:	e109      	b.n	8001f90 <__aeabi_dsub+0x6b4>
 8001d7c:	4c8c      	ldr	r4, [pc, #560]	; (8001fb0 <__aeabi_dsub+0x6d4>)
 8001d7e:	42a2      	cmp	r2, r4
 8001d80:	d100      	bne.n	8001d84 <__aeabi_dsub+0x4a8>
 8001d82:	e119      	b.n	8001fb8 <__aeabi_dsub+0x6dc>
 8001d84:	0032      	movs	r2, r6
 8001d86:	e6c1      	b.n	8001b0c <__aeabi_dsub+0x230>
 8001d88:	4642      	mov	r2, r8
 8001d8a:	2400      	movs	r4, #0
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	e648      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001d90:	2020      	movs	r0, #32
 8001d92:	000c      	movs	r4, r1
 8001d94:	1a80      	subs	r0, r0, r2
 8001d96:	003e      	movs	r6, r7
 8001d98:	4087      	lsls	r7, r0
 8001d9a:	4084      	lsls	r4, r0
 8001d9c:	40d6      	lsrs	r6, r2
 8001d9e:	1e78      	subs	r0, r7, #1
 8001da0:	4187      	sbcs	r7, r0
 8001da2:	40d1      	lsrs	r1, r2
 8001da4:	4334      	orrs	r4, r6
 8001da6:	433c      	orrs	r4, r7
 8001da8:	448c      	add	ip, r1
 8001daa:	e7a4      	b.n	8001cf6 <__aeabi_dsub+0x41a>
 8001dac:	4a80      	ldr	r2, [pc, #512]	; (8001fb0 <__aeabi_dsub+0x6d4>)
 8001dae:	4290      	cmp	r0, r2
 8001db0:	d100      	bne.n	8001db4 <__aeabi_dsub+0x4d8>
 8001db2:	e0e9      	b.n	8001f88 <__aeabi_dsub+0x6ac>
 8001db4:	19df      	adds	r7, r3, r7
 8001db6:	429f      	cmp	r7, r3
 8001db8:	419b      	sbcs	r3, r3
 8001dba:	4461      	add	r1, ip
 8001dbc:	425b      	negs	r3, r3
 8001dbe:	18c9      	adds	r1, r1, r3
 8001dc0:	07cc      	lsls	r4, r1, #31
 8001dc2:	087f      	lsrs	r7, r7, #1
 8001dc4:	084b      	lsrs	r3, r1, #1
 8001dc6:	4699      	mov	r9, r3
 8001dc8:	4680      	mov	r8, r0
 8001dca:	433c      	orrs	r4, r7
 8001dcc:	e6f4      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001dce:	1afc      	subs	r4, r7, r3
 8001dd0:	42a7      	cmp	r7, r4
 8001dd2:	41bf      	sbcs	r7, r7
 8001dd4:	4663      	mov	r3, ip
 8001dd6:	427f      	negs	r7, r7
 8001dd8:	1ac9      	subs	r1, r1, r3
 8001dda:	1bcb      	subs	r3, r1, r7
 8001ddc:	4699      	mov	r9, r3
 8001dde:	465d      	mov	r5, fp
 8001de0:	e5d5      	b.n	800198e <__aeabi_dsub+0xb2>
 8001de2:	08ff      	lsrs	r7, r7, #3
 8001de4:	074b      	lsls	r3, r1, #29
 8001de6:	465d      	mov	r5, fp
 8001de8:	433b      	orrs	r3, r7
 8001dea:	08cc      	lsrs	r4, r1, #3
 8001dec:	e6ee      	b.n	8001bcc <__aeabi_dsub+0x2f0>
 8001dee:	4662      	mov	r2, ip
 8001df0:	431a      	orrs	r2, r3
 8001df2:	d000      	beq.n	8001df6 <__aeabi_dsub+0x51a>
 8001df4:	e082      	b.n	8001efc <__aeabi_dsub+0x620>
 8001df6:	000b      	movs	r3, r1
 8001df8:	433b      	orrs	r3, r7
 8001dfa:	d11b      	bne.n	8001e34 <__aeabi_dsub+0x558>
 8001dfc:	2480      	movs	r4, #128	; 0x80
 8001dfe:	2500      	movs	r5, #0
 8001e00:	0324      	lsls	r4, r4, #12
 8001e02:	e6f9      	b.n	8001bf8 <__aeabi_dsub+0x31c>
 8001e04:	19dc      	adds	r4, r3, r7
 8001e06:	429c      	cmp	r4, r3
 8001e08:	419b      	sbcs	r3, r3
 8001e0a:	4461      	add	r1, ip
 8001e0c:	4689      	mov	r9, r1
 8001e0e:	425b      	negs	r3, r3
 8001e10:	4499      	add	r9, r3
 8001e12:	464b      	mov	r3, r9
 8001e14:	021b      	lsls	r3, r3, #8
 8001e16:	d444      	bmi.n	8001ea2 <__aeabi_dsub+0x5c6>
 8001e18:	2301      	movs	r3, #1
 8001e1a:	4698      	mov	r8, r3
 8001e1c:	e6cc      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001e1e:	1bdc      	subs	r4, r3, r7
 8001e20:	4662      	mov	r2, ip
 8001e22:	42a3      	cmp	r3, r4
 8001e24:	419b      	sbcs	r3, r3
 8001e26:	1a51      	subs	r1, r2, r1
 8001e28:	425b      	negs	r3, r3
 8001e2a:	1acb      	subs	r3, r1, r3
 8001e2c:	4699      	mov	r9, r3
 8001e2e:	2301      	movs	r3, #1
 8001e30:	4698      	mov	r8, r3
 8001e32:	e5a4      	b.n	800197e <__aeabi_dsub+0xa2>
 8001e34:	08ff      	lsrs	r7, r7, #3
 8001e36:	074b      	lsls	r3, r1, #29
 8001e38:	465d      	mov	r5, fp
 8001e3a:	433b      	orrs	r3, r7
 8001e3c:	08cc      	lsrs	r4, r1, #3
 8001e3e:	e6d7      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001e40:	4662      	mov	r2, ip
 8001e42:	431a      	orrs	r2, r3
 8001e44:	0014      	movs	r4, r2
 8001e46:	1e63      	subs	r3, r4, #1
 8001e48:	419c      	sbcs	r4, r3
 8001e4a:	e679      	b.n	8001b40 <__aeabi_dsub+0x264>
 8001e4c:	0015      	movs	r5, r2
 8001e4e:	4664      	mov	r4, ip
 8001e50:	3d20      	subs	r5, #32
 8001e52:	40ec      	lsrs	r4, r5
 8001e54:	46a0      	mov	r8, r4
 8001e56:	2a20      	cmp	r2, #32
 8001e58:	d005      	beq.n	8001e66 <__aeabi_dsub+0x58a>
 8001e5a:	2540      	movs	r5, #64	; 0x40
 8001e5c:	4664      	mov	r4, ip
 8001e5e:	1aaa      	subs	r2, r5, r2
 8001e60:	4094      	lsls	r4, r2
 8001e62:	4323      	orrs	r3, r4
 8001e64:	469a      	mov	sl, r3
 8001e66:	4654      	mov	r4, sl
 8001e68:	1e63      	subs	r3, r4, #1
 8001e6a:	419c      	sbcs	r4, r3
 8001e6c:	4643      	mov	r3, r8
 8001e6e:	4323      	orrs	r3, r4
 8001e70:	e773      	b.n	8001d5a <__aeabi_dsub+0x47e>
 8001e72:	4662      	mov	r2, ip
 8001e74:	431a      	orrs	r2, r3
 8001e76:	d023      	beq.n	8001ec0 <__aeabi_dsub+0x5e4>
 8001e78:	000a      	movs	r2, r1
 8001e7a:	433a      	orrs	r2, r7
 8001e7c:	d000      	beq.n	8001e80 <__aeabi_dsub+0x5a4>
 8001e7e:	e0a0      	b.n	8001fc2 <__aeabi_dsub+0x6e6>
 8001e80:	4662      	mov	r2, ip
 8001e82:	08db      	lsrs	r3, r3, #3
 8001e84:	0752      	lsls	r2, r2, #29
 8001e86:	4313      	orrs	r3, r2
 8001e88:	4662      	mov	r2, ip
 8001e8a:	08d4      	lsrs	r4, r2, #3
 8001e8c:	e6b0      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001e8e:	000b      	movs	r3, r1
 8001e90:	433b      	orrs	r3, r7
 8001e92:	d100      	bne.n	8001e96 <__aeabi_dsub+0x5ba>
 8001e94:	e728      	b.n	8001ce8 <__aeabi_dsub+0x40c>
 8001e96:	08ff      	lsrs	r7, r7, #3
 8001e98:	074b      	lsls	r3, r1, #29
 8001e9a:	465d      	mov	r5, fp
 8001e9c:	433b      	orrs	r3, r7
 8001e9e:	08cc      	lsrs	r4, r1, #3
 8001ea0:	e697      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	4698      	mov	r8, r3
 8001ea6:	e736      	b.n	8001d16 <__aeabi_dsub+0x43a>
 8001ea8:	1afc      	subs	r4, r7, r3
 8001eaa:	42a7      	cmp	r7, r4
 8001eac:	41bf      	sbcs	r7, r7
 8001eae:	4663      	mov	r3, ip
 8001eb0:	427f      	negs	r7, r7
 8001eb2:	1ac9      	subs	r1, r1, r3
 8001eb4:	1bcb      	subs	r3, r1, r7
 8001eb6:	4699      	mov	r9, r3
 8001eb8:	2301      	movs	r3, #1
 8001eba:	465d      	mov	r5, fp
 8001ebc:	4698      	mov	r8, r3
 8001ebe:	e55e      	b.n	800197e <__aeabi_dsub+0xa2>
 8001ec0:	074b      	lsls	r3, r1, #29
 8001ec2:	08ff      	lsrs	r7, r7, #3
 8001ec4:	433b      	orrs	r3, r7
 8001ec6:	08cc      	lsrs	r4, r1, #3
 8001ec8:	e692      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001eca:	1bdc      	subs	r4, r3, r7
 8001ecc:	4660      	mov	r0, ip
 8001ece:	42a3      	cmp	r3, r4
 8001ed0:	41b6      	sbcs	r6, r6
 8001ed2:	1a40      	subs	r0, r0, r1
 8001ed4:	4276      	negs	r6, r6
 8001ed6:	1b80      	subs	r0, r0, r6
 8001ed8:	4681      	mov	r9, r0
 8001eda:	0200      	lsls	r0, r0, #8
 8001edc:	d560      	bpl.n	8001fa0 <__aeabi_dsub+0x6c4>
 8001ede:	1afc      	subs	r4, r7, r3
 8001ee0:	42a7      	cmp	r7, r4
 8001ee2:	41bf      	sbcs	r7, r7
 8001ee4:	4663      	mov	r3, ip
 8001ee6:	427f      	negs	r7, r7
 8001ee8:	1ac9      	subs	r1, r1, r3
 8001eea:	1bcb      	subs	r3, r1, r7
 8001eec:	4699      	mov	r9, r3
 8001eee:	465d      	mov	r5, fp
 8001ef0:	e576      	b.n	80019e0 <__aeabi_dsub+0x104>
 8001ef2:	08ff      	lsrs	r7, r7, #3
 8001ef4:	074b      	lsls	r3, r1, #29
 8001ef6:	433b      	orrs	r3, r7
 8001ef8:	08cc      	lsrs	r4, r1, #3
 8001efa:	e667      	b.n	8001bcc <__aeabi_dsub+0x2f0>
 8001efc:	000a      	movs	r2, r1
 8001efe:	08db      	lsrs	r3, r3, #3
 8001f00:	433a      	orrs	r2, r7
 8001f02:	d100      	bne.n	8001f06 <__aeabi_dsub+0x62a>
 8001f04:	e66f      	b.n	8001be6 <__aeabi_dsub+0x30a>
 8001f06:	4662      	mov	r2, ip
 8001f08:	0752      	lsls	r2, r2, #29
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	4662      	mov	r2, ip
 8001f0e:	08d4      	lsrs	r4, r2, #3
 8001f10:	2280      	movs	r2, #128	; 0x80
 8001f12:	0312      	lsls	r2, r2, #12
 8001f14:	4214      	tst	r4, r2
 8001f16:	d007      	beq.n	8001f28 <__aeabi_dsub+0x64c>
 8001f18:	08c8      	lsrs	r0, r1, #3
 8001f1a:	4210      	tst	r0, r2
 8001f1c:	d104      	bne.n	8001f28 <__aeabi_dsub+0x64c>
 8001f1e:	465d      	mov	r5, fp
 8001f20:	0004      	movs	r4, r0
 8001f22:	08fb      	lsrs	r3, r7, #3
 8001f24:	0749      	lsls	r1, r1, #29
 8001f26:	430b      	orrs	r3, r1
 8001f28:	0f5a      	lsrs	r2, r3, #29
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	08db      	lsrs	r3, r3, #3
 8001f2e:	0752      	lsls	r2, r2, #29
 8001f30:	4313      	orrs	r3, r2
 8001f32:	e65d      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001f34:	074b      	lsls	r3, r1, #29
 8001f36:	08ff      	lsrs	r7, r7, #3
 8001f38:	433b      	orrs	r3, r7
 8001f3a:	08cc      	lsrs	r4, r1, #3
 8001f3c:	e649      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001f3e:	19dc      	adds	r4, r3, r7
 8001f40:	429c      	cmp	r4, r3
 8001f42:	419b      	sbcs	r3, r3
 8001f44:	4461      	add	r1, ip
 8001f46:	4689      	mov	r9, r1
 8001f48:	425b      	negs	r3, r3
 8001f4a:	4499      	add	r9, r3
 8001f4c:	464b      	mov	r3, r9
 8001f4e:	021b      	lsls	r3, r3, #8
 8001f50:	d400      	bmi.n	8001f54 <__aeabi_dsub+0x678>
 8001f52:	e631      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001f54:	464a      	mov	r2, r9
 8001f56:	4b17      	ldr	r3, [pc, #92]	; (8001fb4 <__aeabi_dsub+0x6d8>)
 8001f58:	401a      	ands	r2, r3
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	4691      	mov	r9, r2
 8001f5e:	4698      	mov	r8, r3
 8001f60:	e62a      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001f62:	0016      	movs	r6, r2
 8001f64:	4664      	mov	r4, ip
 8001f66:	3e20      	subs	r6, #32
 8001f68:	40f4      	lsrs	r4, r6
 8001f6a:	46a0      	mov	r8, r4
 8001f6c:	2a20      	cmp	r2, #32
 8001f6e:	d005      	beq.n	8001f7c <__aeabi_dsub+0x6a0>
 8001f70:	2640      	movs	r6, #64	; 0x40
 8001f72:	4664      	mov	r4, ip
 8001f74:	1ab2      	subs	r2, r6, r2
 8001f76:	4094      	lsls	r4, r2
 8001f78:	4323      	orrs	r3, r4
 8001f7a:	469a      	mov	sl, r3
 8001f7c:	4654      	mov	r4, sl
 8001f7e:	1e63      	subs	r3, r4, #1
 8001f80:	419c      	sbcs	r4, r3
 8001f82:	4643      	mov	r3, r8
 8001f84:	431c      	orrs	r4, r3
 8001f86:	e5db      	b.n	8001b40 <__aeabi_dsub+0x264>
 8001f88:	0002      	movs	r2, r0
 8001f8a:	2400      	movs	r4, #0
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	e548      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001f90:	19dc      	adds	r4, r3, r7
 8001f92:	42bc      	cmp	r4, r7
 8001f94:	41bf      	sbcs	r7, r7
 8001f96:	4461      	add	r1, ip
 8001f98:	4689      	mov	r9, r1
 8001f9a:	427f      	negs	r7, r7
 8001f9c:	44b9      	add	r9, r7
 8001f9e:	e738      	b.n	8001e12 <__aeabi_dsub+0x536>
 8001fa0:	464b      	mov	r3, r9
 8001fa2:	4323      	orrs	r3, r4
 8001fa4:	d100      	bne.n	8001fa8 <__aeabi_dsub+0x6cc>
 8001fa6:	e69f      	b.n	8001ce8 <__aeabi_dsub+0x40c>
 8001fa8:	e606      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	000007fe 	.word	0x000007fe
 8001fb0:	000007ff 	.word	0x000007ff
 8001fb4:	ff7fffff 	.word	0xff7fffff
 8001fb8:	08ff      	lsrs	r7, r7, #3
 8001fba:	074b      	lsls	r3, r1, #29
 8001fbc:	433b      	orrs	r3, r7
 8001fbe:	08cc      	lsrs	r4, r1, #3
 8001fc0:	e616      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001fc2:	4662      	mov	r2, ip
 8001fc4:	08db      	lsrs	r3, r3, #3
 8001fc6:	0752      	lsls	r2, r2, #29
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	4662      	mov	r2, ip
 8001fcc:	08d4      	lsrs	r4, r2, #3
 8001fce:	2280      	movs	r2, #128	; 0x80
 8001fd0:	0312      	lsls	r2, r2, #12
 8001fd2:	4214      	tst	r4, r2
 8001fd4:	d007      	beq.n	8001fe6 <__aeabi_dsub+0x70a>
 8001fd6:	08c8      	lsrs	r0, r1, #3
 8001fd8:	4210      	tst	r0, r2
 8001fda:	d104      	bne.n	8001fe6 <__aeabi_dsub+0x70a>
 8001fdc:	465d      	mov	r5, fp
 8001fde:	0004      	movs	r4, r0
 8001fe0:	08fb      	lsrs	r3, r7, #3
 8001fe2:	0749      	lsls	r1, r1, #29
 8001fe4:	430b      	orrs	r3, r1
 8001fe6:	0f5a      	lsrs	r2, r3, #29
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	0752      	lsls	r2, r2, #29
 8001fec:	08db      	lsrs	r3, r3, #3
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	e5fe      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	4a01      	ldr	r2, [pc, #4]	; (8001ffc <__aeabi_dsub+0x720>)
 8001ff6:	001c      	movs	r4, r3
 8001ff8:	e513      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	000007ff 	.word	0x000007ff

08002000 <__aeabi_dcmpun>:
 8002000:	b570      	push	{r4, r5, r6, lr}
 8002002:	0005      	movs	r5, r0
 8002004:	480c      	ldr	r0, [pc, #48]	; (8002038 <__aeabi_dcmpun+0x38>)
 8002006:	031c      	lsls	r4, r3, #12
 8002008:	0016      	movs	r6, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	030a      	lsls	r2, r1, #12
 800200e:	0049      	lsls	r1, r1, #1
 8002010:	0b12      	lsrs	r2, r2, #12
 8002012:	0d49      	lsrs	r1, r1, #21
 8002014:	0b24      	lsrs	r4, r4, #12
 8002016:	0d5b      	lsrs	r3, r3, #21
 8002018:	4281      	cmp	r1, r0
 800201a:	d008      	beq.n	800202e <__aeabi_dcmpun+0x2e>
 800201c:	4a06      	ldr	r2, [pc, #24]	; (8002038 <__aeabi_dcmpun+0x38>)
 800201e:	2000      	movs	r0, #0
 8002020:	4293      	cmp	r3, r2
 8002022:	d103      	bne.n	800202c <__aeabi_dcmpun+0x2c>
 8002024:	0020      	movs	r0, r4
 8002026:	4330      	orrs	r0, r6
 8002028:	1e43      	subs	r3, r0, #1
 800202a:	4198      	sbcs	r0, r3
 800202c:	bd70      	pop	{r4, r5, r6, pc}
 800202e:	2001      	movs	r0, #1
 8002030:	432a      	orrs	r2, r5
 8002032:	d1fb      	bne.n	800202c <__aeabi_dcmpun+0x2c>
 8002034:	e7f2      	b.n	800201c <__aeabi_dcmpun+0x1c>
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	000007ff 	.word	0x000007ff

0800203c <__aeabi_d2iz>:
 800203c:	000a      	movs	r2, r1
 800203e:	b530      	push	{r4, r5, lr}
 8002040:	4c13      	ldr	r4, [pc, #76]	; (8002090 <__aeabi_d2iz+0x54>)
 8002042:	0053      	lsls	r3, r2, #1
 8002044:	0309      	lsls	r1, r1, #12
 8002046:	0005      	movs	r5, r0
 8002048:	0b09      	lsrs	r1, r1, #12
 800204a:	2000      	movs	r0, #0
 800204c:	0d5b      	lsrs	r3, r3, #21
 800204e:	0fd2      	lsrs	r2, r2, #31
 8002050:	42a3      	cmp	r3, r4
 8002052:	dd04      	ble.n	800205e <__aeabi_d2iz+0x22>
 8002054:	480f      	ldr	r0, [pc, #60]	; (8002094 <__aeabi_d2iz+0x58>)
 8002056:	4283      	cmp	r3, r0
 8002058:	dd02      	ble.n	8002060 <__aeabi_d2iz+0x24>
 800205a:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <__aeabi_d2iz+0x5c>)
 800205c:	18d0      	adds	r0, r2, r3
 800205e:	bd30      	pop	{r4, r5, pc}
 8002060:	2080      	movs	r0, #128	; 0x80
 8002062:	0340      	lsls	r0, r0, #13
 8002064:	4301      	orrs	r1, r0
 8002066:	480d      	ldr	r0, [pc, #52]	; (800209c <__aeabi_d2iz+0x60>)
 8002068:	1ac0      	subs	r0, r0, r3
 800206a:	281f      	cmp	r0, #31
 800206c:	dd08      	ble.n	8002080 <__aeabi_d2iz+0x44>
 800206e:	480c      	ldr	r0, [pc, #48]	; (80020a0 <__aeabi_d2iz+0x64>)
 8002070:	1ac3      	subs	r3, r0, r3
 8002072:	40d9      	lsrs	r1, r3
 8002074:	000b      	movs	r3, r1
 8002076:	4258      	negs	r0, r3
 8002078:	2a00      	cmp	r2, #0
 800207a:	d1f0      	bne.n	800205e <__aeabi_d2iz+0x22>
 800207c:	0018      	movs	r0, r3
 800207e:	e7ee      	b.n	800205e <__aeabi_d2iz+0x22>
 8002080:	4c08      	ldr	r4, [pc, #32]	; (80020a4 <__aeabi_d2iz+0x68>)
 8002082:	40c5      	lsrs	r5, r0
 8002084:	46a4      	mov	ip, r4
 8002086:	4463      	add	r3, ip
 8002088:	4099      	lsls	r1, r3
 800208a:	000b      	movs	r3, r1
 800208c:	432b      	orrs	r3, r5
 800208e:	e7f2      	b.n	8002076 <__aeabi_d2iz+0x3a>
 8002090:	000003fe 	.word	0x000003fe
 8002094:	0000041d 	.word	0x0000041d
 8002098:	7fffffff 	.word	0x7fffffff
 800209c:	00000433 	.word	0x00000433
 80020a0:	00000413 	.word	0x00000413
 80020a4:	fffffbed 	.word	0xfffffbed

080020a8 <__aeabi_i2d>:
 80020a8:	b570      	push	{r4, r5, r6, lr}
 80020aa:	2800      	cmp	r0, #0
 80020ac:	d016      	beq.n	80020dc <__aeabi_i2d+0x34>
 80020ae:	17c3      	asrs	r3, r0, #31
 80020b0:	18c5      	adds	r5, r0, r3
 80020b2:	405d      	eors	r5, r3
 80020b4:	0fc4      	lsrs	r4, r0, #31
 80020b6:	0028      	movs	r0, r5
 80020b8:	f000 f8d4 	bl	8002264 <__clzsi2>
 80020bc:	4a11      	ldr	r2, [pc, #68]	; (8002104 <__aeabi_i2d+0x5c>)
 80020be:	1a12      	subs	r2, r2, r0
 80020c0:	280a      	cmp	r0, #10
 80020c2:	dc16      	bgt.n	80020f2 <__aeabi_i2d+0x4a>
 80020c4:	0003      	movs	r3, r0
 80020c6:	002e      	movs	r6, r5
 80020c8:	3315      	adds	r3, #21
 80020ca:	409e      	lsls	r6, r3
 80020cc:	230b      	movs	r3, #11
 80020ce:	1a18      	subs	r0, r3, r0
 80020d0:	40c5      	lsrs	r5, r0
 80020d2:	0552      	lsls	r2, r2, #21
 80020d4:	032d      	lsls	r5, r5, #12
 80020d6:	0b2d      	lsrs	r5, r5, #12
 80020d8:	0d53      	lsrs	r3, r2, #21
 80020da:	e003      	b.n	80020e4 <__aeabi_i2d+0x3c>
 80020dc:	2400      	movs	r4, #0
 80020de:	2300      	movs	r3, #0
 80020e0:	2500      	movs	r5, #0
 80020e2:	2600      	movs	r6, #0
 80020e4:	051b      	lsls	r3, r3, #20
 80020e6:	432b      	orrs	r3, r5
 80020e8:	07e4      	lsls	r4, r4, #31
 80020ea:	4323      	orrs	r3, r4
 80020ec:	0030      	movs	r0, r6
 80020ee:	0019      	movs	r1, r3
 80020f0:	bd70      	pop	{r4, r5, r6, pc}
 80020f2:	380b      	subs	r0, #11
 80020f4:	4085      	lsls	r5, r0
 80020f6:	0552      	lsls	r2, r2, #21
 80020f8:	032d      	lsls	r5, r5, #12
 80020fa:	2600      	movs	r6, #0
 80020fc:	0b2d      	lsrs	r5, r5, #12
 80020fe:	0d53      	lsrs	r3, r2, #21
 8002100:	e7f0      	b.n	80020e4 <__aeabi_i2d+0x3c>
 8002102:	46c0      	nop			; (mov r8, r8)
 8002104:	0000041e 	.word	0x0000041e

08002108 <__aeabi_ui2d>:
 8002108:	b510      	push	{r4, lr}
 800210a:	1e04      	subs	r4, r0, #0
 800210c:	d010      	beq.n	8002130 <__aeabi_ui2d+0x28>
 800210e:	f000 f8a9 	bl	8002264 <__clzsi2>
 8002112:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <__aeabi_ui2d+0x48>)
 8002114:	1a1b      	subs	r3, r3, r0
 8002116:	280a      	cmp	r0, #10
 8002118:	dc11      	bgt.n	800213e <__aeabi_ui2d+0x36>
 800211a:	220b      	movs	r2, #11
 800211c:	0021      	movs	r1, r4
 800211e:	1a12      	subs	r2, r2, r0
 8002120:	40d1      	lsrs	r1, r2
 8002122:	3015      	adds	r0, #21
 8002124:	030a      	lsls	r2, r1, #12
 8002126:	055b      	lsls	r3, r3, #21
 8002128:	4084      	lsls	r4, r0
 800212a:	0b12      	lsrs	r2, r2, #12
 800212c:	0d5b      	lsrs	r3, r3, #21
 800212e:	e001      	b.n	8002134 <__aeabi_ui2d+0x2c>
 8002130:	2300      	movs	r3, #0
 8002132:	2200      	movs	r2, #0
 8002134:	051b      	lsls	r3, r3, #20
 8002136:	4313      	orrs	r3, r2
 8002138:	0020      	movs	r0, r4
 800213a:	0019      	movs	r1, r3
 800213c:	bd10      	pop	{r4, pc}
 800213e:	0022      	movs	r2, r4
 8002140:	380b      	subs	r0, #11
 8002142:	4082      	lsls	r2, r0
 8002144:	055b      	lsls	r3, r3, #21
 8002146:	0312      	lsls	r2, r2, #12
 8002148:	2400      	movs	r4, #0
 800214a:	0b12      	lsrs	r2, r2, #12
 800214c:	0d5b      	lsrs	r3, r3, #21
 800214e:	e7f1      	b.n	8002134 <__aeabi_ui2d+0x2c>
 8002150:	0000041e 	.word	0x0000041e

08002154 <__aeabi_d2f>:
 8002154:	0002      	movs	r2, r0
 8002156:	004b      	lsls	r3, r1, #1
 8002158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800215a:	0d5b      	lsrs	r3, r3, #21
 800215c:	030c      	lsls	r4, r1, #12
 800215e:	4e3d      	ldr	r6, [pc, #244]	; (8002254 <__aeabi_d2f+0x100>)
 8002160:	0a64      	lsrs	r4, r4, #9
 8002162:	0f40      	lsrs	r0, r0, #29
 8002164:	1c5f      	adds	r7, r3, #1
 8002166:	0fc9      	lsrs	r1, r1, #31
 8002168:	4304      	orrs	r4, r0
 800216a:	00d5      	lsls	r5, r2, #3
 800216c:	4237      	tst	r7, r6
 800216e:	d00a      	beq.n	8002186 <__aeabi_d2f+0x32>
 8002170:	4839      	ldr	r0, [pc, #228]	; (8002258 <__aeabi_d2f+0x104>)
 8002172:	181e      	adds	r6, r3, r0
 8002174:	2efe      	cmp	r6, #254	; 0xfe
 8002176:	dd16      	ble.n	80021a6 <__aeabi_d2f+0x52>
 8002178:	20ff      	movs	r0, #255	; 0xff
 800217a:	2400      	movs	r4, #0
 800217c:	05c0      	lsls	r0, r0, #23
 800217e:	4320      	orrs	r0, r4
 8002180:	07c9      	lsls	r1, r1, #31
 8002182:	4308      	orrs	r0, r1
 8002184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002186:	2b00      	cmp	r3, #0
 8002188:	d106      	bne.n	8002198 <__aeabi_d2f+0x44>
 800218a:	432c      	orrs	r4, r5
 800218c:	d026      	beq.n	80021dc <__aeabi_d2f+0x88>
 800218e:	2205      	movs	r2, #5
 8002190:	0192      	lsls	r2, r2, #6
 8002192:	0a54      	lsrs	r4, r2, #9
 8002194:	b2d8      	uxtb	r0, r3
 8002196:	e7f1      	b.n	800217c <__aeabi_d2f+0x28>
 8002198:	4325      	orrs	r5, r4
 800219a:	d0ed      	beq.n	8002178 <__aeabi_d2f+0x24>
 800219c:	2080      	movs	r0, #128	; 0x80
 800219e:	03c0      	lsls	r0, r0, #15
 80021a0:	4304      	orrs	r4, r0
 80021a2:	20ff      	movs	r0, #255	; 0xff
 80021a4:	e7ea      	b.n	800217c <__aeabi_d2f+0x28>
 80021a6:	2e00      	cmp	r6, #0
 80021a8:	dd1b      	ble.n	80021e2 <__aeabi_d2f+0x8e>
 80021aa:	0192      	lsls	r2, r2, #6
 80021ac:	1e53      	subs	r3, r2, #1
 80021ae:	419a      	sbcs	r2, r3
 80021b0:	00e4      	lsls	r4, r4, #3
 80021b2:	0f6d      	lsrs	r5, r5, #29
 80021b4:	4322      	orrs	r2, r4
 80021b6:	432a      	orrs	r2, r5
 80021b8:	0753      	lsls	r3, r2, #29
 80021ba:	d048      	beq.n	800224e <__aeabi_d2f+0xfa>
 80021bc:	230f      	movs	r3, #15
 80021be:	4013      	ands	r3, r2
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d000      	beq.n	80021c6 <__aeabi_d2f+0x72>
 80021c4:	3204      	adds	r2, #4
 80021c6:	2380      	movs	r3, #128	; 0x80
 80021c8:	04db      	lsls	r3, r3, #19
 80021ca:	4013      	ands	r3, r2
 80021cc:	d03f      	beq.n	800224e <__aeabi_d2f+0xfa>
 80021ce:	1c70      	adds	r0, r6, #1
 80021d0:	2efe      	cmp	r6, #254	; 0xfe
 80021d2:	d0d1      	beq.n	8002178 <__aeabi_d2f+0x24>
 80021d4:	0192      	lsls	r2, r2, #6
 80021d6:	0a54      	lsrs	r4, r2, #9
 80021d8:	b2c0      	uxtb	r0, r0
 80021da:	e7cf      	b.n	800217c <__aeabi_d2f+0x28>
 80021dc:	2000      	movs	r0, #0
 80021de:	2400      	movs	r4, #0
 80021e0:	e7cc      	b.n	800217c <__aeabi_d2f+0x28>
 80021e2:	0032      	movs	r2, r6
 80021e4:	3217      	adds	r2, #23
 80021e6:	db22      	blt.n	800222e <__aeabi_d2f+0xda>
 80021e8:	2080      	movs	r0, #128	; 0x80
 80021ea:	0400      	lsls	r0, r0, #16
 80021ec:	4320      	orrs	r0, r4
 80021ee:	241e      	movs	r4, #30
 80021f0:	1ba4      	subs	r4, r4, r6
 80021f2:	2c1f      	cmp	r4, #31
 80021f4:	dd1d      	ble.n	8002232 <__aeabi_d2f+0xde>
 80021f6:	2202      	movs	r2, #2
 80021f8:	4252      	negs	r2, r2
 80021fa:	1b96      	subs	r6, r2, r6
 80021fc:	0002      	movs	r2, r0
 80021fe:	40f2      	lsrs	r2, r6
 8002200:	0016      	movs	r6, r2
 8002202:	2c20      	cmp	r4, #32
 8002204:	d004      	beq.n	8002210 <__aeabi_d2f+0xbc>
 8002206:	4a15      	ldr	r2, [pc, #84]	; (800225c <__aeabi_d2f+0x108>)
 8002208:	4694      	mov	ip, r2
 800220a:	4463      	add	r3, ip
 800220c:	4098      	lsls	r0, r3
 800220e:	4305      	orrs	r5, r0
 8002210:	002a      	movs	r2, r5
 8002212:	1e53      	subs	r3, r2, #1
 8002214:	419a      	sbcs	r2, r3
 8002216:	4332      	orrs	r2, r6
 8002218:	2600      	movs	r6, #0
 800221a:	0753      	lsls	r3, r2, #29
 800221c:	d1ce      	bne.n	80021bc <__aeabi_d2f+0x68>
 800221e:	2480      	movs	r4, #128	; 0x80
 8002220:	0013      	movs	r3, r2
 8002222:	04e4      	lsls	r4, r4, #19
 8002224:	2001      	movs	r0, #1
 8002226:	4023      	ands	r3, r4
 8002228:	4222      	tst	r2, r4
 800222a:	d1d3      	bne.n	80021d4 <__aeabi_d2f+0x80>
 800222c:	e7b0      	b.n	8002190 <__aeabi_d2f+0x3c>
 800222e:	2300      	movs	r3, #0
 8002230:	e7ad      	b.n	800218e <__aeabi_d2f+0x3a>
 8002232:	4a0b      	ldr	r2, [pc, #44]	; (8002260 <__aeabi_d2f+0x10c>)
 8002234:	4694      	mov	ip, r2
 8002236:	002a      	movs	r2, r5
 8002238:	40e2      	lsrs	r2, r4
 800223a:	0014      	movs	r4, r2
 800223c:	002a      	movs	r2, r5
 800223e:	4463      	add	r3, ip
 8002240:	409a      	lsls	r2, r3
 8002242:	4098      	lsls	r0, r3
 8002244:	1e55      	subs	r5, r2, #1
 8002246:	41aa      	sbcs	r2, r5
 8002248:	4302      	orrs	r2, r0
 800224a:	4322      	orrs	r2, r4
 800224c:	e7e4      	b.n	8002218 <__aeabi_d2f+0xc4>
 800224e:	0033      	movs	r3, r6
 8002250:	e79e      	b.n	8002190 <__aeabi_d2f+0x3c>
 8002252:	46c0      	nop			; (mov r8, r8)
 8002254:	000007fe 	.word	0x000007fe
 8002258:	fffffc80 	.word	0xfffffc80
 800225c:	fffffca2 	.word	0xfffffca2
 8002260:	fffffc82 	.word	0xfffffc82

08002264 <__clzsi2>:
 8002264:	211c      	movs	r1, #28
 8002266:	2301      	movs	r3, #1
 8002268:	041b      	lsls	r3, r3, #16
 800226a:	4298      	cmp	r0, r3
 800226c:	d301      	bcc.n	8002272 <__clzsi2+0xe>
 800226e:	0c00      	lsrs	r0, r0, #16
 8002270:	3910      	subs	r1, #16
 8002272:	0a1b      	lsrs	r3, r3, #8
 8002274:	4298      	cmp	r0, r3
 8002276:	d301      	bcc.n	800227c <__clzsi2+0x18>
 8002278:	0a00      	lsrs	r0, r0, #8
 800227a:	3908      	subs	r1, #8
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	4298      	cmp	r0, r3
 8002280:	d301      	bcc.n	8002286 <__clzsi2+0x22>
 8002282:	0900      	lsrs	r0, r0, #4
 8002284:	3904      	subs	r1, #4
 8002286:	a202      	add	r2, pc, #8	; (adr r2, 8002290 <__clzsi2+0x2c>)
 8002288:	5c10      	ldrb	r0, [r2, r0]
 800228a:	1840      	adds	r0, r0, r1
 800228c:	4770      	bx	lr
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	02020304 	.word	0x02020304
 8002294:	01010101 	.word	0x01010101
	...

080022a0 <Read_Pin>:
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */


void Read_Pin()
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b088      	sub	sp, #32
 80022a4:	af00      	add	r7, sp, #0

	double value  = 1.0;
 80022a6:	2200      	movs	r2, #0
 80022a8:	4b24      	ldr	r3, [pc, #144]	; (800233c <Read_Pin+0x9c>)
 80022aa:	61ba      	str	r2, [r7, #24]
 80022ac:	61fb      	str	r3, [r7, #28]
	double raw = 0.0;
 80022ae:	2200      	movs	r2, #0
 80022b0:	2300      	movs	r3, #0
 80022b2:	613a      	str	r2, [r7, #16]
 80022b4:	617b      	str	r3, [r7, #20]
	char msg[16] = "";
 80022b6:	003b      	movs	r3, r7
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	3304      	adds	r3, #4
 80022be:	220c      	movs	r2, #12
 80022c0:	2100      	movs	r1, #0
 80022c2:	0018      	movs	r0, r3
 80022c4:	f003 fa72 	bl	80057ac <memset>


	HAL_ADC_Start(&hadc);
 80022c8:	4b1d      	ldr	r3, [pc, #116]	; (8002340 <Read_Pin+0xa0>)
 80022ca:	0018      	movs	r0, r3
 80022cc:	f000 fd7a 	bl	8002dc4 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(&hadc,100);
 80022d0:	4b1b      	ldr	r3, [pc, #108]	; (8002340 <Read_Pin+0xa0>)
 80022d2:	2164      	movs	r1, #100	; 0x64
 80022d4:	0018      	movs	r0, r3
 80022d6:	f000 fdc9 	bl	8002e6c <HAL_ADC_PollForConversion>

	raw = (double)HAL_ADC_GetValue(&hadc);
 80022da:	4b19      	ldr	r3, [pc, #100]	; (8002340 <Read_Pin+0xa0>)
 80022dc:	0018      	movs	r0, r3
 80022de:	f000 fe5d 	bl	8002f9c <HAL_ADC_GetValue>
 80022e2:	0003      	movs	r3, r0
 80022e4:	0018      	movs	r0, r3
 80022e6:	f7ff ff0f 	bl	8002108 <__aeabi_ui2d>
 80022ea:	0002      	movs	r2, r0
 80022ec:	000b      	movs	r3, r1
 80022ee:	613a      	str	r2, [r7, #16]
 80022f0:	617b      	str	r3, [r7, #20]

	value  = (raw - 500)/10.0;
 80022f2:	2200      	movs	r2, #0
 80022f4:	4b13      	ldr	r3, [pc, #76]	; (8002344 <Read_Pin+0xa4>)
 80022f6:	6938      	ldr	r0, [r7, #16]
 80022f8:	6979      	ldr	r1, [r7, #20]
 80022fa:	f7ff faef 	bl	80018dc <__aeabi_dsub>
 80022fe:	0002      	movs	r2, r0
 8002300:	000b      	movs	r3, r1
 8002302:	0010      	movs	r0, r2
 8002304:	0019      	movs	r1, r3
 8002306:	2200      	movs	r2, #0
 8002308:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <Read_Pin+0xa8>)
 800230a:	f7fe fc79 	bl	8000c00 <__aeabi_ddiv>
 800230e:	0002      	movs	r2, r0
 8002310:	000b      	movs	r3, r1
 8002312:	61ba      	str	r2, [r7, #24]
 8002314:	61fb      	str	r3, [r7, #28]

	sprintf(msg,"\n\n%f\n\n",value);
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	490c      	ldr	r1, [pc, #48]	; (800234c <Read_Pin+0xac>)
 800231c:	0038      	movs	r0, r7
 800231e:	f004 f8c7 	bl	80064b0 <siprintf>

	HAL_UART_Transmit(&huart3,(uint8_t*)msg,13,100);
 8002322:	0039      	movs	r1, r7
 8002324:	480a      	ldr	r0, [pc, #40]	; (8002350 <Read_Pin+0xb0>)
 8002326:	2364      	movs	r3, #100	; 0x64
 8002328:	220d      	movs	r2, #13
 800232a:	f002 fa83 	bl	8004834 <HAL_UART_Transmit>

	HAL_Delay(50);
 800232e:	2032      	movs	r0, #50	; 0x32
 8002330:	f000 fbe4 	bl	8002afc <HAL_Delay>

}
 8002334:	46c0      	nop			; (mov r8, r8)
 8002336:	46bd      	mov	sp, r7
 8002338:	b008      	add	sp, #32
 800233a:	bd80      	pop	{r7, pc}
 800233c:	3ff00000 	.word	0x3ff00000
 8002340:	200001fc 	.word	0x200001fc
 8002344:	407f4000 	.word	0x407f4000
 8002348:	40240000 	.word	0x40240000
 800234c:	0800a220 	.word	0x0800a220
 8002350:	2000023c 	.word	0x2000023c

08002354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002358:	f000 fba0 	bl	8002a9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800235c:	f000 f80c 	bl	8002378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002360:	f000 f8da 	bl	8002518 <MX_GPIO_Init>
  MX_ADC_Init();
 8002364:	f000 f84c 	bl	8002400 <MX_ADC_Init>
  MX_USART3_UART_Init();
 8002368:	f000 f8a6 	bl	80024b8 <MX_USART3_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  Read_Pin();
 800236c:	f7ff ff98 	bl	80022a0 <Read_Pin>
	  HAL_Delay(50);
 8002370:	2032      	movs	r0, #50	; 0x32
 8002372:	f000 fbc3 	bl	8002afc <HAL_Delay>
	  Read_Pin();
 8002376:	e7f9      	b.n	800236c <main+0x18>

08002378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002378:	b590      	push	{r4, r7, lr}
 800237a:	b093      	sub	sp, #76	; 0x4c
 800237c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800237e:	2414      	movs	r4, #20
 8002380:	193b      	adds	r3, r7, r4
 8002382:	0018      	movs	r0, r3
 8002384:	2334      	movs	r3, #52	; 0x34
 8002386:	001a      	movs	r2, r3
 8002388:	2100      	movs	r1, #0
 800238a:	f003 fa0f 	bl	80057ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800238e:	1d3b      	adds	r3, r7, #4
 8002390:	0018      	movs	r0, r3
 8002392:	2310      	movs	r3, #16
 8002394:	001a      	movs	r2, r3
 8002396:	2100      	movs	r1, #0
 8002398:	f003 fa08 	bl	80057ac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48;
 800239c:	0021      	movs	r1, r4
 800239e:	187b      	adds	r3, r7, r1
 80023a0:	2230      	movs	r2, #48	; 0x30
 80023a2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80023a4:	187b      	adds	r3, r7, r1
 80023a6:	2201      	movs	r2, #1
 80023a8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80023aa:	187b      	adds	r3, r7, r1
 80023ac:	2201      	movs	r2, #1
 80023ae:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80023b0:	187b      	adds	r3, r7, r1
 80023b2:	2210      	movs	r2, #16
 80023b4:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80023b6:	187b      	adds	r3, r7, r1
 80023b8:	2200      	movs	r2, #0
 80023ba:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023bc:	187b      	adds	r3, r7, r1
 80023be:	0018      	movs	r0, r3
 80023c0:	f001 fa4a 	bl	8003858 <HAL_RCC_OscConfig>
 80023c4:	1e03      	subs	r3, r0, #0
 80023c6:	d001      	beq.n	80023cc <SystemClock_Config+0x54>
  {
    Error_Handler();
 80023c8:	f000 f900 	bl	80025cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023cc:	1d3b      	adds	r3, r7, #4
 80023ce:	2207      	movs	r2, #7
 80023d0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80023d2:	1d3b      	adds	r3, r7, #4
 80023d4:	2203      	movs	r2, #3
 80023d6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023d8:	1d3b      	adds	r3, r7, #4
 80023da:	2200      	movs	r2, #0
 80023dc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023de:	1d3b      	adds	r3, r7, #4
 80023e0:	2200      	movs	r2, #0
 80023e2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80023e4:	1d3b      	adds	r3, r7, #4
 80023e6:	2101      	movs	r1, #1
 80023e8:	0018      	movs	r0, r3
 80023ea:	f001 fdbb 	bl	8003f64 <HAL_RCC_ClockConfig>
 80023ee:	1e03      	subs	r3, r0, #0
 80023f0:	d001      	beq.n	80023f6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80023f2:	f000 f8eb 	bl	80025cc <Error_Handler>
  }
}
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	46bd      	mov	sp, r7
 80023fa:	b013      	add	sp, #76	; 0x4c
 80023fc:	bd90      	pop	{r4, r7, pc}
	...

08002400 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002406:	1d3b      	adds	r3, r7, #4
 8002408:	0018      	movs	r0, r3
 800240a:	230c      	movs	r3, #12
 800240c:	001a      	movs	r2, r3
 800240e:	2100      	movs	r1, #0
 8002410:	f003 f9cc 	bl	80057ac <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002414:	4b26      	ldr	r3, [pc, #152]	; (80024b0 <MX_ADC_Init+0xb0>)
 8002416:	4a27      	ldr	r2, [pc, #156]	; (80024b4 <MX_ADC_Init+0xb4>)
 8002418:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800241a:	4b25      	ldr	r3, [pc, #148]	; (80024b0 <MX_ADC_Init+0xb0>)
 800241c:	2200      	movs	r2, #0
 800241e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002420:	4b23      	ldr	r3, [pc, #140]	; (80024b0 <MX_ADC_Init+0xb0>)
 8002422:	2200      	movs	r2, #0
 8002424:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002426:	4b22      	ldr	r3, [pc, #136]	; (80024b0 <MX_ADC_Init+0xb0>)
 8002428:	2200      	movs	r2, #0
 800242a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800242c:	4b20      	ldr	r3, [pc, #128]	; (80024b0 <MX_ADC_Init+0xb0>)
 800242e:	2201      	movs	r2, #1
 8002430:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002432:	4b1f      	ldr	r3, [pc, #124]	; (80024b0 <MX_ADC_Init+0xb0>)
 8002434:	2204      	movs	r2, #4
 8002436:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002438:	4b1d      	ldr	r3, [pc, #116]	; (80024b0 <MX_ADC_Init+0xb0>)
 800243a:	2200      	movs	r2, #0
 800243c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800243e:	4b1c      	ldr	r3, [pc, #112]	; (80024b0 <MX_ADC_Init+0xb0>)
 8002440:	2200      	movs	r2, #0
 8002442:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002444:	4b1a      	ldr	r3, [pc, #104]	; (80024b0 <MX_ADC_Init+0xb0>)
 8002446:	2200      	movs	r2, #0
 8002448:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800244a:	4b19      	ldr	r3, [pc, #100]	; (80024b0 <MX_ADC_Init+0xb0>)
 800244c:	2200      	movs	r2, #0
 800244e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002450:	4b17      	ldr	r3, [pc, #92]	; (80024b0 <MX_ADC_Init+0xb0>)
 8002452:	22c2      	movs	r2, #194	; 0xc2
 8002454:	32ff      	adds	r2, #255	; 0xff
 8002456:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002458:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <MX_ADC_Init+0xb0>)
 800245a:	2200      	movs	r2, #0
 800245c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800245e:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <MX_ADC_Init+0xb0>)
 8002460:	2224      	movs	r2, #36	; 0x24
 8002462:	2100      	movs	r1, #0
 8002464:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002466:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <MX_ADC_Init+0xb0>)
 8002468:	2201      	movs	r2, #1
 800246a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800246c:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <MX_ADC_Init+0xb0>)
 800246e:	0018      	movs	r0, r3
 8002470:	f000 fb68 	bl	8002b44 <HAL_ADC_Init>
 8002474:	1e03      	subs	r3, r0, #0
 8002476:	d001      	beq.n	800247c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002478:	f000 f8a8 	bl	80025cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800247c:	1d3b      	adds	r3, r7, #4
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002482:	1d3b      	adds	r3, r7, #4
 8002484:	2280      	movs	r2, #128	; 0x80
 8002486:	0152      	lsls	r2, r2, #5
 8002488:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800248a:	1d3b      	adds	r3, r7, #4
 800248c:	2280      	movs	r2, #128	; 0x80
 800248e:	0552      	lsls	r2, r2, #21
 8002490:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002492:	1d3a      	adds	r2, r7, #4
 8002494:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <MX_ADC_Init+0xb0>)
 8002496:	0011      	movs	r1, r2
 8002498:	0018      	movs	r0, r3
 800249a:	f000 fd8b 	bl	8002fb4 <HAL_ADC_ConfigChannel>
 800249e:	1e03      	subs	r3, r0, #0
 80024a0:	d001      	beq.n	80024a6 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80024a2:	f000 f893 	bl	80025cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80024a6:	46c0      	nop			; (mov r8, r8)
 80024a8:	46bd      	mov	sp, r7
 80024aa:	b004      	add	sp, #16
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	46c0      	nop			; (mov r8, r8)
 80024b0:	200001fc 	.word	0x200001fc
 80024b4:	40012400 	.word	0x40012400

080024b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80024bc:	4b14      	ldr	r3, [pc, #80]	; (8002510 <MX_USART3_UART_Init+0x58>)
 80024be:	4a15      	ldr	r2, [pc, #84]	; (8002514 <MX_USART3_UART_Init+0x5c>)
 80024c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80024c2:	4b13      	ldr	r3, [pc, #76]	; (8002510 <MX_USART3_UART_Init+0x58>)
 80024c4:	2296      	movs	r2, #150	; 0x96
 80024c6:	0192      	lsls	r2, r2, #6
 80024c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80024ca:	4b11      	ldr	r3, [pc, #68]	; (8002510 <MX_USART3_UART_Init+0x58>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80024d0:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <MX_USART3_UART_Init+0x58>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80024d6:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <MX_USART3_UART_Init+0x58>)
 80024d8:	2200      	movs	r2, #0
 80024da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80024dc:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <MX_USART3_UART_Init+0x58>)
 80024de:	220c      	movs	r2, #12
 80024e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024e2:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <MX_USART3_UART_Init+0x58>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80024e8:	4b09      	ldr	r3, [pc, #36]	; (8002510 <MX_USART3_UART_Init+0x58>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024ee:	4b08      	ldr	r3, [pc, #32]	; (8002510 <MX_USART3_UART_Init+0x58>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024f4:	4b06      	ldr	r3, [pc, #24]	; (8002510 <MX_USART3_UART_Init+0x58>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80024fa:	4b05      	ldr	r3, [pc, #20]	; (8002510 <MX_USART3_UART_Init+0x58>)
 80024fc:	0018      	movs	r0, r3
 80024fe:	f002 f945 	bl	800478c <HAL_UART_Init>
 8002502:	1e03      	subs	r3, r0, #0
 8002504:	d001      	beq.n	800250a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002506:	f000 f861 	bl	80025cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800250a:	46c0      	nop			; (mov r8, r8)
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	2000023c 	.word	0x2000023c
 8002514:	40004800 	.word	0x40004800

08002518 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002518:	b590      	push	{r4, r7, lr}
 800251a:	b089      	sub	sp, #36	; 0x24
 800251c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251e:	240c      	movs	r4, #12
 8002520:	193b      	adds	r3, r7, r4
 8002522:	0018      	movs	r0, r3
 8002524:	2314      	movs	r3, #20
 8002526:	001a      	movs	r2, r3
 8002528:	2100      	movs	r1, #0
 800252a:	f003 f93f 	bl	80057ac <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800252e:	4b1d      	ldr	r3, [pc, #116]	; (80025a4 <MX_GPIO_Init+0x8c>)
 8002530:	695a      	ldr	r2, [r3, #20]
 8002532:	4b1c      	ldr	r3, [pc, #112]	; (80025a4 <MX_GPIO_Init+0x8c>)
 8002534:	2180      	movs	r1, #128	; 0x80
 8002536:	0289      	lsls	r1, r1, #10
 8002538:	430a      	orrs	r2, r1
 800253a:	615a      	str	r2, [r3, #20]
 800253c:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <MX_GPIO_Init+0x8c>)
 800253e:	695a      	ldr	r2, [r3, #20]
 8002540:	2380      	movs	r3, #128	; 0x80
 8002542:	029b      	lsls	r3, r3, #10
 8002544:	4013      	ands	r3, r2
 8002546:	60bb      	str	r3, [r7, #8]
 8002548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800254a:	4b16      	ldr	r3, [pc, #88]	; (80025a4 <MX_GPIO_Init+0x8c>)
 800254c:	695a      	ldr	r2, [r3, #20]
 800254e:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <MX_GPIO_Init+0x8c>)
 8002550:	2180      	movs	r1, #128	; 0x80
 8002552:	0309      	lsls	r1, r1, #12
 8002554:	430a      	orrs	r2, r1
 8002556:	615a      	str	r2, [r3, #20]
 8002558:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <MX_GPIO_Init+0x8c>)
 800255a:	695a      	ldr	r2, [r3, #20]
 800255c:	2380      	movs	r3, #128	; 0x80
 800255e:	031b      	lsls	r3, r3, #12
 8002560:	4013      	ands	r3, r2
 8002562:	607b      	str	r3, [r7, #4]
 8002564:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED02_GPIO_Port, LED02_Pin, GPIO_PIN_RESET);
 8002566:	2390      	movs	r3, #144	; 0x90
 8002568:	05db      	lsls	r3, r3, #23
 800256a:	2200      	movs	r2, #0
 800256c:	2120      	movs	r1, #32
 800256e:	0018      	movs	r0, r3
 8002570:	f001 f954 	bl	800381c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED02_Pin */
  GPIO_InitStruct.Pin = LED02_Pin;
 8002574:	0021      	movs	r1, r4
 8002576:	187b      	adds	r3, r7, r1
 8002578:	2220      	movs	r2, #32
 800257a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800257c:	187b      	adds	r3, r7, r1
 800257e:	2201      	movs	r2, #1
 8002580:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	187b      	adds	r3, r7, r1
 8002584:	2200      	movs	r2, #0
 8002586:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002588:	187b      	adds	r3, r7, r1
 800258a:	2200      	movs	r2, #0
 800258c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED02_GPIO_Port, &GPIO_InitStruct);
 800258e:	187a      	adds	r2, r7, r1
 8002590:	2390      	movs	r3, #144	; 0x90
 8002592:	05db      	lsls	r3, r3, #23
 8002594:	0011      	movs	r1, r2
 8002596:	0018      	movs	r0, r3
 8002598:	f000 ffc8 	bl	800352c <HAL_GPIO_Init>

}
 800259c:	46c0      	nop			; (mov r8, r8)
 800259e:	46bd      	mov	sp, r7
 80025a0:	b009      	add	sp, #36	; 0x24
 80025a2:	bd90      	pop	{r4, r7, pc}
 80025a4:	40021000 	.word	0x40021000

080025a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a04      	ldr	r2, [pc, #16]	; (80025c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d101      	bne.n	80025be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80025ba:	f000 fa83 	bl	8002ac4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80025be:	46c0      	nop			; (mov r8, r8)
 80025c0:	46bd      	mov	sp, r7
 80025c2:	b002      	add	sp, #8
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	46c0      	nop			; (mov r8, r8)
 80025c8:	40012c00 	.word	0x40012c00

080025cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025d0:	b672      	cpsid	i
}
 80025d2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025d4:	e7fe      	b.n	80025d4 <Error_Handler+0x8>
	...

080025d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025de:	4b0f      	ldr	r3, [pc, #60]	; (800261c <HAL_MspInit+0x44>)
 80025e0:	699a      	ldr	r2, [r3, #24]
 80025e2:	4b0e      	ldr	r3, [pc, #56]	; (800261c <HAL_MspInit+0x44>)
 80025e4:	2101      	movs	r1, #1
 80025e6:	430a      	orrs	r2, r1
 80025e8:	619a      	str	r2, [r3, #24]
 80025ea:	4b0c      	ldr	r3, [pc, #48]	; (800261c <HAL_MspInit+0x44>)
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	2201      	movs	r2, #1
 80025f0:	4013      	ands	r3, r2
 80025f2:	607b      	str	r3, [r7, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025f6:	4b09      	ldr	r3, [pc, #36]	; (800261c <HAL_MspInit+0x44>)
 80025f8:	69da      	ldr	r2, [r3, #28]
 80025fa:	4b08      	ldr	r3, [pc, #32]	; (800261c <HAL_MspInit+0x44>)
 80025fc:	2180      	movs	r1, #128	; 0x80
 80025fe:	0549      	lsls	r1, r1, #21
 8002600:	430a      	orrs	r2, r1
 8002602:	61da      	str	r2, [r3, #28]
 8002604:	4b05      	ldr	r3, [pc, #20]	; (800261c <HAL_MspInit+0x44>)
 8002606:	69da      	ldr	r2, [r3, #28]
 8002608:	2380      	movs	r3, #128	; 0x80
 800260a:	055b      	lsls	r3, r3, #21
 800260c:	4013      	ands	r3, r2
 800260e:	603b      	str	r3, [r7, #0]
 8002610:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002612:	46c0      	nop			; (mov r8, r8)
 8002614:	46bd      	mov	sp, r7
 8002616:	b002      	add	sp, #8
 8002618:	bd80      	pop	{r7, pc}
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	40021000 	.word	0x40021000

08002620 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002620:	b590      	push	{r4, r7, lr}
 8002622:	b08b      	sub	sp, #44	; 0x2c
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002628:	2414      	movs	r4, #20
 800262a:	193b      	adds	r3, r7, r4
 800262c:	0018      	movs	r0, r3
 800262e:	2314      	movs	r3, #20
 8002630:	001a      	movs	r2, r3
 8002632:	2100      	movs	r1, #0
 8002634:	f003 f8ba 	bl	80057ac <memset>
  if(hadc->Instance==ADC1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a19      	ldr	r2, [pc, #100]	; (80026a4 <HAL_ADC_MspInit+0x84>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d12b      	bne.n	800269a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002642:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <HAL_ADC_MspInit+0x88>)
 8002644:	699a      	ldr	r2, [r3, #24]
 8002646:	4b18      	ldr	r3, [pc, #96]	; (80026a8 <HAL_ADC_MspInit+0x88>)
 8002648:	2180      	movs	r1, #128	; 0x80
 800264a:	0089      	lsls	r1, r1, #2
 800264c:	430a      	orrs	r2, r1
 800264e:	619a      	str	r2, [r3, #24]
 8002650:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <HAL_ADC_MspInit+0x88>)
 8002652:	699a      	ldr	r2, [r3, #24]
 8002654:	2380      	movs	r3, #128	; 0x80
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4013      	ands	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
 800265c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800265e:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <HAL_ADC_MspInit+0x88>)
 8002660:	695a      	ldr	r2, [r3, #20]
 8002662:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <HAL_ADC_MspInit+0x88>)
 8002664:	2180      	movs	r1, #128	; 0x80
 8002666:	0289      	lsls	r1, r1, #10
 8002668:	430a      	orrs	r2, r1
 800266a:	615a      	str	r2, [r3, #20]
 800266c:	4b0e      	ldr	r3, [pc, #56]	; (80026a8 <HAL_ADC_MspInit+0x88>)
 800266e:	695a      	ldr	r2, [r3, #20]
 8002670:	2380      	movs	r3, #128	; 0x80
 8002672:	029b      	lsls	r3, r3, #10
 8002674:	4013      	ands	r3, r2
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800267a:	193b      	adds	r3, r7, r4
 800267c:	2201      	movs	r2, #1
 800267e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002680:	193b      	adds	r3, r7, r4
 8002682:	2203      	movs	r2, #3
 8002684:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	193b      	adds	r3, r7, r4
 8002688:	2200      	movs	r2, #0
 800268a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268c:	193a      	adds	r2, r7, r4
 800268e:	2390      	movs	r3, #144	; 0x90
 8002690:	05db      	lsls	r3, r3, #23
 8002692:	0011      	movs	r1, r2
 8002694:	0018      	movs	r0, r3
 8002696:	f000 ff49 	bl	800352c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	46bd      	mov	sp, r7
 800269e:	b00b      	add	sp, #44	; 0x2c
 80026a0:	bd90      	pop	{r4, r7, pc}
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	40012400 	.word	0x40012400
 80026a8:	40021000 	.word	0x40021000

080026ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026ac:	b590      	push	{r4, r7, lr}
 80026ae:	b08b      	sub	sp, #44	; 0x2c
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b4:	2414      	movs	r4, #20
 80026b6:	193b      	adds	r3, r7, r4
 80026b8:	0018      	movs	r0, r3
 80026ba:	2314      	movs	r3, #20
 80026bc:	001a      	movs	r2, r3
 80026be:	2100      	movs	r1, #0
 80026c0:	f003 f874 	bl	80057ac <memset>
  if(huart->Instance==USART3)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a20      	ldr	r2, [pc, #128]	; (800274c <HAL_UART_MspInit+0xa0>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d139      	bne.n	8002742 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80026ce:	4b20      	ldr	r3, [pc, #128]	; (8002750 <HAL_UART_MspInit+0xa4>)
 80026d0:	69da      	ldr	r2, [r3, #28]
 80026d2:	4b1f      	ldr	r3, [pc, #124]	; (8002750 <HAL_UART_MspInit+0xa4>)
 80026d4:	2180      	movs	r1, #128	; 0x80
 80026d6:	02c9      	lsls	r1, r1, #11
 80026d8:	430a      	orrs	r2, r1
 80026da:	61da      	str	r2, [r3, #28]
 80026dc:	4b1c      	ldr	r3, [pc, #112]	; (8002750 <HAL_UART_MspInit+0xa4>)
 80026de:	69da      	ldr	r2, [r3, #28]
 80026e0:	2380      	movs	r3, #128	; 0x80
 80026e2:	02db      	lsls	r3, r3, #11
 80026e4:	4013      	ands	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ea:	4b19      	ldr	r3, [pc, #100]	; (8002750 <HAL_UART_MspInit+0xa4>)
 80026ec:	695a      	ldr	r2, [r3, #20]
 80026ee:	4b18      	ldr	r3, [pc, #96]	; (8002750 <HAL_UART_MspInit+0xa4>)
 80026f0:	2180      	movs	r1, #128	; 0x80
 80026f2:	0309      	lsls	r1, r1, #12
 80026f4:	430a      	orrs	r2, r1
 80026f6:	615a      	str	r2, [r3, #20]
 80026f8:	4b15      	ldr	r3, [pc, #84]	; (8002750 <HAL_UART_MspInit+0xa4>)
 80026fa:	695a      	ldr	r2, [r3, #20]
 80026fc:	2380      	movs	r3, #128	; 0x80
 80026fe:	031b      	lsls	r3, r3, #12
 8002700:	4013      	ands	r3, r2
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC5     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = TX03_Pin|RX03_Pin;
 8002706:	0021      	movs	r1, r4
 8002708:	187b      	adds	r3, r7, r1
 800270a:	2230      	movs	r2, #48	; 0x30
 800270c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270e:	187b      	adds	r3, r7, r1
 8002710:	2202      	movs	r2, #2
 8002712:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002714:	187b      	adds	r3, r7, r1
 8002716:	2200      	movs	r2, #0
 8002718:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800271a:	187b      	adds	r3, r7, r1
 800271c:	2203      	movs	r2, #3
 800271e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8002720:	187b      	adds	r3, r7, r1
 8002722:	2201      	movs	r2, #1
 8002724:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002726:	187b      	adds	r3, r7, r1
 8002728:	4a0a      	ldr	r2, [pc, #40]	; (8002754 <HAL_UART_MspInit+0xa8>)
 800272a:	0019      	movs	r1, r3
 800272c:	0010      	movs	r0, r2
 800272e:	f000 fefd 	bl	800352c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8002732:	2200      	movs	r2, #0
 8002734:	2100      	movs	r1, #0
 8002736:	201d      	movs	r0, #29
 8002738:	f000 fe56 	bl	80033e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 800273c:	201d      	movs	r0, #29
 800273e:	f000 fe68 	bl	8003412 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002742:	46c0      	nop			; (mov r8, r8)
 8002744:	46bd      	mov	sp, r7
 8002746:	b00b      	add	sp, #44	; 0x2c
 8002748:	bd90      	pop	{r4, r7, pc}
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	40004800 	.word	0x40004800
 8002750:	40021000 	.word	0x40021000
 8002754:	48000800 	.word	0x48000800

08002758 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002758:	b5b0      	push	{r4, r5, r7, lr}
 800275a:	b08c      	sub	sp, #48	; 0x30
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002760:	2300      	movs	r3, #0
 8002762:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t              uwPrescalerValue = 0U;
 8002764:	2300      	movs	r3, #0
 8002766:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002768:	4b38      	ldr	r3, [pc, #224]	; (800284c <HAL_InitTick+0xf4>)
 800276a:	699a      	ldr	r2, [r3, #24]
 800276c:	4b37      	ldr	r3, [pc, #220]	; (800284c <HAL_InitTick+0xf4>)
 800276e:	2180      	movs	r1, #128	; 0x80
 8002770:	0109      	lsls	r1, r1, #4
 8002772:	430a      	orrs	r2, r1
 8002774:	619a      	str	r2, [r3, #24]
 8002776:	4b35      	ldr	r3, [pc, #212]	; (800284c <HAL_InitTick+0xf4>)
 8002778:	699a      	ldr	r2, [r3, #24]
 800277a:	2380      	movs	r3, #128	; 0x80
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	4013      	ands	r3, r2
 8002780:	60bb      	str	r3, [r7, #8]
 8002782:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002784:	230c      	movs	r3, #12
 8002786:	18fa      	adds	r2, r7, r3
 8002788:	2410      	movs	r4, #16
 800278a:	193b      	adds	r3, r7, r4
 800278c:	0011      	movs	r1, r2
 800278e:	0018      	movs	r0, r3
 8002790:	f001 fd62 	bl	8004258 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002794:	193b      	adds	r3, r7, r4
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	2b00      	cmp	r3, #0
 800279e:	d104      	bne.n	80027aa <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80027a0:	f001 fd44 	bl	800422c <HAL_RCC_GetPCLK1Freq>
 80027a4:	0003      	movs	r3, r0
 80027a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027a8:	e004      	b.n	80027b4 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80027aa:	f001 fd3f 	bl	800422c <HAL_RCC_GetPCLK1Freq>
 80027ae:	0003      	movs	r3, r0
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80027b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b6:	4926      	ldr	r1, [pc, #152]	; (8002850 <HAL_InitTick+0xf8>)
 80027b8:	0018      	movs	r0, r3
 80027ba:	f7fd fcc1 	bl	8000140 <__udivsi3>
 80027be:	0003      	movs	r3, r0
 80027c0:	3b01      	subs	r3, #1
 80027c2:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80027c4:	4b23      	ldr	r3, [pc, #140]	; (8002854 <HAL_InitTick+0xfc>)
 80027c6:	4a24      	ldr	r2, [pc, #144]	; (8002858 <HAL_InitTick+0x100>)
 80027c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80027ca:	4b22      	ldr	r3, [pc, #136]	; (8002854 <HAL_InitTick+0xfc>)
 80027cc:	4a23      	ldr	r2, [pc, #140]	; (800285c <HAL_InitTick+0x104>)
 80027ce:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80027d0:	4b20      	ldr	r3, [pc, #128]	; (8002854 <HAL_InitTick+0xfc>)
 80027d2:	6a3a      	ldr	r2, [r7, #32]
 80027d4:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 80027d6:	4b1f      	ldr	r3, [pc, #124]	; (8002854 <HAL_InitTick+0xfc>)
 80027d8:	2200      	movs	r2, #0
 80027da:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027dc:	4b1d      	ldr	r3, [pc, #116]	; (8002854 <HAL_InitTick+0xfc>)
 80027de:	2200      	movs	r2, #0
 80027e0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027e2:	4b1c      	ldr	r3, [pc, #112]	; (8002854 <HAL_InitTick+0xfc>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80027e8:	252b      	movs	r5, #43	; 0x2b
 80027ea:	197c      	adds	r4, r7, r5
 80027ec:	4b19      	ldr	r3, [pc, #100]	; (8002854 <HAL_InitTick+0xfc>)
 80027ee:	0018      	movs	r0, r3
 80027f0:	f001 fd5c 	bl	80042ac <HAL_TIM_Base_Init>
 80027f4:	0003      	movs	r3, r0
 80027f6:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80027f8:	197b      	adds	r3, r7, r5
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d11e      	bne.n	800283e <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002800:	197c      	adds	r4, r7, r5
 8002802:	4b14      	ldr	r3, [pc, #80]	; (8002854 <HAL_InitTick+0xfc>)
 8002804:	0018      	movs	r0, r3
 8002806:	f001 fda9 	bl	800435c <HAL_TIM_Base_Start_IT>
 800280a:	0003      	movs	r3, r0
 800280c:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 800280e:	197b      	adds	r3, r7, r5
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d113      	bne.n	800283e <HAL_InitTick+0xe6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8002816:	200d      	movs	r0, #13
 8002818:	f000 fdfb 	bl	8003412 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b03      	cmp	r3, #3
 8002820:	d809      	bhi.n	8002836 <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	0019      	movs	r1, r3
 8002828:	200d      	movs	r0, #13
 800282a:	f000 fddd 	bl	80033e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800282e:	4b0c      	ldr	r3, [pc, #48]	; (8002860 <HAL_InitTick+0x108>)
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	e003      	b.n	800283e <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 8002836:	232b      	movs	r3, #43	; 0x2b
 8002838:	18fb      	adds	r3, r7, r3
 800283a:	2201      	movs	r2, #1
 800283c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 800283e:	232b      	movs	r3, #43	; 0x2b
 8002840:	18fb      	adds	r3, r7, r3
 8002842:	781b      	ldrb	r3, [r3, #0]
}
 8002844:	0018      	movs	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	b00c      	add	sp, #48	; 0x30
 800284a:	bdb0      	pop	{r4, r5, r7, pc}
 800284c:	40021000 	.word	0x40021000
 8002850:	000f4240 	.word	0x000f4240
 8002854:	200002c0 	.word	0x200002c0
 8002858:	40012c00 	.word	0x40012c00
 800285c:	000003e7 	.word	0x000003e7
 8002860:	20000004 	.word	0x20000004

08002864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002868:	e7fe      	b.n	8002868 <NMI_Handler+0x4>

0800286a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800286e:	e7fe      	b.n	800286e <HardFault_Handler+0x4>

08002870 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002874:	46c0      	nop			; (mov r8, r8)
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002888:	46c0      	nop			; (mov r8, r8)
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
	...

08002890 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002894:	4b03      	ldr	r3, [pc, #12]	; (80028a4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8002896:	0018      	movs	r0, r3
 8002898:	f001 fdb2 	bl	8004400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 800289c:	46c0      	nop			; (mov r8, r8)
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	46c0      	nop			; (mov r8, r8)
 80028a4:	200002c0 	.word	0x200002c0

080028a8 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80028ac:	4b03      	ldr	r3, [pc, #12]	; (80028bc <USART3_4_IRQHandler+0x14>)
 80028ae:	0018      	movs	r0, r3
 80028b0:	f002 f86a 	bl	8004988 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 80028b4:	46c0      	nop			; (mov r8, r8)
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	46c0      	nop			; (mov r8, r8)
 80028bc:	2000023c 	.word	0x2000023c

080028c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
	return 1;
 80028c4:	2301      	movs	r3, #1
}
 80028c6:	0018      	movs	r0, r3
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <_kill>:

int _kill(int pid, int sig)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80028d6:	f002 ff3f 	bl	8005758 <__errno>
 80028da:	0003      	movs	r3, r0
 80028dc:	2216      	movs	r2, #22
 80028de:	601a      	str	r2, [r3, #0]
	return -1;
 80028e0:	2301      	movs	r3, #1
 80028e2:	425b      	negs	r3, r3
}
 80028e4:	0018      	movs	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	b002      	add	sp, #8
 80028ea:	bd80      	pop	{r7, pc}

080028ec <_exit>:

void _exit (int status)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80028f4:	2301      	movs	r3, #1
 80028f6:	425a      	negs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	0011      	movs	r1, r2
 80028fc:	0018      	movs	r0, r3
 80028fe:	f7ff ffe5 	bl	80028cc <_kill>
	while (1) {}		/* Make sure we hang here */
 8002902:	e7fe      	b.n	8002902 <_exit+0x16>

08002904 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]
 8002914:	e00a      	b.n	800292c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002916:	e000      	b.n	800291a <_read+0x16>
 8002918:	bf00      	nop
 800291a:	0001      	movs	r1, r0
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	1c5a      	adds	r2, r3, #1
 8002920:	60ba      	str	r2, [r7, #8]
 8002922:	b2ca      	uxtb	r2, r1
 8002924:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	3301      	adds	r3, #1
 800292a:	617b      	str	r3, [r7, #20]
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	429a      	cmp	r2, r3
 8002932:	dbf0      	blt.n	8002916 <_read+0x12>
	}

return len;
 8002934:	687b      	ldr	r3, [r7, #4]
}
 8002936:	0018      	movs	r0, r3
 8002938:	46bd      	mov	sp, r7
 800293a:	b006      	add	sp, #24
 800293c:	bd80      	pop	{r7, pc}

0800293e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b086      	sub	sp, #24
 8002942:	af00      	add	r7, sp, #0
 8002944:	60f8      	str	r0, [r7, #12]
 8002946:	60b9      	str	r1, [r7, #8]
 8002948:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	e009      	b.n	8002964 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	1c5a      	adds	r2, r3, #1
 8002954:	60ba      	str	r2, [r7, #8]
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	0018      	movs	r0, r3
 800295a:	e000      	b.n	800295e <_write+0x20>
 800295c:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	3301      	adds	r3, #1
 8002962:	617b      	str	r3, [r7, #20]
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	429a      	cmp	r2, r3
 800296a:	dbf1      	blt.n	8002950 <_write+0x12>
	}
	return len;
 800296c:	687b      	ldr	r3, [r7, #4]
}
 800296e:	0018      	movs	r0, r3
 8002970:	46bd      	mov	sp, r7
 8002972:	b006      	add	sp, #24
 8002974:	bd80      	pop	{r7, pc}

08002976 <_close>:

int _close(int file)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b082      	sub	sp, #8
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
	return -1;
 800297e:	2301      	movs	r3, #1
 8002980:	425b      	negs	r3, r3
}
 8002982:	0018      	movs	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	b002      	add	sp, #8
 8002988:	bd80      	pop	{r7, pc}

0800298a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
 8002992:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	2280      	movs	r2, #128	; 0x80
 8002998:	0192      	lsls	r2, r2, #6
 800299a:	605a      	str	r2, [r3, #4]
	return 0;
 800299c:	2300      	movs	r3, #0
}
 800299e:	0018      	movs	r0, r3
 80029a0:	46bd      	mov	sp, r7
 80029a2:	b002      	add	sp, #8
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <_isatty>:

int _isatty(int file)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
	return 1;
 80029ae:	2301      	movs	r3, #1
}
 80029b0:	0018      	movs	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	b002      	add	sp, #8
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
	return 0;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	0018      	movs	r0, r3
 80029c8:	46bd      	mov	sp, r7
 80029ca:	b004      	add	sp, #16
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029d8:	4a14      	ldr	r2, [pc, #80]	; (8002a2c <_sbrk+0x5c>)
 80029da:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <_sbrk+0x60>)
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029e4:	4b13      	ldr	r3, [pc, #76]	; (8002a34 <_sbrk+0x64>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d102      	bne.n	80029f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029ec:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <_sbrk+0x64>)
 80029ee:	4a12      	ldr	r2, [pc, #72]	; (8002a38 <_sbrk+0x68>)
 80029f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029f2:	4b10      	ldr	r3, [pc, #64]	; (8002a34 <_sbrk+0x64>)
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	18d3      	adds	r3, r2, r3
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d207      	bcs.n	8002a10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a00:	f002 feaa 	bl	8005758 <__errno>
 8002a04:	0003      	movs	r3, r0
 8002a06:	220c      	movs	r2, #12
 8002a08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	425b      	negs	r3, r3
 8002a0e:	e009      	b.n	8002a24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a10:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <_sbrk+0x64>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a16:	4b07      	ldr	r3, [pc, #28]	; (8002a34 <_sbrk+0x64>)
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	18d2      	adds	r2, r2, r3
 8002a1e:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <_sbrk+0x64>)
 8002a20:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002a22:	68fb      	ldr	r3, [r7, #12]
}
 8002a24:	0018      	movs	r0, r3
 8002a26:	46bd      	mov	sp, r7
 8002a28:	b006      	add	sp, #24
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	20004000 	.word	0x20004000
 8002a30:	00000400 	.word	0x00000400
 8002a34:	20000308 	.word	0x20000308
 8002a38:	20000320 	.word	0x20000320

08002a3c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002a40:	46c0      	nop			; (mov r8, r8)
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a48:	480d      	ldr	r0, [pc, #52]	; (8002a80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a4a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a4c:	480d      	ldr	r0, [pc, #52]	; (8002a84 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a4e:	490e      	ldr	r1, [pc, #56]	; (8002a88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a50:	4a0e      	ldr	r2, [pc, #56]	; (8002a8c <LoopForever+0xe>)
  movs r3, #0
 8002a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a54:	e002      	b.n	8002a5c <LoopCopyDataInit>

08002a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a5a:	3304      	adds	r3, #4

08002a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a60:	d3f9      	bcc.n	8002a56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a62:	4a0b      	ldr	r2, [pc, #44]	; (8002a90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a64:	4c0b      	ldr	r4, [pc, #44]	; (8002a94 <LoopForever+0x16>)
  movs r3, #0
 8002a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a68:	e001      	b.n	8002a6e <LoopFillZerobss>

08002a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a6c:	3204      	adds	r2, #4

08002a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a70:	d3fb      	bcc.n	8002a6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002a72:	f7ff ffe3 	bl	8002a3c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002a76:	f002 fe75 	bl	8005764 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a7a:	f7ff fc6b 	bl	8002354 <main>

08002a7e <LoopForever>:

LoopForever:
    b LoopForever
 8002a7e:	e7fe      	b.n	8002a7e <LoopForever>
  ldr   r0, =_estack
 8002a80:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002a84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a88:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002a8c:	0800a78c 	.word	0x0800a78c
  ldr r2, =_sbss
 8002a90:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002a94:	20000320 	.word	0x20000320

08002a98 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a98:	e7fe      	b.n	8002a98 <ADC1_COMP_IRQHandler>
	...

08002a9c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002aa0:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <HAL_Init+0x24>)
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <HAL_Init+0x24>)
 8002aa6:	2110      	movs	r1, #16
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002aac:	2003      	movs	r0, #3
 8002aae:	f7ff fe53 	bl	8002758 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ab2:	f7ff fd91 	bl	80025d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	0018      	movs	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	40022000 	.word	0x40022000

08002ac4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ac8:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <HAL_IncTick+0x1c>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	001a      	movs	r2, r3
 8002ace:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <HAL_IncTick+0x20>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	18d2      	adds	r2, r2, r3
 8002ad4:	4b03      	ldr	r3, [pc, #12]	; (8002ae4 <HAL_IncTick+0x20>)
 8002ad6:	601a      	str	r2, [r3, #0]
}
 8002ad8:	46c0      	nop			; (mov r8, r8)
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	20000008 	.word	0x20000008
 8002ae4:	2000030c 	.word	0x2000030c

08002ae8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  return uwTick;
 8002aec:	4b02      	ldr	r3, [pc, #8]	; (8002af8 <HAL_GetTick+0x10>)
 8002aee:	681b      	ldr	r3, [r3, #0]
}
 8002af0:	0018      	movs	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	2000030c 	.word	0x2000030c

08002afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b04:	f7ff fff0 	bl	8002ae8 <HAL_GetTick>
 8002b08:	0003      	movs	r3, r0
 8002b0a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	3301      	adds	r3, #1
 8002b14:	d005      	beq.n	8002b22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b16:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <HAL_Delay+0x44>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	001a      	movs	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	189b      	adds	r3, r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	f7ff ffe0 	bl	8002ae8 <HAL_GetTick>
 8002b28:	0002      	movs	r2, r0
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d8f7      	bhi.n	8002b24 <HAL_Delay+0x28>
  {
  }
}
 8002b34:	46c0      	nop			; (mov r8, r8)
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	b004      	add	sp, #16
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	20000008 	.word	0x20000008

08002b44 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b4c:	230f      	movs	r3, #15
 8002b4e:	18fb      	adds	r3, r7, r3
 8002b50:	2200      	movs	r2, #0
 8002b52:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e125      	b.n	8002dae <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10a      	bne.n	8002b80 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2234      	movs	r2, #52	; 0x34
 8002b74:	2100      	movs	r1, #0
 8002b76:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f7ff fd50 	bl	8002620 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b84:	2210      	movs	r2, #16
 8002b86:	4013      	ands	r3, r2
 8002b88:	d000      	beq.n	8002b8c <HAL_ADC_Init+0x48>
 8002b8a:	e103      	b.n	8002d94 <HAL_ADC_Init+0x250>
 8002b8c:	230f      	movs	r3, #15
 8002b8e:	18fb      	adds	r3, r7, r3
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d000      	beq.n	8002b98 <HAL_ADC_Init+0x54>
 8002b96:	e0fd      	b.n	8002d94 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	2204      	movs	r2, #4
 8002ba0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002ba2:	d000      	beq.n	8002ba6 <HAL_ADC_Init+0x62>
 8002ba4:	e0f6      	b.n	8002d94 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002baa:	4a83      	ldr	r2, [pc, #524]	; (8002db8 <HAL_ADC_Init+0x274>)
 8002bac:	4013      	ands	r3, r2
 8002bae:	2202      	movs	r2, #2
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d112      	bne.n	8002bea <HAL_ADC_Init+0xa6>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	4013      	ands	r3, r2
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d009      	beq.n	8002be6 <HAL_ADC_Init+0xa2>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68da      	ldr	r2, [r3, #12]
 8002bd8:	2380      	movs	r3, #128	; 0x80
 8002bda:	021b      	lsls	r3, r3, #8
 8002bdc:	401a      	ands	r2, r3
 8002bde:	2380      	movs	r3, #128	; 0x80
 8002be0:	021b      	lsls	r3, r3, #8
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d101      	bne.n	8002bea <HAL_ADC_Init+0xa6>
 8002be6:	2301      	movs	r3, #1
 8002be8:	e000      	b.n	8002bec <HAL_ADC_Init+0xa8>
 8002bea:	2300      	movs	r3, #0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d116      	bne.n	8002c1e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	2218      	movs	r2, #24
 8002bf8:	4393      	bics	r3, r2
 8002bfa:	0019      	movs	r1, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	0899      	lsrs	r1, r3, #2
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4964      	ldr	r1, [pc, #400]	; (8002dbc <HAL_ADC_Init+0x278>)
 8002c2a:	400a      	ands	r2, r1
 8002c2c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	7e1b      	ldrb	r3, [r3, #24]
 8002c32:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	7e5b      	ldrb	r3, [r3, #25]
 8002c38:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c3a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	7e9b      	ldrb	r3, [r3, #26]
 8002c40:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002c42:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d002      	beq.n	8002c52 <HAL_ADC_Init+0x10e>
 8002c4c:	2380      	movs	r3, #128	; 0x80
 8002c4e:	015b      	lsls	r3, r3, #5
 8002c50:	e000      	b.n	8002c54 <HAL_ADC_Init+0x110>
 8002c52:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002c54:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002c5a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d101      	bne.n	8002c68 <HAL_ADC_Init+0x124>
 8002c64:	2304      	movs	r3, #4
 8002c66:	e000      	b.n	8002c6a <HAL_ADC_Init+0x126>
 8002c68:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002c6a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2124      	movs	r1, #36	; 0x24
 8002c70:	5c5b      	ldrb	r3, [r3, r1]
 8002c72:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002c74:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	7edb      	ldrb	r3, [r3, #27]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d115      	bne.n	8002cb0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	7e9b      	ldrb	r3, [r3, #26]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d105      	bne.n	8002c98 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	2280      	movs	r2, #128	; 0x80
 8002c90:	0252      	lsls	r2, r2, #9
 8002c92:	4313      	orrs	r3, r2
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	e00b      	b.n	8002cb0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca8:	2201      	movs	r2, #1
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69da      	ldr	r2, [r3, #28]
 8002cb4:	23c2      	movs	r3, #194	; 0xc2
 8002cb6:	33ff      	adds	r3, #255	; 0xff
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d007      	beq.n	8002ccc <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68d9      	ldr	r1, [r3, #12]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce0:	2380      	movs	r3, #128	; 0x80
 8002ce2:	055b      	lsls	r3, r3, #21
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d01b      	beq.n	8002d20 <HAL_ADC_Init+0x1dc>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d017      	beq.n	8002d20 <HAL_ADC_Init+0x1dc>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d013      	beq.n	8002d20 <HAL_ADC_Init+0x1dc>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	d00f      	beq.n	8002d20 <HAL_ADC_Init+0x1dc>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	d00b      	beq.n	8002d20 <HAL_ADC_Init+0x1dc>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0c:	2b05      	cmp	r3, #5
 8002d0e:	d007      	beq.n	8002d20 <HAL_ADC_Init+0x1dc>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d14:	2b06      	cmp	r3, #6
 8002d16:	d003      	beq.n	8002d20 <HAL_ADC_Init+0x1dc>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1c:	2b07      	cmp	r3, #7
 8002d1e:	d112      	bne.n	8002d46 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695a      	ldr	r2, [r3, #20]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2107      	movs	r1, #7
 8002d2c:	438a      	bics	r2, r1
 8002d2e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6959      	ldr	r1, [r3, #20]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3a:	2207      	movs	r2, #7
 8002d3c:	401a      	ands	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	4a1c      	ldr	r2, [pc, #112]	; (8002dc0 <HAL_ADC_Init+0x27c>)
 8002d4e:	4013      	ands	r3, r2
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d10b      	bne.n	8002d6e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d60:	2203      	movs	r2, #3
 8002d62:	4393      	bics	r3, r2
 8002d64:	2201      	movs	r2, #1
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002d6c:	e01c      	b.n	8002da8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d72:	2212      	movs	r2, #18
 8002d74:	4393      	bics	r3, r2
 8002d76:	2210      	movs	r2, #16
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d82:	2201      	movs	r2, #1
 8002d84:	431a      	orrs	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002d8a:	230f      	movs	r3, #15
 8002d8c:	18fb      	adds	r3, r7, r3
 8002d8e:	2201      	movs	r2, #1
 8002d90:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002d92:	e009      	b.n	8002da8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d98:	2210      	movs	r2, #16
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002da0:	230f      	movs	r3, #15
 8002da2:	18fb      	adds	r3, r7, r3
 8002da4:	2201      	movs	r2, #1
 8002da6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002da8:	230f      	movs	r3, #15
 8002daa:	18fb      	adds	r3, r7, r3
 8002dac:	781b      	ldrb	r3, [r3, #0]
}
 8002dae:	0018      	movs	r0, r3
 8002db0:	46bd      	mov	sp, r7
 8002db2:	b004      	add	sp, #16
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	fffffefd 	.word	0xfffffefd
 8002dbc:	fffe0219 	.word	0xfffe0219
 8002dc0:	833fffe7 	.word	0x833fffe7

08002dc4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002dc4:	b590      	push	{r4, r7, lr}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dcc:	230f      	movs	r3, #15
 8002dce:	18fb      	adds	r3, r7, r3
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	2204      	movs	r2, #4
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d138      	bne.n	8002e52 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2234      	movs	r2, #52	; 0x34
 8002de4:	5c9b      	ldrb	r3, [r3, r2]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d101      	bne.n	8002dee <HAL_ADC_Start+0x2a>
 8002dea:	2302      	movs	r3, #2
 8002dec:	e038      	b.n	8002e60 <HAL_ADC_Start+0x9c>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2234      	movs	r2, #52	; 0x34
 8002df2:	2101      	movs	r1, #1
 8002df4:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	7e5b      	ldrb	r3, [r3, #25]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d007      	beq.n	8002e0e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002dfe:	230f      	movs	r3, #15
 8002e00:	18fc      	adds	r4, r7, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	0018      	movs	r0, r3
 8002e06:	f000 f9e3 	bl	80031d0 <ADC_Enable>
 8002e0a:	0003      	movs	r3, r0
 8002e0c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002e0e:	230f      	movs	r3, #15
 8002e10:	18fb      	adds	r3, r7, r3
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d120      	bne.n	8002e5a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1c:	4a12      	ldr	r2, [pc, #72]	; (8002e68 <HAL_ADC_Start+0xa4>)
 8002e1e:	4013      	ands	r3, r2
 8002e20:	2280      	movs	r2, #128	; 0x80
 8002e22:	0052      	lsls	r2, r2, #1
 8002e24:	431a      	orrs	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2234      	movs	r2, #52	; 0x34
 8002e34:	2100      	movs	r1, #0
 8002e36:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	221c      	movs	r2, #28
 8002e3e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689a      	ldr	r2, [r3, #8]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2104      	movs	r1, #4
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	609a      	str	r2, [r3, #8]
 8002e50:	e003      	b.n	8002e5a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002e52:	230f      	movs	r3, #15
 8002e54:	18fb      	adds	r3, r7, r3
 8002e56:	2202      	movs	r2, #2
 8002e58:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e5a:	230f      	movs	r3, #15
 8002e5c:	18fb      	adds	r3, r7, r3
 8002e5e:	781b      	ldrb	r3, [r3, #0]
}
 8002e60:	0018      	movs	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b005      	add	sp, #20
 8002e66:	bd90      	pop	{r4, r7, pc}
 8002e68:	fffff0fe 	.word	0xfffff0fe

08002e6c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	2b08      	cmp	r3, #8
 8002e7c:	d102      	bne.n	8002e84 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002e7e:	2308      	movs	r3, #8
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	e014      	b.n	8002eae <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d10b      	bne.n	8002eaa <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e96:	2220      	movs	r2, #32
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2234      	movs	r2, #52	; 0x34
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e071      	b.n	8002f8e <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002eaa:	230c      	movs	r3, #12
 8002eac:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002eae:	f7ff fe1b 	bl	8002ae8 <HAL_GetTick>
 8002eb2:	0003      	movs	r3, r0
 8002eb4:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002eb6:	e01f      	b.n	8002ef8 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	d01c      	beq.n	8002ef8 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d007      	beq.n	8002ed4 <HAL_ADC_PollForConversion+0x68>
 8002ec4:	f7ff fe10 	bl	8002ae8 <HAL_GetTick>
 8002ec8:	0002      	movs	r2, r0
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d211      	bcs.n	8002ef8 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	4013      	ands	r3, r2
 8002ede:	d10b      	bne.n	8002ef8 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee4:	2204      	movs	r2, #4
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2234      	movs	r2, #52	; 0x34
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e04a      	b.n	8002f8e <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	4013      	ands	r3, r2
 8002f02:	d0d9      	beq.n	8002eb8 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f08:	2280      	movs	r2, #128	; 0x80
 8002f0a:	0092      	lsls	r2, r2, #2
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68da      	ldr	r2, [r3, #12]
 8002f18:	23c0      	movs	r3, #192	; 0xc0
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	d12d      	bne.n	8002f7c <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d129      	bne.n	8002f7c <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2208      	movs	r2, #8
 8002f30:	4013      	ands	r3, r2
 8002f32:	2b08      	cmp	r3, #8
 8002f34:	d122      	bne.n	8002f7c <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	2204      	movs	r2, #4
 8002f3e:	4013      	ands	r3, r2
 8002f40:	d110      	bne.n	8002f64 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	210c      	movs	r1, #12
 8002f4e:	438a      	bics	r2, r1
 8002f50:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f56:	4a10      	ldr	r2, [pc, #64]	; (8002f98 <HAL_ADC_PollForConversion+0x12c>)
 8002f58:	4013      	ands	r3, r2
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	639a      	str	r2, [r3, #56]	; 0x38
 8002f62:	e00b      	b.n	8002f7c <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f68:	2220      	movs	r2, #32
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f74:	2201      	movs	r2, #1
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	7e1b      	ldrb	r3, [r3, #24]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d103      	bne.n	8002f8c <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	220c      	movs	r2, #12
 8002f8a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	0018      	movs	r0, r3
 8002f90:	46bd      	mov	sp, r7
 8002f92:	b004      	add	sp, #16
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	46c0      	nop			; (mov r8, r8)
 8002f98:	fffffefe 	.word	0xfffffefe

08002f9c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002faa:	0018      	movs	r0, r3
 8002fac:	46bd      	mov	sp, r7
 8002fae:	b002      	add	sp, #8
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fbe:	230f      	movs	r3, #15
 8002fc0:	18fb      	adds	r3, r7, r3
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fce:	2380      	movs	r3, #128	; 0x80
 8002fd0:	055b      	lsls	r3, r3, #21
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d011      	beq.n	8002ffa <HAL_ADC_ConfigChannel+0x46>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d00d      	beq.n	8002ffa <HAL_ADC_ConfigChannel+0x46>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d009      	beq.n	8002ffa <HAL_ADC_ConfigChannel+0x46>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fea:	2b03      	cmp	r3, #3
 8002fec:	d005      	beq.n	8002ffa <HAL_ADC_ConfigChannel+0x46>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d001      	beq.n	8002ffa <HAL_ADC_ConfigChannel+0x46>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2234      	movs	r2, #52	; 0x34
 8002ffe:	5c9b      	ldrb	r3, [r3, r2]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d101      	bne.n	8003008 <HAL_ADC_ConfigChannel+0x54>
 8003004:	2302      	movs	r3, #2
 8003006:	e0d0      	b.n	80031aa <HAL_ADC_ConfigChannel+0x1f6>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2234      	movs	r2, #52	; 0x34
 800300c:	2101      	movs	r1, #1
 800300e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	2204      	movs	r2, #4
 8003018:	4013      	ands	r3, r2
 800301a:	d000      	beq.n	800301e <HAL_ADC_ConfigChannel+0x6a>
 800301c:	e0b4      	b.n	8003188 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	4a64      	ldr	r2, [pc, #400]	; (80031b4 <HAL_ADC_ConfigChannel+0x200>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d100      	bne.n	800302a <HAL_ADC_ConfigChannel+0x76>
 8003028:	e082      	b.n	8003130 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2201      	movs	r2, #1
 8003036:	409a      	lsls	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003044:	2380      	movs	r3, #128	; 0x80
 8003046:	055b      	lsls	r3, r3, #21
 8003048:	429a      	cmp	r2, r3
 800304a:	d037      	beq.n	80030bc <HAL_ADC_ConfigChannel+0x108>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	2b01      	cmp	r3, #1
 8003052:	d033      	beq.n	80030bc <HAL_ADC_ConfigChannel+0x108>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003058:	2b02      	cmp	r3, #2
 800305a:	d02f      	beq.n	80030bc <HAL_ADC_ConfigChannel+0x108>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003060:	2b03      	cmp	r3, #3
 8003062:	d02b      	beq.n	80030bc <HAL_ADC_ConfigChannel+0x108>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003068:	2b04      	cmp	r3, #4
 800306a:	d027      	beq.n	80030bc <HAL_ADC_ConfigChannel+0x108>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003070:	2b05      	cmp	r3, #5
 8003072:	d023      	beq.n	80030bc <HAL_ADC_ConfigChannel+0x108>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003078:	2b06      	cmp	r3, #6
 800307a:	d01f      	beq.n	80030bc <HAL_ADC_ConfigChannel+0x108>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003080:	2b07      	cmp	r3, #7
 8003082:	d01b      	beq.n	80030bc <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	2107      	movs	r1, #7
 8003090:	400b      	ands	r3, r1
 8003092:	429a      	cmp	r2, r3
 8003094:	d012      	beq.n	80030bc <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695a      	ldr	r2, [r3, #20]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2107      	movs	r1, #7
 80030a2:	438a      	bics	r2, r1
 80030a4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6959      	ldr	r1, [r3, #20]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	2207      	movs	r2, #7
 80030b2:	401a      	ands	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b10      	cmp	r3, #16
 80030c2:	d007      	beq.n	80030d4 <HAL_ADC_ConfigChannel+0x120>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b11      	cmp	r3, #17
 80030ca:	d003      	beq.n	80030d4 <HAL_ADC_ConfigChannel+0x120>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2b12      	cmp	r3, #18
 80030d2:	d163      	bne.n	800319c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80030d4:	4b38      	ldr	r3, [pc, #224]	; (80031b8 <HAL_ADC_ConfigChannel+0x204>)
 80030d6:	6819      	ldr	r1, [r3, #0]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b10      	cmp	r3, #16
 80030de:	d009      	beq.n	80030f4 <HAL_ADC_ConfigChannel+0x140>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b11      	cmp	r3, #17
 80030e6:	d102      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x13a>
 80030e8:	2380      	movs	r3, #128	; 0x80
 80030ea:	03db      	lsls	r3, r3, #15
 80030ec:	e004      	b.n	80030f8 <HAL_ADC_ConfigChannel+0x144>
 80030ee:	2380      	movs	r3, #128	; 0x80
 80030f0:	045b      	lsls	r3, r3, #17
 80030f2:	e001      	b.n	80030f8 <HAL_ADC_ConfigChannel+0x144>
 80030f4:	2380      	movs	r3, #128	; 0x80
 80030f6:	041b      	lsls	r3, r3, #16
 80030f8:	4a2f      	ldr	r2, [pc, #188]	; (80031b8 <HAL_ADC_ConfigChannel+0x204>)
 80030fa:	430b      	orrs	r3, r1
 80030fc:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2b10      	cmp	r3, #16
 8003104:	d14a      	bne.n	800319c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003106:	4b2d      	ldr	r3, [pc, #180]	; (80031bc <HAL_ADC_ConfigChannel+0x208>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	492d      	ldr	r1, [pc, #180]	; (80031c0 <HAL_ADC_ConfigChannel+0x20c>)
 800310c:	0018      	movs	r0, r3
 800310e:	f7fd f817 	bl	8000140 <__udivsi3>
 8003112:	0003      	movs	r3, r0
 8003114:	001a      	movs	r2, r3
 8003116:	0013      	movs	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	189b      	adds	r3, r3, r2
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003120:	e002      	b.n	8003128 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	3b01      	subs	r3, #1
 8003126:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f9      	bne.n	8003122 <HAL_ADC_ConfigChannel+0x16e>
 800312e:	e035      	b.n	800319c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2101      	movs	r1, #1
 800313c:	4099      	lsls	r1, r3
 800313e:	000b      	movs	r3, r1
 8003140:	43d9      	mvns	r1, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	400a      	ands	r2, r1
 8003148:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2b10      	cmp	r3, #16
 8003150:	d007      	beq.n	8003162 <HAL_ADC_ConfigChannel+0x1ae>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2b11      	cmp	r3, #17
 8003158:	d003      	beq.n	8003162 <HAL_ADC_ConfigChannel+0x1ae>
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2b12      	cmp	r3, #18
 8003160:	d11c      	bne.n	800319c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003162:	4b15      	ldr	r3, [pc, #84]	; (80031b8 <HAL_ADC_ConfigChannel+0x204>)
 8003164:	6819      	ldr	r1, [r3, #0]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b10      	cmp	r3, #16
 800316c:	d007      	beq.n	800317e <HAL_ADC_ConfigChannel+0x1ca>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2b11      	cmp	r3, #17
 8003174:	d101      	bne.n	800317a <HAL_ADC_ConfigChannel+0x1c6>
 8003176:	4b13      	ldr	r3, [pc, #76]	; (80031c4 <HAL_ADC_ConfigChannel+0x210>)
 8003178:	e002      	b.n	8003180 <HAL_ADC_ConfigChannel+0x1cc>
 800317a:	4b13      	ldr	r3, [pc, #76]	; (80031c8 <HAL_ADC_ConfigChannel+0x214>)
 800317c:	e000      	b.n	8003180 <HAL_ADC_ConfigChannel+0x1cc>
 800317e:	4b13      	ldr	r3, [pc, #76]	; (80031cc <HAL_ADC_ConfigChannel+0x218>)
 8003180:	4a0d      	ldr	r2, [pc, #52]	; (80031b8 <HAL_ADC_ConfigChannel+0x204>)
 8003182:	400b      	ands	r3, r1
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	e009      	b.n	800319c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318c:	2220      	movs	r2, #32
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003194:	230f      	movs	r3, #15
 8003196:	18fb      	adds	r3, r7, r3
 8003198:	2201      	movs	r2, #1
 800319a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2234      	movs	r2, #52	; 0x34
 80031a0:	2100      	movs	r1, #0
 80031a2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80031a4:	230f      	movs	r3, #15
 80031a6:	18fb      	adds	r3, r7, r3
 80031a8:	781b      	ldrb	r3, [r3, #0]
}
 80031aa:	0018      	movs	r0, r3
 80031ac:	46bd      	mov	sp, r7
 80031ae:	b004      	add	sp, #16
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	00001001 	.word	0x00001001
 80031b8:	40012708 	.word	0x40012708
 80031bc:	20000000 	.word	0x20000000
 80031c0:	000f4240 	.word	0x000f4240
 80031c4:	ffbfffff 	.word	0xffbfffff
 80031c8:	feffffff 	.word	0xfeffffff
 80031cc:	ff7fffff 	.word	0xff7fffff

080031d0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031d8:	2300      	movs	r3, #0
 80031da:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	2203      	movs	r2, #3
 80031e8:	4013      	ands	r3, r2
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d112      	bne.n	8003214 <ADC_Enable+0x44>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2201      	movs	r2, #1
 80031f6:	4013      	ands	r3, r2
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d009      	beq.n	8003210 <ADC_Enable+0x40>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	2380      	movs	r3, #128	; 0x80
 8003204:	021b      	lsls	r3, r3, #8
 8003206:	401a      	ands	r2, r3
 8003208:	2380      	movs	r3, #128	; 0x80
 800320a:	021b      	lsls	r3, r3, #8
 800320c:	429a      	cmp	r2, r3
 800320e:	d101      	bne.n	8003214 <ADC_Enable+0x44>
 8003210:	2301      	movs	r3, #1
 8003212:	e000      	b.n	8003216 <ADC_Enable+0x46>
 8003214:	2300      	movs	r3, #0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d152      	bne.n	80032c0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	4a2a      	ldr	r2, [pc, #168]	; (80032cc <ADC_Enable+0xfc>)
 8003222:	4013      	ands	r3, r2
 8003224:	d00d      	beq.n	8003242 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322a:	2210      	movs	r2, #16
 800322c:	431a      	orrs	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003236:	2201      	movs	r2, #1
 8003238:	431a      	orrs	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e03f      	b.n	80032c2 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2101      	movs	r1, #1
 800324e:	430a      	orrs	r2, r1
 8003250:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003252:	4b1f      	ldr	r3, [pc, #124]	; (80032d0 <ADC_Enable+0x100>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	491f      	ldr	r1, [pc, #124]	; (80032d4 <ADC_Enable+0x104>)
 8003258:	0018      	movs	r0, r3
 800325a:	f7fc ff71 	bl	8000140 <__udivsi3>
 800325e:	0003      	movs	r3, r0
 8003260:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003262:	e002      	b.n	800326a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	3b01      	subs	r3, #1
 8003268:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1f9      	bne.n	8003264 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003270:	f7ff fc3a 	bl	8002ae8 <HAL_GetTick>
 8003274:	0003      	movs	r3, r0
 8003276:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003278:	e01b      	b.n	80032b2 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800327a:	f7ff fc35 	bl	8002ae8 <HAL_GetTick>
 800327e:	0002      	movs	r2, r0
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d914      	bls.n	80032b2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2201      	movs	r2, #1
 8003290:	4013      	ands	r3, r2
 8003292:	2b01      	cmp	r3, #1
 8003294:	d00d      	beq.n	80032b2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329a:	2210      	movs	r2, #16
 800329c:	431a      	orrs	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a6:	2201      	movs	r2, #1
 80032a8:	431a      	orrs	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e007      	b.n	80032c2 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2201      	movs	r2, #1
 80032ba:	4013      	ands	r3, r2
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d1dc      	bne.n	800327a <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	0018      	movs	r0, r3
 80032c4:	46bd      	mov	sp, r7
 80032c6:	b004      	add	sp, #16
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	46c0      	nop			; (mov r8, r8)
 80032cc:	80000017 	.word	0x80000017
 80032d0:	20000000 	.word	0x20000000
 80032d4:	000f4240 	.word	0x000f4240

080032d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	0002      	movs	r2, r0
 80032e0:	1dfb      	adds	r3, r7, #7
 80032e2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80032e4:	1dfb      	adds	r3, r7, #7
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b7f      	cmp	r3, #127	; 0x7f
 80032ea:	d809      	bhi.n	8003300 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ec:	1dfb      	adds	r3, r7, #7
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	001a      	movs	r2, r3
 80032f2:	231f      	movs	r3, #31
 80032f4:	401a      	ands	r2, r3
 80032f6:	4b04      	ldr	r3, [pc, #16]	; (8003308 <__NVIC_EnableIRQ+0x30>)
 80032f8:	2101      	movs	r1, #1
 80032fa:	4091      	lsls	r1, r2
 80032fc:	000a      	movs	r2, r1
 80032fe:	601a      	str	r2, [r3, #0]
  }
}
 8003300:	46c0      	nop			; (mov r8, r8)
 8003302:	46bd      	mov	sp, r7
 8003304:	b002      	add	sp, #8
 8003306:	bd80      	pop	{r7, pc}
 8003308:	e000e100 	.word	0xe000e100

0800330c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800330c:	b590      	push	{r4, r7, lr}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	0002      	movs	r2, r0
 8003314:	6039      	str	r1, [r7, #0]
 8003316:	1dfb      	adds	r3, r7, #7
 8003318:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800331a:	1dfb      	adds	r3, r7, #7
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b7f      	cmp	r3, #127	; 0x7f
 8003320:	d828      	bhi.n	8003374 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003322:	4a2f      	ldr	r2, [pc, #188]	; (80033e0 <__NVIC_SetPriority+0xd4>)
 8003324:	1dfb      	adds	r3, r7, #7
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	b25b      	sxtb	r3, r3
 800332a:	089b      	lsrs	r3, r3, #2
 800332c:	33c0      	adds	r3, #192	; 0xc0
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	589b      	ldr	r3, [r3, r2]
 8003332:	1dfa      	adds	r2, r7, #7
 8003334:	7812      	ldrb	r2, [r2, #0]
 8003336:	0011      	movs	r1, r2
 8003338:	2203      	movs	r2, #3
 800333a:	400a      	ands	r2, r1
 800333c:	00d2      	lsls	r2, r2, #3
 800333e:	21ff      	movs	r1, #255	; 0xff
 8003340:	4091      	lsls	r1, r2
 8003342:	000a      	movs	r2, r1
 8003344:	43d2      	mvns	r2, r2
 8003346:	401a      	ands	r2, r3
 8003348:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	019b      	lsls	r3, r3, #6
 800334e:	22ff      	movs	r2, #255	; 0xff
 8003350:	401a      	ands	r2, r3
 8003352:	1dfb      	adds	r3, r7, #7
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	0018      	movs	r0, r3
 8003358:	2303      	movs	r3, #3
 800335a:	4003      	ands	r3, r0
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003360:	481f      	ldr	r0, [pc, #124]	; (80033e0 <__NVIC_SetPriority+0xd4>)
 8003362:	1dfb      	adds	r3, r7, #7
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	b25b      	sxtb	r3, r3
 8003368:	089b      	lsrs	r3, r3, #2
 800336a:	430a      	orrs	r2, r1
 800336c:	33c0      	adds	r3, #192	; 0xc0
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003372:	e031      	b.n	80033d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003374:	4a1b      	ldr	r2, [pc, #108]	; (80033e4 <__NVIC_SetPriority+0xd8>)
 8003376:	1dfb      	adds	r3, r7, #7
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	0019      	movs	r1, r3
 800337c:	230f      	movs	r3, #15
 800337e:	400b      	ands	r3, r1
 8003380:	3b08      	subs	r3, #8
 8003382:	089b      	lsrs	r3, r3, #2
 8003384:	3306      	adds	r3, #6
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	18d3      	adds	r3, r2, r3
 800338a:	3304      	adds	r3, #4
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	1dfa      	adds	r2, r7, #7
 8003390:	7812      	ldrb	r2, [r2, #0]
 8003392:	0011      	movs	r1, r2
 8003394:	2203      	movs	r2, #3
 8003396:	400a      	ands	r2, r1
 8003398:	00d2      	lsls	r2, r2, #3
 800339a:	21ff      	movs	r1, #255	; 0xff
 800339c:	4091      	lsls	r1, r2
 800339e:	000a      	movs	r2, r1
 80033a0:	43d2      	mvns	r2, r2
 80033a2:	401a      	ands	r2, r3
 80033a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	019b      	lsls	r3, r3, #6
 80033aa:	22ff      	movs	r2, #255	; 0xff
 80033ac:	401a      	ands	r2, r3
 80033ae:	1dfb      	adds	r3, r7, #7
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	0018      	movs	r0, r3
 80033b4:	2303      	movs	r3, #3
 80033b6:	4003      	ands	r3, r0
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033bc:	4809      	ldr	r0, [pc, #36]	; (80033e4 <__NVIC_SetPriority+0xd8>)
 80033be:	1dfb      	adds	r3, r7, #7
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	001c      	movs	r4, r3
 80033c4:	230f      	movs	r3, #15
 80033c6:	4023      	ands	r3, r4
 80033c8:	3b08      	subs	r3, #8
 80033ca:	089b      	lsrs	r3, r3, #2
 80033cc:	430a      	orrs	r2, r1
 80033ce:	3306      	adds	r3, #6
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	18c3      	adds	r3, r0, r3
 80033d4:	3304      	adds	r3, #4
 80033d6:	601a      	str	r2, [r3, #0]
}
 80033d8:	46c0      	nop			; (mov r8, r8)
 80033da:	46bd      	mov	sp, r7
 80033dc:	b003      	add	sp, #12
 80033de:	bd90      	pop	{r4, r7, pc}
 80033e0:	e000e100 	.word	0xe000e100
 80033e4:	e000ed00 	.word	0xe000ed00

080033e8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60b9      	str	r1, [r7, #8]
 80033f0:	607a      	str	r2, [r7, #4]
 80033f2:	210f      	movs	r1, #15
 80033f4:	187b      	adds	r3, r7, r1
 80033f6:	1c02      	adds	r2, r0, #0
 80033f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	187b      	adds	r3, r7, r1
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	b25b      	sxtb	r3, r3
 8003402:	0011      	movs	r1, r2
 8003404:	0018      	movs	r0, r3
 8003406:	f7ff ff81 	bl	800330c <__NVIC_SetPriority>
}
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	46bd      	mov	sp, r7
 800340e:	b004      	add	sp, #16
 8003410:	bd80      	pop	{r7, pc}

08003412 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b082      	sub	sp, #8
 8003416:	af00      	add	r7, sp, #0
 8003418:	0002      	movs	r2, r0
 800341a:	1dfb      	adds	r3, r7, #7
 800341c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800341e:	1dfb      	adds	r3, r7, #7
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	b25b      	sxtb	r3, r3
 8003424:	0018      	movs	r0, r3
 8003426:	f7ff ff57 	bl	80032d8 <__NVIC_EnableIRQ>
}
 800342a:	46c0      	nop			; (mov r8, r8)
 800342c:	46bd      	mov	sp, r7
 800342e:	b002      	add	sp, #8
 8003430:	bd80      	pop	{r7, pc}

08003432 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b082      	sub	sp, #8
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2221      	movs	r2, #33	; 0x21
 800343e:	5c9b      	ldrb	r3, [r3, r2]
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d008      	beq.n	8003458 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2204      	movs	r2, #4
 800344a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2220      	movs	r2, #32
 8003450:	2100      	movs	r1, #0
 8003452:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e020      	b.n	800349a <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	210e      	movs	r1, #14
 8003464:	438a      	bics	r2, r1
 8003466:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2101      	movs	r1, #1
 8003474:	438a      	bics	r2, r1
 8003476:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003480:	2101      	movs	r1, #1
 8003482:	4091      	lsls	r1, r2
 8003484:	000a      	movs	r2, r1
 8003486:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2221      	movs	r2, #33	; 0x21
 800348c:	2101      	movs	r1, #1
 800348e:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2220      	movs	r2, #32
 8003494:	2100      	movs	r1, #0
 8003496:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	0018      	movs	r0, r3
 800349c:	46bd      	mov	sp, r7
 800349e:	b002      	add	sp, #8
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b084      	sub	sp, #16
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034aa:	210f      	movs	r1, #15
 80034ac:	187b      	adds	r3, r7, r1
 80034ae:	2200      	movs	r2, #0
 80034b0:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2221      	movs	r2, #33	; 0x21
 80034b6:	5c9b      	ldrb	r3, [r3, r2]
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d006      	beq.n	80034cc <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2204      	movs	r2, #4
 80034c2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80034c4:	187b      	adds	r3, r7, r1
 80034c6:	2201      	movs	r2, #1
 80034c8:	701a      	strb	r2, [r3, #0]
 80034ca:	e028      	b.n	800351e <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	210e      	movs	r1, #14
 80034d8:	438a      	bics	r2, r1
 80034da:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2101      	movs	r1, #1
 80034e8:	438a      	bics	r2, r1
 80034ea:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f4:	2101      	movs	r1, #1
 80034f6:	4091      	lsls	r1, r2
 80034f8:	000a      	movs	r2, r1
 80034fa:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2221      	movs	r2, #33	; 0x21
 8003500:	2101      	movs	r1, #1
 8003502:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2220      	movs	r2, #32
 8003508:	2100      	movs	r1, #0
 800350a:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003510:	2b00      	cmp	r3, #0
 8003512:	d004      	beq.n	800351e <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	0010      	movs	r0, r2
 800351c:	4798      	blx	r3
    } 
  }
  return status;
 800351e:	230f      	movs	r3, #15
 8003520:	18fb      	adds	r3, r7, r3
 8003522:	781b      	ldrb	r3, [r3, #0]
}
 8003524:	0018      	movs	r0, r3
 8003526:	46bd      	mov	sp, r7
 8003528:	b004      	add	sp, #16
 800352a:	bd80      	pop	{r7, pc}

0800352c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800353a:	e155      	b.n	80037e8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2101      	movs	r1, #1
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	4091      	lsls	r1, r2
 8003546:	000a      	movs	r2, r1
 8003548:	4013      	ands	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d100      	bne.n	8003554 <HAL_GPIO_Init+0x28>
 8003552:	e146      	b.n	80037e2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2203      	movs	r2, #3
 800355a:	4013      	ands	r3, r2
 800355c:	2b01      	cmp	r3, #1
 800355e:	d005      	beq.n	800356c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2203      	movs	r2, #3
 8003566:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003568:	2b02      	cmp	r3, #2
 800356a:	d130      	bne.n	80035ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	2203      	movs	r2, #3
 8003578:	409a      	lsls	r2, r3
 800357a:	0013      	movs	r3, r2
 800357c:	43da      	mvns	r2, r3
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	4013      	ands	r3, r2
 8003582:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	68da      	ldr	r2, [r3, #12]
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	409a      	lsls	r2, r3
 800358e:	0013      	movs	r3, r2
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4313      	orrs	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035a2:	2201      	movs	r2, #1
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	409a      	lsls	r2, r3
 80035a8:	0013      	movs	r3, r2
 80035aa:	43da      	mvns	r2, r3
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	4013      	ands	r3, r2
 80035b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	091b      	lsrs	r3, r3, #4
 80035b8:	2201      	movs	r2, #1
 80035ba:	401a      	ands	r2, r3
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	409a      	lsls	r2, r3
 80035c0:	0013      	movs	r3, r2
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2203      	movs	r2, #3
 80035d4:	4013      	ands	r3, r2
 80035d6:	2b03      	cmp	r3, #3
 80035d8:	d017      	beq.n	800360a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	2203      	movs	r2, #3
 80035e6:	409a      	lsls	r2, r3
 80035e8:	0013      	movs	r3, r2
 80035ea:	43da      	mvns	r2, r3
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	4013      	ands	r3, r2
 80035f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	409a      	lsls	r2, r3
 80035fc:	0013      	movs	r3, r2
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	4313      	orrs	r3, r2
 8003602:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2203      	movs	r2, #3
 8003610:	4013      	ands	r3, r2
 8003612:	2b02      	cmp	r3, #2
 8003614:	d123      	bne.n	800365e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	08da      	lsrs	r2, r3, #3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	3208      	adds	r2, #8
 800361e:	0092      	lsls	r2, r2, #2
 8003620:	58d3      	ldr	r3, [r2, r3]
 8003622:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	2207      	movs	r2, #7
 8003628:	4013      	ands	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	220f      	movs	r2, #15
 800362e:	409a      	lsls	r2, r3
 8003630:	0013      	movs	r3, r2
 8003632:	43da      	mvns	r2, r3
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	4013      	ands	r3, r2
 8003638:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	691a      	ldr	r2, [r3, #16]
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	2107      	movs	r1, #7
 8003642:	400b      	ands	r3, r1
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	409a      	lsls	r2, r3
 8003648:	0013      	movs	r3, r2
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	08da      	lsrs	r2, r3, #3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3208      	adds	r2, #8
 8003658:	0092      	lsls	r2, r2, #2
 800365a:	6939      	ldr	r1, [r7, #16]
 800365c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	2203      	movs	r2, #3
 800366a:	409a      	lsls	r2, r3
 800366c:	0013      	movs	r3, r2
 800366e:	43da      	mvns	r2, r3
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	4013      	ands	r3, r2
 8003674:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2203      	movs	r2, #3
 800367c:	401a      	ands	r2, r3
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	409a      	lsls	r2, r3
 8003684:	0013      	movs	r3, r2
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	4313      	orrs	r3, r2
 800368a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	23c0      	movs	r3, #192	; 0xc0
 8003698:	029b      	lsls	r3, r3, #10
 800369a:	4013      	ands	r3, r2
 800369c:	d100      	bne.n	80036a0 <HAL_GPIO_Init+0x174>
 800369e:	e0a0      	b.n	80037e2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036a0:	4b57      	ldr	r3, [pc, #348]	; (8003800 <HAL_GPIO_Init+0x2d4>)
 80036a2:	699a      	ldr	r2, [r3, #24]
 80036a4:	4b56      	ldr	r3, [pc, #344]	; (8003800 <HAL_GPIO_Init+0x2d4>)
 80036a6:	2101      	movs	r1, #1
 80036a8:	430a      	orrs	r2, r1
 80036aa:	619a      	str	r2, [r3, #24]
 80036ac:	4b54      	ldr	r3, [pc, #336]	; (8003800 <HAL_GPIO_Init+0x2d4>)
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	2201      	movs	r2, #1
 80036b2:	4013      	ands	r3, r2
 80036b4:	60bb      	str	r3, [r7, #8]
 80036b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036b8:	4a52      	ldr	r2, [pc, #328]	; (8003804 <HAL_GPIO_Init+0x2d8>)
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	089b      	lsrs	r3, r3, #2
 80036be:	3302      	adds	r3, #2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	589b      	ldr	r3, [r3, r2]
 80036c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	2203      	movs	r2, #3
 80036ca:	4013      	ands	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	220f      	movs	r2, #15
 80036d0:	409a      	lsls	r2, r3
 80036d2:	0013      	movs	r3, r2
 80036d4:	43da      	mvns	r2, r3
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	4013      	ands	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	2390      	movs	r3, #144	; 0x90
 80036e0:	05db      	lsls	r3, r3, #23
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d019      	beq.n	800371a <HAL_GPIO_Init+0x1ee>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a47      	ldr	r2, [pc, #284]	; (8003808 <HAL_GPIO_Init+0x2dc>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d013      	beq.n	8003716 <HAL_GPIO_Init+0x1ea>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a46      	ldr	r2, [pc, #280]	; (800380c <HAL_GPIO_Init+0x2e0>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d00d      	beq.n	8003712 <HAL_GPIO_Init+0x1e6>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a45      	ldr	r2, [pc, #276]	; (8003810 <HAL_GPIO_Init+0x2e4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d007      	beq.n	800370e <HAL_GPIO_Init+0x1e2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a44      	ldr	r2, [pc, #272]	; (8003814 <HAL_GPIO_Init+0x2e8>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d101      	bne.n	800370a <HAL_GPIO_Init+0x1de>
 8003706:	2304      	movs	r3, #4
 8003708:	e008      	b.n	800371c <HAL_GPIO_Init+0x1f0>
 800370a:	2305      	movs	r3, #5
 800370c:	e006      	b.n	800371c <HAL_GPIO_Init+0x1f0>
 800370e:	2303      	movs	r3, #3
 8003710:	e004      	b.n	800371c <HAL_GPIO_Init+0x1f0>
 8003712:	2302      	movs	r3, #2
 8003714:	e002      	b.n	800371c <HAL_GPIO_Init+0x1f0>
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <HAL_GPIO_Init+0x1f0>
 800371a:	2300      	movs	r3, #0
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	2103      	movs	r1, #3
 8003720:	400a      	ands	r2, r1
 8003722:	0092      	lsls	r2, r2, #2
 8003724:	4093      	lsls	r3, r2
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	4313      	orrs	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800372c:	4935      	ldr	r1, [pc, #212]	; (8003804 <HAL_GPIO_Init+0x2d8>)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	089b      	lsrs	r3, r3, #2
 8003732:	3302      	adds	r3, #2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800373a:	4b37      	ldr	r3, [pc, #220]	; (8003818 <HAL_GPIO_Init+0x2ec>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	43da      	mvns	r2, r3
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	4013      	ands	r3, r2
 8003748:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	2380      	movs	r3, #128	; 0x80
 8003750:	025b      	lsls	r3, r3, #9
 8003752:	4013      	ands	r3, r2
 8003754:	d003      	beq.n	800375e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4313      	orrs	r3, r2
 800375c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800375e:	4b2e      	ldr	r3, [pc, #184]	; (8003818 <HAL_GPIO_Init+0x2ec>)
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003764:	4b2c      	ldr	r3, [pc, #176]	; (8003818 <HAL_GPIO_Init+0x2ec>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	43da      	mvns	r2, r3
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	4013      	ands	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	2380      	movs	r3, #128	; 0x80
 800377a:	029b      	lsls	r3, r3, #10
 800377c:	4013      	ands	r3, r2
 800377e:	d003      	beq.n	8003788 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4313      	orrs	r3, r2
 8003786:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003788:	4b23      	ldr	r3, [pc, #140]	; (8003818 <HAL_GPIO_Init+0x2ec>)
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800378e:	4b22      	ldr	r3, [pc, #136]	; (8003818 <HAL_GPIO_Init+0x2ec>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	43da      	mvns	r2, r3
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	4013      	ands	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	2380      	movs	r3, #128	; 0x80
 80037a4:	035b      	lsls	r3, r3, #13
 80037a6:	4013      	ands	r3, r2
 80037a8:	d003      	beq.n	80037b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80037b2:	4b19      	ldr	r3, [pc, #100]	; (8003818 <HAL_GPIO_Init+0x2ec>)
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80037b8:	4b17      	ldr	r3, [pc, #92]	; (8003818 <HAL_GPIO_Init+0x2ec>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	43da      	mvns	r2, r3
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	4013      	ands	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	2380      	movs	r3, #128	; 0x80
 80037ce:	039b      	lsls	r3, r3, #14
 80037d0:	4013      	ands	r3, r2
 80037d2:	d003      	beq.n	80037dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	4313      	orrs	r3, r2
 80037da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80037dc:	4b0e      	ldr	r3, [pc, #56]	; (8003818 <HAL_GPIO_Init+0x2ec>)
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	3301      	adds	r3, #1
 80037e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	40da      	lsrs	r2, r3
 80037f0:	1e13      	subs	r3, r2, #0
 80037f2:	d000      	beq.n	80037f6 <HAL_GPIO_Init+0x2ca>
 80037f4:	e6a2      	b.n	800353c <HAL_GPIO_Init+0x10>
  } 
}
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	46c0      	nop			; (mov r8, r8)
 80037fa:	46bd      	mov	sp, r7
 80037fc:	b006      	add	sp, #24
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	40021000 	.word	0x40021000
 8003804:	40010000 	.word	0x40010000
 8003808:	48000400 	.word	0x48000400
 800380c:	48000800 	.word	0x48000800
 8003810:	48000c00 	.word	0x48000c00
 8003814:	48001000 	.word	0x48001000
 8003818:	40010400 	.word	0x40010400

0800381c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	0008      	movs	r0, r1
 8003826:	0011      	movs	r1, r2
 8003828:	1cbb      	adds	r3, r7, #2
 800382a:	1c02      	adds	r2, r0, #0
 800382c:	801a      	strh	r2, [r3, #0]
 800382e:	1c7b      	adds	r3, r7, #1
 8003830:	1c0a      	adds	r2, r1, #0
 8003832:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003834:	1c7b      	adds	r3, r7, #1
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d004      	beq.n	8003846 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800383c:	1cbb      	adds	r3, r7, #2
 800383e:	881a      	ldrh	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003844:	e003      	b.n	800384e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003846:	1cbb      	adds	r3, r7, #2
 8003848:	881a      	ldrh	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800384e:	46c0      	nop			; (mov r8, r8)
 8003850:	46bd      	mov	sp, r7
 8003852:	b002      	add	sp, #8
 8003854:	bd80      	pop	{r7, pc}
	...

08003858 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b088      	sub	sp, #32
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d102      	bne.n	800386c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	f000 fb76 	bl	8003f58 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2201      	movs	r2, #1
 8003872:	4013      	ands	r3, r2
 8003874:	d100      	bne.n	8003878 <HAL_RCC_OscConfig+0x20>
 8003876:	e08e      	b.n	8003996 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003878:	4bc5      	ldr	r3, [pc, #788]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	220c      	movs	r2, #12
 800387e:	4013      	ands	r3, r2
 8003880:	2b04      	cmp	r3, #4
 8003882:	d00e      	beq.n	80038a2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003884:	4bc2      	ldr	r3, [pc, #776]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	220c      	movs	r2, #12
 800388a:	4013      	ands	r3, r2
 800388c:	2b08      	cmp	r3, #8
 800388e:	d117      	bne.n	80038c0 <HAL_RCC_OscConfig+0x68>
 8003890:	4bbf      	ldr	r3, [pc, #764]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	23c0      	movs	r3, #192	; 0xc0
 8003896:	025b      	lsls	r3, r3, #9
 8003898:	401a      	ands	r2, r3
 800389a:	2380      	movs	r3, #128	; 0x80
 800389c:	025b      	lsls	r3, r3, #9
 800389e:	429a      	cmp	r2, r3
 80038a0:	d10e      	bne.n	80038c0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038a2:	4bbb      	ldr	r3, [pc, #748]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	2380      	movs	r3, #128	; 0x80
 80038a8:	029b      	lsls	r3, r3, #10
 80038aa:	4013      	ands	r3, r2
 80038ac:	d100      	bne.n	80038b0 <HAL_RCC_OscConfig+0x58>
 80038ae:	e071      	b.n	8003994 <HAL_RCC_OscConfig+0x13c>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d000      	beq.n	80038ba <HAL_RCC_OscConfig+0x62>
 80038b8:	e06c      	b.n	8003994 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	f000 fb4c 	bl	8003f58 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d107      	bne.n	80038d8 <HAL_RCC_OscConfig+0x80>
 80038c8:	4bb1      	ldr	r3, [pc, #708]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	4bb0      	ldr	r3, [pc, #704]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 80038ce:	2180      	movs	r1, #128	; 0x80
 80038d0:	0249      	lsls	r1, r1, #9
 80038d2:	430a      	orrs	r2, r1
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	e02f      	b.n	8003938 <HAL_RCC_OscConfig+0xe0>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10c      	bne.n	80038fa <HAL_RCC_OscConfig+0xa2>
 80038e0:	4bab      	ldr	r3, [pc, #684]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	4baa      	ldr	r3, [pc, #680]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 80038e6:	49ab      	ldr	r1, [pc, #684]	; (8003b94 <HAL_RCC_OscConfig+0x33c>)
 80038e8:	400a      	ands	r2, r1
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	4ba8      	ldr	r3, [pc, #672]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	4ba7      	ldr	r3, [pc, #668]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 80038f2:	49a9      	ldr	r1, [pc, #676]	; (8003b98 <HAL_RCC_OscConfig+0x340>)
 80038f4:	400a      	ands	r2, r1
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	e01e      	b.n	8003938 <HAL_RCC_OscConfig+0xe0>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2b05      	cmp	r3, #5
 8003900:	d10e      	bne.n	8003920 <HAL_RCC_OscConfig+0xc8>
 8003902:	4ba3      	ldr	r3, [pc, #652]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	4ba2      	ldr	r3, [pc, #648]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 8003908:	2180      	movs	r1, #128	; 0x80
 800390a:	02c9      	lsls	r1, r1, #11
 800390c:	430a      	orrs	r2, r1
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	4b9f      	ldr	r3, [pc, #636]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	4b9e      	ldr	r3, [pc, #632]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 8003916:	2180      	movs	r1, #128	; 0x80
 8003918:	0249      	lsls	r1, r1, #9
 800391a:	430a      	orrs	r2, r1
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	e00b      	b.n	8003938 <HAL_RCC_OscConfig+0xe0>
 8003920:	4b9b      	ldr	r3, [pc, #620]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	4b9a      	ldr	r3, [pc, #616]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 8003926:	499b      	ldr	r1, [pc, #620]	; (8003b94 <HAL_RCC_OscConfig+0x33c>)
 8003928:	400a      	ands	r2, r1
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	4b98      	ldr	r3, [pc, #608]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	4b97      	ldr	r3, [pc, #604]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 8003932:	4999      	ldr	r1, [pc, #612]	; (8003b98 <HAL_RCC_OscConfig+0x340>)
 8003934:	400a      	ands	r2, r1
 8003936:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d014      	beq.n	800396a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003940:	f7ff f8d2 	bl	8002ae8 <HAL_GetTick>
 8003944:	0003      	movs	r3, r0
 8003946:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003948:	e008      	b.n	800395c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800394a:	f7ff f8cd 	bl	8002ae8 <HAL_GetTick>
 800394e:	0002      	movs	r2, r0
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b64      	cmp	r3, #100	; 0x64
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e2fd      	b.n	8003f58 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395c:	4b8c      	ldr	r3, [pc, #560]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	2380      	movs	r3, #128	; 0x80
 8003962:	029b      	lsls	r3, r3, #10
 8003964:	4013      	ands	r3, r2
 8003966:	d0f0      	beq.n	800394a <HAL_RCC_OscConfig+0xf2>
 8003968:	e015      	b.n	8003996 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396a:	f7ff f8bd 	bl	8002ae8 <HAL_GetTick>
 800396e:	0003      	movs	r3, r0
 8003970:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003974:	f7ff f8b8 	bl	8002ae8 <HAL_GetTick>
 8003978:	0002      	movs	r2, r0
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b64      	cmp	r3, #100	; 0x64
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e2e8      	b.n	8003f58 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003986:	4b82      	ldr	r3, [pc, #520]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	2380      	movs	r3, #128	; 0x80
 800398c:	029b      	lsls	r3, r3, #10
 800398e:	4013      	ands	r3, r2
 8003990:	d1f0      	bne.n	8003974 <HAL_RCC_OscConfig+0x11c>
 8003992:	e000      	b.n	8003996 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003994:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2202      	movs	r2, #2
 800399c:	4013      	ands	r3, r2
 800399e:	d100      	bne.n	80039a2 <HAL_RCC_OscConfig+0x14a>
 80039a0:	e06c      	b.n	8003a7c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80039a2:	4b7b      	ldr	r3, [pc, #492]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	220c      	movs	r2, #12
 80039a8:	4013      	ands	r3, r2
 80039aa:	d00e      	beq.n	80039ca <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80039ac:	4b78      	ldr	r3, [pc, #480]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	220c      	movs	r2, #12
 80039b2:	4013      	ands	r3, r2
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d11f      	bne.n	80039f8 <HAL_RCC_OscConfig+0x1a0>
 80039b8:	4b75      	ldr	r3, [pc, #468]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	23c0      	movs	r3, #192	; 0xc0
 80039be:	025b      	lsls	r3, r3, #9
 80039c0:	401a      	ands	r2, r3
 80039c2:	2380      	movs	r3, #128	; 0x80
 80039c4:	021b      	lsls	r3, r3, #8
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d116      	bne.n	80039f8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ca:	4b71      	ldr	r3, [pc, #452]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2202      	movs	r2, #2
 80039d0:	4013      	ands	r3, r2
 80039d2:	d005      	beq.n	80039e0 <HAL_RCC_OscConfig+0x188>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d001      	beq.n	80039e0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e2bb      	b.n	8003f58 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039e0:	4b6b      	ldr	r3, [pc, #428]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	22f8      	movs	r2, #248	; 0xf8
 80039e6:	4393      	bics	r3, r2
 80039e8:	0019      	movs	r1, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	00da      	lsls	r2, r3, #3
 80039f0:	4b67      	ldr	r3, [pc, #412]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 80039f2:	430a      	orrs	r2, r1
 80039f4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039f6:	e041      	b.n	8003a7c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d024      	beq.n	8003a4a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a00:	4b63      	ldr	r3, [pc, #396]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	4b62      	ldr	r3, [pc, #392]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 8003a06:	2101      	movs	r1, #1
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0c:	f7ff f86c 	bl	8002ae8 <HAL_GetTick>
 8003a10:	0003      	movs	r3, r0
 8003a12:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a14:	e008      	b.n	8003a28 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a16:	f7ff f867 	bl	8002ae8 <HAL_GetTick>
 8003a1a:	0002      	movs	r2, r0
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e297      	b.n	8003f58 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a28:	4b59      	ldr	r3, [pc, #356]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	4013      	ands	r3, r2
 8003a30:	d0f1      	beq.n	8003a16 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a32:	4b57      	ldr	r3, [pc, #348]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	22f8      	movs	r2, #248	; 0xf8
 8003a38:	4393      	bics	r3, r2
 8003a3a:	0019      	movs	r1, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	00da      	lsls	r2, r3, #3
 8003a42:	4b53      	ldr	r3, [pc, #332]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 8003a44:	430a      	orrs	r2, r1
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	e018      	b.n	8003a7c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a4a:	4b51      	ldr	r3, [pc, #324]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	4b50      	ldr	r3, [pc, #320]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 8003a50:	2101      	movs	r1, #1
 8003a52:	438a      	bics	r2, r1
 8003a54:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a56:	f7ff f847 	bl	8002ae8 <HAL_GetTick>
 8003a5a:	0003      	movs	r3, r0
 8003a5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a60:	f7ff f842 	bl	8002ae8 <HAL_GetTick>
 8003a64:	0002      	movs	r2, r0
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e272      	b.n	8003f58 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a72:	4b47      	ldr	r3, [pc, #284]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2202      	movs	r2, #2
 8003a78:	4013      	ands	r3, r2
 8003a7a:	d1f1      	bne.n	8003a60 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2208      	movs	r2, #8
 8003a82:	4013      	ands	r3, r2
 8003a84:	d036      	beq.n	8003af4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d019      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a8e:	4b40      	ldr	r3, [pc, #256]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 8003a90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a92:	4b3f      	ldr	r3, [pc, #252]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 8003a94:	2101      	movs	r1, #1
 8003a96:	430a      	orrs	r2, r1
 8003a98:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a9a:	f7ff f825 	bl	8002ae8 <HAL_GetTick>
 8003a9e:	0003      	movs	r3, r0
 8003aa0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aa4:	f7ff f820 	bl	8002ae8 <HAL_GetTick>
 8003aa8:	0002      	movs	r2, r0
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e250      	b.n	8003f58 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ab6:	4b36      	ldr	r3, [pc, #216]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	2202      	movs	r2, #2
 8003abc:	4013      	ands	r3, r2
 8003abe:	d0f1      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x24c>
 8003ac0:	e018      	b.n	8003af4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ac2:	4b33      	ldr	r3, [pc, #204]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 8003ac4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ac6:	4b32      	ldr	r3, [pc, #200]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 8003ac8:	2101      	movs	r1, #1
 8003aca:	438a      	bics	r2, r1
 8003acc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ace:	f7ff f80b 	bl	8002ae8 <HAL_GetTick>
 8003ad2:	0003      	movs	r3, r0
 8003ad4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ad8:	f7ff f806 	bl	8002ae8 <HAL_GetTick>
 8003adc:	0002      	movs	r2, r0
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e236      	b.n	8003f58 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aea:	4b29      	ldr	r3, [pc, #164]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	2202      	movs	r2, #2
 8003af0:	4013      	ands	r3, r2
 8003af2:	d1f1      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2204      	movs	r2, #4
 8003afa:	4013      	ands	r3, r2
 8003afc:	d100      	bne.n	8003b00 <HAL_RCC_OscConfig+0x2a8>
 8003afe:	e0b5      	b.n	8003c6c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b00:	201f      	movs	r0, #31
 8003b02:	183b      	adds	r3, r7, r0
 8003b04:	2200      	movs	r2, #0
 8003b06:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b08:	4b21      	ldr	r3, [pc, #132]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 8003b0a:	69da      	ldr	r2, [r3, #28]
 8003b0c:	2380      	movs	r3, #128	; 0x80
 8003b0e:	055b      	lsls	r3, r3, #21
 8003b10:	4013      	ands	r3, r2
 8003b12:	d110      	bne.n	8003b36 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b14:	4b1e      	ldr	r3, [pc, #120]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 8003b16:	69da      	ldr	r2, [r3, #28]
 8003b18:	4b1d      	ldr	r3, [pc, #116]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 8003b1a:	2180      	movs	r1, #128	; 0x80
 8003b1c:	0549      	lsls	r1, r1, #21
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	61da      	str	r2, [r3, #28]
 8003b22:	4b1b      	ldr	r3, [pc, #108]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 8003b24:	69da      	ldr	r2, [r3, #28]
 8003b26:	2380      	movs	r3, #128	; 0x80
 8003b28:	055b      	lsls	r3, r3, #21
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003b30:	183b      	adds	r3, r7, r0
 8003b32:	2201      	movs	r2, #1
 8003b34:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b36:	4b19      	ldr	r3, [pc, #100]	; (8003b9c <HAL_RCC_OscConfig+0x344>)
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	2380      	movs	r3, #128	; 0x80
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	4013      	ands	r3, r2
 8003b40:	d11a      	bne.n	8003b78 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b42:	4b16      	ldr	r3, [pc, #88]	; (8003b9c <HAL_RCC_OscConfig+0x344>)
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	4b15      	ldr	r3, [pc, #84]	; (8003b9c <HAL_RCC_OscConfig+0x344>)
 8003b48:	2180      	movs	r1, #128	; 0x80
 8003b4a:	0049      	lsls	r1, r1, #1
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b50:	f7fe ffca 	bl	8002ae8 <HAL_GetTick>
 8003b54:	0003      	movs	r3, r0
 8003b56:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b58:	e008      	b.n	8003b6c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b5a:	f7fe ffc5 	bl	8002ae8 <HAL_GetTick>
 8003b5e:	0002      	movs	r2, r0
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b64      	cmp	r3, #100	; 0x64
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e1f5      	b.n	8003f58 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b6c:	4b0b      	ldr	r3, [pc, #44]	; (8003b9c <HAL_RCC_OscConfig+0x344>)
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	2380      	movs	r3, #128	; 0x80
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	4013      	ands	r3, r2
 8003b76:	d0f0      	beq.n	8003b5a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d10f      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x348>
 8003b80:	4b03      	ldr	r3, [pc, #12]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 8003b82:	6a1a      	ldr	r2, [r3, #32]
 8003b84:	4b02      	ldr	r3, [pc, #8]	; (8003b90 <HAL_RCC_OscConfig+0x338>)
 8003b86:	2101      	movs	r1, #1
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	621a      	str	r2, [r3, #32]
 8003b8c:	e036      	b.n	8003bfc <HAL_RCC_OscConfig+0x3a4>
 8003b8e:	46c0      	nop			; (mov r8, r8)
 8003b90:	40021000 	.word	0x40021000
 8003b94:	fffeffff 	.word	0xfffeffff
 8003b98:	fffbffff 	.word	0xfffbffff
 8003b9c:	40007000 	.word	0x40007000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10c      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x36a>
 8003ba8:	4bca      	ldr	r3, [pc, #808]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003baa:	6a1a      	ldr	r2, [r3, #32]
 8003bac:	4bc9      	ldr	r3, [pc, #804]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003bae:	2101      	movs	r1, #1
 8003bb0:	438a      	bics	r2, r1
 8003bb2:	621a      	str	r2, [r3, #32]
 8003bb4:	4bc7      	ldr	r3, [pc, #796]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003bb6:	6a1a      	ldr	r2, [r3, #32]
 8003bb8:	4bc6      	ldr	r3, [pc, #792]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003bba:	2104      	movs	r1, #4
 8003bbc:	438a      	bics	r2, r1
 8003bbe:	621a      	str	r2, [r3, #32]
 8003bc0:	e01c      	b.n	8003bfc <HAL_RCC_OscConfig+0x3a4>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	2b05      	cmp	r3, #5
 8003bc8:	d10c      	bne.n	8003be4 <HAL_RCC_OscConfig+0x38c>
 8003bca:	4bc2      	ldr	r3, [pc, #776]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003bcc:	6a1a      	ldr	r2, [r3, #32]
 8003bce:	4bc1      	ldr	r3, [pc, #772]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003bd0:	2104      	movs	r1, #4
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	621a      	str	r2, [r3, #32]
 8003bd6:	4bbf      	ldr	r3, [pc, #764]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003bd8:	6a1a      	ldr	r2, [r3, #32]
 8003bda:	4bbe      	ldr	r3, [pc, #760]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003bdc:	2101      	movs	r1, #1
 8003bde:	430a      	orrs	r2, r1
 8003be0:	621a      	str	r2, [r3, #32]
 8003be2:	e00b      	b.n	8003bfc <HAL_RCC_OscConfig+0x3a4>
 8003be4:	4bbb      	ldr	r3, [pc, #748]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003be6:	6a1a      	ldr	r2, [r3, #32]
 8003be8:	4bba      	ldr	r3, [pc, #744]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003bea:	2101      	movs	r1, #1
 8003bec:	438a      	bics	r2, r1
 8003bee:	621a      	str	r2, [r3, #32]
 8003bf0:	4bb8      	ldr	r3, [pc, #736]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003bf2:	6a1a      	ldr	r2, [r3, #32]
 8003bf4:	4bb7      	ldr	r3, [pc, #732]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003bf6:	2104      	movs	r1, #4
 8003bf8:	438a      	bics	r2, r1
 8003bfa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d014      	beq.n	8003c2e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c04:	f7fe ff70 	bl	8002ae8 <HAL_GetTick>
 8003c08:	0003      	movs	r3, r0
 8003c0a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c0c:	e009      	b.n	8003c22 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c0e:	f7fe ff6b 	bl	8002ae8 <HAL_GetTick>
 8003c12:	0002      	movs	r2, r0
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	4aaf      	ldr	r2, [pc, #700]	; (8003ed8 <HAL_RCC_OscConfig+0x680>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e19a      	b.n	8003f58 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c22:	4bac      	ldr	r3, [pc, #688]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	2202      	movs	r2, #2
 8003c28:	4013      	ands	r3, r2
 8003c2a:	d0f0      	beq.n	8003c0e <HAL_RCC_OscConfig+0x3b6>
 8003c2c:	e013      	b.n	8003c56 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c2e:	f7fe ff5b 	bl	8002ae8 <HAL_GetTick>
 8003c32:	0003      	movs	r3, r0
 8003c34:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c36:	e009      	b.n	8003c4c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c38:	f7fe ff56 	bl	8002ae8 <HAL_GetTick>
 8003c3c:	0002      	movs	r2, r0
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	4aa5      	ldr	r2, [pc, #660]	; (8003ed8 <HAL_RCC_OscConfig+0x680>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e185      	b.n	8003f58 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c4c:	4ba1      	ldr	r3, [pc, #644]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	2202      	movs	r2, #2
 8003c52:	4013      	ands	r3, r2
 8003c54:	d1f0      	bne.n	8003c38 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c56:	231f      	movs	r3, #31
 8003c58:	18fb      	adds	r3, r7, r3
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d105      	bne.n	8003c6c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c60:	4b9c      	ldr	r3, [pc, #624]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003c62:	69da      	ldr	r2, [r3, #28]
 8003c64:	4b9b      	ldr	r3, [pc, #620]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003c66:	499d      	ldr	r1, [pc, #628]	; (8003edc <HAL_RCC_OscConfig+0x684>)
 8003c68:	400a      	ands	r2, r1
 8003c6a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2210      	movs	r2, #16
 8003c72:	4013      	ands	r3, r2
 8003c74:	d063      	beq.n	8003d3e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d12a      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003c7e:	4b95      	ldr	r3, [pc, #596]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003c80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c82:	4b94      	ldr	r3, [pc, #592]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003c84:	2104      	movs	r1, #4
 8003c86:	430a      	orrs	r2, r1
 8003c88:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003c8a:	4b92      	ldr	r3, [pc, #584]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003c8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c8e:	4b91      	ldr	r3, [pc, #580]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003c90:	2101      	movs	r1, #1
 8003c92:	430a      	orrs	r2, r1
 8003c94:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c96:	f7fe ff27 	bl	8002ae8 <HAL_GetTick>
 8003c9a:	0003      	movs	r3, r0
 8003c9c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003ca0:	f7fe ff22 	bl	8002ae8 <HAL_GetTick>
 8003ca4:	0002      	movs	r2, r0
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e152      	b.n	8003f58 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003cb2:	4b88      	ldr	r3, [pc, #544]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	4013      	ands	r3, r2
 8003cba:	d0f1      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003cbc:	4b85      	ldr	r3, [pc, #532]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc0:	22f8      	movs	r2, #248	; 0xf8
 8003cc2:	4393      	bics	r3, r2
 8003cc4:	0019      	movs	r1, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	00da      	lsls	r2, r3, #3
 8003ccc:	4b81      	ldr	r3, [pc, #516]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	635a      	str	r2, [r3, #52]	; 0x34
 8003cd2:	e034      	b.n	8003d3e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	3305      	adds	r3, #5
 8003cda:	d111      	bne.n	8003d00 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003cdc:	4b7d      	ldr	r3, [pc, #500]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003cde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ce0:	4b7c      	ldr	r3, [pc, #496]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003ce2:	2104      	movs	r1, #4
 8003ce4:	438a      	bics	r2, r1
 8003ce6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003ce8:	4b7a      	ldr	r3, [pc, #488]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cec:	22f8      	movs	r2, #248	; 0xf8
 8003cee:	4393      	bics	r3, r2
 8003cf0:	0019      	movs	r1, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	00da      	lsls	r2, r3, #3
 8003cf8:	4b76      	ldr	r3, [pc, #472]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	635a      	str	r2, [r3, #52]	; 0x34
 8003cfe:	e01e      	b.n	8003d3e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003d00:	4b74      	ldr	r3, [pc, #464]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003d02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d04:	4b73      	ldr	r3, [pc, #460]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003d06:	2104      	movs	r1, #4
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003d0c:	4b71      	ldr	r3, [pc, #452]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003d0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d10:	4b70      	ldr	r3, [pc, #448]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003d12:	2101      	movs	r1, #1
 8003d14:	438a      	bics	r2, r1
 8003d16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d18:	f7fe fee6 	bl	8002ae8 <HAL_GetTick>
 8003d1c:	0003      	movs	r3, r0
 8003d1e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003d20:	e008      	b.n	8003d34 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003d22:	f7fe fee1 	bl	8002ae8 <HAL_GetTick>
 8003d26:	0002      	movs	r2, r0
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e111      	b.n	8003f58 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003d34:	4b67      	ldr	r3, [pc, #412]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d38:	2202      	movs	r2, #2
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	d1f1      	bne.n	8003d22 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2220      	movs	r2, #32
 8003d44:	4013      	ands	r3, r2
 8003d46:	d05c      	beq.n	8003e02 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003d48:	4b62      	ldr	r3, [pc, #392]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	220c      	movs	r2, #12
 8003d4e:	4013      	ands	r3, r2
 8003d50:	2b0c      	cmp	r3, #12
 8003d52:	d00e      	beq.n	8003d72 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003d54:	4b5f      	ldr	r3, [pc, #380]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	220c      	movs	r2, #12
 8003d5a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	d114      	bne.n	8003d8a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003d60:	4b5c      	ldr	r3, [pc, #368]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	23c0      	movs	r3, #192	; 0xc0
 8003d66:	025b      	lsls	r3, r3, #9
 8003d68:	401a      	ands	r2, r3
 8003d6a:	23c0      	movs	r3, #192	; 0xc0
 8003d6c:	025b      	lsls	r3, r3, #9
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d10b      	bne.n	8003d8a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003d72:	4b58      	ldr	r3, [pc, #352]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003d74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d76:	2380      	movs	r3, #128	; 0x80
 8003d78:	025b      	lsls	r3, r3, #9
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	d040      	beq.n	8003e00 <HAL_RCC_OscConfig+0x5a8>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d03c      	beq.n	8003e00 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e0e6      	b.n	8003f58 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d01b      	beq.n	8003dca <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003d92:	4b50      	ldr	r3, [pc, #320]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003d94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d96:	4b4f      	ldr	r3, [pc, #316]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003d98:	2180      	movs	r1, #128	; 0x80
 8003d9a:	0249      	lsls	r1, r1, #9
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da0:	f7fe fea2 	bl	8002ae8 <HAL_GetTick>
 8003da4:	0003      	movs	r3, r0
 8003da6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003da8:	e008      	b.n	8003dbc <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003daa:	f7fe fe9d 	bl	8002ae8 <HAL_GetTick>
 8003dae:	0002      	movs	r2, r0
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e0cd      	b.n	8003f58 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003dbc:	4b45      	ldr	r3, [pc, #276]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003dbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dc0:	2380      	movs	r3, #128	; 0x80
 8003dc2:	025b      	lsls	r3, r3, #9
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	d0f0      	beq.n	8003daa <HAL_RCC_OscConfig+0x552>
 8003dc8:	e01b      	b.n	8003e02 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003dca:	4b42      	ldr	r3, [pc, #264]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003dcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dce:	4b41      	ldr	r3, [pc, #260]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003dd0:	4943      	ldr	r1, [pc, #268]	; (8003ee0 <HAL_RCC_OscConfig+0x688>)
 8003dd2:	400a      	ands	r2, r1
 8003dd4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd6:	f7fe fe87 	bl	8002ae8 <HAL_GetTick>
 8003dda:	0003      	movs	r3, r0
 8003ddc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003dde:	e008      	b.n	8003df2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003de0:	f7fe fe82 	bl	8002ae8 <HAL_GetTick>
 8003de4:	0002      	movs	r2, r0
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e0b2      	b.n	8003f58 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003df2:	4b38      	ldr	r3, [pc, #224]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003df4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003df6:	2380      	movs	r3, #128	; 0x80
 8003df8:	025b      	lsls	r3, r3, #9
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	d1f0      	bne.n	8003de0 <HAL_RCC_OscConfig+0x588>
 8003dfe:	e000      	b.n	8003e02 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003e00:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d100      	bne.n	8003e0c <HAL_RCC_OscConfig+0x5b4>
 8003e0a:	e0a4      	b.n	8003f56 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e0c:	4b31      	ldr	r3, [pc, #196]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	220c      	movs	r2, #12
 8003e12:	4013      	ands	r3, r2
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d100      	bne.n	8003e1a <HAL_RCC_OscConfig+0x5c2>
 8003e18:	e078      	b.n	8003f0c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d14c      	bne.n	8003ebc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e22:	4b2c      	ldr	r3, [pc, #176]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	4b2b      	ldr	r3, [pc, #172]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003e28:	492e      	ldr	r1, [pc, #184]	; (8003ee4 <HAL_RCC_OscConfig+0x68c>)
 8003e2a:	400a      	ands	r2, r1
 8003e2c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e2e:	f7fe fe5b 	bl	8002ae8 <HAL_GetTick>
 8003e32:	0003      	movs	r3, r0
 8003e34:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e38:	f7fe fe56 	bl	8002ae8 <HAL_GetTick>
 8003e3c:	0002      	movs	r2, r0
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e086      	b.n	8003f58 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e4a:	4b22      	ldr	r3, [pc, #136]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	2380      	movs	r3, #128	; 0x80
 8003e50:	049b      	lsls	r3, r3, #18
 8003e52:	4013      	ands	r3, r2
 8003e54:	d1f0      	bne.n	8003e38 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e56:	4b1f      	ldr	r3, [pc, #124]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5a:	220f      	movs	r2, #15
 8003e5c:	4393      	bics	r3, r2
 8003e5e:	0019      	movs	r1, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e64:	4b1b      	ldr	r3, [pc, #108]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003e66:	430a      	orrs	r2, r1
 8003e68:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e6a:	4b1a      	ldr	r3, [pc, #104]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	4a1e      	ldr	r2, [pc, #120]	; (8003ee8 <HAL_RCC_OscConfig+0x690>)
 8003e70:	4013      	ands	r3, r2
 8003e72:	0019      	movs	r1, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7c:	431a      	orrs	r2, r3
 8003e7e:	4b15      	ldr	r3, [pc, #84]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003e80:	430a      	orrs	r2, r1
 8003e82:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e84:	4b13      	ldr	r3, [pc, #76]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	4b12      	ldr	r3, [pc, #72]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003e8a:	2180      	movs	r1, #128	; 0x80
 8003e8c:	0449      	lsls	r1, r1, #17
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e92:	f7fe fe29 	bl	8002ae8 <HAL_GetTick>
 8003e96:	0003      	movs	r3, r0
 8003e98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e9c:	f7fe fe24 	bl	8002ae8 <HAL_GetTick>
 8003ea0:	0002      	movs	r2, r0
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e054      	b.n	8003f58 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003eae:	4b09      	ldr	r3, [pc, #36]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	2380      	movs	r3, #128	; 0x80
 8003eb4:	049b      	lsls	r3, r3, #18
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	d0f0      	beq.n	8003e9c <HAL_RCC_OscConfig+0x644>
 8003eba:	e04c      	b.n	8003f56 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ebc:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	4b04      	ldr	r3, [pc, #16]	; (8003ed4 <HAL_RCC_OscConfig+0x67c>)
 8003ec2:	4908      	ldr	r1, [pc, #32]	; (8003ee4 <HAL_RCC_OscConfig+0x68c>)
 8003ec4:	400a      	ands	r2, r1
 8003ec6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec8:	f7fe fe0e 	bl	8002ae8 <HAL_GetTick>
 8003ecc:	0003      	movs	r3, r0
 8003ece:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ed0:	e015      	b.n	8003efe <HAL_RCC_OscConfig+0x6a6>
 8003ed2:	46c0      	nop			; (mov r8, r8)
 8003ed4:	40021000 	.word	0x40021000
 8003ed8:	00001388 	.word	0x00001388
 8003edc:	efffffff 	.word	0xefffffff
 8003ee0:	fffeffff 	.word	0xfffeffff
 8003ee4:	feffffff 	.word	0xfeffffff
 8003ee8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eec:	f7fe fdfc 	bl	8002ae8 <HAL_GetTick>
 8003ef0:	0002      	movs	r2, r0
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e02c      	b.n	8003f58 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003efe:	4b18      	ldr	r3, [pc, #96]	; (8003f60 <HAL_RCC_OscConfig+0x708>)
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	2380      	movs	r3, #128	; 0x80
 8003f04:	049b      	lsls	r3, r3, #18
 8003f06:	4013      	ands	r3, r2
 8003f08:	d1f0      	bne.n	8003eec <HAL_RCC_OscConfig+0x694>
 8003f0a:	e024      	b.n	8003f56 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d101      	bne.n	8003f18 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e01f      	b.n	8003f58 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003f18:	4b11      	ldr	r3, [pc, #68]	; (8003f60 <HAL_RCC_OscConfig+0x708>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003f1e:	4b10      	ldr	r3, [pc, #64]	; (8003f60 <HAL_RCC_OscConfig+0x708>)
 8003f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f22:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	23c0      	movs	r3, #192	; 0xc0
 8003f28:	025b      	lsls	r3, r3, #9
 8003f2a:	401a      	ands	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d10e      	bne.n	8003f52 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	220f      	movs	r2, #15
 8003f38:	401a      	ands	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d107      	bne.n	8003f52 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	23f0      	movs	r3, #240	; 0xf0
 8003f46:	039b      	lsls	r3, r3, #14
 8003f48:	401a      	ands	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d001      	beq.n	8003f56 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e000      	b.n	8003f58 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	0018      	movs	r0, r3
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	b008      	add	sp, #32
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	40021000 	.word	0x40021000

08003f64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d101      	bne.n	8003f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e0bf      	b.n	80040f8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f78:	4b61      	ldr	r3, [pc, #388]	; (8004100 <HAL_RCC_ClockConfig+0x19c>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	4013      	ands	r3, r2
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d911      	bls.n	8003faa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f86:	4b5e      	ldr	r3, [pc, #376]	; (8004100 <HAL_RCC_ClockConfig+0x19c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	4393      	bics	r3, r2
 8003f8e:	0019      	movs	r1, r3
 8003f90:	4b5b      	ldr	r3, [pc, #364]	; (8004100 <HAL_RCC_ClockConfig+0x19c>)
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	430a      	orrs	r2, r1
 8003f96:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f98:	4b59      	ldr	r3, [pc, #356]	; (8004100 <HAL_RCC_ClockConfig+0x19c>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d001      	beq.n	8003faa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e0a6      	b.n	80040f8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	d015      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2204      	movs	r2, #4
 8003fba:	4013      	ands	r3, r2
 8003fbc:	d006      	beq.n	8003fcc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003fbe:	4b51      	ldr	r3, [pc, #324]	; (8004104 <HAL_RCC_ClockConfig+0x1a0>)
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	4b50      	ldr	r3, [pc, #320]	; (8004104 <HAL_RCC_ClockConfig+0x1a0>)
 8003fc4:	21e0      	movs	r1, #224	; 0xe0
 8003fc6:	00c9      	lsls	r1, r1, #3
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fcc:	4b4d      	ldr	r3, [pc, #308]	; (8004104 <HAL_RCC_ClockConfig+0x1a0>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	22f0      	movs	r2, #240	; 0xf0
 8003fd2:	4393      	bics	r3, r2
 8003fd4:	0019      	movs	r1, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689a      	ldr	r2, [r3, #8]
 8003fda:	4b4a      	ldr	r3, [pc, #296]	; (8004104 <HAL_RCC_ClockConfig+0x1a0>)
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	d04c      	beq.n	8004084 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d107      	bne.n	8004002 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ff2:	4b44      	ldr	r3, [pc, #272]	; (8004104 <HAL_RCC_ClockConfig+0x1a0>)
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	2380      	movs	r3, #128	; 0x80
 8003ff8:	029b      	lsls	r3, r3, #10
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	d120      	bne.n	8004040 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e07a      	b.n	80040f8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2b02      	cmp	r3, #2
 8004008:	d107      	bne.n	800401a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800400a:	4b3e      	ldr	r3, [pc, #248]	; (8004104 <HAL_RCC_ClockConfig+0x1a0>)
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	2380      	movs	r3, #128	; 0x80
 8004010:	049b      	lsls	r3, r3, #18
 8004012:	4013      	ands	r3, r2
 8004014:	d114      	bne.n	8004040 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e06e      	b.n	80040f8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2b03      	cmp	r3, #3
 8004020:	d107      	bne.n	8004032 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004022:	4b38      	ldr	r3, [pc, #224]	; (8004104 <HAL_RCC_ClockConfig+0x1a0>)
 8004024:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004026:	2380      	movs	r3, #128	; 0x80
 8004028:	025b      	lsls	r3, r3, #9
 800402a:	4013      	ands	r3, r2
 800402c:	d108      	bne.n	8004040 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e062      	b.n	80040f8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004032:	4b34      	ldr	r3, [pc, #208]	; (8004104 <HAL_RCC_ClockConfig+0x1a0>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2202      	movs	r2, #2
 8004038:	4013      	ands	r3, r2
 800403a:	d101      	bne.n	8004040 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e05b      	b.n	80040f8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004040:	4b30      	ldr	r3, [pc, #192]	; (8004104 <HAL_RCC_ClockConfig+0x1a0>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	2203      	movs	r2, #3
 8004046:	4393      	bics	r3, r2
 8004048:	0019      	movs	r1, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	4b2d      	ldr	r3, [pc, #180]	; (8004104 <HAL_RCC_ClockConfig+0x1a0>)
 8004050:	430a      	orrs	r2, r1
 8004052:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004054:	f7fe fd48 	bl	8002ae8 <HAL_GetTick>
 8004058:	0003      	movs	r3, r0
 800405a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800405c:	e009      	b.n	8004072 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800405e:	f7fe fd43 	bl	8002ae8 <HAL_GetTick>
 8004062:	0002      	movs	r2, r0
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	4a27      	ldr	r2, [pc, #156]	; (8004108 <HAL_RCC_ClockConfig+0x1a4>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e042      	b.n	80040f8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004072:	4b24      	ldr	r3, [pc, #144]	; (8004104 <HAL_RCC_ClockConfig+0x1a0>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	220c      	movs	r2, #12
 8004078:	401a      	ands	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	429a      	cmp	r2, r3
 8004082:	d1ec      	bne.n	800405e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004084:	4b1e      	ldr	r3, [pc, #120]	; (8004100 <HAL_RCC_ClockConfig+0x19c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2201      	movs	r2, #1
 800408a:	4013      	ands	r3, r2
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	429a      	cmp	r2, r3
 8004090:	d211      	bcs.n	80040b6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004092:	4b1b      	ldr	r3, [pc, #108]	; (8004100 <HAL_RCC_ClockConfig+0x19c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2201      	movs	r2, #1
 8004098:	4393      	bics	r3, r2
 800409a:	0019      	movs	r1, r3
 800409c:	4b18      	ldr	r3, [pc, #96]	; (8004100 <HAL_RCC_ClockConfig+0x19c>)
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a4:	4b16      	ldr	r3, [pc, #88]	; (8004100 <HAL_RCC_ClockConfig+0x19c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2201      	movs	r2, #1
 80040aa:	4013      	ands	r3, r2
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d001      	beq.n	80040b6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e020      	b.n	80040f8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2204      	movs	r2, #4
 80040bc:	4013      	ands	r3, r2
 80040be:	d009      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80040c0:	4b10      	ldr	r3, [pc, #64]	; (8004104 <HAL_RCC_ClockConfig+0x1a0>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	4a11      	ldr	r2, [pc, #68]	; (800410c <HAL_RCC_ClockConfig+0x1a8>)
 80040c6:	4013      	ands	r3, r2
 80040c8:	0019      	movs	r1, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	4b0d      	ldr	r3, [pc, #52]	; (8004104 <HAL_RCC_ClockConfig+0x1a0>)
 80040d0:	430a      	orrs	r2, r1
 80040d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80040d4:	f000 f820 	bl	8004118 <HAL_RCC_GetSysClockFreq>
 80040d8:	0001      	movs	r1, r0
 80040da:	4b0a      	ldr	r3, [pc, #40]	; (8004104 <HAL_RCC_ClockConfig+0x1a0>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	091b      	lsrs	r3, r3, #4
 80040e0:	220f      	movs	r2, #15
 80040e2:	4013      	ands	r3, r2
 80040e4:	4a0a      	ldr	r2, [pc, #40]	; (8004110 <HAL_RCC_ClockConfig+0x1ac>)
 80040e6:	5cd3      	ldrb	r3, [r2, r3]
 80040e8:	000a      	movs	r2, r1
 80040ea:	40da      	lsrs	r2, r3
 80040ec:	4b09      	ldr	r3, [pc, #36]	; (8004114 <HAL_RCC_ClockConfig+0x1b0>)
 80040ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80040f0:	2003      	movs	r0, #3
 80040f2:	f7fe fb31 	bl	8002758 <HAL_InitTick>
  
  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	0018      	movs	r0, r3
 80040fa:	46bd      	mov	sp, r7
 80040fc:	b004      	add	sp, #16
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40022000 	.word	0x40022000
 8004104:	40021000 	.word	0x40021000
 8004108:	00001388 	.word	0x00001388
 800410c:	fffff8ff 	.word	0xfffff8ff
 8004110:	0800a2c8 	.word	0x0800a2c8
 8004114:	20000000 	.word	0x20000000

08004118 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004118:	b590      	push	{r4, r7, lr}
 800411a:	b08f      	sub	sp, #60	; 0x3c
 800411c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800411e:	2314      	movs	r3, #20
 8004120:	18fb      	adds	r3, r7, r3
 8004122:	4a38      	ldr	r2, [pc, #224]	; (8004204 <HAL_RCC_GetSysClockFreq+0xec>)
 8004124:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004126:	c313      	stmia	r3!, {r0, r1, r4}
 8004128:	6812      	ldr	r2, [r2, #0]
 800412a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800412c:	1d3b      	adds	r3, r7, #4
 800412e:	4a36      	ldr	r2, [pc, #216]	; (8004208 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004130:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004132:	c313      	stmia	r3!, {r0, r1, r4}
 8004134:	6812      	ldr	r2, [r2, #0]
 8004136:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800413c:	2300      	movs	r3, #0
 800413e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004140:	2300      	movs	r3, #0
 8004142:	637b      	str	r3, [r7, #52]	; 0x34
 8004144:	2300      	movs	r3, #0
 8004146:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800414c:	4b2f      	ldr	r3, [pc, #188]	; (800420c <HAL_RCC_GetSysClockFreq+0xf4>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004154:	220c      	movs	r2, #12
 8004156:	4013      	ands	r3, r2
 8004158:	2b0c      	cmp	r3, #12
 800415a:	d047      	beq.n	80041ec <HAL_RCC_GetSysClockFreq+0xd4>
 800415c:	d849      	bhi.n	80041f2 <HAL_RCC_GetSysClockFreq+0xda>
 800415e:	2b04      	cmp	r3, #4
 8004160:	d002      	beq.n	8004168 <HAL_RCC_GetSysClockFreq+0x50>
 8004162:	2b08      	cmp	r3, #8
 8004164:	d003      	beq.n	800416e <HAL_RCC_GetSysClockFreq+0x56>
 8004166:	e044      	b.n	80041f2 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004168:	4b29      	ldr	r3, [pc, #164]	; (8004210 <HAL_RCC_GetSysClockFreq+0xf8>)
 800416a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800416c:	e044      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800416e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004170:	0c9b      	lsrs	r3, r3, #18
 8004172:	220f      	movs	r2, #15
 8004174:	4013      	ands	r3, r2
 8004176:	2214      	movs	r2, #20
 8004178:	18ba      	adds	r2, r7, r2
 800417a:	5cd3      	ldrb	r3, [r2, r3]
 800417c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800417e:	4b23      	ldr	r3, [pc, #140]	; (800420c <HAL_RCC_GetSysClockFreq+0xf4>)
 8004180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004182:	220f      	movs	r2, #15
 8004184:	4013      	ands	r3, r2
 8004186:	1d3a      	adds	r2, r7, #4
 8004188:	5cd3      	ldrb	r3, [r2, r3]
 800418a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800418c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800418e:	23c0      	movs	r3, #192	; 0xc0
 8004190:	025b      	lsls	r3, r3, #9
 8004192:	401a      	ands	r2, r3
 8004194:	2380      	movs	r3, #128	; 0x80
 8004196:	025b      	lsls	r3, r3, #9
 8004198:	429a      	cmp	r2, r3
 800419a:	d109      	bne.n	80041b0 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800419c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800419e:	481c      	ldr	r0, [pc, #112]	; (8004210 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041a0:	f7fb ffce 	bl	8000140 <__udivsi3>
 80041a4:	0003      	movs	r3, r0
 80041a6:	001a      	movs	r2, r3
 80041a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041aa:	4353      	muls	r3, r2
 80041ac:	637b      	str	r3, [r7, #52]	; 0x34
 80041ae:	e01a      	b.n	80041e6 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80041b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041b2:	23c0      	movs	r3, #192	; 0xc0
 80041b4:	025b      	lsls	r3, r3, #9
 80041b6:	401a      	ands	r2, r3
 80041b8:	23c0      	movs	r3, #192	; 0xc0
 80041ba:	025b      	lsls	r3, r3, #9
 80041bc:	429a      	cmp	r2, r3
 80041be:	d109      	bne.n	80041d4 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041c2:	4814      	ldr	r0, [pc, #80]	; (8004214 <HAL_RCC_GetSysClockFreq+0xfc>)
 80041c4:	f7fb ffbc 	bl	8000140 <__udivsi3>
 80041c8:	0003      	movs	r3, r0
 80041ca:	001a      	movs	r2, r3
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	4353      	muls	r3, r2
 80041d0:	637b      	str	r3, [r7, #52]	; 0x34
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041d6:	480e      	ldr	r0, [pc, #56]	; (8004210 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041d8:	f7fb ffb2 	bl	8000140 <__udivsi3>
 80041dc:	0003      	movs	r3, r0
 80041de:	001a      	movs	r2, r3
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	4353      	muls	r3, r2
 80041e4:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80041e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80041ea:	e005      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80041ec:	4b09      	ldr	r3, [pc, #36]	; (8004214 <HAL_RCC_GetSysClockFreq+0xfc>)
 80041ee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80041f0:	e002      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041f2:	4b07      	ldr	r3, [pc, #28]	; (8004210 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041f4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80041f6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80041f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80041fa:	0018      	movs	r0, r3
 80041fc:	46bd      	mov	sp, r7
 80041fe:	b00f      	add	sp, #60	; 0x3c
 8004200:	bd90      	pop	{r4, r7, pc}
 8004202:	46c0      	nop			; (mov r8, r8)
 8004204:	0800a228 	.word	0x0800a228
 8004208:	0800a238 	.word	0x0800a238
 800420c:	40021000 	.word	0x40021000
 8004210:	007a1200 	.word	0x007a1200
 8004214:	02dc6c00 	.word	0x02dc6c00

08004218 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800421c:	4b02      	ldr	r3, [pc, #8]	; (8004228 <HAL_RCC_GetHCLKFreq+0x10>)
 800421e:	681b      	ldr	r3, [r3, #0]
}
 8004220:	0018      	movs	r0, r3
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	46c0      	nop			; (mov r8, r8)
 8004228:	20000000 	.word	0x20000000

0800422c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004230:	f7ff fff2 	bl	8004218 <HAL_RCC_GetHCLKFreq>
 8004234:	0001      	movs	r1, r0
 8004236:	4b06      	ldr	r3, [pc, #24]	; (8004250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	0a1b      	lsrs	r3, r3, #8
 800423c:	2207      	movs	r2, #7
 800423e:	4013      	ands	r3, r2
 8004240:	4a04      	ldr	r2, [pc, #16]	; (8004254 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004242:	5cd3      	ldrb	r3, [r2, r3]
 8004244:	40d9      	lsrs	r1, r3
 8004246:	000b      	movs	r3, r1
}    
 8004248:	0018      	movs	r0, r3
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	46c0      	nop			; (mov r8, r8)
 8004250:	40021000 	.word	0x40021000
 8004254:	0800a2d8 	.word	0x0800a2d8

08004258 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2207      	movs	r2, #7
 8004266:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004268:	4b0e      	ldr	r3, [pc, #56]	; (80042a4 <HAL_RCC_GetClockConfig+0x4c>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2203      	movs	r2, #3
 800426e:	401a      	ands	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004274:	4b0b      	ldr	r3, [pc, #44]	; (80042a4 <HAL_RCC_GetClockConfig+0x4c>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	22f0      	movs	r2, #240	; 0xf0
 800427a:	401a      	ands	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8004280:	4b08      	ldr	r3, [pc, #32]	; (80042a4 <HAL_RCC_GetClockConfig+0x4c>)
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	23e0      	movs	r3, #224	; 0xe0
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	401a      	ands	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 800428e:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <HAL_RCC_GetClockConfig+0x50>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2201      	movs	r2, #1
 8004294:	401a      	ands	r2, r3
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	601a      	str	r2, [r3, #0]
}
 800429a:	46c0      	nop			; (mov r8, r8)
 800429c:	46bd      	mov	sp, r7
 800429e:	b002      	add	sp, #8
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	46c0      	nop			; (mov r8, r8)
 80042a4:	40021000 	.word	0x40021000
 80042a8:	40022000 	.word	0x40022000

080042ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e042      	b.n	8004344 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	223d      	movs	r2, #61	; 0x3d
 80042c2:	5c9b      	ldrb	r3, [r3, r2]
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d107      	bne.n	80042da <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	223c      	movs	r2, #60	; 0x3c
 80042ce:	2100      	movs	r1, #0
 80042d0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	0018      	movs	r0, r3
 80042d6:	f000 f839 	bl	800434c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	223d      	movs	r2, #61	; 0x3d
 80042de:	2102      	movs	r1, #2
 80042e0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	3304      	adds	r3, #4
 80042ea:	0019      	movs	r1, r3
 80042ec:	0010      	movs	r0, r2
 80042ee:	f000 f9bd 	bl	800466c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2246      	movs	r2, #70	; 0x46
 80042f6:	2101      	movs	r1, #1
 80042f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	223e      	movs	r2, #62	; 0x3e
 80042fe:	2101      	movs	r1, #1
 8004300:	5499      	strb	r1, [r3, r2]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	223f      	movs	r2, #63	; 0x3f
 8004306:	2101      	movs	r1, #1
 8004308:	5499      	strb	r1, [r3, r2]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2240      	movs	r2, #64	; 0x40
 800430e:	2101      	movs	r1, #1
 8004310:	5499      	strb	r1, [r3, r2]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2241      	movs	r2, #65	; 0x41
 8004316:	2101      	movs	r1, #1
 8004318:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2242      	movs	r2, #66	; 0x42
 800431e:	2101      	movs	r1, #1
 8004320:	5499      	strb	r1, [r3, r2]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2243      	movs	r2, #67	; 0x43
 8004326:	2101      	movs	r1, #1
 8004328:	5499      	strb	r1, [r3, r2]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2244      	movs	r2, #68	; 0x44
 800432e:	2101      	movs	r1, #1
 8004330:	5499      	strb	r1, [r3, r2]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2245      	movs	r2, #69	; 0x45
 8004336:	2101      	movs	r1, #1
 8004338:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	223d      	movs	r2, #61	; 0x3d
 800433e:	2101      	movs	r1, #1
 8004340:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	0018      	movs	r0, r3
 8004346:	46bd      	mov	sp, r7
 8004348:	b002      	add	sp, #8
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004354:	46c0      	nop			; (mov r8, r8)
 8004356:	46bd      	mov	sp, r7
 8004358:	b002      	add	sp, #8
 800435a:	bd80      	pop	{r7, pc}

0800435c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	223d      	movs	r2, #61	; 0x3d
 8004368:	5c9b      	ldrb	r3, [r3, r2]
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b01      	cmp	r3, #1
 800436e:	d001      	beq.n	8004374 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e03b      	b.n	80043ec <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	223d      	movs	r2, #61	; 0x3d
 8004378:	2102      	movs	r1, #2
 800437a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68da      	ldr	r2, [r3, #12]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2101      	movs	r1, #1
 8004388:	430a      	orrs	r2, r1
 800438a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a18      	ldr	r2, [pc, #96]	; (80043f4 <HAL_TIM_Base_Start_IT+0x98>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d00f      	beq.n	80043b6 <HAL_TIM_Base_Start_IT+0x5a>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	2380      	movs	r3, #128	; 0x80
 800439c:	05db      	lsls	r3, r3, #23
 800439e:	429a      	cmp	r2, r3
 80043a0:	d009      	beq.n	80043b6 <HAL_TIM_Base_Start_IT+0x5a>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a14      	ldr	r2, [pc, #80]	; (80043f8 <HAL_TIM_Base_Start_IT+0x9c>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d004      	beq.n	80043b6 <HAL_TIM_Base_Start_IT+0x5a>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a12      	ldr	r2, [pc, #72]	; (80043fc <HAL_TIM_Base_Start_IT+0xa0>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d111      	bne.n	80043da <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	2207      	movs	r2, #7
 80043be:	4013      	ands	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2b06      	cmp	r3, #6
 80043c6:	d010      	beq.n	80043ea <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2101      	movs	r1, #1
 80043d4:	430a      	orrs	r2, r1
 80043d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d8:	e007      	b.n	80043ea <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2101      	movs	r1, #1
 80043e6:	430a      	orrs	r2, r1
 80043e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	0018      	movs	r0, r3
 80043ee:	46bd      	mov	sp, r7
 80043f0:	b004      	add	sp, #16
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40012c00 	.word	0x40012c00
 80043f8:	40000400 	.word	0x40000400
 80043fc:	40014000 	.word	0x40014000

08004400 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	2202      	movs	r2, #2
 8004410:	4013      	ands	r3, r2
 8004412:	2b02      	cmp	r3, #2
 8004414:	d124      	bne.n	8004460 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	2202      	movs	r2, #2
 800441e:	4013      	ands	r3, r2
 8004420:	2b02      	cmp	r3, #2
 8004422:	d11d      	bne.n	8004460 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2203      	movs	r2, #3
 800442a:	4252      	negs	r2, r2
 800442c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	2203      	movs	r2, #3
 800443c:	4013      	ands	r3, r2
 800443e:	d004      	beq.n	800444a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	0018      	movs	r0, r3
 8004444:	f000 f8fa 	bl	800463c <HAL_TIM_IC_CaptureCallback>
 8004448:	e007      	b.n	800445a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	0018      	movs	r0, r3
 800444e:	f000 f8ed 	bl	800462c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	0018      	movs	r0, r3
 8004456:	f000 f8f9 	bl	800464c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	2204      	movs	r2, #4
 8004468:	4013      	ands	r3, r2
 800446a:	2b04      	cmp	r3, #4
 800446c:	d125      	bne.n	80044ba <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	2204      	movs	r2, #4
 8004476:	4013      	ands	r3, r2
 8004478:	2b04      	cmp	r3, #4
 800447a:	d11e      	bne.n	80044ba <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2205      	movs	r2, #5
 8004482:	4252      	negs	r2, r2
 8004484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2202      	movs	r2, #2
 800448a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	699a      	ldr	r2, [r3, #24]
 8004492:	23c0      	movs	r3, #192	; 0xc0
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4013      	ands	r3, r2
 8004498:	d004      	beq.n	80044a4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	0018      	movs	r0, r3
 800449e:	f000 f8cd 	bl	800463c <HAL_TIM_IC_CaptureCallback>
 80044a2:	e007      	b.n	80044b4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	0018      	movs	r0, r3
 80044a8:	f000 f8c0 	bl	800462c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	0018      	movs	r0, r3
 80044b0:	f000 f8cc 	bl	800464c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	2208      	movs	r2, #8
 80044c2:	4013      	ands	r3, r2
 80044c4:	2b08      	cmp	r3, #8
 80044c6:	d124      	bne.n	8004512 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	2208      	movs	r2, #8
 80044d0:	4013      	ands	r3, r2
 80044d2:	2b08      	cmp	r3, #8
 80044d4:	d11d      	bne.n	8004512 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2209      	movs	r2, #9
 80044dc:	4252      	negs	r2, r2
 80044de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2204      	movs	r2, #4
 80044e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	69db      	ldr	r3, [r3, #28]
 80044ec:	2203      	movs	r2, #3
 80044ee:	4013      	ands	r3, r2
 80044f0:	d004      	beq.n	80044fc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	0018      	movs	r0, r3
 80044f6:	f000 f8a1 	bl	800463c <HAL_TIM_IC_CaptureCallback>
 80044fa:	e007      	b.n	800450c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	0018      	movs	r0, r3
 8004500:	f000 f894 	bl	800462c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	0018      	movs	r0, r3
 8004508:	f000 f8a0 	bl	800464c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	2210      	movs	r2, #16
 800451a:	4013      	ands	r3, r2
 800451c:	2b10      	cmp	r3, #16
 800451e:	d125      	bne.n	800456c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	2210      	movs	r2, #16
 8004528:	4013      	ands	r3, r2
 800452a:	2b10      	cmp	r3, #16
 800452c:	d11e      	bne.n	800456c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2211      	movs	r2, #17
 8004534:	4252      	negs	r2, r2
 8004536:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2208      	movs	r2, #8
 800453c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	69da      	ldr	r2, [r3, #28]
 8004544:	23c0      	movs	r3, #192	; 0xc0
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4013      	ands	r3, r2
 800454a:	d004      	beq.n	8004556 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	0018      	movs	r0, r3
 8004550:	f000 f874 	bl	800463c <HAL_TIM_IC_CaptureCallback>
 8004554:	e007      	b.n	8004566 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	0018      	movs	r0, r3
 800455a:	f000 f867 	bl	800462c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	0018      	movs	r0, r3
 8004562:	f000 f873 	bl	800464c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	2201      	movs	r2, #1
 8004574:	4013      	ands	r3, r2
 8004576:	2b01      	cmp	r3, #1
 8004578:	d10f      	bne.n	800459a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	2201      	movs	r2, #1
 8004582:	4013      	ands	r3, r2
 8004584:	2b01      	cmp	r3, #1
 8004586:	d108      	bne.n	800459a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2202      	movs	r2, #2
 800458e:	4252      	negs	r2, r2
 8004590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	0018      	movs	r0, r3
 8004596:	f7fe f807 	bl	80025a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	2280      	movs	r2, #128	; 0x80
 80045a2:	4013      	ands	r3, r2
 80045a4:	2b80      	cmp	r3, #128	; 0x80
 80045a6:	d10f      	bne.n	80045c8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	2280      	movs	r2, #128	; 0x80
 80045b0:	4013      	ands	r3, r2
 80045b2:	2b80      	cmp	r3, #128	; 0x80
 80045b4:	d108      	bne.n	80045c8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2281      	movs	r2, #129	; 0x81
 80045bc:	4252      	negs	r2, r2
 80045be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	0018      	movs	r0, r3
 80045c4:	f000 f8da 	bl	800477c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	2240      	movs	r2, #64	; 0x40
 80045d0:	4013      	ands	r3, r2
 80045d2:	2b40      	cmp	r3, #64	; 0x40
 80045d4:	d10f      	bne.n	80045f6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	2240      	movs	r2, #64	; 0x40
 80045de:	4013      	ands	r3, r2
 80045e0:	2b40      	cmp	r3, #64	; 0x40
 80045e2:	d108      	bne.n	80045f6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2241      	movs	r2, #65	; 0x41
 80045ea:	4252      	negs	r2, r2
 80045ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	0018      	movs	r0, r3
 80045f2:	f000 f833 	bl	800465c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	2220      	movs	r2, #32
 80045fe:	4013      	ands	r3, r2
 8004600:	2b20      	cmp	r3, #32
 8004602:	d10f      	bne.n	8004624 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	2220      	movs	r2, #32
 800460c:	4013      	ands	r3, r2
 800460e:	2b20      	cmp	r3, #32
 8004610:	d108      	bne.n	8004624 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2221      	movs	r2, #33	; 0x21
 8004618:	4252      	negs	r2, r2
 800461a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	0018      	movs	r0, r3
 8004620:	f000 f8a4 	bl	800476c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004624:	46c0      	nop			; (mov r8, r8)
 8004626:	46bd      	mov	sp, r7
 8004628:	b002      	add	sp, #8
 800462a:	bd80      	pop	{r7, pc}

0800462c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004634:	46c0      	nop			; (mov r8, r8)
 8004636:	46bd      	mov	sp, r7
 8004638:	b002      	add	sp, #8
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004644:	46c0      	nop			; (mov r8, r8)
 8004646:	46bd      	mov	sp, r7
 8004648:	b002      	add	sp, #8
 800464a:	bd80      	pop	{r7, pc}

0800464c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004654:	46c0      	nop			; (mov r8, r8)
 8004656:	46bd      	mov	sp, r7
 8004658:	b002      	add	sp, #8
 800465a:	bd80      	pop	{r7, pc}

0800465c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004664:	46c0      	nop			; (mov r8, r8)
 8004666:	46bd      	mov	sp, r7
 8004668:	b002      	add	sp, #8
 800466a:	bd80      	pop	{r7, pc}

0800466c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a34      	ldr	r2, [pc, #208]	; (8004750 <TIM_Base_SetConfig+0xe4>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d008      	beq.n	8004696 <TIM_Base_SetConfig+0x2a>
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	2380      	movs	r3, #128	; 0x80
 8004688:	05db      	lsls	r3, r3, #23
 800468a:	429a      	cmp	r2, r3
 800468c:	d003      	beq.n	8004696 <TIM_Base_SetConfig+0x2a>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a30      	ldr	r2, [pc, #192]	; (8004754 <TIM_Base_SetConfig+0xe8>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d108      	bne.n	80046a8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2270      	movs	r2, #112	; 0x70
 800469a:	4393      	bics	r3, r2
 800469c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a29      	ldr	r2, [pc, #164]	; (8004750 <TIM_Base_SetConfig+0xe4>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d018      	beq.n	80046e2 <TIM_Base_SetConfig+0x76>
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	2380      	movs	r3, #128	; 0x80
 80046b4:	05db      	lsls	r3, r3, #23
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d013      	beq.n	80046e2 <TIM_Base_SetConfig+0x76>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a25      	ldr	r2, [pc, #148]	; (8004754 <TIM_Base_SetConfig+0xe8>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d00f      	beq.n	80046e2 <TIM_Base_SetConfig+0x76>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a24      	ldr	r2, [pc, #144]	; (8004758 <TIM_Base_SetConfig+0xec>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d00b      	beq.n	80046e2 <TIM_Base_SetConfig+0x76>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a23      	ldr	r2, [pc, #140]	; (800475c <TIM_Base_SetConfig+0xf0>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d007      	beq.n	80046e2 <TIM_Base_SetConfig+0x76>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a22      	ldr	r2, [pc, #136]	; (8004760 <TIM_Base_SetConfig+0xf4>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d003      	beq.n	80046e2 <TIM_Base_SetConfig+0x76>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a21      	ldr	r2, [pc, #132]	; (8004764 <TIM_Base_SetConfig+0xf8>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d108      	bne.n	80046f4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	4a20      	ldr	r2, [pc, #128]	; (8004768 <TIM_Base_SetConfig+0xfc>)
 80046e6:	4013      	ands	r3, r2
 80046e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2280      	movs	r2, #128	; 0x80
 80046f8:	4393      	bics	r3, r2
 80046fa:	001a      	movs	r2, r3
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	4313      	orrs	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	689a      	ldr	r2, [r3, #8]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a0c      	ldr	r2, [pc, #48]	; (8004750 <TIM_Base_SetConfig+0xe4>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d00b      	beq.n	800473a <TIM_Base_SetConfig+0xce>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a0d      	ldr	r2, [pc, #52]	; (800475c <TIM_Base_SetConfig+0xf0>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d007      	beq.n	800473a <TIM_Base_SetConfig+0xce>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a0c      	ldr	r2, [pc, #48]	; (8004760 <TIM_Base_SetConfig+0xf4>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d003      	beq.n	800473a <TIM_Base_SetConfig+0xce>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a0b      	ldr	r2, [pc, #44]	; (8004764 <TIM_Base_SetConfig+0xf8>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d103      	bne.n	8004742 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	691a      	ldr	r2, [r3, #16]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	615a      	str	r2, [r3, #20]
}
 8004748:	46c0      	nop			; (mov r8, r8)
 800474a:	46bd      	mov	sp, r7
 800474c:	b004      	add	sp, #16
 800474e:	bd80      	pop	{r7, pc}
 8004750:	40012c00 	.word	0x40012c00
 8004754:	40000400 	.word	0x40000400
 8004758:	40002000 	.word	0x40002000
 800475c:	40014000 	.word	0x40014000
 8004760:	40014400 	.word	0x40014400
 8004764:	40014800 	.word	0x40014800
 8004768:	fffffcff 	.word	0xfffffcff

0800476c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004774:	46c0      	nop			; (mov r8, r8)
 8004776:	46bd      	mov	sp, r7
 8004778:	b002      	add	sp, #8
 800477a:	bd80      	pop	{r7, pc}

0800477c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004784:	46c0      	nop			; (mov r8, r8)
 8004786:	46bd      	mov	sp, r7
 8004788:	b002      	add	sp, #8
 800478a:	bd80      	pop	{r7, pc}

0800478c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e044      	b.n	8004828 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d107      	bne.n	80047b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2274      	movs	r2, #116	; 0x74
 80047aa:	2100      	movs	r1, #0
 80047ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	0018      	movs	r0, r3
 80047b2:	f7fd ff7b 	bl	80026ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2224      	movs	r2, #36	; 0x24
 80047ba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2101      	movs	r1, #1
 80047c8:	438a      	bics	r2, r1
 80047ca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	0018      	movs	r0, r3
 80047d0:	f000 fbce 	bl	8004f70 <UART_SetConfig>
 80047d4:	0003      	movs	r3, r0
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d101      	bne.n	80047de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e024      	b.n	8004828 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	0018      	movs	r0, r3
 80047ea:	f000 fd49 	bl	8005280 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	490d      	ldr	r1, [pc, #52]	; (8004830 <HAL_UART_Init+0xa4>)
 80047fa:	400a      	ands	r2, r1
 80047fc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	212a      	movs	r1, #42	; 0x2a
 800480a:	438a      	bics	r2, r1
 800480c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2101      	movs	r1, #1
 800481a:	430a      	orrs	r2, r1
 800481c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	0018      	movs	r0, r3
 8004822:	f000 fde1 	bl	80053e8 <UART_CheckIdleState>
 8004826:	0003      	movs	r3, r0
}
 8004828:	0018      	movs	r0, r3
 800482a:	46bd      	mov	sp, r7
 800482c:	b002      	add	sp, #8
 800482e:	bd80      	pop	{r7, pc}
 8004830:	ffffb7ff 	.word	0xffffb7ff

08004834 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b08a      	sub	sp, #40	; 0x28
 8004838:	af02      	add	r7, sp, #8
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	603b      	str	r3, [r7, #0]
 8004840:	1dbb      	adds	r3, r7, #6
 8004842:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004848:	2b20      	cmp	r3, #32
 800484a:	d000      	beq.n	800484e <HAL_UART_Transmit+0x1a>
 800484c:	e096      	b.n	800497c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d003      	beq.n	800485c <HAL_UART_Transmit+0x28>
 8004854:	1dbb      	adds	r3, r7, #6
 8004856:	881b      	ldrh	r3, [r3, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e08e      	b.n	800497e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	689a      	ldr	r2, [r3, #8]
 8004864:	2380      	movs	r3, #128	; 0x80
 8004866:	015b      	lsls	r3, r3, #5
 8004868:	429a      	cmp	r2, r3
 800486a:	d109      	bne.n	8004880 <HAL_UART_Transmit+0x4c>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d105      	bne.n	8004880 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	2201      	movs	r2, #1
 8004878:	4013      	ands	r3, r2
 800487a:	d001      	beq.n	8004880 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e07e      	b.n	800497e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2274      	movs	r2, #116	; 0x74
 8004884:	5c9b      	ldrb	r3, [r3, r2]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d101      	bne.n	800488e <HAL_UART_Transmit+0x5a>
 800488a:	2302      	movs	r3, #2
 800488c:	e077      	b.n	800497e <HAL_UART_Transmit+0x14a>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2274      	movs	r2, #116	; 0x74
 8004892:	2101      	movs	r1, #1
 8004894:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2280      	movs	r2, #128	; 0x80
 800489a:	2100      	movs	r1, #0
 800489c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2221      	movs	r2, #33	; 0x21
 80048a2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048a4:	f7fe f920 	bl	8002ae8 <HAL_GetTick>
 80048a8:	0003      	movs	r3, r0
 80048aa:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	1dba      	adds	r2, r7, #6
 80048b0:	2150      	movs	r1, #80	; 0x50
 80048b2:	8812      	ldrh	r2, [r2, #0]
 80048b4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	1dba      	adds	r2, r7, #6
 80048ba:	2152      	movs	r1, #82	; 0x52
 80048bc:	8812      	ldrh	r2, [r2, #0]
 80048be:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	2380      	movs	r3, #128	; 0x80
 80048c6:	015b      	lsls	r3, r3, #5
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d108      	bne.n	80048de <HAL_UART_Transmit+0xaa>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d104      	bne.n	80048de <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80048d4:	2300      	movs	r3, #0
 80048d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	61bb      	str	r3, [r7, #24]
 80048dc:	e003      	b.n	80048e6 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048e2:	2300      	movs	r3, #0
 80048e4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2274      	movs	r2, #116	; 0x74
 80048ea:	2100      	movs	r1, #0
 80048ec:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80048ee:	e02d      	b.n	800494c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	0013      	movs	r3, r2
 80048fa:	2200      	movs	r2, #0
 80048fc:	2180      	movs	r1, #128	; 0x80
 80048fe:	f000 fdbb 	bl	8005478 <UART_WaitOnFlagUntilTimeout>
 8004902:	1e03      	subs	r3, r0, #0
 8004904:	d001      	beq.n	800490a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e039      	b.n	800497e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10b      	bne.n	8004928 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	881a      	ldrh	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	05d2      	lsls	r2, r2, #23
 800491a:	0dd2      	lsrs	r2, r2, #23
 800491c:	b292      	uxth	r2, r2
 800491e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	3302      	adds	r3, #2
 8004924:	61bb      	str	r3, [r7, #24]
 8004926:	e008      	b.n	800493a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	781a      	ldrb	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	b292      	uxth	r2, r2
 8004932:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	3301      	adds	r3, #1
 8004938:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2252      	movs	r2, #82	; 0x52
 800493e:	5a9b      	ldrh	r3, [r3, r2]
 8004940:	b29b      	uxth	r3, r3
 8004942:	3b01      	subs	r3, #1
 8004944:	b299      	uxth	r1, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2252      	movs	r2, #82	; 0x52
 800494a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2252      	movs	r2, #82	; 0x52
 8004950:	5a9b      	ldrh	r3, [r3, r2]
 8004952:	b29b      	uxth	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1cb      	bne.n	80048f0 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	0013      	movs	r3, r2
 8004962:	2200      	movs	r2, #0
 8004964:	2140      	movs	r1, #64	; 0x40
 8004966:	f000 fd87 	bl	8005478 <UART_WaitOnFlagUntilTimeout>
 800496a:	1e03      	subs	r3, r0, #0
 800496c:	d001      	beq.n	8004972 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e005      	b.n	800497e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2220      	movs	r2, #32
 8004976:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004978:	2300      	movs	r3, #0
 800497a:	e000      	b.n	800497e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800497c:	2302      	movs	r3, #2
  }
}
 800497e:	0018      	movs	r0, r3
 8004980:	46bd      	mov	sp, r7
 8004982:	b008      	add	sp, #32
 8004984:	bd80      	pop	{r7, pc}
	...

08004988 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004988:	b590      	push	{r4, r7, lr}
 800498a:	b0ab      	sub	sp, #172	; 0xac
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	22a4      	movs	r2, #164	; 0xa4
 8004998:	18b9      	adds	r1, r7, r2
 800499a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	20a0      	movs	r0, #160	; 0xa0
 80049a4:	1839      	adds	r1, r7, r0
 80049a6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	219c      	movs	r1, #156	; 0x9c
 80049b0:	1879      	adds	r1, r7, r1
 80049b2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80049b4:	0011      	movs	r1, r2
 80049b6:	18bb      	adds	r3, r7, r2
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a99      	ldr	r2, [pc, #612]	; (8004c20 <HAL_UART_IRQHandler+0x298>)
 80049bc:	4013      	ands	r3, r2
 80049be:	2298      	movs	r2, #152	; 0x98
 80049c0:	18bc      	adds	r4, r7, r2
 80049c2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80049c4:	18bb      	adds	r3, r7, r2
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d114      	bne.n	80049f6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80049cc:	187b      	adds	r3, r7, r1
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2220      	movs	r2, #32
 80049d2:	4013      	ands	r3, r2
 80049d4:	d00f      	beq.n	80049f6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80049d6:	183b      	adds	r3, r7, r0
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2220      	movs	r2, #32
 80049dc:	4013      	ands	r3, r2
 80049de:	d00a      	beq.n	80049f6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d100      	bne.n	80049ea <HAL_UART_IRQHandler+0x62>
 80049e8:	e296      	b.n	8004f18 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	0010      	movs	r0, r2
 80049f2:	4798      	blx	r3
      }
      return;
 80049f4:	e290      	b.n	8004f18 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80049f6:	2398      	movs	r3, #152	; 0x98
 80049f8:	18fb      	adds	r3, r7, r3
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d100      	bne.n	8004a02 <HAL_UART_IRQHandler+0x7a>
 8004a00:	e114      	b.n	8004c2c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004a02:	239c      	movs	r3, #156	; 0x9c
 8004a04:	18fb      	adds	r3, r7, r3
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	d106      	bne.n	8004a1c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004a0e:	23a0      	movs	r3, #160	; 0xa0
 8004a10:	18fb      	adds	r3, r7, r3
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a83      	ldr	r2, [pc, #524]	; (8004c24 <HAL_UART_IRQHandler+0x29c>)
 8004a16:	4013      	ands	r3, r2
 8004a18:	d100      	bne.n	8004a1c <HAL_UART_IRQHandler+0x94>
 8004a1a:	e107      	b.n	8004c2c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a1c:	23a4      	movs	r3, #164	; 0xa4
 8004a1e:	18fb      	adds	r3, r7, r3
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2201      	movs	r2, #1
 8004a24:	4013      	ands	r3, r2
 8004a26:	d012      	beq.n	8004a4e <HAL_UART_IRQHandler+0xc6>
 8004a28:	23a0      	movs	r3, #160	; 0xa0
 8004a2a:	18fb      	adds	r3, r7, r3
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	2380      	movs	r3, #128	; 0x80
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	4013      	ands	r3, r2
 8004a34:	d00b      	beq.n	8004a4e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2280      	movs	r2, #128	; 0x80
 8004a42:	589b      	ldr	r3, [r3, r2]
 8004a44:	2201      	movs	r2, #1
 8004a46:	431a      	orrs	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2180      	movs	r1, #128	; 0x80
 8004a4c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a4e:	23a4      	movs	r3, #164	; 0xa4
 8004a50:	18fb      	adds	r3, r7, r3
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2202      	movs	r2, #2
 8004a56:	4013      	ands	r3, r2
 8004a58:	d011      	beq.n	8004a7e <HAL_UART_IRQHandler+0xf6>
 8004a5a:	239c      	movs	r3, #156	; 0x9c
 8004a5c:	18fb      	adds	r3, r7, r3
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2201      	movs	r2, #1
 8004a62:	4013      	ands	r3, r2
 8004a64:	d00b      	beq.n	8004a7e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2280      	movs	r2, #128	; 0x80
 8004a72:	589b      	ldr	r3, [r3, r2]
 8004a74:	2204      	movs	r2, #4
 8004a76:	431a      	orrs	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2180      	movs	r1, #128	; 0x80
 8004a7c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a7e:	23a4      	movs	r3, #164	; 0xa4
 8004a80:	18fb      	adds	r3, r7, r3
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2204      	movs	r2, #4
 8004a86:	4013      	ands	r3, r2
 8004a88:	d011      	beq.n	8004aae <HAL_UART_IRQHandler+0x126>
 8004a8a:	239c      	movs	r3, #156	; 0x9c
 8004a8c:	18fb      	adds	r3, r7, r3
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2201      	movs	r2, #1
 8004a92:	4013      	ands	r3, r2
 8004a94:	d00b      	beq.n	8004aae <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2204      	movs	r2, #4
 8004a9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2280      	movs	r2, #128	; 0x80
 8004aa2:	589b      	ldr	r3, [r3, r2]
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2180      	movs	r1, #128	; 0x80
 8004aac:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004aae:	23a4      	movs	r3, #164	; 0xa4
 8004ab0:	18fb      	adds	r3, r7, r3
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2208      	movs	r2, #8
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	d017      	beq.n	8004aea <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004aba:	23a0      	movs	r3, #160	; 0xa0
 8004abc:	18fb      	adds	r3, r7, r3
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	d105      	bne.n	8004ad2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004ac6:	239c      	movs	r3, #156	; 0x9c
 8004ac8:	18fb      	adds	r3, r7, r3
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2201      	movs	r2, #1
 8004ace:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ad0:	d00b      	beq.n	8004aea <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2208      	movs	r2, #8
 8004ad8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2280      	movs	r2, #128	; 0x80
 8004ade:	589b      	ldr	r3, [r3, r2]
 8004ae0:	2208      	movs	r2, #8
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2180      	movs	r1, #128	; 0x80
 8004ae8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004aea:	23a4      	movs	r3, #164	; 0xa4
 8004aec:	18fb      	adds	r3, r7, r3
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	2380      	movs	r3, #128	; 0x80
 8004af2:	011b      	lsls	r3, r3, #4
 8004af4:	4013      	ands	r3, r2
 8004af6:	d013      	beq.n	8004b20 <HAL_UART_IRQHandler+0x198>
 8004af8:	23a0      	movs	r3, #160	; 0xa0
 8004afa:	18fb      	adds	r3, r7, r3
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	2380      	movs	r3, #128	; 0x80
 8004b00:	04db      	lsls	r3, r3, #19
 8004b02:	4013      	ands	r3, r2
 8004b04:	d00c      	beq.n	8004b20 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2280      	movs	r2, #128	; 0x80
 8004b0c:	0112      	lsls	r2, r2, #4
 8004b0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2280      	movs	r2, #128	; 0x80
 8004b14:	589b      	ldr	r3, [r3, r2]
 8004b16:	2220      	movs	r2, #32
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2180      	movs	r1, #128	; 0x80
 8004b1e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2280      	movs	r2, #128	; 0x80
 8004b24:	589b      	ldr	r3, [r3, r2]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d100      	bne.n	8004b2c <HAL_UART_IRQHandler+0x1a4>
 8004b2a:	e1f7      	b.n	8004f1c <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b2c:	23a4      	movs	r3, #164	; 0xa4
 8004b2e:	18fb      	adds	r3, r7, r3
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2220      	movs	r2, #32
 8004b34:	4013      	ands	r3, r2
 8004b36:	d00e      	beq.n	8004b56 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b38:	23a0      	movs	r3, #160	; 0xa0
 8004b3a:	18fb      	adds	r3, r7, r3
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	4013      	ands	r3, r2
 8004b42:	d008      	beq.n	8004b56 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d004      	beq.n	8004b56 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	0010      	movs	r0, r2
 8004b54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2280      	movs	r2, #128	; 0x80
 8004b5a:	589b      	ldr	r3, [r3, r2]
 8004b5c:	2194      	movs	r1, #148	; 0x94
 8004b5e:	187a      	adds	r2, r7, r1
 8004b60:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	2240      	movs	r2, #64	; 0x40
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	2b40      	cmp	r3, #64	; 0x40
 8004b6e:	d004      	beq.n	8004b7a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b70:	187b      	adds	r3, r7, r1
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2228      	movs	r2, #40	; 0x28
 8004b76:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b78:	d047      	beq.n	8004c0a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	0018      	movs	r0, r3
 8004b7e:	f000 fd3f 	bl	8005600 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	2240      	movs	r2, #64	; 0x40
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	2b40      	cmp	r3, #64	; 0x40
 8004b8e:	d137      	bne.n	8004c00 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b90:	f3ef 8310 	mrs	r3, PRIMASK
 8004b94:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004b96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b98:	2090      	movs	r0, #144	; 0x90
 8004b9a:	183a      	adds	r2, r7, r0
 8004b9c:	6013      	str	r3, [r2, #0]
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ba2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ba4:	f383 8810 	msr	PRIMASK, r3
}
 8004ba8:	46c0      	nop			; (mov r8, r8)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2140      	movs	r1, #64	; 0x40
 8004bb6:	438a      	bics	r2, r1
 8004bb8:	609a      	str	r2, [r3, #8]
 8004bba:	183b      	adds	r3, r7, r0
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bc2:	f383 8810 	msr	PRIMASK, r3
}
 8004bc6:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d012      	beq.n	8004bf6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd4:	4a14      	ldr	r2, [pc, #80]	; (8004c28 <HAL_UART_IRQHandler+0x2a0>)
 8004bd6:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bdc:	0018      	movs	r0, r3
 8004bde:	f7fe fc60 	bl	80034a2 <HAL_DMA_Abort_IT>
 8004be2:	1e03      	subs	r3, r0, #0
 8004be4:	d01a      	beq.n	8004c1c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bf4:	e012      	b.n	8004c1c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	0018      	movs	r0, r3
 8004bfa:	f000 f9a5 	bl	8004f48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bfe:	e00d      	b.n	8004c1c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	0018      	movs	r0, r3
 8004c04:	f000 f9a0 	bl	8004f48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c08:	e008      	b.n	8004c1c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	f000 f99b 	bl	8004f48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2280      	movs	r2, #128	; 0x80
 8004c16:	2100      	movs	r1, #0
 8004c18:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004c1a:	e17f      	b.n	8004f1c <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c1c:	46c0      	nop			; (mov r8, r8)
    return;
 8004c1e:	e17d      	b.n	8004f1c <HAL_UART_IRQHandler+0x594>
 8004c20:	0000080f 	.word	0x0000080f
 8004c24:	04000120 	.word	0x04000120
 8004c28:	080056c5 	.word	0x080056c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d000      	beq.n	8004c36 <HAL_UART_IRQHandler+0x2ae>
 8004c34:	e131      	b.n	8004e9a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004c36:	23a4      	movs	r3, #164	; 0xa4
 8004c38:	18fb      	adds	r3, r7, r3
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2210      	movs	r2, #16
 8004c3e:	4013      	ands	r3, r2
 8004c40:	d100      	bne.n	8004c44 <HAL_UART_IRQHandler+0x2bc>
 8004c42:	e12a      	b.n	8004e9a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004c44:	23a0      	movs	r3, #160	; 0xa0
 8004c46:	18fb      	adds	r3, r7, r3
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2210      	movs	r2, #16
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	d100      	bne.n	8004c52 <HAL_UART_IRQHandler+0x2ca>
 8004c50:	e123      	b.n	8004e9a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2210      	movs	r2, #16
 8004c58:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	2240      	movs	r2, #64	; 0x40
 8004c62:	4013      	ands	r3, r2
 8004c64:	2b40      	cmp	r3, #64	; 0x40
 8004c66:	d000      	beq.n	8004c6a <HAL_UART_IRQHandler+0x2e2>
 8004c68:	e09b      	b.n	8004da2 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	217e      	movs	r1, #126	; 0x7e
 8004c74:	187b      	adds	r3, r7, r1
 8004c76:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004c78:	187b      	adds	r3, r7, r1
 8004c7a:	881b      	ldrh	r3, [r3, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d100      	bne.n	8004c82 <HAL_UART_IRQHandler+0x2fa>
 8004c80:	e14e      	b.n	8004f20 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2258      	movs	r2, #88	; 0x58
 8004c86:	5a9b      	ldrh	r3, [r3, r2]
 8004c88:	187a      	adds	r2, r7, r1
 8004c8a:	8812      	ldrh	r2, [r2, #0]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d300      	bcc.n	8004c92 <HAL_UART_IRQHandler+0x30a>
 8004c90:	e146      	b.n	8004f20 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	187a      	adds	r2, r7, r1
 8004c96:	215a      	movs	r1, #90	; 0x5a
 8004c98:	8812      	ldrh	r2, [r2, #0]
 8004c9a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	2b20      	cmp	r3, #32
 8004ca4:	d06e      	beq.n	8004d84 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ca6:	f3ef 8310 	mrs	r3, PRIMASK
 8004caa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cae:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cb6:	f383 8810 	msr	PRIMASK, r3
}
 8004cba:	46c0      	nop			; (mov r8, r8)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	499a      	ldr	r1, [pc, #616]	; (8004f30 <HAL_UART_IRQHandler+0x5a8>)
 8004cc8:	400a      	ands	r2, r1
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cce:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd2:	f383 8810 	msr	PRIMASK, r3
}
 8004cd6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cd8:	f3ef 8310 	mrs	r3, PRIMASK
 8004cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ce0:	677b      	str	r3, [r7, #116]	; 0x74
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ce8:	f383 8810 	msr	PRIMASK, r3
}
 8004cec:	46c0      	nop			; (mov r8, r8)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	689a      	ldr	r2, [r3, #8]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	438a      	bics	r2, r1
 8004cfc:	609a      	str	r2, [r3, #8]
 8004cfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d00:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d04:	f383 8810 	msr	PRIMASK, r3
}
 8004d08:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d0a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d0e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004d10:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d12:	673b      	str	r3, [r7, #112]	; 0x70
 8004d14:	2301      	movs	r3, #1
 8004d16:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d1a:	f383 8810 	msr	PRIMASK, r3
}
 8004d1e:	46c0      	nop			; (mov r8, r8)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689a      	ldr	r2, [r3, #8]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2140      	movs	r1, #64	; 0x40
 8004d2c:	438a      	bics	r2, r1
 8004d2e:	609a      	str	r2, [r3, #8]
 8004d30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d32:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d36:	f383 8810 	msr	PRIMASK, r3
}
 8004d3a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d48:	f3ef 8310 	mrs	r3, PRIMASK
 8004d4c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004d4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d52:	2301      	movs	r3, #1
 8004d54:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d58:	f383 8810 	msr	PRIMASK, r3
}
 8004d5c:	46c0      	nop			; (mov r8, r8)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2110      	movs	r1, #16
 8004d6a:	438a      	bics	r2, r1
 8004d6c:	601a      	str	r2, [r3, #0]
 8004d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d70:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d74:	f383 8810 	msr	PRIMASK, r3
}
 8004d78:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7e:	0018      	movs	r0, r3
 8004d80:	f7fe fb57 	bl	8003432 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2258      	movs	r2, #88	; 0x58
 8004d88:	5a9a      	ldrh	r2, [r3, r2]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	215a      	movs	r1, #90	; 0x5a
 8004d8e:	5a5b      	ldrh	r3, [r3, r1]
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	0011      	movs	r1, r2
 8004d9a:	0018      	movs	r0, r3
 8004d9c:	f000 f8dc 	bl	8004f58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004da0:	e0be      	b.n	8004f20 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2258      	movs	r2, #88	; 0x58
 8004da6:	5a99      	ldrh	r1, [r3, r2]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	225a      	movs	r2, #90	; 0x5a
 8004dac:	5a9b      	ldrh	r3, [r3, r2]
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	208e      	movs	r0, #142	; 0x8e
 8004db2:	183b      	adds	r3, r7, r0
 8004db4:	1a8a      	subs	r2, r1, r2
 8004db6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	225a      	movs	r2, #90	; 0x5a
 8004dbc:	5a9b      	ldrh	r3, [r3, r2]
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d100      	bne.n	8004dc6 <HAL_UART_IRQHandler+0x43e>
 8004dc4:	e0ae      	b.n	8004f24 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8004dc6:	183b      	adds	r3, r7, r0
 8004dc8:	881b      	ldrh	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d100      	bne.n	8004dd0 <HAL_UART_IRQHandler+0x448>
 8004dce:	e0a9      	b.n	8004f24 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dd0:	f3ef 8310 	mrs	r3, PRIMASK
 8004dd4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dd8:	2488      	movs	r4, #136	; 0x88
 8004dda:	193a      	adds	r2, r7, r4
 8004ddc:	6013      	str	r3, [r2, #0]
 8004dde:	2301      	movs	r3, #1
 8004de0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	f383 8810 	msr	PRIMASK, r3
}
 8004de8:	46c0      	nop			; (mov r8, r8)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	494f      	ldr	r1, [pc, #316]	; (8004f34 <HAL_UART_IRQHandler+0x5ac>)
 8004df6:	400a      	ands	r2, r1
 8004df8:	601a      	str	r2, [r3, #0]
 8004dfa:	193b      	adds	r3, r7, r4
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f383 8810 	msr	PRIMASK, r3
}
 8004e06:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e08:	f3ef 8310 	mrs	r3, PRIMASK
 8004e0c:	61bb      	str	r3, [r7, #24]
  return(result);
 8004e0e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e10:	2484      	movs	r4, #132	; 0x84
 8004e12:	193a      	adds	r2, r7, r4
 8004e14:	6013      	str	r3, [r2, #0]
 8004e16:	2301      	movs	r3, #1
 8004e18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	f383 8810 	msr	PRIMASK, r3
}
 8004e20:	46c0      	nop			; (mov r8, r8)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	689a      	ldr	r2, [r3, #8]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2101      	movs	r1, #1
 8004e2e:	438a      	bics	r2, r1
 8004e30:	609a      	str	r2, [r3, #8]
 8004e32:	193b      	adds	r3, r7, r4
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e38:	6a3b      	ldr	r3, [r7, #32]
 8004e3a:	f383 8810 	msr	PRIMASK, r3
}
 8004e3e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2220      	movs	r2, #32
 8004e44:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e52:	f3ef 8310 	mrs	r3, PRIMASK
 8004e56:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e5a:	2480      	movs	r4, #128	; 0x80
 8004e5c:	193a      	adds	r2, r7, r4
 8004e5e:	6013      	str	r3, [r2, #0]
 8004e60:	2301      	movs	r3, #1
 8004e62:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e66:	f383 8810 	msr	PRIMASK, r3
}
 8004e6a:	46c0      	nop			; (mov r8, r8)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2110      	movs	r1, #16
 8004e78:	438a      	bics	r2, r1
 8004e7a:	601a      	str	r2, [r3, #0]
 8004e7c:	193b      	adds	r3, r7, r4
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e84:	f383 8810 	msr	PRIMASK, r3
}
 8004e88:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e8a:	183b      	adds	r3, r7, r0
 8004e8c:	881a      	ldrh	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	0011      	movs	r1, r2
 8004e92:	0018      	movs	r0, r3
 8004e94:	f000 f860 	bl	8004f58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e98:	e044      	b.n	8004f24 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004e9a:	23a4      	movs	r3, #164	; 0xa4
 8004e9c:	18fb      	adds	r3, r7, r3
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	2380      	movs	r3, #128	; 0x80
 8004ea2:	035b      	lsls	r3, r3, #13
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	d010      	beq.n	8004eca <HAL_UART_IRQHandler+0x542>
 8004ea8:	239c      	movs	r3, #156	; 0x9c
 8004eaa:	18fb      	adds	r3, r7, r3
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	2380      	movs	r3, #128	; 0x80
 8004eb0:	03db      	lsls	r3, r3, #15
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	d009      	beq.n	8004eca <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2280      	movs	r2, #128	; 0x80
 8004ebc:	0352      	lsls	r2, r2, #13
 8004ebe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	0018      	movs	r0, r3
 8004ec4:	f000 fc40 	bl	8005748 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ec8:	e02f      	b.n	8004f2a <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004eca:	23a4      	movs	r3, #164	; 0xa4
 8004ecc:	18fb      	adds	r3, r7, r3
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2280      	movs	r2, #128	; 0x80
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	d00f      	beq.n	8004ef6 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004ed6:	23a0      	movs	r3, #160	; 0xa0
 8004ed8:	18fb      	adds	r3, r7, r3
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2280      	movs	r2, #128	; 0x80
 8004ede:	4013      	ands	r3, r2
 8004ee0:	d009      	beq.n	8004ef6 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d01e      	beq.n	8004f28 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	0010      	movs	r0, r2
 8004ef2:	4798      	blx	r3
    }
    return;
 8004ef4:	e018      	b.n	8004f28 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004ef6:	23a4      	movs	r3, #164	; 0xa4
 8004ef8:	18fb      	adds	r3, r7, r3
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2240      	movs	r2, #64	; 0x40
 8004efe:	4013      	ands	r3, r2
 8004f00:	d013      	beq.n	8004f2a <HAL_UART_IRQHandler+0x5a2>
 8004f02:	23a0      	movs	r3, #160	; 0xa0
 8004f04:	18fb      	adds	r3, r7, r3
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2240      	movs	r2, #64	; 0x40
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	d00d      	beq.n	8004f2a <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	0018      	movs	r0, r3
 8004f12:	f000 fbee 	bl	80056f2 <UART_EndTransmit_IT>
    return;
 8004f16:	e008      	b.n	8004f2a <HAL_UART_IRQHandler+0x5a2>
      return;
 8004f18:	46c0      	nop			; (mov r8, r8)
 8004f1a:	e006      	b.n	8004f2a <HAL_UART_IRQHandler+0x5a2>
    return;
 8004f1c:	46c0      	nop			; (mov r8, r8)
 8004f1e:	e004      	b.n	8004f2a <HAL_UART_IRQHandler+0x5a2>
      return;
 8004f20:	46c0      	nop			; (mov r8, r8)
 8004f22:	e002      	b.n	8004f2a <HAL_UART_IRQHandler+0x5a2>
      return;
 8004f24:	46c0      	nop			; (mov r8, r8)
 8004f26:	e000      	b.n	8004f2a <HAL_UART_IRQHandler+0x5a2>
    return;
 8004f28:	46c0      	nop			; (mov r8, r8)
  }

}
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	b02b      	add	sp, #172	; 0xac
 8004f2e:	bd90      	pop	{r4, r7, pc}
 8004f30:	fffffeff 	.word	0xfffffeff
 8004f34:	fffffedf 	.word	0xfffffedf

08004f38 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004f40:	46c0      	nop			; (mov r8, r8)
 8004f42:	46bd      	mov	sp, r7
 8004f44:	b002      	add	sp, #8
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f50:	46c0      	nop			; (mov r8, r8)
 8004f52:	46bd      	mov	sp, r7
 8004f54:	b002      	add	sp, #8
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	000a      	movs	r2, r1
 8004f62:	1cbb      	adds	r3, r7, #2
 8004f64:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f66:	46c0      	nop			; (mov r8, r8)
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	b002      	add	sp, #8
 8004f6c:	bd80      	pop	{r7, pc}
	...

08004f70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b088      	sub	sp, #32
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f78:	231e      	movs	r3, #30
 8004f7a:	18fb      	adds	r3, r7, r3
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689a      	ldr	r2, [r3, #8]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	431a      	orrs	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	69db      	ldr	r3, [r3, #28]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4aaf      	ldr	r2, [pc, #700]	; (800525c <UART_SetConfig+0x2ec>)
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	0019      	movs	r1, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	4aaa      	ldr	r2, [pc, #680]	; (8005260 <UART_SetConfig+0x2f0>)
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	0019      	movs	r1, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a1b      	ldr	r3, [r3, #32]
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	4aa1      	ldr	r2, [pc, #644]	; (8005264 <UART_SetConfig+0x2f4>)
 8004fde:	4013      	ands	r3, r2
 8004fe0:	0019      	movs	r1, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a9d      	ldr	r2, [pc, #628]	; (8005268 <UART_SetConfig+0x2f8>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d127      	bne.n	8005046 <UART_SetConfig+0xd6>
 8004ff6:	4b9d      	ldr	r3, [pc, #628]	; (800526c <UART_SetConfig+0x2fc>)
 8004ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffa:	2203      	movs	r2, #3
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	2b03      	cmp	r3, #3
 8005000:	d00d      	beq.n	800501e <UART_SetConfig+0xae>
 8005002:	d81b      	bhi.n	800503c <UART_SetConfig+0xcc>
 8005004:	2b02      	cmp	r3, #2
 8005006:	d014      	beq.n	8005032 <UART_SetConfig+0xc2>
 8005008:	d818      	bhi.n	800503c <UART_SetConfig+0xcc>
 800500a:	2b00      	cmp	r3, #0
 800500c:	d002      	beq.n	8005014 <UART_SetConfig+0xa4>
 800500e:	2b01      	cmp	r3, #1
 8005010:	d00a      	beq.n	8005028 <UART_SetConfig+0xb8>
 8005012:	e013      	b.n	800503c <UART_SetConfig+0xcc>
 8005014:	231f      	movs	r3, #31
 8005016:	18fb      	adds	r3, r7, r3
 8005018:	2200      	movs	r2, #0
 800501a:	701a      	strb	r2, [r3, #0]
 800501c:	e065      	b.n	80050ea <UART_SetConfig+0x17a>
 800501e:	231f      	movs	r3, #31
 8005020:	18fb      	adds	r3, r7, r3
 8005022:	2202      	movs	r2, #2
 8005024:	701a      	strb	r2, [r3, #0]
 8005026:	e060      	b.n	80050ea <UART_SetConfig+0x17a>
 8005028:	231f      	movs	r3, #31
 800502a:	18fb      	adds	r3, r7, r3
 800502c:	2204      	movs	r2, #4
 800502e:	701a      	strb	r2, [r3, #0]
 8005030:	e05b      	b.n	80050ea <UART_SetConfig+0x17a>
 8005032:	231f      	movs	r3, #31
 8005034:	18fb      	adds	r3, r7, r3
 8005036:	2208      	movs	r2, #8
 8005038:	701a      	strb	r2, [r3, #0]
 800503a:	e056      	b.n	80050ea <UART_SetConfig+0x17a>
 800503c:	231f      	movs	r3, #31
 800503e:	18fb      	adds	r3, r7, r3
 8005040:	2210      	movs	r2, #16
 8005042:	701a      	strb	r2, [r3, #0]
 8005044:	e051      	b.n	80050ea <UART_SetConfig+0x17a>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a89      	ldr	r2, [pc, #548]	; (8005270 <UART_SetConfig+0x300>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d134      	bne.n	80050ba <UART_SetConfig+0x14a>
 8005050:	4b86      	ldr	r3, [pc, #536]	; (800526c <UART_SetConfig+0x2fc>)
 8005052:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005054:	23c0      	movs	r3, #192	; 0xc0
 8005056:	029b      	lsls	r3, r3, #10
 8005058:	4013      	ands	r3, r2
 800505a:	22c0      	movs	r2, #192	; 0xc0
 800505c:	0292      	lsls	r2, r2, #10
 800505e:	4293      	cmp	r3, r2
 8005060:	d017      	beq.n	8005092 <UART_SetConfig+0x122>
 8005062:	22c0      	movs	r2, #192	; 0xc0
 8005064:	0292      	lsls	r2, r2, #10
 8005066:	4293      	cmp	r3, r2
 8005068:	d822      	bhi.n	80050b0 <UART_SetConfig+0x140>
 800506a:	2280      	movs	r2, #128	; 0x80
 800506c:	0292      	lsls	r2, r2, #10
 800506e:	4293      	cmp	r3, r2
 8005070:	d019      	beq.n	80050a6 <UART_SetConfig+0x136>
 8005072:	2280      	movs	r2, #128	; 0x80
 8005074:	0292      	lsls	r2, r2, #10
 8005076:	4293      	cmp	r3, r2
 8005078:	d81a      	bhi.n	80050b0 <UART_SetConfig+0x140>
 800507a:	2b00      	cmp	r3, #0
 800507c:	d004      	beq.n	8005088 <UART_SetConfig+0x118>
 800507e:	2280      	movs	r2, #128	; 0x80
 8005080:	0252      	lsls	r2, r2, #9
 8005082:	4293      	cmp	r3, r2
 8005084:	d00a      	beq.n	800509c <UART_SetConfig+0x12c>
 8005086:	e013      	b.n	80050b0 <UART_SetConfig+0x140>
 8005088:	231f      	movs	r3, #31
 800508a:	18fb      	adds	r3, r7, r3
 800508c:	2200      	movs	r2, #0
 800508e:	701a      	strb	r2, [r3, #0]
 8005090:	e02b      	b.n	80050ea <UART_SetConfig+0x17a>
 8005092:	231f      	movs	r3, #31
 8005094:	18fb      	adds	r3, r7, r3
 8005096:	2202      	movs	r2, #2
 8005098:	701a      	strb	r2, [r3, #0]
 800509a:	e026      	b.n	80050ea <UART_SetConfig+0x17a>
 800509c:	231f      	movs	r3, #31
 800509e:	18fb      	adds	r3, r7, r3
 80050a0:	2204      	movs	r2, #4
 80050a2:	701a      	strb	r2, [r3, #0]
 80050a4:	e021      	b.n	80050ea <UART_SetConfig+0x17a>
 80050a6:	231f      	movs	r3, #31
 80050a8:	18fb      	adds	r3, r7, r3
 80050aa:	2208      	movs	r2, #8
 80050ac:	701a      	strb	r2, [r3, #0]
 80050ae:	e01c      	b.n	80050ea <UART_SetConfig+0x17a>
 80050b0:	231f      	movs	r3, #31
 80050b2:	18fb      	adds	r3, r7, r3
 80050b4:	2210      	movs	r2, #16
 80050b6:	701a      	strb	r2, [r3, #0]
 80050b8:	e017      	b.n	80050ea <UART_SetConfig+0x17a>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a6d      	ldr	r2, [pc, #436]	; (8005274 <UART_SetConfig+0x304>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d104      	bne.n	80050ce <UART_SetConfig+0x15e>
 80050c4:	231f      	movs	r3, #31
 80050c6:	18fb      	adds	r3, r7, r3
 80050c8:	2200      	movs	r2, #0
 80050ca:	701a      	strb	r2, [r3, #0]
 80050cc:	e00d      	b.n	80050ea <UART_SetConfig+0x17a>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a69      	ldr	r2, [pc, #420]	; (8005278 <UART_SetConfig+0x308>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d104      	bne.n	80050e2 <UART_SetConfig+0x172>
 80050d8:	231f      	movs	r3, #31
 80050da:	18fb      	adds	r3, r7, r3
 80050dc:	2200      	movs	r2, #0
 80050de:	701a      	strb	r2, [r3, #0]
 80050e0:	e003      	b.n	80050ea <UART_SetConfig+0x17a>
 80050e2:	231f      	movs	r3, #31
 80050e4:	18fb      	adds	r3, r7, r3
 80050e6:	2210      	movs	r2, #16
 80050e8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	69da      	ldr	r2, [r3, #28]
 80050ee:	2380      	movs	r3, #128	; 0x80
 80050f0:	021b      	lsls	r3, r3, #8
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d15d      	bne.n	80051b2 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 80050f6:	231f      	movs	r3, #31
 80050f8:	18fb      	adds	r3, r7, r3
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d015      	beq.n	800512c <UART_SetConfig+0x1bc>
 8005100:	dc18      	bgt.n	8005134 <UART_SetConfig+0x1c4>
 8005102:	2b04      	cmp	r3, #4
 8005104:	d00d      	beq.n	8005122 <UART_SetConfig+0x1b2>
 8005106:	dc15      	bgt.n	8005134 <UART_SetConfig+0x1c4>
 8005108:	2b00      	cmp	r3, #0
 800510a:	d002      	beq.n	8005112 <UART_SetConfig+0x1a2>
 800510c:	2b02      	cmp	r3, #2
 800510e:	d005      	beq.n	800511c <UART_SetConfig+0x1ac>
 8005110:	e010      	b.n	8005134 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005112:	f7ff f88b 	bl	800422c <HAL_RCC_GetPCLK1Freq>
 8005116:	0003      	movs	r3, r0
 8005118:	61bb      	str	r3, [r7, #24]
        break;
 800511a:	e012      	b.n	8005142 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800511c:	4b57      	ldr	r3, [pc, #348]	; (800527c <UART_SetConfig+0x30c>)
 800511e:	61bb      	str	r3, [r7, #24]
        break;
 8005120:	e00f      	b.n	8005142 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005122:	f7fe fff9 	bl	8004118 <HAL_RCC_GetSysClockFreq>
 8005126:	0003      	movs	r3, r0
 8005128:	61bb      	str	r3, [r7, #24]
        break;
 800512a:	e00a      	b.n	8005142 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800512c:	2380      	movs	r3, #128	; 0x80
 800512e:	021b      	lsls	r3, r3, #8
 8005130:	61bb      	str	r3, [r7, #24]
        break;
 8005132:	e006      	b.n	8005142 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8005134:	2300      	movs	r3, #0
 8005136:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005138:	231e      	movs	r3, #30
 800513a:	18fb      	adds	r3, r7, r3
 800513c:	2201      	movs	r2, #1
 800513e:	701a      	strb	r2, [r3, #0]
        break;
 8005140:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d100      	bne.n	800514a <UART_SetConfig+0x1da>
 8005148:	e07b      	b.n	8005242 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	005a      	lsls	r2, r3, #1
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	085b      	lsrs	r3, r3, #1
 8005154:	18d2      	adds	r2, r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	0019      	movs	r1, r3
 800515c:	0010      	movs	r0, r2
 800515e:	f7fa ffef 	bl	8000140 <__udivsi3>
 8005162:	0003      	movs	r3, r0
 8005164:	b29b      	uxth	r3, r3
 8005166:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	2b0f      	cmp	r3, #15
 800516c:	d91c      	bls.n	80051a8 <UART_SetConfig+0x238>
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	2380      	movs	r3, #128	; 0x80
 8005172:	025b      	lsls	r3, r3, #9
 8005174:	429a      	cmp	r2, r3
 8005176:	d217      	bcs.n	80051a8 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	b29a      	uxth	r2, r3
 800517c:	200e      	movs	r0, #14
 800517e:	183b      	adds	r3, r7, r0
 8005180:	210f      	movs	r1, #15
 8005182:	438a      	bics	r2, r1
 8005184:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	085b      	lsrs	r3, r3, #1
 800518a:	b29b      	uxth	r3, r3
 800518c:	2207      	movs	r2, #7
 800518e:	4013      	ands	r3, r2
 8005190:	b299      	uxth	r1, r3
 8005192:	183b      	adds	r3, r7, r0
 8005194:	183a      	adds	r2, r7, r0
 8005196:	8812      	ldrh	r2, [r2, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	183a      	adds	r2, r7, r0
 80051a2:	8812      	ldrh	r2, [r2, #0]
 80051a4:	60da      	str	r2, [r3, #12]
 80051a6:	e04c      	b.n	8005242 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80051a8:	231e      	movs	r3, #30
 80051aa:	18fb      	adds	r3, r7, r3
 80051ac:	2201      	movs	r2, #1
 80051ae:	701a      	strb	r2, [r3, #0]
 80051b0:	e047      	b.n	8005242 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051b2:	231f      	movs	r3, #31
 80051b4:	18fb      	adds	r3, r7, r3
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	2b08      	cmp	r3, #8
 80051ba:	d015      	beq.n	80051e8 <UART_SetConfig+0x278>
 80051bc:	dc18      	bgt.n	80051f0 <UART_SetConfig+0x280>
 80051be:	2b04      	cmp	r3, #4
 80051c0:	d00d      	beq.n	80051de <UART_SetConfig+0x26e>
 80051c2:	dc15      	bgt.n	80051f0 <UART_SetConfig+0x280>
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d002      	beq.n	80051ce <UART_SetConfig+0x25e>
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d005      	beq.n	80051d8 <UART_SetConfig+0x268>
 80051cc:	e010      	b.n	80051f0 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051ce:	f7ff f82d 	bl	800422c <HAL_RCC_GetPCLK1Freq>
 80051d2:	0003      	movs	r3, r0
 80051d4:	61bb      	str	r3, [r7, #24]
        break;
 80051d6:	e012      	b.n	80051fe <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051d8:	4b28      	ldr	r3, [pc, #160]	; (800527c <UART_SetConfig+0x30c>)
 80051da:	61bb      	str	r3, [r7, #24]
        break;
 80051dc:	e00f      	b.n	80051fe <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051de:	f7fe ff9b 	bl	8004118 <HAL_RCC_GetSysClockFreq>
 80051e2:	0003      	movs	r3, r0
 80051e4:	61bb      	str	r3, [r7, #24]
        break;
 80051e6:	e00a      	b.n	80051fe <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051e8:	2380      	movs	r3, #128	; 0x80
 80051ea:	021b      	lsls	r3, r3, #8
 80051ec:	61bb      	str	r3, [r7, #24]
        break;
 80051ee:	e006      	b.n	80051fe <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 80051f0:	2300      	movs	r3, #0
 80051f2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051f4:	231e      	movs	r3, #30
 80051f6:	18fb      	adds	r3, r7, r3
 80051f8:	2201      	movs	r2, #1
 80051fa:	701a      	strb	r2, [r3, #0]
        break;
 80051fc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d01e      	beq.n	8005242 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	085a      	lsrs	r2, r3, #1
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	18d2      	adds	r2, r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	0019      	movs	r1, r3
 8005214:	0010      	movs	r0, r2
 8005216:	f7fa ff93 	bl	8000140 <__udivsi3>
 800521a:	0003      	movs	r3, r0
 800521c:	b29b      	uxth	r3, r3
 800521e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	2b0f      	cmp	r3, #15
 8005224:	d909      	bls.n	800523a <UART_SetConfig+0x2ca>
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	2380      	movs	r3, #128	; 0x80
 800522a:	025b      	lsls	r3, r3, #9
 800522c:	429a      	cmp	r2, r3
 800522e:	d204      	bcs.n	800523a <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	60da      	str	r2, [r3, #12]
 8005238:	e003      	b.n	8005242 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 800523a:	231e      	movs	r3, #30
 800523c:	18fb      	adds	r3, r7, r3
 800523e:	2201      	movs	r2, #1
 8005240:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800524e:	231e      	movs	r3, #30
 8005250:	18fb      	adds	r3, r7, r3
 8005252:	781b      	ldrb	r3, [r3, #0]
}
 8005254:	0018      	movs	r0, r3
 8005256:	46bd      	mov	sp, r7
 8005258:	b008      	add	sp, #32
 800525a:	bd80      	pop	{r7, pc}
 800525c:	efff69f3 	.word	0xefff69f3
 8005260:	ffffcfff 	.word	0xffffcfff
 8005264:	fffff4ff 	.word	0xfffff4ff
 8005268:	40013800 	.word	0x40013800
 800526c:	40021000 	.word	0x40021000
 8005270:	40004400 	.word	0x40004400
 8005274:	40004800 	.word	0x40004800
 8005278:	40004c00 	.word	0x40004c00
 800527c:	007a1200 	.word	0x007a1200

08005280 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528c:	2201      	movs	r2, #1
 800528e:	4013      	ands	r3, r2
 8005290:	d00b      	beq.n	80052aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	4a4a      	ldr	r2, [pc, #296]	; (80053c4 <UART_AdvFeatureConfig+0x144>)
 800529a:	4013      	ands	r3, r2
 800529c:	0019      	movs	r1, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ae:	2202      	movs	r2, #2
 80052b0:	4013      	ands	r3, r2
 80052b2:	d00b      	beq.n	80052cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	4a43      	ldr	r2, [pc, #268]	; (80053c8 <UART_AdvFeatureConfig+0x148>)
 80052bc:	4013      	ands	r3, r2
 80052be:	0019      	movs	r1, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	430a      	orrs	r2, r1
 80052ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d0:	2204      	movs	r2, #4
 80052d2:	4013      	ands	r3, r2
 80052d4:	d00b      	beq.n	80052ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	4a3b      	ldr	r2, [pc, #236]	; (80053cc <UART_AdvFeatureConfig+0x14c>)
 80052de:	4013      	ands	r3, r2
 80052e0:	0019      	movs	r1, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	2208      	movs	r2, #8
 80052f4:	4013      	ands	r3, r2
 80052f6:	d00b      	beq.n	8005310 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	4a34      	ldr	r2, [pc, #208]	; (80053d0 <UART_AdvFeatureConfig+0x150>)
 8005300:	4013      	ands	r3, r2
 8005302:	0019      	movs	r1, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	2210      	movs	r2, #16
 8005316:	4013      	ands	r3, r2
 8005318:	d00b      	beq.n	8005332 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	4a2c      	ldr	r2, [pc, #176]	; (80053d4 <UART_AdvFeatureConfig+0x154>)
 8005322:	4013      	ands	r3, r2
 8005324:	0019      	movs	r1, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	430a      	orrs	r2, r1
 8005330:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	2220      	movs	r2, #32
 8005338:	4013      	ands	r3, r2
 800533a:	d00b      	beq.n	8005354 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	4a25      	ldr	r2, [pc, #148]	; (80053d8 <UART_AdvFeatureConfig+0x158>)
 8005344:	4013      	ands	r3, r2
 8005346:	0019      	movs	r1, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	430a      	orrs	r2, r1
 8005352:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	2240      	movs	r2, #64	; 0x40
 800535a:	4013      	ands	r3, r2
 800535c:	d01d      	beq.n	800539a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	4a1d      	ldr	r2, [pc, #116]	; (80053dc <UART_AdvFeatureConfig+0x15c>)
 8005366:	4013      	ands	r3, r2
 8005368:	0019      	movs	r1, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800537a:	2380      	movs	r3, #128	; 0x80
 800537c:	035b      	lsls	r3, r3, #13
 800537e:	429a      	cmp	r2, r3
 8005380:	d10b      	bne.n	800539a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	4a15      	ldr	r2, [pc, #84]	; (80053e0 <UART_AdvFeatureConfig+0x160>)
 800538a:	4013      	ands	r3, r2
 800538c:	0019      	movs	r1, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	430a      	orrs	r2, r1
 8005398:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	2280      	movs	r2, #128	; 0x80
 80053a0:	4013      	ands	r3, r2
 80053a2:	d00b      	beq.n	80053bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	4a0e      	ldr	r2, [pc, #56]	; (80053e4 <UART_AdvFeatureConfig+0x164>)
 80053ac:	4013      	ands	r3, r2
 80053ae:	0019      	movs	r1, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	605a      	str	r2, [r3, #4]
  }
}
 80053bc:	46c0      	nop			; (mov r8, r8)
 80053be:	46bd      	mov	sp, r7
 80053c0:	b002      	add	sp, #8
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	fffdffff 	.word	0xfffdffff
 80053c8:	fffeffff 	.word	0xfffeffff
 80053cc:	fffbffff 	.word	0xfffbffff
 80053d0:	ffff7fff 	.word	0xffff7fff
 80053d4:	ffffefff 	.word	0xffffefff
 80053d8:	ffffdfff 	.word	0xffffdfff
 80053dc:	ffefffff 	.word	0xffefffff
 80053e0:	ff9fffff 	.word	0xff9fffff
 80053e4:	fff7ffff 	.word	0xfff7ffff

080053e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af02      	add	r7, sp, #8
 80053ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2280      	movs	r2, #128	; 0x80
 80053f4:	2100      	movs	r1, #0
 80053f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053f8:	f7fd fb76 	bl	8002ae8 <HAL_GetTick>
 80053fc:	0003      	movs	r3, r0
 80053fe:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2208      	movs	r2, #8
 8005408:	4013      	ands	r3, r2
 800540a:	2b08      	cmp	r3, #8
 800540c:	d10c      	bne.n	8005428 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2280      	movs	r2, #128	; 0x80
 8005412:	0391      	lsls	r1, r2, #14
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	4a17      	ldr	r2, [pc, #92]	; (8005474 <UART_CheckIdleState+0x8c>)
 8005418:	9200      	str	r2, [sp, #0]
 800541a:	2200      	movs	r2, #0
 800541c:	f000 f82c 	bl	8005478 <UART_WaitOnFlagUntilTimeout>
 8005420:	1e03      	subs	r3, r0, #0
 8005422:	d001      	beq.n	8005428 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e021      	b.n	800546c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2204      	movs	r2, #4
 8005430:	4013      	ands	r3, r2
 8005432:	2b04      	cmp	r3, #4
 8005434:	d10c      	bne.n	8005450 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2280      	movs	r2, #128	; 0x80
 800543a:	03d1      	lsls	r1, r2, #15
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	4a0d      	ldr	r2, [pc, #52]	; (8005474 <UART_CheckIdleState+0x8c>)
 8005440:	9200      	str	r2, [sp, #0]
 8005442:	2200      	movs	r2, #0
 8005444:	f000 f818 	bl	8005478 <UART_WaitOnFlagUntilTimeout>
 8005448:	1e03      	subs	r3, r0, #0
 800544a:	d001      	beq.n	8005450 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e00d      	b.n	800546c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2220      	movs	r2, #32
 8005454:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2220      	movs	r2, #32
 800545a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2274      	movs	r2, #116	; 0x74
 8005466:	2100      	movs	r1, #0
 8005468:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	0018      	movs	r0, r3
 800546e:	46bd      	mov	sp, r7
 8005470:	b004      	add	sp, #16
 8005472:	bd80      	pop	{r7, pc}
 8005474:	01ffffff 	.word	0x01ffffff

08005478 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b094      	sub	sp, #80	; 0x50
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	603b      	str	r3, [r7, #0]
 8005484:	1dfb      	adds	r3, r7, #7
 8005486:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005488:	e0a3      	b.n	80055d2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800548a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800548c:	3301      	adds	r3, #1
 800548e:	d100      	bne.n	8005492 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005490:	e09f      	b.n	80055d2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005492:	f7fd fb29 	bl	8002ae8 <HAL_GetTick>
 8005496:	0002      	movs	r2, r0
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800549e:	429a      	cmp	r2, r3
 80054a0:	d302      	bcc.n	80054a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80054a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d13d      	bne.n	8005524 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054a8:	f3ef 8310 	mrs	r3, PRIMASK
 80054ac:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80054ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054b0:	647b      	str	r3, [r7, #68]	; 0x44
 80054b2:	2301      	movs	r3, #1
 80054b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b8:	f383 8810 	msr	PRIMASK, r3
}
 80054bc:	46c0      	nop			; (mov r8, r8)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	494c      	ldr	r1, [pc, #304]	; (80055fc <UART_WaitOnFlagUntilTimeout+0x184>)
 80054ca:	400a      	ands	r2, r1
 80054cc:	601a      	str	r2, [r3, #0]
 80054ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054d0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d4:	f383 8810 	msr	PRIMASK, r3
}
 80054d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054da:	f3ef 8310 	mrs	r3, PRIMASK
 80054de:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80054e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e2:	643b      	str	r3, [r7, #64]	; 0x40
 80054e4:	2301      	movs	r3, #1
 80054e6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ea:	f383 8810 	msr	PRIMASK, r3
}
 80054ee:	46c0      	nop			; (mov r8, r8)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689a      	ldr	r2, [r3, #8]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2101      	movs	r1, #1
 80054fc:	438a      	bics	r2, r1
 80054fe:	609a      	str	r2, [r3, #8]
 8005500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005502:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005506:	f383 8810 	msr	PRIMASK, r3
}
 800550a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2220      	movs	r2, #32
 8005510:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2220      	movs	r2, #32
 8005516:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2274      	movs	r2, #116	; 0x74
 800551c:	2100      	movs	r1, #0
 800551e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e067      	b.n	80055f4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2204      	movs	r2, #4
 800552c:	4013      	ands	r3, r2
 800552e:	d050      	beq.n	80055d2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	69da      	ldr	r2, [r3, #28]
 8005536:	2380      	movs	r3, #128	; 0x80
 8005538:	011b      	lsls	r3, r3, #4
 800553a:	401a      	ands	r2, r3
 800553c:	2380      	movs	r3, #128	; 0x80
 800553e:	011b      	lsls	r3, r3, #4
 8005540:	429a      	cmp	r2, r3
 8005542:	d146      	bne.n	80055d2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2280      	movs	r2, #128	; 0x80
 800554a:	0112      	lsls	r2, r2, #4
 800554c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800554e:	f3ef 8310 	mrs	r3, PRIMASK
 8005552:	613b      	str	r3, [r7, #16]
  return(result);
 8005554:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005556:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005558:	2301      	movs	r3, #1
 800555a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	f383 8810 	msr	PRIMASK, r3
}
 8005562:	46c0      	nop			; (mov r8, r8)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4923      	ldr	r1, [pc, #140]	; (80055fc <UART_WaitOnFlagUntilTimeout+0x184>)
 8005570:	400a      	ands	r2, r1
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005576:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	f383 8810 	msr	PRIMASK, r3
}
 800557e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005580:	f3ef 8310 	mrs	r3, PRIMASK
 8005584:	61fb      	str	r3, [r7, #28]
  return(result);
 8005586:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005588:	64bb      	str	r3, [r7, #72]	; 0x48
 800558a:	2301      	movs	r3, #1
 800558c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800558e:	6a3b      	ldr	r3, [r7, #32]
 8005590:	f383 8810 	msr	PRIMASK, r3
}
 8005594:	46c0      	nop			; (mov r8, r8)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	689a      	ldr	r2, [r3, #8]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2101      	movs	r1, #1
 80055a2:	438a      	bics	r2, r1
 80055a4:	609a      	str	r2, [r3, #8]
 80055a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055a8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	f383 8810 	msr	PRIMASK, r3
}
 80055b0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2220      	movs	r2, #32
 80055b6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2220      	movs	r2, #32
 80055bc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2280      	movs	r2, #128	; 0x80
 80055c2:	2120      	movs	r1, #32
 80055c4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2274      	movs	r2, #116	; 0x74
 80055ca:	2100      	movs	r1, #0
 80055cc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e010      	b.n	80055f4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	69db      	ldr	r3, [r3, #28]
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	4013      	ands	r3, r2
 80055dc:	68ba      	ldr	r2, [r7, #8]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	425a      	negs	r2, r3
 80055e2:	4153      	adcs	r3, r2
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	001a      	movs	r2, r3
 80055e8:	1dfb      	adds	r3, r7, #7
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d100      	bne.n	80055f2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80055f0:	e74b      	b.n	800548a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	0018      	movs	r0, r3
 80055f6:	46bd      	mov	sp, r7
 80055f8:	b014      	add	sp, #80	; 0x50
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	fffffe5f 	.word	0xfffffe5f

08005600 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b08e      	sub	sp, #56	; 0x38
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005608:	f3ef 8310 	mrs	r3, PRIMASK
 800560c:	617b      	str	r3, [r7, #20]
  return(result);
 800560e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005610:	637b      	str	r3, [r7, #52]	; 0x34
 8005612:	2301      	movs	r3, #1
 8005614:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	f383 8810 	msr	PRIMASK, r3
}
 800561c:	46c0      	nop			; (mov r8, r8)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4925      	ldr	r1, [pc, #148]	; (80056c0 <UART_EndRxTransfer+0xc0>)
 800562a:	400a      	ands	r2, r1
 800562c:	601a      	str	r2, [r3, #0]
 800562e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005630:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	f383 8810 	msr	PRIMASK, r3
}
 8005638:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800563a:	f3ef 8310 	mrs	r3, PRIMASK
 800563e:	623b      	str	r3, [r7, #32]
  return(result);
 8005640:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005642:	633b      	str	r3, [r7, #48]	; 0x30
 8005644:	2301      	movs	r3, #1
 8005646:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564a:	f383 8810 	msr	PRIMASK, r3
}
 800564e:	46c0      	nop			; (mov r8, r8)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	689a      	ldr	r2, [r3, #8]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2101      	movs	r1, #1
 800565c:	438a      	bics	r2, r1
 800565e:	609a      	str	r2, [r3, #8]
 8005660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005662:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005666:	f383 8810 	msr	PRIMASK, r3
}
 800566a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005670:	2b01      	cmp	r3, #1
 8005672:	d118      	bne.n	80056a6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005674:	f3ef 8310 	mrs	r3, PRIMASK
 8005678:	60bb      	str	r3, [r7, #8]
  return(result);
 800567a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800567c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800567e:	2301      	movs	r3, #1
 8005680:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f383 8810 	msr	PRIMASK, r3
}
 8005688:	46c0      	nop			; (mov r8, r8)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2110      	movs	r1, #16
 8005696:	438a      	bics	r2, r1
 8005698:	601a      	str	r2, [r3, #0]
 800569a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800569c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	f383 8810 	msr	PRIMASK, r3
}
 80056a4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2220      	movs	r2, #32
 80056aa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80056b8:	46c0      	nop			; (mov r8, r8)
 80056ba:	46bd      	mov	sp, r7
 80056bc:	b00e      	add	sp, #56	; 0x38
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	fffffedf 	.word	0xfffffedf

080056c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	225a      	movs	r2, #90	; 0x5a
 80056d6:	2100      	movs	r1, #0
 80056d8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2252      	movs	r2, #82	; 0x52
 80056de:	2100      	movs	r1, #0
 80056e0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	0018      	movs	r0, r3
 80056e6:	f7ff fc2f 	bl	8004f48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056ea:	46c0      	nop			; (mov r8, r8)
 80056ec:	46bd      	mov	sp, r7
 80056ee:	b004      	add	sp, #16
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b086      	sub	sp, #24
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056fa:	f3ef 8310 	mrs	r3, PRIMASK
 80056fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8005700:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005702:	617b      	str	r3, [r7, #20]
 8005704:	2301      	movs	r3, #1
 8005706:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f383 8810 	msr	PRIMASK, r3
}
 800570e:	46c0      	nop			; (mov r8, r8)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2140      	movs	r1, #64	; 0x40
 800571c:	438a      	bics	r2, r1
 800571e:	601a      	str	r2, [r3, #0]
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	f383 8810 	msr	PRIMASK, r3
}
 800572a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2220      	movs	r2, #32
 8005730:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	0018      	movs	r0, r3
 800573c:	f7ff fbfc 	bl	8004f38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005740:	46c0      	nop			; (mov r8, r8)
 8005742:	46bd      	mov	sp, r7
 8005744:	b006      	add	sp, #24
 8005746:	bd80      	pop	{r7, pc}

08005748 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005750:	46c0      	nop			; (mov r8, r8)
 8005752:	46bd      	mov	sp, r7
 8005754:	b002      	add	sp, #8
 8005756:	bd80      	pop	{r7, pc}

08005758 <__errno>:
 8005758:	4b01      	ldr	r3, [pc, #4]	; (8005760 <__errno+0x8>)
 800575a:	6818      	ldr	r0, [r3, #0]
 800575c:	4770      	bx	lr
 800575e:	46c0      	nop			; (mov r8, r8)
 8005760:	2000000c 	.word	0x2000000c

08005764 <__libc_init_array>:
 8005764:	b570      	push	{r4, r5, r6, lr}
 8005766:	2600      	movs	r6, #0
 8005768:	4d0c      	ldr	r5, [pc, #48]	; (800579c <__libc_init_array+0x38>)
 800576a:	4c0d      	ldr	r4, [pc, #52]	; (80057a0 <__libc_init_array+0x3c>)
 800576c:	1b64      	subs	r4, r4, r5
 800576e:	10a4      	asrs	r4, r4, #2
 8005770:	42a6      	cmp	r6, r4
 8005772:	d109      	bne.n	8005788 <__libc_init_array+0x24>
 8005774:	2600      	movs	r6, #0
 8005776:	f004 fd47 	bl	800a208 <_init>
 800577a:	4d0a      	ldr	r5, [pc, #40]	; (80057a4 <__libc_init_array+0x40>)
 800577c:	4c0a      	ldr	r4, [pc, #40]	; (80057a8 <__libc_init_array+0x44>)
 800577e:	1b64      	subs	r4, r4, r5
 8005780:	10a4      	asrs	r4, r4, #2
 8005782:	42a6      	cmp	r6, r4
 8005784:	d105      	bne.n	8005792 <__libc_init_array+0x2e>
 8005786:	bd70      	pop	{r4, r5, r6, pc}
 8005788:	00b3      	lsls	r3, r6, #2
 800578a:	58eb      	ldr	r3, [r5, r3]
 800578c:	4798      	blx	r3
 800578e:	3601      	adds	r6, #1
 8005790:	e7ee      	b.n	8005770 <__libc_init_array+0xc>
 8005792:	00b3      	lsls	r3, r6, #2
 8005794:	58eb      	ldr	r3, [r5, r3]
 8005796:	4798      	blx	r3
 8005798:	3601      	adds	r6, #1
 800579a:	e7f2      	b.n	8005782 <__libc_init_array+0x1e>
 800579c:	0800a784 	.word	0x0800a784
 80057a0:	0800a784 	.word	0x0800a784
 80057a4:	0800a784 	.word	0x0800a784
 80057a8:	0800a788 	.word	0x0800a788

080057ac <memset>:
 80057ac:	0003      	movs	r3, r0
 80057ae:	1882      	adds	r2, r0, r2
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d100      	bne.n	80057b6 <memset+0xa>
 80057b4:	4770      	bx	lr
 80057b6:	7019      	strb	r1, [r3, #0]
 80057b8:	3301      	adds	r3, #1
 80057ba:	e7f9      	b.n	80057b0 <memset+0x4>

080057bc <__cvt>:
 80057bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057be:	001e      	movs	r6, r3
 80057c0:	2300      	movs	r3, #0
 80057c2:	0014      	movs	r4, r2
 80057c4:	b08b      	sub	sp, #44	; 0x2c
 80057c6:	429e      	cmp	r6, r3
 80057c8:	da04      	bge.n	80057d4 <__cvt+0x18>
 80057ca:	2180      	movs	r1, #128	; 0x80
 80057cc:	0609      	lsls	r1, r1, #24
 80057ce:	1873      	adds	r3, r6, r1
 80057d0:	001e      	movs	r6, r3
 80057d2:	232d      	movs	r3, #45	; 0x2d
 80057d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80057d6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80057d8:	7013      	strb	r3, [r2, #0]
 80057da:	2320      	movs	r3, #32
 80057dc:	2203      	movs	r2, #3
 80057de:	439f      	bics	r7, r3
 80057e0:	2f46      	cmp	r7, #70	; 0x46
 80057e2:	d007      	beq.n	80057f4 <__cvt+0x38>
 80057e4:	003b      	movs	r3, r7
 80057e6:	3b45      	subs	r3, #69	; 0x45
 80057e8:	4259      	negs	r1, r3
 80057ea:	414b      	adcs	r3, r1
 80057ec:	9910      	ldr	r1, [sp, #64]	; 0x40
 80057ee:	3a01      	subs	r2, #1
 80057f0:	18cb      	adds	r3, r1, r3
 80057f2:	9310      	str	r3, [sp, #64]	; 0x40
 80057f4:	ab09      	add	r3, sp, #36	; 0x24
 80057f6:	9304      	str	r3, [sp, #16]
 80057f8:	ab08      	add	r3, sp, #32
 80057fa:	9303      	str	r3, [sp, #12]
 80057fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80057fe:	9200      	str	r2, [sp, #0]
 8005800:	9302      	str	r3, [sp, #8]
 8005802:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005804:	0022      	movs	r2, r4
 8005806:	9301      	str	r3, [sp, #4]
 8005808:	0033      	movs	r3, r6
 800580a:	f001 fdc3 	bl	8007394 <_dtoa_r>
 800580e:	0005      	movs	r5, r0
 8005810:	2f47      	cmp	r7, #71	; 0x47
 8005812:	d102      	bne.n	800581a <__cvt+0x5e>
 8005814:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005816:	07db      	lsls	r3, r3, #31
 8005818:	d528      	bpl.n	800586c <__cvt+0xb0>
 800581a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800581c:	18eb      	adds	r3, r5, r3
 800581e:	9307      	str	r3, [sp, #28]
 8005820:	2f46      	cmp	r7, #70	; 0x46
 8005822:	d114      	bne.n	800584e <__cvt+0x92>
 8005824:	782b      	ldrb	r3, [r5, #0]
 8005826:	2b30      	cmp	r3, #48	; 0x30
 8005828:	d10c      	bne.n	8005844 <__cvt+0x88>
 800582a:	2200      	movs	r2, #0
 800582c:	2300      	movs	r3, #0
 800582e:	0020      	movs	r0, r4
 8005830:	0031      	movs	r1, r6
 8005832:	f7fa fe0b 	bl	800044c <__aeabi_dcmpeq>
 8005836:	2800      	cmp	r0, #0
 8005838:	d104      	bne.n	8005844 <__cvt+0x88>
 800583a:	2301      	movs	r3, #1
 800583c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800583e:	1a9b      	subs	r3, r3, r2
 8005840:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005842:	6013      	str	r3, [r2, #0]
 8005844:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005846:	9a07      	ldr	r2, [sp, #28]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	18d3      	adds	r3, r2, r3
 800584c:	9307      	str	r3, [sp, #28]
 800584e:	2200      	movs	r2, #0
 8005850:	2300      	movs	r3, #0
 8005852:	0020      	movs	r0, r4
 8005854:	0031      	movs	r1, r6
 8005856:	f7fa fdf9 	bl	800044c <__aeabi_dcmpeq>
 800585a:	2800      	cmp	r0, #0
 800585c:	d001      	beq.n	8005862 <__cvt+0xa6>
 800585e:	9b07      	ldr	r3, [sp, #28]
 8005860:	9309      	str	r3, [sp, #36]	; 0x24
 8005862:	2230      	movs	r2, #48	; 0x30
 8005864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005866:	9907      	ldr	r1, [sp, #28]
 8005868:	428b      	cmp	r3, r1
 800586a:	d306      	bcc.n	800587a <__cvt+0xbe>
 800586c:	0028      	movs	r0, r5
 800586e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005870:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005872:	1b5b      	subs	r3, r3, r5
 8005874:	6013      	str	r3, [r2, #0]
 8005876:	b00b      	add	sp, #44	; 0x2c
 8005878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800587a:	1c59      	adds	r1, r3, #1
 800587c:	9109      	str	r1, [sp, #36]	; 0x24
 800587e:	701a      	strb	r2, [r3, #0]
 8005880:	e7f0      	b.n	8005864 <__cvt+0xa8>

08005882 <__exponent>:
 8005882:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005884:	1c83      	adds	r3, r0, #2
 8005886:	b087      	sub	sp, #28
 8005888:	9303      	str	r3, [sp, #12]
 800588a:	0005      	movs	r5, r0
 800588c:	000c      	movs	r4, r1
 800588e:	232b      	movs	r3, #43	; 0x2b
 8005890:	7002      	strb	r2, [r0, #0]
 8005892:	2900      	cmp	r1, #0
 8005894:	da01      	bge.n	800589a <__exponent+0x18>
 8005896:	424c      	negs	r4, r1
 8005898:	3302      	adds	r3, #2
 800589a:	706b      	strb	r3, [r5, #1]
 800589c:	2c09      	cmp	r4, #9
 800589e:	dd31      	ble.n	8005904 <__exponent+0x82>
 80058a0:	270a      	movs	r7, #10
 80058a2:	ab04      	add	r3, sp, #16
 80058a4:	1dde      	adds	r6, r3, #7
 80058a6:	0020      	movs	r0, r4
 80058a8:	0039      	movs	r1, r7
 80058aa:	9601      	str	r6, [sp, #4]
 80058ac:	f7fa fdb8 	bl	8000420 <__aeabi_idivmod>
 80058b0:	3e01      	subs	r6, #1
 80058b2:	3130      	adds	r1, #48	; 0x30
 80058b4:	0020      	movs	r0, r4
 80058b6:	7031      	strb	r1, [r6, #0]
 80058b8:	0039      	movs	r1, r7
 80058ba:	9402      	str	r4, [sp, #8]
 80058bc:	f7fa fcca 	bl	8000254 <__divsi3>
 80058c0:	9b02      	ldr	r3, [sp, #8]
 80058c2:	0004      	movs	r4, r0
 80058c4:	2b63      	cmp	r3, #99	; 0x63
 80058c6:	dcee      	bgt.n	80058a6 <__exponent+0x24>
 80058c8:	9b01      	ldr	r3, [sp, #4]
 80058ca:	3430      	adds	r4, #48	; 0x30
 80058cc:	1e9a      	subs	r2, r3, #2
 80058ce:	0013      	movs	r3, r2
 80058d0:	9903      	ldr	r1, [sp, #12]
 80058d2:	7014      	strb	r4, [r2, #0]
 80058d4:	a804      	add	r0, sp, #16
 80058d6:	3007      	adds	r0, #7
 80058d8:	4298      	cmp	r0, r3
 80058da:	d80e      	bhi.n	80058fa <__exponent+0x78>
 80058dc:	ab04      	add	r3, sp, #16
 80058de:	3307      	adds	r3, #7
 80058e0:	2000      	movs	r0, #0
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d804      	bhi.n	80058f0 <__exponent+0x6e>
 80058e6:	ab04      	add	r3, sp, #16
 80058e8:	3009      	adds	r0, #9
 80058ea:	18c0      	adds	r0, r0, r3
 80058ec:	9b01      	ldr	r3, [sp, #4]
 80058ee:	1ac0      	subs	r0, r0, r3
 80058f0:	9b03      	ldr	r3, [sp, #12]
 80058f2:	1818      	adds	r0, r3, r0
 80058f4:	1b40      	subs	r0, r0, r5
 80058f6:	b007      	add	sp, #28
 80058f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058fa:	7818      	ldrb	r0, [r3, #0]
 80058fc:	3301      	adds	r3, #1
 80058fe:	7008      	strb	r0, [r1, #0]
 8005900:	3101      	adds	r1, #1
 8005902:	e7e7      	b.n	80058d4 <__exponent+0x52>
 8005904:	2330      	movs	r3, #48	; 0x30
 8005906:	18e4      	adds	r4, r4, r3
 8005908:	70ab      	strb	r3, [r5, #2]
 800590a:	1d28      	adds	r0, r5, #4
 800590c:	70ec      	strb	r4, [r5, #3]
 800590e:	e7f1      	b.n	80058f4 <__exponent+0x72>

08005910 <_printf_float>:
 8005910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005912:	b095      	sub	sp, #84	; 0x54
 8005914:	000c      	movs	r4, r1
 8005916:	9209      	str	r2, [sp, #36]	; 0x24
 8005918:	001e      	movs	r6, r3
 800591a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800591c:	0007      	movs	r7, r0
 800591e:	f002 fec7 	bl	80086b0 <_localeconv_r>
 8005922:	6803      	ldr	r3, [r0, #0]
 8005924:	0018      	movs	r0, r3
 8005926:	930c      	str	r3, [sp, #48]	; 0x30
 8005928:	f7fa fbee 	bl	8000108 <strlen>
 800592c:	2300      	movs	r3, #0
 800592e:	9312      	str	r3, [sp, #72]	; 0x48
 8005930:	7e23      	ldrb	r3, [r4, #24]
 8005932:	2207      	movs	r2, #7
 8005934:	930a      	str	r3, [sp, #40]	; 0x28
 8005936:	6823      	ldr	r3, [r4, #0]
 8005938:	900e      	str	r0, [sp, #56]	; 0x38
 800593a:	930d      	str	r3, [sp, #52]	; 0x34
 800593c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800593e:	682b      	ldr	r3, [r5, #0]
 8005940:	05c9      	lsls	r1, r1, #23
 8005942:	d547      	bpl.n	80059d4 <_printf_float+0xc4>
 8005944:	189b      	adds	r3, r3, r2
 8005946:	4393      	bics	r3, r2
 8005948:	001a      	movs	r2, r3
 800594a:	3208      	adds	r2, #8
 800594c:	602a      	str	r2, [r5, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	64a2      	str	r2, [r4, #72]	; 0x48
 8005954:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005956:	2201      	movs	r2, #1
 8005958:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800595a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800595c:	930b      	str	r3, [sp, #44]	; 0x2c
 800595e:	006b      	lsls	r3, r5, #1
 8005960:	085b      	lsrs	r3, r3, #1
 8005962:	930f      	str	r3, [sp, #60]	; 0x3c
 8005964:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005966:	4ba7      	ldr	r3, [pc, #668]	; (8005c04 <_printf_float+0x2f4>)
 8005968:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800596a:	4252      	negs	r2, r2
 800596c:	f7fc fb48 	bl	8002000 <__aeabi_dcmpun>
 8005970:	2800      	cmp	r0, #0
 8005972:	d131      	bne.n	80059d8 <_printf_float+0xc8>
 8005974:	2201      	movs	r2, #1
 8005976:	4ba3      	ldr	r3, [pc, #652]	; (8005c04 <_printf_float+0x2f4>)
 8005978:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800597a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800597c:	4252      	negs	r2, r2
 800597e:	f7fa fd75 	bl	800046c <__aeabi_dcmple>
 8005982:	2800      	cmp	r0, #0
 8005984:	d128      	bne.n	80059d8 <_printf_float+0xc8>
 8005986:	2200      	movs	r2, #0
 8005988:	2300      	movs	r3, #0
 800598a:	0029      	movs	r1, r5
 800598c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800598e:	f7fa fd63 	bl	8000458 <__aeabi_dcmplt>
 8005992:	2800      	cmp	r0, #0
 8005994:	d003      	beq.n	800599e <_printf_float+0x8e>
 8005996:	0023      	movs	r3, r4
 8005998:	222d      	movs	r2, #45	; 0x2d
 800599a:	3343      	adds	r3, #67	; 0x43
 800599c:	701a      	strb	r2, [r3, #0]
 800599e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059a0:	4d99      	ldr	r5, [pc, #612]	; (8005c08 <_printf_float+0x2f8>)
 80059a2:	2b47      	cmp	r3, #71	; 0x47
 80059a4:	d900      	bls.n	80059a8 <_printf_float+0x98>
 80059a6:	4d99      	ldr	r5, [pc, #612]	; (8005c0c <_printf_float+0x2fc>)
 80059a8:	2303      	movs	r3, #3
 80059aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80059ac:	6123      	str	r3, [r4, #16]
 80059ae:	3301      	adds	r3, #1
 80059b0:	439a      	bics	r2, r3
 80059b2:	2300      	movs	r3, #0
 80059b4:	6022      	str	r2, [r4, #0]
 80059b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80059b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059ba:	0021      	movs	r1, r4
 80059bc:	0038      	movs	r0, r7
 80059be:	9600      	str	r6, [sp, #0]
 80059c0:	aa13      	add	r2, sp, #76	; 0x4c
 80059c2:	f000 f9e7 	bl	8005d94 <_printf_common>
 80059c6:	1c43      	adds	r3, r0, #1
 80059c8:	d000      	beq.n	80059cc <_printf_float+0xbc>
 80059ca:	e0a2      	b.n	8005b12 <_printf_float+0x202>
 80059cc:	2001      	movs	r0, #1
 80059ce:	4240      	negs	r0, r0
 80059d0:	b015      	add	sp, #84	; 0x54
 80059d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059d4:	3307      	adds	r3, #7
 80059d6:	e7b6      	b.n	8005946 <_printf_float+0x36>
 80059d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80059da:	002b      	movs	r3, r5
 80059dc:	0010      	movs	r0, r2
 80059de:	0029      	movs	r1, r5
 80059e0:	f7fc fb0e 	bl	8002000 <__aeabi_dcmpun>
 80059e4:	2800      	cmp	r0, #0
 80059e6:	d00b      	beq.n	8005a00 <_printf_float+0xf0>
 80059e8:	2d00      	cmp	r5, #0
 80059ea:	da03      	bge.n	80059f4 <_printf_float+0xe4>
 80059ec:	0023      	movs	r3, r4
 80059ee:	222d      	movs	r2, #45	; 0x2d
 80059f0:	3343      	adds	r3, #67	; 0x43
 80059f2:	701a      	strb	r2, [r3, #0]
 80059f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059f6:	4d86      	ldr	r5, [pc, #536]	; (8005c10 <_printf_float+0x300>)
 80059f8:	2b47      	cmp	r3, #71	; 0x47
 80059fa:	d9d5      	bls.n	80059a8 <_printf_float+0x98>
 80059fc:	4d85      	ldr	r5, [pc, #532]	; (8005c14 <_printf_float+0x304>)
 80059fe:	e7d3      	b.n	80059a8 <_printf_float+0x98>
 8005a00:	2220      	movs	r2, #32
 8005a02:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005a04:	6863      	ldr	r3, [r4, #4]
 8005a06:	4391      	bics	r1, r2
 8005a08:	910f      	str	r1, [sp, #60]	; 0x3c
 8005a0a:	1c5a      	adds	r2, r3, #1
 8005a0c:	d149      	bne.n	8005aa2 <_printf_float+0x192>
 8005a0e:	3307      	adds	r3, #7
 8005a10:	6063      	str	r3, [r4, #4]
 8005a12:	2380      	movs	r3, #128	; 0x80
 8005a14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005a16:	00db      	lsls	r3, r3, #3
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	9206      	str	r2, [sp, #24]
 8005a1e:	aa12      	add	r2, sp, #72	; 0x48
 8005a20:	9205      	str	r2, [sp, #20]
 8005a22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a24:	a908      	add	r1, sp, #32
 8005a26:	9204      	str	r2, [sp, #16]
 8005a28:	aa11      	add	r2, sp, #68	; 0x44
 8005a2a:	9203      	str	r2, [sp, #12]
 8005a2c:	2223      	movs	r2, #35	; 0x23
 8005a2e:	6023      	str	r3, [r4, #0]
 8005a30:	9301      	str	r3, [sp, #4]
 8005a32:	6863      	ldr	r3, [r4, #4]
 8005a34:	1852      	adds	r2, r2, r1
 8005a36:	9202      	str	r2, [sp, #8]
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	0038      	movs	r0, r7
 8005a3c:	002b      	movs	r3, r5
 8005a3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005a40:	f7ff febc 	bl	80057bc <__cvt>
 8005a44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a46:	0005      	movs	r5, r0
 8005a48:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005a4a:	2b47      	cmp	r3, #71	; 0x47
 8005a4c:	d108      	bne.n	8005a60 <_printf_float+0x150>
 8005a4e:	1ccb      	adds	r3, r1, #3
 8005a50:	db02      	blt.n	8005a58 <_printf_float+0x148>
 8005a52:	6863      	ldr	r3, [r4, #4]
 8005a54:	4299      	cmp	r1, r3
 8005a56:	dd48      	ble.n	8005aea <_printf_float+0x1da>
 8005a58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a5a:	3b02      	subs	r3, #2
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	930a      	str	r3, [sp, #40]	; 0x28
 8005a60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a62:	2b65      	cmp	r3, #101	; 0x65
 8005a64:	d824      	bhi.n	8005ab0 <_printf_float+0x1a0>
 8005a66:	0020      	movs	r0, r4
 8005a68:	001a      	movs	r2, r3
 8005a6a:	3901      	subs	r1, #1
 8005a6c:	3050      	adds	r0, #80	; 0x50
 8005a6e:	9111      	str	r1, [sp, #68]	; 0x44
 8005a70:	f7ff ff07 	bl	8005882 <__exponent>
 8005a74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005a76:	900b      	str	r0, [sp, #44]	; 0x2c
 8005a78:	1813      	adds	r3, r2, r0
 8005a7a:	6123      	str	r3, [r4, #16]
 8005a7c:	2a01      	cmp	r2, #1
 8005a7e:	dc02      	bgt.n	8005a86 <_printf_float+0x176>
 8005a80:	6822      	ldr	r2, [r4, #0]
 8005a82:	07d2      	lsls	r2, r2, #31
 8005a84:	d501      	bpl.n	8005a8a <_printf_float+0x17a>
 8005a86:	3301      	adds	r3, #1
 8005a88:	6123      	str	r3, [r4, #16]
 8005a8a:	2323      	movs	r3, #35	; 0x23
 8005a8c:	aa08      	add	r2, sp, #32
 8005a8e:	189b      	adds	r3, r3, r2
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d100      	bne.n	8005a98 <_printf_float+0x188>
 8005a96:	e78f      	b.n	80059b8 <_printf_float+0xa8>
 8005a98:	0023      	movs	r3, r4
 8005a9a:	222d      	movs	r2, #45	; 0x2d
 8005a9c:	3343      	adds	r3, #67	; 0x43
 8005a9e:	701a      	strb	r2, [r3, #0]
 8005aa0:	e78a      	b.n	80059b8 <_printf_float+0xa8>
 8005aa2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005aa4:	2a47      	cmp	r2, #71	; 0x47
 8005aa6:	d1b4      	bne.n	8005a12 <_printf_float+0x102>
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1b2      	bne.n	8005a12 <_printf_float+0x102>
 8005aac:	3301      	adds	r3, #1
 8005aae:	e7af      	b.n	8005a10 <_printf_float+0x100>
 8005ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ab2:	2b66      	cmp	r3, #102	; 0x66
 8005ab4:	d11b      	bne.n	8005aee <_printf_float+0x1de>
 8005ab6:	6863      	ldr	r3, [r4, #4]
 8005ab8:	2900      	cmp	r1, #0
 8005aba:	dd0d      	ble.n	8005ad8 <_printf_float+0x1c8>
 8005abc:	6121      	str	r1, [r4, #16]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d102      	bne.n	8005ac8 <_printf_float+0x1b8>
 8005ac2:	6822      	ldr	r2, [r4, #0]
 8005ac4:	07d2      	lsls	r2, r2, #31
 8005ac6:	d502      	bpl.n	8005ace <_printf_float+0x1be>
 8005ac8:	3301      	adds	r3, #1
 8005aca:	1859      	adds	r1, r3, r1
 8005acc:	6121      	str	r1, [r4, #16]
 8005ace:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ad0:	65a3      	str	r3, [r4, #88]	; 0x58
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ad6:	e7d8      	b.n	8005a8a <_printf_float+0x17a>
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d103      	bne.n	8005ae4 <_printf_float+0x1d4>
 8005adc:	2201      	movs	r2, #1
 8005ade:	6821      	ldr	r1, [r4, #0]
 8005ae0:	4211      	tst	r1, r2
 8005ae2:	d000      	beq.n	8005ae6 <_printf_float+0x1d6>
 8005ae4:	1c9a      	adds	r2, r3, #2
 8005ae6:	6122      	str	r2, [r4, #16]
 8005ae8:	e7f1      	b.n	8005ace <_printf_float+0x1be>
 8005aea:	2367      	movs	r3, #103	; 0x67
 8005aec:	930a      	str	r3, [sp, #40]	; 0x28
 8005aee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005af0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005af2:	4293      	cmp	r3, r2
 8005af4:	db06      	blt.n	8005b04 <_printf_float+0x1f4>
 8005af6:	6822      	ldr	r2, [r4, #0]
 8005af8:	6123      	str	r3, [r4, #16]
 8005afa:	07d2      	lsls	r2, r2, #31
 8005afc:	d5e7      	bpl.n	8005ace <_printf_float+0x1be>
 8005afe:	3301      	adds	r3, #1
 8005b00:	6123      	str	r3, [r4, #16]
 8005b02:	e7e4      	b.n	8005ace <_printf_float+0x1be>
 8005b04:	2101      	movs	r1, #1
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	dc01      	bgt.n	8005b0e <_printf_float+0x1fe>
 8005b0a:	1849      	adds	r1, r1, r1
 8005b0c:	1ac9      	subs	r1, r1, r3
 8005b0e:	1852      	adds	r2, r2, r1
 8005b10:	e7e9      	b.n	8005ae6 <_printf_float+0x1d6>
 8005b12:	6822      	ldr	r2, [r4, #0]
 8005b14:	0553      	lsls	r3, r2, #21
 8005b16:	d407      	bmi.n	8005b28 <_printf_float+0x218>
 8005b18:	6923      	ldr	r3, [r4, #16]
 8005b1a:	002a      	movs	r2, r5
 8005b1c:	0038      	movs	r0, r7
 8005b1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b20:	47b0      	blx	r6
 8005b22:	1c43      	adds	r3, r0, #1
 8005b24:	d128      	bne.n	8005b78 <_printf_float+0x268>
 8005b26:	e751      	b.n	80059cc <_printf_float+0xbc>
 8005b28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b2a:	2b65      	cmp	r3, #101	; 0x65
 8005b2c:	d800      	bhi.n	8005b30 <_printf_float+0x220>
 8005b2e:	e0e1      	b.n	8005cf4 <_printf_float+0x3e4>
 8005b30:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005b32:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005b34:	2200      	movs	r2, #0
 8005b36:	2300      	movs	r3, #0
 8005b38:	f7fa fc88 	bl	800044c <__aeabi_dcmpeq>
 8005b3c:	2800      	cmp	r0, #0
 8005b3e:	d031      	beq.n	8005ba4 <_printf_float+0x294>
 8005b40:	2301      	movs	r3, #1
 8005b42:	0038      	movs	r0, r7
 8005b44:	4a34      	ldr	r2, [pc, #208]	; (8005c18 <_printf_float+0x308>)
 8005b46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b48:	47b0      	blx	r6
 8005b4a:	1c43      	adds	r3, r0, #1
 8005b4c:	d100      	bne.n	8005b50 <_printf_float+0x240>
 8005b4e:	e73d      	b.n	80059cc <_printf_float+0xbc>
 8005b50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b52:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005b54:	4293      	cmp	r3, r2
 8005b56:	db02      	blt.n	8005b5e <_printf_float+0x24e>
 8005b58:	6823      	ldr	r3, [r4, #0]
 8005b5a:	07db      	lsls	r3, r3, #31
 8005b5c:	d50c      	bpl.n	8005b78 <_printf_float+0x268>
 8005b5e:	0038      	movs	r0, r7
 8005b60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b66:	47b0      	blx	r6
 8005b68:	2500      	movs	r5, #0
 8005b6a:	1c43      	adds	r3, r0, #1
 8005b6c:	d100      	bne.n	8005b70 <_printf_float+0x260>
 8005b6e:	e72d      	b.n	80059cc <_printf_float+0xbc>
 8005b70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b72:	3b01      	subs	r3, #1
 8005b74:	42ab      	cmp	r3, r5
 8005b76:	dc0a      	bgt.n	8005b8e <_printf_float+0x27e>
 8005b78:	6823      	ldr	r3, [r4, #0]
 8005b7a:	079b      	lsls	r3, r3, #30
 8005b7c:	d500      	bpl.n	8005b80 <_printf_float+0x270>
 8005b7e:	e106      	b.n	8005d8e <_printf_float+0x47e>
 8005b80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005b82:	68e0      	ldr	r0, [r4, #12]
 8005b84:	4298      	cmp	r0, r3
 8005b86:	db00      	blt.n	8005b8a <_printf_float+0x27a>
 8005b88:	e722      	b.n	80059d0 <_printf_float+0xc0>
 8005b8a:	0018      	movs	r0, r3
 8005b8c:	e720      	b.n	80059d0 <_printf_float+0xc0>
 8005b8e:	0022      	movs	r2, r4
 8005b90:	2301      	movs	r3, #1
 8005b92:	0038      	movs	r0, r7
 8005b94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b96:	321a      	adds	r2, #26
 8005b98:	47b0      	blx	r6
 8005b9a:	1c43      	adds	r3, r0, #1
 8005b9c:	d100      	bne.n	8005ba0 <_printf_float+0x290>
 8005b9e:	e715      	b.n	80059cc <_printf_float+0xbc>
 8005ba0:	3501      	adds	r5, #1
 8005ba2:	e7e5      	b.n	8005b70 <_printf_float+0x260>
 8005ba4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	dc38      	bgt.n	8005c1c <_printf_float+0x30c>
 8005baa:	2301      	movs	r3, #1
 8005bac:	0038      	movs	r0, r7
 8005bae:	4a1a      	ldr	r2, [pc, #104]	; (8005c18 <_printf_float+0x308>)
 8005bb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bb2:	47b0      	blx	r6
 8005bb4:	1c43      	adds	r3, r0, #1
 8005bb6:	d100      	bne.n	8005bba <_printf_float+0x2aa>
 8005bb8:	e708      	b.n	80059cc <_printf_float+0xbc>
 8005bba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005bbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	d102      	bne.n	8005bc8 <_printf_float+0x2b8>
 8005bc2:	6823      	ldr	r3, [r4, #0]
 8005bc4:	07db      	lsls	r3, r3, #31
 8005bc6:	d5d7      	bpl.n	8005b78 <_printf_float+0x268>
 8005bc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bca:	0038      	movs	r0, r7
 8005bcc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005bce:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bd0:	47b0      	blx	r6
 8005bd2:	1c43      	adds	r3, r0, #1
 8005bd4:	d100      	bne.n	8005bd8 <_printf_float+0x2c8>
 8005bd6:	e6f9      	b.n	80059cc <_printf_float+0xbc>
 8005bd8:	2300      	movs	r3, #0
 8005bda:	930a      	str	r3, [sp, #40]	; 0x28
 8005bdc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005bde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005be0:	425b      	negs	r3, r3
 8005be2:	4293      	cmp	r3, r2
 8005be4:	dc01      	bgt.n	8005bea <_printf_float+0x2da>
 8005be6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005be8:	e797      	b.n	8005b1a <_printf_float+0x20a>
 8005bea:	0022      	movs	r2, r4
 8005bec:	2301      	movs	r3, #1
 8005bee:	0038      	movs	r0, r7
 8005bf0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bf2:	321a      	adds	r2, #26
 8005bf4:	47b0      	blx	r6
 8005bf6:	1c43      	adds	r3, r0, #1
 8005bf8:	d100      	bne.n	8005bfc <_printf_float+0x2ec>
 8005bfa:	e6e7      	b.n	80059cc <_printf_float+0xbc>
 8005bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bfe:	3301      	adds	r3, #1
 8005c00:	e7eb      	b.n	8005bda <_printf_float+0x2ca>
 8005c02:	46c0      	nop			; (mov r8, r8)
 8005c04:	7fefffff 	.word	0x7fefffff
 8005c08:	0800a2e4 	.word	0x0800a2e4
 8005c0c:	0800a2e8 	.word	0x0800a2e8
 8005c10:	0800a2ec 	.word	0x0800a2ec
 8005c14:	0800a2f0 	.word	0x0800a2f0
 8005c18:	0800a2f4 	.word	0x0800a2f4
 8005c1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c20:	920a      	str	r2, [sp, #40]	; 0x28
 8005c22:	429a      	cmp	r2, r3
 8005c24:	dd00      	ble.n	8005c28 <_printf_float+0x318>
 8005c26:	930a      	str	r3, [sp, #40]	; 0x28
 8005c28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	dc3c      	bgt.n	8005ca8 <_printf_float+0x398>
 8005c2e:	2300      	movs	r3, #0
 8005c30:	930d      	str	r3, [sp, #52]	; 0x34
 8005c32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c34:	43db      	mvns	r3, r3
 8005c36:	17db      	asrs	r3, r3, #31
 8005c38:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c42:	4013      	ands	r3, r2
 8005c44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	dc34      	bgt.n	8005cb8 <_printf_float+0x3a8>
 8005c4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c50:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c52:	4293      	cmp	r3, r2
 8005c54:	db3d      	blt.n	8005cd2 <_printf_float+0x3c2>
 8005c56:	6823      	ldr	r3, [r4, #0]
 8005c58:	07db      	lsls	r3, r3, #31
 8005c5a:	d43a      	bmi.n	8005cd2 <_printf_float+0x3c2>
 8005c5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c60:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	1a52      	subs	r2, r2, r1
 8005c66:	920a      	str	r2, [sp, #40]	; 0x28
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	dd00      	ble.n	8005c6e <_printf_float+0x35e>
 8005c6c:	930a      	str	r3, [sp, #40]	; 0x28
 8005c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	dc36      	bgt.n	8005ce2 <_printf_float+0x3d2>
 8005c74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c76:	2500      	movs	r5, #0
 8005c78:	43db      	mvns	r3, r3
 8005c7a:	17db      	asrs	r3, r3, #31
 8005c7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c7e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005c80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005c82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c84:	1a9b      	subs	r3, r3, r2
 8005c86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c88:	400a      	ands	r2, r1
 8005c8a:	1a9b      	subs	r3, r3, r2
 8005c8c:	42ab      	cmp	r3, r5
 8005c8e:	dc00      	bgt.n	8005c92 <_printf_float+0x382>
 8005c90:	e772      	b.n	8005b78 <_printf_float+0x268>
 8005c92:	0022      	movs	r2, r4
 8005c94:	2301      	movs	r3, #1
 8005c96:	0038      	movs	r0, r7
 8005c98:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c9a:	321a      	adds	r2, #26
 8005c9c:	47b0      	blx	r6
 8005c9e:	1c43      	adds	r3, r0, #1
 8005ca0:	d100      	bne.n	8005ca4 <_printf_float+0x394>
 8005ca2:	e693      	b.n	80059cc <_printf_float+0xbc>
 8005ca4:	3501      	adds	r5, #1
 8005ca6:	e7ea      	b.n	8005c7e <_printf_float+0x36e>
 8005ca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005caa:	002a      	movs	r2, r5
 8005cac:	0038      	movs	r0, r7
 8005cae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005cb0:	47b0      	blx	r6
 8005cb2:	1c43      	adds	r3, r0, #1
 8005cb4:	d1bb      	bne.n	8005c2e <_printf_float+0x31e>
 8005cb6:	e689      	b.n	80059cc <_printf_float+0xbc>
 8005cb8:	0022      	movs	r2, r4
 8005cba:	2301      	movs	r3, #1
 8005cbc:	0038      	movs	r0, r7
 8005cbe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005cc0:	321a      	adds	r2, #26
 8005cc2:	47b0      	blx	r6
 8005cc4:	1c43      	adds	r3, r0, #1
 8005cc6:	d100      	bne.n	8005cca <_printf_float+0x3ba>
 8005cc8:	e680      	b.n	80059cc <_printf_float+0xbc>
 8005cca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ccc:	3301      	adds	r3, #1
 8005cce:	930d      	str	r3, [sp, #52]	; 0x34
 8005cd0:	e7b3      	b.n	8005c3a <_printf_float+0x32a>
 8005cd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cd4:	0038      	movs	r0, r7
 8005cd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005cd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005cda:	47b0      	blx	r6
 8005cdc:	1c43      	adds	r3, r0, #1
 8005cde:	d1bd      	bne.n	8005c5c <_printf_float+0x34c>
 8005ce0:	e674      	b.n	80059cc <_printf_float+0xbc>
 8005ce2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ce4:	0038      	movs	r0, r7
 8005ce6:	18ea      	adds	r2, r5, r3
 8005ce8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005cea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cec:	47b0      	blx	r6
 8005cee:	1c43      	adds	r3, r0, #1
 8005cf0:	d1c0      	bne.n	8005c74 <_printf_float+0x364>
 8005cf2:	e66b      	b.n	80059cc <_printf_float+0xbc>
 8005cf4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	dc02      	bgt.n	8005d00 <_printf_float+0x3f0>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	421a      	tst	r2, r3
 8005cfe:	d034      	beq.n	8005d6a <_printf_float+0x45a>
 8005d00:	2301      	movs	r3, #1
 8005d02:	002a      	movs	r2, r5
 8005d04:	0038      	movs	r0, r7
 8005d06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d08:	47b0      	blx	r6
 8005d0a:	1c43      	adds	r3, r0, #1
 8005d0c:	d100      	bne.n	8005d10 <_printf_float+0x400>
 8005d0e:	e65d      	b.n	80059cc <_printf_float+0xbc>
 8005d10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d12:	0038      	movs	r0, r7
 8005d14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d18:	47b0      	blx	r6
 8005d1a:	1c43      	adds	r3, r0, #1
 8005d1c:	d100      	bne.n	8005d20 <_printf_float+0x410>
 8005d1e:	e655      	b.n	80059cc <_printf_float+0xbc>
 8005d20:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005d22:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005d24:	2200      	movs	r2, #0
 8005d26:	2300      	movs	r3, #0
 8005d28:	f7fa fb90 	bl	800044c <__aeabi_dcmpeq>
 8005d2c:	2800      	cmp	r0, #0
 8005d2e:	d11a      	bne.n	8005d66 <_printf_float+0x456>
 8005d30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d32:	1c6a      	adds	r2, r5, #1
 8005d34:	3b01      	subs	r3, #1
 8005d36:	0038      	movs	r0, r7
 8005d38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d3a:	47b0      	blx	r6
 8005d3c:	1c43      	adds	r3, r0, #1
 8005d3e:	d10e      	bne.n	8005d5e <_printf_float+0x44e>
 8005d40:	e644      	b.n	80059cc <_printf_float+0xbc>
 8005d42:	0022      	movs	r2, r4
 8005d44:	2301      	movs	r3, #1
 8005d46:	0038      	movs	r0, r7
 8005d48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d4a:	321a      	adds	r2, #26
 8005d4c:	47b0      	blx	r6
 8005d4e:	1c43      	adds	r3, r0, #1
 8005d50:	d100      	bne.n	8005d54 <_printf_float+0x444>
 8005d52:	e63b      	b.n	80059cc <_printf_float+0xbc>
 8005d54:	3501      	adds	r5, #1
 8005d56:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	42ab      	cmp	r3, r5
 8005d5c:	dcf1      	bgt.n	8005d42 <_printf_float+0x432>
 8005d5e:	0022      	movs	r2, r4
 8005d60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d62:	3250      	adds	r2, #80	; 0x50
 8005d64:	e6da      	b.n	8005b1c <_printf_float+0x20c>
 8005d66:	2500      	movs	r5, #0
 8005d68:	e7f5      	b.n	8005d56 <_printf_float+0x446>
 8005d6a:	002a      	movs	r2, r5
 8005d6c:	e7e3      	b.n	8005d36 <_printf_float+0x426>
 8005d6e:	0022      	movs	r2, r4
 8005d70:	2301      	movs	r3, #1
 8005d72:	0038      	movs	r0, r7
 8005d74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d76:	3219      	adds	r2, #25
 8005d78:	47b0      	blx	r6
 8005d7a:	1c43      	adds	r3, r0, #1
 8005d7c:	d100      	bne.n	8005d80 <_printf_float+0x470>
 8005d7e:	e625      	b.n	80059cc <_printf_float+0xbc>
 8005d80:	3501      	adds	r5, #1
 8005d82:	68e3      	ldr	r3, [r4, #12]
 8005d84:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005d86:	1a9b      	subs	r3, r3, r2
 8005d88:	42ab      	cmp	r3, r5
 8005d8a:	dcf0      	bgt.n	8005d6e <_printf_float+0x45e>
 8005d8c:	e6f8      	b.n	8005b80 <_printf_float+0x270>
 8005d8e:	2500      	movs	r5, #0
 8005d90:	e7f7      	b.n	8005d82 <_printf_float+0x472>
 8005d92:	46c0      	nop			; (mov r8, r8)

08005d94 <_printf_common>:
 8005d94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d96:	0015      	movs	r5, r2
 8005d98:	9301      	str	r3, [sp, #4]
 8005d9a:	688a      	ldr	r2, [r1, #8]
 8005d9c:	690b      	ldr	r3, [r1, #16]
 8005d9e:	000c      	movs	r4, r1
 8005da0:	9000      	str	r0, [sp, #0]
 8005da2:	4293      	cmp	r3, r2
 8005da4:	da00      	bge.n	8005da8 <_printf_common+0x14>
 8005da6:	0013      	movs	r3, r2
 8005da8:	0022      	movs	r2, r4
 8005daa:	602b      	str	r3, [r5, #0]
 8005dac:	3243      	adds	r2, #67	; 0x43
 8005dae:	7812      	ldrb	r2, [r2, #0]
 8005db0:	2a00      	cmp	r2, #0
 8005db2:	d001      	beq.n	8005db8 <_printf_common+0x24>
 8005db4:	3301      	adds	r3, #1
 8005db6:	602b      	str	r3, [r5, #0]
 8005db8:	6823      	ldr	r3, [r4, #0]
 8005dba:	069b      	lsls	r3, r3, #26
 8005dbc:	d502      	bpl.n	8005dc4 <_printf_common+0x30>
 8005dbe:	682b      	ldr	r3, [r5, #0]
 8005dc0:	3302      	adds	r3, #2
 8005dc2:	602b      	str	r3, [r5, #0]
 8005dc4:	6822      	ldr	r2, [r4, #0]
 8005dc6:	2306      	movs	r3, #6
 8005dc8:	0017      	movs	r7, r2
 8005dca:	401f      	ands	r7, r3
 8005dcc:	421a      	tst	r2, r3
 8005dce:	d027      	beq.n	8005e20 <_printf_common+0x8c>
 8005dd0:	0023      	movs	r3, r4
 8005dd2:	3343      	adds	r3, #67	; 0x43
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	1e5a      	subs	r2, r3, #1
 8005dd8:	4193      	sbcs	r3, r2
 8005dda:	6822      	ldr	r2, [r4, #0]
 8005ddc:	0692      	lsls	r2, r2, #26
 8005dde:	d430      	bmi.n	8005e42 <_printf_common+0xae>
 8005de0:	0022      	movs	r2, r4
 8005de2:	9901      	ldr	r1, [sp, #4]
 8005de4:	9800      	ldr	r0, [sp, #0]
 8005de6:	9e08      	ldr	r6, [sp, #32]
 8005de8:	3243      	adds	r2, #67	; 0x43
 8005dea:	47b0      	blx	r6
 8005dec:	1c43      	adds	r3, r0, #1
 8005dee:	d025      	beq.n	8005e3c <_printf_common+0xa8>
 8005df0:	2306      	movs	r3, #6
 8005df2:	6820      	ldr	r0, [r4, #0]
 8005df4:	682a      	ldr	r2, [r5, #0]
 8005df6:	68e1      	ldr	r1, [r4, #12]
 8005df8:	2500      	movs	r5, #0
 8005dfa:	4003      	ands	r3, r0
 8005dfc:	2b04      	cmp	r3, #4
 8005dfe:	d103      	bne.n	8005e08 <_printf_common+0x74>
 8005e00:	1a8d      	subs	r5, r1, r2
 8005e02:	43eb      	mvns	r3, r5
 8005e04:	17db      	asrs	r3, r3, #31
 8005e06:	401d      	ands	r5, r3
 8005e08:	68a3      	ldr	r3, [r4, #8]
 8005e0a:	6922      	ldr	r2, [r4, #16]
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	dd01      	ble.n	8005e14 <_printf_common+0x80>
 8005e10:	1a9b      	subs	r3, r3, r2
 8005e12:	18ed      	adds	r5, r5, r3
 8005e14:	2700      	movs	r7, #0
 8005e16:	42bd      	cmp	r5, r7
 8005e18:	d120      	bne.n	8005e5c <_printf_common+0xc8>
 8005e1a:	2000      	movs	r0, #0
 8005e1c:	e010      	b.n	8005e40 <_printf_common+0xac>
 8005e1e:	3701      	adds	r7, #1
 8005e20:	68e3      	ldr	r3, [r4, #12]
 8005e22:	682a      	ldr	r2, [r5, #0]
 8005e24:	1a9b      	subs	r3, r3, r2
 8005e26:	42bb      	cmp	r3, r7
 8005e28:	ddd2      	ble.n	8005dd0 <_printf_common+0x3c>
 8005e2a:	0022      	movs	r2, r4
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	9901      	ldr	r1, [sp, #4]
 8005e30:	9800      	ldr	r0, [sp, #0]
 8005e32:	9e08      	ldr	r6, [sp, #32]
 8005e34:	3219      	adds	r2, #25
 8005e36:	47b0      	blx	r6
 8005e38:	1c43      	adds	r3, r0, #1
 8005e3a:	d1f0      	bne.n	8005e1e <_printf_common+0x8a>
 8005e3c:	2001      	movs	r0, #1
 8005e3e:	4240      	negs	r0, r0
 8005e40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005e42:	2030      	movs	r0, #48	; 0x30
 8005e44:	18e1      	adds	r1, r4, r3
 8005e46:	3143      	adds	r1, #67	; 0x43
 8005e48:	7008      	strb	r0, [r1, #0]
 8005e4a:	0021      	movs	r1, r4
 8005e4c:	1c5a      	adds	r2, r3, #1
 8005e4e:	3145      	adds	r1, #69	; 0x45
 8005e50:	7809      	ldrb	r1, [r1, #0]
 8005e52:	18a2      	adds	r2, r4, r2
 8005e54:	3243      	adds	r2, #67	; 0x43
 8005e56:	3302      	adds	r3, #2
 8005e58:	7011      	strb	r1, [r2, #0]
 8005e5a:	e7c1      	b.n	8005de0 <_printf_common+0x4c>
 8005e5c:	0022      	movs	r2, r4
 8005e5e:	2301      	movs	r3, #1
 8005e60:	9901      	ldr	r1, [sp, #4]
 8005e62:	9800      	ldr	r0, [sp, #0]
 8005e64:	9e08      	ldr	r6, [sp, #32]
 8005e66:	321a      	adds	r2, #26
 8005e68:	47b0      	blx	r6
 8005e6a:	1c43      	adds	r3, r0, #1
 8005e6c:	d0e6      	beq.n	8005e3c <_printf_common+0xa8>
 8005e6e:	3701      	adds	r7, #1
 8005e70:	e7d1      	b.n	8005e16 <_printf_common+0x82>
	...

08005e74 <_printf_i>:
 8005e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e76:	b08b      	sub	sp, #44	; 0x2c
 8005e78:	9206      	str	r2, [sp, #24]
 8005e7a:	000a      	movs	r2, r1
 8005e7c:	3243      	adds	r2, #67	; 0x43
 8005e7e:	9307      	str	r3, [sp, #28]
 8005e80:	9005      	str	r0, [sp, #20]
 8005e82:	9204      	str	r2, [sp, #16]
 8005e84:	7e0a      	ldrb	r2, [r1, #24]
 8005e86:	000c      	movs	r4, r1
 8005e88:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e8a:	2a78      	cmp	r2, #120	; 0x78
 8005e8c:	d807      	bhi.n	8005e9e <_printf_i+0x2a>
 8005e8e:	2a62      	cmp	r2, #98	; 0x62
 8005e90:	d809      	bhi.n	8005ea6 <_printf_i+0x32>
 8005e92:	2a00      	cmp	r2, #0
 8005e94:	d100      	bne.n	8005e98 <_printf_i+0x24>
 8005e96:	e0c1      	b.n	800601c <_printf_i+0x1a8>
 8005e98:	2a58      	cmp	r2, #88	; 0x58
 8005e9a:	d100      	bne.n	8005e9e <_printf_i+0x2a>
 8005e9c:	e08c      	b.n	8005fb8 <_printf_i+0x144>
 8005e9e:	0026      	movs	r6, r4
 8005ea0:	3642      	adds	r6, #66	; 0x42
 8005ea2:	7032      	strb	r2, [r6, #0]
 8005ea4:	e022      	b.n	8005eec <_printf_i+0x78>
 8005ea6:	0010      	movs	r0, r2
 8005ea8:	3863      	subs	r0, #99	; 0x63
 8005eaa:	2815      	cmp	r0, #21
 8005eac:	d8f7      	bhi.n	8005e9e <_printf_i+0x2a>
 8005eae:	f7fa f93d 	bl	800012c <__gnu_thumb1_case_shi>
 8005eb2:	0016      	.short	0x0016
 8005eb4:	fff6001f 	.word	0xfff6001f
 8005eb8:	fff6fff6 	.word	0xfff6fff6
 8005ebc:	001ffff6 	.word	0x001ffff6
 8005ec0:	fff6fff6 	.word	0xfff6fff6
 8005ec4:	fff6fff6 	.word	0xfff6fff6
 8005ec8:	003600a8 	.word	0x003600a8
 8005ecc:	fff6009a 	.word	0xfff6009a
 8005ed0:	00b9fff6 	.word	0x00b9fff6
 8005ed4:	0036fff6 	.word	0x0036fff6
 8005ed8:	fff6fff6 	.word	0xfff6fff6
 8005edc:	009e      	.short	0x009e
 8005ede:	0026      	movs	r6, r4
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	3642      	adds	r6, #66	; 0x42
 8005ee4:	1d11      	adds	r1, r2, #4
 8005ee6:	6019      	str	r1, [r3, #0]
 8005ee8:	6813      	ldr	r3, [r2, #0]
 8005eea:	7033      	strb	r3, [r6, #0]
 8005eec:	2301      	movs	r3, #1
 8005eee:	e0a7      	b.n	8006040 <_printf_i+0x1cc>
 8005ef0:	6808      	ldr	r0, [r1, #0]
 8005ef2:	6819      	ldr	r1, [r3, #0]
 8005ef4:	1d0a      	adds	r2, r1, #4
 8005ef6:	0605      	lsls	r5, r0, #24
 8005ef8:	d50b      	bpl.n	8005f12 <_printf_i+0x9e>
 8005efa:	680d      	ldr	r5, [r1, #0]
 8005efc:	601a      	str	r2, [r3, #0]
 8005efe:	2d00      	cmp	r5, #0
 8005f00:	da03      	bge.n	8005f0a <_printf_i+0x96>
 8005f02:	232d      	movs	r3, #45	; 0x2d
 8005f04:	9a04      	ldr	r2, [sp, #16]
 8005f06:	426d      	negs	r5, r5
 8005f08:	7013      	strb	r3, [r2, #0]
 8005f0a:	4b61      	ldr	r3, [pc, #388]	; (8006090 <_printf_i+0x21c>)
 8005f0c:	270a      	movs	r7, #10
 8005f0e:	9303      	str	r3, [sp, #12]
 8005f10:	e01b      	b.n	8005f4a <_printf_i+0xd6>
 8005f12:	680d      	ldr	r5, [r1, #0]
 8005f14:	601a      	str	r2, [r3, #0]
 8005f16:	0641      	lsls	r1, r0, #25
 8005f18:	d5f1      	bpl.n	8005efe <_printf_i+0x8a>
 8005f1a:	b22d      	sxth	r5, r5
 8005f1c:	e7ef      	b.n	8005efe <_printf_i+0x8a>
 8005f1e:	680d      	ldr	r5, [r1, #0]
 8005f20:	6819      	ldr	r1, [r3, #0]
 8005f22:	1d08      	adds	r0, r1, #4
 8005f24:	6018      	str	r0, [r3, #0]
 8005f26:	062e      	lsls	r6, r5, #24
 8005f28:	d501      	bpl.n	8005f2e <_printf_i+0xba>
 8005f2a:	680d      	ldr	r5, [r1, #0]
 8005f2c:	e003      	b.n	8005f36 <_printf_i+0xc2>
 8005f2e:	066d      	lsls	r5, r5, #25
 8005f30:	d5fb      	bpl.n	8005f2a <_printf_i+0xb6>
 8005f32:	680d      	ldr	r5, [r1, #0]
 8005f34:	b2ad      	uxth	r5, r5
 8005f36:	4b56      	ldr	r3, [pc, #344]	; (8006090 <_printf_i+0x21c>)
 8005f38:	2708      	movs	r7, #8
 8005f3a:	9303      	str	r3, [sp, #12]
 8005f3c:	2a6f      	cmp	r2, #111	; 0x6f
 8005f3e:	d000      	beq.n	8005f42 <_printf_i+0xce>
 8005f40:	3702      	adds	r7, #2
 8005f42:	0023      	movs	r3, r4
 8005f44:	2200      	movs	r2, #0
 8005f46:	3343      	adds	r3, #67	; 0x43
 8005f48:	701a      	strb	r2, [r3, #0]
 8005f4a:	6863      	ldr	r3, [r4, #4]
 8005f4c:	60a3      	str	r3, [r4, #8]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	db03      	blt.n	8005f5a <_printf_i+0xe6>
 8005f52:	2204      	movs	r2, #4
 8005f54:	6821      	ldr	r1, [r4, #0]
 8005f56:	4391      	bics	r1, r2
 8005f58:	6021      	str	r1, [r4, #0]
 8005f5a:	2d00      	cmp	r5, #0
 8005f5c:	d102      	bne.n	8005f64 <_printf_i+0xf0>
 8005f5e:	9e04      	ldr	r6, [sp, #16]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00c      	beq.n	8005f7e <_printf_i+0x10a>
 8005f64:	9e04      	ldr	r6, [sp, #16]
 8005f66:	0028      	movs	r0, r5
 8005f68:	0039      	movs	r1, r7
 8005f6a:	f7fa f96f 	bl	800024c <__aeabi_uidivmod>
 8005f6e:	9b03      	ldr	r3, [sp, #12]
 8005f70:	3e01      	subs	r6, #1
 8005f72:	5c5b      	ldrb	r3, [r3, r1]
 8005f74:	7033      	strb	r3, [r6, #0]
 8005f76:	002b      	movs	r3, r5
 8005f78:	0005      	movs	r5, r0
 8005f7a:	429f      	cmp	r7, r3
 8005f7c:	d9f3      	bls.n	8005f66 <_printf_i+0xf2>
 8005f7e:	2f08      	cmp	r7, #8
 8005f80:	d109      	bne.n	8005f96 <_printf_i+0x122>
 8005f82:	6823      	ldr	r3, [r4, #0]
 8005f84:	07db      	lsls	r3, r3, #31
 8005f86:	d506      	bpl.n	8005f96 <_printf_i+0x122>
 8005f88:	6863      	ldr	r3, [r4, #4]
 8005f8a:	6922      	ldr	r2, [r4, #16]
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	dc02      	bgt.n	8005f96 <_printf_i+0x122>
 8005f90:	2330      	movs	r3, #48	; 0x30
 8005f92:	3e01      	subs	r6, #1
 8005f94:	7033      	strb	r3, [r6, #0]
 8005f96:	9b04      	ldr	r3, [sp, #16]
 8005f98:	1b9b      	subs	r3, r3, r6
 8005f9a:	6123      	str	r3, [r4, #16]
 8005f9c:	9b07      	ldr	r3, [sp, #28]
 8005f9e:	0021      	movs	r1, r4
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	9805      	ldr	r0, [sp, #20]
 8005fa4:	9b06      	ldr	r3, [sp, #24]
 8005fa6:	aa09      	add	r2, sp, #36	; 0x24
 8005fa8:	f7ff fef4 	bl	8005d94 <_printf_common>
 8005fac:	1c43      	adds	r3, r0, #1
 8005fae:	d14c      	bne.n	800604a <_printf_i+0x1d6>
 8005fb0:	2001      	movs	r0, #1
 8005fb2:	4240      	negs	r0, r0
 8005fb4:	b00b      	add	sp, #44	; 0x2c
 8005fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fb8:	3145      	adds	r1, #69	; 0x45
 8005fba:	700a      	strb	r2, [r1, #0]
 8005fbc:	4a34      	ldr	r2, [pc, #208]	; (8006090 <_printf_i+0x21c>)
 8005fbe:	9203      	str	r2, [sp, #12]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	6821      	ldr	r1, [r4, #0]
 8005fc4:	ca20      	ldmia	r2!, {r5}
 8005fc6:	601a      	str	r2, [r3, #0]
 8005fc8:	0608      	lsls	r0, r1, #24
 8005fca:	d516      	bpl.n	8005ffa <_printf_i+0x186>
 8005fcc:	07cb      	lsls	r3, r1, #31
 8005fce:	d502      	bpl.n	8005fd6 <_printf_i+0x162>
 8005fd0:	2320      	movs	r3, #32
 8005fd2:	4319      	orrs	r1, r3
 8005fd4:	6021      	str	r1, [r4, #0]
 8005fd6:	2710      	movs	r7, #16
 8005fd8:	2d00      	cmp	r5, #0
 8005fda:	d1b2      	bne.n	8005f42 <_printf_i+0xce>
 8005fdc:	2320      	movs	r3, #32
 8005fde:	6822      	ldr	r2, [r4, #0]
 8005fe0:	439a      	bics	r2, r3
 8005fe2:	6022      	str	r2, [r4, #0]
 8005fe4:	e7ad      	b.n	8005f42 <_printf_i+0xce>
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	6809      	ldr	r1, [r1, #0]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	6022      	str	r2, [r4, #0]
 8005fee:	0022      	movs	r2, r4
 8005ff0:	2178      	movs	r1, #120	; 0x78
 8005ff2:	3245      	adds	r2, #69	; 0x45
 8005ff4:	7011      	strb	r1, [r2, #0]
 8005ff6:	4a27      	ldr	r2, [pc, #156]	; (8006094 <_printf_i+0x220>)
 8005ff8:	e7e1      	b.n	8005fbe <_printf_i+0x14a>
 8005ffa:	0648      	lsls	r0, r1, #25
 8005ffc:	d5e6      	bpl.n	8005fcc <_printf_i+0x158>
 8005ffe:	b2ad      	uxth	r5, r5
 8006000:	e7e4      	b.n	8005fcc <_printf_i+0x158>
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	680d      	ldr	r5, [r1, #0]
 8006006:	1d10      	adds	r0, r2, #4
 8006008:	6949      	ldr	r1, [r1, #20]
 800600a:	6018      	str	r0, [r3, #0]
 800600c:	6813      	ldr	r3, [r2, #0]
 800600e:	062e      	lsls	r6, r5, #24
 8006010:	d501      	bpl.n	8006016 <_printf_i+0x1a2>
 8006012:	6019      	str	r1, [r3, #0]
 8006014:	e002      	b.n	800601c <_printf_i+0x1a8>
 8006016:	066d      	lsls	r5, r5, #25
 8006018:	d5fb      	bpl.n	8006012 <_printf_i+0x19e>
 800601a:	8019      	strh	r1, [r3, #0]
 800601c:	2300      	movs	r3, #0
 800601e:	9e04      	ldr	r6, [sp, #16]
 8006020:	6123      	str	r3, [r4, #16]
 8006022:	e7bb      	b.n	8005f9c <_printf_i+0x128>
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	1d11      	adds	r1, r2, #4
 8006028:	6019      	str	r1, [r3, #0]
 800602a:	6816      	ldr	r6, [r2, #0]
 800602c:	2100      	movs	r1, #0
 800602e:	0030      	movs	r0, r6
 8006030:	6862      	ldr	r2, [r4, #4]
 8006032:	f002 fb5d 	bl	80086f0 <memchr>
 8006036:	2800      	cmp	r0, #0
 8006038:	d001      	beq.n	800603e <_printf_i+0x1ca>
 800603a:	1b80      	subs	r0, r0, r6
 800603c:	6060      	str	r0, [r4, #4]
 800603e:	6863      	ldr	r3, [r4, #4]
 8006040:	6123      	str	r3, [r4, #16]
 8006042:	2300      	movs	r3, #0
 8006044:	9a04      	ldr	r2, [sp, #16]
 8006046:	7013      	strb	r3, [r2, #0]
 8006048:	e7a8      	b.n	8005f9c <_printf_i+0x128>
 800604a:	6923      	ldr	r3, [r4, #16]
 800604c:	0032      	movs	r2, r6
 800604e:	9906      	ldr	r1, [sp, #24]
 8006050:	9805      	ldr	r0, [sp, #20]
 8006052:	9d07      	ldr	r5, [sp, #28]
 8006054:	47a8      	blx	r5
 8006056:	1c43      	adds	r3, r0, #1
 8006058:	d0aa      	beq.n	8005fb0 <_printf_i+0x13c>
 800605a:	6823      	ldr	r3, [r4, #0]
 800605c:	079b      	lsls	r3, r3, #30
 800605e:	d415      	bmi.n	800608c <_printf_i+0x218>
 8006060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006062:	68e0      	ldr	r0, [r4, #12]
 8006064:	4298      	cmp	r0, r3
 8006066:	daa5      	bge.n	8005fb4 <_printf_i+0x140>
 8006068:	0018      	movs	r0, r3
 800606a:	e7a3      	b.n	8005fb4 <_printf_i+0x140>
 800606c:	0022      	movs	r2, r4
 800606e:	2301      	movs	r3, #1
 8006070:	9906      	ldr	r1, [sp, #24]
 8006072:	9805      	ldr	r0, [sp, #20]
 8006074:	9e07      	ldr	r6, [sp, #28]
 8006076:	3219      	adds	r2, #25
 8006078:	47b0      	blx	r6
 800607a:	1c43      	adds	r3, r0, #1
 800607c:	d098      	beq.n	8005fb0 <_printf_i+0x13c>
 800607e:	3501      	adds	r5, #1
 8006080:	68e3      	ldr	r3, [r4, #12]
 8006082:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006084:	1a9b      	subs	r3, r3, r2
 8006086:	42ab      	cmp	r3, r5
 8006088:	dcf0      	bgt.n	800606c <_printf_i+0x1f8>
 800608a:	e7e9      	b.n	8006060 <_printf_i+0x1ec>
 800608c:	2500      	movs	r5, #0
 800608e:	e7f7      	b.n	8006080 <_printf_i+0x20c>
 8006090:	0800a2f6 	.word	0x0800a2f6
 8006094:	0800a307 	.word	0x0800a307

08006098 <_scanf_float>:
 8006098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800609a:	b08b      	sub	sp, #44	; 0x2c
 800609c:	0015      	movs	r5, r2
 800609e:	9001      	str	r0, [sp, #4]
 80060a0:	22ae      	movs	r2, #174	; 0xae
 80060a2:	2000      	movs	r0, #0
 80060a4:	9306      	str	r3, [sp, #24]
 80060a6:	688b      	ldr	r3, [r1, #8]
 80060a8:	000e      	movs	r6, r1
 80060aa:	1e59      	subs	r1, r3, #1
 80060ac:	0052      	lsls	r2, r2, #1
 80060ae:	9005      	str	r0, [sp, #20]
 80060b0:	4291      	cmp	r1, r2
 80060b2:	d905      	bls.n	80060c0 <_scanf_float+0x28>
 80060b4:	3b5e      	subs	r3, #94	; 0x5e
 80060b6:	3bff      	subs	r3, #255	; 0xff
 80060b8:	9305      	str	r3, [sp, #20]
 80060ba:	235e      	movs	r3, #94	; 0x5e
 80060bc:	33ff      	adds	r3, #255	; 0xff
 80060be:	60b3      	str	r3, [r6, #8]
 80060c0:	23f0      	movs	r3, #240	; 0xf0
 80060c2:	6832      	ldr	r2, [r6, #0]
 80060c4:	00db      	lsls	r3, r3, #3
 80060c6:	4313      	orrs	r3, r2
 80060c8:	6033      	str	r3, [r6, #0]
 80060ca:	0033      	movs	r3, r6
 80060cc:	2400      	movs	r4, #0
 80060ce:	331c      	adds	r3, #28
 80060d0:	001f      	movs	r7, r3
 80060d2:	9303      	str	r3, [sp, #12]
 80060d4:	9402      	str	r4, [sp, #8]
 80060d6:	9408      	str	r4, [sp, #32]
 80060d8:	9407      	str	r4, [sp, #28]
 80060da:	9400      	str	r4, [sp, #0]
 80060dc:	9404      	str	r4, [sp, #16]
 80060de:	68b2      	ldr	r2, [r6, #8]
 80060e0:	2a00      	cmp	r2, #0
 80060e2:	d00a      	beq.n	80060fa <_scanf_float+0x62>
 80060e4:	682b      	ldr	r3, [r5, #0]
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	2b4e      	cmp	r3, #78	; 0x4e
 80060ea:	d844      	bhi.n	8006176 <_scanf_float+0xde>
 80060ec:	0018      	movs	r0, r3
 80060ee:	2b40      	cmp	r3, #64	; 0x40
 80060f0:	d82c      	bhi.n	800614c <_scanf_float+0xb4>
 80060f2:	382b      	subs	r0, #43	; 0x2b
 80060f4:	b2c1      	uxtb	r1, r0
 80060f6:	290e      	cmp	r1, #14
 80060f8:	d92a      	bls.n	8006150 <_scanf_float+0xb8>
 80060fa:	9b00      	ldr	r3, [sp, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d003      	beq.n	8006108 <_scanf_float+0x70>
 8006100:	6832      	ldr	r2, [r6, #0]
 8006102:	4ba4      	ldr	r3, [pc, #656]	; (8006394 <_scanf_float+0x2fc>)
 8006104:	4013      	ands	r3, r2
 8006106:	6033      	str	r3, [r6, #0]
 8006108:	9b02      	ldr	r3, [sp, #8]
 800610a:	3b01      	subs	r3, #1
 800610c:	2b01      	cmp	r3, #1
 800610e:	d900      	bls.n	8006112 <_scanf_float+0x7a>
 8006110:	e0f9      	b.n	8006306 <_scanf_float+0x26e>
 8006112:	24be      	movs	r4, #190	; 0xbe
 8006114:	0064      	lsls	r4, r4, #1
 8006116:	9b03      	ldr	r3, [sp, #12]
 8006118:	429f      	cmp	r7, r3
 800611a:	d900      	bls.n	800611e <_scanf_float+0x86>
 800611c:	e0e9      	b.n	80062f2 <_scanf_float+0x25a>
 800611e:	2301      	movs	r3, #1
 8006120:	9302      	str	r3, [sp, #8]
 8006122:	e185      	b.n	8006430 <_scanf_float+0x398>
 8006124:	0018      	movs	r0, r3
 8006126:	3861      	subs	r0, #97	; 0x61
 8006128:	280d      	cmp	r0, #13
 800612a:	d8e6      	bhi.n	80060fa <_scanf_float+0x62>
 800612c:	f7f9 fffe 	bl	800012c <__gnu_thumb1_case_shi>
 8006130:	ffe50083 	.word	0xffe50083
 8006134:	ffe5ffe5 	.word	0xffe5ffe5
 8006138:	00a200b6 	.word	0x00a200b6
 800613c:	ffe5ffe5 	.word	0xffe5ffe5
 8006140:	ffe50089 	.word	0xffe50089
 8006144:	ffe5ffe5 	.word	0xffe5ffe5
 8006148:	0065ffe5 	.word	0x0065ffe5
 800614c:	3841      	subs	r0, #65	; 0x41
 800614e:	e7eb      	b.n	8006128 <_scanf_float+0x90>
 8006150:	280e      	cmp	r0, #14
 8006152:	d8d2      	bhi.n	80060fa <_scanf_float+0x62>
 8006154:	f7f9 ffea 	bl	800012c <__gnu_thumb1_case_shi>
 8006158:	ffd1004b 	.word	0xffd1004b
 800615c:	0098004b 	.word	0x0098004b
 8006160:	0020ffd1 	.word	0x0020ffd1
 8006164:	00400040 	.word	0x00400040
 8006168:	00400040 	.word	0x00400040
 800616c:	00400040 	.word	0x00400040
 8006170:	00400040 	.word	0x00400040
 8006174:	0040      	.short	0x0040
 8006176:	2b6e      	cmp	r3, #110	; 0x6e
 8006178:	d809      	bhi.n	800618e <_scanf_float+0xf6>
 800617a:	2b60      	cmp	r3, #96	; 0x60
 800617c:	d8d2      	bhi.n	8006124 <_scanf_float+0x8c>
 800617e:	2b54      	cmp	r3, #84	; 0x54
 8006180:	d07d      	beq.n	800627e <_scanf_float+0x1e6>
 8006182:	2b59      	cmp	r3, #89	; 0x59
 8006184:	d1b9      	bne.n	80060fa <_scanf_float+0x62>
 8006186:	2c07      	cmp	r4, #7
 8006188:	d1b7      	bne.n	80060fa <_scanf_float+0x62>
 800618a:	2408      	movs	r4, #8
 800618c:	e02c      	b.n	80061e8 <_scanf_float+0x150>
 800618e:	2b74      	cmp	r3, #116	; 0x74
 8006190:	d075      	beq.n	800627e <_scanf_float+0x1e6>
 8006192:	2b79      	cmp	r3, #121	; 0x79
 8006194:	d0f7      	beq.n	8006186 <_scanf_float+0xee>
 8006196:	e7b0      	b.n	80060fa <_scanf_float+0x62>
 8006198:	6831      	ldr	r1, [r6, #0]
 800619a:	05c8      	lsls	r0, r1, #23
 800619c:	d51c      	bpl.n	80061d8 <_scanf_float+0x140>
 800619e:	2380      	movs	r3, #128	; 0x80
 80061a0:	4399      	bics	r1, r3
 80061a2:	9b00      	ldr	r3, [sp, #0]
 80061a4:	6031      	str	r1, [r6, #0]
 80061a6:	3301      	adds	r3, #1
 80061a8:	9300      	str	r3, [sp, #0]
 80061aa:	9b05      	ldr	r3, [sp, #20]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d003      	beq.n	80061b8 <_scanf_float+0x120>
 80061b0:	3b01      	subs	r3, #1
 80061b2:	3201      	adds	r2, #1
 80061b4:	9305      	str	r3, [sp, #20]
 80061b6:	60b2      	str	r2, [r6, #8]
 80061b8:	68b3      	ldr	r3, [r6, #8]
 80061ba:	3b01      	subs	r3, #1
 80061bc:	60b3      	str	r3, [r6, #8]
 80061be:	6933      	ldr	r3, [r6, #16]
 80061c0:	3301      	adds	r3, #1
 80061c2:	6133      	str	r3, [r6, #16]
 80061c4:	686b      	ldr	r3, [r5, #4]
 80061c6:	3b01      	subs	r3, #1
 80061c8:	606b      	str	r3, [r5, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	dc00      	bgt.n	80061d0 <_scanf_float+0x138>
 80061ce:	e086      	b.n	80062de <_scanf_float+0x246>
 80061d0:	682b      	ldr	r3, [r5, #0]
 80061d2:	3301      	adds	r3, #1
 80061d4:	602b      	str	r3, [r5, #0]
 80061d6:	e782      	b.n	80060de <_scanf_float+0x46>
 80061d8:	9a02      	ldr	r2, [sp, #8]
 80061da:	1912      	adds	r2, r2, r4
 80061dc:	2a00      	cmp	r2, #0
 80061de:	d18c      	bne.n	80060fa <_scanf_float+0x62>
 80061e0:	4a6d      	ldr	r2, [pc, #436]	; (8006398 <_scanf_float+0x300>)
 80061e2:	6831      	ldr	r1, [r6, #0]
 80061e4:	400a      	ands	r2, r1
 80061e6:	6032      	str	r2, [r6, #0]
 80061e8:	703b      	strb	r3, [r7, #0]
 80061ea:	3701      	adds	r7, #1
 80061ec:	e7e4      	b.n	80061b8 <_scanf_float+0x120>
 80061ee:	2180      	movs	r1, #128	; 0x80
 80061f0:	6832      	ldr	r2, [r6, #0]
 80061f2:	420a      	tst	r2, r1
 80061f4:	d081      	beq.n	80060fa <_scanf_float+0x62>
 80061f6:	438a      	bics	r2, r1
 80061f8:	e7f5      	b.n	80061e6 <_scanf_float+0x14e>
 80061fa:	9a02      	ldr	r2, [sp, #8]
 80061fc:	2a00      	cmp	r2, #0
 80061fe:	d10f      	bne.n	8006220 <_scanf_float+0x188>
 8006200:	9a00      	ldr	r2, [sp, #0]
 8006202:	2a00      	cmp	r2, #0
 8006204:	d10f      	bne.n	8006226 <_scanf_float+0x18e>
 8006206:	6832      	ldr	r2, [r6, #0]
 8006208:	21e0      	movs	r1, #224	; 0xe0
 800620a:	0010      	movs	r0, r2
 800620c:	00c9      	lsls	r1, r1, #3
 800620e:	4008      	ands	r0, r1
 8006210:	4288      	cmp	r0, r1
 8006212:	d108      	bne.n	8006226 <_scanf_float+0x18e>
 8006214:	4961      	ldr	r1, [pc, #388]	; (800639c <_scanf_float+0x304>)
 8006216:	400a      	ands	r2, r1
 8006218:	6032      	str	r2, [r6, #0]
 800621a:	2201      	movs	r2, #1
 800621c:	9202      	str	r2, [sp, #8]
 800621e:	e7e3      	b.n	80061e8 <_scanf_float+0x150>
 8006220:	9a02      	ldr	r2, [sp, #8]
 8006222:	2a02      	cmp	r2, #2
 8006224:	d059      	beq.n	80062da <_scanf_float+0x242>
 8006226:	2c01      	cmp	r4, #1
 8006228:	d002      	beq.n	8006230 <_scanf_float+0x198>
 800622a:	2c04      	cmp	r4, #4
 800622c:	d000      	beq.n	8006230 <_scanf_float+0x198>
 800622e:	e764      	b.n	80060fa <_scanf_float+0x62>
 8006230:	3401      	adds	r4, #1
 8006232:	b2e4      	uxtb	r4, r4
 8006234:	e7d8      	b.n	80061e8 <_scanf_float+0x150>
 8006236:	9a02      	ldr	r2, [sp, #8]
 8006238:	2a01      	cmp	r2, #1
 800623a:	d000      	beq.n	800623e <_scanf_float+0x1a6>
 800623c:	e75d      	b.n	80060fa <_scanf_float+0x62>
 800623e:	2202      	movs	r2, #2
 8006240:	e7ec      	b.n	800621c <_scanf_float+0x184>
 8006242:	2c00      	cmp	r4, #0
 8006244:	d110      	bne.n	8006268 <_scanf_float+0x1d0>
 8006246:	9a00      	ldr	r2, [sp, #0]
 8006248:	2a00      	cmp	r2, #0
 800624a:	d000      	beq.n	800624e <_scanf_float+0x1b6>
 800624c:	e758      	b.n	8006100 <_scanf_float+0x68>
 800624e:	6832      	ldr	r2, [r6, #0]
 8006250:	21e0      	movs	r1, #224	; 0xe0
 8006252:	0010      	movs	r0, r2
 8006254:	00c9      	lsls	r1, r1, #3
 8006256:	4008      	ands	r0, r1
 8006258:	4288      	cmp	r0, r1
 800625a:	d000      	beq.n	800625e <_scanf_float+0x1c6>
 800625c:	e754      	b.n	8006108 <_scanf_float+0x70>
 800625e:	494f      	ldr	r1, [pc, #316]	; (800639c <_scanf_float+0x304>)
 8006260:	3401      	adds	r4, #1
 8006262:	400a      	ands	r2, r1
 8006264:	6032      	str	r2, [r6, #0]
 8006266:	e7bf      	b.n	80061e8 <_scanf_float+0x150>
 8006268:	21fd      	movs	r1, #253	; 0xfd
 800626a:	1ee2      	subs	r2, r4, #3
 800626c:	420a      	tst	r2, r1
 800626e:	d000      	beq.n	8006272 <_scanf_float+0x1da>
 8006270:	e743      	b.n	80060fa <_scanf_float+0x62>
 8006272:	e7dd      	b.n	8006230 <_scanf_float+0x198>
 8006274:	2c02      	cmp	r4, #2
 8006276:	d000      	beq.n	800627a <_scanf_float+0x1e2>
 8006278:	e73f      	b.n	80060fa <_scanf_float+0x62>
 800627a:	2403      	movs	r4, #3
 800627c:	e7b4      	b.n	80061e8 <_scanf_float+0x150>
 800627e:	2c06      	cmp	r4, #6
 8006280:	d000      	beq.n	8006284 <_scanf_float+0x1ec>
 8006282:	e73a      	b.n	80060fa <_scanf_float+0x62>
 8006284:	2407      	movs	r4, #7
 8006286:	e7af      	b.n	80061e8 <_scanf_float+0x150>
 8006288:	6832      	ldr	r2, [r6, #0]
 800628a:	0591      	lsls	r1, r2, #22
 800628c:	d400      	bmi.n	8006290 <_scanf_float+0x1f8>
 800628e:	e734      	b.n	80060fa <_scanf_float+0x62>
 8006290:	4943      	ldr	r1, [pc, #268]	; (80063a0 <_scanf_float+0x308>)
 8006292:	400a      	ands	r2, r1
 8006294:	6032      	str	r2, [r6, #0]
 8006296:	9a00      	ldr	r2, [sp, #0]
 8006298:	9204      	str	r2, [sp, #16]
 800629a:	e7a5      	b.n	80061e8 <_scanf_float+0x150>
 800629c:	21a0      	movs	r1, #160	; 0xa0
 800629e:	2080      	movs	r0, #128	; 0x80
 80062a0:	6832      	ldr	r2, [r6, #0]
 80062a2:	00c9      	lsls	r1, r1, #3
 80062a4:	4011      	ands	r1, r2
 80062a6:	00c0      	lsls	r0, r0, #3
 80062a8:	4281      	cmp	r1, r0
 80062aa:	d006      	beq.n	80062ba <_scanf_float+0x222>
 80062ac:	4202      	tst	r2, r0
 80062ae:	d100      	bne.n	80062b2 <_scanf_float+0x21a>
 80062b0:	e723      	b.n	80060fa <_scanf_float+0x62>
 80062b2:	9900      	ldr	r1, [sp, #0]
 80062b4:	2900      	cmp	r1, #0
 80062b6:	d100      	bne.n	80062ba <_scanf_float+0x222>
 80062b8:	e726      	b.n	8006108 <_scanf_float+0x70>
 80062ba:	0591      	lsls	r1, r2, #22
 80062bc:	d404      	bmi.n	80062c8 <_scanf_float+0x230>
 80062be:	9900      	ldr	r1, [sp, #0]
 80062c0:	9804      	ldr	r0, [sp, #16]
 80062c2:	9708      	str	r7, [sp, #32]
 80062c4:	1a09      	subs	r1, r1, r0
 80062c6:	9107      	str	r1, [sp, #28]
 80062c8:	4934      	ldr	r1, [pc, #208]	; (800639c <_scanf_float+0x304>)
 80062ca:	400a      	ands	r2, r1
 80062cc:	21c0      	movs	r1, #192	; 0xc0
 80062ce:	0049      	lsls	r1, r1, #1
 80062d0:	430a      	orrs	r2, r1
 80062d2:	6032      	str	r2, [r6, #0]
 80062d4:	2200      	movs	r2, #0
 80062d6:	9200      	str	r2, [sp, #0]
 80062d8:	e786      	b.n	80061e8 <_scanf_float+0x150>
 80062da:	2203      	movs	r2, #3
 80062dc:	e79e      	b.n	800621c <_scanf_float+0x184>
 80062de:	23c0      	movs	r3, #192	; 0xc0
 80062e0:	005b      	lsls	r3, r3, #1
 80062e2:	0029      	movs	r1, r5
 80062e4:	58f3      	ldr	r3, [r6, r3]
 80062e6:	9801      	ldr	r0, [sp, #4]
 80062e8:	4798      	blx	r3
 80062ea:	2800      	cmp	r0, #0
 80062ec:	d100      	bne.n	80062f0 <_scanf_float+0x258>
 80062ee:	e6f6      	b.n	80060de <_scanf_float+0x46>
 80062f0:	e703      	b.n	80060fa <_scanf_float+0x62>
 80062f2:	3f01      	subs	r7, #1
 80062f4:	5933      	ldr	r3, [r6, r4]
 80062f6:	002a      	movs	r2, r5
 80062f8:	7839      	ldrb	r1, [r7, #0]
 80062fa:	9801      	ldr	r0, [sp, #4]
 80062fc:	4798      	blx	r3
 80062fe:	6933      	ldr	r3, [r6, #16]
 8006300:	3b01      	subs	r3, #1
 8006302:	6133      	str	r3, [r6, #16]
 8006304:	e707      	b.n	8006116 <_scanf_float+0x7e>
 8006306:	1e63      	subs	r3, r4, #1
 8006308:	2b06      	cmp	r3, #6
 800630a:	d80e      	bhi.n	800632a <_scanf_float+0x292>
 800630c:	9702      	str	r7, [sp, #8]
 800630e:	2c02      	cmp	r4, #2
 8006310:	d920      	bls.n	8006354 <_scanf_float+0x2bc>
 8006312:	1be3      	subs	r3, r4, r7
 8006314:	b2db      	uxtb	r3, r3
 8006316:	9305      	str	r3, [sp, #20]
 8006318:	9b02      	ldr	r3, [sp, #8]
 800631a:	9a05      	ldr	r2, [sp, #20]
 800631c:	189b      	adds	r3, r3, r2
 800631e:	b2db      	uxtb	r3, r3
 8006320:	2b03      	cmp	r3, #3
 8006322:	d827      	bhi.n	8006374 <_scanf_float+0x2dc>
 8006324:	3c03      	subs	r4, #3
 8006326:	b2e4      	uxtb	r4, r4
 8006328:	1b3f      	subs	r7, r7, r4
 800632a:	6833      	ldr	r3, [r6, #0]
 800632c:	05da      	lsls	r2, r3, #23
 800632e:	d554      	bpl.n	80063da <_scanf_float+0x342>
 8006330:	055b      	lsls	r3, r3, #21
 8006332:	d537      	bpl.n	80063a4 <_scanf_float+0x30c>
 8006334:	24be      	movs	r4, #190	; 0xbe
 8006336:	0064      	lsls	r4, r4, #1
 8006338:	9b03      	ldr	r3, [sp, #12]
 800633a:	429f      	cmp	r7, r3
 800633c:	d800      	bhi.n	8006340 <_scanf_float+0x2a8>
 800633e:	e6ee      	b.n	800611e <_scanf_float+0x86>
 8006340:	3f01      	subs	r7, #1
 8006342:	5933      	ldr	r3, [r6, r4]
 8006344:	002a      	movs	r2, r5
 8006346:	7839      	ldrb	r1, [r7, #0]
 8006348:	9801      	ldr	r0, [sp, #4]
 800634a:	4798      	blx	r3
 800634c:	6933      	ldr	r3, [r6, #16]
 800634e:	3b01      	subs	r3, #1
 8006350:	6133      	str	r3, [r6, #16]
 8006352:	e7f1      	b.n	8006338 <_scanf_float+0x2a0>
 8006354:	24be      	movs	r4, #190	; 0xbe
 8006356:	0064      	lsls	r4, r4, #1
 8006358:	9b03      	ldr	r3, [sp, #12]
 800635a:	429f      	cmp	r7, r3
 800635c:	d800      	bhi.n	8006360 <_scanf_float+0x2c8>
 800635e:	e6de      	b.n	800611e <_scanf_float+0x86>
 8006360:	3f01      	subs	r7, #1
 8006362:	5933      	ldr	r3, [r6, r4]
 8006364:	002a      	movs	r2, r5
 8006366:	7839      	ldrb	r1, [r7, #0]
 8006368:	9801      	ldr	r0, [sp, #4]
 800636a:	4798      	blx	r3
 800636c:	6933      	ldr	r3, [r6, #16]
 800636e:	3b01      	subs	r3, #1
 8006370:	6133      	str	r3, [r6, #16]
 8006372:	e7f1      	b.n	8006358 <_scanf_float+0x2c0>
 8006374:	9b02      	ldr	r3, [sp, #8]
 8006376:	002a      	movs	r2, r5
 8006378:	3b01      	subs	r3, #1
 800637a:	7819      	ldrb	r1, [r3, #0]
 800637c:	9302      	str	r3, [sp, #8]
 800637e:	23be      	movs	r3, #190	; 0xbe
 8006380:	005b      	lsls	r3, r3, #1
 8006382:	58f3      	ldr	r3, [r6, r3]
 8006384:	9801      	ldr	r0, [sp, #4]
 8006386:	9309      	str	r3, [sp, #36]	; 0x24
 8006388:	4798      	blx	r3
 800638a:	6933      	ldr	r3, [r6, #16]
 800638c:	3b01      	subs	r3, #1
 800638e:	6133      	str	r3, [r6, #16]
 8006390:	e7c2      	b.n	8006318 <_scanf_float+0x280>
 8006392:	46c0      	nop			; (mov r8, r8)
 8006394:	fffffeff 	.word	0xfffffeff
 8006398:	fffffe7f 	.word	0xfffffe7f
 800639c:	fffff87f 	.word	0xfffff87f
 80063a0:	fffffd7f 	.word	0xfffffd7f
 80063a4:	6933      	ldr	r3, [r6, #16]
 80063a6:	1e7c      	subs	r4, r7, #1
 80063a8:	7821      	ldrb	r1, [r4, #0]
 80063aa:	3b01      	subs	r3, #1
 80063ac:	6133      	str	r3, [r6, #16]
 80063ae:	2965      	cmp	r1, #101	; 0x65
 80063b0:	d00c      	beq.n	80063cc <_scanf_float+0x334>
 80063b2:	2945      	cmp	r1, #69	; 0x45
 80063b4:	d00a      	beq.n	80063cc <_scanf_float+0x334>
 80063b6:	23be      	movs	r3, #190	; 0xbe
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	58f3      	ldr	r3, [r6, r3]
 80063bc:	002a      	movs	r2, r5
 80063be:	9801      	ldr	r0, [sp, #4]
 80063c0:	4798      	blx	r3
 80063c2:	6933      	ldr	r3, [r6, #16]
 80063c4:	1ebc      	subs	r4, r7, #2
 80063c6:	3b01      	subs	r3, #1
 80063c8:	7821      	ldrb	r1, [r4, #0]
 80063ca:	6133      	str	r3, [r6, #16]
 80063cc:	23be      	movs	r3, #190	; 0xbe
 80063ce:	005b      	lsls	r3, r3, #1
 80063d0:	002a      	movs	r2, r5
 80063d2:	58f3      	ldr	r3, [r6, r3]
 80063d4:	9801      	ldr	r0, [sp, #4]
 80063d6:	4798      	blx	r3
 80063d8:	0027      	movs	r7, r4
 80063da:	6832      	ldr	r2, [r6, #0]
 80063dc:	2310      	movs	r3, #16
 80063de:	0011      	movs	r1, r2
 80063e0:	4019      	ands	r1, r3
 80063e2:	9102      	str	r1, [sp, #8]
 80063e4:	421a      	tst	r2, r3
 80063e6:	d158      	bne.n	800649a <_scanf_float+0x402>
 80063e8:	23c0      	movs	r3, #192	; 0xc0
 80063ea:	7039      	strb	r1, [r7, #0]
 80063ec:	6832      	ldr	r2, [r6, #0]
 80063ee:	00db      	lsls	r3, r3, #3
 80063f0:	4013      	ands	r3, r2
 80063f2:	2280      	movs	r2, #128	; 0x80
 80063f4:	00d2      	lsls	r2, r2, #3
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d11d      	bne.n	8006436 <_scanf_float+0x39e>
 80063fa:	9b04      	ldr	r3, [sp, #16]
 80063fc:	9a00      	ldr	r2, [sp, #0]
 80063fe:	9900      	ldr	r1, [sp, #0]
 8006400:	1a9a      	subs	r2, r3, r2
 8006402:	428b      	cmp	r3, r1
 8006404:	d124      	bne.n	8006450 <_scanf_float+0x3b8>
 8006406:	2200      	movs	r2, #0
 8006408:	9903      	ldr	r1, [sp, #12]
 800640a:	9801      	ldr	r0, [sp, #4]
 800640c:	f000 fe9c 	bl	8007148 <_strtod_r>
 8006410:	9b06      	ldr	r3, [sp, #24]
 8006412:	000d      	movs	r5, r1
 8006414:	6831      	ldr	r1, [r6, #0]
 8006416:	0004      	movs	r4, r0
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	078a      	lsls	r2, r1, #30
 800641c:	d525      	bpl.n	800646a <_scanf_float+0x3d2>
 800641e:	1d1a      	adds	r2, r3, #4
 8006420:	9906      	ldr	r1, [sp, #24]
 8006422:	600a      	str	r2, [r1, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	601c      	str	r4, [r3, #0]
 8006428:	605d      	str	r5, [r3, #4]
 800642a:	68f3      	ldr	r3, [r6, #12]
 800642c:	3301      	adds	r3, #1
 800642e:	60f3      	str	r3, [r6, #12]
 8006430:	9802      	ldr	r0, [sp, #8]
 8006432:	b00b      	add	sp, #44	; 0x2c
 8006434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006436:	9b07      	ldr	r3, [sp, #28]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d0e4      	beq.n	8006406 <_scanf_float+0x36e>
 800643c:	9b08      	ldr	r3, [sp, #32]
 800643e:	9a02      	ldr	r2, [sp, #8]
 8006440:	1c59      	adds	r1, r3, #1
 8006442:	9801      	ldr	r0, [sp, #4]
 8006444:	230a      	movs	r3, #10
 8006446:	f000 ff15 	bl	8007274 <_strtol_r>
 800644a:	9b07      	ldr	r3, [sp, #28]
 800644c:	9f08      	ldr	r7, [sp, #32]
 800644e:	1ac2      	subs	r2, r0, r3
 8006450:	0033      	movs	r3, r6
 8006452:	3370      	adds	r3, #112	; 0x70
 8006454:	33ff      	adds	r3, #255	; 0xff
 8006456:	429f      	cmp	r7, r3
 8006458:	d302      	bcc.n	8006460 <_scanf_float+0x3c8>
 800645a:	0037      	movs	r7, r6
 800645c:	376f      	adds	r7, #111	; 0x6f
 800645e:	37ff      	adds	r7, #255	; 0xff
 8006460:	0038      	movs	r0, r7
 8006462:	490f      	ldr	r1, [pc, #60]	; (80064a0 <_scanf_float+0x408>)
 8006464:	f000 f824 	bl	80064b0 <siprintf>
 8006468:	e7cd      	b.n	8006406 <_scanf_float+0x36e>
 800646a:	1d1a      	adds	r2, r3, #4
 800646c:	0749      	lsls	r1, r1, #29
 800646e:	d4d7      	bmi.n	8006420 <_scanf_float+0x388>
 8006470:	9906      	ldr	r1, [sp, #24]
 8006472:	0020      	movs	r0, r4
 8006474:	600a      	str	r2, [r1, #0]
 8006476:	681f      	ldr	r7, [r3, #0]
 8006478:	0022      	movs	r2, r4
 800647a:	002b      	movs	r3, r5
 800647c:	0029      	movs	r1, r5
 800647e:	f7fb fdbf 	bl	8002000 <__aeabi_dcmpun>
 8006482:	2800      	cmp	r0, #0
 8006484:	d004      	beq.n	8006490 <_scanf_float+0x3f8>
 8006486:	4807      	ldr	r0, [pc, #28]	; (80064a4 <_scanf_float+0x40c>)
 8006488:	f000 f80e 	bl	80064a8 <nanf>
 800648c:	6038      	str	r0, [r7, #0]
 800648e:	e7cc      	b.n	800642a <_scanf_float+0x392>
 8006490:	0020      	movs	r0, r4
 8006492:	0029      	movs	r1, r5
 8006494:	f7fb fe5e 	bl	8002154 <__aeabi_d2f>
 8006498:	e7f8      	b.n	800648c <_scanf_float+0x3f4>
 800649a:	2300      	movs	r3, #0
 800649c:	e640      	b.n	8006120 <_scanf_float+0x88>
 800649e:	46c0      	nop			; (mov r8, r8)
 80064a0:	0800a318 	.word	0x0800a318
 80064a4:	0800a720 	.word	0x0800a720

080064a8 <nanf>:
 80064a8:	4800      	ldr	r0, [pc, #0]	; (80064ac <nanf+0x4>)
 80064aa:	4770      	bx	lr
 80064ac:	7fc00000 	.word	0x7fc00000

080064b0 <siprintf>:
 80064b0:	b40e      	push	{r1, r2, r3}
 80064b2:	b500      	push	{lr}
 80064b4:	490b      	ldr	r1, [pc, #44]	; (80064e4 <siprintf+0x34>)
 80064b6:	b09c      	sub	sp, #112	; 0x70
 80064b8:	ab1d      	add	r3, sp, #116	; 0x74
 80064ba:	9002      	str	r0, [sp, #8]
 80064bc:	9006      	str	r0, [sp, #24]
 80064be:	9107      	str	r1, [sp, #28]
 80064c0:	9104      	str	r1, [sp, #16]
 80064c2:	4809      	ldr	r0, [pc, #36]	; (80064e8 <siprintf+0x38>)
 80064c4:	4909      	ldr	r1, [pc, #36]	; (80064ec <siprintf+0x3c>)
 80064c6:	cb04      	ldmia	r3!, {r2}
 80064c8:	9105      	str	r1, [sp, #20]
 80064ca:	6800      	ldr	r0, [r0, #0]
 80064cc:	a902      	add	r1, sp, #8
 80064ce:	9301      	str	r3, [sp, #4]
 80064d0:	f002 ff5c 	bl	800938c <_svfiprintf_r>
 80064d4:	2300      	movs	r3, #0
 80064d6:	9a02      	ldr	r2, [sp, #8]
 80064d8:	7013      	strb	r3, [r2, #0]
 80064da:	b01c      	add	sp, #112	; 0x70
 80064dc:	bc08      	pop	{r3}
 80064de:	b003      	add	sp, #12
 80064e0:	4718      	bx	r3
 80064e2:	46c0      	nop			; (mov r8, r8)
 80064e4:	7fffffff 	.word	0x7fffffff
 80064e8:	2000000c 	.word	0x2000000c
 80064ec:	ffff0208 	.word	0xffff0208

080064f0 <sulp>:
 80064f0:	b570      	push	{r4, r5, r6, lr}
 80064f2:	0016      	movs	r6, r2
 80064f4:	000d      	movs	r5, r1
 80064f6:	f002 fc93 	bl	8008e20 <__ulp>
 80064fa:	2e00      	cmp	r6, #0
 80064fc:	d00d      	beq.n	800651a <sulp+0x2a>
 80064fe:	236b      	movs	r3, #107	; 0x6b
 8006500:	006a      	lsls	r2, r5, #1
 8006502:	0d52      	lsrs	r2, r2, #21
 8006504:	1a9b      	subs	r3, r3, r2
 8006506:	2b00      	cmp	r3, #0
 8006508:	dd07      	ble.n	800651a <sulp+0x2a>
 800650a:	2400      	movs	r4, #0
 800650c:	4a03      	ldr	r2, [pc, #12]	; (800651c <sulp+0x2c>)
 800650e:	051b      	lsls	r3, r3, #20
 8006510:	189d      	adds	r5, r3, r2
 8006512:	002b      	movs	r3, r5
 8006514:	0022      	movs	r2, r4
 8006516:	f7fa ff75 	bl	8001404 <__aeabi_dmul>
 800651a:	bd70      	pop	{r4, r5, r6, pc}
 800651c:	3ff00000 	.word	0x3ff00000

08006520 <_strtod_l>:
 8006520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006522:	001d      	movs	r5, r3
 8006524:	2300      	movs	r3, #0
 8006526:	b0a5      	sub	sp, #148	; 0x94
 8006528:	9320      	str	r3, [sp, #128]	; 0x80
 800652a:	4bac      	ldr	r3, [pc, #688]	; (80067dc <_strtod_l+0x2bc>)
 800652c:	9005      	str	r0, [sp, #20]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	9108      	str	r1, [sp, #32]
 8006532:	0018      	movs	r0, r3
 8006534:	9307      	str	r3, [sp, #28]
 8006536:	921b      	str	r2, [sp, #108]	; 0x6c
 8006538:	f7f9 fde6 	bl	8000108 <strlen>
 800653c:	2600      	movs	r6, #0
 800653e:	0004      	movs	r4, r0
 8006540:	2700      	movs	r7, #0
 8006542:	9b08      	ldr	r3, [sp, #32]
 8006544:	931f      	str	r3, [sp, #124]	; 0x7c
 8006546:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006548:	7813      	ldrb	r3, [r2, #0]
 800654a:	2b2b      	cmp	r3, #43	; 0x2b
 800654c:	d058      	beq.n	8006600 <_strtod_l+0xe0>
 800654e:	d844      	bhi.n	80065da <_strtod_l+0xba>
 8006550:	2b0d      	cmp	r3, #13
 8006552:	d83d      	bhi.n	80065d0 <_strtod_l+0xb0>
 8006554:	2b08      	cmp	r3, #8
 8006556:	d83d      	bhi.n	80065d4 <_strtod_l+0xb4>
 8006558:	2b00      	cmp	r3, #0
 800655a:	d047      	beq.n	80065ec <_strtod_l+0xcc>
 800655c:	2300      	movs	r3, #0
 800655e:	930e      	str	r3, [sp, #56]	; 0x38
 8006560:	2200      	movs	r2, #0
 8006562:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006564:	920a      	str	r2, [sp, #40]	; 0x28
 8006566:	9306      	str	r3, [sp, #24]
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	2b30      	cmp	r3, #48	; 0x30
 800656c:	d000      	beq.n	8006570 <_strtod_l+0x50>
 800656e:	e07f      	b.n	8006670 <_strtod_l+0x150>
 8006570:	9b06      	ldr	r3, [sp, #24]
 8006572:	3220      	adds	r2, #32
 8006574:	785b      	ldrb	r3, [r3, #1]
 8006576:	4393      	bics	r3, r2
 8006578:	2b58      	cmp	r3, #88	; 0x58
 800657a:	d000      	beq.n	800657e <_strtod_l+0x5e>
 800657c:	e06e      	b.n	800665c <_strtod_l+0x13c>
 800657e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006580:	9502      	str	r5, [sp, #8]
 8006582:	9301      	str	r3, [sp, #4]
 8006584:	ab20      	add	r3, sp, #128	; 0x80
 8006586:	9300      	str	r3, [sp, #0]
 8006588:	4a95      	ldr	r2, [pc, #596]	; (80067e0 <_strtod_l+0x2c0>)
 800658a:	ab21      	add	r3, sp, #132	; 0x84
 800658c:	9805      	ldr	r0, [sp, #20]
 800658e:	a91f      	add	r1, sp, #124	; 0x7c
 8006590:	f001 fd84 	bl	800809c <__gethex>
 8006594:	2307      	movs	r3, #7
 8006596:	0005      	movs	r5, r0
 8006598:	0004      	movs	r4, r0
 800659a:	401d      	ands	r5, r3
 800659c:	4218      	tst	r0, r3
 800659e:	d006      	beq.n	80065ae <_strtod_l+0x8e>
 80065a0:	2d06      	cmp	r5, #6
 80065a2:	d12f      	bne.n	8006604 <_strtod_l+0xe4>
 80065a4:	9b06      	ldr	r3, [sp, #24]
 80065a6:	3301      	adds	r3, #1
 80065a8:	931f      	str	r3, [sp, #124]	; 0x7c
 80065aa:	2300      	movs	r3, #0
 80065ac:	930e      	str	r3, [sp, #56]	; 0x38
 80065ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d002      	beq.n	80065ba <_strtod_l+0x9a>
 80065b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80065b6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80065b8:	601a      	str	r2, [r3, #0]
 80065ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d01c      	beq.n	80065fa <_strtod_l+0xda>
 80065c0:	2380      	movs	r3, #128	; 0x80
 80065c2:	0032      	movs	r2, r6
 80065c4:	061b      	lsls	r3, r3, #24
 80065c6:	18fb      	adds	r3, r7, r3
 80065c8:	0010      	movs	r0, r2
 80065ca:	0019      	movs	r1, r3
 80065cc:	b025      	add	sp, #148	; 0x94
 80065ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065d0:	2b20      	cmp	r3, #32
 80065d2:	d1c3      	bne.n	800655c <_strtod_l+0x3c>
 80065d4:	3201      	adds	r2, #1
 80065d6:	921f      	str	r2, [sp, #124]	; 0x7c
 80065d8:	e7b5      	b.n	8006546 <_strtod_l+0x26>
 80065da:	2b2d      	cmp	r3, #45	; 0x2d
 80065dc:	d1be      	bne.n	800655c <_strtod_l+0x3c>
 80065de:	3b2c      	subs	r3, #44	; 0x2c
 80065e0:	930e      	str	r3, [sp, #56]	; 0x38
 80065e2:	1c53      	adds	r3, r2, #1
 80065e4:	931f      	str	r3, [sp, #124]	; 0x7c
 80065e6:	7853      	ldrb	r3, [r2, #1]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1b9      	bne.n	8006560 <_strtod_l+0x40>
 80065ec:	9b08      	ldr	r3, [sp, #32]
 80065ee:	931f      	str	r3, [sp, #124]	; 0x7c
 80065f0:	2300      	movs	r3, #0
 80065f2:	930e      	str	r3, [sp, #56]	; 0x38
 80065f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1dc      	bne.n	80065b4 <_strtod_l+0x94>
 80065fa:	0032      	movs	r2, r6
 80065fc:	003b      	movs	r3, r7
 80065fe:	e7e3      	b.n	80065c8 <_strtod_l+0xa8>
 8006600:	2300      	movs	r3, #0
 8006602:	e7ed      	b.n	80065e0 <_strtod_l+0xc0>
 8006604:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006606:	2a00      	cmp	r2, #0
 8006608:	d007      	beq.n	800661a <_strtod_l+0xfa>
 800660a:	2135      	movs	r1, #53	; 0x35
 800660c:	a822      	add	r0, sp, #136	; 0x88
 800660e:	f002 fd08 	bl	8009022 <__copybits>
 8006612:	9920      	ldr	r1, [sp, #128]	; 0x80
 8006614:	9805      	ldr	r0, [sp, #20]
 8006616:	f002 f8c3 	bl	80087a0 <_Bfree>
 800661a:	1e68      	subs	r0, r5, #1
 800661c:	2804      	cmp	r0, #4
 800661e:	d806      	bhi.n	800662e <_strtod_l+0x10e>
 8006620:	f7f9 fd7a 	bl	8000118 <__gnu_thumb1_case_uqi>
 8006624:	1816030b 	.word	0x1816030b
 8006628:	0b          	.byte	0x0b
 8006629:	00          	.byte	0x00
 800662a:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800662c:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 800662e:	0723      	lsls	r3, r4, #28
 8006630:	d5bd      	bpl.n	80065ae <_strtod_l+0x8e>
 8006632:	2380      	movs	r3, #128	; 0x80
 8006634:	061b      	lsls	r3, r3, #24
 8006636:	431f      	orrs	r7, r3
 8006638:	e7b9      	b.n	80065ae <_strtod_l+0x8e>
 800663a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800663c:	4a69      	ldr	r2, [pc, #420]	; (80067e4 <_strtod_l+0x2c4>)
 800663e:	496a      	ldr	r1, [pc, #424]	; (80067e8 <_strtod_l+0x2c8>)
 8006640:	401a      	ands	r2, r3
 8006642:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006644:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8006646:	185b      	adds	r3, r3, r1
 8006648:	051b      	lsls	r3, r3, #20
 800664a:	431a      	orrs	r2, r3
 800664c:	0017      	movs	r7, r2
 800664e:	e7ee      	b.n	800662e <_strtod_l+0x10e>
 8006650:	4f66      	ldr	r7, [pc, #408]	; (80067ec <_strtod_l+0x2cc>)
 8006652:	e7ec      	b.n	800662e <_strtod_l+0x10e>
 8006654:	2601      	movs	r6, #1
 8006656:	4f66      	ldr	r7, [pc, #408]	; (80067f0 <_strtod_l+0x2d0>)
 8006658:	4276      	negs	r6, r6
 800665a:	e7e8      	b.n	800662e <_strtod_l+0x10e>
 800665c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800665e:	1c5a      	adds	r2, r3, #1
 8006660:	921f      	str	r2, [sp, #124]	; 0x7c
 8006662:	785b      	ldrb	r3, [r3, #1]
 8006664:	2b30      	cmp	r3, #48	; 0x30
 8006666:	d0f9      	beq.n	800665c <_strtod_l+0x13c>
 8006668:	2b00      	cmp	r3, #0
 800666a:	d0a0      	beq.n	80065ae <_strtod_l+0x8e>
 800666c:	2301      	movs	r3, #1
 800666e:	930a      	str	r3, [sp, #40]	; 0x28
 8006670:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006672:	220a      	movs	r2, #10
 8006674:	9310      	str	r3, [sp, #64]	; 0x40
 8006676:	2300      	movs	r3, #0
 8006678:	930f      	str	r3, [sp, #60]	; 0x3c
 800667a:	930b      	str	r3, [sp, #44]	; 0x2c
 800667c:	9309      	str	r3, [sp, #36]	; 0x24
 800667e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8006680:	7805      	ldrb	r5, [r0, #0]
 8006682:	002b      	movs	r3, r5
 8006684:	3b30      	subs	r3, #48	; 0x30
 8006686:	b2d9      	uxtb	r1, r3
 8006688:	2909      	cmp	r1, #9
 800668a:	d927      	bls.n	80066dc <_strtod_l+0x1bc>
 800668c:	0022      	movs	r2, r4
 800668e:	9907      	ldr	r1, [sp, #28]
 8006690:	f002 ff94 	bl	80095bc <strncmp>
 8006694:	2800      	cmp	r0, #0
 8006696:	d033      	beq.n	8006700 <_strtod_l+0x1e0>
 8006698:	2000      	movs	r0, #0
 800669a:	002b      	movs	r3, r5
 800669c:	4684      	mov	ip, r0
 800669e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066a0:	900c      	str	r0, [sp, #48]	; 0x30
 80066a2:	9206      	str	r2, [sp, #24]
 80066a4:	2220      	movs	r2, #32
 80066a6:	0019      	movs	r1, r3
 80066a8:	4391      	bics	r1, r2
 80066aa:	000a      	movs	r2, r1
 80066ac:	2100      	movs	r1, #0
 80066ae:	9107      	str	r1, [sp, #28]
 80066b0:	2a45      	cmp	r2, #69	; 0x45
 80066b2:	d000      	beq.n	80066b6 <_strtod_l+0x196>
 80066b4:	e0c5      	b.n	8006842 <_strtod_l+0x322>
 80066b6:	9b06      	ldr	r3, [sp, #24]
 80066b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066ba:	4303      	orrs	r3, r0
 80066bc:	4313      	orrs	r3, r2
 80066be:	428b      	cmp	r3, r1
 80066c0:	d094      	beq.n	80065ec <_strtod_l+0xcc>
 80066c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80066c4:	9308      	str	r3, [sp, #32]
 80066c6:	3301      	adds	r3, #1
 80066c8:	931f      	str	r3, [sp, #124]	; 0x7c
 80066ca:	9b08      	ldr	r3, [sp, #32]
 80066cc:	785b      	ldrb	r3, [r3, #1]
 80066ce:	2b2b      	cmp	r3, #43	; 0x2b
 80066d0:	d076      	beq.n	80067c0 <_strtod_l+0x2a0>
 80066d2:	000c      	movs	r4, r1
 80066d4:	2b2d      	cmp	r3, #45	; 0x2d
 80066d6:	d179      	bne.n	80067cc <_strtod_l+0x2ac>
 80066d8:	2401      	movs	r4, #1
 80066da:	e072      	b.n	80067c2 <_strtod_l+0x2a2>
 80066dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066de:	2908      	cmp	r1, #8
 80066e0:	dc09      	bgt.n	80066f6 <_strtod_l+0x1d6>
 80066e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80066e4:	4351      	muls	r1, r2
 80066e6:	185b      	adds	r3, r3, r1
 80066e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80066ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066ec:	3001      	adds	r0, #1
 80066ee:	3301      	adds	r3, #1
 80066f0:	9309      	str	r3, [sp, #36]	; 0x24
 80066f2:	901f      	str	r0, [sp, #124]	; 0x7c
 80066f4:	e7c3      	b.n	800667e <_strtod_l+0x15e>
 80066f6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80066f8:	4351      	muls	r1, r2
 80066fa:	185b      	adds	r3, r3, r1
 80066fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80066fe:	e7f4      	b.n	80066ea <_strtod_l+0x1ca>
 8006700:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006702:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006704:	191c      	adds	r4, r3, r4
 8006706:	941f      	str	r4, [sp, #124]	; 0x7c
 8006708:	7823      	ldrb	r3, [r4, #0]
 800670a:	2a00      	cmp	r2, #0
 800670c:	d039      	beq.n	8006782 <_strtod_l+0x262>
 800670e:	900c      	str	r0, [sp, #48]	; 0x30
 8006710:	9206      	str	r2, [sp, #24]
 8006712:	001a      	movs	r2, r3
 8006714:	3a30      	subs	r2, #48	; 0x30
 8006716:	2a09      	cmp	r2, #9
 8006718:	d912      	bls.n	8006740 <_strtod_l+0x220>
 800671a:	2201      	movs	r2, #1
 800671c:	4694      	mov	ip, r2
 800671e:	e7c1      	b.n	80066a4 <_strtod_l+0x184>
 8006720:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006722:	3001      	adds	r0, #1
 8006724:	1c5a      	adds	r2, r3, #1
 8006726:	921f      	str	r2, [sp, #124]	; 0x7c
 8006728:	785b      	ldrb	r3, [r3, #1]
 800672a:	2b30      	cmp	r3, #48	; 0x30
 800672c:	d0f8      	beq.n	8006720 <_strtod_l+0x200>
 800672e:	001a      	movs	r2, r3
 8006730:	3a31      	subs	r2, #49	; 0x31
 8006732:	2a08      	cmp	r2, #8
 8006734:	d83f      	bhi.n	80067b6 <_strtod_l+0x296>
 8006736:	900c      	str	r0, [sp, #48]	; 0x30
 8006738:	2000      	movs	r0, #0
 800673a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800673c:	9006      	str	r0, [sp, #24]
 800673e:	9210      	str	r2, [sp, #64]	; 0x40
 8006740:	001a      	movs	r2, r3
 8006742:	1c41      	adds	r1, r0, #1
 8006744:	3a30      	subs	r2, #48	; 0x30
 8006746:	2b30      	cmp	r3, #48	; 0x30
 8006748:	d015      	beq.n	8006776 <_strtod_l+0x256>
 800674a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800674c:	185b      	adds	r3, r3, r1
 800674e:	210a      	movs	r1, #10
 8006750:	930c      	str	r3, [sp, #48]	; 0x30
 8006752:	9b06      	ldr	r3, [sp, #24]
 8006754:	18c4      	adds	r4, r0, r3
 8006756:	42a3      	cmp	r3, r4
 8006758:	d115      	bne.n	8006786 <_strtod_l+0x266>
 800675a:	9906      	ldr	r1, [sp, #24]
 800675c:	9b06      	ldr	r3, [sp, #24]
 800675e:	3101      	adds	r1, #1
 8006760:	1809      	adds	r1, r1, r0
 8006762:	181b      	adds	r3, r3, r0
 8006764:	9106      	str	r1, [sp, #24]
 8006766:	2b08      	cmp	r3, #8
 8006768:	dc1b      	bgt.n	80067a2 <_strtod_l+0x282>
 800676a:	230a      	movs	r3, #10
 800676c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800676e:	434b      	muls	r3, r1
 8006770:	2100      	movs	r1, #0
 8006772:	18d3      	adds	r3, r2, r3
 8006774:	930b      	str	r3, [sp, #44]	; 0x2c
 8006776:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006778:	0008      	movs	r0, r1
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	921f      	str	r2, [sp, #124]	; 0x7c
 800677e:	785b      	ldrb	r3, [r3, #1]
 8006780:	e7c7      	b.n	8006712 <_strtod_l+0x1f2>
 8006782:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006784:	e7d1      	b.n	800672a <_strtod_l+0x20a>
 8006786:	2b08      	cmp	r3, #8
 8006788:	dc04      	bgt.n	8006794 <_strtod_l+0x274>
 800678a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800678c:	434d      	muls	r5, r1
 800678e:	950b      	str	r5, [sp, #44]	; 0x2c
 8006790:	3301      	adds	r3, #1
 8006792:	e7e0      	b.n	8006756 <_strtod_l+0x236>
 8006794:	1c5d      	adds	r5, r3, #1
 8006796:	2d10      	cmp	r5, #16
 8006798:	dcfa      	bgt.n	8006790 <_strtod_l+0x270>
 800679a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800679c:	434d      	muls	r5, r1
 800679e:	950f      	str	r5, [sp, #60]	; 0x3c
 80067a0:	e7f6      	b.n	8006790 <_strtod_l+0x270>
 80067a2:	9b06      	ldr	r3, [sp, #24]
 80067a4:	2100      	movs	r1, #0
 80067a6:	2b10      	cmp	r3, #16
 80067a8:	dce5      	bgt.n	8006776 <_strtod_l+0x256>
 80067aa:	230a      	movs	r3, #10
 80067ac:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80067ae:	4343      	muls	r3, r0
 80067b0:	18d3      	adds	r3, r2, r3
 80067b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80067b4:	e7df      	b.n	8006776 <_strtod_l+0x256>
 80067b6:	2200      	movs	r2, #0
 80067b8:	920c      	str	r2, [sp, #48]	; 0x30
 80067ba:	9206      	str	r2, [sp, #24]
 80067bc:	3201      	adds	r2, #1
 80067be:	e7ad      	b.n	800671c <_strtod_l+0x1fc>
 80067c0:	2400      	movs	r4, #0
 80067c2:	9b08      	ldr	r3, [sp, #32]
 80067c4:	3302      	adds	r3, #2
 80067c6:	931f      	str	r3, [sp, #124]	; 0x7c
 80067c8:	9b08      	ldr	r3, [sp, #32]
 80067ca:	789b      	ldrb	r3, [r3, #2]
 80067cc:	001a      	movs	r2, r3
 80067ce:	3a30      	subs	r2, #48	; 0x30
 80067d0:	2a09      	cmp	r2, #9
 80067d2:	d913      	bls.n	80067fc <_strtod_l+0x2dc>
 80067d4:	9a08      	ldr	r2, [sp, #32]
 80067d6:	921f      	str	r2, [sp, #124]	; 0x7c
 80067d8:	2200      	movs	r2, #0
 80067da:	e031      	b.n	8006840 <_strtod_l+0x320>
 80067dc:	0800a568 	.word	0x0800a568
 80067e0:	0800a320 	.word	0x0800a320
 80067e4:	ffefffff 	.word	0xffefffff
 80067e8:	00000433 	.word	0x00000433
 80067ec:	7ff00000 	.word	0x7ff00000
 80067f0:	7fffffff 	.word	0x7fffffff
 80067f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80067f6:	1c5a      	adds	r2, r3, #1
 80067f8:	921f      	str	r2, [sp, #124]	; 0x7c
 80067fa:	785b      	ldrb	r3, [r3, #1]
 80067fc:	2b30      	cmp	r3, #48	; 0x30
 80067fe:	d0f9      	beq.n	80067f4 <_strtod_l+0x2d4>
 8006800:	2200      	movs	r2, #0
 8006802:	9207      	str	r2, [sp, #28]
 8006804:	001a      	movs	r2, r3
 8006806:	3a31      	subs	r2, #49	; 0x31
 8006808:	2a08      	cmp	r2, #8
 800680a:	d81a      	bhi.n	8006842 <_strtod_l+0x322>
 800680c:	3b30      	subs	r3, #48	; 0x30
 800680e:	001a      	movs	r2, r3
 8006810:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006812:	9307      	str	r3, [sp, #28]
 8006814:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006816:	1c59      	adds	r1, r3, #1
 8006818:	911f      	str	r1, [sp, #124]	; 0x7c
 800681a:	785b      	ldrb	r3, [r3, #1]
 800681c:	001d      	movs	r5, r3
 800681e:	3d30      	subs	r5, #48	; 0x30
 8006820:	2d09      	cmp	r5, #9
 8006822:	d939      	bls.n	8006898 <_strtod_l+0x378>
 8006824:	9d07      	ldr	r5, [sp, #28]
 8006826:	1b49      	subs	r1, r1, r5
 8006828:	4db0      	ldr	r5, [pc, #704]	; (8006aec <_strtod_l+0x5cc>)
 800682a:	9507      	str	r5, [sp, #28]
 800682c:	2908      	cmp	r1, #8
 800682e:	dc03      	bgt.n	8006838 <_strtod_l+0x318>
 8006830:	9207      	str	r2, [sp, #28]
 8006832:	42aa      	cmp	r2, r5
 8006834:	dd00      	ble.n	8006838 <_strtod_l+0x318>
 8006836:	9507      	str	r5, [sp, #28]
 8006838:	2c00      	cmp	r4, #0
 800683a:	d002      	beq.n	8006842 <_strtod_l+0x322>
 800683c:	9a07      	ldr	r2, [sp, #28]
 800683e:	4252      	negs	r2, r2
 8006840:	9207      	str	r2, [sp, #28]
 8006842:	9a06      	ldr	r2, [sp, #24]
 8006844:	2a00      	cmp	r2, #0
 8006846:	d14b      	bne.n	80068e0 <_strtod_l+0x3c0>
 8006848:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800684a:	4310      	orrs	r0, r2
 800684c:	d000      	beq.n	8006850 <_strtod_l+0x330>
 800684e:	e6ae      	b.n	80065ae <_strtod_l+0x8e>
 8006850:	4662      	mov	r2, ip
 8006852:	2a00      	cmp	r2, #0
 8006854:	d000      	beq.n	8006858 <_strtod_l+0x338>
 8006856:	e6c9      	b.n	80065ec <_strtod_l+0xcc>
 8006858:	2b69      	cmp	r3, #105	; 0x69
 800685a:	d025      	beq.n	80068a8 <_strtod_l+0x388>
 800685c:	dc21      	bgt.n	80068a2 <_strtod_l+0x382>
 800685e:	2b49      	cmp	r3, #73	; 0x49
 8006860:	d022      	beq.n	80068a8 <_strtod_l+0x388>
 8006862:	2b4e      	cmp	r3, #78	; 0x4e
 8006864:	d000      	beq.n	8006868 <_strtod_l+0x348>
 8006866:	e6c1      	b.n	80065ec <_strtod_l+0xcc>
 8006868:	49a1      	ldr	r1, [pc, #644]	; (8006af0 <_strtod_l+0x5d0>)
 800686a:	a81f      	add	r0, sp, #124	; 0x7c
 800686c:	f001 fe64 	bl	8008538 <__match>
 8006870:	2800      	cmp	r0, #0
 8006872:	d100      	bne.n	8006876 <_strtod_l+0x356>
 8006874:	e6ba      	b.n	80065ec <_strtod_l+0xcc>
 8006876:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	2b28      	cmp	r3, #40	; 0x28
 800687c:	d12a      	bne.n	80068d4 <_strtod_l+0x3b4>
 800687e:	499d      	ldr	r1, [pc, #628]	; (8006af4 <_strtod_l+0x5d4>)
 8006880:	aa22      	add	r2, sp, #136	; 0x88
 8006882:	a81f      	add	r0, sp, #124	; 0x7c
 8006884:	f001 fe6c 	bl	8008560 <__hexnan>
 8006888:	2805      	cmp	r0, #5
 800688a:	d123      	bne.n	80068d4 <_strtod_l+0x3b4>
 800688c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800688e:	4a9a      	ldr	r2, [pc, #616]	; (8006af8 <_strtod_l+0x5d8>)
 8006890:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8006892:	431a      	orrs	r2, r3
 8006894:	0017      	movs	r7, r2
 8006896:	e68a      	b.n	80065ae <_strtod_l+0x8e>
 8006898:	210a      	movs	r1, #10
 800689a:	434a      	muls	r2, r1
 800689c:	18d2      	adds	r2, r2, r3
 800689e:	3a30      	subs	r2, #48	; 0x30
 80068a0:	e7b8      	b.n	8006814 <_strtod_l+0x2f4>
 80068a2:	2b6e      	cmp	r3, #110	; 0x6e
 80068a4:	d0e0      	beq.n	8006868 <_strtod_l+0x348>
 80068a6:	e6a1      	b.n	80065ec <_strtod_l+0xcc>
 80068a8:	4994      	ldr	r1, [pc, #592]	; (8006afc <_strtod_l+0x5dc>)
 80068aa:	a81f      	add	r0, sp, #124	; 0x7c
 80068ac:	f001 fe44 	bl	8008538 <__match>
 80068b0:	2800      	cmp	r0, #0
 80068b2:	d100      	bne.n	80068b6 <_strtod_l+0x396>
 80068b4:	e69a      	b.n	80065ec <_strtod_l+0xcc>
 80068b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80068b8:	4991      	ldr	r1, [pc, #580]	; (8006b00 <_strtod_l+0x5e0>)
 80068ba:	3b01      	subs	r3, #1
 80068bc:	a81f      	add	r0, sp, #124	; 0x7c
 80068be:	931f      	str	r3, [sp, #124]	; 0x7c
 80068c0:	f001 fe3a 	bl	8008538 <__match>
 80068c4:	2800      	cmp	r0, #0
 80068c6:	d102      	bne.n	80068ce <_strtod_l+0x3ae>
 80068c8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80068ca:	3301      	adds	r3, #1
 80068cc:	931f      	str	r3, [sp, #124]	; 0x7c
 80068ce:	2600      	movs	r6, #0
 80068d0:	4f89      	ldr	r7, [pc, #548]	; (8006af8 <_strtod_l+0x5d8>)
 80068d2:	e66c      	b.n	80065ae <_strtod_l+0x8e>
 80068d4:	488b      	ldr	r0, [pc, #556]	; (8006b04 <_strtod_l+0x5e4>)
 80068d6:	f002 fe59 	bl	800958c <nan>
 80068da:	0006      	movs	r6, r0
 80068dc:	000f      	movs	r7, r1
 80068de:	e666      	b.n	80065ae <_strtod_l+0x8e>
 80068e0:	9b07      	ldr	r3, [sp, #28]
 80068e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80068e4:	1a9b      	subs	r3, r3, r2
 80068e6:	930a      	str	r3, [sp, #40]	; 0x28
 80068e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d101      	bne.n	80068f2 <_strtod_l+0x3d2>
 80068ee:	9b06      	ldr	r3, [sp, #24]
 80068f0:	9309      	str	r3, [sp, #36]	; 0x24
 80068f2:	9c06      	ldr	r4, [sp, #24]
 80068f4:	2c10      	cmp	r4, #16
 80068f6:	dd00      	ble.n	80068fa <_strtod_l+0x3da>
 80068f8:	2410      	movs	r4, #16
 80068fa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80068fc:	f7fb fc04 	bl	8002108 <__aeabi_ui2d>
 8006900:	9b06      	ldr	r3, [sp, #24]
 8006902:	0006      	movs	r6, r0
 8006904:	000f      	movs	r7, r1
 8006906:	2b09      	cmp	r3, #9
 8006908:	dd15      	ble.n	8006936 <_strtod_l+0x416>
 800690a:	0022      	movs	r2, r4
 800690c:	4b7e      	ldr	r3, [pc, #504]	; (8006b08 <_strtod_l+0x5e8>)
 800690e:	3a09      	subs	r2, #9
 8006910:	00d2      	lsls	r2, r2, #3
 8006912:	189b      	adds	r3, r3, r2
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	f7fa fd74 	bl	8001404 <__aeabi_dmul>
 800691c:	0006      	movs	r6, r0
 800691e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006920:	000f      	movs	r7, r1
 8006922:	f7fb fbf1 	bl	8002108 <__aeabi_ui2d>
 8006926:	0002      	movs	r2, r0
 8006928:	000b      	movs	r3, r1
 800692a:	0030      	movs	r0, r6
 800692c:	0039      	movs	r1, r7
 800692e:	f7f9 fe2b 	bl	8000588 <__aeabi_dadd>
 8006932:	0006      	movs	r6, r0
 8006934:	000f      	movs	r7, r1
 8006936:	9b06      	ldr	r3, [sp, #24]
 8006938:	2b0f      	cmp	r3, #15
 800693a:	dc39      	bgt.n	80069b0 <_strtod_l+0x490>
 800693c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800693e:	2b00      	cmp	r3, #0
 8006940:	d100      	bne.n	8006944 <_strtod_l+0x424>
 8006942:	e634      	b.n	80065ae <_strtod_l+0x8e>
 8006944:	dd24      	ble.n	8006990 <_strtod_l+0x470>
 8006946:	2b16      	cmp	r3, #22
 8006948:	dc09      	bgt.n	800695e <_strtod_l+0x43e>
 800694a:	496f      	ldr	r1, [pc, #444]	; (8006b08 <_strtod_l+0x5e8>)
 800694c:	00db      	lsls	r3, r3, #3
 800694e:	18c9      	adds	r1, r1, r3
 8006950:	0032      	movs	r2, r6
 8006952:	6808      	ldr	r0, [r1, #0]
 8006954:	6849      	ldr	r1, [r1, #4]
 8006956:	003b      	movs	r3, r7
 8006958:	f7fa fd54 	bl	8001404 <__aeabi_dmul>
 800695c:	e7bd      	b.n	80068da <_strtod_l+0x3ba>
 800695e:	2325      	movs	r3, #37	; 0x25
 8006960:	9a06      	ldr	r2, [sp, #24]
 8006962:	1a9b      	subs	r3, r3, r2
 8006964:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006966:	4293      	cmp	r3, r2
 8006968:	db22      	blt.n	80069b0 <_strtod_l+0x490>
 800696a:	240f      	movs	r4, #15
 800696c:	9b06      	ldr	r3, [sp, #24]
 800696e:	4d66      	ldr	r5, [pc, #408]	; (8006b08 <_strtod_l+0x5e8>)
 8006970:	1ae4      	subs	r4, r4, r3
 8006972:	00e1      	lsls	r1, r4, #3
 8006974:	1869      	adds	r1, r5, r1
 8006976:	0032      	movs	r2, r6
 8006978:	6808      	ldr	r0, [r1, #0]
 800697a:	6849      	ldr	r1, [r1, #4]
 800697c:	003b      	movs	r3, r7
 800697e:	f7fa fd41 	bl	8001404 <__aeabi_dmul>
 8006982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006984:	1b1c      	subs	r4, r3, r4
 8006986:	00e4      	lsls	r4, r4, #3
 8006988:	192c      	adds	r4, r5, r4
 800698a:	6822      	ldr	r2, [r4, #0]
 800698c:	6863      	ldr	r3, [r4, #4]
 800698e:	e7e3      	b.n	8006958 <_strtod_l+0x438>
 8006990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006992:	3316      	adds	r3, #22
 8006994:	db0c      	blt.n	80069b0 <_strtod_l+0x490>
 8006996:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006998:	9a07      	ldr	r2, [sp, #28]
 800699a:	0030      	movs	r0, r6
 800699c:	1a9a      	subs	r2, r3, r2
 800699e:	4b5a      	ldr	r3, [pc, #360]	; (8006b08 <_strtod_l+0x5e8>)
 80069a0:	00d2      	lsls	r2, r2, #3
 80069a2:	189b      	adds	r3, r3, r2
 80069a4:	0039      	movs	r1, r7
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f7fa f929 	bl	8000c00 <__aeabi_ddiv>
 80069ae:	e794      	b.n	80068da <_strtod_l+0x3ba>
 80069b0:	9b06      	ldr	r3, [sp, #24]
 80069b2:	1b1c      	subs	r4, r3, r4
 80069b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069b6:	18e4      	adds	r4, r4, r3
 80069b8:	2c00      	cmp	r4, #0
 80069ba:	dd72      	ble.n	8006aa2 <_strtod_l+0x582>
 80069bc:	230f      	movs	r3, #15
 80069be:	0021      	movs	r1, r4
 80069c0:	4019      	ands	r1, r3
 80069c2:	421c      	tst	r4, r3
 80069c4:	d00a      	beq.n	80069dc <_strtod_l+0x4bc>
 80069c6:	00cb      	lsls	r3, r1, #3
 80069c8:	494f      	ldr	r1, [pc, #316]	; (8006b08 <_strtod_l+0x5e8>)
 80069ca:	0032      	movs	r2, r6
 80069cc:	18c9      	adds	r1, r1, r3
 80069ce:	6808      	ldr	r0, [r1, #0]
 80069d0:	6849      	ldr	r1, [r1, #4]
 80069d2:	003b      	movs	r3, r7
 80069d4:	f7fa fd16 	bl	8001404 <__aeabi_dmul>
 80069d8:	0006      	movs	r6, r0
 80069da:	000f      	movs	r7, r1
 80069dc:	230f      	movs	r3, #15
 80069de:	439c      	bics	r4, r3
 80069e0:	d04a      	beq.n	8006a78 <_strtod_l+0x558>
 80069e2:	3326      	adds	r3, #38	; 0x26
 80069e4:	33ff      	adds	r3, #255	; 0xff
 80069e6:	429c      	cmp	r4, r3
 80069e8:	dd22      	ble.n	8006a30 <_strtod_l+0x510>
 80069ea:	2300      	movs	r3, #0
 80069ec:	9306      	str	r3, [sp, #24]
 80069ee:	9307      	str	r3, [sp, #28]
 80069f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80069f2:	9309      	str	r3, [sp, #36]	; 0x24
 80069f4:	2322      	movs	r3, #34	; 0x22
 80069f6:	2600      	movs	r6, #0
 80069f8:	9a05      	ldr	r2, [sp, #20]
 80069fa:	4f3f      	ldr	r7, [pc, #252]	; (8006af8 <_strtod_l+0x5d8>)
 80069fc:	6013      	str	r3, [r2, #0]
 80069fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a00:	42b3      	cmp	r3, r6
 8006a02:	d100      	bne.n	8006a06 <_strtod_l+0x4e6>
 8006a04:	e5d3      	b.n	80065ae <_strtod_l+0x8e>
 8006a06:	9920      	ldr	r1, [sp, #128]	; 0x80
 8006a08:	9805      	ldr	r0, [sp, #20]
 8006a0a:	f001 fec9 	bl	80087a0 <_Bfree>
 8006a0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a10:	9805      	ldr	r0, [sp, #20]
 8006a12:	f001 fec5 	bl	80087a0 <_Bfree>
 8006a16:	9907      	ldr	r1, [sp, #28]
 8006a18:	9805      	ldr	r0, [sp, #20]
 8006a1a:	f001 fec1 	bl	80087a0 <_Bfree>
 8006a1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a20:	9805      	ldr	r0, [sp, #20]
 8006a22:	f001 febd 	bl	80087a0 <_Bfree>
 8006a26:	9906      	ldr	r1, [sp, #24]
 8006a28:	9805      	ldr	r0, [sp, #20]
 8006a2a:	f001 feb9 	bl	80087a0 <_Bfree>
 8006a2e:	e5be      	b.n	80065ae <_strtod_l+0x8e>
 8006a30:	2300      	movs	r3, #0
 8006a32:	0030      	movs	r0, r6
 8006a34:	0039      	movs	r1, r7
 8006a36:	4d35      	ldr	r5, [pc, #212]	; (8006b0c <_strtod_l+0x5ec>)
 8006a38:	1124      	asrs	r4, r4, #4
 8006a3a:	9308      	str	r3, [sp, #32]
 8006a3c:	2c01      	cmp	r4, #1
 8006a3e:	dc1e      	bgt.n	8006a7e <_strtod_l+0x55e>
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d001      	beq.n	8006a48 <_strtod_l+0x528>
 8006a44:	0006      	movs	r6, r0
 8006a46:	000f      	movs	r7, r1
 8006a48:	4b31      	ldr	r3, [pc, #196]	; (8006b10 <_strtod_l+0x5f0>)
 8006a4a:	0032      	movs	r2, r6
 8006a4c:	18ff      	adds	r7, r7, r3
 8006a4e:	9b08      	ldr	r3, [sp, #32]
 8006a50:	00dd      	lsls	r5, r3, #3
 8006a52:	4b2e      	ldr	r3, [pc, #184]	; (8006b0c <_strtod_l+0x5ec>)
 8006a54:	195d      	adds	r5, r3, r5
 8006a56:	6828      	ldr	r0, [r5, #0]
 8006a58:	6869      	ldr	r1, [r5, #4]
 8006a5a:	003b      	movs	r3, r7
 8006a5c:	f7fa fcd2 	bl	8001404 <__aeabi_dmul>
 8006a60:	4b25      	ldr	r3, [pc, #148]	; (8006af8 <_strtod_l+0x5d8>)
 8006a62:	4a2c      	ldr	r2, [pc, #176]	; (8006b14 <_strtod_l+0x5f4>)
 8006a64:	0006      	movs	r6, r0
 8006a66:	400b      	ands	r3, r1
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d8be      	bhi.n	80069ea <_strtod_l+0x4ca>
 8006a6c:	4a2a      	ldr	r2, [pc, #168]	; (8006b18 <_strtod_l+0x5f8>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d913      	bls.n	8006a9a <_strtod_l+0x57a>
 8006a72:	2601      	movs	r6, #1
 8006a74:	4f29      	ldr	r7, [pc, #164]	; (8006b1c <_strtod_l+0x5fc>)
 8006a76:	4276      	negs	r6, r6
 8006a78:	2300      	movs	r3, #0
 8006a7a:	9308      	str	r3, [sp, #32]
 8006a7c:	e087      	b.n	8006b8e <_strtod_l+0x66e>
 8006a7e:	2201      	movs	r2, #1
 8006a80:	4214      	tst	r4, r2
 8006a82:	d004      	beq.n	8006a8e <_strtod_l+0x56e>
 8006a84:	682a      	ldr	r2, [r5, #0]
 8006a86:	686b      	ldr	r3, [r5, #4]
 8006a88:	f7fa fcbc 	bl	8001404 <__aeabi_dmul>
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	9a08      	ldr	r2, [sp, #32]
 8006a90:	1064      	asrs	r4, r4, #1
 8006a92:	3201      	adds	r2, #1
 8006a94:	9208      	str	r2, [sp, #32]
 8006a96:	3508      	adds	r5, #8
 8006a98:	e7d0      	b.n	8006a3c <_strtod_l+0x51c>
 8006a9a:	23d4      	movs	r3, #212	; 0xd4
 8006a9c:	049b      	lsls	r3, r3, #18
 8006a9e:	18cf      	adds	r7, r1, r3
 8006aa0:	e7ea      	b.n	8006a78 <_strtod_l+0x558>
 8006aa2:	2c00      	cmp	r4, #0
 8006aa4:	d0e8      	beq.n	8006a78 <_strtod_l+0x558>
 8006aa6:	4264      	negs	r4, r4
 8006aa8:	220f      	movs	r2, #15
 8006aaa:	0023      	movs	r3, r4
 8006aac:	4013      	ands	r3, r2
 8006aae:	4214      	tst	r4, r2
 8006ab0:	d00a      	beq.n	8006ac8 <_strtod_l+0x5a8>
 8006ab2:	00da      	lsls	r2, r3, #3
 8006ab4:	4b14      	ldr	r3, [pc, #80]	; (8006b08 <_strtod_l+0x5e8>)
 8006ab6:	0030      	movs	r0, r6
 8006ab8:	189b      	adds	r3, r3, r2
 8006aba:	0039      	movs	r1, r7
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	f7fa f89e 	bl	8000c00 <__aeabi_ddiv>
 8006ac4:	0006      	movs	r6, r0
 8006ac6:	000f      	movs	r7, r1
 8006ac8:	1124      	asrs	r4, r4, #4
 8006aca:	d0d5      	beq.n	8006a78 <_strtod_l+0x558>
 8006acc:	2c1f      	cmp	r4, #31
 8006ace:	dd27      	ble.n	8006b20 <_strtod_l+0x600>
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	9306      	str	r3, [sp, #24]
 8006ad4:	9307      	str	r3, [sp, #28]
 8006ad6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8006ada:	2322      	movs	r3, #34	; 0x22
 8006adc:	9a05      	ldr	r2, [sp, #20]
 8006ade:	2600      	movs	r6, #0
 8006ae0:	6013      	str	r3, [r2, #0]
 8006ae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ae4:	2700      	movs	r7, #0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d18d      	bne.n	8006a06 <_strtod_l+0x4e6>
 8006aea:	e560      	b.n	80065ae <_strtod_l+0x8e>
 8006aec:	00004e1f 	.word	0x00004e1f
 8006af0:	0800a2f1 	.word	0x0800a2f1
 8006af4:	0800a334 	.word	0x0800a334
 8006af8:	7ff00000 	.word	0x7ff00000
 8006afc:	0800a2e9 	.word	0x0800a2e9
 8006b00:	0800a474 	.word	0x0800a474
 8006b04:	0800a720 	.word	0x0800a720
 8006b08:	0800a600 	.word	0x0800a600
 8006b0c:	0800a5d8 	.word	0x0800a5d8
 8006b10:	fcb00000 	.word	0xfcb00000
 8006b14:	7ca00000 	.word	0x7ca00000
 8006b18:	7c900000 	.word	0x7c900000
 8006b1c:	7fefffff 	.word	0x7fefffff
 8006b20:	2310      	movs	r3, #16
 8006b22:	0022      	movs	r2, r4
 8006b24:	401a      	ands	r2, r3
 8006b26:	9208      	str	r2, [sp, #32]
 8006b28:	421c      	tst	r4, r3
 8006b2a:	d001      	beq.n	8006b30 <_strtod_l+0x610>
 8006b2c:	335a      	adds	r3, #90	; 0x5a
 8006b2e:	9308      	str	r3, [sp, #32]
 8006b30:	0030      	movs	r0, r6
 8006b32:	0039      	movs	r1, r7
 8006b34:	2300      	movs	r3, #0
 8006b36:	4dc5      	ldr	r5, [pc, #788]	; (8006e4c <_strtod_l+0x92c>)
 8006b38:	2201      	movs	r2, #1
 8006b3a:	4214      	tst	r4, r2
 8006b3c:	d004      	beq.n	8006b48 <_strtod_l+0x628>
 8006b3e:	682a      	ldr	r2, [r5, #0]
 8006b40:	686b      	ldr	r3, [r5, #4]
 8006b42:	f7fa fc5f 	bl	8001404 <__aeabi_dmul>
 8006b46:	2301      	movs	r3, #1
 8006b48:	1064      	asrs	r4, r4, #1
 8006b4a:	3508      	adds	r5, #8
 8006b4c:	2c00      	cmp	r4, #0
 8006b4e:	d1f3      	bne.n	8006b38 <_strtod_l+0x618>
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d001      	beq.n	8006b58 <_strtod_l+0x638>
 8006b54:	0006      	movs	r6, r0
 8006b56:	000f      	movs	r7, r1
 8006b58:	9b08      	ldr	r3, [sp, #32]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00f      	beq.n	8006b7e <_strtod_l+0x65e>
 8006b5e:	236b      	movs	r3, #107	; 0x6b
 8006b60:	007a      	lsls	r2, r7, #1
 8006b62:	0d52      	lsrs	r2, r2, #21
 8006b64:	0039      	movs	r1, r7
 8006b66:	1a9b      	subs	r3, r3, r2
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	dd08      	ble.n	8006b7e <_strtod_l+0x65e>
 8006b6c:	2b1f      	cmp	r3, #31
 8006b6e:	dc00      	bgt.n	8006b72 <_strtod_l+0x652>
 8006b70:	e124      	b.n	8006dbc <_strtod_l+0x89c>
 8006b72:	2600      	movs	r6, #0
 8006b74:	2b34      	cmp	r3, #52	; 0x34
 8006b76:	dc00      	bgt.n	8006b7a <_strtod_l+0x65a>
 8006b78:	e119      	b.n	8006dae <_strtod_l+0x88e>
 8006b7a:	27dc      	movs	r7, #220	; 0xdc
 8006b7c:	04bf      	lsls	r7, r7, #18
 8006b7e:	2200      	movs	r2, #0
 8006b80:	2300      	movs	r3, #0
 8006b82:	0030      	movs	r0, r6
 8006b84:	0039      	movs	r1, r7
 8006b86:	f7f9 fc61 	bl	800044c <__aeabi_dcmpeq>
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	d1a0      	bne.n	8006ad0 <_strtod_l+0x5b0>
 8006b8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b92:	9300      	str	r3, [sp, #0]
 8006b94:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006b96:	9b06      	ldr	r3, [sp, #24]
 8006b98:	9805      	ldr	r0, [sp, #20]
 8006b9a:	f001 fe69 	bl	8008870 <__s2b>
 8006b9e:	900b      	str	r0, [sp, #44]	; 0x2c
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	d100      	bne.n	8006ba6 <_strtod_l+0x686>
 8006ba4:	e721      	b.n	80069ea <_strtod_l+0x4ca>
 8006ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ba8:	9907      	ldr	r1, [sp, #28]
 8006baa:	17da      	asrs	r2, r3, #31
 8006bac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006bae:	1a5b      	subs	r3, r3, r1
 8006bb0:	401a      	ands	r2, r3
 8006bb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bb4:	9215      	str	r2, [sp, #84]	; 0x54
 8006bb6:	43db      	mvns	r3, r3
 8006bb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bba:	17db      	asrs	r3, r3, #31
 8006bbc:	401a      	ands	r2, r3
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	921a      	str	r2, [sp, #104]	; 0x68
 8006bc2:	9306      	str	r3, [sp, #24]
 8006bc4:	9307      	str	r3, [sp, #28]
 8006bc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bc8:	9805      	ldr	r0, [sp, #20]
 8006bca:	6859      	ldr	r1, [r3, #4]
 8006bcc:	f001 fda4 	bl	8008718 <_Balloc>
 8006bd0:	9009      	str	r0, [sp, #36]	; 0x24
 8006bd2:	2800      	cmp	r0, #0
 8006bd4:	d100      	bne.n	8006bd8 <_strtod_l+0x6b8>
 8006bd6:	e70d      	b.n	80069f4 <_strtod_l+0x4d4>
 8006bd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bda:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	310c      	adds	r1, #12
 8006be0:	1c9a      	adds	r2, r3, #2
 8006be2:	0092      	lsls	r2, r2, #2
 8006be4:	300c      	adds	r0, #12
 8006be6:	930c      	str	r3, [sp, #48]	; 0x30
 8006be8:	f001 fd8d 	bl	8008706 <memcpy>
 8006bec:	ab22      	add	r3, sp, #136	; 0x88
 8006bee:	9301      	str	r3, [sp, #4]
 8006bf0:	ab21      	add	r3, sp, #132	; 0x84
 8006bf2:	9300      	str	r3, [sp, #0]
 8006bf4:	0032      	movs	r2, r6
 8006bf6:	003b      	movs	r3, r7
 8006bf8:	9805      	ldr	r0, [sp, #20]
 8006bfa:	9612      	str	r6, [sp, #72]	; 0x48
 8006bfc:	9713      	str	r7, [sp, #76]	; 0x4c
 8006bfe:	f002 f983 	bl	8008f08 <__d2b>
 8006c02:	9020      	str	r0, [sp, #128]	; 0x80
 8006c04:	2800      	cmp	r0, #0
 8006c06:	d100      	bne.n	8006c0a <_strtod_l+0x6ea>
 8006c08:	e6f4      	b.n	80069f4 <_strtod_l+0x4d4>
 8006c0a:	2101      	movs	r1, #1
 8006c0c:	9805      	ldr	r0, [sp, #20]
 8006c0e:	f001 fec3 	bl	8008998 <__i2b>
 8006c12:	9007      	str	r0, [sp, #28]
 8006c14:	2800      	cmp	r0, #0
 8006c16:	d100      	bne.n	8006c1a <_strtod_l+0x6fa>
 8006c18:	e6ec      	b.n	80069f4 <_strtod_l+0x4d4>
 8006c1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c1c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006c1e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8006c20:	1ad4      	subs	r4, r2, r3
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	db01      	blt.n	8006c2a <_strtod_l+0x70a>
 8006c26:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8006c28:	195d      	adds	r5, r3, r5
 8006c2a:	9908      	ldr	r1, [sp, #32]
 8006c2c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006c2e:	1a5b      	subs	r3, r3, r1
 8006c30:	2136      	movs	r1, #54	; 0x36
 8006c32:	189b      	adds	r3, r3, r2
 8006c34:	1a8a      	subs	r2, r1, r2
 8006c36:	4986      	ldr	r1, [pc, #536]	; (8006e50 <_strtod_l+0x930>)
 8006c38:	2001      	movs	r0, #1
 8006c3a:	468c      	mov	ip, r1
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	9110      	str	r1, [sp, #64]	; 0x40
 8006c42:	9014      	str	r0, [sp, #80]	; 0x50
 8006c44:	4563      	cmp	r3, ip
 8006c46:	da07      	bge.n	8006c58 <_strtod_l+0x738>
 8006c48:	4661      	mov	r1, ip
 8006c4a:	1ac9      	subs	r1, r1, r3
 8006c4c:	1a52      	subs	r2, r2, r1
 8006c4e:	291f      	cmp	r1, #31
 8006c50:	dd00      	ble.n	8006c54 <_strtod_l+0x734>
 8006c52:	e0b8      	b.n	8006dc6 <_strtod_l+0x8a6>
 8006c54:	4088      	lsls	r0, r1
 8006c56:	9014      	str	r0, [sp, #80]	; 0x50
 8006c58:	18ab      	adds	r3, r5, r2
 8006c5a:	930c      	str	r3, [sp, #48]	; 0x30
 8006c5c:	18a4      	adds	r4, r4, r2
 8006c5e:	9b08      	ldr	r3, [sp, #32]
 8006c60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c62:	191c      	adds	r4, r3, r4
 8006c64:	002b      	movs	r3, r5
 8006c66:	4295      	cmp	r5, r2
 8006c68:	dd00      	ble.n	8006c6c <_strtod_l+0x74c>
 8006c6a:	0013      	movs	r3, r2
 8006c6c:	42a3      	cmp	r3, r4
 8006c6e:	dd00      	ble.n	8006c72 <_strtod_l+0x752>
 8006c70:	0023      	movs	r3, r4
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	dd04      	ble.n	8006c80 <_strtod_l+0x760>
 8006c76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c78:	1ae4      	subs	r4, r4, r3
 8006c7a:	1ad2      	subs	r2, r2, r3
 8006c7c:	920c      	str	r2, [sp, #48]	; 0x30
 8006c7e:	1aed      	subs	r5, r5, r3
 8006c80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	dd17      	ble.n	8006cb6 <_strtod_l+0x796>
 8006c86:	001a      	movs	r2, r3
 8006c88:	9907      	ldr	r1, [sp, #28]
 8006c8a:	9805      	ldr	r0, [sp, #20]
 8006c8c:	f001 ff4a 	bl	8008b24 <__pow5mult>
 8006c90:	9007      	str	r0, [sp, #28]
 8006c92:	2800      	cmp	r0, #0
 8006c94:	d100      	bne.n	8006c98 <_strtod_l+0x778>
 8006c96:	e6ad      	b.n	80069f4 <_strtod_l+0x4d4>
 8006c98:	0001      	movs	r1, r0
 8006c9a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006c9c:	9805      	ldr	r0, [sp, #20]
 8006c9e:	f001 fe91 	bl	80089c4 <__multiply>
 8006ca2:	900f      	str	r0, [sp, #60]	; 0x3c
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	d100      	bne.n	8006caa <_strtod_l+0x78a>
 8006ca8:	e6a4      	b.n	80069f4 <_strtod_l+0x4d4>
 8006caa:	9920      	ldr	r1, [sp, #128]	; 0x80
 8006cac:	9805      	ldr	r0, [sp, #20]
 8006cae:	f001 fd77 	bl	80087a0 <_Bfree>
 8006cb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cb4:	9320      	str	r3, [sp, #128]	; 0x80
 8006cb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	dd00      	ble.n	8006cbe <_strtod_l+0x79e>
 8006cbc:	e089      	b.n	8006dd2 <_strtod_l+0x8b2>
 8006cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	dd08      	ble.n	8006cd6 <_strtod_l+0x7b6>
 8006cc4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006cc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cc8:	9805      	ldr	r0, [sp, #20]
 8006cca:	f001 ff2b 	bl	8008b24 <__pow5mult>
 8006cce:	9009      	str	r0, [sp, #36]	; 0x24
 8006cd0:	2800      	cmp	r0, #0
 8006cd2:	d100      	bne.n	8006cd6 <_strtod_l+0x7b6>
 8006cd4:	e68e      	b.n	80069f4 <_strtod_l+0x4d4>
 8006cd6:	2c00      	cmp	r4, #0
 8006cd8:	dd08      	ble.n	8006cec <_strtod_l+0x7cc>
 8006cda:	0022      	movs	r2, r4
 8006cdc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cde:	9805      	ldr	r0, [sp, #20]
 8006ce0:	f001 ff7c 	bl	8008bdc <__lshift>
 8006ce4:	9009      	str	r0, [sp, #36]	; 0x24
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	d100      	bne.n	8006cec <_strtod_l+0x7cc>
 8006cea:	e683      	b.n	80069f4 <_strtod_l+0x4d4>
 8006cec:	2d00      	cmp	r5, #0
 8006cee:	dd08      	ble.n	8006d02 <_strtod_l+0x7e2>
 8006cf0:	002a      	movs	r2, r5
 8006cf2:	9907      	ldr	r1, [sp, #28]
 8006cf4:	9805      	ldr	r0, [sp, #20]
 8006cf6:	f001 ff71 	bl	8008bdc <__lshift>
 8006cfa:	9007      	str	r0, [sp, #28]
 8006cfc:	2800      	cmp	r0, #0
 8006cfe:	d100      	bne.n	8006d02 <_strtod_l+0x7e2>
 8006d00:	e678      	b.n	80069f4 <_strtod_l+0x4d4>
 8006d02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d04:	9920      	ldr	r1, [sp, #128]	; 0x80
 8006d06:	9805      	ldr	r0, [sp, #20]
 8006d08:	f001 fff2 	bl	8008cf0 <__mdiff>
 8006d0c:	9006      	str	r0, [sp, #24]
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	d100      	bne.n	8006d14 <_strtod_l+0x7f4>
 8006d12:	e66f      	b.n	80069f4 <_strtod_l+0x4d4>
 8006d14:	2200      	movs	r2, #0
 8006d16:	68c3      	ldr	r3, [r0, #12]
 8006d18:	9907      	ldr	r1, [sp, #28]
 8006d1a:	60c2      	str	r2, [r0, #12]
 8006d1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d1e:	f001 ffcb 	bl	8008cb8 <__mcmp>
 8006d22:	2800      	cmp	r0, #0
 8006d24:	da5f      	bge.n	8006de6 <_strtod_l+0x8c6>
 8006d26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d28:	4333      	orrs	r3, r6
 8006d2a:	d000      	beq.n	8006d2e <_strtod_l+0x80e>
 8006d2c:	e08a      	b.n	8006e44 <_strtod_l+0x924>
 8006d2e:	033b      	lsls	r3, r7, #12
 8006d30:	d000      	beq.n	8006d34 <_strtod_l+0x814>
 8006d32:	e087      	b.n	8006e44 <_strtod_l+0x924>
 8006d34:	22d6      	movs	r2, #214	; 0xd6
 8006d36:	4b47      	ldr	r3, [pc, #284]	; (8006e54 <_strtod_l+0x934>)
 8006d38:	04d2      	lsls	r2, r2, #19
 8006d3a:	403b      	ands	r3, r7
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d800      	bhi.n	8006d42 <_strtod_l+0x822>
 8006d40:	e080      	b.n	8006e44 <_strtod_l+0x924>
 8006d42:	9b06      	ldr	r3, [sp, #24]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	930a      	str	r3, [sp, #40]	; 0x28
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d104      	bne.n	8006d56 <_strtod_l+0x836>
 8006d4c:	9b06      	ldr	r3, [sp, #24]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	930a      	str	r3, [sp, #40]	; 0x28
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	dd76      	ble.n	8006e44 <_strtod_l+0x924>
 8006d56:	9906      	ldr	r1, [sp, #24]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	9805      	ldr	r0, [sp, #20]
 8006d5c:	f001 ff3e 	bl	8008bdc <__lshift>
 8006d60:	9907      	ldr	r1, [sp, #28]
 8006d62:	9006      	str	r0, [sp, #24]
 8006d64:	f001 ffa8 	bl	8008cb8 <__mcmp>
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	dd6b      	ble.n	8006e44 <_strtod_l+0x924>
 8006d6c:	9908      	ldr	r1, [sp, #32]
 8006d6e:	003b      	movs	r3, r7
 8006d70:	4a38      	ldr	r2, [pc, #224]	; (8006e54 <_strtod_l+0x934>)
 8006d72:	2900      	cmp	r1, #0
 8006d74:	d100      	bne.n	8006d78 <_strtod_l+0x858>
 8006d76:	e092      	b.n	8006e9e <_strtod_l+0x97e>
 8006d78:	0011      	movs	r1, r2
 8006d7a:	20d6      	movs	r0, #214	; 0xd6
 8006d7c:	4039      	ands	r1, r7
 8006d7e:	04c0      	lsls	r0, r0, #19
 8006d80:	4281      	cmp	r1, r0
 8006d82:	dd00      	ble.n	8006d86 <_strtod_l+0x866>
 8006d84:	e08b      	b.n	8006e9e <_strtod_l+0x97e>
 8006d86:	23dc      	movs	r3, #220	; 0xdc
 8006d88:	049b      	lsls	r3, r3, #18
 8006d8a:	4299      	cmp	r1, r3
 8006d8c:	dc00      	bgt.n	8006d90 <_strtod_l+0x870>
 8006d8e:	e6a4      	b.n	8006ada <_strtod_l+0x5ba>
 8006d90:	0030      	movs	r0, r6
 8006d92:	0039      	movs	r1, r7
 8006d94:	2200      	movs	r2, #0
 8006d96:	4b30      	ldr	r3, [pc, #192]	; (8006e58 <_strtod_l+0x938>)
 8006d98:	f7fa fb34 	bl	8001404 <__aeabi_dmul>
 8006d9c:	0006      	movs	r6, r0
 8006d9e:	000f      	movs	r7, r1
 8006da0:	4308      	orrs	r0, r1
 8006da2:	d000      	beq.n	8006da6 <_strtod_l+0x886>
 8006da4:	e62f      	b.n	8006a06 <_strtod_l+0x4e6>
 8006da6:	2322      	movs	r3, #34	; 0x22
 8006da8:	9a05      	ldr	r2, [sp, #20]
 8006daa:	6013      	str	r3, [r2, #0]
 8006dac:	e62b      	b.n	8006a06 <_strtod_l+0x4e6>
 8006dae:	234b      	movs	r3, #75	; 0x4b
 8006db0:	1a9a      	subs	r2, r3, r2
 8006db2:	3b4c      	subs	r3, #76	; 0x4c
 8006db4:	4093      	lsls	r3, r2
 8006db6:	4019      	ands	r1, r3
 8006db8:	000f      	movs	r7, r1
 8006dba:	e6e0      	b.n	8006b7e <_strtod_l+0x65e>
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	4252      	negs	r2, r2
 8006dc0:	409a      	lsls	r2, r3
 8006dc2:	4016      	ands	r6, r2
 8006dc4:	e6db      	b.n	8006b7e <_strtod_l+0x65e>
 8006dc6:	4925      	ldr	r1, [pc, #148]	; (8006e5c <_strtod_l+0x93c>)
 8006dc8:	1acb      	subs	r3, r1, r3
 8006dca:	0001      	movs	r1, r0
 8006dcc:	4099      	lsls	r1, r3
 8006dce:	9110      	str	r1, [sp, #64]	; 0x40
 8006dd0:	e741      	b.n	8006c56 <_strtod_l+0x736>
 8006dd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006dd4:	9920      	ldr	r1, [sp, #128]	; 0x80
 8006dd6:	9805      	ldr	r0, [sp, #20]
 8006dd8:	f001 ff00 	bl	8008bdc <__lshift>
 8006ddc:	9020      	str	r0, [sp, #128]	; 0x80
 8006dde:	2800      	cmp	r0, #0
 8006de0:	d000      	beq.n	8006de4 <_strtod_l+0x8c4>
 8006de2:	e76c      	b.n	8006cbe <_strtod_l+0x79e>
 8006de4:	e606      	b.n	80069f4 <_strtod_l+0x4d4>
 8006de6:	970c      	str	r7, [sp, #48]	; 0x30
 8006de8:	2800      	cmp	r0, #0
 8006dea:	d176      	bne.n	8006eda <_strtod_l+0x9ba>
 8006dec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006dee:	033b      	lsls	r3, r7, #12
 8006df0:	0b1b      	lsrs	r3, r3, #12
 8006df2:	2a00      	cmp	r2, #0
 8006df4:	d038      	beq.n	8006e68 <_strtod_l+0x948>
 8006df6:	4a1a      	ldr	r2, [pc, #104]	; (8006e60 <_strtod_l+0x940>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d138      	bne.n	8006e6e <_strtod_l+0x94e>
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	9b08      	ldr	r3, [sp, #32]
 8006e00:	4252      	negs	r2, r2
 8006e02:	0031      	movs	r1, r6
 8006e04:	0010      	movs	r0, r2
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d00b      	beq.n	8006e22 <_strtod_l+0x902>
 8006e0a:	24d4      	movs	r4, #212	; 0xd4
 8006e0c:	4b11      	ldr	r3, [pc, #68]	; (8006e54 <_strtod_l+0x934>)
 8006e0e:	0010      	movs	r0, r2
 8006e10:	403b      	ands	r3, r7
 8006e12:	04e4      	lsls	r4, r4, #19
 8006e14:	42a3      	cmp	r3, r4
 8006e16:	d804      	bhi.n	8006e22 <_strtod_l+0x902>
 8006e18:	306c      	adds	r0, #108	; 0x6c
 8006e1a:	0d1b      	lsrs	r3, r3, #20
 8006e1c:	1ac3      	subs	r3, r0, r3
 8006e1e:	409a      	lsls	r2, r3
 8006e20:	0010      	movs	r0, r2
 8006e22:	4281      	cmp	r1, r0
 8006e24:	d123      	bne.n	8006e6e <_strtod_l+0x94e>
 8006e26:	4b0f      	ldr	r3, [pc, #60]	; (8006e64 <_strtod_l+0x944>)
 8006e28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d102      	bne.n	8006e34 <_strtod_l+0x914>
 8006e2e:	1c4b      	adds	r3, r1, #1
 8006e30:	d100      	bne.n	8006e34 <_strtod_l+0x914>
 8006e32:	e5df      	b.n	80069f4 <_strtod_l+0x4d4>
 8006e34:	4b07      	ldr	r3, [pc, #28]	; (8006e54 <_strtod_l+0x934>)
 8006e36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e38:	2600      	movs	r6, #0
 8006e3a:	401a      	ands	r2, r3
 8006e3c:	0013      	movs	r3, r2
 8006e3e:	2280      	movs	r2, #128	; 0x80
 8006e40:	0352      	lsls	r2, r2, #13
 8006e42:	189f      	adds	r7, r3, r2
 8006e44:	9b08      	ldr	r3, [sp, #32]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1a2      	bne.n	8006d90 <_strtod_l+0x870>
 8006e4a:	e5dc      	b.n	8006a06 <_strtod_l+0x4e6>
 8006e4c:	0800a348 	.word	0x0800a348
 8006e50:	fffffc02 	.word	0xfffffc02
 8006e54:	7ff00000 	.word	0x7ff00000
 8006e58:	39500000 	.word	0x39500000
 8006e5c:	fffffbe2 	.word	0xfffffbe2
 8006e60:	000fffff 	.word	0x000fffff
 8006e64:	7fefffff 	.word	0x7fefffff
 8006e68:	4333      	orrs	r3, r6
 8006e6a:	d100      	bne.n	8006e6e <_strtod_l+0x94e>
 8006e6c:	e77e      	b.n	8006d6c <_strtod_l+0x84c>
 8006e6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d01d      	beq.n	8006eb0 <_strtod_l+0x990>
 8006e74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e76:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006e78:	4213      	tst	r3, r2
 8006e7a:	d0e3      	beq.n	8006e44 <_strtod_l+0x924>
 8006e7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e7e:	0030      	movs	r0, r6
 8006e80:	0039      	movs	r1, r7
 8006e82:	9a08      	ldr	r2, [sp, #32]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d017      	beq.n	8006eb8 <_strtod_l+0x998>
 8006e88:	f7ff fb32 	bl	80064f0 <sulp>
 8006e8c:	0002      	movs	r2, r0
 8006e8e:	000b      	movs	r3, r1
 8006e90:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006e92:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006e94:	f7f9 fb78 	bl	8000588 <__aeabi_dadd>
 8006e98:	0006      	movs	r6, r0
 8006e9a:	000f      	movs	r7, r1
 8006e9c:	e7d2      	b.n	8006e44 <_strtod_l+0x924>
 8006e9e:	2601      	movs	r6, #1
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	4a99      	ldr	r2, [pc, #612]	; (8007108 <_strtod_l+0xbe8>)
 8006ea4:	4276      	negs	r6, r6
 8006ea6:	189b      	adds	r3, r3, r2
 8006ea8:	4a98      	ldr	r2, [pc, #608]	; (800710c <_strtod_l+0xbec>)
 8006eaa:	431a      	orrs	r2, r3
 8006eac:	0017      	movs	r7, r2
 8006eae:	e7c9      	b.n	8006e44 <_strtod_l+0x924>
 8006eb0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006eb2:	4233      	tst	r3, r6
 8006eb4:	d0c6      	beq.n	8006e44 <_strtod_l+0x924>
 8006eb6:	e7e1      	b.n	8006e7c <_strtod_l+0x95c>
 8006eb8:	f7ff fb1a 	bl	80064f0 <sulp>
 8006ebc:	0002      	movs	r2, r0
 8006ebe:	000b      	movs	r3, r1
 8006ec0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006ec2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006ec4:	f7fa fd0a 	bl	80018dc <__aeabi_dsub>
 8006ec8:	2200      	movs	r2, #0
 8006eca:	2300      	movs	r3, #0
 8006ecc:	0006      	movs	r6, r0
 8006ece:	000f      	movs	r7, r1
 8006ed0:	f7f9 fabc 	bl	800044c <__aeabi_dcmpeq>
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	d0b5      	beq.n	8006e44 <_strtod_l+0x924>
 8006ed8:	e5ff      	b.n	8006ada <_strtod_l+0x5ba>
 8006eda:	9907      	ldr	r1, [sp, #28]
 8006edc:	9806      	ldr	r0, [sp, #24]
 8006ede:	f002 f877 	bl	8008fd0 <__ratio>
 8006ee2:	2380      	movs	r3, #128	; 0x80
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	05db      	lsls	r3, r3, #23
 8006ee8:	0004      	movs	r4, r0
 8006eea:	000d      	movs	r5, r1
 8006eec:	f7f9 fabe 	bl	800046c <__aeabi_dcmple>
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	d075      	beq.n	8006fe0 <_strtod_l+0xac0>
 8006ef4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d047      	beq.n	8006f8a <_strtod_l+0xa6a>
 8006efa:	2300      	movs	r3, #0
 8006efc:	4c84      	ldr	r4, [pc, #528]	; (8007110 <_strtod_l+0xbf0>)
 8006efe:	2500      	movs	r5, #0
 8006f00:	9310      	str	r3, [sp, #64]	; 0x40
 8006f02:	9411      	str	r4, [sp, #68]	; 0x44
 8006f04:	4c82      	ldr	r4, [pc, #520]	; (8007110 <_strtod_l+0xbf0>)
 8006f06:	4a83      	ldr	r2, [pc, #524]	; (8007114 <_strtod_l+0xbf4>)
 8006f08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	9314      	str	r3, [sp, #80]	; 0x50
 8006f0e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006f10:	4b81      	ldr	r3, [pc, #516]	; (8007118 <_strtod_l+0xbf8>)
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d000      	beq.n	8006f18 <_strtod_l+0x9f8>
 8006f16:	e0ac      	b.n	8007072 <_strtod_l+0xb52>
 8006f18:	4a80      	ldr	r2, [pc, #512]	; (800711c <_strtod_l+0xbfc>)
 8006f1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f1c:	4694      	mov	ip, r2
 8006f1e:	4463      	add	r3, ip
 8006f20:	001f      	movs	r7, r3
 8006f22:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006f24:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f26:	0030      	movs	r0, r6
 8006f28:	0039      	movs	r1, r7
 8006f2a:	920c      	str	r2, [sp, #48]	; 0x30
 8006f2c:	930d      	str	r3, [sp, #52]	; 0x34
 8006f2e:	f001 ff77 	bl	8008e20 <__ulp>
 8006f32:	0002      	movs	r2, r0
 8006f34:	000b      	movs	r3, r1
 8006f36:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006f38:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006f3a:	f7fa fa63 	bl	8001404 <__aeabi_dmul>
 8006f3e:	0032      	movs	r2, r6
 8006f40:	003b      	movs	r3, r7
 8006f42:	f7f9 fb21 	bl	8000588 <__aeabi_dadd>
 8006f46:	4a73      	ldr	r2, [pc, #460]	; (8007114 <_strtod_l+0xbf4>)
 8006f48:	4b75      	ldr	r3, [pc, #468]	; (8007120 <_strtod_l+0xc00>)
 8006f4a:	0006      	movs	r6, r0
 8006f4c:	400a      	ands	r2, r1
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d95e      	bls.n	8007010 <_strtod_l+0xaf0>
 8006f52:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006f54:	4b73      	ldr	r3, [pc, #460]	; (8007124 <_strtod_l+0xc04>)
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d103      	bne.n	8006f62 <_strtod_l+0xa42>
 8006f5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	d100      	bne.n	8006f62 <_strtod_l+0xa42>
 8006f60:	e548      	b.n	80069f4 <_strtod_l+0x4d4>
 8006f62:	2601      	movs	r6, #1
 8006f64:	4f6f      	ldr	r7, [pc, #444]	; (8007124 <_strtod_l+0xc04>)
 8006f66:	4276      	negs	r6, r6
 8006f68:	9920      	ldr	r1, [sp, #128]	; 0x80
 8006f6a:	9805      	ldr	r0, [sp, #20]
 8006f6c:	f001 fc18 	bl	80087a0 <_Bfree>
 8006f70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f72:	9805      	ldr	r0, [sp, #20]
 8006f74:	f001 fc14 	bl	80087a0 <_Bfree>
 8006f78:	9907      	ldr	r1, [sp, #28]
 8006f7a:	9805      	ldr	r0, [sp, #20]
 8006f7c:	f001 fc10 	bl	80087a0 <_Bfree>
 8006f80:	9906      	ldr	r1, [sp, #24]
 8006f82:	9805      	ldr	r0, [sp, #20]
 8006f84:	f001 fc0c 	bl	80087a0 <_Bfree>
 8006f88:	e61d      	b.n	8006bc6 <_strtod_l+0x6a6>
 8006f8a:	2e00      	cmp	r6, #0
 8006f8c:	d11c      	bne.n	8006fc8 <_strtod_l+0xaa8>
 8006f8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f90:	031b      	lsls	r3, r3, #12
 8006f92:	d11f      	bne.n	8006fd4 <_strtod_l+0xab4>
 8006f94:	2200      	movs	r2, #0
 8006f96:	0020      	movs	r0, r4
 8006f98:	0029      	movs	r1, r5
 8006f9a:	4b5d      	ldr	r3, [pc, #372]	; (8007110 <_strtod_l+0xbf0>)
 8006f9c:	f7f9 fa5c 	bl	8000458 <__aeabi_dcmplt>
 8006fa0:	2800      	cmp	r0, #0
 8006fa2:	d11a      	bne.n	8006fda <_strtod_l+0xaba>
 8006fa4:	0020      	movs	r0, r4
 8006fa6:	0029      	movs	r1, r5
 8006fa8:	2200      	movs	r2, #0
 8006faa:	4b5f      	ldr	r3, [pc, #380]	; (8007128 <_strtod_l+0xc08>)
 8006fac:	f7fa fa2a 	bl	8001404 <__aeabi_dmul>
 8006fb0:	0005      	movs	r5, r0
 8006fb2:	000c      	movs	r4, r1
 8006fb4:	2380      	movs	r3, #128	; 0x80
 8006fb6:	061b      	lsls	r3, r3, #24
 8006fb8:	18e3      	adds	r3, r4, r3
 8006fba:	951c      	str	r5, [sp, #112]	; 0x70
 8006fbc:	931d      	str	r3, [sp, #116]	; 0x74
 8006fbe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006fc0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006fc2:	9210      	str	r2, [sp, #64]	; 0x40
 8006fc4:	9311      	str	r3, [sp, #68]	; 0x44
 8006fc6:	e79e      	b.n	8006f06 <_strtod_l+0x9e6>
 8006fc8:	2e01      	cmp	r6, #1
 8006fca:	d103      	bne.n	8006fd4 <_strtod_l+0xab4>
 8006fcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d100      	bne.n	8006fd4 <_strtod_l+0xab4>
 8006fd2:	e582      	b.n	8006ada <_strtod_l+0x5ba>
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	4c55      	ldr	r4, [pc, #340]	; (800712c <_strtod_l+0xc0c>)
 8006fd8:	e791      	b.n	8006efe <_strtod_l+0x9de>
 8006fda:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006fdc:	4c52      	ldr	r4, [pc, #328]	; (8007128 <_strtod_l+0xc08>)
 8006fde:	e7e9      	b.n	8006fb4 <_strtod_l+0xa94>
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	0020      	movs	r0, r4
 8006fe4:	0029      	movs	r1, r5
 8006fe6:	4b50      	ldr	r3, [pc, #320]	; (8007128 <_strtod_l+0xc08>)
 8006fe8:	f7fa fa0c 	bl	8001404 <__aeabi_dmul>
 8006fec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006fee:	0005      	movs	r5, r0
 8006ff0:	000b      	movs	r3, r1
 8006ff2:	000c      	movs	r4, r1
 8006ff4:	2a00      	cmp	r2, #0
 8006ff6:	d107      	bne.n	8007008 <_strtod_l+0xae8>
 8006ff8:	2280      	movs	r2, #128	; 0x80
 8006ffa:	0612      	lsls	r2, r2, #24
 8006ffc:	188b      	adds	r3, r1, r2
 8006ffe:	9016      	str	r0, [sp, #88]	; 0x58
 8007000:	9317      	str	r3, [sp, #92]	; 0x5c
 8007002:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007004:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007006:	e7dc      	b.n	8006fc2 <_strtod_l+0xaa2>
 8007008:	0002      	movs	r2, r0
 800700a:	9216      	str	r2, [sp, #88]	; 0x58
 800700c:	9317      	str	r3, [sp, #92]	; 0x5c
 800700e:	e7f8      	b.n	8007002 <_strtod_l+0xae2>
 8007010:	23d4      	movs	r3, #212	; 0xd4
 8007012:	049b      	lsls	r3, r3, #18
 8007014:	18cf      	adds	r7, r1, r3
 8007016:	9b08      	ldr	r3, [sp, #32]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d1a5      	bne.n	8006f68 <_strtod_l+0xa48>
 800701c:	4b3d      	ldr	r3, [pc, #244]	; (8007114 <_strtod_l+0xbf4>)
 800701e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007020:	403b      	ands	r3, r7
 8007022:	429a      	cmp	r2, r3
 8007024:	d1a0      	bne.n	8006f68 <_strtod_l+0xa48>
 8007026:	0028      	movs	r0, r5
 8007028:	0021      	movs	r1, r4
 800702a:	f7f9 fa5b 	bl	80004e4 <__aeabi_d2lz>
 800702e:	f7f9 fa95 	bl	800055c <__aeabi_l2d>
 8007032:	0002      	movs	r2, r0
 8007034:	000b      	movs	r3, r1
 8007036:	0028      	movs	r0, r5
 8007038:	0021      	movs	r1, r4
 800703a:	f7fa fc4f 	bl	80018dc <__aeabi_dsub>
 800703e:	033b      	lsls	r3, r7, #12
 8007040:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007042:	0b1b      	lsrs	r3, r3, #12
 8007044:	4333      	orrs	r3, r6
 8007046:	4313      	orrs	r3, r2
 8007048:	0004      	movs	r4, r0
 800704a:	000d      	movs	r5, r1
 800704c:	4a38      	ldr	r2, [pc, #224]	; (8007130 <_strtod_l+0xc10>)
 800704e:	2b00      	cmp	r3, #0
 8007050:	d055      	beq.n	80070fe <_strtod_l+0xbde>
 8007052:	4b38      	ldr	r3, [pc, #224]	; (8007134 <_strtod_l+0xc14>)
 8007054:	f7f9 fa00 	bl	8000458 <__aeabi_dcmplt>
 8007058:	2800      	cmp	r0, #0
 800705a:	d000      	beq.n	800705e <_strtod_l+0xb3e>
 800705c:	e4d3      	b.n	8006a06 <_strtod_l+0x4e6>
 800705e:	0020      	movs	r0, r4
 8007060:	0029      	movs	r1, r5
 8007062:	4a35      	ldr	r2, [pc, #212]	; (8007138 <_strtod_l+0xc18>)
 8007064:	4b30      	ldr	r3, [pc, #192]	; (8007128 <_strtod_l+0xc08>)
 8007066:	f7f9 fa0b 	bl	8000480 <__aeabi_dcmpgt>
 800706a:	2800      	cmp	r0, #0
 800706c:	d100      	bne.n	8007070 <_strtod_l+0xb50>
 800706e:	e77b      	b.n	8006f68 <_strtod_l+0xa48>
 8007070:	e4c9      	b.n	8006a06 <_strtod_l+0x4e6>
 8007072:	9b08      	ldr	r3, [sp, #32]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d02b      	beq.n	80070d0 <_strtod_l+0xbb0>
 8007078:	23d4      	movs	r3, #212	; 0xd4
 800707a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800707c:	04db      	lsls	r3, r3, #19
 800707e:	429a      	cmp	r2, r3
 8007080:	d826      	bhi.n	80070d0 <_strtod_l+0xbb0>
 8007082:	0028      	movs	r0, r5
 8007084:	0021      	movs	r1, r4
 8007086:	4a2d      	ldr	r2, [pc, #180]	; (800713c <_strtod_l+0xc1c>)
 8007088:	4b2d      	ldr	r3, [pc, #180]	; (8007140 <_strtod_l+0xc20>)
 800708a:	f7f9 f9ef 	bl	800046c <__aeabi_dcmple>
 800708e:	2800      	cmp	r0, #0
 8007090:	d017      	beq.n	80070c2 <_strtod_l+0xba2>
 8007092:	0028      	movs	r0, r5
 8007094:	0021      	movs	r1, r4
 8007096:	f7f9 fa07 	bl	80004a8 <__aeabi_d2uiz>
 800709a:	2800      	cmp	r0, #0
 800709c:	d100      	bne.n	80070a0 <_strtod_l+0xb80>
 800709e:	3001      	adds	r0, #1
 80070a0:	f7fb f832 	bl	8002108 <__aeabi_ui2d>
 80070a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80070a6:	0005      	movs	r5, r0
 80070a8:	000b      	movs	r3, r1
 80070aa:	000c      	movs	r4, r1
 80070ac:	2a00      	cmp	r2, #0
 80070ae:	d122      	bne.n	80070f6 <_strtod_l+0xbd6>
 80070b0:	2280      	movs	r2, #128	; 0x80
 80070b2:	0612      	lsls	r2, r2, #24
 80070b4:	188b      	adds	r3, r1, r2
 80070b6:	9018      	str	r0, [sp, #96]	; 0x60
 80070b8:	9319      	str	r3, [sp, #100]	; 0x64
 80070ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80070bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80070be:	9210      	str	r2, [sp, #64]	; 0x40
 80070c0:	9311      	str	r3, [sp, #68]	; 0x44
 80070c2:	22d6      	movs	r2, #214	; 0xd6
 80070c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80070c6:	04d2      	lsls	r2, r2, #19
 80070c8:	189b      	adds	r3, r3, r2
 80070ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80070cc:	1a9b      	subs	r3, r3, r2
 80070ce:	9311      	str	r3, [sp, #68]	; 0x44
 80070d0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80070d2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80070d4:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80070d6:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80070d8:	f001 fea2 	bl	8008e20 <__ulp>
 80070dc:	0002      	movs	r2, r0
 80070de:	000b      	movs	r3, r1
 80070e0:	0030      	movs	r0, r6
 80070e2:	0039      	movs	r1, r7
 80070e4:	f7fa f98e 	bl	8001404 <__aeabi_dmul>
 80070e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80070ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80070ec:	f7f9 fa4c 	bl	8000588 <__aeabi_dadd>
 80070f0:	0006      	movs	r6, r0
 80070f2:	000f      	movs	r7, r1
 80070f4:	e78f      	b.n	8007016 <_strtod_l+0xaf6>
 80070f6:	0002      	movs	r2, r0
 80070f8:	9218      	str	r2, [sp, #96]	; 0x60
 80070fa:	9319      	str	r3, [sp, #100]	; 0x64
 80070fc:	e7dd      	b.n	80070ba <_strtod_l+0xb9a>
 80070fe:	4b11      	ldr	r3, [pc, #68]	; (8007144 <_strtod_l+0xc24>)
 8007100:	f7f9 f9aa 	bl	8000458 <__aeabi_dcmplt>
 8007104:	e7b1      	b.n	800706a <_strtod_l+0xb4a>
 8007106:	46c0      	nop			; (mov r8, r8)
 8007108:	fff00000 	.word	0xfff00000
 800710c:	000fffff 	.word	0x000fffff
 8007110:	3ff00000 	.word	0x3ff00000
 8007114:	7ff00000 	.word	0x7ff00000
 8007118:	7fe00000 	.word	0x7fe00000
 800711c:	fcb00000 	.word	0xfcb00000
 8007120:	7c9fffff 	.word	0x7c9fffff
 8007124:	7fefffff 	.word	0x7fefffff
 8007128:	3fe00000 	.word	0x3fe00000
 800712c:	bff00000 	.word	0xbff00000
 8007130:	94a03595 	.word	0x94a03595
 8007134:	3fdfffff 	.word	0x3fdfffff
 8007138:	35afe535 	.word	0x35afe535
 800713c:	ffc00000 	.word	0xffc00000
 8007140:	41dfffff 	.word	0x41dfffff
 8007144:	3fcfffff 	.word	0x3fcfffff

08007148 <_strtod_r>:
 8007148:	b510      	push	{r4, lr}
 800714a:	4b02      	ldr	r3, [pc, #8]	; (8007154 <_strtod_r+0xc>)
 800714c:	f7ff f9e8 	bl	8006520 <_strtod_l>
 8007150:	bd10      	pop	{r4, pc}
 8007152:	46c0      	nop			; (mov r8, r8)
 8007154:	20000074 	.word	0x20000074

08007158 <_strtol_l.constprop.0>:
 8007158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800715a:	b087      	sub	sp, #28
 800715c:	001e      	movs	r6, r3
 800715e:	9005      	str	r0, [sp, #20]
 8007160:	9101      	str	r1, [sp, #4]
 8007162:	9202      	str	r2, [sp, #8]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d045      	beq.n	80071f4 <_strtol_l.constprop.0+0x9c>
 8007168:	000b      	movs	r3, r1
 800716a:	2e24      	cmp	r6, #36	; 0x24
 800716c:	d842      	bhi.n	80071f4 <_strtol_l.constprop.0+0x9c>
 800716e:	4a3f      	ldr	r2, [pc, #252]	; (800726c <_strtol_l.constprop.0+0x114>)
 8007170:	2108      	movs	r1, #8
 8007172:	4694      	mov	ip, r2
 8007174:	001a      	movs	r2, r3
 8007176:	4660      	mov	r0, ip
 8007178:	7814      	ldrb	r4, [r2, #0]
 800717a:	3301      	adds	r3, #1
 800717c:	5d00      	ldrb	r0, [r0, r4]
 800717e:	001d      	movs	r5, r3
 8007180:	0007      	movs	r7, r0
 8007182:	400f      	ands	r7, r1
 8007184:	4208      	tst	r0, r1
 8007186:	d1f5      	bne.n	8007174 <_strtol_l.constprop.0+0x1c>
 8007188:	2c2d      	cmp	r4, #45	; 0x2d
 800718a:	d13a      	bne.n	8007202 <_strtol_l.constprop.0+0xaa>
 800718c:	2701      	movs	r7, #1
 800718e:	781c      	ldrb	r4, [r3, #0]
 8007190:	1c95      	adds	r5, r2, #2
 8007192:	2e00      	cmp	r6, #0
 8007194:	d065      	beq.n	8007262 <_strtol_l.constprop.0+0x10a>
 8007196:	2e10      	cmp	r6, #16
 8007198:	d109      	bne.n	80071ae <_strtol_l.constprop.0+0x56>
 800719a:	2c30      	cmp	r4, #48	; 0x30
 800719c:	d107      	bne.n	80071ae <_strtol_l.constprop.0+0x56>
 800719e:	2220      	movs	r2, #32
 80071a0:	782b      	ldrb	r3, [r5, #0]
 80071a2:	4393      	bics	r3, r2
 80071a4:	2b58      	cmp	r3, #88	; 0x58
 80071a6:	d157      	bne.n	8007258 <_strtol_l.constprop.0+0x100>
 80071a8:	2610      	movs	r6, #16
 80071aa:	786c      	ldrb	r4, [r5, #1]
 80071ac:	3502      	adds	r5, #2
 80071ae:	4b30      	ldr	r3, [pc, #192]	; (8007270 <_strtol_l.constprop.0+0x118>)
 80071b0:	0031      	movs	r1, r6
 80071b2:	18fb      	adds	r3, r7, r3
 80071b4:	0018      	movs	r0, r3
 80071b6:	9303      	str	r3, [sp, #12]
 80071b8:	f7f9 f848 	bl	800024c <__aeabi_uidivmod>
 80071bc:	2300      	movs	r3, #0
 80071be:	2201      	movs	r2, #1
 80071c0:	4684      	mov	ip, r0
 80071c2:	0018      	movs	r0, r3
 80071c4:	9104      	str	r1, [sp, #16]
 80071c6:	4252      	negs	r2, r2
 80071c8:	0021      	movs	r1, r4
 80071ca:	3930      	subs	r1, #48	; 0x30
 80071cc:	2909      	cmp	r1, #9
 80071ce:	d81d      	bhi.n	800720c <_strtol_l.constprop.0+0xb4>
 80071d0:	000c      	movs	r4, r1
 80071d2:	42a6      	cmp	r6, r4
 80071d4:	dd28      	ble.n	8007228 <_strtol_l.constprop.0+0xd0>
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	db24      	blt.n	8007224 <_strtol_l.constprop.0+0xcc>
 80071da:	0013      	movs	r3, r2
 80071dc:	4584      	cmp	ip, r0
 80071de:	d306      	bcc.n	80071ee <_strtol_l.constprop.0+0x96>
 80071e0:	d102      	bne.n	80071e8 <_strtol_l.constprop.0+0x90>
 80071e2:	9904      	ldr	r1, [sp, #16]
 80071e4:	42a1      	cmp	r1, r4
 80071e6:	db02      	blt.n	80071ee <_strtol_l.constprop.0+0x96>
 80071e8:	2301      	movs	r3, #1
 80071ea:	4370      	muls	r0, r6
 80071ec:	1820      	adds	r0, r4, r0
 80071ee:	782c      	ldrb	r4, [r5, #0]
 80071f0:	3501      	adds	r5, #1
 80071f2:	e7e9      	b.n	80071c8 <_strtol_l.constprop.0+0x70>
 80071f4:	f7fe fab0 	bl	8005758 <__errno>
 80071f8:	2316      	movs	r3, #22
 80071fa:	6003      	str	r3, [r0, #0]
 80071fc:	2000      	movs	r0, #0
 80071fe:	b007      	add	sp, #28
 8007200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007202:	2c2b      	cmp	r4, #43	; 0x2b
 8007204:	d1c5      	bne.n	8007192 <_strtol_l.constprop.0+0x3a>
 8007206:	781c      	ldrb	r4, [r3, #0]
 8007208:	1c95      	adds	r5, r2, #2
 800720a:	e7c2      	b.n	8007192 <_strtol_l.constprop.0+0x3a>
 800720c:	0021      	movs	r1, r4
 800720e:	3941      	subs	r1, #65	; 0x41
 8007210:	2919      	cmp	r1, #25
 8007212:	d801      	bhi.n	8007218 <_strtol_l.constprop.0+0xc0>
 8007214:	3c37      	subs	r4, #55	; 0x37
 8007216:	e7dc      	b.n	80071d2 <_strtol_l.constprop.0+0x7a>
 8007218:	0021      	movs	r1, r4
 800721a:	3961      	subs	r1, #97	; 0x61
 800721c:	2919      	cmp	r1, #25
 800721e:	d803      	bhi.n	8007228 <_strtol_l.constprop.0+0xd0>
 8007220:	3c57      	subs	r4, #87	; 0x57
 8007222:	e7d6      	b.n	80071d2 <_strtol_l.constprop.0+0x7a>
 8007224:	0013      	movs	r3, r2
 8007226:	e7e2      	b.n	80071ee <_strtol_l.constprop.0+0x96>
 8007228:	2b00      	cmp	r3, #0
 800722a:	da09      	bge.n	8007240 <_strtol_l.constprop.0+0xe8>
 800722c:	2322      	movs	r3, #34	; 0x22
 800722e:	9a05      	ldr	r2, [sp, #20]
 8007230:	9803      	ldr	r0, [sp, #12]
 8007232:	6013      	str	r3, [r2, #0]
 8007234:	9b02      	ldr	r3, [sp, #8]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d0e1      	beq.n	80071fe <_strtol_l.constprop.0+0xa6>
 800723a:	1e6b      	subs	r3, r5, #1
 800723c:	9301      	str	r3, [sp, #4]
 800723e:	e007      	b.n	8007250 <_strtol_l.constprop.0+0xf8>
 8007240:	2f00      	cmp	r7, #0
 8007242:	d000      	beq.n	8007246 <_strtol_l.constprop.0+0xee>
 8007244:	4240      	negs	r0, r0
 8007246:	9a02      	ldr	r2, [sp, #8]
 8007248:	2a00      	cmp	r2, #0
 800724a:	d0d8      	beq.n	80071fe <_strtol_l.constprop.0+0xa6>
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1f4      	bne.n	800723a <_strtol_l.constprop.0+0xe2>
 8007250:	9b02      	ldr	r3, [sp, #8]
 8007252:	9a01      	ldr	r2, [sp, #4]
 8007254:	601a      	str	r2, [r3, #0]
 8007256:	e7d2      	b.n	80071fe <_strtol_l.constprop.0+0xa6>
 8007258:	2430      	movs	r4, #48	; 0x30
 800725a:	2e00      	cmp	r6, #0
 800725c:	d1a7      	bne.n	80071ae <_strtol_l.constprop.0+0x56>
 800725e:	3608      	adds	r6, #8
 8007260:	e7a5      	b.n	80071ae <_strtol_l.constprop.0+0x56>
 8007262:	2c30      	cmp	r4, #48	; 0x30
 8007264:	d09b      	beq.n	800719e <_strtol_l.constprop.0+0x46>
 8007266:	260a      	movs	r6, #10
 8007268:	e7a1      	b.n	80071ae <_strtol_l.constprop.0+0x56>
 800726a:	46c0      	nop			; (mov r8, r8)
 800726c:	0800a371 	.word	0x0800a371
 8007270:	7fffffff 	.word	0x7fffffff

08007274 <_strtol_r>:
 8007274:	b510      	push	{r4, lr}
 8007276:	f7ff ff6f 	bl	8007158 <_strtol_l.constprop.0>
 800727a:	bd10      	pop	{r4, pc}

0800727c <quorem>:
 800727c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800727e:	0006      	movs	r6, r0
 8007280:	690b      	ldr	r3, [r1, #16]
 8007282:	6932      	ldr	r2, [r6, #16]
 8007284:	b087      	sub	sp, #28
 8007286:	2000      	movs	r0, #0
 8007288:	9103      	str	r1, [sp, #12]
 800728a:	429a      	cmp	r2, r3
 800728c:	db65      	blt.n	800735a <quorem+0xde>
 800728e:	3b01      	subs	r3, #1
 8007290:	009c      	lsls	r4, r3, #2
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	000b      	movs	r3, r1
 8007296:	3314      	adds	r3, #20
 8007298:	9305      	str	r3, [sp, #20]
 800729a:	191b      	adds	r3, r3, r4
 800729c:	9304      	str	r3, [sp, #16]
 800729e:	0033      	movs	r3, r6
 80072a0:	3314      	adds	r3, #20
 80072a2:	9302      	str	r3, [sp, #8]
 80072a4:	191c      	adds	r4, r3, r4
 80072a6:	9b04      	ldr	r3, [sp, #16]
 80072a8:	6827      	ldr	r7, [r4, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	0038      	movs	r0, r7
 80072ae:	1c5d      	adds	r5, r3, #1
 80072b0:	0029      	movs	r1, r5
 80072b2:	9301      	str	r3, [sp, #4]
 80072b4:	f7f8 ff44 	bl	8000140 <__udivsi3>
 80072b8:	9001      	str	r0, [sp, #4]
 80072ba:	42af      	cmp	r7, r5
 80072bc:	d324      	bcc.n	8007308 <quorem+0x8c>
 80072be:	2500      	movs	r5, #0
 80072c0:	46ac      	mov	ip, r5
 80072c2:	9802      	ldr	r0, [sp, #8]
 80072c4:	9f05      	ldr	r7, [sp, #20]
 80072c6:	cf08      	ldmia	r7!, {r3}
 80072c8:	9a01      	ldr	r2, [sp, #4]
 80072ca:	b299      	uxth	r1, r3
 80072cc:	4351      	muls	r1, r2
 80072ce:	0c1b      	lsrs	r3, r3, #16
 80072d0:	4353      	muls	r3, r2
 80072d2:	1949      	adds	r1, r1, r5
 80072d4:	0c0a      	lsrs	r2, r1, #16
 80072d6:	189b      	adds	r3, r3, r2
 80072d8:	6802      	ldr	r2, [r0, #0]
 80072da:	b289      	uxth	r1, r1
 80072dc:	b292      	uxth	r2, r2
 80072de:	4462      	add	r2, ip
 80072e0:	1a52      	subs	r2, r2, r1
 80072e2:	6801      	ldr	r1, [r0, #0]
 80072e4:	0c1d      	lsrs	r5, r3, #16
 80072e6:	0c09      	lsrs	r1, r1, #16
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	1acb      	subs	r3, r1, r3
 80072ec:	1411      	asrs	r1, r2, #16
 80072ee:	185b      	adds	r3, r3, r1
 80072f0:	1419      	asrs	r1, r3, #16
 80072f2:	b292      	uxth	r2, r2
 80072f4:	041b      	lsls	r3, r3, #16
 80072f6:	431a      	orrs	r2, r3
 80072f8:	9b04      	ldr	r3, [sp, #16]
 80072fa:	468c      	mov	ip, r1
 80072fc:	c004      	stmia	r0!, {r2}
 80072fe:	42bb      	cmp	r3, r7
 8007300:	d2e1      	bcs.n	80072c6 <quorem+0x4a>
 8007302:	6823      	ldr	r3, [r4, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d030      	beq.n	800736a <quorem+0xee>
 8007308:	0030      	movs	r0, r6
 800730a:	9903      	ldr	r1, [sp, #12]
 800730c:	f001 fcd4 	bl	8008cb8 <__mcmp>
 8007310:	2800      	cmp	r0, #0
 8007312:	db21      	blt.n	8007358 <quorem+0xdc>
 8007314:	0030      	movs	r0, r6
 8007316:	2400      	movs	r4, #0
 8007318:	9b01      	ldr	r3, [sp, #4]
 800731a:	9903      	ldr	r1, [sp, #12]
 800731c:	3301      	adds	r3, #1
 800731e:	9301      	str	r3, [sp, #4]
 8007320:	3014      	adds	r0, #20
 8007322:	3114      	adds	r1, #20
 8007324:	6803      	ldr	r3, [r0, #0]
 8007326:	c920      	ldmia	r1!, {r5}
 8007328:	b29a      	uxth	r2, r3
 800732a:	1914      	adds	r4, r2, r4
 800732c:	b2aa      	uxth	r2, r5
 800732e:	1aa2      	subs	r2, r4, r2
 8007330:	0c1b      	lsrs	r3, r3, #16
 8007332:	0c2d      	lsrs	r5, r5, #16
 8007334:	1414      	asrs	r4, r2, #16
 8007336:	1b5b      	subs	r3, r3, r5
 8007338:	191b      	adds	r3, r3, r4
 800733a:	141c      	asrs	r4, r3, #16
 800733c:	b292      	uxth	r2, r2
 800733e:	041b      	lsls	r3, r3, #16
 8007340:	4313      	orrs	r3, r2
 8007342:	c008      	stmia	r0!, {r3}
 8007344:	9b04      	ldr	r3, [sp, #16]
 8007346:	428b      	cmp	r3, r1
 8007348:	d2ec      	bcs.n	8007324 <quorem+0xa8>
 800734a:	9b00      	ldr	r3, [sp, #0]
 800734c:	9a02      	ldr	r2, [sp, #8]
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	18d3      	adds	r3, r2, r3
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	2a00      	cmp	r2, #0
 8007356:	d015      	beq.n	8007384 <quorem+0x108>
 8007358:	9801      	ldr	r0, [sp, #4]
 800735a:	b007      	add	sp, #28
 800735c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800735e:	6823      	ldr	r3, [r4, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d106      	bne.n	8007372 <quorem+0xf6>
 8007364:	9b00      	ldr	r3, [sp, #0]
 8007366:	3b01      	subs	r3, #1
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	9b02      	ldr	r3, [sp, #8]
 800736c:	3c04      	subs	r4, #4
 800736e:	42a3      	cmp	r3, r4
 8007370:	d3f5      	bcc.n	800735e <quorem+0xe2>
 8007372:	9b00      	ldr	r3, [sp, #0]
 8007374:	6133      	str	r3, [r6, #16]
 8007376:	e7c7      	b.n	8007308 <quorem+0x8c>
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	2a00      	cmp	r2, #0
 800737c:	d106      	bne.n	800738c <quorem+0x110>
 800737e:	9a00      	ldr	r2, [sp, #0]
 8007380:	3a01      	subs	r2, #1
 8007382:	9200      	str	r2, [sp, #0]
 8007384:	9a02      	ldr	r2, [sp, #8]
 8007386:	3b04      	subs	r3, #4
 8007388:	429a      	cmp	r2, r3
 800738a:	d3f5      	bcc.n	8007378 <quorem+0xfc>
 800738c:	9b00      	ldr	r3, [sp, #0]
 800738e:	6133      	str	r3, [r6, #16]
 8007390:	e7e2      	b.n	8007358 <quorem+0xdc>
	...

08007394 <_dtoa_r>:
 8007394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007396:	b09d      	sub	sp, #116	; 0x74
 8007398:	9202      	str	r2, [sp, #8]
 800739a:	9303      	str	r3, [sp, #12]
 800739c:	9b02      	ldr	r3, [sp, #8]
 800739e:	9c03      	ldr	r4, [sp, #12]
 80073a0:	9308      	str	r3, [sp, #32]
 80073a2:	9409      	str	r4, [sp, #36]	; 0x24
 80073a4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80073a6:	0007      	movs	r7, r0
 80073a8:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80073aa:	2c00      	cmp	r4, #0
 80073ac:	d10e      	bne.n	80073cc <_dtoa_r+0x38>
 80073ae:	2010      	movs	r0, #16
 80073b0:	f001 f982 	bl	80086b8 <malloc>
 80073b4:	1e02      	subs	r2, r0, #0
 80073b6:	6278      	str	r0, [r7, #36]	; 0x24
 80073b8:	d104      	bne.n	80073c4 <_dtoa_r+0x30>
 80073ba:	21ea      	movs	r1, #234	; 0xea
 80073bc:	4bc7      	ldr	r3, [pc, #796]	; (80076dc <_dtoa_r+0x348>)
 80073be:	48c8      	ldr	r0, [pc, #800]	; (80076e0 <_dtoa_r+0x34c>)
 80073c0:	f002 f91c 	bl	80095fc <__assert_func>
 80073c4:	6044      	str	r4, [r0, #4]
 80073c6:	6084      	str	r4, [r0, #8]
 80073c8:	6004      	str	r4, [r0, #0]
 80073ca:	60c4      	str	r4, [r0, #12]
 80073cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ce:	6819      	ldr	r1, [r3, #0]
 80073d0:	2900      	cmp	r1, #0
 80073d2:	d00a      	beq.n	80073ea <_dtoa_r+0x56>
 80073d4:	685a      	ldr	r2, [r3, #4]
 80073d6:	2301      	movs	r3, #1
 80073d8:	4093      	lsls	r3, r2
 80073da:	604a      	str	r2, [r1, #4]
 80073dc:	608b      	str	r3, [r1, #8]
 80073de:	0038      	movs	r0, r7
 80073e0:	f001 f9de 	bl	80087a0 <_Bfree>
 80073e4:	2200      	movs	r2, #0
 80073e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e8:	601a      	str	r2, [r3, #0]
 80073ea:	9b03      	ldr	r3, [sp, #12]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	da20      	bge.n	8007432 <_dtoa_r+0x9e>
 80073f0:	2301      	movs	r3, #1
 80073f2:	602b      	str	r3, [r5, #0]
 80073f4:	9b03      	ldr	r3, [sp, #12]
 80073f6:	005b      	lsls	r3, r3, #1
 80073f8:	085b      	lsrs	r3, r3, #1
 80073fa:	9309      	str	r3, [sp, #36]	; 0x24
 80073fc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80073fe:	4bb9      	ldr	r3, [pc, #740]	; (80076e4 <_dtoa_r+0x350>)
 8007400:	4ab8      	ldr	r2, [pc, #736]	; (80076e4 <_dtoa_r+0x350>)
 8007402:	402b      	ands	r3, r5
 8007404:	4293      	cmp	r3, r2
 8007406:	d117      	bne.n	8007438 <_dtoa_r+0xa4>
 8007408:	4bb7      	ldr	r3, [pc, #732]	; (80076e8 <_dtoa_r+0x354>)
 800740a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800740c:	0328      	lsls	r0, r5, #12
 800740e:	6013      	str	r3, [r2, #0]
 8007410:	9b02      	ldr	r3, [sp, #8]
 8007412:	0b00      	lsrs	r0, r0, #12
 8007414:	4318      	orrs	r0, r3
 8007416:	d101      	bne.n	800741c <_dtoa_r+0x88>
 8007418:	f000 fdbf 	bl	8007f9a <_dtoa_r+0xc06>
 800741c:	48b3      	ldr	r0, [pc, #716]	; (80076ec <_dtoa_r+0x358>)
 800741e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007420:	9006      	str	r0, [sp, #24]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d002      	beq.n	800742c <_dtoa_r+0x98>
 8007426:	4bb2      	ldr	r3, [pc, #712]	; (80076f0 <_dtoa_r+0x35c>)
 8007428:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800742a:	6013      	str	r3, [r2, #0]
 800742c:	9806      	ldr	r0, [sp, #24]
 800742e:	b01d      	add	sp, #116	; 0x74
 8007430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007432:	2300      	movs	r3, #0
 8007434:	602b      	str	r3, [r5, #0]
 8007436:	e7e1      	b.n	80073fc <_dtoa_r+0x68>
 8007438:	9b08      	ldr	r3, [sp, #32]
 800743a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800743c:	9312      	str	r3, [sp, #72]	; 0x48
 800743e:	9413      	str	r4, [sp, #76]	; 0x4c
 8007440:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007442:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007444:	2200      	movs	r2, #0
 8007446:	2300      	movs	r3, #0
 8007448:	f7f9 f800 	bl	800044c <__aeabi_dcmpeq>
 800744c:	1e04      	subs	r4, r0, #0
 800744e:	d009      	beq.n	8007464 <_dtoa_r+0xd0>
 8007450:	2301      	movs	r3, #1
 8007452:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007454:	6013      	str	r3, [r2, #0]
 8007456:	4ba7      	ldr	r3, [pc, #668]	; (80076f4 <_dtoa_r+0x360>)
 8007458:	9306      	str	r3, [sp, #24]
 800745a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800745c:	2b00      	cmp	r3, #0
 800745e:	d0e5      	beq.n	800742c <_dtoa_r+0x98>
 8007460:	4ba5      	ldr	r3, [pc, #660]	; (80076f8 <_dtoa_r+0x364>)
 8007462:	e7e1      	b.n	8007428 <_dtoa_r+0x94>
 8007464:	ab1a      	add	r3, sp, #104	; 0x68
 8007466:	9301      	str	r3, [sp, #4]
 8007468:	ab1b      	add	r3, sp, #108	; 0x6c
 800746a:	9300      	str	r3, [sp, #0]
 800746c:	0038      	movs	r0, r7
 800746e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007470:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007472:	f001 fd49 	bl	8008f08 <__d2b>
 8007476:	006e      	lsls	r6, r5, #1
 8007478:	9005      	str	r0, [sp, #20]
 800747a:	0d76      	lsrs	r6, r6, #21
 800747c:	d100      	bne.n	8007480 <_dtoa_r+0xec>
 800747e:	e07c      	b.n	800757a <_dtoa_r+0x1e6>
 8007480:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007482:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007484:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007486:	4a9d      	ldr	r2, [pc, #628]	; (80076fc <_dtoa_r+0x368>)
 8007488:	031b      	lsls	r3, r3, #12
 800748a:	0b1b      	lsrs	r3, r3, #12
 800748c:	431a      	orrs	r2, r3
 800748e:	0011      	movs	r1, r2
 8007490:	4b9b      	ldr	r3, [pc, #620]	; (8007700 <_dtoa_r+0x36c>)
 8007492:	9418      	str	r4, [sp, #96]	; 0x60
 8007494:	18f6      	adds	r6, r6, r3
 8007496:	2200      	movs	r2, #0
 8007498:	4b9a      	ldr	r3, [pc, #616]	; (8007704 <_dtoa_r+0x370>)
 800749a:	f7fa fa1f 	bl	80018dc <__aeabi_dsub>
 800749e:	4a9a      	ldr	r2, [pc, #616]	; (8007708 <_dtoa_r+0x374>)
 80074a0:	4b9a      	ldr	r3, [pc, #616]	; (800770c <_dtoa_r+0x378>)
 80074a2:	f7f9 ffaf 	bl	8001404 <__aeabi_dmul>
 80074a6:	4a9a      	ldr	r2, [pc, #616]	; (8007710 <_dtoa_r+0x37c>)
 80074a8:	4b9a      	ldr	r3, [pc, #616]	; (8007714 <_dtoa_r+0x380>)
 80074aa:	f7f9 f86d 	bl	8000588 <__aeabi_dadd>
 80074ae:	0004      	movs	r4, r0
 80074b0:	0030      	movs	r0, r6
 80074b2:	000d      	movs	r5, r1
 80074b4:	f7fa fdf8 	bl	80020a8 <__aeabi_i2d>
 80074b8:	4a97      	ldr	r2, [pc, #604]	; (8007718 <_dtoa_r+0x384>)
 80074ba:	4b98      	ldr	r3, [pc, #608]	; (800771c <_dtoa_r+0x388>)
 80074bc:	f7f9 ffa2 	bl	8001404 <__aeabi_dmul>
 80074c0:	0002      	movs	r2, r0
 80074c2:	000b      	movs	r3, r1
 80074c4:	0020      	movs	r0, r4
 80074c6:	0029      	movs	r1, r5
 80074c8:	f7f9 f85e 	bl	8000588 <__aeabi_dadd>
 80074cc:	0004      	movs	r4, r0
 80074ce:	000d      	movs	r5, r1
 80074d0:	f7fa fdb4 	bl	800203c <__aeabi_d2iz>
 80074d4:	2200      	movs	r2, #0
 80074d6:	9002      	str	r0, [sp, #8]
 80074d8:	2300      	movs	r3, #0
 80074da:	0020      	movs	r0, r4
 80074dc:	0029      	movs	r1, r5
 80074de:	f7f8 ffbb 	bl	8000458 <__aeabi_dcmplt>
 80074e2:	2800      	cmp	r0, #0
 80074e4:	d00b      	beq.n	80074fe <_dtoa_r+0x16a>
 80074e6:	9802      	ldr	r0, [sp, #8]
 80074e8:	f7fa fdde 	bl	80020a8 <__aeabi_i2d>
 80074ec:	002b      	movs	r3, r5
 80074ee:	0022      	movs	r2, r4
 80074f0:	f7f8 ffac 	bl	800044c <__aeabi_dcmpeq>
 80074f4:	4243      	negs	r3, r0
 80074f6:	4158      	adcs	r0, r3
 80074f8:	9b02      	ldr	r3, [sp, #8]
 80074fa:	1a1b      	subs	r3, r3, r0
 80074fc:	9302      	str	r3, [sp, #8]
 80074fe:	2301      	movs	r3, #1
 8007500:	9316      	str	r3, [sp, #88]	; 0x58
 8007502:	9b02      	ldr	r3, [sp, #8]
 8007504:	2b16      	cmp	r3, #22
 8007506:	d80f      	bhi.n	8007528 <_dtoa_r+0x194>
 8007508:	9812      	ldr	r0, [sp, #72]	; 0x48
 800750a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800750c:	00da      	lsls	r2, r3, #3
 800750e:	4b84      	ldr	r3, [pc, #528]	; (8007720 <_dtoa_r+0x38c>)
 8007510:	189b      	adds	r3, r3, r2
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	f7f8 ff9f 	bl	8000458 <__aeabi_dcmplt>
 800751a:	2800      	cmp	r0, #0
 800751c:	d049      	beq.n	80075b2 <_dtoa_r+0x21e>
 800751e:	9b02      	ldr	r3, [sp, #8]
 8007520:	3b01      	subs	r3, #1
 8007522:	9302      	str	r3, [sp, #8]
 8007524:	2300      	movs	r3, #0
 8007526:	9316      	str	r3, [sp, #88]	; 0x58
 8007528:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800752a:	1b9e      	subs	r6, r3, r6
 800752c:	2300      	movs	r3, #0
 800752e:	930a      	str	r3, [sp, #40]	; 0x28
 8007530:	0033      	movs	r3, r6
 8007532:	3b01      	subs	r3, #1
 8007534:	930d      	str	r3, [sp, #52]	; 0x34
 8007536:	d504      	bpl.n	8007542 <_dtoa_r+0x1ae>
 8007538:	2301      	movs	r3, #1
 800753a:	1b9b      	subs	r3, r3, r6
 800753c:	930a      	str	r3, [sp, #40]	; 0x28
 800753e:	2300      	movs	r3, #0
 8007540:	930d      	str	r3, [sp, #52]	; 0x34
 8007542:	9b02      	ldr	r3, [sp, #8]
 8007544:	2b00      	cmp	r3, #0
 8007546:	db36      	blt.n	80075b6 <_dtoa_r+0x222>
 8007548:	9a02      	ldr	r2, [sp, #8]
 800754a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800754c:	4694      	mov	ip, r2
 800754e:	4463      	add	r3, ip
 8007550:	930d      	str	r3, [sp, #52]	; 0x34
 8007552:	2300      	movs	r3, #0
 8007554:	9215      	str	r2, [sp, #84]	; 0x54
 8007556:	930e      	str	r3, [sp, #56]	; 0x38
 8007558:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800755a:	2401      	movs	r4, #1
 800755c:	2b09      	cmp	r3, #9
 800755e:	d864      	bhi.n	800762a <_dtoa_r+0x296>
 8007560:	2b05      	cmp	r3, #5
 8007562:	dd02      	ble.n	800756a <_dtoa_r+0x1d6>
 8007564:	2400      	movs	r4, #0
 8007566:	3b04      	subs	r3, #4
 8007568:	9322      	str	r3, [sp, #136]	; 0x88
 800756a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800756c:	1e98      	subs	r0, r3, #2
 800756e:	2803      	cmp	r0, #3
 8007570:	d864      	bhi.n	800763c <_dtoa_r+0x2a8>
 8007572:	f7f8 fdd1 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007576:	3829      	.short	0x3829
 8007578:	5836      	.short	0x5836
 800757a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800757c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800757e:	189e      	adds	r6, r3, r2
 8007580:	4b68      	ldr	r3, [pc, #416]	; (8007724 <_dtoa_r+0x390>)
 8007582:	18f2      	adds	r2, r6, r3
 8007584:	2a20      	cmp	r2, #32
 8007586:	dd0f      	ble.n	80075a8 <_dtoa_r+0x214>
 8007588:	2340      	movs	r3, #64	; 0x40
 800758a:	1a9b      	subs	r3, r3, r2
 800758c:	409d      	lsls	r5, r3
 800758e:	4b66      	ldr	r3, [pc, #408]	; (8007728 <_dtoa_r+0x394>)
 8007590:	9802      	ldr	r0, [sp, #8]
 8007592:	18f3      	adds	r3, r6, r3
 8007594:	40d8      	lsrs	r0, r3
 8007596:	4328      	orrs	r0, r5
 8007598:	f7fa fdb6 	bl	8002108 <__aeabi_ui2d>
 800759c:	2301      	movs	r3, #1
 800759e:	4c63      	ldr	r4, [pc, #396]	; (800772c <_dtoa_r+0x398>)
 80075a0:	3e01      	subs	r6, #1
 80075a2:	1909      	adds	r1, r1, r4
 80075a4:	9318      	str	r3, [sp, #96]	; 0x60
 80075a6:	e776      	b.n	8007496 <_dtoa_r+0x102>
 80075a8:	2320      	movs	r3, #32
 80075aa:	9802      	ldr	r0, [sp, #8]
 80075ac:	1a9b      	subs	r3, r3, r2
 80075ae:	4098      	lsls	r0, r3
 80075b0:	e7f2      	b.n	8007598 <_dtoa_r+0x204>
 80075b2:	9016      	str	r0, [sp, #88]	; 0x58
 80075b4:	e7b8      	b.n	8007528 <_dtoa_r+0x194>
 80075b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075b8:	9a02      	ldr	r2, [sp, #8]
 80075ba:	1a9b      	subs	r3, r3, r2
 80075bc:	930a      	str	r3, [sp, #40]	; 0x28
 80075be:	4253      	negs	r3, r2
 80075c0:	930e      	str	r3, [sp, #56]	; 0x38
 80075c2:	2300      	movs	r3, #0
 80075c4:	9315      	str	r3, [sp, #84]	; 0x54
 80075c6:	e7c7      	b.n	8007558 <_dtoa_r+0x1c4>
 80075c8:	2300      	movs	r3, #0
 80075ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80075cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80075ce:	930c      	str	r3, [sp, #48]	; 0x30
 80075d0:	9307      	str	r3, [sp, #28]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	dc13      	bgt.n	80075fe <_dtoa_r+0x26a>
 80075d6:	2301      	movs	r3, #1
 80075d8:	001a      	movs	r2, r3
 80075da:	930c      	str	r3, [sp, #48]	; 0x30
 80075dc:	9307      	str	r3, [sp, #28]
 80075de:	9223      	str	r2, [sp, #140]	; 0x8c
 80075e0:	e00d      	b.n	80075fe <_dtoa_r+0x26a>
 80075e2:	2301      	movs	r3, #1
 80075e4:	e7f1      	b.n	80075ca <_dtoa_r+0x236>
 80075e6:	2300      	movs	r3, #0
 80075e8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80075ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80075ec:	4694      	mov	ip, r2
 80075ee:	9b02      	ldr	r3, [sp, #8]
 80075f0:	4463      	add	r3, ip
 80075f2:	930c      	str	r3, [sp, #48]	; 0x30
 80075f4:	3301      	adds	r3, #1
 80075f6:	9307      	str	r3, [sp, #28]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	dc00      	bgt.n	80075fe <_dtoa_r+0x26a>
 80075fc:	2301      	movs	r3, #1
 80075fe:	2200      	movs	r2, #0
 8007600:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007602:	6042      	str	r2, [r0, #4]
 8007604:	3204      	adds	r2, #4
 8007606:	0015      	movs	r5, r2
 8007608:	3514      	adds	r5, #20
 800760a:	6841      	ldr	r1, [r0, #4]
 800760c:	429d      	cmp	r5, r3
 800760e:	d919      	bls.n	8007644 <_dtoa_r+0x2b0>
 8007610:	0038      	movs	r0, r7
 8007612:	f001 f881 	bl	8008718 <_Balloc>
 8007616:	9006      	str	r0, [sp, #24]
 8007618:	2800      	cmp	r0, #0
 800761a:	d117      	bne.n	800764c <_dtoa_r+0x2b8>
 800761c:	21d5      	movs	r1, #213	; 0xd5
 800761e:	0002      	movs	r2, r0
 8007620:	4b43      	ldr	r3, [pc, #268]	; (8007730 <_dtoa_r+0x39c>)
 8007622:	0049      	lsls	r1, r1, #1
 8007624:	e6cb      	b.n	80073be <_dtoa_r+0x2a>
 8007626:	2301      	movs	r3, #1
 8007628:	e7de      	b.n	80075e8 <_dtoa_r+0x254>
 800762a:	2300      	movs	r3, #0
 800762c:	940f      	str	r4, [sp, #60]	; 0x3c
 800762e:	9322      	str	r3, [sp, #136]	; 0x88
 8007630:	3b01      	subs	r3, #1
 8007632:	930c      	str	r3, [sp, #48]	; 0x30
 8007634:	9307      	str	r3, [sp, #28]
 8007636:	2200      	movs	r2, #0
 8007638:	3313      	adds	r3, #19
 800763a:	e7d0      	b.n	80075de <_dtoa_r+0x24a>
 800763c:	2301      	movs	r3, #1
 800763e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007640:	3b02      	subs	r3, #2
 8007642:	e7f6      	b.n	8007632 <_dtoa_r+0x29e>
 8007644:	3101      	adds	r1, #1
 8007646:	6041      	str	r1, [r0, #4]
 8007648:	0052      	lsls	r2, r2, #1
 800764a:	e7dc      	b.n	8007606 <_dtoa_r+0x272>
 800764c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764e:	9a06      	ldr	r2, [sp, #24]
 8007650:	601a      	str	r2, [r3, #0]
 8007652:	9b07      	ldr	r3, [sp, #28]
 8007654:	2b0e      	cmp	r3, #14
 8007656:	d900      	bls.n	800765a <_dtoa_r+0x2c6>
 8007658:	e0eb      	b.n	8007832 <_dtoa_r+0x49e>
 800765a:	2c00      	cmp	r4, #0
 800765c:	d100      	bne.n	8007660 <_dtoa_r+0x2cc>
 800765e:	e0e8      	b.n	8007832 <_dtoa_r+0x49e>
 8007660:	9b02      	ldr	r3, [sp, #8]
 8007662:	2b00      	cmp	r3, #0
 8007664:	dd68      	ble.n	8007738 <_dtoa_r+0x3a4>
 8007666:	001a      	movs	r2, r3
 8007668:	210f      	movs	r1, #15
 800766a:	4b2d      	ldr	r3, [pc, #180]	; (8007720 <_dtoa_r+0x38c>)
 800766c:	400a      	ands	r2, r1
 800766e:	00d2      	lsls	r2, r2, #3
 8007670:	189b      	adds	r3, r3, r2
 8007672:	681d      	ldr	r5, [r3, #0]
 8007674:	685e      	ldr	r6, [r3, #4]
 8007676:	9b02      	ldr	r3, [sp, #8]
 8007678:	111c      	asrs	r4, r3, #4
 800767a:	2302      	movs	r3, #2
 800767c:	9310      	str	r3, [sp, #64]	; 0x40
 800767e:	9b02      	ldr	r3, [sp, #8]
 8007680:	05db      	lsls	r3, r3, #23
 8007682:	d50b      	bpl.n	800769c <_dtoa_r+0x308>
 8007684:	4b2b      	ldr	r3, [pc, #172]	; (8007734 <_dtoa_r+0x3a0>)
 8007686:	400c      	ands	r4, r1
 8007688:	6a1a      	ldr	r2, [r3, #32]
 800768a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800768e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007690:	f7f9 fab6 	bl	8000c00 <__aeabi_ddiv>
 8007694:	2303      	movs	r3, #3
 8007696:	9008      	str	r0, [sp, #32]
 8007698:	9109      	str	r1, [sp, #36]	; 0x24
 800769a:	9310      	str	r3, [sp, #64]	; 0x40
 800769c:	4b25      	ldr	r3, [pc, #148]	; (8007734 <_dtoa_r+0x3a0>)
 800769e:	9314      	str	r3, [sp, #80]	; 0x50
 80076a0:	2c00      	cmp	r4, #0
 80076a2:	d108      	bne.n	80076b6 <_dtoa_r+0x322>
 80076a4:	9808      	ldr	r0, [sp, #32]
 80076a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076a8:	002a      	movs	r2, r5
 80076aa:	0033      	movs	r3, r6
 80076ac:	f7f9 faa8 	bl	8000c00 <__aeabi_ddiv>
 80076b0:	9008      	str	r0, [sp, #32]
 80076b2:	9109      	str	r1, [sp, #36]	; 0x24
 80076b4:	e05c      	b.n	8007770 <_dtoa_r+0x3dc>
 80076b6:	2301      	movs	r3, #1
 80076b8:	421c      	tst	r4, r3
 80076ba:	d00b      	beq.n	80076d4 <_dtoa_r+0x340>
 80076bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80076be:	0028      	movs	r0, r5
 80076c0:	3301      	adds	r3, #1
 80076c2:	9310      	str	r3, [sp, #64]	; 0x40
 80076c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80076c6:	0031      	movs	r1, r6
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	f7f9 fe9a 	bl	8001404 <__aeabi_dmul>
 80076d0:	0005      	movs	r5, r0
 80076d2:	000e      	movs	r6, r1
 80076d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80076d6:	1064      	asrs	r4, r4, #1
 80076d8:	3308      	adds	r3, #8
 80076da:	e7e0      	b.n	800769e <_dtoa_r+0x30a>
 80076dc:	0800a47e 	.word	0x0800a47e
 80076e0:	0800a495 	.word	0x0800a495
 80076e4:	7ff00000 	.word	0x7ff00000
 80076e8:	0000270f 	.word	0x0000270f
 80076ec:	0800a47a 	.word	0x0800a47a
 80076f0:	0800a47d 	.word	0x0800a47d
 80076f4:	0800a2f4 	.word	0x0800a2f4
 80076f8:	0800a2f5 	.word	0x0800a2f5
 80076fc:	3ff00000 	.word	0x3ff00000
 8007700:	fffffc01 	.word	0xfffffc01
 8007704:	3ff80000 	.word	0x3ff80000
 8007708:	636f4361 	.word	0x636f4361
 800770c:	3fd287a7 	.word	0x3fd287a7
 8007710:	8b60c8b3 	.word	0x8b60c8b3
 8007714:	3fc68a28 	.word	0x3fc68a28
 8007718:	509f79fb 	.word	0x509f79fb
 800771c:	3fd34413 	.word	0x3fd34413
 8007720:	0800a600 	.word	0x0800a600
 8007724:	00000432 	.word	0x00000432
 8007728:	00000412 	.word	0x00000412
 800772c:	fe100000 	.word	0xfe100000
 8007730:	0800a4f0 	.word	0x0800a4f0
 8007734:	0800a5d8 	.word	0x0800a5d8
 8007738:	2302      	movs	r3, #2
 800773a:	9310      	str	r3, [sp, #64]	; 0x40
 800773c:	9b02      	ldr	r3, [sp, #8]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d016      	beq.n	8007770 <_dtoa_r+0x3dc>
 8007742:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007744:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007746:	425c      	negs	r4, r3
 8007748:	230f      	movs	r3, #15
 800774a:	4ab6      	ldr	r2, [pc, #728]	; (8007a24 <_dtoa_r+0x690>)
 800774c:	4023      	ands	r3, r4
 800774e:	00db      	lsls	r3, r3, #3
 8007750:	18d3      	adds	r3, r2, r3
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	f7f9 fe55 	bl	8001404 <__aeabi_dmul>
 800775a:	2601      	movs	r6, #1
 800775c:	2300      	movs	r3, #0
 800775e:	9008      	str	r0, [sp, #32]
 8007760:	9109      	str	r1, [sp, #36]	; 0x24
 8007762:	4db1      	ldr	r5, [pc, #708]	; (8007a28 <_dtoa_r+0x694>)
 8007764:	1124      	asrs	r4, r4, #4
 8007766:	2c00      	cmp	r4, #0
 8007768:	d000      	beq.n	800776c <_dtoa_r+0x3d8>
 800776a:	e094      	b.n	8007896 <_dtoa_r+0x502>
 800776c:	2b00      	cmp	r3, #0
 800776e:	d19f      	bne.n	80076b0 <_dtoa_r+0x31c>
 8007770:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007772:	2b00      	cmp	r3, #0
 8007774:	d100      	bne.n	8007778 <_dtoa_r+0x3e4>
 8007776:	e09b      	b.n	80078b0 <_dtoa_r+0x51c>
 8007778:	9c08      	ldr	r4, [sp, #32]
 800777a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800777c:	2200      	movs	r2, #0
 800777e:	0020      	movs	r0, r4
 8007780:	0029      	movs	r1, r5
 8007782:	4baa      	ldr	r3, [pc, #680]	; (8007a2c <_dtoa_r+0x698>)
 8007784:	f7f8 fe68 	bl	8000458 <__aeabi_dcmplt>
 8007788:	2800      	cmp	r0, #0
 800778a:	d100      	bne.n	800778e <_dtoa_r+0x3fa>
 800778c:	e090      	b.n	80078b0 <_dtoa_r+0x51c>
 800778e:	9b07      	ldr	r3, [sp, #28]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d100      	bne.n	8007796 <_dtoa_r+0x402>
 8007794:	e08c      	b.n	80078b0 <_dtoa_r+0x51c>
 8007796:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007798:	2b00      	cmp	r3, #0
 800779a:	dd46      	ble.n	800782a <_dtoa_r+0x496>
 800779c:	9b02      	ldr	r3, [sp, #8]
 800779e:	2200      	movs	r2, #0
 80077a0:	0020      	movs	r0, r4
 80077a2:	0029      	movs	r1, r5
 80077a4:	1e5e      	subs	r6, r3, #1
 80077a6:	4ba2      	ldr	r3, [pc, #648]	; (8007a30 <_dtoa_r+0x69c>)
 80077a8:	f7f9 fe2c 	bl	8001404 <__aeabi_dmul>
 80077ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80077ae:	9008      	str	r0, [sp, #32]
 80077b0:	9109      	str	r1, [sp, #36]	; 0x24
 80077b2:	3301      	adds	r3, #1
 80077b4:	9310      	str	r3, [sp, #64]	; 0x40
 80077b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077b8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80077ba:	9c08      	ldr	r4, [sp, #32]
 80077bc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80077be:	9314      	str	r3, [sp, #80]	; 0x50
 80077c0:	f7fa fc72 	bl	80020a8 <__aeabi_i2d>
 80077c4:	0022      	movs	r2, r4
 80077c6:	002b      	movs	r3, r5
 80077c8:	f7f9 fe1c 	bl	8001404 <__aeabi_dmul>
 80077cc:	2200      	movs	r2, #0
 80077ce:	4b99      	ldr	r3, [pc, #612]	; (8007a34 <_dtoa_r+0x6a0>)
 80077d0:	f7f8 feda 	bl	8000588 <__aeabi_dadd>
 80077d4:	9010      	str	r0, [sp, #64]	; 0x40
 80077d6:	9111      	str	r1, [sp, #68]	; 0x44
 80077d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80077da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80077dc:	9208      	str	r2, [sp, #32]
 80077de:	9309      	str	r3, [sp, #36]	; 0x24
 80077e0:	4a95      	ldr	r2, [pc, #596]	; (8007a38 <_dtoa_r+0x6a4>)
 80077e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80077e4:	4694      	mov	ip, r2
 80077e6:	4463      	add	r3, ip
 80077e8:	9317      	str	r3, [sp, #92]	; 0x5c
 80077ea:	9309      	str	r3, [sp, #36]	; 0x24
 80077ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d161      	bne.n	80078b6 <_dtoa_r+0x522>
 80077f2:	2200      	movs	r2, #0
 80077f4:	0020      	movs	r0, r4
 80077f6:	0029      	movs	r1, r5
 80077f8:	4b90      	ldr	r3, [pc, #576]	; (8007a3c <_dtoa_r+0x6a8>)
 80077fa:	f7fa f86f 	bl	80018dc <__aeabi_dsub>
 80077fe:	9a08      	ldr	r2, [sp, #32]
 8007800:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007802:	0004      	movs	r4, r0
 8007804:	000d      	movs	r5, r1
 8007806:	f7f8 fe3b 	bl	8000480 <__aeabi_dcmpgt>
 800780a:	2800      	cmp	r0, #0
 800780c:	d000      	beq.n	8007810 <_dtoa_r+0x47c>
 800780e:	e2af      	b.n	8007d70 <_dtoa_r+0x9dc>
 8007810:	488b      	ldr	r0, [pc, #556]	; (8007a40 <_dtoa_r+0x6ac>)
 8007812:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007814:	4684      	mov	ip, r0
 8007816:	4461      	add	r1, ip
 8007818:	000b      	movs	r3, r1
 800781a:	0020      	movs	r0, r4
 800781c:	0029      	movs	r1, r5
 800781e:	9a08      	ldr	r2, [sp, #32]
 8007820:	f7f8 fe1a 	bl	8000458 <__aeabi_dcmplt>
 8007824:	2800      	cmp	r0, #0
 8007826:	d000      	beq.n	800782a <_dtoa_r+0x496>
 8007828:	e29f      	b.n	8007d6a <_dtoa_r+0x9d6>
 800782a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800782c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800782e:	9308      	str	r3, [sp, #32]
 8007830:	9409      	str	r4, [sp, #36]	; 0x24
 8007832:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007834:	2b00      	cmp	r3, #0
 8007836:	da00      	bge.n	800783a <_dtoa_r+0x4a6>
 8007838:	e172      	b.n	8007b20 <_dtoa_r+0x78c>
 800783a:	9a02      	ldr	r2, [sp, #8]
 800783c:	2a0e      	cmp	r2, #14
 800783e:	dd00      	ble.n	8007842 <_dtoa_r+0x4ae>
 8007840:	e16e      	b.n	8007b20 <_dtoa_r+0x78c>
 8007842:	4b78      	ldr	r3, [pc, #480]	; (8007a24 <_dtoa_r+0x690>)
 8007844:	00d2      	lsls	r2, r2, #3
 8007846:	189b      	adds	r3, r3, r2
 8007848:	685c      	ldr	r4, [r3, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	930a      	str	r3, [sp, #40]	; 0x28
 800784e:	940b      	str	r4, [sp, #44]	; 0x2c
 8007850:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007852:	2b00      	cmp	r3, #0
 8007854:	db00      	blt.n	8007858 <_dtoa_r+0x4c4>
 8007856:	e0f7      	b.n	8007a48 <_dtoa_r+0x6b4>
 8007858:	9b07      	ldr	r3, [sp, #28]
 800785a:	2b00      	cmp	r3, #0
 800785c:	dd00      	ble.n	8007860 <_dtoa_r+0x4cc>
 800785e:	e0f3      	b.n	8007a48 <_dtoa_r+0x6b4>
 8007860:	d000      	beq.n	8007864 <_dtoa_r+0x4d0>
 8007862:	e282      	b.n	8007d6a <_dtoa_r+0x9d6>
 8007864:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007866:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007868:	2200      	movs	r2, #0
 800786a:	4b74      	ldr	r3, [pc, #464]	; (8007a3c <_dtoa_r+0x6a8>)
 800786c:	f7f9 fdca 	bl	8001404 <__aeabi_dmul>
 8007870:	9a08      	ldr	r2, [sp, #32]
 8007872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007874:	f7f8 fe0e 	bl	8000494 <__aeabi_dcmpge>
 8007878:	9e07      	ldr	r6, [sp, #28]
 800787a:	0035      	movs	r5, r6
 800787c:	2800      	cmp	r0, #0
 800787e:	d000      	beq.n	8007882 <_dtoa_r+0x4ee>
 8007880:	e259      	b.n	8007d36 <_dtoa_r+0x9a2>
 8007882:	9b06      	ldr	r3, [sp, #24]
 8007884:	9a06      	ldr	r2, [sp, #24]
 8007886:	3301      	adds	r3, #1
 8007888:	9308      	str	r3, [sp, #32]
 800788a:	2331      	movs	r3, #49	; 0x31
 800788c:	7013      	strb	r3, [r2, #0]
 800788e:	9b02      	ldr	r3, [sp, #8]
 8007890:	3301      	adds	r3, #1
 8007892:	9302      	str	r3, [sp, #8]
 8007894:	e254      	b.n	8007d40 <_dtoa_r+0x9ac>
 8007896:	4234      	tst	r4, r6
 8007898:	d007      	beq.n	80078aa <_dtoa_r+0x516>
 800789a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800789c:	3301      	adds	r3, #1
 800789e:	9310      	str	r3, [sp, #64]	; 0x40
 80078a0:	682a      	ldr	r2, [r5, #0]
 80078a2:	686b      	ldr	r3, [r5, #4]
 80078a4:	f7f9 fdae 	bl	8001404 <__aeabi_dmul>
 80078a8:	0033      	movs	r3, r6
 80078aa:	1064      	asrs	r4, r4, #1
 80078ac:	3508      	adds	r5, #8
 80078ae:	e75a      	b.n	8007766 <_dtoa_r+0x3d2>
 80078b0:	9e02      	ldr	r6, [sp, #8]
 80078b2:	9b07      	ldr	r3, [sp, #28]
 80078b4:	e780      	b.n	80077b8 <_dtoa_r+0x424>
 80078b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80078b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80078ba:	1e5a      	subs	r2, r3, #1
 80078bc:	4b59      	ldr	r3, [pc, #356]	; (8007a24 <_dtoa_r+0x690>)
 80078be:	00d2      	lsls	r2, r2, #3
 80078c0:	189b      	adds	r3, r3, r2
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	2900      	cmp	r1, #0
 80078c8:	d051      	beq.n	800796e <_dtoa_r+0x5da>
 80078ca:	2000      	movs	r0, #0
 80078cc:	495d      	ldr	r1, [pc, #372]	; (8007a44 <_dtoa_r+0x6b0>)
 80078ce:	f7f9 f997 	bl	8000c00 <__aeabi_ddiv>
 80078d2:	9a08      	ldr	r2, [sp, #32]
 80078d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078d6:	f7fa f801 	bl	80018dc <__aeabi_dsub>
 80078da:	9a06      	ldr	r2, [sp, #24]
 80078dc:	9b06      	ldr	r3, [sp, #24]
 80078de:	4694      	mov	ip, r2
 80078e0:	9317      	str	r3, [sp, #92]	; 0x5c
 80078e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80078e4:	9010      	str	r0, [sp, #64]	; 0x40
 80078e6:	9111      	str	r1, [sp, #68]	; 0x44
 80078e8:	4463      	add	r3, ip
 80078ea:	9319      	str	r3, [sp, #100]	; 0x64
 80078ec:	0029      	movs	r1, r5
 80078ee:	0020      	movs	r0, r4
 80078f0:	f7fa fba4 	bl	800203c <__aeabi_d2iz>
 80078f4:	9014      	str	r0, [sp, #80]	; 0x50
 80078f6:	f7fa fbd7 	bl	80020a8 <__aeabi_i2d>
 80078fa:	0002      	movs	r2, r0
 80078fc:	000b      	movs	r3, r1
 80078fe:	0020      	movs	r0, r4
 8007900:	0029      	movs	r1, r5
 8007902:	f7f9 ffeb 	bl	80018dc <__aeabi_dsub>
 8007906:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007908:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800790a:	3301      	adds	r3, #1
 800790c:	9308      	str	r3, [sp, #32]
 800790e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007910:	0004      	movs	r4, r0
 8007912:	3330      	adds	r3, #48	; 0x30
 8007914:	7013      	strb	r3, [r2, #0]
 8007916:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007918:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800791a:	000d      	movs	r5, r1
 800791c:	f7f8 fd9c 	bl	8000458 <__aeabi_dcmplt>
 8007920:	2800      	cmp	r0, #0
 8007922:	d175      	bne.n	8007a10 <_dtoa_r+0x67c>
 8007924:	0022      	movs	r2, r4
 8007926:	002b      	movs	r3, r5
 8007928:	2000      	movs	r0, #0
 800792a:	4940      	ldr	r1, [pc, #256]	; (8007a2c <_dtoa_r+0x698>)
 800792c:	f7f9 ffd6 	bl	80018dc <__aeabi_dsub>
 8007930:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007932:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007934:	f7f8 fd90 	bl	8000458 <__aeabi_dcmplt>
 8007938:	2800      	cmp	r0, #0
 800793a:	d000      	beq.n	800793e <_dtoa_r+0x5aa>
 800793c:	e0d2      	b.n	8007ae4 <_dtoa_r+0x750>
 800793e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007940:	9a08      	ldr	r2, [sp, #32]
 8007942:	4293      	cmp	r3, r2
 8007944:	d100      	bne.n	8007948 <_dtoa_r+0x5b4>
 8007946:	e770      	b.n	800782a <_dtoa_r+0x496>
 8007948:	9810      	ldr	r0, [sp, #64]	; 0x40
 800794a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800794c:	2200      	movs	r2, #0
 800794e:	4b38      	ldr	r3, [pc, #224]	; (8007a30 <_dtoa_r+0x69c>)
 8007950:	f7f9 fd58 	bl	8001404 <__aeabi_dmul>
 8007954:	4b36      	ldr	r3, [pc, #216]	; (8007a30 <_dtoa_r+0x69c>)
 8007956:	9010      	str	r0, [sp, #64]	; 0x40
 8007958:	9111      	str	r1, [sp, #68]	; 0x44
 800795a:	2200      	movs	r2, #0
 800795c:	0020      	movs	r0, r4
 800795e:	0029      	movs	r1, r5
 8007960:	f7f9 fd50 	bl	8001404 <__aeabi_dmul>
 8007964:	9b08      	ldr	r3, [sp, #32]
 8007966:	0004      	movs	r4, r0
 8007968:	000d      	movs	r5, r1
 800796a:	9317      	str	r3, [sp, #92]	; 0x5c
 800796c:	e7be      	b.n	80078ec <_dtoa_r+0x558>
 800796e:	9808      	ldr	r0, [sp, #32]
 8007970:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007972:	f7f9 fd47 	bl	8001404 <__aeabi_dmul>
 8007976:	9a06      	ldr	r2, [sp, #24]
 8007978:	9b06      	ldr	r3, [sp, #24]
 800797a:	4694      	mov	ip, r2
 800797c:	9308      	str	r3, [sp, #32]
 800797e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007980:	9010      	str	r0, [sp, #64]	; 0x40
 8007982:	9111      	str	r1, [sp, #68]	; 0x44
 8007984:	4463      	add	r3, ip
 8007986:	9319      	str	r3, [sp, #100]	; 0x64
 8007988:	0029      	movs	r1, r5
 800798a:	0020      	movs	r0, r4
 800798c:	f7fa fb56 	bl	800203c <__aeabi_d2iz>
 8007990:	9017      	str	r0, [sp, #92]	; 0x5c
 8007992:	f7fa fb89 	bl	80020a8 <__aeabi_i2d>
 8007996:	0002      	movs	r2, r0
 8007998:	000b      	movs	r3, r1
 800799a:	0020      	movs	r0, r4
 800799c:	0029      	movs	r1, r5
 800799e:	f7f9 ff9d 	bl	80018dc <__aeabi_dsub>
 80079a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80079a4:	9a08      	ldr	r2, [sp, #32]
 80079a6:	3330      	adds	r3, #48	; 0x30
 80079a8:	7013      	strb	r3, [r2, #0]
 80079aa:	0013      	movs	r3, r2
 80079ac:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80079ae:	3301      	adds	r3, #1
 80079b0:	0004      	movs	r4, r0
 80079b2:	000d      	movs	r5, r1
 80079b4:	9308      	str	r3, [sp, #32]
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d12c      	bne.n	8007a14 <_dtoa_r+0x680>
 80079ba:	9810      	ldr	r0, [sp, #64]	; 0x40
 80079bc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80079be:	9a06      	ldr	r2, [sp, #24]
 80079c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80079c2:	4694      	mov	ip, r2
 80079c4:	4463      	add	r3, ip
 80079c6:	2200      	movs	r2, #0
 80079c8:	9308      	str	r3, [sp, #32]
 80079ca:	4b1e      	ldr	r3, [pc, #120]	; (8007a44 <_dtoa_r+0x6b0>)
 80079cc:	f7f8 fddc 	bl	8000588 <__aeabi_dadd>
 80079d0:	0002      	movs	r2, r0
 80079d2:	000b      	movs	r3, r1
 80079d4:	0020      	movs	r0, r4
 80079d6:	0029      	movs	r1, r5
 80079d8:	f7f8 fd52 	bl	8000480 <__aeabi_dcmpgt>
 80079dc:	2800      	cmp	r0, #0
 80079de:	d000      	beq.n	80079e2 <_dtoa_r+0x64e>
 80079e0:	e080      	b.n	8007ae4 <_dtoa_r+0x750>
 80079e2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80079e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80079e6:	2000      	movs	r0, #0
 80079e8:	4916      	ldr	r1, [pc, #88]	; (8007a44 <_dtoa_r+0x6b0>)
 80079ea:	f7f9 ff77 	bl	80018dc <__aeabi_dsub>
 80079ee:	0002      	movs	r2, r0
 80079f0:	000b      	movs	r3, r1
 80079f2:	0020      	movs	r0, r4
 80079f4:	0029      	movs	r1, r5
 80079f6:	f7f8 fd2f 	bl	8000458 <__aeabi_dcmplt>
 80079fa:	2800      	cmp	r0, #0
 80079fc:	d100      	bne.n	8007a00 <_dtoa_r+0x66c>
 80079fe:	e714      	b.n	800782a <_dtoa_r+0x496>
 8007a00:	9b08      	ldr	r3, [sp, #32]
 8007a02:	001a      	movs	r2, r3
 8007a04:	3a01      	subs	r2, #1
 8007a06:	9208      	str	r2, [sp, #32]
 8007a08:	7812      	ldrb	r2, [r2, #0]
 8007a0a:	2a30      	cmp	r2, #48	; 0x30
 8007a0c:	d0f8      	beq.n	8007a00 <_dtoa_r+0x66c>
 8007a0e:	9308      	str	r3, [sp, #32]
 8007a10:	9602      	str	r6, [sp, #8]
 8007a12:	e055      	b.n	8007ac0 <_dtoa_r+0x72c>
 8007a14:	2200      	movs	r2, #0
 8007a16:	4b06      	ldr	r3, [pc, #24]	; (8007a30 <_dtoa_r+0x69c>)
 8007a18:	f7f9 fcf4 	bl	8001404 <__aeabi_dmul>
 8007a1c:	0004      	movs	r4, r0
 8007a1e:	000d      	movs	r5, r1
 8007a20:	e7b2      	b.n	8007988 <_dtoa_r+0x5f4>
 8007a22:	46c0      	nop			; (mov r8, r8)
 8007a24:	0800a600 	.word	0x0800a600
 8007a28:	0800a5d8 	.word	0x0800a5d8
 8007a2c:	3ff00000 	.word	0x3ff00000
 8007a30:	40240000 	.word	0x40240000
 8007a34:	401c0000 	.word	0x401c0000
 8007a38:	fcc00000 	.word	0xfcc00000
 8007a3c:	40140000 	.word	0x40140000
 8007a40:	7cc00000 	.word	0x7cc00000
 8007a44:	3fe00000 	.word	0x3fe00000
 8007a48:	9b07      	ldr	r3, [sp, #28]
 8007a4a:	9e06      	ldr	r6, [sp, #24]
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	199b      	adds	r3, r3, r6
 8007a50:	930c      	str	r3, [sp, #48]	; 0x30
 8007a52:	9c08      	ldr	r4, [sp, #32]
 8007a54:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007a56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a5a:	0020      	movs	r0, r4
 8007a5c:	0029      	movs	r1, r5
 8007a5e:	f7f9 f8cf 	bl	8000c00 <__aeabi_ddiv>
 8007a62:	f7fa faeb 	bl	800203c <__aeabi_d2iz>
 8007a66:	9007      	str	r0, [sp, #28]
 8007a68:	f7fa fb1e 	bl	80020a8 <__aeabi_i2d>
 8007a6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a70:	f7f9 fcc8 	bl	8001404 <__aeabi_dmul>
 8007a74:	0002      	movs	r2, r0
 8007a76:	000b      	movs	r3, r1
 8007a78:	0020      	movs	r0, r4
 8007a7a:	0029      	movs	r1, r5
 8007a7c:	f7f9 ff2e 	bl	80018dc <__aeabi_dsub>
 8007a80:	0033      	movs	r3, r6
 8007a82:	9a07      	ldr	r2, [sp, #28]
 8007a84:	3601      	adds	r6, #1
 8007a86:	3230      	adds	r2, #48	; 0x30
 8007a88:	701a      	strb	r2, [r3, #0]
 8007a8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a8c:	9608      	str	r6, [sp, #32]
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d139      	bne.n	8007b06 <_dtoa_r+0x772>
 8007a92:	0002      	movs	r2, r0
 8007a94:	000b      	movs	r3, r1
 8007a96:	f7f8 fd77 	bl	8000588 <__aeabi_dadd>
 8007a9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a9e:	0004      	movs	r4, r0
 8007aa0:	000d      	movs	r5, r1
 8007aa2:	f7f8 fced 	bl	8000480 <__aeabi_dcmpgt>
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	d11b      	bne.n	8007ae2 <_dtoa_r+0x74e>
 8007aaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007aac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007aae:	0020      	movs	r0, r4
 8007ab0:	0029      	movs	r1, r5
 8007ab2:	f7f8 fccb 	bl	800044c <__aeabi_dcmpeq>
 8007ab6:	2800      	cmp	r0, #0
 8007ab8:	d002      	beq.n	8007ac0 <_dtoa_r+0x72c>
 8007aba:	9b07      	ldr	r3, [sp, #28]
 8007abc:	07db      	lsls	r3, r3, #31
 8007abe:	d410      	bmi.n	8007ae2 <_dtoa_r+0x74e>
 8007ac0:	0038      	movs	r0, r7
 8007ac2:	9905      	ldr	r1, [sp, #20]
 8007ac4:	f000 fe6c 	bl	80087a0 <_Bfree>
 8007ac8:	2300      	movs	r3, #0
 8007aca:	9a08      	ldr	r2, [sp, #32]
 8007acc:	9802      	ldr	r0, [sp, #8]
 8007ace:	7013      	strb	r3, [r2, #0]
 8007ad0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007ad2:	3001      	adds	r0, #1
 8007ad4:	6018      	str	r0, [r3, #0]
 8007ad6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d100      	bne.n	8007ade <_dtoa_r+0x74a>
 8007adc:	e4a6      	b.n	800742c <_dtoa_r+0x98>
 8007ade:	601a      	str	r2, [r3, #0]
 8007ae0:	e4a4      	b.n	800742c <_dtoa_r+0x98>
 8007ae2:	9e02      	ldr	r6, [sp, #8]
 8007ae4:	9b08      	ldr	r3, [sp, #32]
 8007ae6:	9308      	str	r3, [sp, #32]
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	781a      	ldrb	r2, [r3, #0]
 8007aec:	2a39      	cmp	r2, #57	; 0x39
 8007aee:	d106      	bne.n	8007afe <_dtoa_r+0x76a>
 8007af0:	9a06      	ldr	r2, [sp, #24]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d1f7      	bne.n	8007ae6 <_dtoa_r+0x752>
 8007af6:	2230      	movs	r2, #48	; 0x30
 8007af8:	9906      	ldr	r1, [sp, #24]
 8007afa:	3601      	adds	r6, #1
 8007afc:	700a      	strb	r2, [r1, #0]
 8007afe:	781a      	ldrb	r2, [r3, #0]
 8007b00:	3201      	adds	r2, #1
 8007b02:	701a      	strb	r2, [r3, #0]
 8007b04:	e784      	b.n	8007a10 <_dtoa_r+0x67c>
 8007b06:	2200      	movs	r2, #0
 8007b08:	4baa      	ldr	r3, [pc, #680]	; (8007db4 <_dtoa_r+0xa20>)
 8007b0a:	f7f9 fc7b 	bl	8001404 <__aeabi_dmul>
 8007b0e:	2200      	movs	r2, #0
 8007b10:	2300      	movs	r3, #0
 8007b12:	0004      	movs	r4, r0
 8007b14:	000d      	movs	r5, r1
 8007b16:	f7f8 fc99 	bl	800044c <__aeabi_dcmpeq>
 8007b1a:	2800      	cmp	r0, #0
 8007b1c:	d09b      	beq.n	8007a56 <_dtoa_r+0x6c2>
 8007b1e:	e7cf      	b.n	8007ac0 <_dtoa_r+0x72c>
 8007b20:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007b22:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007b24:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007b26:	2d00      	cmp	r5, #0
 8007b28:	d012      	beq.n	8007b50 <_dtoa_r+0x7bc>
 8007b2a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007b2c:	2a01      	cmp	r2, #1
 8007b2e:	dc66      	bgt.n	8007bfe <_dtoa_r+0x86a>
 8007b30:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007b32:	2a00      	cmp	r2, #0
 8007b34:	d05d      	beq.n	8007bf2 <_dtoa_r+0x85e>
 8007b36:	4aa0      	ldr	r2, [pc, #640]	; (8007db8 <_dtoa_r+0xa24>)
 8007b38:	189b      	adds	r3, r3, r2
 8007b3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b3c:	2101      	movs	r1, #1
 8007b3e:	18d2      	adds	r2, r2, r3
 8007b40:	920a      	str	r2, [sp, #40]	; 0x28
 8007b42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b44:	0038      	movs	r0, r7
 8007b46:	18d3      	adds	r3, r2, r3
 8007b48:	930d      	str	r3, [sp, #52]	; 0x34
 8007b4a:	f000 ff25 	bl	8008998 <__i2b>
 8007b4e:	0005      	movs	r5, r0
 8007b50:	2c00      	cmp	r4, #0
 8007b52:	dd0e      	ble.n	8007b72 <_dtoa_r+0x7de>
 8007b54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	dd0b      	ble.n	8007b72 <_dtoa_r+0x7de>
 8007b5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b5c:	0023      	movs	r3, r4
 8007b5e:	4294      	cmp	r4, r2
 8007b60:	dd00      	ble.n	8007b64 <_dtoa_r+0x7d0>
 8007b62:	0013      	movs	r3, r2
 8007b64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b66:	1ae4      	subs	r4, r4, r3
 8007b68:	1ad2      	subs	r2, r2, r3
 8007b6a:	920a      	str	r2, [sp, #40]	; 0x28
 8007b6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	930d      	str	r3, [sp, #52]	; 0x34
 8007b72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d01f      	beq.n	8007bb8 <_dtoa_r+0x824>
 8007b78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d054      	beq.n	8007c28 <_dtoa_r+0x894>
 8007b7e:	2e00      	cmp	r6, #0
 8007b80:	dd11      	ble.n	8007ba6 <_dtoa_r+0x812>
 8007b82:	0029      	movs	r1, r5
 8007b84:	0032      	movs	r2, r6
 8007b86:	0038      	movs	r0, r7
 8007b88:	f000 ffcc 	bl	8008b24 <__pow5mult>
 8007b8c:	9a05      	ldr	r2, [sp, #20]
 8007b8e:	0001      	movs	r1, r0
 8007b90:	0005      	movs	r5, r0
 8007b92:	0038      	movs	r0, r7
 8007b94:	f000 ff16 	bl	80089c4 <__multiply>
 8007b98:	9905      	ldr	r1, [sp, #20]
 8007b9a:	9014      	str	r0, [sp, #80]	; 0x50
 8007b9c:	0038      	movs	r0, r7
 8007b9e:	f000 fdff 	bl	80087a0 <_Bfree>
 8007ba2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007ba4:	9305      	str	r3, [sp, #20]
 8007ba6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ba8:	1b9a      	subs	r2, r3, r6
 8007baa:	42b3      	cmp	r3, r6
 8007bac:	d004      	beq.n	8007bb8 <_dtoa_r+0x824>
 8007bae:	0038      	movs	r0, r7
 8007bb0:	9905      	ldr	r1, [sp, #20]
 8007bb2:	f000 ffb7 	bl	8008b24 <__pow5mult>
 8007bb6:	9005      	str	r0, [sp, #20]
 8007bb8:	2101      	movs	r1, #1
 8007bba:	0038      	movs	r0, r7
 8007bbc:	f000 feec 	bl	8008998 <__i2b>
 8007bc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bc2:	0006      	movs	r6, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	dd31      	ble.n	8007c2c <_dtoa_r+0x898>
 8007bc8:	001a      	movs	r2, r3
 8007bca:	0001      	movs	r1, r0
 8007bcc:	0038      	movs	r0, r7
 8007bce:	f000 ffa9 	bl	8008b24 <__pow5mult>
 8007bd2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007bd4:	0006      	movs	r6, r0
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	dd2d      	ble.n	8007c36 <_dtoa_r+0x8a2>
 8007bda:	2300      	movs	r3, #0
 8007bdc:	930e      	str	r3, [sp, #56]	; 0x38
 8007bde:	6933      	ldr	r3, [r6, #16]
 8007be0:	3303      	adds	r3, #3
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	18f3      	adds	r3, r6, r3
 8007be6:	6858      	ldr	r0, [r3, #4]
 8007be8:	f000 fe8e 	bl	8008908 <__hi0bits>
 8007bec:	2320      	movs	r3, #32
 8007bee:	1a18      	subs	r0, r3, r0
 8007bf0:	e039      	b.n	8007c66 <_dtoa_r+0x8d2>
 8007bf2:	2336      	movs	r3, #54	; 0x36
 8007bf4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007bf6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007bf8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007bfa:	1a9b      	subs	r3, r3, r2
 8007bfc:	e79d      	b.n	8007b3a <_dtoa_r+0x7a6>
 8007bfe:	9b07      	ldr	r3, [sp, #28]
 8007c00:	1e5e      	subs	r6, r3, #1
 8007c02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c04:	42b3      	cmp	r3, r6
 8007c06:	db07      	blt.n	8007c18 <_dtoa_r+0x884>
 8007c08:	1b9e      	subs	r6, r3, r6
 8007c0a:	9b07      	ldr	r3, [sp, #28]
 8007c0c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	da93      	bge.n	8007b3a <_dtoa_r+0x7a6>
 8007c12:	1ae4      	subs	r4, r4, r3
 8007c14:	2300      	movs	r3, #0
 8007c16:	e790      	b.n	8007b3a <_dtoa_r+0x7a6>
 8007c18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c1a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007c1c:	1af3      	subs	r3, r6, r3
 8007c1e:	18d3      	adds	r3, r2, r3
 8007c20:	960e      	str	r6, [sp, #56]	; 0x38
 8007c22:	9315      	str	r3, [sp, #84]	; 0x54
 8007c24:	2600      	movs	r6, #0
 8007c26:	e7f0      	b.n	8007c0a <_dtoa_r+0x876>
 8007c28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c2a:	e7c0      	b.n	8007bae <_dtoa_r+0x81a>
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	930e      	str	r3, [sp, #56]	; 0x38
 8007c30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	dc13      	bgt.n	8007c5e <_dtoa_r+0x8ca>
 8007c36:	2300      	movs	r3, #0
 8007c38:	930e      	str	r3, [sp, #56]	; 0x38
 8007c3a:	9b08      	ldr	r3, [sp, #32]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d10e      	bne.n	8007c5e <_dtoa_r+0x8ca>
 8007c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c42:	031b      	lsls	r3, r3, #12
 8007c44:	d10b      	bne.n	8007c5e <_dtoa_r+0x8ca>
 8007c46:	4b5d      	ldr	r3, [pc, #372]	; (8007dbc <_dtoa_r+0xa28>)
 8007c48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c4a:	4213      	tst	r3, r2
 8007c4c:	d007      	beq.n	8007c5e <_dtoa_r+0x8ca>
 8007c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c50:	3301      	adds	r3, #1
 8007c52:	930a      	str	r3, [sp, #40]	; 0x28
 8007c54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c56:	3301      	adds	r3, #1
 8007c58:	930d      	str	r3, [sp, #52]	; 0x34
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	930e      	str	r3, [sp, #56]	; 0x38
 8007c5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c60:	2001      	movs	r0, #1
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d1bb      	bne.n	8007bde <_dtoa_r+0x84a>
 8007c66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c68:	221f      	movs	r2, #31
 8007c6a:	1818      	adds	r0, r3, r0
 8007c6c:	0003      	movs	r3, r0
 8007c6e:	4013      	ands	r3, r2
 8007c70:	4210      	tst	r0, r2
 8007c72:	d046      	beq.n	8007d02 <_dtoa_r+0x96e>
 8007c74:	3201      	adds	r2, #1
 8007c76:	1ad2      	subs	r2, r2, r3
 8007c78:	2a04      	cmp	r2, #4
 8007c7a:	dd3f      	ble.n	8007cfc <_dtoa_r+0x968>
 8007c7c:	221c      	movs	r2, #28
 8007c7e:	1ad3      	subs	r3, r2, r3
 8007c80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c82:	18e4      	adds	r4, r4, r3
 8007c84:	18d2      	adds	r2, r2, r3
 8007c86:	920a      	str	r2, [sp, #40]	; 0x28
 8007c88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c8a:	18d3      	adds	r3, r2, r3
 8007c8c:	930d      	str	r3, [sp, #52]	; 0x34
 8007c8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	dd05      	ble.n	8007ca0 <_dtoa_r+0x90c>
 8007c94:	001a      	movs	r2, r3
 8007c96:	0038      	movs	r0, r7
 8007c98:	9905      	ldr	r1, [sp, #20]
 8007c9a:	f000 ff9f 	bl	8008bdc <__lshift>
 8007c9e:	9005      	str	r0, [sp, #20]
 8007ca0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	dd05      	ble.n	8007cb2 <_dtoa_r+0x91e>
 8007ca6:	0031      	movs	r1, r6
 8007ca8:	001a      	movs	r2, r3
 8007caa:	0038      	movs	r0, r7
 8007cac:	f000 ff96 	bl	8008bdc <__lshift>
 8007cb0:	0006      	movs	r6, r0
 8007cb2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d026      	beq.n	8007d06 <_dtoa_r+0x972>
 8007cb8:	0031      	movs	r1, r6
 8007cba:	9805      	ldr	r0, [sp, #20]
 8007cbc:	f000 fffc 	bl	8008cb8 <__mcmp>
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	da20      	bge.n	8007d06 <_dtoa_r+0x972>
 8007cc4:	9b02      	ldr	r3, [sp, #8]
 8007cc6:	220a      	movs	r2, #10
 8007cc8:	3b01      	subs	r3, #1
 8007cca:	9302      	str	r3, [sp, #8]
 8007ccc:	0038      	movs	r0, r7
 8007cce:	2300      	movs	r3, #0
 8007cd0:	9905      	ldr	r1, [sp, #20]
 8007cd2:	f000 fd89 	bl	80087e8 <__multadd>
 8007cd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007cd8:	9005      	str	r0, [sp, #20]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d100      	bne.n	8007ce0 <_dtoa_r+0x94c>
 8007cde:	e166      	b.n	8007fae <_dtoa_r+0xc1a>
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	0029      	movs	r1, r5
 8007ce4:	220a      	movs	r2, #10
 8007ce6:	0038      	movs	r0, r7
 8007ce8:	f000 fd7e 	bl	80087e8 <__multadd>
 8007cec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cee:	0005      	movs	r5, r0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	dc47      	bgt.n	8007d84 <_dtoa_r+0x9f0>
 8007cf4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	dc0d      	bgt.n	8007d16 <_dtoa_r+0x982>
 8007cfa:	e043      	b.n	8007d84 <_dtoa_r+0x9f0>
 8007cfc:	2a04      	cmp	r2, #4
 8007cfe:	d0c6      	beq.n	8007c8e <_dtoa_r+0x8fa>
 8007d00:	0013      	movs	r3, r2
 8007d02:	331c      	adds	r3, #28
 8007d04:	e7bc      	b.n	8007c80 <_dtoa_r+0x8ec>
 8007d06:	9b07      	ldr	r3, [sp, #28]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	dc35      	bgt.n	8007d78 <_dtoa_r+0x9e4>
 8007d0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d0e:	2b02      	cmp	r3, #2
 8007d10:	dd32      	ble.n	8007d78 <_dtoa_r+0x9e4>
 8007d12:	9b07      	ldr	r3, [sp, #28]
 8007d14:	930c      	str	r3, [sp, #48]	; 0x30
 8007d16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d10c      	bne.n	8007d36 <_dtoa_r+0x9a2>
 8007d1c:	0031      	movs	r1, r6
 8007d1e:	2205      	movs	r2, #5
 8007d20:	0038      	movs	r0, r7
 8007d22:	f000 fd61 	bl	80087e8 <__multadd>
 8007d26:	0006      	movs	r6, r0
 8007d28:	0001      	movs	r1, r0
 8007d2a:	9805      	ldr	r0, [sp, #20]
 8007d2c:	f000 ffc4 	bl	8008cb8 <__mcmp>
 8007d30:	2800      	cmp	r0, #0
 8007d32:	dd00      	ble.n	8007d36 <_dtoa_r+0x9a2>
 8007d34:	e5a5      	b.n	8007882 <_dtoa_r+0x4ee>
 8007d36:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007d38:	43db      	mvns	r3, r3
 8007d3a:	9302      	str	r3, [sp, #8]
 8007d3c:	9b06      	ldr	r3, [sp, #24]
 8007d3e:	9308      	str	r3, [sp, #32]
 8007d40:	2400      	movs	r4, #0
 8007d42:	0031      	movs	r1, r6
 8007d44:	0038      	movs	r0, r7
 8007d46:	f000 fd2b 	bl	80087a0 <_Bfree>
 8007d4a:	2d00      	cmp	r5, #0
 8007d4c:	d100      	bne.n	8007d50 <_dtoa_r+0x9bc>
 8007d4e:	e6b7      	b.n	8007ac0 <_dtoa_r+0x72c>
 8007d50:	2c00      	cmp	r4, #0
 8007d52:	d005      	beq.n	8007d60 <_dtoa_r+0x9cc>
 8007d54:	42ac      	cmp	r4, r5
 8007d56:	d003      	beq.n	8007d60 <_dtoa_r+0x9cc>
 8007d58:	0021      	movs	r1, r4
 8007d5a:	0038      	movs	r0, r7
 8007d5c:	f000 fd20 	bl	80087a0 <_Bfree>
 8007d60:	0029      	movs	r1, r5
 8007d62:	0038      	movs	r0, r7
 8007d64:	f000 fd1c 	bl	80087a0 <_Bfree>
 8007d68:	e6aa      	b.n	8007ac0 <_dtoa_r+0x72c>
 8007d6a:	2600      	movs	r6, #0
 8007d6c:	0035      	movs	r5, r6
 8007d6e:	e7e2      	b.n	8007d36 <_dtoa_r+0x9a2>
 8007d70:	9602      	str	r6, [sp, #8]
 8007d72:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8007d74:	0035      	movs	r5, r6
 8007d76:	e584      	b.n	8007882 <_dtoa_r+0x4ee>
 8007d78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d100      	bne.n	8007d80 <_dtoa_r+0x9ec>
 8007d7e:	e0ce      	b.n	8007f1e <_dtoa_r+0xb8a>
 8007d80:	9b07      	ldr	r3, [sp, #28]
 8007d82:	930c      	str	r3, [sp, #48]	; 0x30
 8007d84:	2c00      	cmp	r4, #0
 8007d86:	dd05      	ble.n	8007d94 <_dtoa_r+0xa00>
 8007d88:	0029      	movs	r1, r5
 8007d8a:	0022      	movs	r2, r4
 8007d8c:	0038      	movs	r0, r7
 8007d8e:	f000 ff25 	bl	8008bdc <__lshift>
 8007d92:	0005      	movs	r5, r0
 8007d94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d96:	0028      	movs	r0, r5
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d022      	beq.n	8007de2 <_dtoa_r+0xa4e>
 8007d9c:	0038      	movs	r0, r7
 8007d9e:	6869      	ldr	r1, [r5, #4]
 8007da0:	f000 fcba 	bl	8008718 <_Balloc>
 8007da4:	1e04      	subs	r4, r0, #0
 8007da6:	d10f      	bne.n	8007dc8 <_dtoa_r+0xa34>
 8007da8:	0002      	movs	r2, r0
 8007daa:	4b05      	ldr	r3, [pc, #20]	; (8007dc0 <_dtoa_r+0xa2c>)
 8007dac:	4905      	ldr	r1, [pc, #20]	; (8007dc4 <_dtoa_r+0xa30>)
 8007dae:	f7ff fb06 	bl	80073be <_dtoa_r+0x2a>
 8007db2:	46c0      	nop			; (mov r8, r8)
 8007db4:	40240000 	.word	0x40240000
 8007db8:	00000433 	.word	0x00000433
 8007dbc:	7ff00000 	.word	0x7ff00000
 8007dc0:	0800a4f0 	.word	0x0800a4f0
 8007dc4:	000002ea 	.word	0x000002ea
 8007dc8:	0029      	movs	r1, r5
 8007dca:	692b      	ldr	r3, [r5, #16]
 8007dcc:	310c      	adds	r1, #12
 8007dce:	1c9a      	adds	r2, r3, #2
 8007dd0:	0092      	lsls	r2, r2, #2
 8007dd2:	300c      	adds	r0, #12
 8007dd4:	f000 fc97 	bl	8008706 <memcpy>
 8007dd8:	2201      	movs	r2, #1
 8007dda:	0021      	movs	r1, r4
 8007ddc:	0038      	movs	r0, r7
 8007dde:	f000 fefd 	bl	8008bdc <__lshift>
 8007de2:	9b06      	ldr	r3, [sp, #24]
 8007de4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007de6:	930a      	str	r3, [sp, #40]	; 0x28
 8007de8:	3b01      	subs	r3, #1
 8007dea:	189b      	adds	r3, r3, r2
 8007dec:	2201      	movs	r2, #1
 8007dee:	002c      	movs	r4, r5
 8007df0:	0005      	movs	r5, r0
 8007df2:	9314      	str	r3, [sp, #80]	; 0x50
 8007df4:	9b08      	ldr	r3, [sp, #32]
 8007df6:	4013      	ands	r3, r2
 8007df8:	930f      	str	r3, [sp, #60]	; 0x3c
 8007dfa:	0031      	movs	r1, r6
 8007dfc:	9805      	ldr	r0, [sp, #20]
 8007dfe:	f7ff fa3d 	bl	800727c <quorem>
 8007e02:	0003      	movs	r3, r0
 8007e04:	0021      	movs	r1, r4
 8007e06:	3330      	adds	r3, #48	; 0x30
 8007e08:	900d      	str	r0, [sp, #52]	; 0x34
 8007e0a:	9805      	ldr	r0, [sp, #20]
 8007e0c:	9307      	str	r3, [sp, #28]
 8007e0e:	f000 ff53 	bl	8008cb8 <__mcmp>
 8007e12:	002a      	movs	r2, r5
 8007e14:	900e      	str	r0, [sp, #56]	; 0x38
 8007e16:	0031      	movs	r1, r6
 8007e18:	0038      	movs	r0, r7
 8007e1a:	f000 ff69 	bl	8008cf0 <__mdiff>
 8007e1e:	68c3      	ldr	r3, [r0, #12]
 8007e20:	9008      	str	r0, [sp, #32]
 8007e22:	9310      	str	r3, [sp, #64]	; 0x40
 8007e24:	2301      	movs	r3, #1
 8007e26:	930c      	str	r3, [sp, #48]	; 0x30
 8007e28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d104      	bne.n	8007e38 <_dtoa_r+0xaa4>
 8007e2e:	0001      	movs	r1, r0
 8007e30:	9805      	ldr	r0, [sp, #20]
 8007e32:	f000 ff41 	bl	8008cb8 <__mcmp>
 8007e36:	900c      	str	r0, [sp, #48]	; 0x30
 8007e38:	0038      	movs	r0, r7
 8007e3a:	9908      	ldr	r1, [sp, #32]
 8007e3c:	f000 fcb0 	bl	80087a0 <_Bfree>
 8007e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e44:	3301      	adds	r3, #1
 8007e46:	9308      	str	r3, [sp, #32]
 8007e48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	d10c      	bne.n	8007e6c <_dtoa_r+0xad8>
 8007e52:	9b07      	ldr	r3, [sp, #28]
 8007e54:	2b39      	cmp	r3, #57	; 0x39
 8007e56:	d026      	beq.n	8007ea6 <_dtoa_r+0xb12>
 8007e58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	dd02      	ble.n	8007e64 <_dtoa_r+0xad0>
 8007e5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e60:	3331      	adds	r3, #49	; 0x31
 8007e62:	9307      	str	r3, [sp, #28]
 8007e64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e66:	9a07      	ldr	r2, [sp, #28]
 8007e68:	701a      	strb	r2, [r3, #0]
 8007e6a:	e76a      	b.n	8007d42 <_dtoa_r+0x9ae>
 8007e6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	db04      	blt.n	8007e7c <_dtoa_r+0xae8>
 8007e72:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007e74:	4313      	orrs	r3, r2
 8007e76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	d11f      	bne.n	8007ebc <_dtoa_r+0xb28>
 8007e7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	ddf0      	ble.n	8007e64 <_dtoa_r+0xad0>
 8007e82:	9905      	ldr	r1, [sp, #20]
 8007e84:	2201      	movs	r2, #1
 8007e86:	0038      	movs	r0, r7
 8007e88:	f000 fea8 	bl	8008bdc <__lshift>
 8007e8c:	0031      	movs	r1, r6
 8007e8e:	9005      	str	r0, [sp, #20]
 8007e90:	f000 ff12 	bl	8008cb8 <__mcmp>
 8007e94:	2800      	cmp	r0, #0
 8007e96:	dc03      	bgt.n	8007ea0 <_dtoa_r+0xb0c>
 8007e98:	d1e4      	bne.n	8007e64 <_dtoa_r+0xad0>
 8007e9a:	9b07      	ldr	r3, [sp, #28]
 8007e9c:	07db      	lsls	r3, r3, #31
 8007e9e:	d5e1      	bpl.n	8007e64 <_dtoa_r+0xad0>
 8007ea0:	9b07      	ldr	r3, [sp, #28]
 8007ea2:	2b39      	cmp	r3, #57	; 0x39
 8007ea4:	d1db      	bne.n	8007e5e <_dtoa_r+0xaca>
 8007ea6:	2339      	movs	r3, #57	; 0x39
 8007ea8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007eaa:	7013      	strb	r3, [r2, #0]
 8007eac:	9b08      	ldr	r3, [sp, #32]
 8007eae:	9308      	str	r3, [sp, #32]
 8007eb0:	3b01      	subs	r3, #1
 8007eb2:	781a      	ldrb	r2, [r3, #0]
 8007eb4:	2a39      	cmp	r2, #57	; 0x39
 8007eb6:	d068      	beq.n	8007f8a <_dtoa_r+0xbf6>
 8007eb8:	3201      	adds	r2, #1
 8007eba:	e7d5      	b.n	8007e68 <_dtoa_r+0xad4>
 8007ebc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	dd07      	ble.n	8007ed2 <_dtoa_r+0xb3e>
 8007ec2:	9b07      	ldr	r3, [sp, #28]
 8007ec4:	2b39      	cmp	r3, #57	; 0x39
 8007ec6:	d0ee      	beq.n	8007ea6 <_dtoa_r+0xb12>
 8007ec8:	9b07      	ldr	r3, [sp, #28]
 8007eca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ecc:	3301      	adds	r3, #1
 8007ece:	7013      	strb	r3, [r2, #0]
 8007ed0:	e737      	b.n	8007d42 <_dtoa_r+0x9ae>
 8007ed2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ed4:	9a07      	ldr	r2, [sp, #28]
 8007ed6:	701a      	strb	r2, [r3, #0]
 8007ed8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007eda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d03e      	beq.n	8007f5e <_dtoa_r+0xbca>
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	220a      	movs	r2, #10
 8007ee4:	9905      	ldr	r1, [sp, #20]
 8007ee6:	0038      	movs	r0, r7
 8007ee8:	f000 fc7e 	bl	80087e8 <__multadd>
 8007eec:	2300      	movs	r3, #0
 8007eee:	9005      	str	r0, [sp, #20]
 8007ef0:	220a      	movs	r2, #10
 8007ef2:	0021      	movs	r1, r4
 8007ef4:	0038      	movs	r0, r7
 8007ef6:	42ac      	cmp	r4, r5
 8007ef8:	d106      	bne.n	8007f08 <_dtoa_r+0xb74>
 8007efa:	f000 fc75 	bl	80087e8 <__multadd>
 8007efe:	0004      	movs	r4, r0
 8007f00:	0005      	movs	r5, r0
 8007f02:	9b08      	ldr	r3, [sp, #32]
 8007f04:	930a      	str	r3, [sp, #40]	; 0x28
 8007f06:	e778      	b.n	8007dfa <_dtoa_r+0xa66>
 8007f08:	f000 fc6e 	bl	80087e8 <__multadd>
 8007f0c:	0029      	movs	r1, r5
 8007f0e:	0004      	movs	r4, r0
 8007f10:	2300      	movs	r3, #0
 8007f12:	220a      	movs	r2, #10
 8007f14:	0038      	movs	r0, r7
 8007f16:	f000 fc67 	bl	80087e8 <__multadd>
 8007f1a:	0005      	movs	r5, r0
 8007f1c:	e7f1      	b.n	8007f02 <_dtoa_r+0xb6e>
 8007f1e:	9b07      	ldr	r3, [sp, #28]
 8007f20:	930c      	str	r3, [sp, #48]	; 0x30
 8007f22:	2400      	movs	r4, #0
 8007f24:	0031      	movs	r1, r6
 8007f26:	9805      	ldr	r0, [sp, #20]
 8007f28:	f7ff f9a8 	bl	800727c <quorem>
 8007f2c:	9b06      	ldr	r3, [sp, #24]
 8007f2e:	3030      	adds	r0, #48	; 0x30
 8007f30:	5518      	strb	r0, [r3, r4]
 8007f32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f34:	3401      	adds	r4, #1
 8007f36:	9007      	str	r0, [sp, #28]
 8007f38:	42a3      	cmp	r3, r4
 8007f3a:	dd07      	ble.n	8007f4c <_dtoa_r+0xbb8>
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	220a      	movs	r2, #10
 8007f40:	0038      	movs	r0, r7
 8007f42:	9905      	ldr	r1, [sp, #20]
 8007f44:	f000 fc50 	bl	80087e8 <__multadd>
 8007f48:	9005      	str	r0, [sp, #20]
 8007f4a:	e7eb      	b.n	8007f24 <_dtoa_r+0xb90>
 8007f4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f4e:	2001      	movs	r0, #1
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	dd00      	ble.n	8007f56 <_dtoa_r+0xbc2>
 8007f54:	0018      	movs	r0, r3
 8007f56:	2400      	movs	r4, #0
 8007f58:	9b06      	ldr	r3, [sp, #24]
 8007f5a:	181b      	adds	r3, r3, r0
 8007f5c:	9308      	str	r3, [sp, #32]
 8007f5e:	9905      	ldr	r1, [sp, #20]
 8007f60:	2201      	movs	r2, #1
 8007f62:	0038      	movs	r0, r7
 8007f64:	f000 fe3a 	bl	8008bdc <__lshift>
 8007f68:	0031      	movs	r1, r6
 8007f6a:	9005      	str	r0, [sp, #20]
 8007f6c:	f000 fea4 	bl	8008cb8 <__mcmp>
 8007f70:	2800      	cmp	r0, #0
 8007f72:	dc9b      	bgt.n	8007eac <_dtoa_r+0xb18>
 8007f74:	d102      	bne.n	8007f7c <_dtoa_r+0xbe8>
 8007f76:	9b07      	ldr	r3, [sp, #28]
 8007f78:	07db      	lsls	r3, r3, #31
 8007f7a:	d497      	bmi.n	8007eac <_dtoa_r+0xb18>
 8007f7c:	9b08      	ldr	r3, [sp, #32]
 8007f7e:	9308      	str	r3, [sp, #32]
 8007f80:	3b01      	subs	r3, #1
 8007f82:	781a      	ldrb	r2, [r3, #0]
 8007f84:	2a30      	cmp	r2, #48	; 0x30
 8007f86:	d0fa      	beq.n	8007f7e <_dtoa_r+0xbea>
 8007f88:	e6db      	b.n	8007d42 <_dtoa_r+0x9ae>
 8007f8a:	9a06      	ldr	r2, [sp, #24]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d18e      	bne.n	8007eae <_dtoa_r+0xb1a>
 8007f90:	9b02      	ldr	r3, [sp, #8]
 8007f92:	3301      	adds	r3, #1
 8007f94:	9302      	str	r3, [sp, #8]
 8007f96:	2331      	movs	r3, #49	; 0x31
 8007f98:	e799      	b.n	8007ece <_dtoa_r+0xb3a>
 8007f9a:	4b09      	ldr	r3, [pc, #36]	; (8007fc0 <_dtoa_r+0xc2c>)
 8007f9c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007f9e:	9306      	str	r3, [sp, #24]
 8007fa0:	4b08      	ldr	r3, [pc, #32]	; (8007fc4 <_dtoa_r+0xc30>)
 8007fa2:	2a00      	cmp	r2, #0
 8007fa4:	d001      	beq.n	8007faa <_dtoa_r+0xc16>
 8007fa6:	f7ff fa3f 	bl	8007428 <_dtoa_r+0x94>
 8007faa:	f7ff fa3f 	bl	800742c <_dtoa_r+0x98>
 8007fae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	dcb6      	bgt.n	8007f22 <_dtoa_r+0xb8e>
 8007fb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	dd00      	ble.n	8007fbc <_dtoa_r+0xc28>
 8007fba:	e6ac      	b.n	8007d16 <_dtoa_r+0x982>
 8007fbc:	e7b1      	b.n	8007f22 <_dtoa_r+0xb8e>
 8007fbe:	46c0      	nop			; (mov r8, r8)
 8007fc0:	0800a471 	.word	0x0800a471
 8007fc4:	0800a479 	.word	0x0800a479

08007fc8 <rshift>:
 8007fc8:	0002      	movs	r2, r0
 8007fca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fcc:	6904      	ldr	r4, [r0, #16]
 8007fce:	3214      	adds	r2, #20
 8007fd0:	0013      	movs	r3, r2
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	114f      	asrs	r7, r1, #5
 8007fd6:	42bc      	cmp	r4, r7
 8007fd8:	dd31      	ble.n	800803e <rshift+0x76>
 8007fda:	00bb      	lsls	r3, r7, #2
 8007fdc:	18d3      	adds	r3, r2, r3
 8007fde:	261f      	movs	r6, #31
 8007fe0:	9301      	str	r3, [sp, #4]
 8007fe2:	000b      	movs	r3, r1
 8007fe4:	00a5      	lsls	r5, r4, #2
 8007fe6:	4033      	ands	r3, r6
 8007fe8:	1955      	adds	r5, r2, r5
 8007fea:	9302      	str	r3, [sp, #8]
 8007fec:	4231      	tst	r1, r6
 8007fee:	d10c      	bne.n	800800a <rshift+0x42>
 8007ff0:	0016      	movs	r6, r2
 8007ff2:	9901      	ldr	r1, [sp, #4]
 8007ff4:	428d      	cmp	r5, r1
 8007ff6:	d838      	bhi.n	800806a <rshift+0xa2>
 8007ff8:	9901      	ldr	r1, [sp, #4]
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	3903      	subs	r1, #3
 8007ffe:	428d      	cmp	r5, r1
 8008000:	d301      	bcc.n	8008006 <rshift+0x3e>
 8008002:	1be3      	subs	r3, r4, r7
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	18d3      	adds	r3, r2, r3
 8008008:	e019      	b.n	800803e <rshift+0x76>
 800800a:	2120      	movs	r1, #32
 800800c:	9b02      	ldr	r3, [sp, #8]
 800800e:	9e01      	ldr	r6, [sp, #4]
 8008010:	1acb      	subs	r3, r1, r3
 8008012:	9303      	str	r3, [sp, #12]
 8008014:	ce02      	ldmia	r6!, {r1}
 8008016:	9b02      	ldr	r3, [sp, #8]
 8008018:	4694      	mov	ip, r2
 800801a:	40d9      	lsrs	r1, r3
 800801c:	9100      	str	r1, [sp, #0]
 800801e:	42b5      	cmp	r5, r6
 8008020:	d816      	bhi.n	8008050 <rshift+0x88>
 8008022:	9e01      	ldr	r6, [sp, #4]
 8008024:	2300      	movs	r3, #0
 8008026:	3601      	adds	r6, #1
 8008028:	42b5      	cmp	r5, r6
 800802a:	d302      	bcc.n	8008032 <rshift+0x6a>
 800802c:	1be3      	subs	r3, r4, r7
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	3b04      	subs	r3, #4
 8008032:	9900      	ldr	r1, [sp, #0]
 8008034:	18d3      	adds	r3, r2, r3
 8008036:	6019      	str	r1, [r3, #0]
 8008038:	2900      	cmp	r1, #0
 800803a:	d000      	beq.n	800803e <rshift+0x76>
 800803c:	3304      	adds	r3, #4
 800803e:	1a99      	subs	r1, r3, r2
 8008040:	1089      	asrs	r1, r1, #2
 8008042:	6101      	str	r1, [r0, #16]
 8008044:	4293      	cmp	r3, r2
 8008046:	d101      	bne.n	800804c <rshift+0x84>
 8008048:	2300      	movs	r3, #0
 800804a:	6143      	str	r3, [r0, #20]
 800804c:	b005      	add	sp, #20
 800804e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008050:	6833      	ldr	r3, [r6, #0]
 8008052:	9903      	ldr	r1, [sp, #12]
 8008054:	408b      	lsls	r3, r1
 8008056:	9900      	ldr	r1, [sp, #0]
 8008058:	4319      	orrs	r1, r3
 800805a:	4663      	mov	r3, ip
 800805c:	c302      	stmia	r3!, {r1}
 800805e:	469c      	mov	ip, r3
 8008060:	ce02      	ldmia	r6!, {r1}
 8008062:	9b02      	ldr	r3, [sp, #8]
 8008064:	40d9      	lsrs	r1, r3
 8008066:	9100      	str	r1, [sp, #0]
 8008068:	e7d9      	b.n	800801e <rshift+0x56>
 800806a:	c908      	ldmia	r1!, {r3}
 800806c:	c608      	stmia	r6!, {r3}
 800806e:	e7c1      	b.n	8007ff4 <rshift+0x2c>

08008070 <__hexdig_fun>:
 8008070:	0002      	movs	r2, r0
 8008072:	3a30      	subs	r2, #48	; 0x30
 8008074:	0003      	movs	r3, r0
 8008076:	2a09      	cmp	r2, #9
 8008078:	d802      	bhi.n	8008080 <__hexdig_fun+0x10>
 800807a:	3b20      	subs	r3, #32
 800807c:	b2d8      	uxtb	r0, r3
 800807e:	4770      	bx	lr
 8008080:	0002      	movs	r2, r0
 8008082:	3a61      	subs	r2, #97	; 0x61
 8008084:	2a05      	cmp	r2, #5
 8008086:	d801      	bhi.n	800808c <__hexdig_fun+0x1c>
 8008088:	3b47      	subs	r3, #71	; 0x47
 800808a:	e7f7      	b.n	800807c <__hexdig_fun+0xc>
 800808c:	001a      	movs	r2, r3
 800808e:	3a41      	subs	r2, #65	; 0x41
 8008090:	2000      	movs	r0, #0
 8008092:	2a05      	cmp	r2, #5
 8008094:	d8f3      	bhi.n	800807e <__hexdig_fun+0xe>
 8008096:	3b27      	subs	r3, #39	; 0x27
 8008098:	e7f0      	b.n	800807c <__hexdig_fun+0xc>
	...

0800809c <__gethex>:
 800809c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800809e:	b08d      	sub	sp, #52	; 0x34
 80080a0:	930a      	str	r3, [sp, #40]	; 0x28
 80080a2:	4bbf      	ldr	r3, [pc, #764]	; (80083a0 <__gethex+0x304>)
 80080a4:	9005      	str	r0, [sp, #20]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	9109      	str	r1, [sp, #36]	; 0x24
 80080aa:	0018      	movs	r0, r3
 80080ac:	9202      	str	r2, [sp, #8]
 80080ae:	9307      	str	r3, [sp, #28]
 80080b0:	f7f8 f82a 	bl	8000108 <strlen>
 80080b4:	2202      	movs	r2, #2
 80080b6:	9b07      	ldr	r3, [sp, #28]
 80080b8:	4252      	negs	r2, r2
 80080ba:	181b      	adds	r3, r3, r0
 80080bc:	3b01      	subs	r3, #1
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	9003      	str	r0, [sp, #12]
 80080c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80080c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080c6:	6819      	ldr	r1, [r3, #0]
 80080c8:	1c8b      	adds	r3, r1, #2
 80080ca:	1a52      	subs	r2, r2, r1
 80080cc:	18d1      	adds	r1, r2, r3
 80080ce:	9301      	str	r3, [sp, #4]
 80080d0:	9108      	str	r1, [sp, #32]
 80080d2:	9901      	ldr	r1, [sp, #4]
 80080d4:	3301      	adds	r3, #1
 80080d6:	7808      	ldrb	r0, [r1, #0]
 80080d8:	2830      	cmp	r0, #48	; 0x30
 80080da:	d0f7      	beq.n	80080cc <__gethex+0x30>
 80080dc:	f7ff ffc8 	bl	8008070 <__hexdig_fun>
 80080e0:	2300      	movs	r3, #0
 80080e2:	001c      	movs	r4, r3
 80080e4:	9304      	str	r3, [sp, #16]
 80080e6:	4298      	cmp	r0, r3
 80080e8:	d11f      	bne.n	800812a <__gethex+0x8e>
 80080ea:	9a03      	ldr	r2, [sp, #12]
 80080ec:	9907      	ldr	r1, [sp, #28]
 80080ee:	9801      	ldr	r0, [sp, #4]
 80080f0:	f001 fa64 	bl	80095bc <strncmp>
 80080f4:	0007      	movs	r7, r0
 80080f6:	42a0      	cmp	r0, r4
 80080f8:	d000      	beq.n	80080fc <__gethex+0x60>
 80080fa:	e06b      	b.n	80081d4 <__gethex+0x138>
 80080fc:	9b01      	ldr	r3, [sp, #4]
 80080fe:	9a03      	ldr	r2, [sp, #12]
 8008100:	5c98      	ldrb	r0, [r3, r2]
 8008102:	189d      	adds	r5, r3, r2
 8008104:	f7ff ffb4 	bl	8008070 <__hexdig_fun>
 8008108:	2301      	movs	r3, #1
 800810a:	9304      	str	r3, [sp, #16]
 800810c:	42a0      	cmp	r0, r4
 800810e:	d030      	beq.n	8008172 <__gethex+0xd6>
 8008110:	9501      	str	r5, [sp, #4]
 8008112:	9b01      	ldr	r3, [sp, #4]
 8008114:	7818      	ldrb	r0, [r3, #0]
 8008116:	2830      	cmp	r0, #48	; 0x30
 8008118:	d009      	beq.n	800812e <__gethex+0x92>
 800811a:	f7ff ffa9 	bl	8008070 <__hexdig_fun>
 800811e:	4242      	negs	r2, r0
 8008120:	4142      	adcs	r2, r0
 8008122:	2301      	movs	r3, #1
 8008124:	002c      	movs	r4, r5
 8008126:	9204      	str	r2, [sp, #16]
 8008128:	9308      	str	r3, [sp, #32]
 800812a:	9d01      	ldr	r5, [sp, #4]
 800812c:	e004      	b.n	8008138 <__gethex+0x9c>
 800812e:	9b01      	ldr	r3, [sp, #4]
 8008130:	3301      	adds	r3, #1
 8008132:	9301      	str	r3, [sp, #4]
 8008134:	e7ed      	b.n	8008112 <__gethex+0x76>
 8008136:	3501      	adds	r5, #1
 8008138:	7828      	ldrb	r0, [r5, #0]
 800813a:	f7ff ff99 	bl	8008070 <__hexdig_fun>
 800813e:	1e07      	subs	r7, r0, #0
 8008140:	d1f9      	bne.n	8008136 <__gethex+0x9a>
 8008142:	0028      	movs	r0, r5
 8008144:	9a03      	ldr	r2, [sp, #12]
 8008146:	9907      	ldr	r1, [sp, #28]
 8008148:	f001 fa38 	bl	80095bc <strncmp>
 800814c:	2800      	cmp	r0, #0
 800814e:	d10e      	bne.n	800816e <__gethex+0xd2>
 8008150:	2c00      	cmp	r4, #0
 8008152:	d107      	bne.n	8008164 <__gethex+0xc8>
 8008154:	9b03      	ldr	r3, [sp, #12]
 8008156:	18ed      	adds	r5, r5, r3
 8008158:	002c      	movs	r4, r5
 800815a:	7828      	ldrb	r0, [r5, #0]
 800815c:	f7ff ff88 	bl	8008070 <__hexdig_fun>
 8008160:	2800      	cmp	r0, #0
 8008162:	d102      	bne.n	800816a <__gethex+0xce>
 8008164:	1b64      	subs	r4, r4, r5
 8008166:	00a7      	lsls	r7, r4, #2
 8008168:	e003      	b.n	8008172 <__gethex+0xd6>
 800816a:	3501      	adds	r5, #1
 800816c:	e7f5      	b.n	800815a <__gethex+0xbe>
 800816e:	2c00      	cmp	r4, #0
 8008170:	d1f8      	bne.n	8008164 <__gethex+0xc8>
 8008172:	2220      	movs	r2, #32
 8008174:	782b      	ldrb	r3, [r5, #0]
 8008176:	002e      	movs	r6, r5
 8008178:	4393      	bics	r3, r2
 800817a:	2b50      	cmp	r3, #80	; 0x50
 800817c:	d11d      	bne.n	80081ba <__gethex+0x11e>
 800817e:	786b      	ldrb	r3, [r5, #1]
 8008180:	2b2b      	cmp	r3, #43	; 0x2b
 8008182:	d02c      	beq.n	80081de <__gethex+0x142>
 8008184:	2b2d      	cmp	r3, #45	; 0x2d
 8008186:	d02e      	beq.n	80081e6 <__gethex+0x14a>
 8008188:	2300      	movs	r3, #0
 800818a:	1c6e      	adds	r6, r5, #1
 800818c:	9306      	str	r3, [sp, #24]
 800818e:	7830      	ldrb	r0, [r6, #0]
 8008190:	f7ff ff6e 	bl	8008070 <__hexdig_fun>
 8008194:	1e43      	subs	r3, r0, #1
 8008196:	b2db      	uxtb	r3, r3
 8008198:	2b18      	cmp	r3, #24
 800819a:	d82b      	bhi.n	80081f4 <__gethex+0x158>
 800819c:	3810      	subs	r0, #16
 800819e:	0004      	movs	r4, r0
 80081a0:	7870      	ldrb	r0, [r6, #1]
 80081a2:	f7ff ff65 	bl	8008070 <__hexdig_fun>
 80081a6:	1e43      	subs	r3, r0, #1
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	3601      	adds	r6, #1
 80081ac:	2b18      	cmp	r3, #24
 80081ae:	d91c      	bls.n	80081ea <__gethex+0x14e>
 80081b0:	9b06      	ldr	r3, [sp, #24]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d000      	beq.n	80081b8 <__gethex+0x11c>
 80081b6:	4264      	negs	r4, r4
 80081b8:	193f      	adds	r7, r7, r4
 80081ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081bc:	601e      	str	r6, [r3, #0]
 80081be:	9b04      	ldr	r3, [sp, #16]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d019      	beq.n	80081f8 <__gethex+0x15c>
 80081c4:	2600      	movs	r6, #0
 80081c6:	9b08      	ldr	r3, [sp, #32]
 80081c8:	42b3      	cmp	r3, r6
 80081ca:	d100      	bne.n	80081ce <__gethex+0x132>
 80081cc:	3606      	adds	r6, #6
 80081ce:	0030      	movs	r0, r6
 80081d0:	b00d      	add	sp, #52	; 0x34
 80081d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081d4:	2301      	movs	r3, #1
 80081d6:	2700      	movs	r7, #0
 80081d8:	9d01      	ldr	r5, [sp, #4]
 80081da:	9304      	str	r3, [sp, #16]
 80081dc:	e7c9      	b.n	8008172 <__gethex+0xd6>
 80081de:	2300      	movs	r3, #0
 80081e0:	9306      	str	r3, [sp, #24]
 80081e2:	1cae      	adds	r6, r5, #2
 80081e4:	e7d3      	b.n	800818e <__gethex+0xf2>
 80081e6:	2301      	movs	r3, #1
 80081e8:	e7fa      	b.n	80081e0 <__gethex+0x144>
 80081ea:	230a      	movs	r3, #10
 80081ec:	435c      	muls	r4, r3
 80081ee:	1824      	adds	r4, r4, r0
 80081f0:	3c10      	subs	r4, #16
 80081f2:	e7d5      	b.n	80081a0 <__gethex+0x104>
 80081f4:	002e      	movs	r6, r5
 80081f6:	e7e0      	b.n	80081ba <__gethex+0x11e>
 80081f8:	9b01      	ldr	r3, [sp, #4]
 80081fa:	9904      	ldr	r1, [sp, #16]
 80081fc:	1aeb      	subs	r3, r5, r3
 80081fe:	3b01      	subs	r3, #1
 8008200:	2b07      	cmp	r3, #7
 8008202:	dc0a      	bgt.n	800821a <__gethex+0x17e>
 8008204:	9805      	ldr	r0, [sp, #20]
 8008206:	f000 fa87 	bl	8008718 <_Balloc>
 800820a:	1e04      	subs	r4, r0, #0
 800820c:	d108      	bne.n	8008220 <__gethex+0x184>
 800820e:	0002      	movs	r2, r0
 8008210:	21de      	movs	r1, #222	; 0xde
 8008212:	4b64      	ldr	r3, [pc, #400]	; (80083a4 <__gethex+0x308>)
 8008214:	4864      	ldr	r0, [pc, #400]	; (80083a8 <__gethex+0x30c>)
 8008216:	f001 f9f1 	bl	80095fc <__assert_func>
 800821a:	3101      	adds	r1, #1
 800821c:	105b      	asrs	r3, r3, #1
 800821e:	e7ef      	b.n	8008200 <__gethex+0x164>
 8008220:	0003      	movs	r3, r0
 8008222:	3314      	adds	r3, #20
 8008224:	9304      	str	r3, [sp, #16]
 8008226:	9309      	str	r3, [sp, #36]	; 0x24
 8008228:	2300      	movs	r3, #0
 800822a:	001e      	movs	r6, r3
 800822c:	9306      	str	r3, [sp, #24]
 800822e:	9b01      	ldr	r3, [sp, #4]
 8008230:	42ab      	cmp	r3, r5
 8008232:	d340      	bcc.n	80082b6 <__gethex+0x21a>
 8008234:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008236:	9b04      	ldr	r3, [sp, #16]
 8008238:	c540      	stmia	r5!, {r6}
 800823a:	1aed      	subs	r5, r5, r3
 800823c:	10ad      	asrs	r5, r5, #2
 800823e:	0030      	movs	r0, r6
 8008240:	6125      	str	r5, [r4, #16]
 8008242:	f000 fb61 	bl	8008908 <__hi0bits>
 8008246:	9b02      	ldr	r3, [sp, #8]
 8008248:	016d      	lsls	r5, r5, #5
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	1a2e      	subs	r6, r5, r0
 800824e:	9301      	str	r3, [sp, #4]
 8008250:	429e      	cmp	r6, r3
 8008252:	dd5a      	ble.n	800830a <__gethex+0x26e>
 8008254:	1af6      	subs	r6, r6, r3
 8008256:	0031      	movs	r1, r6
 8008258:	0020      	movs	r0, r4
 800825a:	f000 ff03 	bl	8009064 <__any_on>
 800825e:	1e05      	subs	r5, r0, #0
 8008260:	d016      	beq.n	8008290 <__gethex+0x1f4>
 8008262:	2501      	movs	r5, #1
 8008264:	211f      	movs	r1, #31
 8008266:	0028      	movs	r0, r5
 8008268:	1e73      	subs	r3, r6, #1
 800826a:	4019      	ands	r1, r3
 800826c:	4088      	lsls	r0, r1
 800826e:	0001      	movs	r1, r0
 8008270:	115a      	asrs	r2, r3, #5
 8008272:	9804      	ldr	r0, [sp, #16]
 8008274:	0092      	lsls	r2, r2, #2
 8008276:	5812      	ldr	r2, [r2, r0]
 8008278:	420a      	tst	r2, r1
 800827a:	d009      	beq.n	8008290 <__gethex+0x1f4>
 800827c:	42ab      	cmp	r3, r5
 800827e:	dd06      	ble.n	800828e <__gethex+0x1f2>
 8008280:	0020      	movs	r0, r4
 8008282:	1eb1      	subs	r1, r6, #2
 8008284:	f000 feee 	bl	8009064 <__any_on>
 8008288:	3502      	adds	r5, #2
 800828a:	2800      	cmp	r0, #0
 800828c:	d100      	bne.n	8008290 <__gethex+0x1f4>
 800828e:	2502      	movs	r5, #2
 8008290:	0031      	movs	r1, r6
 8008292:	0020      	movs	r0, r4
 8008294:	f7ff fe98 	bl	8007fc8 <rshift>
 8008298:	19bf      	adds	r7, r7, r6
 800829a:	9b02      	ldr	r3, [sp, #8]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	9303      	str	r3, [sp, #12]
 80082a0:	42bb      	cmp	r3, r7
 80082a2:	da42      	bge.n	800832a <__gethex+0x28e>
 80082a4:	0021      	movs	r1, r4
 80082a6:	9805      	ldr	r0, [sp, #20]
 80082a8:	f000 fa7a 	bl	80087a0 <_Bfree>
 80082ac:	2300      	movs	r3, #0
 80082ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80082b0:	26a3      	movs	r6, #163	; 0xa3
 80082b2:	6013      	str	r3, [r2, #0]
 80082b4:	e78b      	b.n	80081ce <__gethex+0x132>
 80082b6:	1e6b      	subs	r3, r5, #1
 80082b8:	9308      	str	r3, [sp, #32]
 80082ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	4293      	cmp	r3, r2
 80082c0:	d014      	beq.n	80082ec <__gethex+0x250>
 80082c2:	9b06      	ldr	r3, [sp, #24]
 80082c4:	2b20      	cmp	r3, #32
 80082c6:	d104      	bne.n	80082d2 <__gethex+0x236>
 80082c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082ca:	c340      	stmia	r3!, {r6}
 80082cc:	2600      	movs	r6, #0
 80082ce:	9309      	str	r3, [sp, #36]	; 0x24
 80082d0:	9606      	str	r6, [sp, #24]
 80082d2:	9b08      	ldr	r3, [sp, #32]
 80082d4:	7818      	ldrb	r0, [r3, #0]
 80082d6:	f7ff fecb 	bl	8008070 <__hexdig_fun>
 80082da:	230f      	movs	r3, #15
 80082dc:	4018      	ands	r0, r3
 80082de:	9b06      	ldr	r3, [sp, #24]
 80082e0:	9d08      	ldr	r5, [sp, #32]
 80082e2:	4098      	lsls	r0, r3
 80082e4:	3304      	adds	r3, #4
 80082e6:	4306      	orrs	r6, r0
 80082e8:	9306      	str	r3, [sp, #24]
 80082ea:	e7a0      	b.n	800822e <__gethex+0x192>
 80082ec:	2301      	movs	r3, #1
 80082ee:	9a03      	ldr	r2, [sp, #12]
 80082f0:	1a9d      	subs	r5, r3, r2
 80082f2:	9b08      	ldr	r3, [sp, #32]
 80082f4:	195d      	adds	r5, r3, r5
 80082f6:	9b01      	ldr	r3, [sp, #4]
 80082f8:	429d      	cmp	r5, r3
 80082fa:	d3e2      	bcc.n	80082c2 <__gethex+0x226>
 80082fc:	0028      	movs	r0, r5
 80082fe:	9907      	ldr	r1, [sp, #28]
 8008300:	f001 f95c 	bl	80095bc <strncmp>
 8008304:	2800      	cmp	r0, #0
 8008306:	d1dc      	bne.n	80082c2 <__gethex+0x226>
 8008308:	e791      	b.n	800822e <__gethex+0x192>
 800830a:	9b01      	ldr	r3, [sp, #4]
 800830c:	2500      	movs	r5, #0
 800830e:	429e      	cmp	r6, r3
 8008310:	dac3      	bge.n	800829a <__gethex+0x1fe>
 8008312:	1b9e      	subs	r6, r3, r6
 8008314:	0021      	movs	r1, r4
 8008316:	0032      	movs	r2, r6
 8008318:	9805      	ldr	r0, [sp, #20]
 800831a:	f000 fc5f 	bl	8008bdc <__lshift>
 800831e:	0003      	movs	r3, r0
 8008320:	3314      	adds	r3, #20
 8008322:	0004      	movs	r4, r0
 8008324:	1bbf      	subs	r7, r7, r6
 8008326:	9304      	str	r3, [sp, #16]
 8008328:	e7b7      	b.n	800829a <__gethex+0x1fe>
 800832a:	9b02      	ldr	r3, [sp, #8]
 800832c:	685e      	ldr	r6, [r3, #4]
 800832e:	42be      	cmp	r6, r7
 8008330:	dd71      	ble.n	8008416 <__gethex+0x37a>
 8008332:	9b01      	ldr	r3, [sp, #4]
 8008334:	1bf6      	subs	r6, r6, r7
 8008336:	42b3      	cmp	r3, r6
 8008338:	dc38      	bgt.n	80083ac <__gethex+0x310>
 800833a:	9b02      	ldr	r3, [sp, #8]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	2b02      	cmp	r3, #2
 8008340:	d026      	beq.n	8008390 <__gethex+0x2f4>
 8008342:	2b03      	cmp	r3, #3
 8008344:	d028      	beq.n	8008398 <__gethex+0x2fc>
 8008346:	2b01      	cmp	r3, #1
 8008348:	d119      	bne.n	800837e <__gethex+0x2e2>
 800834a:	9b01      	ldr	r3, [sp, #4]
 800834c:	42b3      	cmp	r3, r6
 800834e:	d116      	bne.n	800837e <__gethex+0x2e2>
 8008350:	2b01      	cmp	r3, #1
 8008352:	d10d      	bne.n	8008370 <__gethex+0x2d4>
 8008354:	9b02      	ldr	r3, [sp, #8]
 8008356:	2662      	movs	r6, #98	; 0x62
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	9301      	str	r3, [sp, #4]
 800835c:	9a01      	ldr	r2, [sp, #4]
 800835e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008360:	601a      	str	r2, [r3, #0]
 8008362:	2301      	movs	r3, #1
 8008364:	9a04      	ldr	r2, [sp, #16]
 8008366:	6123      	str	r3, [r4, #16]
 8008368:	6013      	str	r3, [r2, #0]
 800836a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800836c:	601c      	str	r4, [r3, #0]
 800836e:	e72e      	b.n	80081ce <__gethex+0x132>
 8008370:	9901      	ldr	r1, [sp, #4]
 8008372:	0020      	movs	r0, r4
 8008374:	3901      	subs	r1, #1
 8008376:	f000 fe75 	bl	8009064 <__any_on>
 800837a:	2800      	cmp	r0, #0
 800837c:	d1ea      	bne.n	8008354 <__gethex+0x2b8>
 800837e:	0021      	movs	r1, r4
 8008380:	9805      	ldr	r0, [sp, #20]
 8008382:	f000 fa0d 	bl	80087a0 <_Bfree>
 8008386:	2300      	movs	r3, #0
 8008388:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800838a:	2650      	movs	r6, #80	; 0x50
 800838c:	6013      	str	r3, [r2, #0]
 800838e:	e71e      	b.n	80081ce <__gethex+0x132>
 8008390:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008392:	2b00      	cmp	r3, #0
 8008394:	d1f3      	bne.n	800837e <__gethex+0x2e2>
 8008396:	e7dd      	b.n	8008354 <__gethex+0x2b8>
 8008398:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800839a:	2b00      	cmp	r3, #0
 800839c:	d1da      	bne.n	8008354 <__gethex+0x2b8>
 800839e:	e7ee      	b.n	800837e <__gethex+0x2e2>
 80083a0:	0800a568 	.word	0x0800a568
 80083a4:	0800a4f0 	.word	0x0800a4f0
 80083a8:	0800a501 	.word	0x0800a501
 80083ac:	1e77      	subs	r7, r6, #1
 80083ae:	2d00      	cmp	r5, #0
 80083b0:	d12f      	bne.n	8008412 <__gethex+0x376>
 80083b2:	2f00      	cmp	r7, #0
 80083b4:	d004      	beq.n	80083c0 <__gethex+0x324>
 80083b6:	0039      	movs	r1, r7
 80083b8:	0020      	movs	r0, r4
 80083ba:	f000 fe53 	bl	8009064 <__any_on>
 80083be:	0005      	movs	r5, r0
 80083c0:	231f      	movs	r3, #31
 80083c2:	117a      	asrs	r2, r7, #5
 80083c4:	401f      	ands	r7, r3
 80083c6:	3b1e      	subs	r3, #30
 80083c8:	40bb      	lsls	r3, r7
 80083ca:	9904      	ldr	r1, [sp, #16]
 80083cc:	0092      	lsls	r2, r2, #2
 80083ce:	5852      	ldr	r2, [r2, r1]
 80083d0:	421a      	tst	r2, r3
 80083d2:	d001      	beq.n	80083d8 <__gethex+0x33c>
 80083d4:	2302      	movs	r3, #2
 80083d6:	431d      	orrs	r5, r3
 80083d8:	9b01      	ldr	r3, [sp, #4]
 80083da:	0031      	movs	r1, r6
 80083dc:	1b9b      	subs	r3, r3, r6
 80083de:	2602      	movs	r6, #2
 80083e0:	0020      	movs	r0, r4
 80083e2:	9301      	str	r3, [sp, #4]
 80083e4:	f7ff fdf0 	bl	8007fc8 <rshift>
 80083e8:	9b02      	ldr	r3, [sp, #8]
 80083ea:	685f      	ldr	r7, [r3, #4]
 80083ec:	2d00      	cmp	r5, #0
 80083ee:	d041      	beq.n	8008474 <__gethex+0x3d8>
 80083f0:	9b02      	ldr	r3, [sp, #8]
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	2b02      	cmp	r3, #2
 80083f6:	d010      	beq.n	800841a <__gethex+0x37e>
 80083f8:	2b03      	cmp	r3, #3
 80083fa:	d012      	beq.n	8008422 <__gethex+0x386>
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d106      	bne.n	800840e <__gethex+0x372>
 8008400:	07aa      	lsls	r2, r5, #30
 8008402:	d504      	bpl.n	800840e <__gethex+0x372>
 8008404:	9a04      	ldr	r2, [sp, #16]
 8008406:	6810      	ldr	r0, [r2, #0]
 8008408:	4305      	orrs	r5, r0
 800840a:	421d      	tst	r5, r3
 800840c:	d10c      	bne.n	8008428 <__gethex+0x38c>
 800840e:	2310      	movs	r3, #16
 8008410:	e02f      	b.n	8008472 <__gethex+0x3d6>
 8008412:	2501      	movs	r5, #1
 8008414:	e7d4      	b.n	80083c0 <__gethex+0x324>
 8008416:	2601      	movs	r6, #1
 8008418:	e7e8      	b.n	80083ec <__gethex+0x350>
 800841a:	2301      	movs	r3, #1
 800841c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800841e:	1a9b      	subs	r3, r3, r2
 8008420:	9313      	str	r3, [sp, #76]	; 0x4c
 8008422:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008424:	2b00      	cmp	r3, #0
 8008426:	d0f2      	beq.n	800840e <__gethex+0x372>
 8008428:	6923      	ldr	r3, [r4, #16]
 800842a:	2000      	movs	r0, #0
 800842c:	9303      	str	r3, [sp, #12]
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	9304      	str	r3, [sp, #16]
 8008432:	0023      	movs	r3, r4
 8008434:	9a04      	ldr	r2, [sp, #16]
 8008436:	3314      	adds	r3, #20
 8008438:	1899      	adds	r1, r3, r2
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	1c55      	adds	r5, r2, #1
 800843e:	d01e      	beq.n	800847e <__gethex+0x3e2>
 8008440:	3201      	adds	r2, #1
 8008442:	601a      	str	r2, [r3, #0]
 8008444:	0023      	movs	r3, r4
 8008446:	3314      	adds	r3, #20
 8008448:	2e02      	cmp	r6, #2
 800844a:	d140      	bne.n	80084ce <__gethex+0x432>
 800844c:	9a02      	ldr	r2, [sp, #8]
 800844e:	9901      	ldr	r1, [sp, #4]
 8008450:	6812      	ldr	r2, [r2, #0]
 8008452:	3a01      	subs	r2, #1
 8008454:	428a      	cmp	r2, r1
 8008456:	d10b      	bne.n	8008470 <__gethex+0x3d4>
 8008458:	114a      	asrs	r2, r1, #5
 800845a:	211f      	movs	r1, #31
 800845c:	9801      	ldr	r0, [sp, #4]
 800845e:	0092      	lsls	r2, r2, #2
 8008460:	4001      	ands	r1, r0
 8008462:	2001      	movs	r0, #1
 8008464:	0005      	movs	r5, r0
 8008466:	408d      	lsls	r5, r1
 8008468:	58d3      	ldr	r3, [r2, r3]
 800846a:	422b      	tst	r3, r5
 800846c:	d000      	beq.n	8008470 <__gethex+0x3d4>
 800846e:	2601      	movs	r6, #1
 8008470:	2320      	movs	r3, #32
 8008472:	431e      	orrs	r6, r3
 8008474:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008476:	601c      	str	r4, [r3, #0]
 8008478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800847a:	601f      	str	r7, [r3, #0]
 800847c:	e6a7      	b.n	80081ce <__gethex+0x132>
 800847e:	c301      	stmia	r3!, {r0}
 8008480:	4299      	cmp	r1, r3
 8008482:	d8da      	bhi.n	800843a <__gethex+0x39e>
 8008484:	9b03      	ldr	r3, [sp, #12]
 8008486:	68a2      	ldr	r2, [r4, #8]
 8008488:	4293      	cmp	r3, r2
 800848a:	db17      	blt.n	80084bc <__gethex+0x420>
 800848c:	6863      	ldr	r3, [r4, #4]
 800848e:	9805      	ldr	r0, [sp, #20]
 8008490:	1c59      	adds	r1, r3, #1
 8008492:	f000 f941 	bl	8008718 <_Balloc>
 8008496:	1e05      	subs	r5, r0, #0
 8008498:	d103      	bne.n	80084a2 <__gethex+0x406>
 800849a:	0002      	movs	r2, r0
 800849c:	2184      	movs	r1, #132	; 0x84
 800849e:	4b1c      	ldr	r3, [pc, #112]	; (8008510 <__gethex+0x474>)
 80084a0:	e6b8      	b.n	8008214 <__gethex+0x178>
 80084a2:	0021      	movs	r1, r4
 80084a4:	6923      	ldr	r3, [r4, #16]
 80084a6:	310c      	adds	r1, #12
 80084a8:	1c9a      	adds	r2, r3, #2
 80084aa:	0092      	lsls	r2, r2, #2
 80084ac:	300c      	adds	r0, #12
 80084ae:	f000 f92a 	bl	8008706 <memcpy>
 80084b2:	0021      	movs	r1, r4
 80084b4:	9805      	ldr	r0, [sp, #20]
 80084b6:	f000 f973 	bl	80087a0 <_Bfree>
 80084ba:	002c      	movs	r4, r5
 80084bc:	6923      	ldr	r3, [r4, #16]
 80084be:	1c5a      	adds	r2, r3, #1
 80084c0:	6122      	str	r2, [r4, #16]
 80084c2:	2201      	movs	r2, #1
 80084c4:	3304      	adds	r3, #4
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	18e3      	adds	r3, r4, r3
 80084ca:	605a      	str	r2, [r3, #4]
 80084cc:	e7ba      	b.n	8008444 <__gethex+0x3a8>
 80084ce:	6922      	ldr	r2, [r4, #16]
 80084d0:	9903      	ldr	r1, [sp, #12]
 80084d2:	428a      	cmp	r2, r1
 80084d4:	dd09      	ble.n	80084ea <__gethex+0x44e>
 80084d6:	2101      	movs	r1, #1
 80084d8:	0020      	movs	r0, r4
 80084da:	f7ff fd75 	bl	8007fc8 <rshift>
 80084de:	9b02      	ldr	r3, [sp, #8]
 80084e0:	3701      	adds	r7, #1
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	42bb      	cmp	r3, r7
 80084e6:	dac2      	bge.n	800846e <__gethex+0x3d2>
 80084e8:	e6dc      	b.n	80082a4 <__gethex+0x208>
 80084ea:	221f      	movs	r2, #31
 80084ec:	9d01      	ldr	r5, [sp, #4]
 80084ee:	9901      	ldr	r1, [sp, #4]
 80084f0:	2601      	movs	r6, #1
 80084f2:	4015      	ands	r5, r2
 80084f4:	4211      	tst	r1, r2
 80084f6:	d0bb      	beq.n	8008470 <__gethex+0x3d4>
 80084f8:	9a04      	ldr	r2, [sp, #16]
 80084fa:	189b      	adds	r3, r3, r2
 80084fc:	3b04      	subs	r3, #4
 80084fe:	6818      	ldr	r0, [r3, #0]
 8008500:	f000 fa02 	bl	8008908 <__hi0bits>
 8008504:	2320      	movs	r3, #32
 8008506:	1b5d      	subs	r5, r3, r5
 8008508:	42a8      	cmp	r0, r5
 800850a:	dbe4      	blt.n	80084d6 <__gethex+0x43a>
 800850c:	e7b0      	b.n	8008470 <__gethex+0x3d4>
 800850e:	46c0      	nop			; (mov r8, r8)
 8008510:	0800a4f0 	.word	0x0800a4f0

08008514 <L_shift>:
 8008514:	2308      	movs	r3, #8
 8008516:	b570      	push	{r4, r5, r6, lr}
 8008518:	2520      	movs	r5, #32
 800851a:	1a9a      	subs	r2, r3, r2
 800851c:	0092      	lsls	r2, r2, #2
 800851e:	1aad      	subs	r5, r5, r2
 8008520:	6843      	ldr	r3, [r0, #4]
 8008522:	6806      	ldr	r6, [r0, #0]
 8008524:	001c      	movs	r4, r3
 8008526:	40ac      	lsls	r4, r5
 8008528:	40d3      	lsrs	r3, r2
 800852a:	4334      	orrs	r4, r6
 800852c:	6004      	str	r4, [r0, #0]
 800852e:	6043      	str	r3, [r0, #4]
 8008530:	3004      	adds	r0, #4
 8008532:	4288      	cmp	r0, r1
 8008534:	d3f4      	bcc.n	8008520 <L_shift+0xc>
 8008536:	bd70      	pop	{r4, r5, r6, pc}

08008538 <__match>:
 8008538:	b530      	push	{r4, r5, lr}
 800853a:	6803      	ldr	r3, [r0, #0]
 800853c:	780c      	ldrb	r4, [r1, #0]
 800853e:	3301      	adds	r3, #1
 8008540:	2c00      	cmp	r4, #0
 8008542:	d102      	bne.n	800854a <__match+0x12>
 8008544:	6003      	str	r3, [r0, #0]
 8008546:	2001      	movs	r0, #1
 8008548:	bd30      	pop	{r4, r5, pc}
 800854a:	781a      	ldrb	r2, [r3, #0]
 800854c:	0015      	movs	r5, r2
 800854e:	3d41      	subs	r5, #65	; 0x41
 8008550:	2d19      	cmp	r5, #25
 8008552:	d800      	bhi.n	8008556 <__match+0x1e>
 8008554:	3220      	adds	r2, #32
 8008556:	3101      	adds	r1, #1
 8008558:	42a2      	cmp	r2, r4
 800855a:	d0ef      	beq.n	800853c <__match+0x4>
 800855c:	2000      	movs	r0, #0
 800855e:	e7f3      	b.n	8008548 <__match+0x10>

08008560 <__hexnan>:
 8008560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008562:	680b      	ldr	r3, [r1, #0]
 8008564:	b08b      	sub	sp, #44	; 0x2c
 8008566:	9201      	str	r2, [sp, #4]
 8008568:	9901      	ldr	r1, [sp, #4]
 800856a:	115a      	asrs	r2, r3, #5
 800856c:	0092      	lsls	r2, r2, #2
 800856e:	188a      	adds	r2, r1, r2
 8008570:	9202      	str	r2, [sp, #8]
 8008572:	0019      	movs	r1, r3
 8008574:	221f      	movs	r2, #31
 8008576:	4011      	ands	r1, r2
 8008578:	9008      	str	r0, [sp, #32]
 800857a:	9106      	str	r1, [sp, #24]
 800857c:	4213      	tst	r3, r2
 800857e:	d002      	beq.n	8008586 <__hexnan+0x26>
 8008580:	9b02      	ldr	r3, [sp, #8]
 8008582:	3304      	adds	r3, #4
 8008584:	9302      	str	r3, [sp, #8]
 8008586:	9b02      	ldr	r3, [sp, #8]
 8008588:	2500      	movs	r5, #0
 800858a:	1f1e      	subs	r6, r3, #4
 800858c:	0037      	movs	r7, r6
 800858e:	0034      	movs	r4, r6
 8008590:	9b08      	ldr	r3, [sp, #32]
 8008592:	6035      	str	r5, [r6, #0]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	9507      	str	r5, [sp, #28]
 8008598:	9305      	str	r3, [sp, #20]
 800859a:	9503      	str	r5, [sp, #12]
 800859c:	9b05      	ldr	r3, [sp, #20]
 800859e:	3301      	adds	r3, #1
 80085a0:	9309      	str	r3, [sp, #36]	; 0x24
 80085a2:	9b05      	ldr	r3, [sp, #20]
 80085a4:	785b      	ldrb	r3, [r3, #1]
 80085a6:	9304      	str	r3, [sp, #16]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d028      	beq.n	80085fe <__hexnan+0x9e>
 80085ac:	9804      	ldr	r0, [sp, #16]
 80085ae:	f7ff fd5f 	bl	8008070 <__hexdig_fun>
 80085b2:	2800      	cmp	r0, #0
 80085b4:	d154      	bne.n	8008660 <__hexnan+0x100>
 80085b6:	9b04      	ldr	r3, [sp, #16]
 80085b8:	2b20      	cmp	r3, #32
 80085ba:	d819      	bhi.n	80085f0 <__hexnan+0x90>
 80085bc:	9b03      	ldr	r3, [sp, #12]
 80085be:	9a07      	ldr	r2, [sp, #28]
 80085c0:	4293      	cmp	r3, r2
 80085c2:	dd12      	ble.n	80085ea <__hexnan+0x8a>
 80085c4:	42bc      	cmp	r4, r7
 80085c6:	d206      	bcs.n	80085d6 <__hexnan+0x76>
 80085c8:	2d07      	cmp	r5, #7
 80085ca:	dc04      	bgt.n	80085d6 <__hexnan+0x76>
 80085cc:	002a      	movs	r2, r5
 80085ce:	0039      	movs	r1, r7
 80085d0:	0020      	movs	r0, r4
 80085d2:	f7ff ff9f 	bl	8008514 <L_shift>
 80085d6:	9b01      	ldr	r3, [sp, #4]
 80085d8:	2508      	movs	r5, #8
 80085da:	429c      	cmp	r4, r3
 80085dc:	d905      	bls.n	80085ea <__hexnan+0x8a>
 80085de:	1f27      	subs	r7, r4, #4
 80085e0:	2500      	movs	r5, #0
 80085e2:	003c      	movs	r4, r7
 80085e4:	9b03      	ldr	r3, [sp, #12]
 80085e6:	603d      	str	r5, [r7, #0]
 80085e8:	9307      	str	r3, [sp, #28]
 80085ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085ec:	9305      	str	r3, [sp, #20]
 80085ee:	e7d5      	b.n	800859c <__hexnan+0x3c>
 80085f0:	9b04      	ldr	r3, [sp, #16]
 80085f2:	2b29      	cmp	r3, #41	; 0x29
 80085f4:	d159      	bne.n	80086aa <__hexnan+0x14a>
 80085f6:	9b05      	ldr	r3, [sp, #20]
 80085f8:	9a08      	ldr	r2, [sp, #32]
 80085fa:	3302      	adds	r3, #2
 80085fc:	6013      	str	r3, [r2, #0]
 80085fe:	9b03      	ldr	r3, [sp, #12]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d052      	beq.n	80086aa <__hexnan+0x14a>
 8008604:	42bc      	cmp	r4, r7
 8008606:	d206      	bcs.n	8008616 <__hexnan+0xb6>
 8008608:	2d07      	cmp	r5, #7
 800860a:	dc04      	bgt.n	8008616 <__hexnan+0xb6>
 800860c:	002a      	movs	r2, r5
 800860e:	0039      	movs	r1, r7
 8008610:	0020      	movs	r0, r4
 8008612:	f7ff ff7f 	bl	8008514 <L_shift>
 8008616:	9b01      	ldr	r3, [sp, #4]
 8008618:	429c      	cmp	r4, r3
 800861a:	d935      	bls.n	8008688 <__hexnan+0x128>
 800861c:	001a      	movs	r2, r3
 800861e:	0023      	movs	r3, r4
 8008620:	cb02      	ldmia	r3!, {r1}
 8008622:	c202      	stmia	r2!, {r1}
 8008624:	429e      	cmp	r6, r3
 8008626:	d2fb      	bcs.n	8008620 <__hexnan+0xc0>
 8008628:	9b02      	ldr	r3, [sp, #8]
 800862a:	1c61      	adds	r1, r4, #1
 800862c:	1eda      	subs	r2, r3, #3
 800862e:	2304      	movs	r3, #4
 8008630:	4291      	cmp	r1, r2
 8008632:	d805      	bhi.n	8008640 <__hexnan+0xe0>
 8008634:	9b02      	ldr	r3, [sp, #8]
 8008636:	3b04      	subs	r3, #4
 8008638:	1b1b      	subs	r3, r3, r4
 800863a:	089b      	lsrs	r3, r3, #2
 800863c:	3301      	adds	r3, #1
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	9a01      	ldr	r2, [sp, #4]
 8008642:	18d3      	adds	r3, r2, r3
 8008644:	2200      	movs	r2, #0
 8008646:	c304      	stmia	r3!, {r2}
 8008648:	429e      	cmp	r6, r3
 800864a:	d2fc      	bcs.n	8008646 <__hexnan+0xe6>
 800864c:	6833      	ldr	r3, [r6, #0]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d104      	bne.n	800865c <__hexnan+0xfc>
 8008652:	9b01      	ldr	r3, [sp, #4]
 8008654:	429e      	cmp	r6, r3
 8008656:	d126      	bne.n	80086a6 <__hexnan+0x146>
 8008658:	2301      	movs	r3, #1
 800865a:	6033      	str	r3, [r6, #0]
 800865c:	2005      	movs	r0, #5
 800865e:	e025      	b.n	80086ac <__hexnan+0x14c>
 8008660:	9b03      	ldr	r3, [sp, #12]
 8008662:	3501      	adds	r5, #1
 8008664:	3301      	adds	r3, #1
 8008666:	9303      	str	r3, [sp, #12]
 8008668:	2d08      	cmp	r5, #8
 800866a:	dd06      	ble.n	800867a <__hexnan+0x11a>
 800866c:	9b01      	ldr	r3, [sp, #4]
 800866e:	429c      	cmp	r4, r3
 8008670:	d9bb      	bls.n	80085ea <__hexnan+0x8a>
 8008672:	2300      	movs	r3, #0
 8008674:	2501      	movs	r5, #1
 8008676:	3c04      	subs	r4, #4
 8008678:	6023      	str	r3, [r4, #0]
 800867a:	220f      	movs	r2, #15
 800867c:	6823      	ldr	r3, [r4, #0]
 800867e:	4010      	ands	r0, r2
 8008680:	011b      	lsls	r3, r3, #4
 8008682:	4318      	orrs	r0, r3
 8008684:	6020      	str	r0, [r4, #0]
 8008686:	e7b0      	b.n	80085ea <__hexnan+0x8a>
 8008688:	9b06      	ldr	r3, [sp, #24]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d0de      	beq.n	800864c <__hexnan+0xec>
 800868e:	2120      	movs	r1, #32
 8008690:	9a06      	ldr	r2, [sp, #24]
 8008692:	9b02      	ldr	r3, [sp, #8]
 8008694:	1a89      	subs	r1, r1, r2
 8008696:	2201      	movs	r2, #1
 8008698:	4252      	negs	r2, r2
 800869a:	40ca      	lsrs	r2, r1
 800869c:	3b04      	subs	r3, #4
 800869e:	6819      	ldr	r1, [r3, #0]
 80086a0:	400a      	ands	r2, r1
 80086a2:	601a      	str	r2, [r3, #0]
 80086a4:	e7d2      	b.n	800864c <__hexnan+0xec>
 80086a6:	3e04      	subs	r6, #4
 80086a8:	e7d0      	b.n	800864c <__hexnan+0xec>
 80086aa:	2004      	movs	r0, #4
 80086ac:	b00b      	add	sp, #44	; 0x2c
 80086ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080086b0 <_localeconv_r>:
 80086b0:	4800      	ldr	r0, [pc, #0]	; (80086b4 <_localeconv_r+0x4>)
 80086b2:	4770      	bx	lr
 80086b4:	20000164 	.word	0x20000164

080086b8 <malloc>:
 80086b8:	b510      	push	{r4, lr}
 80086ba:	4b03      	ldr	r3, [pc, #12]	; (80086c8 <malloc+0x10>)
 80086bc:	0001      	movs	r1, r0
 80086be:	6818      	ldr	r0, [r3, #0]
 80086c0:	f000 fd8c 	bl	80091dc <_malloc_r>
 80086c4:	bd10      	pop	{r4, pc}
 80086c6:	46c0      	nop			; (mov r8, r8)
 80086c8:	2000000c 	.word	0x2000000c

080086cc <__ascii_mbtowc>:
 80086cc:	b082      	sub	sp, #8
 80086ce:	2900      	cmp	r1, #0
 80086d0:	d100      	bne.n	80086d4 <__ascii_mbtowc+0x8>
 80086d2:	a901      	add	r1, sp, #4
 80086d4:	1e10      	subs	r0, r2, #0
 80086d6:	d006      	beq.n	80086e6 <__ascii_mbtowc+0x1a>
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d006      	beq.n	80086ea <__ascii_mbtowc+0x1e>
 80086dc:	7813      	ldrb	r3, [r2, #0]
 80086de:	600b      	str	r3, [r1, #0]
 80086e0:	7810      	ldrb	r0, [r2, #0]
 80086e2:	1e43      	subs	r3, r0, #1
 80086e4:	4198      	sbcs	r0, r3
 80086e6:	b002      	add	sp, #8
 80086e8:	4770      	bx	lr
 80086ea:	2002      	movs	r0, #2
 80086ec:	4240      	negs	r0, r0
 80086ee:	e7fa      	b.n	80086e6 <__ascii_mbtowc+0x1a>

080086f0 <memchr>:
 80086f0:	b2c9      	uxtb	r1, r1
 80086f2:	1882      	adds	r2, r0, r2
 80086f4:	4290      	cmp	r0, r2
 80086f6:	d101      	bne.n	80086fc <memchr+0xc>
 80086f8:	2000      	movs	r0, #0
 80086fa:	4770      	bx	lr
 80086fc:	7803      	ldrb	r3, [r0, #0]
 80086fe:	428b      	cmp	r3, r1
 8008700:	d0fb      	beq.n	80086fa <memchr+0xa>
 8008702:	3001      	adds	r0, #1
 8008704:	e7f6      	b.n	80086f4 <memchr+0x4>

08008706 <memcpy>:
 8008706:	2300      	movs	r3, #0
 8008708:	b510      	push	{r4, lr}
 800870a:	429a      	cmp	r2, r3
 800870c:	d100      	bne.n	8008710 <memcpy+0xa>
 800870e:	bd10      	pop	{r4, pc}
 8008710:	5ccc      	ldrb	r4, [r1, r3]
 8008712:	54c4      	strb	r4, [r0, r3]
 8008714:	3301      	adds	r3, #1
 8008716:	e7f8      	b.n	800870a <memcpy+0x4>

08008718 <_Balloc>:
 8008718:	b570      	push	{r4, r5, r6, lr}
 800871a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800871c:	0006      	movs	r6, r0
 800871e:	000c      	movs	r4, r1
 8008720:	2d00      	cmp	r5, #0
 8008722:	d10e      	bne.n	8008742 <_Balloc+0x2a>
 8008724:	2010      	movs	r0, #16
 8008726:	f7ff ffc7 	bl	80086b8 <malloc>
 800872a:	1e02      	subs	r2, r0, #0
 800872c:	6270      	str	r0, [r6, #36]	; 0x24
 800872e:	d104      	bne.n	800873a <_Balloc+0x22>
 8008730:	2166      	movs	r1, #102	; 0x66
 8008732:	4b19      	ldr	r3, [pc, #100]	; (8008798 <_Balloc+0x80>)
 8008734:	4819      	ldr	r0, [pc, #100]	; (800879c <_Balloc+0x84>)
 8008736:	f000 ff61 	bl	80095fc <__assert_func>
 800873a:	6045      	str	r5, [r0, #4]
 800873c:	6085      	str	r5, [r0, #8]
 800873e:	6005      	str	r5, [r0, #0]
 8008740:	60c5      	str	r5, [r0, #12]
 8008742:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8008744:	68eb      	ldr	r3, [r5, #12]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d013      	beq.n	8008772 <_Balloc+0x5a>
 800874a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800874c:	00a2      	lsls	r2, r4, #2
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	189b      	adds	r3, r3, r2
 8008752:	6818      	ldr	r0, [r3, #0]
 8008754:	2800      	cmp	r0, #0
 8008756:	d118      	bne.n	800878a <_Balloc+0x72>
 8008758:	2101      	movs	r1, #1
 800875a:	000d      	movs	r5, r1
 800875c:	40a5      	lsls	r5, r4
 800875e:	1d6a      	adds	r2, r5, #5
 8008760:	0030      	movs	r0, r6
 8008762:	0092      	lsls	r2, r2, #2
 8008764:	f000 fca1 	bl	80090aa <_calloc_r>
 8008768:	2800      	cmp	r0, #0
 800876a:	d00c      	beq.n	8008786 <_Balloc+0x6e>
 800876c:	6044      	str	r4, [r0, #4]
 800876e:	6085      	str	r5, [r0, #8]
 8008770:	e00d      	b.n	800878e <_Balloc+0x76>
 8008772:	2221      	movs	r2, #33	; 0x21
 8008774:	2104      	movs	r1, #4
 8008776:	0030      	movs	r0, r6
 8008778:	f000 fc97 	bl	80090aa <_calloc_r>
 800877c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800877e:	60e8      	str	r0, [r5, #12]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d1e1      	bne.n	800874a <_Balloc+0x32>
 8008786:	2000      	movs	r0, #0
 8008788:	bd70      	pop	{r4, r5, r6, pc}
 800878a:	6802      	ldr	r2, [r0, #0]
 800878c:	601a      	str	r2, [r3, #0]
 800878e:	2300      	movs	r3, #0
 8008790:	6103      	str	r3, [r0, #16]
 8008792:	60c3      	str	r3, [r0, #12]
 8008794:	e7f8      	b.n	8008788 <_Balloc+0x70>
 8008796:	46c0      	nop			; (mov r8, r8)
 8008798:	0800a47e 	.word	0x0800a47e
 800879c:	0800a57c 	.word	0x0800a57c

080087a0 <_Bfree>:
 80087a0:	b570      	push	{r4, r5, r6, lr}
 80087a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80087a4:	0005      	movs	r5, r0
 80087a6:	000c      	movs	r4, r1
 80087a8:	2e00      	cmp	r6, #0
 80087aa:	d10e      	bne.n	80087ca <_Bfree+0x2a>
 80087ac:	2010      	movs	r0, #16
 80087ae:	f7ff ff83 	bl	80086b8 <malloc>
 80087b2:	1e02      	subs	r2, r0, #0
 80087b4:	6268      	str	r0, [r5, #36]	; 0x24
 80087b6:	d104      	bne.n	80087c2 <_Bfree+0x22>
 80087b8:	218a      	movs	r1, #138	; 0x8a
 80087ba:	4b09      	ldr	r3, [pc, #36]	; (80087e0 <_Bfree+0x40>)
 80087bc:	4809      	ldr	r0, [pc, #36]	; (80087e4 <_Bfree+0x44>)
 80087be:	f000 ff1d 	bl	80095fc <__assert_func>
 80087c2:	6046      	str	r6, [r0, #4]
 80087c4:	6086      	str	r6, [r0, #8]
 80087c6:	6006      	str	r6, [r0, #0]
 80087c8:	60c6      	str	r6, [r0, #12]
 80087ca:	2c00      	cmp	r4, #0
 80087cc:	d007      	beq.n	80087de <_Bfree+0x3e>
 80087ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80087d0:	6862      	ldr	r2, [r4, #4]
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	0092      	lsls	r2, r2, #2
 80087d6:	189b      	adds	r3, r3, r2
 80087d8:	681a      	ldr	r2, [r3, #0]
 80087da:	6022      	str	r2, [r4, #0]
 80087dc:	601c      	str	r4, [r3, #0]
 80087de:	bd70      	pop	{r4, r5, r6, pc}
 80087e0:	0800a47e 	.word	0x0800a47e
 80087e4:	0800a57c 	.word	0x0800a57c

080087e8 <__multadd>:
 80087e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087ea:	000e      	movs	r6, r1
 80087ec:	9001      	str	r0, [sp, #4]
 80087ee:	000c      	movs	r4, r1
 80087f0:	001d      	movs	r5, r3
 80087f2:	2000      	movs	r0, #0
 80087f4:	690f      	ldr	r7, [r1, #16]
 80087f6:	3614      	adds	r6, #20
 80087f8:	6833      	ldr	r3, [r6, #0]
 80087fa:	3001      	adds	r0, #1
 80087fc:	b299      	uxth	r1, r3
 80087fe:	4351      	muls	r1, r2
 8008800:	0c1b      	lsrs	r3, r3, #16
 8008802:	4353      	muls	r3, r2
 8008804:	1949      	adds	r1, r1, r5
 8008806:	0c0d      	lsrs	r5, r1, #16
 8008808:	195b      	adds	r3, r3, r5
 800880a:	0c1d      	lsrs	r5, r3, #16
 800880c:	b289      	uxth	r1, r1
 800880e:	041b      	lsls	r3, r3, #16
 8008810:	185b      	adds	r3, r3, r1
 8008812:	c608      	stmia	r6!, {r3}
 8008814:	4287      	cmp	r7, r0
 8008816:	dcef      	bgt.n	80087f8 <__multadd+0x10>
 8008818:	2d00      	cmp	r5, #0
 800881a:	d022      	beq.n	8008862 <__multadd+0x7a>
 800881c:	68a3      	ldr	r3, [r4, #8]
 800881e:	42bb      	cmp	r3, r7
 8008820:	dc19      	bgt.n	8008856 <__multadd+0x6e>
 8008822:	6863      	ldr	r3, [r4, #4]
 8008824:	9801      	ldr	r0, [sp, #4]
 8008826:	1c59      	adds	r1, r3, #1
 8008828:	f7ff ff76 	bl	8008718 <_Balloc>
 800882c:	1e06      	subs	r6, r0, #0
 800882e:	d105      	bne.n	800883c <__multadd+0x54>
 8008830:	0002      	movs	r2, r0
 8008832:	21b5      	movs	r1, #181	; 0xb5
 8008834:	4b0c      	ldr	r3, [pc, #48]	; (8008868 <__multadd+0x80>)
 8008836:	480d      	ldr	r0, [pc, #52]	; (800886c <__multadd+0x84>)
 8008838:	f000 fee0 	bl	80095fc <__assert_func>
 800883c:	0021      	movs	r1, r4
 800883e:	6923      	ldr	r3, [r4, #16]
 8008840:	310c      	adds	r1, #12
 8008842:	1c9a      	adds	r2, r3, #2
 8008844:	0092      	lsls	r2, r2, #2
 8008846:	300c      	adds	r0, #12
 8008848:	f7ff ff5d 	bl	8008706 <memcpy>
 800884c:	0021      	movs	r1, r4
 800884e:	9801      	ldr	r0, [sp, #4]
 8008850:	f7ff ffa6 	bl	80087a0 <_Bfree>
 8008854:	0034      	movs	r4, r6
 8008856:	1d3b      	adds	r3, r7, #4
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	18e3      	adds	r3, r4, r3
 800885c:	605d      	str	r5, [r3, #4]
 800885e:	1c7b      	adds	r3, r7, #1
 8008860:	6123      	str	r3, [r4, #16]
 8008862:	0020      	movs	r0, r4
 8008864:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008866:	46c0      	nop			; (mov r8, r8)
 8008868:	0800a4f0 	.word	0x0800a4f0
 800886c:	0800a57c 	.word	0x0800a57c

08008870 <__s2b>:
 8008870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008872:	0006      	movs	r6, r0
 8008874:	0018      	movs	r0, r3
 8008876:	000c      	movs	r4, r1
 8008878:	3008      	adds	r0, #8
 800887a:	2109      	movs	r1, #9
 800887c:	9301      	str	r3, [sp, #4]
 800887e:	0015      	movs	r5, r2
 8008880:	f7f7 fce8 	bl	8000254 <__divsi3>
 8008884:	2301      	movs	r3, #1
 8008886:	2100      	movs	r1, #0
 8008888:	4283      	cmp	r3, r0
 800888a:	db0a      	blt.n	80088a2 <__s2b+0x32>
 800888c:	0030      	movs	r0, r6
 800888e:	f7ff ff43 	bl	8008718 <_Balloc>
 8008892:	1e01      	subs	r1, r0, #0
 8008894:	d108      	bne.n	80088a8 <__s2b+0x38>
 8008896:	0002      	movs	r2, r0
 8008898:	4b19      	ldr	r3, [pc, #100]	; (8008900 <__s2b+0x90>)
 800889a:	481a      	ldr	r0, [pc, #104]	; (8008904 <__s2b+0x94>)
 800889c:	31ce      	adds	r1, #206	; 0xce
 800889e:	f000 fead 	bl	80095fc <__assert_func>
 80088a2:	005b      	lsls	r3, r3, #1
 80088a4:	3101      	adds	r1, #1
 80088a6:	e7ef      	b.n	8008888 <__s2b+0x18>
 80088a8:	9b08      	ldr	r3, [sp, #32]
 80088aa:	6143      	str	r3, [r0, #20]
 80088ac:	2301      	movs	r3, #1
 80088ae:	6103      	str	r3, [r0, #16]
 80088b0:	2d09      	cmp	r5, #9
 80088b2:	dd18      	ble.n	80088e6 <__s2b+0x76>
 80088b4:	0023      	movs	r3, r4
 80088b6:	3309      	adds	r3, #9
 80088b8:	001f      	movs	r7, r3
 80088ba:	9300      	str	r3, [sp, #0]
 80088bc:	1964      	adds	r4, r4, r5
 80088be:	783b      	ldrb	r3, [r7, #0]
 80088c0:	220a      	movs	r2, #10
 80088c2:	0030      	movs	r0, r6
 80088c4:	3b30      	subs	r3, #48	; 0x30
 80088c6:	f7ff ff8f 	bl	80087e8 <__multadd>
 80088ca:	3701      	adds	r7, #1
 80088cc:	0001      	movs	r1, r0
 80088ce:	42a7      	cmp	r7, r4
 80088d0:	d1f5      	bne.n	80088be <__s2b+0x4e>
 80088d2:	002c      	movs	r4, r5
 80088d4:	9b00      	ldr	r3, [sp, #0]
 80088d6:	3c08      	subs	r4, #8
 80088d8:	191c      	adds	r4, r3, r4
 80088da:	002f      	movs	r7, r5
 80088dc:	9b01      	ldr	r3, [sp, #4]
 80088de:	429f      	cmp	r7, r3
 80088e0:	db04      	blt.n	80088ec <__s2b+0x7c>
 80088e2:	0008      	movs	r0, r1
 80088e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80088e6:	2509      	movs	r5, #9
 80088e8:	340a      	adds	r4, #10
 80088ea:	e7f6      	b.n	80088da <__s2b+0x6a>
 80088ec:	1b63      	subs	r3, r4, r5
 80088ee:	5ddb      	ldrb	r3, [r3, r7]
 80088f0:	220a      	movs	r2, #10
 80088f2:	0030      	movs	r0, r6
 80088f4:	3b30      	subs	r3, #48	; 0x30
 80088f6:	f7ff ff77 	bl	80087e8 <__multadd>
 80088fa:	3701      	adds	r7, #1
 80088fc:	0001      	movs	r1, r0
 80088fe:	e7ed      	b.n	80088dc <__s2b+0x6c>
 8008900:	0800a4f0 	.word	0x0800a4f0
 8008904:	0800a57c 	.word	0x0800a57c

08008908 <__hi0bits>:
 8008908:	0003      	movs	r3, r0
 800890a:	0c02      	lsrs	r2, r0, #16
 800890c:	2000      	movs	r0, #0
 800890e:	4282      	cmp	r2, r0
 8008910:	d101      	bne.n	8008916 <__hi0bits+0xe>
 8008912:	041b      	lsls	r3, r3, #16
 8008914:	3010      	adds	r0, #16
 8008916:	0e1a      	lsrs	r2, r3, #24
 8008918:	d101      	bne.n	800891e <__hi0bits+0x16>
 800891a:	3008      	adds	r0, #8
 800891c:	021b      	lsls	r3, r3, #8
 800891e:	0f1a      	lsrs	r2, r3, #28
 8008920:	d101      	bne.n	8008926 <__hi0bits+0x1e>
 8008922:	3004      	adds	r0, #4
 8008924:	011b      	lsls	r3, r3, #4
 8008926:	0f9a      	lsrs	r2, r3, #30
 8008928:	d101      	bne.n	800892e <__hi0bits+0x26>
 800892a:	3002      	adds	r0, #2
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	2b00      	cmp	r3, #0
 8008930:	db03      	blt.n	800893a <__hi0bits+0x32>
 8008932:	3001      	adds	r0, #1
 8008934:	005b      	lsls	r3, r3, #1
 8008936:	d400      	bmi.n	800893a <__hi0bits+0x32>
 8008938:	2020      	movs	r0, #32
 800893a:	4770      	bx	lr

0800893c <__lo0bits>:
 800893c:	6803      	ldr	r3, [r0, #0]
 800893e:	0002      	movs	r2, r0
 8008940:	2107      	movs	r1, #7
 8008942:	0018      	movs	r0, r3
 8008944:	4008      	ands	r0, r1
 8008946:	420b      	tst	r3, r1
 8008948:	d00d      	beq.n	8008966 <__lo0bits+0x2a>
 800894a:	3906      	subs	r1, #6
 800894c:	2000      	movs	r0, #0
 800894e:	420b      	tst	r3, r1
 8008950:	d105      	bne.n	800895e <__lo0bits+0x22>
 8008952:	3002      	adds	r0, #2
 8008954:	4203      	tst	r3, r0
 8008956:	d003      	beq.n	8008960 <__lo0bits+0x24>
 8008958:	40cb      	lsrs	r3, r1
 800895a:	0008      	movs	r0, r1
 800895c:	6013      	str	r3, [r2, #0]
 800895e:	4770      	bx	lr
 8008960:	089b      	lsrs	r3, r3, #2
 8008962:	6013      	str	r3, [r2, #0]
 8008964:	e7fb      	b.n	800895e <__lo0bits+0x22>
 8008966:	b299      	uxth	r1, r3
 8008968:	2900      	cmp	r1, #0
 800896a:	d101      	bne.n	8008970 <__lo0bits+0x34>
 800896c:	2010      	movs	r0, #16
 800896e:	0c1b      	lsrs	r3, r3, #16
 8008970:	b2d9      	uxtb	r1, r3
 8008972:	2900      	cmp	r1, #0
 8008974:	d101      	bne.n	800897a <__lo0bits+0x3e>
 8008976:	3008      	adds	r0, #8
 8008978:	0a1b      	lsrs	r3, r3, #8
 800897a:	0719      	lsls	r1, r3, #28
 800897c:	d101      	bne.n	8008982 <__lo0bits+0x46>
 800897e:	3004      	adds	r0, #4
 8008980:	091b      	lsrs	r3, r3, #4
 8008982:	0799      	lsls	r1, r3, #30
 8008984:	d101      	bne.n	800898a <__lo0bits+0x4e>
 8008986:	3002      	adds	r0, #2
 8008988:	089b      	lsrs	r3, r3, #2
 800898a:	07d9      	lsls	r1, r3, #31
 800898c:	d4e9      	bmi.n	8008962 <__lo0bits+0x26>
 800898e:	3001      	adds	r0, #1
 8008990:	085b      	lsrs	r3, r3, #1
 8008992:	d1e6      	bne.n	8008962 <__lo0bits+0x26>
 8008994:	2020      	movs	r0, #32
 8008996:	e7e2      	b.n	800895e <__lo0bits+0x22>

08008998 <__i2b>:
 8008998:	b510      	push	{r4, lr}
 800899a:	000c      	movs	r4, r1
 800899c:	2101      	movs	r1, #1
 800899e:	f7ff febb 	bl	8008718 <_Balloc>
 80089a2:	2800      	cmp	r0, #0
 80089a4:	d106      	bne.n	80089b4 <__i2b+0x1c>
 80089a6:	21a0      	movs	r1, #160	; 0xa0
 80089a8:	0002      	movs	r2, r0
 80089aa:	4b04      	ldr	r3, [pc, #16]	; (80089bc <__i2b+0x24>)
 80089ac:	4804      	ldr	r0, [pc, #16]	; (80089c0 <__i2b+0x28>)
 80089ae:	0049      	lsls	r1, r1, #1
 80089b0:	f000 fe24 	bl	80095fc <__assert_func>
 80089b4:	2301      	movs	r3, #1
 80089b6:	6144      	str	r4, [r0, #20]
 80089b8:	6103      	str	r3, [r0, #16]
 80089ba:	bd10      	pop	{r4, pc}
 80089bc:	0800a4f0 	.word	0x0800a4f0
 80089c0:	0800a57c 	.word	0x0800a57c

080089c4 <__multiply>:
 80089c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089c6:	690b      	ldr	r3, [r1, #16]
 80089c8:	0014      	movs	r4, r2
 80089ca:	6912      	ldr	r2, [r2, #16]
 80089cc:	000d      	movs	r5, r1
 80089ce:	b089      	sub	sp, #36	; 0x24
 80089d0:	4293      	cmp	r3, r2
 80089d2:	da01      	bge.n	80089d8 <__multiply+0x14>
 80089d4:	0025      	movs	r5, r4
 80089d6:	000c      	movs	r4, r1
 80089d8:	692f      	ldr	r7, [r5, #16]
 80089da:	6926      	ldr	r6, [r4, #16]
 80089dc:	6869      	ldr	r1, [r5, #4]
 80089de:	19bb      	adds	r3, r7, r6
 80089e0:	9302      	str	r3, [sp, #8]
 80089e2:	68ab      	ldr	r3, [r5, #8]
 80089e4:	19ba      	adds	r2, r7, r6
 80089e6:	4293      	cmp	r3, r2
 80089e8:	da00      	bge.n	80089ec <__multiply+0x28>
 80089ea:	3101      	adds	r1, #1
 80089ec:	f7ff fe94 	bl	8008718 <_Balloc>
 80089f0:	9001      	str	r0, [sp, #4]
 80089f2:	2800      	cmp	r0, #0
 80089f4:	d106      	bne.n	8008a04 <__multiply+0x40>
 80089f6:	215e      	movs	r1, #94	; 0x5e
 80089f8:	0002      	movs	r2, r0
 80089fa:	4b48      	ldr	r3, [pc, #288]	; (8008b1c <__multiply+0x158>)
 80089fc:	4848      	ldr	r0, [pc, #288]	; (8008b20 <__multiply+0x15c>)
 80089fe:	31ff      	adds	r1, #255	; 0xff
 8008a00:	f000 fdfc 	bl	80095fc <__assert_func>
 8008a04:	9b01      	ldr	r3, [sp, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	3314      	adds	r3, #20
 8008a0a:	469c      	mov	ip, r3
 8008a0c:	19bb      	adds	r3, r7, r6
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	4463      	add	r3, ip
 8008a12:	9303      	str	r3, [sp, #12]
 8008a14:	4663      	mov	r3, ip
 8008a16:	9903      	ldr	r1, [sp, #12]
 8008a18:	428b      	cmp	r3, r1
 8008a1a:	d32c      	bcc.n	8008a76 <__multiply+0xb2>
 8008a1c:	002b      	movs	r3, r5
 8008a1e:	0022      	movs	r2, r4
 8008a20:	3314      	adds	r3, #20
 8008a22:	00bf      	lsls	r7, r7, #2
 8008a24:	3214      	adds	r2, #20
 8008a26:	9306      	str	r3, [sp, #24]
 8008a28:	00b6      	lsls	r6, r6, #2
 8008a2a:	19db      	adds	r3, r3, r7
 8008a2c:	9304      	str	r3, [sp, #16]
 8008a2e:	1993      	adds	r3, r2, r6
 8008a30:	9307      	str	r3, [sp, #28]
 8008a32:	2304      	movs	r3, #4
 8008a34:	9305      	str	r3, [sp, #20]
 8008a36:	002b      	movs	r3, r5
 8008a38:	9904      	ldr	r1, [sp, #16]
 8008a3a:	3315      	adds	r3, #21
 8008a3c:	9200      	str	r2, [sp, #0]
 8008a3e:	4299      	cmp	r1, r3
 8008a40:	d305      	bcc.n	8008a4e <__multiply+0x8a>
 8008a42:	1b4b      	subs	r3, r1, r5
 8008a44:	3b15      	subs	r3, #21
 8008a46:	089b      	lsrs	r3, r3, #2
 8008a48:	3301      	adds	r3, #1
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	9305      	str	r3, [sp, #20]
 8008a4e:	9b07      	ldr	r3, [sp, #28]
 8008a50:	9a00      	ldr	r2, [sp, #0]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d311      	bcc.n	8008a7a <__multiply+0xb6>
 8008a56:	9b02      	ldr	r3, [sp, #8]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	dd06      	ble.n	8008a6a <__multiply+0xa6>
 8008a5c:	9b03      	ldr	r3, [sp, #12]
 8008a5e:	3b04      	subs	r3, #4
 8008a60:	9303      	str	r3, [sp, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	9300      	str	r3, [sp, #0]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d053      	beq.n	8008b12 <__multiply+0x14e>
 8008a6a:	9b01      	ldr	r3, [sp, #4]
 8008a6c:	9a02      	ldr	r2, [sp, #8]
 8008a6e:	0018      	movs	r0, r3
 8008a70:	611a      	str	r2, [r3, #16]
 8008a72:	b009      	add	sp, #36	; 0x24
 8008a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a76:	c304      	stmia	r3!, {r2}
 8008a78:	e7cd      	b.n	8008a16 <__multiply+0x52>
 8008a7a:	9b00      	ldr	r3, [sp, #0]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	b298      	uxth	r0, r3
 8008a80:	2800      	cmp	r0, #0
 8008a82:	d01b      	beq.n	8008abc <__multiply+0xf8>
 8008a84:	4667      	mov	r7, ip
 8008a86:	2400      	movs	r4, #0
 8008a88:	9e06      	ldr	r6, [sp, #24]
 8008a8a:	ce02      	ldmia	r6!, {r1}
 8008a8c:	683a      	ldr	r2, [r7, #0]
 8008a8e:	b28b      	uxth	r3, r1
 8008a90:	4343      	muls	r3, r0
 8008a92:	b292      	uxth	r2, r2
 8008a94:	189b      	adds	r3, r3, r2
 8008a96:	191b      	adds	r3, r3, r4
 8008a98:	0c0c      	lsrs	r4, r1, #16
 8008a9a:	4344      	muls	r4, r0
 8008a9c:	683a      	ldr	r2, [r7, #0]
 8008a9e:	0c11      	lsrs	r1, r2, #16
 8008aa0:	1861      	adds	r1, r4, r1
 8008aa2:	0c1c      	lsrs	r4, r3, #16
 8008aa4:	1909      	adds	r1, r1, r4
 8008aa6:	0c0c      	lsrs	r4, r1, #16
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	0409      	lsls	r1, r1, #16
 8008aac:	430b      	orrs	r3, r1
 8008aae:	c708      	stmia	r7!, {r3}
 8008ab0:	9b04      	ldr	r3, [sp, #16]
 8008ab2:	42b3      	cmp	r3, r6
 8008ab4:	d8e9      	bhi.n	8008a8a <__multiply+0xc6>
 8008ab6:	4663      	mov	r3, ip
 8008ab8:	9a05      	ldr	r2, [sp, #20]
 8008aba:	509c      	str	r4, [r3, r2]
 8008abc:	9b00      	ldr	r3, [sp, #0]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	0c1e      	lsrs	r6, r3, #16
 8008ac2:	d020      	beq.n	8008b06 <__multiply+0x142>
 8008ac4:	4663      	mov	r3, ip
 8008ac6:	002c      	movs	r4, r5
 8008ac8:	4660      	mov	r0, ip
 8008aca:	2700      	movs	r7, #0
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	3414      	adds	r4, #20
 8008ad0:	6822      	ldr	r2, [r4, #0]
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	b291      	uxth	r1, r2
 8008ad6:	4371      	muls	r1, r6
 8008ad8:	6802      	ldr	r2, [r0, #0]
 8008ada:	0c12      	lsrs	r2, r2, #16
 8008adc:	1889      	adds	r1, r1, r2
 8008ade:	19cf      	adds	r7, r1, r7
 8008ae0:	0439      	lsls	r1, r7, #16
 8008ae2:	430b      	orrs	r3, r1
 8008ae4:	6003      	str	r3, [r0, #0]
 8008ae6:	cc02      	ldmia	r4!, {r1}
 8008ae8:	6843      	ldr	r3, [r0, #4]
 8008aea:	0c09      	lsrs	r1, r1, #16
 8008aec:	4371      	muls	r1, r6
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	0c3f      	lsrs	r7, r7, #16
 8008af2:	18cb      	adds	r3, r1, r3
 8008af4:	9a04      	ldr	r2, [sp, #16]
 8008af6:	19db      	adds	r3, r3, r7
 8008af8:	0c1f      	lsrs	r7, r3, #16
 8008afa:	3004      	adds	r0, #4
 8008afc:	42a2      	cmp	r2, r4
 8008afe:	d8e7      	bhi.n	8008ad0 <__multiply+0x10c>
 8008b00:	4662      	mov	r2, ip
 8008b02:	9905      	ldr	r1, [sp, #20]
 8008b04:	5053      	str	r3, [r2, r1]
 8008b06:	9b00      	ldr	r3, [sp, #0]
 8008b08:	3304      	adds	r3, #4
 8008b0a:	9300      	str	r3, [sp, #0]
 8008b0c:	2304      	movs	r3, #4
 8008b0e:	449c      	add	ip, r3
 8008b10:	e79d      	b.n	8008a4e <__multiply+0x8a>
 8008b12:	9b02      	ldr	r3, [sp, #8]
 8008b14:	3b01      	subs	r3, #1
 8008b16:	9302      	str	r3, [sp, #8]
 8008b18:	e79d      	b.n	8008a56 <__multiply+0x92>
 8008b1a:	46c0      	nop			; (mov r8, r8)
 8008b1c:	0800a4f0 	.word	0x0800a4f0
 8008b20:	0800a57c 	.word	0x0800a57c

08008b24 <__pow5mult>:
 8008b24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b26:	2303      	movs	r3, #3
 8008b28:	0015      	movs	r5, r2
 8008b2a:	0007      	movs	r7, r0
 8008b2c:	000e      	movs	r6, r1
 8008b2e:	401a      	ands	r2, r3
 8008b30:	421d      	tst	r5, r3
 8008b32:	d008      	beq.n	8008b46 <__pow5mult+0x22>
 8008b34:	4925      	ldr	r1, [pc, #148]	; (8008bcc <__pow5mult+0xa8>)
 8008b36:	3a01      	subs	r2, #1
 8008b38:	0092      	lsls	r2, r2, #2
 8008b3a:	5852      	ldr	r2, [r2, r1]
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	0031      	movs	r1, r6
 8008b40:	f7ff fe52 	bl	80087e8 <__multadd>
 8008b44:	0006      	movs	r6, r0
 8008b46:	10ad      	asrs	r5, r5, #2
 8008b48:	d03d      	beq.n	8008bc6 <__pow5mult+0xa2>
 8008b4a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8008b4c:	2c00      	cmp	r4, #0
 8008b4e:	d10f      	bne.n	8008b70 <__pow5mult+0x4c>
 8008b50:	2010      	movs	r0, #16
 8008b52:	f7ff fdb1 	bl	80086b8 <malloc>
 8008b56:	1e02      	subs	r2, r0, #0
 8008b58:	6278      	str	r0, [r7, #36]	; 0x24
 8008b5a:	d105      	bne.n	8008b68 <__pow5mult+0x44>
 8008b5c:	21d7      	movs	r1, #215	; 0xd7
 8008b5e:	4b1c      	ldr	r3, [pc, #112]	; (8008bd0 <__pow5mult+0xac>)
 8008b60:	481c      	ldr	r0, [pc, #112]	; (8008bd4 <__pow5mult+0xb0>)
 8008b62:	0049      	lsls	r1, r1, #1
 8008b64:	f000 fd4a 	bl	80095fc <__assert_func>
 8008b68:	6044      	str	r4, [r0, #4]
 8008b6a:	6084      	str	r4, [r0, #8]
 8008b6c:	6004      	str	r4, [r0, #0]
 8008b6e:	60c4      	str	r4, [r0, #12]
 8008b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b72:	689c      	ldr	r4, [r3, #8]
 8008b74:	9301      	str	r3, [sp, #4]
 8008b76:	2c00      	cmp	r4, #0
 8008b78:	d108      	bne.n	8008b8c <__pow5mult+0x68>
 8008b7a:	0038      	movs	r0, r7
 8008b7c:	4916      	ldr	r1, [pc, #88]	; (8008bd8 <__pow5mult+0xb4>)
 8008b7e:	f7ff ff0b 	bl	8008998 <__i2b>
 8008b82:	9b01      	ldr	r3, [sp, #4]
 8008b84:	0004      	movs	r4, r0
 8008b86:	6098      	str	r0, [r3, #8]
 8008b88:	2300      	movs	r3, #0
 8008b8a:	6003      	str	r3, [r0, #0]
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	421d      	tst	r5, r3
 8008b90:	d00a      	beq.n	8008ba8 <__pow5mult+0x84>
 8008b92:	0031      	movs	r1, r6
 8008b94:	0022      	movs	r2, r4
 8008b96:	0038      	movs	r0, r7
 8008b98:	f7ff ff14 	bl	80089c4 <__multiply>
 8008b9c:	0031      	movs	r1, r6
 8008b9e:	9001      	str	r0, [sp, #4]
 8008ba0:	0038      	movs	r0, r7
 8008ba2:	f7ff fdfd 	bl	80087a0 <_Bfree>
 8008ba6:	9e01      	ldr	r6, [sp, #4]
 8008ba8:	106d      	asrs	r5, r5, #1
 8008baa:	d00c      	beq.n	8008bc6 <__pow5mult+0xa2>
 8008bac:	6820      	ldr	r0, [r4, #0]
 8008bae:	2800      	cmp	r0, #0
 8008bb0:	d107      	bne.n	8008bc2 <__pow5mult+0x9e>
 8008bb2:	0022      	movs	r2, r4
 8008bb4:	0021      	movs	r1, r4
 8008bb6:	0038      	movs	r0, r7
 8008bb8:	f7ff ff04 	bl	80089c4 <__multiply>
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	6020      	str	r0, [r4, #0]
 8008bc0:	6003      	str	r3, [r0, #0]
 8008bc2:	0004      	movs	r4, r0
 8008bc4:	e7e2      	b.n	8008b8c <__pow5mult+0x68>
 8008bc6:	0030      	movs	r0, r6
 8008bc8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008bca:	46c0      	nop			; (mov r8, r8)
 8008bcc:	0800a6c8 	.word	0x0800a6c8
 8008bd0:	0800a47e 	.word	0x0800a47e
 8008bd4:	0800a57c 	.word	0x0800a57c
 8008bd8:	00000271 	.word	0x00000271

08008bdc <__lshift>:
 8008bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bde:	000c      	movs	r4, r1
 8008be0:	0017      	movs	r7, r2
 8008be2:	6923      	ldr	r3, [r4, #16]
 8008be4:	1155      	asrs	r5, r2, #5
 8008be6:	b087      	sub	sp, #28
 8008be8:	18eb      	adds	r3, r5, r3
 8008bea:	9302      	str	r3, [sp, #8]
 8008bec:	3301      	adds	r3, #1
 8008bee:	9301      	str	r3, [sp, #4]
 8008bf0:	6849      	ldr	r1, [r1, #4]
 8008bf2:	68a3      	ldr	r3, [r4, #8]
 8008bf4:	9004      	str	r0, [sp, #16]
 8008bf6:	9a01      	ldr	r2, [sp, #4]
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	db10      	blt.n	8008c1e <__lshift+0x42>
 8008bfc:	9804      	ldr	r0, [sp, #16]
 8008bfe:	f7ff fd8b 	bl	8008718 <_Balloc>
 8008c02:	2300      	movs	r3, #0
 8008c04:	0002      	movs	r2, r0
 8008c06:	0006      	movs	r6, r0
 8008c08:	0019      	movs	r1, r3
 8008c0a:	3214      	adds	r2, #20
 8008c0c:	4298      	cmp	r0, r3
 8008c0e:	d10c      	bne.n	8008c2a <__lshift+0x4e>
 8008c10:	21da      	movs	r1, #218	; 0xda
 8008c12:	0002      	movs	r2, r0
 8008c14:	4b26      	ldr	r3, [pc, #152]	; (8008cb0 <__lshift+0xd4>)
 8008c16:	4827      	ldr	r0, [pc, #156]	; (8008cb4 <__lshift+0xd8>)
 8008c18:	31ff      	adds	r1, #255	; 0xff
 8008c1a:	f000 fcef 	bl	80095fc <__assert_func>
 8008c1e:	3101      	adds	r1, #1
 8008c20:	005b      	lsls	r3, r3, #1
 8008c22:	e7e8      	b.n	8008bf6 <__lshift+0x1a>
 8008c24:	0098      	lsls	r0, r3, #2
 8008c26:	5011      	str	r1, [r2, r0]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	42ab      	cmp	r3, r5
 8008c2c:	dbfa      	blt.n	8008c24 <__lshift+0x48>
 8008c2e:	43eb      	mvns	r3, r5
 8008c30:	17db      	asrs	r3, r3, #31
 8008c32:	401d      	ands	r5, r3
 8008c34:	211f      	movs	r1, #31
 8008c36:	0023      	movs	r3, r4
 8008c38:	0038      	movs	r0, r7
 8008c3a:	00ad      	lsls	r5, r5, #2
 8008c3c:	1955      	adds	r5, r2, r5
 8008c3e:	6922      	ldr	r2, [r4, #16]
 8008c40:	3314      	adds	r3, #20
 8008c42:	0092      	lsls	r2, r2, #2
 8008c44:	4008      	ands	r0, r1
 8008c46:	4684      	mov	ip, r0
 8008c48:	189a      	adds	r2, r3, r2
 8008c4a:	420f      	tst	r7, r1
 8008c4c:	d02a      	beq.n	8008ca4 <__lshift+0xc8>
 8008c4e:	3101      	adds	r1, #1
 8008c50:	1a09      	subs	r1, r1, r0
 8008c52:	9105      	str	r1, [sp, #20]
 8008c54:	2100      	movs	r1, #0
 8008c56:	9503      	str	r5, [sp, #12]
 8008c58:	4667      	mov	r7, ip
 8008c5a:	6818      	ldr	r0, [r3, #0]
 8008c5c:	40b8      	lsls	r0, r7
 8008c5e:	4301      	orrs	r1, r0
 8008c60:	9803      	ldr	r0, [sp, #12]
 8008c62:	c002      	stmia	r0!, {r1}
 8008c64:	cb02      	ldmia	r3!, {r1}
 8008c66:	9003      	str	r0, [sp, #12]
 8008c68:	9805      	ldr	r0, [sp, #20]
 8008c6a:	40c1      	lsrs	r1, r0
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d8f3      	bhi.n	8008c58 <__lshift+0x7c>
 8008c70:	0020      	movs	r0, r4
 8008c72:	3015      	adds	r0, #21
 8008c74:	2304      	movs	r3, #4
 8008c76:	4282      	cmp	r2, r0
 8008c78:	d304      	bcc.n	8008c84 <__lshift+0xa8>
 8008c7a:	1b13      	subs	r3, r2, r4
 8008c7c:	3b15      	subs	r3, #21
 8008c7e:	089b      	lsrs	r3, r3, #2
 8008c80:	3301      	adds	r3, #1
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	50e9      	str	r1, [r5, r3]
 8008c86:	2900      	cmp	r1, #0
 8008c88:	d002      	beq.n	8008c90 <__lshift+0xb4>
 8008c8a:	9b02      	ldr	r3, [sp, #8]
 8008c8c:	3302      	adds	r3, #2
 8008c8e:	9301      	str	r3, [sp, #4]
 8008c90:	9b01      	ldr	r3, [sp, #4]
 8008c92:	9804      	ldr	r0, [sp, #16]
 8008c94:	3b01      	subs	r3, #1
 8008c96:	0021      	movs	r1, r4
 8008c98:	6133      	str	r3, [r6, #16]
 8008c9a:	f7ff fd81 	bl	80087a0 <_Bfree>
 8008c9e:	0030      	movs	r0, r6
 8008ca0:	b007      	add	sp, #28
 8008ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ca4:	cb02      	ldmia	r3!, {r1}
 8008ca6:	c502      	stmia	r5!, {r1}
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d8fb      	bhi.n	8008ca4 <__lshift+0xc8>
 8008cac:	e7f0      	b.n	8008c90 <__lshift+0xb4>
 8008cae:	46c0      	nop			; (mov r8, r8)
 8008cb0:	0800a4f0 	.word	0x0800a4f0
 8008cb4:	0800a57c 	.word	0x0800a57c

08008cb8 <__mcmp>:
 8008cb8:	6902      	ldr	r2, [r0, #16]
 8008cba:	690b      	ldr	r3, [r1, #16]
 8008cbc:	b530      	push	{r4, r5, lr}
 8008cbe:	0004      	movs	r4, r0
 8008cc0:	1ad0      	subs	r0, r2, r3
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d10d      	bne.n	8008ce2 <__mcmp+0x2a>
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	3414      	adds	r4, #20
 8008cca:	3114      	adds	r1, #20
 8008ccc:	18e2      	adds	r2, r4, r3
 8008cce:	18c9      	adds	r1, r1, r3
 8008cd0:	3a04      	subs	r2, #4
 8008cd2:	3904      	subs	r1, #4
 8008cd4:	6815      	ldr	r5, [r2, #0]
 8008cd6:	680b      	ldr	r3, [r1, #0]
 8008cd8:	429d      	cmp	r5, r3
 8008cda:	d003      	beq.n	8008ce4 <__mcmp+0x2c>
 8008cdc:	2001      	movs	r0, #1
 8008cde:	429d      	cmp	r5, r3
 8008ce0:	d303      	bcc.n	8008cea <__mcmp+0x32>
 8008ce2:	bd30      	pop	{r4, r5, pc}
 8008ce4:	4294      	cmp	r4, r2
 8008ce6:	d3f3      	bcc.n	8008cd0 <__mcmp+0x18>
 8008ce8:	e7fb      	b.n	8008ce2 <__mcmp+0x2a>
 8008cea:	4240      	negs	r0, r0
 8008cec:	e7f9      	b.n	8008ce2 <__mcmp+0x2a>
	...

08008cf0 <__mdiff>:
 8008cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cf2:	000e      	movs	r6, r1
 8008cf4:	0007      	movs	r7, r0
 8008cf6:	0011      	movs	r1, r2
 8008cf8:	0030      	movs	r0, r6
 8008cfa:	b087      	sub	sp, #28
 8008cfc:	0014      	movs	r4, r2
 8008cfe:	f7ff ffdb 	bl	8008cb8 <__mcmp>
 8008d02:	1e05      	subs	r5, r0, #0
 8008d04:	d110      	bne.n	8008d28 <__mdiff+0x38>
 8008d06:	0001      	movs	r1, r0
 8008d08:	0038      	movs	r0, r7
 8008d0a:	f7ff fd05 	bl	8008718 <_Balloc>
 8008d0e:	1e02      	subs	r2, r0, #0
 8008d10:	d104      	bne.n	8008d1c <__mdiff+0x2c>
 8008d12:	4b40      	ldr	r3, [pc, #256]	; (8008e14 <__mdiff+0x124>)
 8008d14:	4940      	ldr	r1, [pc, #256]	; (8008e18 <__mdiff+0x128>)
 8008d16:	4841      	ldr	r0, [pc, #260]	; (8008e1c <__mdiff+0x12c>)
 8008d18:	f000 fc70 	bl	80095fc <__assert_func>
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	6145      	str	r5, [r0, #20]
 8008d20:	6103      	str	r3, [r0, #16]
 8008d22:	0010      	movs	r0, r2
 8008d24:	b007      	add	sp, #28
 8008d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d28:	2301      	movs	r3, #1
 8008d2a:	9301      	str	r3, [sp, #4]
 8008d2c:	2800      	cmp	r0, #0
 8008d2e:	db04      	blt.n	8008d3a <__mdiff+0x4a>
 8008d30:	0023      	movs	r3, r4
 8008d32:	0034      	movs	r4, r6
 8008d34:	001e      	movs	r6, r3
 8008d36:	2300      	movs	r3, #0
 8008d38:	9301      	str	r3, [sp, #4]
 8008d3a:	0038      	movs	r0, r7
 8008d3c:	6861      	ldr	r1, [r4, #4]
 8008d3e:	f7ff fceb 	bl	8008718 <_Balloc>
 8008d42:	1e02      	subs	r2, r0, #0
 8008d44:	d103      	bne.n	8008d4e <__mdiff+0x5e>
 8008d46:	2190      	movs	r1, #144	; 0x90
 8008d48:	4b32      	ldr	r3, [pc, #200]	; (8008e14 <__mdiff+0x124>)
 8008d4a:	0089      	lsls	r1, r1, #2
 8008d4c:	e7e3      	b.n	8008d16 <__mdiff+0x26>
 8008d4e:	9b01      	ldr	r3, [sp, #4]
 8008d50:	2700      	movs	r7, #0
 8008d52:	60c3      	str	r3, [r0, #12]
 8008d54:	6920      	ldr	r0, [r4, #16]
 8008d56:	3414      	adds	r4, #20
 8008d58:	9401      	str	r4, [sp, #4]
 8008d5a:	9b01      	ldr	r3, [sp, #4]
 8008d5c:	0084      	lsls	r4, r0, #2
 8008d5e:	191b      	adds	r3, r3, r4
 8008d60:	0034      	movs	r4, r6
 8008d62:	9302      	str	r3, [sp, #8]
 8008d64:	6933      	ldr	r3, [r6, #16]
 8008d66:	3414      	adds	r4, #20
 8008d68:	0099      	lsls	r1, r3, #2
 8008d6a:	1863      	adds	r3, r4, r1
 8008d6c:	9303      	str	r3, [sp, #12]
 8008d6e:	0013      	movs	r3, r2
 8008d70:	3314      	adds	r3, #20
 8008d72:	469c      	mov	ip, r3
 8008d74:	9305      	str	r3, [sp, #20]
 8008d76:	9b01      	ldr	r3, [sp, #4]
 8008d78:	9304      	str	r3, [sp, #16]
 8008d7a:	9b04      	ldr	r3, [sp, #16]
 8008d7c:	cc02      	ldmia	r4!, {r1}
 8008d7e:	cb20      	ldmia	r3!, {r5}
 8008d80:	9304      	str	r3, [sp, #16]
 8008d82:	b2ab      	uxth	r3, r5
 8008d84:	19df      	adds	r7, r3, r7
 8008d86:	b28b      	uxth	r3, r1
 8008d88:	1afb      	subs	r3, r7, r3
 8008d8a:	0c09      	lsrs	r1, r1, #16
 8008d8c:	0c2d      	lsrs	r5, r5, #16
 8008d8e:	1a6d      	subs	r5, r5, r1
 8008d90:	1419      	asrs	r1, r3, #16
 8008d92:	186d      	adds	r5, r5, r1
 8008d94:	4661      	mov	r1, ip
 8008d96:	142f      	asrs	r7, r5, #16
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	042d      	lsls	r5, r5, #16
 8008d9c:	432b      	orrs	r3, r5
 8008d9e:	c108      	stmia	r1!, {r3}
 8008da0:	9b03      	ldr	r3, [sp, #12]
 8008da2:	468c      	mov	ip, r1
 8008da4:	42a3      	cmp	r3, r4
 8008da6:	d8e8      	bhi.n	8008d7a <__mdiff+0x8a>
 8008da8:	0031      	movs	r1, r6
 8008daa:	9c03      	ldr	r4, [sp, #12]
 8008dac:	3115      	adds	r1, #21
 8008dae:	2304      	movs	r3, #4
 8008db0:	428c      	cmp	r4, r1
 8008db2:	d304      	bcc.n	8008dbe <__mdiff+0xce>
 8008db4:	1ba3      	subs	r3, r4, r6
 8008db6:	3b15      	subs	r3, #21
 8008db8:	089b      	lsrs	r3, r3, #2
 8008dba:	3301      	adds	r3, #1
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	9901      	ldr	r1, [sp, #4]
 8008dc0:	18cc      	adds	r4, r1, r3
 8008dc2:	9905      	ldr	r1, [sp, #20]
 8008dc4:	0026      	movs	r6, r4
 8008dc6:	18cb      	adds	r3, r1, r3
 8008dc8:	469c      	mov	ip, r3
 8008dca:	9902      	ldr	r1, [sp, #8]
 8008dcc:	428e      	cmp	r6, r1
 8008dce:	d310      	bcc.n	8008df2 <__mdiff+0x102>
 8008dd0:	9e02      	ldr	r6, [sp, #8]
 8008dd2:	1ee1      	subs	r1, r4, #3
 8008dd4:	2500      	movs	r5, #0
 8008dd6:	428e      	cmp	r6, r1
 8008dd8:	d304      	bcc.n	8008de4 <__mdiff+0xf4>
 8008dda:	0031      	movs	r1, r6
 8008ddc:	3103      	adds	r1, #3
 8008dde:	1b0c      	subs	r4, r1, r4
 8008de0:	08a4      	lsrs	r4, r4, #2
 8008de2:	00a5      	lsls	r5, r4, #2
 8008de4:	195b      	adds	r3, r3, r5
 8008de6:	3b04      	subs	r3, #4
 8008de8:	6819      	ldr	r1, [r3, #0]
 8008dea:	2900      	cmp	r1, #0
 8008dec:	d00f      	beq.n	8008e0e <__mdiff+0x11e>
 8008dee:	6110      	str	r0, [r2, #16]
 8008df0:	e797      	b.n	8008d22 <__mdiff+0x32>
 8008df2:	ce02      	ldmia	r6!, {r1}
 8008df4:	b28d      	uxth	r5, r1
 8008df6:	19ed      	adds	r5, r5, r7
 8008df8:	0c0f      	lsrs	r7, r1, #16
 8008dfa:	1429      	asrs	r1, r5, #16
 8008dfc:	1879      	adds	r1, r7, r1
 8008dfe:	140f      	asrs	r7, r1, #16
 8008e00:	b2ad      	uxth	r5, r5
 8008e02:	0409      	lsls	r1, r1, #16
 8008e04:	430d      	orrs	r5, r1
 8008e06:	4661      	mov	r1, ip
 8008e08:	c120      	stmia	r1!, {r5}
 8008e0a:	468c      	mov	ip, r1
 8008e0c:	e7dd      	b.n	8008dca <__mdiff+0xda>
 8008e0e:	3801      	subs	r0, #1
 8008e10:	e7e9      	b.n	8008de6 <__mdiff+0xf6>
 8008e12:	46c0      	nop			; (mov r8, r8)
 8008e14:	0800a4f0 	.word	0x0800a4f0
 8008e18:	00000232 	.word	0x00000232
 8008e1c:	0800a57c 	.word	0x0800a57c

08008e20 <__ulp>:
 8008e20:	4b0f      	ldr	r3, [pc, #60]	; (8008e60 <__ulp+0x40>)
 8008e22:	4019      	ands	r1, r3
 8008e24:	4b0f      	ldr	r3, [pc, #60]	; (8008e64 <__ulp+0x44>)
 8008e26:	18c9      	adds	r1, r1, r3
 8008e28:	2900      	cmp	r1, #0
 8008e2a:	dd04      	ble.n	8008e36 <__ulp+0x16>
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	000b      	movs	r3, r1
 8008e30:	0010      	movs	r0, r2
 8008e32:	0019      	movs	r1, r3
 8008e34:	4770      	bx	lr
 8008e36:	4249      	negs	r1, r1
 8008e38:	2200      	movs	r2, #0
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	1509      	asrs	r1, r1, #20
 8008e3e:	2913      	cmp	r1, #19
 8008e40:	dc04      	bgt.n	8008e4c <__ulp+0x2c>
 8008e42:	2080      	movs	r0, #128	; 0x80
 8008e44:	0300      	lsls	r0, r0, #12
 8008e46:	4108      	asrs	r0, r1
 8008e48:	0003      	movs	r3, r0
 8008e4a:	e7f1      	b.n	8008e30 <__ulp+0x10>
 8008e4c:	3914      	subs	r1, #20
 8008e4e:	2001      	movs	r0, #1
 8008e50:	291e      	cmp	r1, #30
 8008e52:	dc02      	bgt.n	8008e5a <__ulp+0x3a>
 8008e54:	2080      	movs	r0, #128	; 0x80
 8008e56:	0600      	lsls	r0, r0, #24
 8008e58:	40c8      	lsrs	r0, r1
 8008e5a:	0002      	movs	r2, r0
 8008e5c:	e7e8      	b.n	8008e30 <__ulp+0x10>
 8008e5e:	46c0      	nop			; (mov r8, r8)
 8008e60:	7ff00000 	.word	0x7ff00000
 8008e64:	fcc00000 	.word	0xfcc00000

08008e68 <__b2d>:
 8008e68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e6a:	0006      	movs	r6, r0
 8008e6c:	6903      	ldr	r3, [r0, #16]
 8008e6e:	3614      	adds	r6, #20
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	18f3      	adds	r3, r6, r3
 8008e74:	1f1d      	subs	r5, r3, #4
 8008e76:	682c      	ldr	r4, [r5, #0]
 8008e78:	000f      	movs	r7, r1
 8008e7a:	0020      	movs	r0, r4
 8008e7c:	9301      	str	r3, [sp, #4]
 8008e7e:	f7ff fd43 	bl	8008908 <__hi0bits>
 8008e82:	2320      	movs	r3, #32
 8008e84:	1a1b      	subs	r3, r3, r0
 8008e86:	491f      	ldr	r1, [pc, #124]	; (8008f04 <__b2d+0x9c>)
 8008e88:	603b      	str	r3, [r7, #0]
 8008e8a:	280a      	cmp	r0, #10
 8008e8c:	dc16      	bgt.n	8008ebc <__b2d+0x54>
 8008e8e:	230b      	movs	r3, #11
 8008e90:	0027      	movs	r7, r4
 8008e92:	1a1b      	subs	r3, r3, r0
 8008e94:	40df      	lsrs	r7, r3
 8008e96:	4339      	orrs	r1, r7
 8008e98:	469c      	mov	ip, r3
 8008e9a:	000b      	movs	r3, r1
 8008e9c:	2100      	movs	r1, #0
 8008e9e:	42ae      	cmp	r6, r5
 8008ea0:	d202      	bcs.n	8008ea8 <__b2d+0x40>
 8008ea2:	9901      	ldr	r1, [sp, #4]
 8008ea4:	3908      	subs	r1, #8
 8008ea6:	6809      	ldr	r1, [r1, #0]
 8008ea8:	3015      	adds	r0, #21
 8008eaa:	4084      	lsls	r4, r0
 8008eac:	4660      	mov	r0, ip
 8008eae:	40c1      	lsrs	r1, r0
 8008eb0:	430c      	orrs	r4, r1
 8008eb2:	0022      	movs	r2, r4
 8008eb4:	0010      	movs	r0, r2
 8008eb6:	0019      	movs	r1, r3
 8008eb8:	b003      	add	sp, #12
 8008eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ebc:	2700      	movs	r7, #0
 8008ebe:	42ae      	cmp	r6, r5
 8008ec0:	d202      	bcs.n	8008ec8 <__b2d+0x60>
 8008ec2:	9d01      	ldr	r5, [sp, #4]
 8008ec4:	3d08      	subs	r5, #8
 8008ec6:	682f      	ldr	r7, [r5, #0]
 8008ec8:	230b      	movs	r3, #11
 8008eca:	425b      	negs	r3, r3
 8008ecc:	469c      	mov	ip, r3
 8008ece:	4484      	add	ip, r0
 8008ed0:	280b      	cmp	r0, #11
 8008ed2:	d013      	beq.n	8008efc <__b2d+0x94>
 8008ed4:	4663      	mov	r3, ip
 8008ed6:	2020      	movs	r0, #32
 8008ed8:	409c      	lsls	r4, r3
 8008eda:	1ac0      	subs	r0, r0, r3
 8008edc:	003b      	movs	r3, r7
 8008ede:	40c3      	lsrs	r3, r0
 8008ee0:	431c      	orrs	r4, r3
 8008ee2:	4321      	orrs	r1, r4
 8008ee4:	000b      	movs	r3, r1
 8008ee6:	2100      	movs	r1, #0
 8008ee8:	42b5      	cmp	r5, r6
 8008eea:	d901      	bls.n	8008ef0 <__b2d+0x88>
 8008eec:	3d04      	subs	r5, #4
 8008eee:	6829      	ldr	r1, [r5, #0]
 8008ef0:	4664      	mov	r4, ip
 8008ef2:	40c1      	lsrs	r1, r0
 8008ef4:	40a7      	lsls	r7, r4
 8008ef6:	430f      	orrs	r7, r1
 8008ef8:	003a      	movs	r2, r7
 8008efa:	e7db      	b.n	8008eb4 <__b2d+0x4c>
 8008efc:	4321      	orrs	r1, r4
 8008efe:	000b      	movs	r3, r1
 8008f00:	e7fa      	b.n	8008ef8 <__b2d+0x90>
 8008f02:	46c0      	nop			; (mov r8, r8)
 8008f04:	3ff00000 	.word	0x3ff00000

08008f08 <__d2b>:
 8008f08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f0a:	2101      	movs	r1, #1
 8008f0c:	0014      	movs	r4, r2
 8008f0e:	001e      	movs	r6, r3
 8008f10:	9f08      	ldr	r7, [sp, #32]
 8008f12:	f7ff fc01 	bl	8008718 <_Balloc>
 8008f16:	1e05      	subs	r5, r0, #0
 8008f18:	d105      	bne.n	8008f26 <__d2b+0x1e>
 8008f1a:	0002      	movs	r2, r0
 8008f1c:	4b26      	ldr	r3, [pc, #152]	; (8008fb8 <__d2b+0xb0>)
 8008f1e:	4927      	ldr	r1, [pc, #156]	; (8008fbc <__d2b+0xb4>)
 8008f20:	4827      	ldr	r0, [pc, #156]	; (8008fc0 <__d2b+0xb8>)
 8008f22:	f000 fb6b 	bl	80095fc <__assert_func>
 8008f26:	0333      	lsls	r3, r6, #12
 8008f28:	0076      	lsls	r6, r6, #1
 8008f2a:	0b1b      	lsrs	r3, r3, #12
 8008f2c:	0d76      	lsrs	r6, r6, #21
 8008f2e:	d124      	bne.n	8008f7a <__d2b+0x72>
 8008f30:	9301      	str	r3, [sp, #4]
 8008f32:	2c00      	cmp	r4, #0
 8008f34:	d027      	beq.n	8008f86 <__d2b+0x7e>
 8008f36:	4668      	mov	r0, sp
 8008f38:	9400      	str	r4, [sp, #0]
 8008f3a:	f7ff fcff 	bl	800893c <__lo0bits>
 8008f3e:	9c00      	ldr	r4, [sp, #0]
 8008f40:	2800      	cmp	r0, #0
 8008f42:	d01e      	beq.n	8008f82 <__d2b+0x7a>
 8008f44:	9b01      	ldr	r3, [sp, #4]
 8008f46:	2120      	movs	r1, #32
 8008f48:	001a      	movs	r2, r3
 8008f4a:	1a09      	subs	r1, r1, r0
 8008f4c:	408a      	lsls	r2, r1
 8008f4e:	40c3      	lsrs	r3, r0
 8008f50:	4322      	orrs	r2, r4
 8008f52:	616a      	str	r2, [r5, #20]
 8008f54:	9301      	str	r3, [sp, #4]
 8008f56:	9c01      	ldr	r4, [sp, #4]
 8008f58:	61ac      	str	r4, [r5, #24]
 8008f5a:	1e63      	subs	r3, r4, #1
 8008f5c:	419c      	sbcs	r4, r3
 8008f5e:	3401      	adds	r4, #1
 8008f60:	612c      	str	r4, [r5, #16]
 8008f62:	2e00      	cmp	r6, #0
 8008f64:	d018      	beq.n	8008f98 <__d2b+0x90>
 8008f66:	4b17      	ldr	r3, [pc, #92]	; (8008fc4 <__d2b+0xbc>)
 8008f68:	18f6      	adds	r6, r6, r3
 8008f6a:	2335      	movs	r3, #53	; 0x35
 8008f6c:	1836      	adds	r6, r6, r0
 8008f6e:	1a18      	subs	r0, r3, r0
 8008f70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f72:	603e      	str	r6, [r7, #0]
 8008f74:	6018      	str	r0, [r3, #0]
 8008f76:	0028      	movs	r0, r5
 8008f78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008f7a:	2280      	movs	r2, #128	; 0x80
 8008f7c:	0352      	lsls	r2, r2, #13
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	e7d6      	b.n	8008f30 <__d2b+0x28>
 8008f82:	616c      	str	r4, [r5, #20]
 8008f84:	e7e7      	b.n	8008f56 <__d2b+0x4e>
 8008f86:	a801      	add	r0, sp, #4
 8008f88:	f7ff fcd8 	bl	800893c <__lo0bits>
 8008f8c:	2401      	movs	r4, #1
 8008f8e:	9b01      	ldr	r3, [sp, #4]
 8008f90:	612c      	str	r4, [r5, #16]
 8008f92:	616b      	str	r3, [r5, #20]
 8008f94:	3020      	adds	r0, #32
 8008f96:	e7e4      	b.n	8008f62 <__d2b+0x5a>
 8008f98:	4b0b      	ldr	r3, [pc, #44]	; (8008fc8 <__d2b+0xc0>)
 8008f9a:	18c0      	adds	r0, r0, r3
 8008f9c:	4b0b      	ldr	r3, [pc, #44]	; (8008fcc <__d2b+0xc4>)
 8008f9e:	6038      	str	r0, [r7, #0]
 8008fa0:	18e3      	adds	r3, r4, r3
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	18eb      	adds	r3, r5, r3
 8008fa6:	6958      	ldr	r0, [r3, #20]
 8008fa8:	f7ff fcae 	bl	8008908 <__hi0bits>
 8008fac:	0164      	lsls	r4, r4, #5
 8008fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fb0:	1a24      	subs	r4, r4, r0
 8008fb2:	601c      	str	r4, [r3, #0]
 8008fb4:	e7df      	b.n	8008f76 <__d2b+0x6e>
 8008fb6:	46c0      	nop			; (mov r8, r8)
 8008fb8:	0800a4f0 	.word	0x0800a4f0
 8008fbc:	0000030a 	.word	0x0000030a
 8008fc0:	0800a57c 	.word	0x0800a57c
 8008fc4:	fffffbcd 	.word	0xfffffbcd
 8008fc8:	fffffbce 	.word	0xfffffbce
 8008fcc:	3fffffff 	.word	0x3fffffff

08008fd0 <__ratio>:
 8008fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fd2:	b087      	sub	sp, #28
 8008fd4:	000f      	movs	r7, r1
 8008fd6:	a904      	add	r1, sp, #16
 8008fd8:	0006      	movs	r6, r0
 8008fda:	f7ff ff45 	bl	8008e68 <__b2d>
 8008fde:	9000      	str	r0, [sp, #0]
 8008fe0:	9101      	str	r1, [sp, #4]
 8008fe2:	9c00      	ldr	r4, [sp, #0]
 8008fe4:	9d01      	ldr	r5, [sp, #4]
 8008fe6:	0038      	movs	r0, r7
 8008fe8:	a905      	add	r1, sp, #20
 8008fea:	f7ff ff3d 	bl	8008e68 <__b2d>
 8008fee:	9002      	str	r0, [sp, #8]
 8008ff0:	9103      	str	r1, [sp, #12]
 8008ff2:	9a02      	ldr	r2, [sp, #8]
 8008ff4:	9b03      	ldr	r3, [sp, #12]
 8008ff6:	6931      	ldr	r1, [r6, #16]
 8008ff8:	6938      	ldr	r0, [r7, #16]
 8008ffa:	9e05      	ldr	r6, [sp, #20]
 8008ffc:	1a08      	subs	r0, r1, r0
 8008ffe:	9904      	ldr	r1, [sp, #16]
 8009000:	0140      	lsls	r0, r0, #5
 8009002:	1b89      	subs	r1, r1, r6
 8009004:	1841      	adds	r1, r0, r1
 8009006:	0508      	lsls	r0, r1, #20
 8009008:	2900      	cmp	r1, #0
 800900a:	dd07      	ble.n	800901c <__ratio+0x4c>
 800900c:	9901      	ldr	r1, [sp, #4]
 800900e:	1845      	adds	r5, r0, r1
 8009010:	0020      	movs	r0, r4
 8009012:	0029      	movs	r1, r5
 8009014:	f7f7 fdf4 	bl	8000c00 <__aeabi_ddiv>
 8009018:	b007      	add	sp, #28
 800901a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800901c:	9903      	ldr	r1, [sp, #12]
 800901e:	1a0b      	subs	r3, r1, r0
 8009020:	e7f6      	b.n	8009010 <__ratio+0x40>

08009022 <__copybits>:
 8009022:	b570      	push	{r4, r5, r6, lr}
 8009024:	0014      	movs	r4, r2
 8009026:	0005      	movs	r5, r0
 8009028:	3901      	subs	r1, #1
 800902a:	6913      	ldr	r3, [r2, #16]
 800902c:	1149      	asrs	r1, r1, #5
 800902e:	3101      	adds	r1, #1
 8009030:	0089      	lsls	r1, r1, #2
 8009032:	3414      	adds	r4, #20
 8009034:	009b      	lsls	r3, r3, #2
 8009036:	1841      	adds	r1, r0, r1
 8009038:	18e3      	adds	r3, r4, r3
 800903a:	42a3      	cmp	r3, r4
 800903c:	d80d      	bhi.n	800905a <__copybits+0x38>
 800903e:	0014      	movs	r4, r2
 8009040:	3411      	adds	r4, #17
 8009042:	2500      	movs	r5, #0
 8009044:	429c      	cmp	r4, r3
 8009046:	d803      	bhi.n	8009050 <__copybits+0x2e>
 8009048:	1a9b      	subs	r3, r3, r2
 800904a:	3b11      	subs	r3, #17
 800904c:	089b      	lsrs	r3, r3, #2
 800904e:	009d      	lsls	r5, r3, #2
 8009050:	2300      	movs	r3, #0
 8009052:	1940      	adds	r0, r0, r5
 8009054:	4281      	cmp	r1, r0
 8009056:	d803      	bhi.n	8009060 <__copybits+0x3e>
 8009058:	bd70      	pop	{r4, r5, r6, pc}
 800905a:	cc40      	ldmia	r4!, {r6}
 800905c:	c540      	stmia	r5!, {r6}
 800905e:	e7ec      	b.n	800903a <__copybits+0x18>
 8009060:	c008      	stmia	r0!, {r3}
 8009062:	e7f7      	b.n	8009054 <__copybits+0x32>

08009064 <__any_on>:
 8009064:	0002      	movs	r2, r0
 8009066:	6900      	ldr	r0, [r0, #16]
 8009068:	b510      	push	{r4, lr}
 800906a:	3214      	adds	r2, #20
 800906c:	114b      	asrs	r3, r1, #5
 800906e:	4298      	cmp	r0, r3
 8009070:	db13      	blt.n	800909a <__any_on+0x36>
 8009072:	dd0c      	ble.n	800908e <__any_on+0x2a>
 8009074:	241f      	movs	r4, #31
 8009076:	0008      	movs	r0, r1
 8009078:	4020      	ands	r0, r4
 800907a:	4221      	tst	r1, r4
 800907c:	d007      	beq.n	800908e <__any_on+0x2a>
 800907e:	0099      	lsls	r1, r3, #2
 8009080:	588c      	ldr	r4, [r1, r2]
 8009082:	0021      	movs	r1, r4
 8009084:	40c1      	lsrs	r1, r0
 8009086:	4081      	lsls	r1, r0
 8009088:	2001      	movs	r0, #1
 800908a:	428c      	cmp	r4, r1
 800908c:	d104      	bne.n	8009098 <__any_on+0x34>
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	18d3      	adds	r3, r2, r3
 8009092:	4293      	cmp	r3, r2
 8009094:	d803      	bhi.n	800909e <__any_on+0x3a>
 8009096:	2000      	movs	r0, #0
 8009098:	bd10      	pop	{r4, pc}
 800909a:	0003      	movs	r3, r0
 800909c:	e7f7      	b.n	800908e <__any_on+0x2a>
 800909e:	3b04      	subs	r3, #4
 80090a0:	6819      	ldr	r1, [r3, #0]
 80090a2:	2900      	cmp	r1, #0
 80090a4:	d0f5      	beq.n	8009092 <__any_on+0x2e>
 80090a6:	2001      	movs	r0, #1
 80090a8:	e7f6      	b.n	8009098 <__any_on+0x34>

080090aa <_calloc_r>:
 80090aa:	b570      	push	{r4, r5, r6, lr}
 80090ac:	0c13      	lsrs	r3, r2, #16
 80090ae:	0c0d      	lsrs	r5, r1, #16
 80090b0:	d11e      	bne.n	80090f0 <_calloc_r+0x46>
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d10c      	bne.n	80090d0 <_calloc_r+0x26>
 80090b6:	b289      	uxth	r1, r1
 80090b8:	b294      	uxth	r4, r2
 80090ba:	434c      	muls	r4, r1
 80090bc:	0021      	movs	r1, r4
 80090be:	f000 f88d 	bl	80091dc <_malloc_r>
 80090c2:	1e05      	subs	r5, r0, #0
 80090c4:	d01b      	beq.n	80090fe <_calloc_r+0x54>
 80090c6:	0022      	movs	r2, r4
 80090c8:	2100      	movs	r1, #0
 80090ca:	f7fc fb6f 	bl	80057ac <memset>
 80090ce:	e016      	b.n	80090fe <_calloc_r+0x54>
 80090d0:	1c1d      	adds	r5, r3, #0
 80090d2:	1c0b      	adds	r3, r1, #0
 80090d4:	b292      	uxth	r2, r2
 80090d6:	b289      	uxth	r1, r1
 80090d8:	b29c      	uxth	r4, r3
 80090da:	4351      	muls	r1, r2
 80090dc:	b2ab      	uxth	r3, r5
 80090de:	4363      	muls	r3, r4
 80090e0:	0c0c      	lsrs	r4, r1, #16
 80090e2:	191c      	adds	r4, r3, r4
 80090e4:	0c22      	lsrs	r2, r4, #16
 80090e6:	d107      	bne.n	80090f8 <_calloc_r+0x4e>
 80090e8:	0424      	lsls	r4, r4, #16
 80090ea:	b289      	uxth	r1, r1
 80090ec:	430c      	orrs	r4, r1
 80090ee:	e7e5      	b.n	80090bc <_calloc_r+0x12>
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d101      	bne.n	80090f8 <_calloc_r+0x4e>
 80090f4:	1c13      	adds	r3, r2, #0
 80090f6:	e7ed      	b.n	80090d4 <_calloc_r+0x2a>
 80090f8:	230c      	movs	r3, #12
 80090fa:	2500      	movs	r5, #0
 80090fc:	6003      	str	r3, [r0, #0]
 80090fe:	0028      	movs	r0, r5
 8009100:	bd70      	pop	{r4, r5, r6, pc}
	...

08009104 <_free_r>:
 8009104:	b570      	push	{r4, r5, r6, lr}
 8009106:	0005      	movs	r5, r0
 8009108:	2900      	cmp	r1, #0
 800910a:	d010      	beq.n	800912e <_free_r+0x2a>
 800910c:	1f0c      	subs	r4, r1, #4
 800910e:	6823      	ldr	r3, [r4, #0]
 8009110:	2b00      	cmp	r3, #0
 8009112:	da00      	bge.n	8009116 <_free_r+0x12>
 8009114:	18e4      	adds	r4, r4, r3
 8009116:	0028      	movs	r0, r5
 8009118:	f000 fab2 	bl	8009680 <__malloc_lock>
 800911c:	4a1d      	ldr	r2, [pc, #116]	; (8009194 <_free_r+0x90>)
 800911e:	6813      	ldr	r3, [r2, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d105      	bne.n	8009130 <_free_r+0x2c>
 8009124:	6063      	str	r3, [r4, #4]
 8009126:	6014      	str	r4, [r2, #0]
 8009128:	0028      	movs	r0, r5
 800912a:	f000 fab1 	bl	8009690 <__malloc_unlock>
 800912e:	bd70      	pop	{r4, r5, r6, pc}
 8009130:	42a3      	cmp	r3, r4
 8009132:	d908      	bls.n	8009146 <_free_r+0x42>
 8009134:	6821      	ldr	r1, [r4, #0]
 8009136:	1860      	adds	r0, r4, r1
 8009138:	4283      	cmp	r3, r0
 800913a:	d1f3      	bne.n	8009124 <_free_r+0x20>
 800913c:	6818      	ldr	r0, [r3, #0]
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	1841      	adds	r1, r0, r1
 8009142:	6021      	str	r1, [r4, #0]
 8009144:	e7ee      	b.n	8009124 <_free_r+0x20>
 8009146:	001a      	movs	r2, r3
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d001      	beq.n	8009152 <_free_r+0x4e>
 800914e:	42a3      	cmp	r3, r4
 8009150:	d9f9      	bls.n	8009146 <_free_r+0x42>
 8009152:	6811      	ldr	r1, [r2, #0]
 8009154:	1850      	adds	r0, r2, r1
 8009156:	42a0      	cmp	r0, r4
 8009158:	d10b      	bne.n	8009172 <_free_r+0x6e>
 800915a:	6820      	ldr	r0, [r4, #0]
 800915c:	1809      	adds	r1, r1, r0
 800915e:	1850      	adds	r0, r2, r1
 8009160:	6011      	str	r1, [r2, #0]
 8009162:	4283      	cmp	r3, r0
 8009164:	d1e0      	bne.n	8009128 <_free_r+0x24>
 8009166:	6818      	ldr	r0, [r3, #0]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	1841      	adds	r1, r0, r1
 800916c:	6011      	str	r1, [r2, #0]
 800916e:	6053      	str	r3, [r2, #4]
 8009170:	e7da      	b.n	8009128 <_free_r+0x24>
 8009172:	42a0      	cmp	r0, r4
 8009174:	d902      	bls.n	800917c <_free_r+0x78>
 8009176:	230c      	movs	r3, #12
 8009178:	602b      	str	r3, [r5, #0]
 800917a:	e7d5      	b.n	8009128 <_free_r+0x24>
 800917c:	6821      	ldr	r1, [r4, #0]
 800917e:	1860      	adds	r0, r4, r1
 8009180:	4283      	cmp	r3, r0
 8009182:	d103      	bne.n	800918c <_free_r+0x88>
 8009184:	6818      	ldr	r0, [r3, #0]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	1841      	adds	r1, r0, r1
 800918a:	6021      	str	r1, [r4, #0]
 800918c:	6063      	str	r3, [r4, #4]
 800918e:	6054      	str	r4, [r2, #4]
 8009190:	e7ca      	b.n	8009128 <_free_r+0x24>
 8009192:	46c0      	nop			; (mov r8, r8)
 8009194:	20000310 	.word	0x20000310

08009198 <sbrk_aligned>:
 8009198:	b570      	push	{r4, r5, r6, lr}
 800919a:	4e0f      	ldr	r6, [pc, #60]	; (80091d8 <sbrk_aligned+0x40>)
 800919c:	000d      	movs	r5, r1
 800919e:	6831      	ldr	r1, [r6, #0]
 80091a0:	0004      	movs	r4, r0
 80091a2:	2900      	cmp	r1, #0
 80091a4:	d102      	bne.n	80091ac <sbrk_aligned+0x14>
 80091a6:	f000 f9f7 	bl	8009598 <_sbrk_r>
 80091aa:	6030      	str	r0, [r6, #0]
 80091ac:	0029      	movs	r1, r5
 80091ae:	0020      	movs	r0, r4
 80091b0:	f000 f9f2 	bl	8009598 <_sbrk_r>
 80091b4:	1c43      	adds	r3, r0, #1
 80091b6:	d00a      	beq.n	80091ce <sbrk_aligned+0x36>
 80091b8:	2303      	movs	r3, #3
 80091ba:	1cc5      	adds	r5, r0, #3
 80091bc:	439d      	bics	r5, r3
 80091be:	42a8      	cmp	r0, r5
 80091c0:	d007      	beq.n	80091d2 <sbrk_aligned+0x3a>
 80091c2:	1a29      	subs	r1, r5, r0
 80091c4:	0020      	movs	r0, r4
 80091c6:	f000 f9e7 	bl	8009598 <_sbrk_r>
 80091ca:	1c43      	adds	r3, r0, #1
 80091cc:	d101      	bne.n	80091d2 <sbrk_aligned+0x3a>
 80091ce:	2501      	movs	r5, #1
 80091d0:	426d      	negs	r5, r5
 80091d2:	0028      	movs	r0, r5
 80091d4:	bd70      	pop	{r4, r5, r6, pc}
 80091d6:	46c0      	nop			; (mov r8, r8)
 80091d8:	20000314 	.word	0x20000314

080091dc <_malloc_r>:
 80091dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091de:	2203      	movs	r2, #3
 80091e0:	1ccb      	adds	r3, r1, #3
 80091e2:	4393      	bics	r3, r2
 80091e4:	3308      	adds	r3, #8
 80091e6:	0006      	movs	r6, r0
 80091e8:	001f      	movs	r7, r3
 80091ea:	2b0c      	cmp	r3, #12
 80091ec:	d232      	bcs.n	8009254 <_malloc_r+0x78>
 80091ee:	270c      	movs	r7, #12
 80091f0:	42b9      	cmp	r1, r7
 80091f2:	d831      	bhi.n	8009258 <_malloc_r+0x7c>
 80091f4:	0030      	movs	r0, r6
 80091f6:	f000 fa43 	bl	8009680 <__malloc_lock>
 80091fa:	4d32      	ldr	r5, [pc, #200]	; (80092c4 <_malloc_r+0xe8>)
 80091fc:	682b      	ldr	r3, [r5, #0]
 80091fe:	001c      	movs	r4, r3
 8009200:	2c00      	cmp	r4, #0
 8009202:	d12e      	bne.n	8009262 <_malloc_r+0x86>
 8009204:	0039      	movs	r1, r7
 8009206:	0030      	movs	r0, r6
 8009208:	f7ff ffc6 	bl	8009198 <sbrk_aligned>
 800920c:	0004      	movs	r4, r0
 800920e:	1c43      	adds	r3, r0, #1
 8009210:	d11e      	bne.n	8009250 <_malloc_r+0x74>
 8009212:	682c      	ldr	r4, [r5, #0]
 8009214:	0025      	movs	r5, r4
 8009216:	2d00      	cmp	r5, #0
 8009218:	d14a      	bne.n	80092b0 <_malloc_r+0xd4>
 800921a:	6823      	ldr	r3, [r4, #0]
 800921c:	0029      	movs	r1, r5
 800921e:	18e3      	adds	r3, r4, r3
 8009220:	0030      	movs	r0, r6
 8009222:	9301      	str	r3, [sp, #4]
 8009224:	f000 f9b8 	bl	8009598 <_sbrk_r>
 8009228:	9b01      	ldr	r3, [sp, #4]
 800922a:	4283      	cmp	r3, r0
 800922c:	d143      	bne.n	80092b6 <_malloc_r+0xda>
 800922e:	6823      	ldr	r3, [r4, #0]
 8009230:	3703      	adds	r7, #3
 8009232:	1aff      	subs	r7, r7, r3
 8009234:	2303      	movs	r3, #3
 8009236:	439f      	bics	r7, r3
 8009238:	3708      	adds	r7, #8
 800923a:	2f0c      	cmp	r7, #12
 800923c:	d200      	bcs.n	8009240 <_malloc_r+0x64>
 800923e:	270c      	movs	r7, #12
 8009240:	0039      	movs	r1, r7
 8009242:	0030      	movs	r0, r6
 8009244:	f7ff ffa8 	bl	8009198 <sbrk_aligned>
 8009248:	1c43      	adds	r3, r0, #1
 800924a:	d034      	beq.n	80092b6 <_malloc_r+0xda>
 800924c:	6823      	ldr	r3, [r4, #0]
 800924e:	19df      	adds	r7, r3, r7
 8009250:	6027      	str	r7, [r4, #0]
 8009252:	e013      	b.n	800927c <_malloc_r+0xa0>
 8009254:	2b00      	cmp	r3, #0
 8009256:	dacb      	bge.n	80091f0 <_malloc_r+0x14>
 8009258:	230c      	movs	r3, #12
 800925a:	2500      	movs	r5, #0
 800925c:	6033      	str	r3, [r6, #0]
 800925e:	0028      	movs	r0, r5
 8009260:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009262:	6822      	ldr	r2, [r4, #0]
 8009264:	1bd1      	subs	r1, r2, r7
 8009266:	d420      	bmi.n	80092aa <_malloc_r+0xce>
 8009268:	290b      	cmp	r1, #11
 800926a:	d917      	bls.n	800929c <_malloc_r+0xc0>
 800926c:	19e2      	adds	r2, r4, r7
 800926e:	6027      	str	r7, [r4, #0]
 8009270:	42a3      	cmp	r3, r4
 8009272:	d111      	bne.n	8009298 <_malloc_r+0xbc>
 8009274:	602a      	str	r2, [r5, #0]
 8009276:	6863      	ldr	r3, [r4, #4]
 8009278:	6011      	str	r1, [r2, #0]
 800927a:	6053      	str	r3, [r2, #4]
 800927c:	0030      	movs	r0, r6
 800927e:	0025      	movs	r5, r4
 8009280:	f000 fa06 	bl	8009690 <__malloc_unlock>
 8009284:	2207      	movs	r2, #7
 8009286:	350b      	adds	r5, #11
 8009288:	1d23      	adds	r3, r4, #4
 800928a:	4395      	bics	r5, r2
 800928c:	1aea      	subs	r2, r5, r3
 800928e:	429d      	cmp	r5, r3
 8009290:	d0e5      	beq.n	800925e <_malloc_r+0x82>
 8009292:	1b5b      	subs	r3, r3, r5
 8009294:	50a3      	str	r3, [r4, r2]
 8009296:	e7e2      	b.n	800925e <_malloc_r+0x82>
 8009298:	605a      	str	r2, [r3, #4]
 800929a:	e7ec      	b.n	8009276 <_malloc_r+0x9a>
 800929c:	6862      	ldr	r2, [r4, #4]
 800929e:	42a3      	cmp	r3, r4
 80092a0:	d101      	bne.n	80092a6 <_malloc_r+0xca>
 80092a2:	602a      	str	r2, [r5, #0]
 80092a4:	e7ea      	b.n	800927c <_malloc_r+0xa0>
 80092a6:	605a      	str	r2, [r3, #4]
 80092a8:	e7e8      	b.n	800927c <_malloc_r+0xa0>
 80092aa:	0023      	movs	r3, r4
 80092ac:	6864      	ldr	r4, [r4, #4]
 80092ae:	e7a7      	b.n	8009200 <_malloc_r+0x24>
 80092b0:	002c      	movs	r4, r5
 80092b2:	686d      	ldr	r5, [r5, #4]
 80092b4:	e7af      	b.n	8009216 <_malloc_r+0x3a>
 80092b6:	230c      	movs	r3, #12
 80092b8:	0030      	movs	r0, r6
 80092ba:	6033      	str	r3, [r6, #0]
 80092bc:	f000 f9e8 	bl	8009690 <__malloc_unlock>
 80092c0:	e7cd      	b.n	800925e <_malloc_r+0x82>
 80092c2:	46c0      	nop			; (mov r8, r8)
 80092c4:	20000310 	.word	0x20000310

080092c8 <__ssputs_r>:
 80092c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092ca:	688e      	ldr	r6, [r1, #8]
 80092cc:	b085      	sub	sp, #20
 80092ce:	0007      	movs	r7, r0
 80092d0:	000c      	movs	r4, r1
 80092d2:	9203      	str	r2, [sp, #12]
 80092d4:	9301      	str	r3, [sp, #4]
 80092d6:	429e      	cmp	r6, r3
 80092d8:	d83c      	bhi.n	8009354 <__ssputs_r+0x8c>
 80092da:	2390      	movs	r3, #144	; 0x90
 80092dc:	898a      	ldrh	r2, [r1, #12]
 80092de:	00db      	lsls	r3, r3, #3
 80092e0:	421a      	tst	r2, r3
 80092e2:	d034      	beq.n	800934e <__ssputs_r+0x86>
 80092e4:	6909      	ldr	r1, [r1, #16]
 80092e6:	6823      	ldr	r3, [r4, #0]
 80092e8:	6960      	ldr	r0, [r4, #20]
 80092ea:	1a5b      	subs	r3, r3, r1
 80092ec:	9302      	str	r3, [sp, #8]
 80092ee:	2303      	movs	r3, #3
 80092f0:	4343      	muls	r3, r0
 80092f2:	0fdd      	lsrs	r5, r3, #31
 80092f4:	18ed      	adds	r5, r5, r3
 80092f6:	9b01      	ldr	r3, [sp, #4]
 80092f8:	9802      	ldr	r0, [sp, #8]
 80092fa:	3301      	adds	r3, #1
 80092fc:	181b      	adds	r3, r3, r0
 80092fe:	106d      	asrs	r5, r5, #1
 8009300:	42ab      	cmp	r3, r5
 8009302:	d900      	bls.n	8009306 <__ssputs_r+0x3e>
 8009304:	001d      	movs	r5, r3
 8009306:	0553      	lsls	r3, r2, #21
 8009308:	d532      	bpl.n	8009370 <__ssputs_r+0xa8>
 800930a:	0029      	movs	r1, r5
 800930c:	0038      	movs	r0, r7
 800930e:	f7ff ff65 	bl	80091dc <_malloc_r>
 8009312:	1e06      	subs	r6, r0, #0
 8009314:	d109      	bne.n	800932a <__ssputs_r+0x62>
 8009316:	230c      	movs	r3, #12
 8009318:	603b      	str	r3, [r7, #0]
 800931a:	2340      	movs	r3, #64	; 0x40
 800931c:	2001      	movs	r0, #1
 800931e:	89a2      	ldrh	r2, [r4, #12]
 8009320:	4240      	negs	r0, r0
 8009322:	4313      	orrs	r3, r2
 8009324:	81a3      	strh	r3, [r4, #12]
 8009326:	b005      	add	sp, #20
 8009328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800932a:	9a02      	ldr	r2, [sp, #8]
 800932c:	6921      	ldr	r1, [r4, #16]
 800932e:	f7ff f9ea 	bl	8008706 <memcpy>
 8009332:	89a3      	ldrh	r3, [r4, #12]
 8009334:	4a14      	ldr	r2, [pc, #80]	; (8009388 <__ssputs_r+0xc0>)
 8009336:	401a      	ands	r2, r3
 8009338:	2380      	movs	r3, #128	; 0x80
 800933a:	4313      	orrs	r3, r2
 800933c:	81a3      	strh	r3, [r4, #12]
 800933e:	9b02      	ldr	r3, [sp, #8]
 8009340:	6126      	str	r6, [r4, #16]
 8009342:	18f6      	adds	r6, r6, r3
 8009344:	6026      	str	r6, [r4, #0]
 8009346:	6165      	str	r5, [r4, #20]
 8009348:	9e01      	ldr	r6, [sp, #4]
 800934a:	1aed      	subs	r5, r5, r3
 800934c:	60a5      	str	r5, [r4, #8]
 800934e:	9b01      	ldr	r3, [sp, #4]
 8009350:	429e      	cmp	r6, r3
 8009352:	d900      	bls.n	8009356 <__ssputs_r+0x8e>
 8009354:	9e01      	ldr	r6, [sp, #4]
 8009356:	0032      	movs	r2, r6
 8009358:	9903      	ldr	r1, [sp, #12]
 800935a:	6820      	ldr	r0, [r4, #0]
 800935c:	f000 f97c 	bl	8009658 <memmove>
 8009360:	68a3      	ldr	r3, [r4, #8]
 8009362:	2000      	movs	r0, #0
 8009364:	1b9b      	subs	r3, r3, r6
 8009366:	60a3      	str	r3, [r4, #8]
 8009368:	6823      	ldr	r3, [r4, #0]
 800936a:	199e      	adds	r6, r3, r6
 800936c:	6026      	str	r6, [r4, #0]
 800936e:	e7da      	b.n	8009326 <__ssputs_r+0x5e>
 8009370:	002a      	movs	r2, r5
 8009372:	0038      	movs	r0, r7
 8009374:	f000 f994 	bl	80096a0 <_realloc_r>
 8009378:	1e06      	subs	r6, r0, #0
 800937a:	d1e0      	bne.n	800933e <__ssputs_r+0x76>
 800937c:	0038      	movs	r0, r7
 800937e:	6921      	ldr	r1, [r4, #16]
 8009380:	f7ff fec0 	bl	8009104 <_free_r>
 8009384:	e7c7      	b.n	8009316 <__ssputs_r+0x4e>
 8009386:	46c0      	nop			; (mov r8, r8)
 8009388:	fffffb7f 	.word	0xfffffb7f

0800938c <_svfiprintf_r>:
 800938c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800938e:	b0a1      	sub	sp, #132	; 0x84
 8009390:	9003      	str	r0, [sp, #12]
 8009392:	001d      	movs	r5, r3
 8009394:	898b      	ldrh	r3, [r1, #12]
 8009396:	000f      	movs	r7, r1
 8009398:	0016      	movs	r6, r2
 800939a:	061b      	lsls	r3, r3, #24
 800939c:	d511      	bpl.n	80093c2 <_svfiprintf_r+0x36>
 800939e:	690b      	ldr	r3, [r1, #16]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d10e      	bne.n	80093c2 <_svfiprintf_r+0x36>
 80093a4:	2140      	movs	r1, #64	; 0x40
 80093a6:	f7ff ff19 	bl	80091dc <_malloc_r>
 80093aa:	6038      	str	r0, [r7, #0]
 80093ac:	6138      	str	r0, [r7, #16]
 80093ae:	2800      	cmp	r0, #0
 80093b0:	d105      	bne.n	80093be <_svfiprintf_r+0x32>
 80093b2:	230c      	movs	r3, #12
 80093b4:	9a03      	ldr	r2, [sp, #12]
 80093b6:	3801      	subs	r0, #1
 80093b8:	6013      	str	r3, [r2, #0]
 80093ba:	b021      	add	sp, #132	; 0x84
 80093bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093be:	2340      	movs	r3, #64	; 0x40
 80093c0:	617b      	str	r3, [r7, #20]
 80093c2:	2300      	movs	r3, #0
 80093c4:	ac08      	add	r4, sp, #32
 80093c6:	6163      	str	r3, [r4, #20]
 80093c8:	3320      	adds	r3, #32
 80093ca:	7663      	strb	r3, [r4, #25]
 80093cc:	3310      	adds	r3, #16
 80093ce:	76a3      	strb	r3, [r4, #26]
 80093d0:	9507      	str	r5, [sp, #28]
 80093d2:	0035      	movs	r5, r6
 80093d4:	782b      	ldrb	r3, [r5, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d001      	beq.n	80093de <_svfiprintf_r+0x52>
 80093da:	2b25      	cmp	r3, #37	; 0x25
 80093dc:	d147      	bne.n	800946e <_svfiprintf_r+0xe2>
 80093de:	1bab      	subs	r3, r5, r6
 80093e0:	9305      	str	r3, [sp, #20]
 80093e2:	42b5      	cmp	r5, r6
 80093e4:	d00c      	beq.n	8009400 <_svfiprintf_r+0x74>
 80093e6:	0032      	movs	r2, r6
 80093e8:	0039      	movs	r1, r7
 80093ea:	9803      	ldr	r0, [sp, #12]
 80093ec:	f7ff ff6c 	bl	80092c8 <__ssputs_r>
 80093f0:	1c43      	adds	r3, r0, #1
 80093f2:	d100      	bne.n	80093f6 <_svfiprintf_r+0x6a>
 80093f4:	e0ae      	b.n	8009554 <_svfiprintf_r+0x1c8>
 80093f6:	6962      	ldr	r2, [r4, #20]
 80093f8:	9b05      	ldr	r3, [sp, #20]
 80093fa:	4694      	mov	ip, r2
 80093fc:	4463      	add	r3, ip
 80093fe:	6163      	str	r3, [r4, #20]
 8009400:	782b      	ldrb	r3, [r5, #0]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d100      	bne.n	8009408 <_svfiprintf_r+0x7c>
 8009406:	e0a5      	b.n	8009554 <_svfiprintf_r+0x1c8>
 8009408:	2201      	movs	r2, #1
 800940a:	2300      	movs	r3, #0
 800940c:	4252      	negs	r2, r2
 800940e:	6062      	str	r2, [r4, #4]
 8009410:	a904      	add	r1, sp, #16
 8009412:	3254      	adds	r2, #84	; 0x54
 8009414:	1852      	adds	r2, r2, r1
 8009416:	1c6e      	adds	r6, r5, #1
 8009418:	6023      	str	r3, [r4, #0]
 800941a:	60e3      	str	r3, [r4, #12]
 800941c:	60a3      	str	r3, [r4, #8]
 800941e:	7013      	strb	r3, [r2, #0]
 8009420:	65a3      	str	r3, [r4, #88]	; 0x58
 8009422:	2205      	movs	r2, #5
 8009424:	7831      	ldrb	r1, [r6, #0]
 8009426:	4854      	ldr	r0, [pc, #336]	; (8009578 <_svfiprintf_r+0x1ec>)
 8009428:	f7ff f962 	bl	80086f0 <memchr>
 800942c:	1c75      	adds	r5, r6, #1
 800942e:	2800      	cmp	r0, #0
 8009430:	d11f      	bne.n	8009472 <_svfiprintf_r+0xe6>
 8009432:	6822      	ldr	r2, [r4, #0]
 8009434:	06d3      	lsls	r3, r2, #27
 8009436:	d504      	bpl.n	8009442 <_svfiprintf_r+0xb6>
 8009438:	2353      	movs	r3, #83	; 0x53
 800943a:	a904      	add	r1, sp, #16
 800943c:	185b      	adds	r3, r3, r1
 800943e:	2120      	movs	r1, #32
 8009440:	7019      	strb	r1, [r3, #0]
 8009442:	0713      	lsls	r3, r2, #28
 8009444:	d504      	bpl.n	8009450 <_svfiprintf_r+0xc4>
 8009446:	2353      	movs	r3, #83	; 0x53
 8009448:	a904      	add	r1, sp, #16
 800944a:	185b      	adds	r3, r3, r1
 800944c:	212b      	movs	r1, #43	; 0x2b
 800944e:	7019      	strb	r1, [r3, #0]
 8009450:	7833      	ldrb	r3, [r6, #0]
 8009452:	2b2a      	cmp	r3, #42	; 0x2a
 8009454:	d016      	beq.n	8009484 <_svfiprintf_r+0xf8>
 8009456:	0035      	movs	r5, r6
 8009458:	2100      	movs	r1, #0
 800945a:	200a      	movs	r0, #10
 800945c:	68e3      	ldr	r3, [r4, #12]
 800945e:	782a      	ldrb	r2, [r5, #0]
 8009460:	1c6e      	adds	r6, r5, #1
 8009462:	3a30      	subs	r2, #48	; 0x30
 8009464:	2a09      	cmp	r2, #9
 8009466:	d94e      	bls.n	8009506 <_svfiprintf_r+0x17a>
 8009468:	2900      	cmp	r1, #0
 800946a:	d111      	bne.n	8009490 <_svfiprintf_r+0x104>
 800946c:	e017      	b.n	800949e <_svfiprintf_r+0x112>
 800946e:	3501      	adds	r5, #1
 8009470:	e7b0      	b.n	80093d4 <_svfiprintf_r+0x48>
 8009472:	4b41      	ldr	r3, [pc, #260]	; (8009578 <_svfiprintf_r+0x1ec>)
 8009474:	6822      	ldr	r2, [r4, #0]
 8009476:	1ac0      	subs	r0, r0, r3
 8009478:	2301      	movs	r3, #1
 800947a:	4083      	lsls	r3, r0
 800947c:	4313      	orrs	r3, r2
 800947e:	002e      	movs	r6, r5
 8009480:	6023      	str	r3, [r4, #0]
 8009482:	e7ce      	b.n	8009422 <_svfiprintf_r+0x96>
 8009484:	9b07      	ldr	r3, [sp, #28]
 8009486:	1d19      	adds	r1, r3, #4
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	9107      	str	r1, [sp, #28]
 800948c:	2b00      	cmp	r3, #0
 800948e:	db01      	blt.n	8009494 <_svfiprintf_r+0x108>
 8009490:	930b      	str	r3, [sp, #44]	; 0x2c
 8009492:	e004      	b.n	800949e <_svfiprintf_r+0x112>
 8009494:	425b      	negs	r3, r3
 8009496:	60e3      	str	r3, [r4, #12]
 8009498:	2302      	movs	r3, #2
 800949a:	4313      	orrs	r3, r2
 800949c:	6023      	str	r3, [r4, #0]
 800949e:	782b      	ldrb	r3, [r5, #0]
 80094a0:	2b2e      	cmp	r3, #46	; 0x2e
 80094a2:	d10a      	bne.n	80094ba <_svfiprintf_r+0x12e>
 80094a4:	786b      	ldrb	r3, [r5, #1]
 80094a6:	2b2a      	cmp	r3, #42	; 0x2a
 80094a8:	d135      	bne.n	8009516 <_svfiprintf_r+0x18a>
 80094aa:	9b07      	ldr	r3, [sp, #28]
 80094ac:	3502      	adds	r5, #2
 80094ae:	1d1a      	adds	r2, r3, #4
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	9207      	str	r2, [sp, #28]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	db2b      	blt.n	8009510 <_svfiprintf_r+0x184>
 80094b8:	9309      	str	r3, [sp, #36]	; 0x24
 80094ba:	4e30      	ldr	r6, [pc, #192]	; (800957c <_svfiprintf_r+0x1f0>)
 80094bc:	2203      	movs	r2, #3
 80094be:	0030      	movs	r0, r6
 80094c0:	7829      	ldrb	r1, [r5, #0]
 80094c2:	f7ff f915 	bl	80086f0 <memchr>
 80094c6:	2800      	cmp	r0, #0
 80094c8:	d006      	beq.n	80094d8 <_svfiprintf_r+0x14c>
 80094ca:	2340      	movs	r3, #64	; 0x40
 80094cc:	1b80      	subs	r0, r0, r6
 80094ce:	4083      	lsls	r3, r0
 80094d0:	6822      	ldr	r2, [r4, #0]
 80094d2:	3501      	adds	r5, #1
 80094d4:	4313      	orrs	r3, r2
 80094d6:	6023      	str	r3, [r4, #0]
 80094d8:	7829      	ldrb	r1, [r5, #0]
 80094da:	2206      	movs	r2, #6
 80094dc:	4828      	ldr	r0, [pc, #160]	; (8009580 <_svfiprintf_r+0x1f4>)
 80094de:	1c6e      	adds	r6, r5, #1
 80094e0:	7621      	strb	r1, [r4, #24]
 80094e2:	f7ff f905 	bl	80086f0 <memchr>
 80094e6:	2800      	cmp	r0, #0
 80094e8:	d03c      	beq.n	8009564 <_svfiprintf_r+0x1d8>
 80094ea:	4b26      	ldr	r3, [pc, #152]	; (8009584 <_svfiprintf_r+0x1f8>)
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d125      	bne.n	800953c <_svfiprintf_r+0x1b0>
 80094f0:	2207      	movs	r2, #7
 80094f2:	9b07      	ldr	r3, [sp, #28]
 80094f4:	3307      	adds	r3, #7
 80094f6:	4393      	bics	r3, r2
 80094f8:	3308      	adds	r3, #8
 80094fa:	9307      	str	r3, [sp, #28]
 80094fc:	6963      	ldr	r3, [r4, #20]
 80094fe:	9a04      	ldr	r2, [sp, #16]
 8009500:	189b      	adds	r3, r3, r2
 8009502:	6163      	str	r3, [r4, #20]
 8009504:	e765      	b.n	80093d2 <_svfiprintf_r+0x46>
 8009506:	4343      	muls	r3, r0
 8009508:	0035      	movs	r5, r6
 800950a:	2101      	movs	r1, #1
 800950c:	189b      	adds	r3, r3, r2
 800950e:	e7a6      	b.n	800945e <_svfiprintf_r+0xd2>
 8009510:	2301      	movs	r3, #1
 8009512:	425b      	negs	r3, r3
 8009514:	e7d0      	b.n	80094b8 <_svfiprintf_r+0x12c>
 8009516:	2300      	movs	r3, #0
 8009518:	200a      	movs	r0, #10
 800951a:	001a      	movs	r2, r3
 800951c:	3501      	adds	r5, #1
 800951e:	6063      	str	r3, [r4, #4]
 8009520:	7829      	ldrb	r1, [r5, #0]
 8009522:	1c6e      	adds	r6, r5, #1
 8009524:	3930      	subs	r1, #48	; 0x30
 8009526:	2909      	cmp	r1, #9
 8009528:	d903      	bls.n	8009532 <_svfiprintf_r+0x1a6>
 800952a:	2b00      	cmp	r3, #0
 800952c:	d0c5      	beq.n	80094ba <_svfiprintf_r+0x12e>
 800952e:	9209      	str	r2, [sp, #36]	; 0x24
 8009530:	e7c3      	b.n	80094ba <_svfiprintf_r+0x12e>
 8009532:	4342      	muls	r2, r0
 8009534:	0035      	movs	r5, r6
 8009536:	2301      	movs	r3, #1
 8009538:	1852      	adds	r2, r2, r1
 800953a:	e7f1      	b.n	8009520 <_svfiprintf_r+0x194>
 800953c:	ab07      	add	r3, sp, #28
 800953e:	9300      	str	r3, [sp, #0]
 8009540:	003a      	movs	r2, r7
 8009542:	0021      	movs	r1, r4
 8009544:	4b10      	ldr	r3, [pc, #64]	; (8009588 <_svfiprintf_r+0x1fc>)
 8009546:	9803      	ldr	r0, [sp, #12]
 8009548:	f7fc f9e2 	bl	8005910 <_printf_float>
 800954c:	9004      	str	r0, [sp, #16]
 800954e:	9b04      	ldr	r3, [sp, #16]
 8009550:	3301      	adds	r3, #1
 8009552:	d1d3      	bne.n	80094fc <_svfiprintf_r+0x170>
 8009554:	89bb      	ldrh	r3, [r7, #12]
 8009556:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009558:	065b      	lsls	r3, r3, #25
 800955a:	d400      	bmi.n	800955e <_svfiprintf_r+0x1d2>
 800955c:	e72d      	b.n	80093ba <_svfiprintf_r+0x2e>
 800955e:	2001      	movs	r0, #1
 8009560:	4240      	negs	r0, r0
 8009562:	e72a      	b.n	80093ba <_svfiprintf_r+0x2e>
 8009564:	ab07      	add	r3, sp, #28
 8009566:	9300      	str	r3, [sp, #0]
 8009568:	003a      	movs	r2, r7
 800956a:	0021      	movs	r1, r4
 800956c:	4b06      	ldr	r3, [pc, #24]	; (8009588 <_svfiprintf_r+0x1fc>)
 800956e:	9803      	ldr	r0, [sp, #12]
 8009570:	f7fc fc80 	bl	8005e74 <_printf_i>
 8009574:	e7ea      	b.n	800954c <_svfiprintf_r+0x1c0>
 8009576:	46c0      	nop			; (mov r8, r8)
 8009578:	0800a6d4 	.word	0x0800a6d4
 800957c:	0800a6da 	.word	0x0800a6da
 8009580:	0800a6de 	.word	0x0800a6de
 8009584:	08005911 	.word	0x08005911
 8009588:	080092c9 	.word	0x080092c9

0800958c <nan>:
 800958c:	2000      	movs	r0, #0
 800958e:	4901      	ldr	r1, [pc, #4]	; (8009594 <nan+0x8>)
 8009590:	4770      	bx	lr
 8009592:	46c0      	nop			; (mov r8, r8)
 8009594:	7ff80000 	.word	0x7ff80000

08009598 <_sbrk_r>:
 8009598:	2300      	movs	r3, #0
 800959a:	b570      	push	{r4, r5, r6, lr}
 800959c:	4d06      	ldr	r5, [pc, #24]	; (80095b8 <_sbrk_r+0x20>)
 800959e:	0004      	movs	r4, r0
 80095a0:	0008      	movs	r0, r1
 80095a2:	602b      	str	r3, [r5, #0]
 80095a4:	f7f9 fa14 	bl	80029d0 <_sbrk>
 80095a8:	1c43      	adds	r3, r0, #1
 80095aa:	d103      	bne.n	80095b4 <_sbrk_r+0x1c>
 80095ac:	682b      	ldr	r3, [r5, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d000      	beq.n	80095b4 <_sbrk_r+0x1c>
 80095b2:	6023      	str	r3, [r4, #0]
 80095b4:	bd70      	pop	{r4, r5, r6, pc}
 80095b6:	46c0      	nop			; (mov r8, r8)
 80095b8:	20000318 	.word	0x20000318

080095bc <strncmp>:
 80095bc:	b530      	push	{r4, r5, lr}
 80095be:	0005      	movs	r5, r0
 80095c0:	1e10      	subs	r0, r2, #0
 80095c2:	d008      	beq.n	80095d6 <strncmp+0x1a>
 80095c4:	2400      	movs	r4, #0
 80095c6:	3a01      	subs	r2, #1
 80095c8:	5d2b      	ldrb	r3, [r5, r4]
 80095ca:	5d08      	ldrb	r0, [r1, r4]
 80095cc:	4283      	cmp	r3, r0
 80095ce:	d101      	bne.n	80095d4 <strncmp+0x18>
 80095d0:	4294      	cmp	r4, r2
 80095d2:	d101      	bne.n	80095d8 <strncmp+0x1c>
 80095d4:	1a18      	subs	r0, r3, r0
 80095d6:	bd30      	pop	{r4, r5, pc}
 80095d8:	3401      	adds	r4, #1
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d1f4      	bne.n	80095c8 <strncmp+0xc>
 80095de:	e7f9      	b.n	80095d4 <strncmp+0x18>

080095e0 <__ascii_wctomb>:
 80095e0:	0003      	movs	r3, r0
 80095e2:	1e08      	subs	r0, r1, #0
 80095e4:	d005      	beq.n	80095f2 <__ascii_wctomb+0x12>
 80095e6:	2aff      	cmp	r2, #255	; 0xff
 80095e8:	d904      	bls.n	80095f4 <__ascii_wctomb+0x14>
 80095ea:	228a      	movs	r2, #138	; 0x8a
 80095ec:	2001      	movs	r0, #1
 80095ee:	601a      	str	r2, [r3, #0]
 80095f0:	4240      	negs	r0, r0
 80095f2:	4770      	bx	lr
 80095f4:	2001      	movs	r0, #1
 80095f6:	700a      	strb	r2, [r1, #0]
 80095f8:	e7fb      	b.n	80095f2 <__ascii_wctomb+0x12>
	...

080095fc <__assert_func>:
 80095fc:	b530      	push	{r4, r5, lr}
 80095fe:	0014      	movs	r4, r2
 8009600:	001a      	movs	r2, r3
 8009602:	4b09      	ldr	r3, [pc, #36]	; (8009628 <__assert_func+0x2c>)
 8009604:	0005      	movs	r5, r0
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	b085      	sub	sp, #20
 800960a:	68d8      	ldr	r0, [r3, #12]
 800960c:	4b07      	ldr	r3, [pc, #28]	; (800962c <__assert_func+0x30>)
 800960e:	2c00      	cmp	r4, #0
 8009610:	d101      	bne.n	8009616 <__assert_func+0x1a>
 8009612:	4b07      	ldr	r3, [pc, #28]	; (8009630 <__assert_func+0x34>)
 8009614:	001c      	movs	r4, r3
 8009616:	9301      	str	r3, [sp, #4]
 8009618:	9100      	str	r1, [sp, #0]
 800961a:	002b      	movs	r3, r5
 800961c:	4905      	ldr	r1, [pc, #20]	; (8009634 <__assert_func+0x38>)
 800961e:	9402      	str	r4, [sp, #8]
 8009620:	f000 f80a 	bl	8009638 <fiprintf>
 8009624:	f000 fa9a 	bl	8009b5c <abort>
 8009628:	2000000c 	.word	0x2000000c
 800962c:	0800a6e5 	.word	0x0800a6e5
 8009630:	0800a720 	.word	0x0800a720
 8009634:	0800a6f2 	.word	0x0800a6f2

08009638 <fiprintf>:
 8009638:	b40e      	push	{r1, r2, r3}
 800963a:	b503      	push	{r0, r1, lr}
 800963c:	0001      	movs	r1, r0
 800963e:	ab03      	add	r3, sp, #12
 8009640:	4804      	ldr	r0, [pc, #16]	; (8009654 <fiprintf+0x1c>)
 8009642:	cb04      	ldmia	r3!, {r2}
 8009644:	6800      	ldr	r0, [r0, #0]
 8009646:	9301      	str	r3, [sp, #4]
 8009648:	f000 f880 	bl	800974c <_vfiprintf_r>
 800964c:	b002      	add	sp, #8
 800964e:	bc08      	pop	{r3}
 8009650:	b003      	add	sp, #12
 8009652:	4718      	bx	r3
 8009654:	2000000c 	.word	0x2000000c

08009658 <memmove>:
 8009658:	b510      	push	{r4, lr}
 800965a:	4288      	cmp	r0, r1
 800965c:	d902      	bls.n	8009664 <memmove+0xc>
 800965e:	188b      	adds	r3, r1, r2
 8009660:	4298      	cmp	r0, r3
 8009662:	d303      	bcc.n	800966c <memmove+0x14>
 8009664:	2300      	movs	r3, #0
 8009666:	e007      	b.n	8009678 <memmove+0x20>
 8009668:	5c8b      	ldrb	r3, [r1, r2]
 800966a:	5483      	strb	r3, [r0, r2]
 800966c:	3a01      	subs	r2, #1
 800966e:	d2fb      	bcs.n	8009668 <memmove+0x10>
 8009670:	bd10      	pop	{r4, pc}
 8009672:	5ccc      	ldrb	r4, [r1, r3]
 8009674:	54c4      	strb	r4, [r0, r3]
 8009676:	3301      	adds	r3, #1
 8009678:	429a      	cmp	r2, r3
 800967a:	d1fa      	bne.n	8009672 <memmove+0x1a>
 800967c:	e7f8      	b.n	8009670 <memmove+0x18>
	...

08009680 <__malloc_lock>:
 8009680:	b510      	push	{r4, lr}
 8009682:	4802      	ldr	r0, [pc, #8]	; (800968c <__malloc_lock+0xc>)
 8009684:	f000 fc41 	bl	8009f0a <__retarget_lock_acquire_recursive>
 8009688:	bd10      	pop	{r4, pc}
 800968a:	46c0      	nop			; (mov r8, r8)
 800968c:	2000031c 	.word	0x2000031c

08009690 <__malloc_unlock>:
 8009690:	b510      	push	{r4, lr}
 8009692:	4802      	ldr	r0, [pc, #8]	; (800969c <__malloc_unlock+0xc>)
 8009694:	f000 fc3a 	bl	8009f0c <__retarget_lock_release_recursive>
 8009698:	bd10      	pop	{r4, pc}
 800969a:	46c0      	nop			; (mov r8, r8)
 800969c:	2000031c 	.word	0x2000031c

080096a0 <_realloc_r>:
 80096a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096a2:	0007      	movs	r7, r0
 80096a4:	000e      	movs	r6, r1
 80096a6:	0014      	movs	r4, r2
 80096a8:	2900      	cmp	r1, #0
 80096aa:	d105      	bne.n	80096b8 <_realloc_r+0x18>
 80096ac:	0011      	movs	r1, r2
 80096ae:	f7ff fd95 	bl	80091dc <_malloc_r>
 80096b2:	0005      	movs	r5, r0
 80096b4:	0028      	movs	r0, r5
 80096b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80096b8:	2a00      	cmp	r2, #0
 80096ba:	d103      	bne.n	80096c4 <_realloc_r+0x24>
 80096bc:	f7ff fd22 	bl	8009104 <_free_r>
 80096c0:	0025      	movs	r5, r4
 80096c2:	e7f7      	b.n	80096b4 <_realloc_r+0x14>
 80096c4:	f000 fc90 	bl	8009fe8 <_malloc_usable_size_r>
 80096c8:	9001      	str	r0, [sp, #4]
 80096ca:	4284      	cmp	r4, r0
 80096cc:	d803      	bhi.n	80096d6 <_realloc_r+0x36>
 80096ce:	0035      	movs	r5, r6
 80096d0:	0843      	lsrs	r3, r0, #1
 80096d2:	42a3      	cmp	r3, r4
 80096d4:	d3ee      	bcc.n	80096b4 <_realloc_r+0x14>
 80096d6:	0021      	movs	r1, r4
 80096d8:	0038      	movs	r0, r7
 80096da:	f7ff fd7f 	bl	80091dc <_malloc_r>
 80096de:	1e05      	subs	r5, r0, #0
 80096e0:	d0e8      	beq.n	80096b4 <_realloc_r+0x14>
 80096e2:	9b01      	ldr	r3, [sp, #4]
 80096e4:	0022      	movs	r2, r4
 80096e6:	429c      	cmp	r4, r3
 80096e8:	d900      	bls.n	80096ec <_realloc_r+0x4c>
 80096ea:	001a      	movs	r2, r3
 80096ec:	0031      	movs	r1, r6
 80096ee:	0028      	movs	r0, r5
 80096f0:	f7ff f809 	bl	8008706 <memcpy>
 80096f4:	0031      	movs	r1, r6
 80096f6:	0038      	movs	r0, r7
 80096f8:	f7ff fd04 	bl	8009104 <_free_r>
 80096fc:	e7da      	b.n	80096b4 <_realloc_r+0x14>

080096fe <__sfputc_r>:
 80096fe:	6893      	ldr	r3, [r2, #8]
 8009700:	b510      	push	{r4, lr}
 8009702:	3b01      	subs	r3, #1
 8009704:	6093      	str	r3, [r2, #8]
 8009706:	2b00      	cmp	r3, #0
 8009708:	da04      	bge.n	8009714 <__sfputc_r+0x16>
 800970a:	6994      	ldr	r4, [r2, #24]
 800970c:	42a3      	cmp	r3, r4
 800970e:	db07      	blt.n	8009720 <__sfputc_r+0x22>
 8009710:	290a      	cmp	r1, #10
 8009712:	d005      	beq.n	8009720 <__sfputc_r+0x22>
 8009714:	6813      	ldr	r3, [r2, #0]
 8009716:	1c58      	adds	r0, r3, #1
 8009718:	6010      	str	r0, [r2, #0]
 800971a:	7019      	strb	r1, [r3, #0]
 800971c:	0008      	movs	r0, r1
 800971e:	bd10      	pop	{r4, pc}
 8009720:	f000 f94e 	bl	80099c0 <__swbuf_r>
 8009724:	0001      	movs	r1, r0
 8009726:	e7f9      	b.n	800971c <__sfputc_r+0x1e>

08009728 <__sfputs_r>:
 8009728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800972a:	0006      	movs	r6, r0
 800972c:	000f      	movs	r7, r1
 800972e:	0014      	movs	r4, r2
 8009730:	18d5      	adds	r5, r2, r3
 8009732:	42ac      	cmp	r4, r5
 8009734:	d101      	bne.n	800973a <__sfputs_r+0x12>
 8009736:	2000      	movs	r0, #0
 8009738:	e007      	b.n	800974a <__sfputs_r+0x22>
 800973a:	7821      	ldrb	r1, [r4, #0]
 800973c:	003a      	movs	r2, r7
 800973e:	0030      	movs	r0, r6
 8009740:	f7ff ffdd 	bl	80096fe <__sfputc_r>
 8009744:	3401      	adds	r4, #1
 8009746:	1c43      	adds	r3, r0, #1
 8009748:	d1f3      	bne.n	8009732 <__sfputs_r+0xa>
 800974a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800974c <_vfiprintf_r>:
 800974c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800974e:	b0a1      	sub	sp, #132	; 0x84
 8009750:	0006      	movs	r6, r0
 8009752:	000c      	movs	r4, r1
 8009754:	001f      	movs	r7, r3
 8009756:	9203      	str	r2, [sp, #12]
 8009758:	2800      	cmp	r0, #0
 800975a:	d004      	beq.n	8009766 <_vfiprintf_r+0x1a>
 800975c:	6983      	ldr	r3, [r0, #24]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d101      	bne.n	8009766 <_vfiprintf_r+0x1a>
 8009762:	f000 fb31 	bl	8009dc8 <__sinit>
 8009766:	4b8e      	ldr	r3, [pc, #568]	; (80099a0 <_vfiprintf_r+0x254>)
 8009768:	429c      	cmp	r4, r3
 800976a:	d11c      	bne.n	80097a6 <_vfiprintf_r+0x5a>
 800976c:	6874      	ldr	r4, [r6, #4]
 800976e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009770:	07db      	lsls	r3, r3, #31
 8009772:	d405      	bmi.n	8009780 <_vfiprintf_r+0x34>
 8009774:	89a3      	ldrh	r3, [r4, #12]
 8009776:	059b      	lsls	r3, r3, #22
 8009778:	d402      	bmi.n	8009780 <_vfiprintf_r+0x34>
 800977a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800977c:	f000 fbc5 	bl	8009f0a <__retarget_lock_acquire_recursive>
 8009780:	89a3      	ldrh	r3, [r4, #12]
 8009782:	071b      	lsls	r3, r3, #28
 8009784:	d502      	bpl.n	800978c <_vfiprintf_r+0x40>
 8009786:	6923      	ldr	r3, [r4, #16]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d11d      	bne.n	80097c8 <_vfiprintf_r+0x7c>
 800978c:	0021      	movs	r1, r4
 800978e:	0030      	movs	r0, r6
 8009790:	f000 f96c 	bl	8009a6c <__swsetup_r>
 8009794:	2800      	cmp	r0, #0
 8009796:	d017      	beq.n	80097c8 <_vfiprintf_r+0x7c>
 8009798:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800979a:	07db      	lsls	r3, r3, #31
 800979c:	d50d      	bpl.n	80097ba <_vfiprintf_r+0x6e>
 800979e:	2001      	movs	r0, #1
 80097a0:	4240      	negs	r0, r0
 80097a2:	b021      	add	sp, #132	; 0x84
 80097a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097a6:	4b7f      	ldr	r3, [pc, #508]	; (80099a4 <_vfiprintf_r+0x258>)
 80097a8:	429c      	cmp	r4, r3
 80097aa:	d101      	bne.n	80097b0 <_vfiprintf_r+0x64>
 80097ac:	68b4      	ldr	r4, [r6, #8]
 80097ae:	e7de      	b.n	800976e <_vfiprintf_r+0x22>
 80097b0:	4b7d      	ldr	r3, [pc, #500]	; (80099a8 <_vfiprintf_r+0x25c>)
 80097b2:	429c      	cmp	r4, r3
 80097b4:	d1db      	bne.n	800976e <_vfiprintf_r+0x22>
 80097b6:	68f4      	ldr	r4, [r6, #12]
 80097b8:	e7d9      	b.n	800976e <_vfiprintf_r+0x22>
 80097ba:	89a3      	ldrh	r3, [r4, #12]
 80097bc:	059b      	lsls	r3, r3, #22
 80097be:	d4ee      	bmi.n	800979e <_vfiprintf_r+0x52>
 80097c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097c2:	f000 fba3 	bl	8009f0c <__retarget_lock_release_recursive>
 80097c6:	e7ea      	b.n	800979e <_vfiprintf_r+0x52>
 80097c8:	2300      	movs	r3, #0
 80097ca:	ad08      	add	r5, sp, #32
 80097cc:	616b      	str	r3, [r5, #20]
 80097ce:	3320      	adds	r3, #32
 80097d0:	766b      	strb	r3, [r5, #25]
 80097d2:	3310      	adds	r3, #16
 80097d4:	76ab      	strb	r3, [r5, #26]
 80097d6:	9707      	str	r7, [sp, #28]
 80097d8:	9f03      	ldr	r7, [sp, #12]
 80097da:	783b      	ldrb	r3, [r7, #0]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d001      	beq.n	80097e4 <_vfiprintf_r+0x98>
 80097e0:	2b25      	cmp	r3, #37	; 0x25
 80097e2:	d14e      	bne.n	8009882 <_vfiprintf_r+0x136>
 80097e4:	9b03      	ldr	r3, [sp, #12]
 80097e6:	1afb      	subs	r3, r7, r3
 80097e8:	9305      	str	r3, [sp, #20]
 80097ea:	9b03      	ldr	r3, [sp, #12]
 80097ec:	429f      	cmp	r7, r3
 80097ee:	d00d      	beq.n	800980c <_vfiprintf_r+0xc0>
 80097f0:	9b05      	ldr	r3, [sp, #20]
 80097f2:	0021      	movs	r1, r4
 80097f4:	0030      	movs	r0, r6
 80097f6:	9a03      	ldr	r2, [sp, #12]
 80097f8:	f7ff ff96 	bl	8009728 <__sfputs_r>
 80097fc:	1c43      	adds	r3, r0, #1
 80097fe:	d100      	bne.n	8009802 <_vfiprintf_r+0xb6>
 8009800:	e0b5      	b.n	800996e <_vfiprintf_r+0x222>
 8009802:	696a      	ldr	r2, [r5, #20]
 8009804:	9b05      	ldr	r3, [sp, #20]
 8009806:	4694      	mov	ip, r2
 8009808:	4463      	add	r3, ip
 800980a:	616b      	str	r3, [r5, #20]
 800980c:	783b      	ldrb	r3, [r7, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d100      	bne.n	8009814 <_vfiprintf_r+0xc8>
 8009812:	e0ac      	b.n	800996e <_vfiprintf_r+0x222>
 8009814:	2201      	movs	r2, #1
 8009816:	1c7b      	adds	r3, r7, #1
 8009818:	9303      	str	r3, [sp, #12]
 800981a:	2300      	movs	r3, #0
 800981c:	4252      	negs	r2, r2
 800981e:	606a      	str	r2, [r5, #4]
 8009820:	a904      	add	r1, sp, #16
 8009822:	3254      	adds	r2, #84	; 0x54
 8009824:	1852      	adds	r2, r2, r1
 8009826:	602b      	str	r3, [r5, #0]
 8009828:	60eb      	str	r3, [r5, #12]
 800982a:	60ab      	str	r3, [r5, #8]
 800982c:	7013      	strb	r3, [r2, #0]
 800982e:	65ab      	str	r3, [r5, #88]	; 0x58
 8009830:	9b03      	ldr	r3, [sp, #12]
 8009832:	2205      	movs	r2, #5
 8009834:	7819      	ldrb	r1, [r3, #0]
 8009836:	485d      	ldr	r0, [pc, #372]	; (80099ac <_vfiprintf_r+0x260>)
 8009838:	f7fe ff5a 	bl	80086f0 <memchr>
 800983c:	9b03      	ldr	r3, [sp, #12]
 800983e:	1c5f      	adds	r7, r3, #1
 8009840:	2800      	cmp	r0, #0
 8009842:	d120      	bne.n	8009886 <_vfiprintf_r+0x13a>
 8009844:	682a      	ldr	r2, [r5, #0]
 8009846:	06d3      	lsls	r3, r2, #27
 8009848:	d504      	bpl.n	8009854 <_vfiprintf_r+0x108>
 800984a:	2353      	movs	r3, #83	; 0x53
 800984c:	a904      	add	r1, sp, #16
 800984e:	185b      	adds	r3, r3, r1
 8009850:	2120      	movs	r1, #32
 8009852:	7019      	strb	r1, [r3, #0]
 8009854:	0713      	lsls	r3, r2, #28
 8009856:	d504      	bpl.n	8009862 <_vfiprintf_r+0x116>
 8009858:	2353      	movs	r3, #83	; 0x53
 800985a:	a904      	add	r1, sp, #16
 800985c:	185b      	adds	r3, r3, r1
 800985e:	212b      	movs	r1, #43	; 0x2b
 8009860:	7019      	strb	r1, [r3, #0]
 8009862:	9b03      	ldr	r3, [sp, #12]
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	2b2a      	cmp	r3, #42	; 0x2a
 8009868:	d016      	beq.n	8009898 <_vfiprintf_r+0x14c>
 800986a:	2100      	movs	r1, #0
 800986c:	68eb      	ldr	r3, [r5, #12]
 800986e:	9f03      	ldr	r7, [sp, #12]
 8009870:	783a      	ldrb	r2, [r7, #0]
 8009872:	1c78      	adds	r0, r7, #1
 8009874:	3a30      	subs	r2, #48	; 0x30
 8009876:	4684      	mov	ip, r0
 8009878:	2a09      	cmp	r2, #9
 800987a:	d94f      	bls.n	800991c <_vfiprintf_r+0x1d0>
 800987c:	2900      	cmp	r1, #0
 800987e:	d111      	bne.n	80098a4 <_vfiprintf_r+0x158>
 8009880:	e017      	b.n	80098b2 <_vfiprintf_r+0x166>
 8009882:	3701      	adds	r7, #1
 8009884:	e7a9      	b.n	80097da <_vfiprintf_r+0x8e>
 8009886:	4b49      	ldr	r3, [pc, #292]	; (80099ac <_vfiprintf_r+0x260>)
 8009888:	682a      	ldr	r2, [r5, #0]
 800988a:	1ac0      	subs	r0, r0, r3
 800988c:	2301      	movs	r3, #1
 800988e:	4083      	lsls	r3, r0
 8009890:	4313      	orrs	r3, r2
 8009892:	602b      	str	r3, [r5, #0]
 8009894:	9703      	str	r7, [sp, #12]
 8009896:	e7cb      	b.n	8009830 <_vfiprintf_r+0xe4>
 8009898:	9b07      	ldr	r3, [sp, #28]
 800989a:	1d19      	adds	r1, r3, #4
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	9107      	str	r1, [sp, #28]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	db01      	blt.n	80098a8 <_vfiprintf_r+0x15c>
 80098a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80098a6:	e004      	b.n	80098b2 <_vfiprintf_r+0x166>
 80098a8:	425b      	negs	r3, r3
 80098aa:	60eb      	str	r3, [r5, #12]
 80098ac:	2302      	movs	r3, #2
 80098ae:	4313      	orrs	r3, r2
 80098b0:	602b      	str	r3, [r5, #0]
 80098b2:	783b      	ldrb	r3, [r7, #0]
 80098b4:	2b2e      	cmp	r3, #46	; 0x2e
 80098b6:	d10a      	bne.n	80098ce <_vfiprintf_r+0x182>
 80098b8:	787b      	ldrb	r3, [r7, #1]
 80098ba:	2b2a      	cmp	r3, #42	; 0x2a
 80098bc:	d137      	bne.n	800992e <_vfiprintf_r+0x1e2>
 80098be:	9b07      	ldr	r3, [sp, #28]
 80098c0:	3702      	adds	r7, #2
 80098c2:	1d1a      	adds	r2, r3, #4
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	9207      	str	r2, [sp, #28]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	db2d      	blt.n	8009928 <_vfiprintf_r+0x1dc>
 80098cc:	9309      	str	r3, [sp, #36]	; 0x24
 80098ce:	2203      	movs	r2, #3
 80098d0:	7839      	ldrb	r1, [r7, #0]
 80098d2:	4837      	ldr	r0, [pc, #220]	; (80099b0 <_vfiprintf_r+0x264>)
 80098d4:	f7fe ff0c 	bl	80086f0 <memchr>
 80098d8:	2800      	cmp	r0, #0
 80098da:	d007      	beq.n	80098ec <_vfiprintf_r+0x1a0>
 80098dc:	4b34      	ldr	r3, [pc, #208]	; (80099b0 <_vfiprintf_r+0x264>)
 80098de:	682a      	ldr	r2, [r5, #0]
 80098e0:	1ac0      	subs	r0, r0, r3
 80098e2:	2340      	movs	r3, #64	; 0x40
 80098e4:	4083      	lsls	r3, r0
 80098e6:	4313      	orrs	r3, r2
 80098e8:	3701      	adds	r7, #1
 80098ea:	602b      	str	r3, [r5, #0]
 80098ec:	7839      	ldrb	r1, [r7, #0]
 80098ee:	1c7b      	adds	r3, r7, #1
 80098f0:	2206      	movs	r2, #6
 80098f2:	4830      	ldr	r0, [pc, #192]	; (80099b4 <_vfiprintf_r+0x268>)
 80098f4:	9303      	str	r3, [sp, #12]
 80098f6:	7629      	strb	r1, [r5, #24]
 80098f8:	f7fe fefa 	bl	80086f0 <memchr>
 80098fc:	2800      	cmp	r0, #0
 80098fe:	d045      	beq.n	800998c <_vfiprintf_r+0x240>
 8009900:	4b2d      	ldr	r3, [pc, #180]	; (80099b8 <_vfiprintf_r+0x26c>)
 8009902:	2b00      	cmp	r3, #0
 8009904:	d127      	bne.n	8009956 <_vfiprintf_r+0x20a>
 8009906:	2207      	movs	r2, #7
 8009908:	9b07      	ldr	r3, [sp, #28]
 800990a:	3307      	adds	r3, #7
 800990c:	4393      	bics	r3, r2
 800990e:	3308      	adds	r3, #8
 8009910:	9307      	str	r3, [sp, #28]
 8009912:	696b      	ldr	r3, [r5, #20]
 8009914:	9a04      	ldr	r2, [sp, #16]
 8009916:	189b      	adds	r3, r3, r2
 8009918:	616b      	str	r3, [r5, #20]
 800991a:	e75d      	b.n	80097d8 <_vfiprintf_r+0x8c>
 800991c:	210a      	movs	r1, #10
 800991e:	434b      	muls	r3, r1
 8009920:	4667      	mov	r7, ip
 8009922:	189b      	adds	r3, r3, r2
 8009924:	3909      	subs	r1, #9
 8009926:	e7a3      	b.n	8009870 <_vfiprintf_r+0x124>
 8009928:	2301      	movs	r3, #1
 800992a:	425b      	negs	r3, r3
 800992c:	e7ce      	b.n	80098cc <_vfiprintf_r+0x180>
 800992e:	2300      	movs	r3, #0
 8009930:	001a      	movs	r2, r3
 8009932:	3701      	adds	r7, #1
 8009934:	606b      	str	r3, [r5, #4]
 8009936:	7839      	ldrb	r1, [r7, #0]
 8009938:	1c78      	adds	r0, r7, #1
 800993a:	3930      	subs	r1, #48	; 0x30
 800993c:	4684      	mov	ip, r0
 800993e:	2909      	cmp	r1, #9
 8009940:	d903      	bls.n	800994a <_vfiprintf_r+0x1fe>
 8009942:	2b00      	cmp	r3, #0
 8009944:	d0c3      	beq.n	80098ce <_vfiprintf_r+0x182>
 8009946:	9209      	str	r2, [sp, #36]	; 0x24
 8009948:	e7c1      	b.n	80098ce <_vfiprintf_r+0x182>
 800994a:	230a      	movs	r3, #10
 800994c:	435a      	muls	r2, r3
 800994e:	4667      	mov	r7, ip
 8009950:	1852      	adds	r2, r2, r1
 8009952:	3b09      	subs	r3, #9
 8009954:	e7ef      	b.n	8009936 <_vfiprintf_r+0x1ea>
 8009956:	ab07      	add	r3, sp, #28
 8009958:	9300      	str	r3, [sp, #0]
 800995a:	0022      	movs	r2, r4
 800995c:	0029      	movs	r1, r5
 800995e:	0030      	movs	r0, r6
 8009960:	4b16      	ldr	r3, [pc, #88]	; (80099bc <_vfiprintf_r+0x270>)
 8009962:	f7fb ffd5 	bl	8005910 <_printf_float>
 8009966:	9004      	str	r0, [sp, #16]
 8009968:	9b04      	ldr	r3, [sp, #16]
 800996a:	3301      	adds	r3, #1
 800996c:	d1d1      	bne.n	8009912 <_vfiprintf_r+0x1c6>
 800996e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009970:	07db      	lsls	r3, r3, #31
 8009972:	d405      	bmi.n	8009980 <_vfiprintf_r+0x234>
 8009974:	89a3      	ldrh	r3, [r4, #12]
 8009976:	059b      	lsls	r3, r3, #22
 8009978:	d402      	bmi.n	8009980 <_vfiprintf_r+0x234>
 800997a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800997c:	f000 fac6 	bl	8009f0c <__retarget_lock_release_recursive>
 8009980:	89a3      	ldrh	r3, [r4, #12]
 8009982:	065b      	lsls	r3, r3, #25
 8009984:	d500      	bpl.n	8009988 <_vfiprintf_r+0x23c>
 8009986:	e70a      	b.n	800979e <_vfiprintf_r+0x52>
 8009988:	980d      	ldr	r0, [sp, #52]	; 0x34
 800998a:	e70a      	b.n	80097a2 <_vfiprintf_r+0x56>
 800998c:	ab07      	add	r3, sp, #28
 800998e:	9300      	str	r3, [sp, #0]
 8009990:	0022      	movs	r2, r4
 8009992:	0029      	movs	r1, r5
 8009994:	0030      	movs	r0, r6
 8009996:	4b09      	ldr	r3, [pc, #36]	; (80099bc <_vfiprintf_r+0x270>)
 8009998:	f7fc fa6c 	bl	8005e74 <_printf_i>
 800999c:	e7e3      	b.n	8009966 <_vfiprintf_r+0x21a>
 800999e:	46c0      	nop			; (mov r8, r8)
 80099a0:	0800a744 	.word	0x0800a744
 80099a4:	0800a764 	.word	0x0800a764
 80099a8:	0800a724 	.word	0x0800a724
 80099ac:	0800a6d4 	.word	0x0800a6d4
 80099b0:	0800a6da 	.word	0x0800a6da
 80099b4:	0800a6de 	.word	0x0800a6de
 80099b8:	08005911 	.word	0x08005911
 80099bc:	08009729 	.word	0x08009729

080099c0 <__swbuf_r>:
 80099c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099c2:	0005      	movs	r5, r0
 80099c4:	000e      	movs	r6, r1
 80099c6:	0014      	movs	r4, r2
 80099c8:	2800      	cmp	r0, #0
 80099ca:	d004      	beq.n	80099d6 <__swbuf_r+0x16>
 80099cc:	6983      	ldr	r3, [r0, #24]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d101      	bne.n	80099d6 <__swbuf_r+0x16>
 80099d2:	f000 f9f9 	bl	8009dc8 <__sinit>
 80099d6:	4b22      	ldr	r3, [pc, #136]	; (8009a60 <__swbuf_r+0xa0>)
 80099d8:	429c      	cmp	r4, r3
 80099da:	d12e      	bne.n	8009a3a <__swbuf_r+0x7a>
 80099dc:	686c      	ldr	r4, [r5, #4]
 80099de:	69a3      	ldr	r3, [r4, #24]
 80099e0:	60a3      	str	r3, [r4, #8]
 80099e2:	89a3      	ldrh	r3, [r4, #12]
 80099e4:	071b      	lsls	r3, r3, #28
 80099e6:	d532      	bpl.n	8009a4e <__swbuf_r+0x8e>
 80099e8:	6923      	ldr	r3, [r4, #16]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d02f      	beq.n	8009a4e <__swbuf_r+0x8e>
 80099ee:	6823      	ldr	r3, [r4, #0]
 80099f0:	6922      	ldr	r2, [r4, #16]
 80099f2:	b2f7      	uxtb	r7, r6
 80099f4:	1a98      	subs	r0, r3, r2
 80099f6:	6963      	ldr	r3, [r4, #20]
 80099f8:	b2f6      	uxtb	r6, r6
 80099fa:	4283      	cmp	r3, r0
 80099fc:	dc05      	bgt.n	8009a0a <__swbuf_r+0x4a>
 80099fe:	0021      	movs	r1, r4
 8009a00:	0028      	movs	r0, r5
 8009a02:	f000 f93f 	bl	8009c84 <_fflush_r>
 8009a06:	2800      	cmp	r0, #0
 8009a08:	d127      	bne.n	8009a5a <__swbuf_r+0x9a>
 8009a0a:	68a3      	ldr	r3, [r4, #8]
 8009a0c:	3001      	adds	r0, #1
 8009a0e:	3b01      	subs	r3, #1
 8009a10:	60a3      	str	r3, [r4, #8]
 8009a12:	6823      	ldr	r3, [r4, #0]
 8009a14:	1c5a      	adds	r2, r3, #1
 8009a16:	6022      	str	r2, [r4, #0]
 8009a18:	701f      	strb	r7, [r3, #0]
 8009a1a:	6963      	ldr	r3, [r4, #20]
 8009a1c:	4283      	cmp	r3, r0
 8009a1e:	d004      	beq.n	8009a2a <__swbuf_r+0x6a>
 8009a20:	89a3      	ldrh	r3, [r4, #12]
 8009a22:	07db      	lsls	r3, r3, #31
 8009a24:	d507      	bpl.n	8009a36 <__swbuf_r+0x76>
 8009a26:	2e0a      	cmp	r6, #10
 8009a28:	d105      	bne.n	8009a36 <__swbuf_r+0x76>
 8009a2a:	0021      	movs	r1, r4
 8009a2c:	0028      	movs	r0, r5
 8009a2e:	f000 f929 	bl	8009c84 <_fflush_r>
 8009a32:	2800      	cmp	r0, #0
 8009a34:	d111      	bne.n	8009a5a <__swbuf_r+0x9a>
 8009a36:	0030      	movs	r0, r6
 8009a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a3a:	4b0a      	ldr	r3, [pc, #40]	; (8009a64 <__swbuf_r+0xa4>)
 8009a3c:	429c      	cmp	r4, r3
 8009a3e:	d101      	bne.n	8009a44 <__swbuf_r+0x84>
 8009a40:	68ac      	ldr	r4, [r5, #8]
 8009a42:	e7cc      	b.n	80099de <__swbuf_r+0x1e>
 8009a44:	4b08      	ldr	r3, [pc, #32]	; (8009a68 <__swbuf_r+0xa8>)
 8009a46:	429c      	cmp	r4, r3
 8009a48:	d1c9      	bne.n	80099de <__swbuf_r+0x1e>
 8009a4a:	68ec      	ldr	r4, [r5, #12]
 8009a4c:	e7c7      	b.n	80099de <__swbuf_r+0x1e>
 8009a4e:	0021      	movs	r1, r4
 8009a50:	0028      	movs	r0, r5
 8009a52:	f000 f80b 	bl	8009a6c <__swsetup_r>
 8009a56:	2800      	cmp	r0, #0
 8009a58:	d0c9      	beq.n	80099ee <__swbuf_r+0x2e>
 8009a5a:	2601      	movs	r6, #1
 8009a5c:	4276      	negs	r6, r6
 8009a5e:	e7ea      	b.n	8009a36 <__swbuf_r+0x76>
 8009a60:	0800a744 	.word	0x0800a744
 8009a64:	0800a764 	.word	0x0800a764
 8009a68:	0800a724 	.word	0x0800a724

08009a6c <__swsetup_r>:
 8009a6c:	4b37      	ldr	r3, [pc, #220]	; (8009b4c <__swsetup_r+0xe0>)
 8009a6e:	b570      	push	{r4, r5, r6, lr}
 8009a70:	681d      	ldr	r5, [r3, #0]
 8009a72:	0006      	movs	r6, r0
 8009a74:	000c      	movs	r4, r1
 8009a76:	2d00      	cmp	r5, #0
 8009a78:	d005      	beq.n	8009a86 <__swsetup_r+0x1a>
 8009a7a:	69ab      	ldr	r3, [r5, #24]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d102      	bne.n	8009a86 <__swsetup_r+0x1a>
 8009a80:	0028      	movs	r0, r5
 8009a82:	f000 f9a1 	bl	8009dc8 <__sinit>
 8009a86:	4b32      	ldr	r3, [pc, #200]	; (8009b50 <__swsetup_r+0xe4>)
 8009a88:	429c      	cmp	r4, r3
 8009a8a:	d10f      	bne.n	8009aac <__swsetup_r+0x40>
 8009a8c:	686c      	ldr	r4, [r5, #4]
 8009a8e:	230c      	movs	r3, #12
 8009a90:	5ee2      	ldrsh	r2, [r4, r3]
 8009a92:	b293      	uxth	r3, r2
 8009a94:	0711      	lsls	r1, r2, #28
 8009a96:	d42d      	bmi.n	8009af4 <__swsetup_r+0x88>
 8009a98:	06d9      	lsls	r1, r3, #27
 8009a9a:	d411      	bmi.n	8009ac0 <__swsetup_r+0x54>
 8009a9c:	2309      	movs	r3, #9
 8009a9e:	2001      	movs	r0, #1
 8009aa0:	6033      	str	r3, [r6, #0]
 8009aa2:	3337      	adds	r3, #55	; 0x37
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	81a3      	strh	r3, [r4, #12]
 8009aa8:	4240      	negs	r0, r0
 8009aaa:	bd70      	pop	{r4, r5, r6, pc}
 8009aac:	4b29      	ldr	r3, [pc, #164]	; (8009b54 <__swsetup_r+0xe8>)
 8009aae:	429c      	cmp	r4, r3
 8009ab0:	d101      	bne.n	8009ab6 <__swsetup_r+0x4a>
 8009ab2:	68ac      	ldr	r4, [r5, #8]
 8009ab4:	e7eb      	b.n	8009a8e <__swsetup_r+0x22>
 8009ab6:	4b28      	ldr	r3, [pc, #160]	; (8009b58 <__swsetup_r+0xec>)
 8009ab8:	429c      	cmp	r4, r3
 8009aba:	d1e8      	bne.n	8009a8e <__swsetup_r+0x22>
 8009abc:	68ec      	ldr	r4, [r5, #12]
 8009abe:	e7e6      	b.n	8009a8e <__swsetup_r+0x22>
 8009ac0:	075b      	lsls	r3, r3, #29
 8009ac2:	d513      	bpl.n	8009aec <__swsetup_r+0x80>
 8009ac4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ac6:	2900      	cmp	r1, #0
 8009ac8:	d008      	beq.n	8009adc <__swsetup_r+0x70>
 8009aca:	0023      	movs	r3, r4
 8009acc:	3344      	adds	r3, #68	; 0x44
 8009ace:	4299      	cmp	r1, r3
 8009ad0:	d002      	beq.n	8009ad8 <__swsetup_r+0x6c>
 8009ad2:	0030      	movs	r0, r6
 8009ad4:	f7ff fb16 	bl	8009104 <_free_r>
 8009ad8:	2300      	movs	r3, #0
 8009ada:	6363      	str	r3, [r4, #52]	; 0x34
 8009adc:	2224      	movs	r2, #36	; 0x24
 8009ade:	89a3      	ldrh	r3, [r4, #12]
 8009ae0:	4393      	bics	r3, r2
 8009ae2:	81a3      	strh	r3, [r4, #12]
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	6063      	str	r3, [r4, #4]
 8009ae8:	6923      	ldr	r3, [r4, #16]
 8009aea:	6023      	str	r3, [r4, #0]
 8009aec:	2308      	movs	r3, #8
 8009aee:	89a2      	ldrh	r2, [r4, #12]
 8009af0:	4313      	orrs	r3, r2
 8009af2:	81a3      	strh	r3, [r4, #12]
 8009af4:	6923      	ldr	r3, [r4, #16]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d10b      	bne.n	8009b12 <__swsetup_r+0xa6>
 8009afa:	21a0      	movs	r1, #160	; 0xa0
 8009afc:	2280      	movs	r2, #128	; 0x80
 8009afe:	89a3      	ldrh	r3, [r4, #12]
 8009b00:	0089      	lsls	r1, r1, #2
 8009b02:	0092      	lsls	r2, r2, #2
 8009b04:	400b      	ands	r3, r1
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d003      	beq.n	8009b12 <__swsetup_r+0xa6>
 8009b0a:	0021      	movs	r1, r4
 8009b0c:	0030      	movs	r0, r6
 8009b0e:	f000 fa27 	bl	8009f60 <__smakebuf_r>
 8009b12:	220c      	movs	r2, #12
 8009b14:	5ea3      	ldrsh	r3, [r4, r2]
 8009b16:	2001      	movs	r0, #1
 8009b18:	001a      	movs	r2, r3
 8009b1a:	b299      	uxth	r1, r3
 8009b1c:	4002      	ands	r2, r0
 8009b1e:	4203      	tst	r3, r0
 8009b20:	d00f      	beq.n	8009b42 <__swsetup_r+0xd6>
 8009b22:	2200      	movs	r2, #0
 8009b24:	60a2      	str	r2, [r4, #8]
 8009b26:	6962      	ldr	r2, [r4, #20]
 8009b28:	4252      	negs	r2, r2
 8009b2a:	61a2      	str	r2, [r4, #24]
 8009b2c:	2000      	movs	r0, #0
 8009b2e:	6922      	ldr	r2, [r4, #16]
 8009b30:	4282      	cmp	r2, r0
 8009b32:	d1ba      	bne.n	8009aaa <__swsetup_r+0x3e>
 8009b34:	060a      	lsls	r2, r1, #24
 8009b36:	d5b8      	bpl.n	8009aaa <__swsetup_r+0x3e>
 8009b38:	2240      	movs	r2, #64	; 0x40
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	81a3      	strh	r3, [r4, #12]
 8009b3e:	3801      	subs	r0, #1
 8009b40:	e7b3      	b.n	8009aaa <__swsetup_r+0x3e>
 8009b42:	0788      	lsls	r0, r1, #30
 8009b44:	d400      	bmi.n	8009b48 <__swsetup_r+0xdc>
 8009b46:	6962      	ldr	r2, [r4, #20]
 8009b48:	60a2      	str	r2, [r4, #8]
 8009b4a:	e7ef      	b.n	8009b2c <__swsetup_r+0xc0>
 8009b4c:	2000000c 	.word	0x2000000c
 8009b50:	0800a744 	.word	0x0800a744
 8009b54:	0800a764 	.word	0x0800a764
 8009b58:	0800a724 	.word	0x0800a724

08009b5c <abort>:
 8009b5c:	2006      	movs	r0, #6
 8009b5e:	b510      	push	{r4, lr}
 8009b60:	f000 fa74 	bl	800a04c <raise>
 8009b64:	2001      	movs	r0, #1
 8009b66:	f7f8 fec1 	bl	80028ec <_exit>
	...

08009b6c <__sflush_r>:
 8009b6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b6e:	898b      	ldrh	r3, [r1, #12]
 8009b70:	0005      	movs	r5, r0
 8009b72:	000c      	movs	r4, r1
 8009b74:	071a      	lsls	r2, r3, #28
 8009b76:	d45f      	bmi.n	8009c38 <__sflush_r+0xcc>
 8009b78:	684a      	ldr	r2, [r1, #4]
 8009b7a:	2a00      	cmp	r2, #0
 8009b7c:	dc04      	bgt.n	8009b88 <__sflush_r+0x1c>
 8009b7e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8009b80:	2a00      	cmp	r2, #0
 8009b82:	dc01      	bgt.n	8009b88 <__sflush_r+0x1c>
 8009b84:	2000      	movs	r0, #0
 8009b86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009b88:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009b8a:	2f00      	cmp	r7, #0
 8009b8c:	d0fa      	beq.n	8009b84 <__sflush_r+0x18>
 8009b8e:	2200      	movs	r2, #0
 8009b90:	2180      	movs	r1, #128	; 0x80
 8009b92:	682e      	ldr	r6, [r5, #0]
 8009b94:	602a      	str	r2, [r5, #0]
 8009b96:	001a      	movs	r2, r3
 8009b98:	0149      	lsls	r1, r1, #5
 8009b9a:	400a      	ands	r2, r1
 8009b9c:	420b      	tst	r3, r1
 8009b9e:	d034      	beq.n	8009c0a <__sflush_r+0x9e>
 8009ba0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ba2:	89a3      	ldrh	r3, [r4, #12]
 8009ba4:	075b      	lsls	r3, r3, #29
 8009ba6:	d506      	bpl.n	8009bb6 <__sflush_r+0x4a>
 8009ba8:	6863      	ldr	r3, [r4, #4]
 8009baa:	1ac0      	subs	r0, r0, r3
 8009bac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d001      	beq.n	8009bb6 <__sflush_r+0x4a>
 8009bb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009bb4:	1ac0      	subs	r0, r0, r3
 8009bb6:	0002      	movs	r2, r0
 8009bb8:	6a21      	ldr	r1, [r4, #32]
 8009bba:	2300      	movs	r3, #0
 8009bbc:	0028      	movs	r0, r5
 8009bbe:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009bc0:	47b8      	blx	r7
 8009bc2:	89a1      	ldrh	r1, [r4, #12]
 8009bc4:	1c43      	adds	r3, r0, #1
 8009bc6:	d106      	bne.n	8009bd6 <__sflush_r+0x6a>
 8009bc8:	682b      	ldr	r3, [r5, #0]
 8009bca:	2b1d      	cmp	r3, #29
 8009bcc:	d831      	bhi.n	8009c32 <__sflush_r+0xc6>
 8009bce:	4a2c      	ldr	r2, [pc, #176]	; (8009c80 <__sflush_r+0x114>)
 8009bd0:	40da      	lsrs	r2, r3
 8009bd2:	07d3      	lsls	r3, r2, #31
 8009bd4:	d52d      	bpl.n	8009c32 <__sflush_r+0xc6>
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	6063      	str	r3, [r4, #4]
 8009bda:	6923      	ldr	r3, [r4, #16]
 8009bdc:	6023      	str	r3, [r4, #0]
 8009bde:	04cb      	lsls	r3, r1, #19
 8009be0:	d505      	bpl.n	8009bee <__sflush_r+0x82>
 8009be2:	1c43      	adds	r3, r0, #1
 8009be4:	d102      	bne.n	8009bec <__sflush_r+0x80>
 8009be6:	682b      	ldr	r3, [r5, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d100      	bne.n	8009bee <__sflush_r+0x82>
 8009bec:	6560      	str	r0, [r4, #84]	; 0x54
 8009bee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bf0:	602e      	str	r6, [r5, #0]
 8009bf2:	2900      	cmp	r1, #0
 8009bf4:	d0c6      	beq.n	8009b84 <__sflush_r+0x18>
 8009bf6:	0023      	movs	r3, r4
 8009bf8:	3344      	adds	r3, #68	; 0x44
 8009bfa:	4299      	cmp	r1, r3
 8009bfc:	d002      	beq.n	8009c04 <__sflush_r+0x98>
 8009bfe:	0028      	movs	r0, r5
 8009c00:	f7ff fa80 	bl	8009104 <_free_r>
 8009c04:	2000      	movs	r0, #0
 8009c06:	6360      	str	r0, [r4, #52]	; 0x34
 8009c08:	e7bd      	b.n	8009b86 <__sflush_r+0x1a>
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	0028      	movs	r0, r5
 8009c0e:	6a21      	ldr	r1, [r4, #32]
 8009c10:	47b8      	blx	r7
 8009c12:	1c43      	adds	r3, r0, #1
 8009c14:	d1c5      	bne.n	8009ba2 <__sflush_r+0x36>
 8009c16:	682b      	ldr	r3, [r5, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d0c2      	beq.n	8009ba2 <__sflush_r+0x36>
 8009c1c:	2b1d      	cmp	r3, #29
 8009c1e:	d001      	beq.n	8009c24 <__sflush_r+0xb8>
 8009c20:	2b16      	cmp	r3, #22
 8009c22:	d101      	bne.n	8009c28 <__sflush_r+0xbc>
 8009c24:	602e      	str	r6, [r5, #0]
 8009c26:	e7ad      	b.n	8009b84 <__sflush_r+0x18>
 8009c28:	2340      	movs	r3, #64	; 0x40
 8009c2a:	89a2      	ldrh	r2, [r4, #12]
 8009c2c:	4313      	orrs	r3, r2
 8009c2e:	81a3      	strh	r3, [r4, #12]
 8009c30:	e7a9      	b.n	8009b86 <__sflush_r+0x1a>
 8009c32:	2340      	movs	r3, #64	; 0x40
 8009c34:	430b      	orrs	r3, r1
 8009c36:	e7fa      	b.n	8009c2e <__sflush_r+0xc2>
 8009c38:	690f      	ldr	r7, [r1, #16]
 8009c3a:	2f00      	cmp	r7, #0
 8009c3c:	d0a2      	beq.n	8009b84 <__sflush_r+0x18>
 8009c3e:	680a      	ldr	r2, [r1, #0]
 8009c40:	600f      	str	r7, [r1, #0]
 8009c42:	1bd2      	subs	r2, r2, r7
 8009c44:	9201      	str	r2, [sp, #4]
 8009c46:	2200      	movs	r2, #0
 8009c48:	079b      	lsls	r3, r3, #30
 8009c4a:	d100      	bne.n	8009c4e <__sflush_r+0xe2>
 8009c4c:	694a      	ldr	r2, [r1, #20]
 8009c4e:	60a2      	str	r2, [r4, #8]
 8009c50:	9b01      	ldr	r3, [sp, #4]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	dc00      	bgt.n	8009c58 <__sflush_r+0xec>
 8009c56:	e795      	b.n	8009b84 <__sflush_r+0x18>
 8009c58:	003a      	movs	r2, r7
 8009c5a:	0028      	movs	r0, r5
 8009c5c:	9b01      	ldr	r3, [sp, #4]
 8009c5e:	6a21      	ldr	r1, [r4, #32]
 8009c60:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009c62:	47b0      	blx	r6
 8009c64:	2800      	cmp	r0, #0
 8009c66:	dc06      	bgt.n	8009c76 <__sflush_r+0x10a>
 8009c68:	2340      	movs	r3, #64	; 0x40
 8009c6a:	2001      	movs	r0, #1
 8009c6c:	89a2      	ldrh	r2, [r4, #12]
 8009c6e:	4240      	negs	r0, r0
 8009c70:	4313      	orrs	r3, r2
 8009c72:	81a3      	strh	r3, [r4, #12]
 8009c74:	e787      	b.n	8009b86 <__sflush_r+0x1a>
 8009c76:	9b01      	ldr	r3, [sp, #4]
 8009c78:	183f      	adds	r7, r7, r0
 8009c7a:	1a1b      	subs	r3, r3, r0
 8009c7c:	9301      	str	r3, [sp, #4]
 8009c7e:	e7e7      	b.n	8009c50 <__sflush_r+0xe4>
 8009c80:	20400001 	.word	0x20400001

08009c84 <_fflush_r>:
 8009c84:	690b      	ldr	r3, [r1, #16]
 8009c86:	b570      	push	{r4, r5, r6, lr}
 8009c88:	0005      	movs	r5, r0
 8009c8a:	000c      	movs	r4, r1
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d102      	bne.n	8009c96 <_fflush_r+0x12>
 8009c90:	2500      	movs	r5, #0
 8009c92:	0028      	movs	r0, r5
 8009c94:	bd70      	pop	{r4, r5, r6, pc}
 8009c96:	2800      	cmp	r0, #0
 8009c98:	d004      	beq.n	8009ca4 <_fflush_r+0x20>
 8009c9a:	6983      	ldr	r3, [r0, #24]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d101      	bne.n	8009ca4 <_fflush_r+0x20>
 8009ca0:	f000 f892 	bl	8009dc8 <__sinit>
 8009ca4:	4b14      	ldr	r3, [pc, #80]	; (8009cf8 <_fflush_r+0x74>)
 8009ca6:	429c      	cmp	r4, r3
 8009ca8:	d11b      	bne.n	8009ce2 <_fflush_r+0x5e>
 8009caa:	686c      	ldr	r4, [r5, #4]
 8009cac:	220c      	movs	r2, #12
 8009cae:	5ea3      	ldrsh	r3, [r4, r2]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d0ed      	beq.n	8009c90 <_fflush_r+0xc>
 8009cb4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009cb6:	07d2      	lsls	r2, r2, #31
 8009cb8:	d404      	bmi.n	8009cc4 <_fflush_r+0x40>
 8009cba:	059b      	lsls	r3, r3, #22
 8009cbc:	d402      	bmi.n	8009cc4 <_fflush_r+0x40>
 8009cbe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009cc0:	f000 f923 	bl	8009f0a <__retarget_lock_acquire_recursive>
 8009cc4:	0028      	movs	r0, r5
 8009cc6:	0021      	movs	r1, r4
 8009cc8:	f7ff ff50 	bl	8009b6c <__sflush_r>
 8009ccc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009cce:	0005      	movs	r5, r0
 8009cd0:	07db      	lsls	r3, r3, #31
 8009cd2:	d4de      	bmi.n	8009c92 <_fflush_r+0xe>
 8009cd4:	89a3      	ldrh	r3, [r4, #12]
 8009cd6:	059b      	lsls	r3, r3, #22
 8009cd8:	d4db      	bmi.n	8009c92 <_fflush_r+0xe>
 8009cda:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009cdc:	f000 f916 	bl	8009f0c <__retarget_lock_release_recursive>
 8009ce0:	e7d7      	b.n	8009c92 <_fflush_r+0xe>
 8009ce2:	4b06      	ldr	r3, [pc, #24]	; (8009cfc <_fflush_r+0x78>)
 8009ce4:	429c      	cmp	r4, r3
 8009ce6:	d101      	bne.n	8009cec <_fflush_r+0x68>
 8009ce8:	68ac      	ldr	r4, [r5, #8]
 8009cea:	e7df      	b.n	8009cac <_fflush_r+0x28>
 8009cec:	4b04      	ldr	r3, [pc, #16]	; (8009d00 <_fflush_r+0x7c>)
 8009cee:	429c      	cmp	r4, r3
 8009cf0:	d1dc      	bne.n	8009cac <_fflush_r+0x28>
 8009cf2:	68ec      	ldr	r4, [r5, #12]
 8009cf4:	e7da      	b.n	8009cac <_fflush_r+0x28>
 8009cf6:	46c0      	nop			; (mov r8, r8)
 8009cf8:	0800a744 	.word	0x0800a744
 8009cfc:	0800a764 	.word	0x0800a764
 8009d00:	0800a724 	.word	0x0800a724

08009d04 <std>:
 8009d04:	2300      	movs	r3, #0
 8009d06:	b510      	push	{r4, lr}
 8009d08:	0004      	movs	r4, r0
 8009d0a:	6003      	str	r3, [r0, #0]
 8009d0c:	6043      	str	r3, [r0, #4]
 8009d0e:	6083      	str	r3, [r0, #8]
 8009d10:	8181      	strh	r1, [r0, #12]
 8009d12:	6643      	str	r3, [r0, #100]	; 0x64
 8009d14:	0019      	movs	r1, r3
 8009d16:	81c2      	strh	r2, [r0, #14]
 8009d18:	6103      	str	r3, [r0, #16]
 8009d1a:	6143      	str	r3, [r0, #20]
 8009d1c:	6183      	str	r3, [r0, #24]
 8009d1e:	2208      	movs	r2, #8
 8009d20:	305c      	adds	r0, #92	; 0x5c
 8009d22:	f7fb fd43 	bl	80057ac <memset>
 8009d26:	4b05      	ldr	r3, [pc, #20]	; (8009d3c <std+0x38>)
 8009d28:	6224      	str	r4, [r4, #32]
 8009d2a:	6263      	str	r3, [r4, #36]	; 0x24
 8009d2c:	4b04      	ldr	r3, [pc, #16]	; (8009d40 <std+0x3c>)
 8009d2e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d30:	4b04      	ldr	r3, [pc, #16]	; (8009d44 <std+0x40>)
 8009d32:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d34:	4b04      	ldr	r3, [pc, #16]	; (8009d48 <std+0x44>)
 8009d36:	6323      	str	r3, [r4, #48]	; 0x30
 8009d38:	bd10      	pop	{r4, pc}
 8009d3a:	46c0      	nop			; (mov r8, r8)
 8009d3c:	0800a08d 	.word	0x0800a08d
 8009d40:	0800a0b5 	.word	0x0800a0b5
 8009d44:	0800a0ed 	.word	0x0800a0ed
 8009d48:	0800a119 	.word	0x0800a119

08009d4c <_cleanup_r>:
 8009d4c:	b510      	push	{r4, lr}
 8009d4e:	4902      	ldr	r1, [pc, #8]	; (8009d58 <_cleanup_r+0xc>)
 8009d50:	f000 f8ba 	bl	8009ec8 <_fwalk_reent>
 8009d54:	bd10      	pop	{r4, pc}
 8009d56:	46c0      	nop			; (mov r8, r8)
 8009d58:	08009c85 	.word	0x08009c85

08009d5c <__sfmoreglue>:
 8009d5c:	b570      	push	{r4, r5, r6, lr}
 8009d5e:	2568      	movs	r5, #104	; 0x68
 8009d60:	1e4a      	subs	r2, r1, #1
 8009d62:	4355      	muls	r5, r2
 8009d64:	000e      	movs	r6, r1
 8009d66:	0029      	movs	r1, r5
 8009d68:	3174      	adds	r1, #116	; 0x74
 8009d6a:	f7ff fa37 	bl	80091dc <_malloc_r>
 8009d6e:	1e04      	subs	r4, r0, #0
 8009d70:	d008      	beq.n	8009d84 <__sfmoreglue+0x28>
 8009d72:	2100      	movs	r1, #0
 8009d74:	002a      	movs	r2, r5
 8009d76:	6001      	str	r1, [r0, #0]
 8009d78:	6046      	str	r6, [r0, #4]
 8009d7a:	300c      	adds	r0, #12
 8009d7c:	60a0      	str	r0, [r4, #8]
 8009d7e:	3268      	adds	r2, #104	; 0x68
 8009d80:	f7fb fd14 	bl	80057ac <memset>
 8009d84:	0020      	movs	r0, r4
 8009d86:	bd70      	pop	{r4, r5, r6, pc}

08009d88 <__sfp_lock_acquire>:
 8009d88:	b510      	push	{r4, lr}
 8009d8a:	4802      	ldr	r0, [pc, #8]	; (8009d94 <__sfp_lock_acquire+0xc>)
 8009d8c:	f000 f8bd 	bl	8009f0a <__retarget_lock_acquire_recursive>
 8009d90:	bd10      	pop	{r4, pc}
 8009d92:	46c0      	nop			; (mov r8, r8)
 8009d94:	2000031d 	.word	0x2000031d

08009d98 <__sfp_lock_release>:
 8009d98:	b510      	push	{r4, lr}
 8009d9a:	4802      	ldr	r0, [pc, #8]	; (8009da4 <__sfp_lock_release+0xc>)
 8009d9c:	f000 f8b6 	bl	8009f0c <__retarget_lock_release_recursive>
 8009da0:	bd10      	pop	{r4, pc}
 8009da2:	46c0      	nop			; (mov r8, r8)
 8009da4:	2000031d 	.word	0x2000031d

08009da8 <__sinit_lock_acquire>:
 8009da8:	b510      	push	{r4, lr}
 8009daa:	4802      	ldr	r0, [pc, #8]	; (8009db4 <__sinit_lock_acquire+0xc>)
 8009dac:	f000 f8ad 	bl	8009f0a <__retarget_lock_acquire_recursive>
 8009db0:	bd10      	pop	{r4, pc}
 8009db2:	46c0      	nop			; (mov r8, r8)
 8009db4:	2000031e 	.word	0x2000031e

08009db8 <__sinit_lock_release>:
 8009db8:	b510      	push	{r4, lr}
 8009dba:	4802      	ldr	r0, [pc, #8]	; (8009dc4 <__sinit_lock_release+0xc>)
 8009dbc:	f000 f8a6 	bl	8009f0c <__retarget_lock_release_recursive>
 8009dc0:	bd10      	pop	{r4, pc}
 8009dc2:	46c0      	nop			; (mov r8, r8)
 8009dc4:	2000031e 	.word	0x2000031e

08009dc8 <__sinit>:
 8009dc8:	b513      	push	{r0, r1, r4, lr}
 8009dca:	0004      	movs	r4, r0
 8009dcc:	f7ff ffec 	bl	8009da8 <__sinit_lock_acquire>
 8009dd0:	69a3      	ldr	r3, [r4, #24]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d002      	beq.n	8009ddc <__sinit+0x14>
 8009dd6:	f7ff ffef 	bl	8009db8 <__sinit_lock_release>
 8009dda:	bd13      	pop	{r0, r1, r4, pc}
 8009ddc:	64a3      	str	r3, [r4, #72]	; 0x48
 8009dde:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009de0:	6523      	str	r3, [r4, #80]	; 0x50
 8009de2:	4b13      	ldr	r3, [pc, #76]	; (8009e30 <__sinit+0x68>)
 8009de4:	4a13      	ldr	r2, [pc, #76]	; (8009e34 <__sinit+0x6c>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	62a2      	str	r2, [r4, #40]	; 0x28
 8009dea:	9301      	str	r3, [sp, #4]
 8009dec:	42a3      	cmp	r3, r4
 8009dee:	d101      	bne.n	8009df4 <__sinit+0x2c>
 8009df0:	2301      	movs	r3, #1
 8009df2:	61a3      	str	r3, [r4, #24]
 8009df4:	0020      	movs	r0, r4
 8009df6:	f000 f81f 	bl	8009e38 <__sfp>
 8009dfa:	6060      	str	r0, [r4, #4]
 8009dfc:	0020      	movs	r0, r4
 8009dfe:	f000 f81b 	bl	8009e38 <__sfp>
 8009e02:	60a0      	str	r0, [r4, #8]
 8009e04:	0020      	movs	r0, r4
 8009e06:	f000 f817 	bl	8009e38 <__sfp>
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	2104      	movs	r1, #4
 8009e0e:	60e0      	str	r0, [r4, #12]
 8009e10:	6860      	ldr	r0, [r4, #4]
 8009e12:	f7ff ff77 	bl	8009d04 <std>
 8009e16:	2201      	movs	r2, #1
 8009e18:	2109      	movs	r1, #9
 8009e1a:	68a0      	ldr	r0, [r4, #8]
 8009e1c:	f7ff ff72 	bl	8009d04 <std>
 8009e20:	2202      	movs	r2, #2
 8009e22:	2112      	movs	r1, #18
 8009e24:	68e0      	ldr	r0, [r4, #12]
 8009e26:	f7ff ff6d 	bl	8009d04 <std>
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	61a3      	str	r3, [r4, #24]
 8009e2e:	e7d2      	b.n	8009dd6 <__sinit+0xe>
 8009e30:	0800a2e0 	.word	0x0800a2e0
 8009e34:	08009d4d 	.word	0x08009d4d

08009e38 <__sfp>:
 8009e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e3a:	0007      	movs	r7, r0
 8009e3c:	f7ff ffa4 	bl	8009d88 <__sfp_lock_acquire>
 8009e40:	4b1f      	ldr	r3, [pc, #124]	; (8009ec0 <__sfp+0x88>)
 8009e42:	681e      	ldr	r6, [r3, #0]
 8009e44:	69b3      	ldr	r3, [r6, #24]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d102      	bne.n	8009e50 <__sfp+0x18>
 8009e4a:	0030      	movs	r0, r6
 8009e4c:	f7ff ffbc 	bl	8009dc8 <__sinit>
 8009e50:	3648      	adds	r6, #72	; 0x48
 8009e52:	68b4      	ldr	r4, [r6, #8]
 8009e54:	6873      	ldr	r3, [r6, #4]
 8009e56:	3b01      	subs	r3, #1
 8009e58:	d504      	bpl.n	8009e64 <__sfp+0x2c>
 8009e5a:	6833      	ldr	r3, [r6, #0]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d022      	beq.n	8009ea6 <__sfp+0x6e>
 8009e60:	6836      	ldr	r6, [r6, #0]
 8009e62:	e7f6      	b.n	8009e52 <__sfp+0x1a>
 8009e64:	220c      	movs	r2, #12
 8009e66:	5ea5      	ldrsh	r5, [r4, r2]
 8009e68:	2d00      	cmp	r5, #0
 8009e6a:	d11a      	bne.n	8009ea2 <__sfp+0x6a>
 8009e6c:	0020      	movs	r0, r4
 8009e6e:	4b15      	ldr	r3, [pc, #84]	; (8009ec4 <__sfp+0x8c>)
 8009e70:	3058      	adds	r0, #88	; 0x58
 8009e72:	60e3      	str	r3, [r4, #12]
 8009e74:	6665      	str	r5, [r4, #100]	; 0x64
 8009e76:	f000 f847 	bl	8009f08 <__retarget_lock_init_recursive>
 8009e7a:	f7ff ff8d 	bl	8009d98 <__sfp_lock_release>
 8009e7e:	0020      	movs	r0, r4
 8009e80:	2208      	movs	r2, #8
 8009e82:	0029      	movs	r1, r5
 8009e84:	6025      	str	r5, [r4, #0]
 8009e86:	60a5      	str	r5, [r4, #8]
 8009e88:	6065      	str	r5, [r4, #4]
 8009e8a:	6125      	str	r5, [r4, #16]
 8009e8c:	6165      	str	r5, [r4, #20]
 8009e8e:	61a5      	str	r5, [r4, #24]
 8009e90:	305c      	adds	r0, #92	; 0x5c
 8009e92:	f7fb fc8b 	bl	80057ac <memset>
 8009e96:	6365      	str	r5, [r4, #52]	; 0x34
 8009e98:	63a5      	str	r5, [r4, #56]	; 0x38
 8009e9a:	64a5      	str	r5, [r4, #72]	; 0x48
 8009e9c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8009e9e:	0020      	movs	r0, r4
 8009ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ea2:	3468      	adds	r4, #104	; 0x68
 8009ea4:	e7d7      	b.n	8009e56 <__sfp+0x1e>
 8009ea6:	2104      	movs	r1, #4
 8009ea8:	0038      	movs	r0, r7
 8009eaa:	f7ff ff57 	bl	8009d5c <__sfmoreglue>
 8009eae:	1e04      	subs	r4, r0, #0
 8009eb0:	6030      	str	r0, [r6, #0]
 8009eb2:	d1d5      	bne.n	8009e60 <__sfp+0x28>
 8009eb4:	f7ff ff70 	bl	8009d98 <__sfp_lock_release>
 8009eb8:	230c      	movs	r3, #12
 8009eba:	603b      	str	r3, [r7, #0]
 8009ebc:	e7ef      	b.n	8009e9e <__sfp+0x66>
 8009ebe:	46c0      	nop			; (mov r8, r8)
 8009ec0:	0800a2e0 	.word	0x0800a2e0
 8009ec4:	ffff0001 	.word	0xffff0001

08009ec8 <_fwalk_reent>:
 8009ec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009eca:	0004      	movs	r4, r0
 8009ecc:	0006      	movs	r6, r0
 8009ece:	2700      	movs	r7, #0
 8009ed0:	9101      	str	r1, [sp, #4]
 8009ed2:	3448      	adds	r4, #72	; 0x48
 8009ed4:	6863      	ldr	r3, [r4, #4]
 8009ed6:	68a5      	ldr	r5, [r4, #8]
 8009ed8:	9300      	str	r3, [sp, #0]
 8009eda:	9b00      	ldr	r3, [sp, #0]
 8009edc:	3b01      	subs	r3, #1
 8009ede:	9300      	str	r3, [sp, #0]
 8009ee0:	d504      	bpl.n	8009eec <_fwalk_reent+0x24>
 8009ee2:	6824      	ldr	r4, [r4, #0]
 8009ee4:	2c00      	cmp	r4, #0
 8009ee6:	d1f5      	bne.n	8009ed4 <_fwalk_reent+0xc>
 8009ee8:	0038      	movs	r0, r7
 8009eea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009eec:	89ab      	ldrh	r3, [r5, #12]
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d908      	bls.n	8009f04 <_fwalk_reent+0x3c>
 8009ef2:	220e      	movs	r2, #14
 8009ef4:	5eab      	ldrsh	r3, [r5, r2]
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	d004      	beq.n	8009f04 <_fwalk_reent+0x3c>
 8009efa:	0029      	movs	r1, r5
 8009efc:	0030      	movs	r0, r6
 8009efe:	9b01      	ldr	r3, [sp, #4]
 8009f00:	4798      	blx	r3
 8009f02:	4307      	orrs	r7, r0
 8009f04:	3568      	adds	r5, #104	; 0x68
 8009f06:	e7e8      	b.n	8009eda <_fwalk_reent+0x12>

08009f08 <__retarget_lock_init_recursive>:
 8009f08:	4770      	bx	lr

08009f0a <__retarget_lock_acquire_recursive>:
 8009f0a:	4770      	bx	lr

08009f0c <__retarget_lock_release_recursive>:
 8009f0c:	4770      	bx	lr
	...

08009f10 <__swhatbuf_r>:
 8009f10:	b570      	push	{r4, r5, r6, lr}
 8009f12:	000e      	movs	r6, r1
 8009f14:	001d      	movs	r5, r3
 8009f16:	230e      	movs	r3, #14
 8009f18:	5ec9      	ldrsh	r1, [r1, r3]
 8009f1a:	0014      	movs	r4, r2
 8009f1c:	b096      	sub	sp, #88	; 0x58
 8009f1e:	2900      	cmp	r1, #0
 8009f20:	da08      	bge.n	8009f34 <__swhatbuf_r+0x24>
 8009f22:	220c      	movs	r2, #12
 8009f24:	5eb3      	ldrsh	r3, [r6, r2]
 8009f26:	2200      	movs	r2, #0
 8009f28:	602a      	str	r2, [r5, #0]
 8009f2a:	061b      	lsls	r3, r3, #24
 8009f2c:	d411      	bmi.n	8009f52 <__swhatbuf_r+0x42>
 8009f2e:	2380      	movs	r3, #128	; 0x80
 8009f30:	00db      	lsls	r3, r3, #3
 8009f32:	e00f      	b.n	8009f54 <__swhatbuf_r+0x44>
 8009f34:	466a      	mov	r2, sp
 8009f36:	f000 f91b 	bl	800a170 <_fstat_r>
 8009f3a:	2800      	cmp	r0, #0
 8009f3c:	dbf1      	blt.n	8009f22 <__swhatbuf_r+0x12>
 8009f3e:	23f0      	movs	r3, #240	; 0xf0
 8009f40:	9901      	ldr	r1, [sp, #4]
 8009f42:	021b      	lsls	r3, r3, #8
 8009f44:	4019      	ands	r1, r3
 8009f46:	4b05      	ldr	r3, [pc, #20]	; (8009f5c <__swhatbuf_r+0x4c>)
 8009f48:	18c9      	adds	r1, r1, r3
 8009f4a:	424b      	negs	r3, r1
 8009f4c:	4159      	adcs	r1, r3
 8009f4e:	6029      	str	r1, [r5, #0]
 8009f50:	e7ed      	b.n	8009f2e <__swhatbuf_r+0x1e>
 8009f52:	2340      	movs	r3, #64	; 0x40
 8009f54:	2000      	movs	r0, #0
 8009f56:	6023      	str	r3, [r4, #0]
 8009f58:	b016      	add	sp, #88	; 0x58
 8009f5a:	bd70      	pop	{r4, r5, r6, pc}
 8009f5c:	ffffe000 	.word	0xffffe000

08009f60 <__smakebuf_r>:
 8009f60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f62:	2602      	movs	r6, #2
 8009f64:	898b      	ldrh	r3, [r1, #12]
 8009f66:	0005      	movs	r5, r0
 8009f68:	000c      	movs	r4, r1
 8009f6a:	4233      	tst	r3, r6
 8009f6c:	d006      	beq.n	8009f7c <__smakebuf_r+0x1c>
 8009f6e:	0023      	movs	r3, r4
 8009f70:	3347      	adds	r3, #71	; 0x47
 8009f72:	6023      	str	r3, [r4, #0]
 8009f74:	6123      	str	r3, [r4, #16]
 8009f76:	2301      	movs	r3, #1
 8009f78:	6163      	str	r3, [r4, #20]
 8009f7a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009f7c:	466a      	mov	r2, sp
 8009f7e:	ab01      	add	r3, sp, #4
 8009f80:	f7ff ffc6 	bl	8009f10 <__swhatbuf_r>
 8009f84:	9900      	ldr	r1, [sp, #0]
 8009f86:	0007      	movs	r7, r0
 8009f88:	0028      	movs	r0, r5
 8009f8a:	f7ff f927 	bl	80091dc <_malloc_r>
 8009f8e:	2800      	cmp	r0, #0
 8009f90:	d108      	bne.n	8009fa4 <__smakebuf_r+0x44>
 8009f92:	220c      	movs	r2, #12
 8009f94:	5ea3      	ldrsh	r3, [r4, r2]
 8009f96:	059a      	lsls	r2, r3, #22
 8009f98:	d4ef      	bmi.n	8009f7a <__smakebuf_r+0x1a>
 8009f9a:	2203      	movs	r2, #3
 8009f9c:	4393      	bics	r3, r2
 8009f9e:	431e      	orrs	r6, r3
 8009fa0:	81a6      	strh	r6, [r4, #12]
 8009fa2:	e7e4      	b.n	8009f6e <__smakebuf_r+0xe>
 8009fa4:	4b0f      	ldr	r3, [pc, #60]	; (8009fe4 <__smakebuf_r+0x84>)
 8009fa6:	62ab      	str	r3, [r5, #40]	; 0x28
 8009fa8:	2380      	movs	r3, #128	; 0x80
 8009faa:	89a2      	ldrh	r2, [r4, #12]
 8009fac:	6020      	str	r0, [r4, #0]
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	81a3      	strh	r3, [r4, #12]
 8009fb2:	9b00      	ldr	r3, [sp, #0]
 8009fb4:	6120      	str	r0, [r4, #16]
 8009fb6:	6163      	str	r3, [r4, #20]
 8009fb8:	9b01      	ldr	r3, [sp, #4]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d00d      	beq.n	8009fda <__smakebuf_r+0x7a>
 8009fbe:	0028      	movs	r0, r5
 8009fc0:	230e      	movs	r3, #14
 8009fc2:	5ee1      	ldrsh	r1, [r4, r3]
 8009fc4:	f000 f8e6 	bl	800a194 <_isatty_r>
 8009fc8:	2800      	cmp	r0, #0
 8009fca:	d006      	beq.n	8009fda <__smakebuf_r+0x7a>
 8009fcc:	2203      	movs	r2, #3
 8009fce:	89a3      	ldrh	r3, [r4, #12]
 8009fd0:	4393      	bics	r3, r2
 8009fd2:	001a      	movs	r2, r3
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	81a3      	strh	r3, [r4, #12]
 8009fda:	89a0      	ldrh	r0, [r4, #12]
 8009fdc:	4307      	orrs	r7, r0
 8009fde:	81a7      	strh	r7, [r4, #12]
 8009fe0:	e7cb      	b.n	8009f7a <__smakebuf_r+0x1a>
 8009fe2:	46c0      	nop			; (mov r8, r8)
 8009fe4:	08009d4d 	.word	0x08009d4d

08009fe8 <_malloc_usable_size_r>:
 8009fe8:	1f0b      	subs	r3, r1, #4
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	1f18      	subs	r0, r3, #4
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	da01      	bge.n	8009ff6 <_malloc_usable_size_r+0xe>
 8009ff2:	580b      	ldr	r3, [r1, r0]
 8009ff4:	18c0      	adds	r0, r0, r3
 8009ff6:	4770      	bx	lr

08009ff8 <_raise_r>:
 8009ff8:	b570      	push	{r4, r5, r6, lr}
 8009ffa:	0004      	movs	r4, r0
 8009ffc:	000d      	movs	r5, r1
 8009ffe:	291f      	cmp	r1, #31
 800a000:	d904      	bls.n	800a00c <_raise_r+0x14>
 800a002:	2316      	movs	r3, #22
 800a004:	6003      	str	r3, [r0, #0]
 800a006:	2001      	movs	r0, #1
 800a008:	4240      	negs	r0, r0
 800a00a:	bd70      	pop	{r4, r5, r6, pc}
 800a00c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d004      	beq.n	800a01c <_raise_r+0x24>
 800a012:	008a      	lsls	r2, r1, #2
 800a014:	189b      	adds	r3, r3, r2
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	2a00      	cmp	r2, #0
 800a01a:	d108      	bne.n	800a02e <_raise_r+0x36>
 800a01c:	0020      	movs	r0, r4
 800a01e:	f000 f831 	bl	800a084 <_getpid_r>
 800a022:	002a      	movs	r2, r5
 800a024:	0001      	movs	r1, r0
 800a026:	0020      	movs	r0, r4
 800a028:	f000 f81a 	bl	800a060 <_kill_r>
 800a02c:	e7ed      	b.n	800a00a <_raise_r+0x12>
 800a02e:	2000      	movs	r0, #0
 800a030:	2a01      	cmp	r2, #1
 800a032:	d0ea      	beq.n	800a00a <_raise_r+0x12>
 800a034:	1c51      	adds	r1, r2, #1
 800a036:	d103      	bne.n	800a040 <_raise_r+0x48>
 800a038:	2316      	movs	r3, #22
 800a03a:	3001      	adds	r0, #1
 800a03c:	6023      	str	r3, [r4, #0]
 800a03e:	e7e4      	b.n	800a00a <_raise_r+0x12>
 800a040:	2400      	movs	r4, #0
 800a042:	0028      	movs	r0, r5
 800a044:	601c      	str	r4, [r3, #0]
 800a046:	4790      	blx	r2
 800a048:	0020      	movs	r0, r4
 800a04a:	e7de      	b.n	800a00a <_raise_r+0x12>

0800a04c <raise>:
 800a04c:	b510      	push	{r4, lr}
 800a04e:	4b03      	ldr	r3, [pc, #12]	; (800a05c <raise+0x10>)
 800a050:	0001      	movs	r1, r0
 800a052:	6818      	ldr	r0, [r3, #0]
 800a054:	f7ff ffd0 	bl	8009ff8 <_raise_r>
 800a058:	bd10      	pop	{r4, pc}
 800a05a:	46c0      	nop			; (mov r8, r8)
 800a05c:	2000000c 	.word	0x2000000c

0800a060 <_kill_r>:
 800a060:	2300      	movs	r3, #0
 800a062:	b570      	push	{r4, r5, r6, lr}
 800a064:	4d06      	ldr	r5, [pc, #24]	; (800a080 <_kill_r+0x20>)
 800a066:	0004      	movs	r4, r0
 800a068:	0008      	movs	r0, r1
 800a06a:	0011      	movs	r1, r2
 800a06c:	602b      	str	r3, [r5, #0]
 800a06e:	f7f8 fc2d 	bl	80028cc <_kill>
 800a072:	1c43      	adds	r3, r0, #1
 800a074:	d103      	bne.n	800a07e <_kill_r+0x1e>
 800a076:	682b      	ldr	r3, [r5, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d000      	beq.n	800a07e <_kill_r+0x1e>
 800a07c:	6023      	str	r3, [r4, #0]
 800a07e:	bd70      	pop	{r4, r5, r6, pc}
 800a080:	20000318 	.word	0x20000318

0800a084 <_getpid_r>:
 800a084:	b510      	push	{r4, lr}
 800a086:	f7f8 fc1b 	bl	80028c0 <_getpid>
 800a08a:	bd10      	pop	{r4, pc}

0800a08c <__sread>:
 800a08c:	b570      	push	{r4, r5, r6, lr}
 800a08e:	000c      	movs	r4, r1
 800a090:	250e      	movs	r5, #14
 800a092:	5f49      	ldrsh	r1, [r1, r5]
 800a094:	f000 f8a4 	bl	800a1e0 <_read_r>
 800a098:	2800      	cmp	r0, #0
 800a09a:	db03      	blt.n	800a0a4 <__sread+0x18>
 800a09c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a09e:	181b      	adds	r3, r3, r0
 800a0a0:	6563      	str	r3, [r4, #84]	; 0x54
 800a0a2:	bd70      	pop	{r4, r5, r6, pc}
 800a0a4:	89a3      	ldrh	r3, [r4, #12]
 800a0a6:	4a02      	ldr	r2, [pc, #8]	; (800a0b0 <__sread+0x24>)
 800a0a8:	4013      	ands	r3, r2
 800a0aa:	81a3      	strh	r3, [r4, #12]
 800a0ac:	e7f9      	b.n	800a0a2 <__sread+0x16>
 800a0ae:	46c0      	nop			; (mov r8, r8)
 800a0b0:	ffffefff 	.word	0xffffefff

0800a0b4 <__swrite>:
 800a0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0b6:	001f      	movs	r7, r3
 800a0b8:	898b      	ldrh	r3, [r1, #12]
 800a0ba:	0005      	movs	r5, r0
 800a0bc:	000c      	movs	r4, r1
 800a0be:	0016      	movs	r6, r2
 800a0c0:	05db      	lsls	r3, r3, #23
 800a0c2:	d505      	bpl.n	800a0d0 <__swrite+0x1c>
 800a0c4:	230e      	movs	r3, #14
 800a0c6:	5ec9      	ldrsh	r1, [r1, r3]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	2302      	movs	r3, #2
 800a0cc:	f000 f874 	bl	800a1b8 <_lseek_r>
 800a0d0:	89a3      	ldrh	r3, [r4, #12]
 800a0d2:	4a05      	ldr	r2, [pc, #20]	; (800a0e8 <__swrite+0x34>)
 800a0d4:	0028      	movs	r0, r5
 800a0d6:	4013      	ands	r3, r2
 800a0d8:	81a3      	strh	r3, [r4, #12]
 800a0da:	0032      	movs	r2, r6
 800a0dc:	230e      	movs	r3, #14
 800a0de:	5ee1      	ldrsh	r1, [r4, r3]
 800a0e0:	003b      	movs	r3, r7
 800a0e2:	f000 f81f 	bl	800a124 <_write_r>
 800a0e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0e8:	ffffefff 	.word	0xffffefff

0800a0ec <__sseek>:
 800a0ec:	b570      	push	{r4, r5, r6, lr}
 800a0ee:	000c      	movs	r4, r1
 800a0f0:	250e      	movs	r5, #14
 800a0f2:	5f49      	ldrsh	r1, [r1, r5]
 800a0f4:	f000 f860 	bl	800a1b8 <_lseek_r>
 800a0f8:	89a3      	ldrh	r3, [r4, #12]
 800a0fa:	1c42      	adds	r2, r0, #1
 800a0fc:	d103      	bne.n	800a106 <__sseek+0x1a>
 800a0fe:	4a05      	ldr	r2, [pc, #20]	; (800a114 <__sseek+0x28>)
 800a100:	4013      	ands	r3, r2
 800a102:	81a3      	strh	r3, [r4, #12]
 800a104:	bd70      	pop	{r4, r5, r6, pc}
 800a106:	2280      	movs	r2, #128	; 0x80
 800a108:	0152      	lsls	r2, r2, #5
 800a10a:	4313      	orrs	r3, r2
 800a10c:	81a3      	strh	r3, [r4, #12]
 800a10e:	6560      	str	r0, [r4, #84]	; 0x54
 800a110:	e7f8      	b.n	800a104 <__sseek+0x18>
 800a112:	46c0      	nop			; (mov r8, r8)
 800a114:	ffffefff 	.word	0xffffefff

0800a118 <__sclose>:
 800a118:	b510      	push	{r4, lr}
 800a11a:	230e      	movs	r3, #14
 800a11c:	5ec9      	ldrsh	r1, [r1, r3]
 800a11e:	f000 f815 	bl	800a14c <_close_r>
 800a122:	bd10      	pop	{r4, pc}

0800a124 <_write_r>:
 800a124:	b570      	push	{r4, r5, r6, lr}
 800a126:	0004      	movs	r4, r0
 800a128:	0008      	movs	r0, r1
 800a12a:	0011      	movs	r1, r2
 800a12c:	001a      	movs	r2, r3
 800a12e:	2300      	movs	r3, #0
 800a130:	4d05      	ldr	r5, [pc, #20]	; (800a148 <_write_r+0x24>)
 800a132:	602b      	str	r3, [r5, #0]
 800a134:	f7f8 fc03 	bl	800293e <_write>
 800a138:	1c43      	adds	r3, r0, #1
 800a13a:	d103      	bne.n	800a144 <_write_r+0x20>
 800a13c:	682b      	ldr	r3, [r5, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d000      	beq.n	800a144 <_write_r+0x20>
 800a142:	6023      	str	r3, [r4, #0]
 800a144:	bd70      	pop	{r4, r5, r6, pc}
 800a146:	46c0      	nop			; (mov r8, r8)
 800a148:	20000318 	.word	0x20000318

0800a14c <_close_r>:
 800a14c:	2300      	movs	r3, #0
 800a14e:	b570      	push	{r4, r5, r6, lr}
 800a150:	4d06      	ldr	r5, [pc, #24]	; (800a16c <_close_r+0x20>)
 800a152:	0004      	movs	r4, r0
 800a154:	0008      	movs	r0, r1
 800a156:	602b      	str	r3, [r5, #0]
 800a158:	f7f8 fc0d 	bl	8002976 <_close>
 800a15c:	1c43      	adds	r3, r0, #1
 800a15e:	d103      	bne.n	800a168 <_close_r+0x1c>
 800a160:	682b      	ldr	r3, [r5, #0]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d000      	beq.n	800a168 <_close_r+0x1c>
 800a166:	6023      	str	r3, [r4, #0]
 800a168:	bd70      	pop	{r4, r5, r6, pc}
 800a16a:	46c0      	nop			; (mov r8, r8)
 800a16c:	20000318 	.word	0x20000318

0800a170 <_fstat_r>:
 800a170:	2300      	movs	r3, #0
 800a172:	b570      	push	{r4, r5, r6, lr}
 800a174:	4d06      	ldr	r5, [pc, #24]	; (800a190 <_fstat_r+0x20>)
 800a176:	0004      	movs	r4, r0
 800a178:	0008      	movs	r0, r1
 800a17a:	0011      	movs	r1, r2
 800a17c:	602b      	str	r3, [r5, #0]
 800a17e:	f7f8 fc04 	bl	800298a <_fstat>
 800a182:	1c43      	adds	r3, r0, #1
 800a184:	d103      	bne.n	800a18e <_fstat_r+0x1e>
 800a186:	682b      	ldr	r3, [r5, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d000      	beq.n	800a18e <_fstat_r+0x1e>
 800a18c:	6023      	str	r3, [r4, #0]
 800a18e:	bd70      	pop	{r4, r5, r6, pc}
 800a190:	20000318 	.word	0x20000318

0800a194 <_isatty_r>:
 800a194:	2300      	movs	r3, #0
 800a196:	b570      	push	{r4, r5, r6, lr}
 800a198:	4d06      	ldr	r5, [pc, #24]	; (800a1b4 <_isatty_r+0x20>)
 800a19a:	0004      	movs	r4, r0
 800a19c:	0008      	movs	r0, r1
 800a19e:	602b      	str	r3, [r5, #0]
 800a1a0:	f7f8 fc01 	bl	80029a6 <_isatty>
 800a1a4:	1c43      	adds	r3, r0, #1
 800a1a6:	d103      	bne.n	800a1b0 <_isatty_r+0x1c>
 800a1a8:	682b      	ldr	r3, [r5, #0]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d000      	beq.n	800a1b0 <_isatty_r+0x1c>
 800a1ae:	6023      	str	r3, [r4, #0]
 800a1b0:	bd70      	pop	{r4, r5, r6, pc}
 800a1b2:	46c0      	nop			; (mov r8, r8)
 800a1b4:	20000318 	.word	0x20000318

0800a1b8 <_lseek_r>:
 800a1b8:	b570      	push	{r4, r5, r6, lr}
 800a1ba:	0004      	movs	r4, r0
 800a1bc:	0008      	movs	r0, r1
 800a1be:	0011      	movs	r1, r2
 800a1c0:	001a      	movs	r2, r3
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	4d05      	ldr	r5, [pc, #20]	; (800a1dc <_lseek_r+0x24>)
 800a1c6:	602b      	str	r3, [r5, #0]
 800a1c8:	f7f8 fbf6 	bl	80029b8 <_lseek>
 800a1cc:	1c43      	adds	r3, r0, #1
 800a1ce:	d103      	bne.n	800a1d8 <_lseek_r+0x20>
 800a1d0:	682b      	ldr	r3, [r5, #0]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d000      	beq.n	800a1d8 <_lseek_r+0x20>
 800a1d6:	6023      	str	r3, [r4, #0]
 800a1d8:	bd70      	pop	{r4, r5, r6, pc}
 800a1da:	46c0      	nop			; (mov r8, r8)
 800a1dc:	20000318 	.word	0x20000318

0800a1e0 <_read_r>:
 800a1e0:	b570      	push	{r4, r5, r6, lr}
 800a1e2:	0004      	movs	r4, r0
 800a1e4:	0008      	movs	r0, r1
 800a1e6:	0011      	movs	r1, r2
 800a1e8:	001a      	movs	r2, r3
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	4d05      	ldr	r5, [pc, #20]	; (800a204 <_read_r+0x24>)
 800a1ee:	602b      	str	r3, [r5, #0]
 800a1f0:	f7f8 fb88 	bl	8002904 <_read>
 800a1f4:	1c43      	adds	r3, r0, #1
 800a1f6:	d103      	bne.n	800a200 <_read_r+0x20>
 800a1f8:	682b      	ldr	r3, [r5, #0]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d000      	beq.n	800a200 <_read_r+0x20>
 800a1fe:	6023      	str	r3, [r4, #0]
 800a200:	bd70      	pop	{r4, r5, r6, pc}
 800a202:	46c0      	nop			; (mov r8, r8)
 800a204:	20000318 	.word	0x20000318

0800a208 <_init>:
 800a208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a20a:	46c0      	nop			; (mov r8, r8)
 800a20c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a20e:	bc08      	pop	{r3}
 800a210:	469e      	mov	lr, r3
 800a212:	4770      	bx	lr

0800a214 <_fini>:
 800a214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a216:	46c0      	nop			; (mov r8, r8)
 800a218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a21a:	bc08      	pop	{r3}
 800a21c:	469e      	mov	lr, r3
 800a21e:	4770      	bx	lr
