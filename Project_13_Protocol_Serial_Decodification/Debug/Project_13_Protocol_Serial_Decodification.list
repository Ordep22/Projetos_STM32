
Project_13_Protocol_Serial_Decodification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000376c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800382c  0800382c  0001382c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038f4  080038f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080038f4  080038f4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038f4  080038f4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038f4  080038f4  000138f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038f8  080038f8  000138f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080038fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000070  0800396c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  0800396c  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2a6  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f04  00000000  00000000  0002b33e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000890  00000000  00000000  0002d248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007b8  00000000  00000000  0002dad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5e3  00000000  00000000  0002e290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bdc5  00000000  00000000  00048873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093741  00000000  00000000  00054638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e7d79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000220c  00000000  00000000  000e7dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003814 	.word	0x08003814

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003814 	.word	0x08003814

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <PiscaLed>:
static void MX_USART2_UART_Init(void);
static void MX_CRC_Init(void);
/* USER CODE BEGIN PFP */

int PiscaLed(int NumPiscadas , int TempoDelay)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]

	for(int i = 0; i < NumPiscadas; i++)
 800022a:	2300      	movs	r3, #0
 800022c:	60fb      	str	r3, [r7, #12]
 800022e:	e018      	b.n	8000262 <PiscaLed+0x42>
	{

		HAL_GPIO_WritePin(GPIOA,LED02_Pin,GPIO_PIN_SET);
 8000230:	2390      	movs	r3, #144	; 0x90
 8000232:	05db      	lsls	r3, r3, #23
 8000234:	2201      	movs	r2, #1
 8000236:	2120      	movs	r1, #32
 8000238:	0018      	movs	r0, r3
 800023a:	f001 f837 	bl	80012ac <HAL_GPIO_WritePin>
		HAL_Delay(TempoDelay);
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	0018      	movs	r0, r3
 8000242:	f000 fc69 	bl	8000b18 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA,LED02_Pin,GPIO_PIN_RESET);
 8000246:	2390      	movs	r3, #144	; 0x90
 8000248:	05db      	lsls	r3, r3, #23
 800024a:	2200      	movs	r2, #0
 800024c:	2120      	movs	r1, #32
 800024e:	0018      	movs	r0, r3
 8000250:	f001 f82c 	bl	80012ac <HAL_GPIO_WritePin>
		HAL_Delay(TempoDelay);
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	0018      	movs	r0, r3
 8000258:	f000 fc5e 	bl	8000b18 <HAL_Delay>
	for(int i = 0; i < NumPiscadas; i++)
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	3301      	adds	r3, #1
 8000260:	60fb      	str	r3, [r7, #12]
 8000262:	68fa      	ldr	r2, [r7, #12]
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	429a      	cmp	r2, r3
 8000268:	dbe2      	blt.n	8000230 <PiscaLed+0x10>

	}

	return 0;
 800026a:	2300      	movs	r3, #0

}
 800026c:	0018      	movs	r0, r3
 800026e:	46bd      	mov	sp, r7
 8000270:	b004      	add	sp, #16
 8000272:	bd80      	pop	{r7, pc}

08000274 <CheckSum>:


int CheckSum(uint8_t *Byte, int tamanho)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b086      	sub	sp, #24
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	6039      	str	r1, [r7, #0]
	//Adicionar uma vriável chamda tamanho para controlar até onde o for irá

	uint8_t dados= 0;
 800027e:	2317      	movs	r3, #23
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	2200      	movs	r2, #0
 8000284:	701a      	strb	r2, [r3, #0]

	uint8_t CS_Incorreto = 0;
 8000286:	230f      	movs	r3, #15
 8000288:	18fb      	adds	r3, r7, r3
 800028a:	2200      	movs	r2, #0
 800028c:	701a      	strb	r2, [r3, #0]

	uint8_t CS_Correto = 1;
 800028e:	230e      	movs	r3, #14
 8000290:	18fb      	adds	r3, r7, r3
 8000292:	2201      	movs	r2, #1
 8000294:	701a      	strb	r2, [r3, #0]



	for (int i = 0; i < tamanho - 1; i++)
 8000296:	2300      	movs	r3, #0
 8000298:	613b      	str	r3, [r7, #16]
 800029a:	e00f      	b.n	80002bc <CheckSum+0x48>
	{

			HAL_Delay(100);
 800029c:	2064      	movs	r0, #100	; 0x64
 800029e:	f000 fc3b 	bl	8000b18 <HAL_Delay>
			dados += Byte[i];
 80002a2:	693b      	ldr	r3, [r7, #16]
 80002a4:	687a      	ldr	r2, [r7, #4]
 80002a6:	18d3      	adds	r3, r2, r3
 80002a8:	7819      	ldrb	r1, [r3, #0]
 80002aa:	2217      	movs	r2, #23
 80002ac:	18bb      	adds	r3, r7, r2
 80002ae:	18ba      	adds	r2, r7, r2
 80002b0:	7812      	ldrb	r2, [r2, #0]
 80002b2:	188a      	adds	r2, r1, r2
 80002b4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < tamanho - 1; i++)
 80002b6:	693b      	ldr	r3, [r7, #16]
 80002b8:	3301      	adds	r3, #1
 80002ba:	613b      	str	r3, [r7, #16]
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	3b01      	subs	r3, #1
 80002c0:	693a      	ldr	r2, [r7, #16]
 80002c2:	429a      	cmp	r2, r3
 80002c4:	dbea      	blt.n	800029c <CheckSum+0x28>
	}



	if (dados != Byte[tamanho])
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	687a      	ldr	r2, [r7, #4]
 80002ca:	18d3      	adds	r3, r2, r3
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	2217      	movs	r2, #23
 80002d0:	18ba      	adds	r2, r7, r2
 80002d2:	7812      	ldrb	r2, [r2, #0]
 80002d4:	429a      	cmp	r2, r3
 80002d6:	d003      	beq.n	80002e0 <CheckSum+0x6c>
	{

		return CS_Incorreto;
 80002d8:	230f      	movs	r3, #15
 80002da:	18fb      	adds	r3, r7, r3
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	e002      	b.n	80002e6 <CheckSum+0x72>
	}

	else
	{

		return CS_Correto;
 80002e0:	230e      	movs	r3, #14
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	781b      	ldrb	r3, [r3, #0]

	}



}
 80002e6:	0018      	movs	r0, r3
 80002e8:	46bd      	mov	sp, r7
 80002ea:	b006      	add	sp, #24
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <Protocolo>:


void Protocolo(uint8_t *a,int Tamanho_string)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	6039      	str	r1, [r7, #0]
//Quan a função é declarada e logo abaixo é chamda não é necessário montar um projeto

	  fflush(stdin);
 80002fa:	4b6f      	ldr	r3, [pc, #444]	; (80004b8 <Protocolo+0x1c8>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	685b      	ldr	r3, [r3, #4]
 8000300:	0018      	movs	r0, r3
 8000302:	f002 ff97 	bl	8003234 <fflush>

	  uint8_t Verificacao;

	  short int  contador = 0;
 8000306:	230e      	movs	r3, #14
 8000308:	18fb      	adds	r3, r7, r3
 800030a:	2200      	movs	r2, #0
 800030c:	801a      	strh	r2, [r3, #0]

	  switch(V_Estagio_Protocolo)
 800030e:	4b6b      	ldr	r3, [pc, #428]	; (80004bc <Protocolo+0x1cc>)
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	b2db      	uxtb	r3, r3
 8000314:	2b0a      	cmp	r3, #10
 8000316:	d900      	bls.n	800031a <Protocolo+0x2a>
 8000318:	e0c4      	b.n	80004a4 <Protocolo+0x1b4>
 800031a:	009a      	lsls	r2, r3, #2
 800031c:	4b68      	ldr	r3, [pc, #416]	; (80004c0 <Protocolo+0x1d0>)
 800031e:	18d3      	adds	r3, r2, r3
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	469f      	mov	pc, r3


		case(CHECKSUM):
		{

			Verificacao = CheckSum(a, Tamanho_string);
 8000324:	683a      	ldr	r2, [r7, #0]
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	0011      	movs	r1, r2
 800032a:	0018      	movs	r0, r3
 800032c:	f7ff ffa2 	bl	8000274 <CheckSum>
 8000330:	0002      	movs	r2, r0
 8000332:	210d      	movs	r1, #13
 8000334:	187b      	adds	r3, r7, r1
 8000336:	701a      	strb	r2, [r3, #0]

			if (Verificacao == 1)
 8000338:	187b      	adds	r3, r7, r1
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	2b01      	cmp	r3, #1
 800033e:	d000      	beq.n	8000342 <Protocolo+0x52>
 8000340:	e0a7      	b.n	8000492 <Protocolo+0x1a2>
			{
				V_Estagio_Protocolo =  ESTAGIO_PREPROSSEAMENTO;
 8000342:	4b5e      	ldr	r3, [pc, #376]	; (80004bc <Protocolo+0x1cc>)
 8000344:	2200      	movs	r2, #0
 8000346:	701a      	strb	r2, [r3, #0]
		}

		case ESTAGIO_PREPROSSEAMENTO:
		{

		  if((a[0] == 'L')){
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	2b4c      	cmp	r3, #76	; 0x4c
 800034e:	d109      	bne.n	8000364 <Protocolo+0x74>

			 V_Estagio_Protocolo  = ESTAGIO_01;
 8000350:	4b5a      	ldr	r3, [pc, #360]	; (80004bc <Protocolo+0x1cc>)
 8000352:	2201      	movs	r2, #1
 8000354:	701a      	strb	r2, [r3, #0]
			 contador +=1;
 8000356:	210e      	movs	r1, #14
 8000358:	187b      	adds	r3, r7, r1
 800035a:	881b      	ldrh	r3, [r3, #0]
 800035c:	3301      	adds	r3, #1
 800035e:	b29a      	uxth	r2, r3
 8000360:	187b      	adds	r3, r7, r1
 8000362:	801a      	strh	r2, [r3, #0]

		  }

		  if ((a[0] != 'L' ) && (a[0] != '\0') )
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	2b4c      	cmp	r3, #76	; 0x4c
 800036a:	d004      	beq.n	8000376 <Protocolo+0x86>
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	2b00      	cmp	r3, #0
 8000372:	d000      	beq.n	8000376 <Protocolo+0x86>
 8000374:	e08f      	b.n	8000496 <Protocolo+0x1a6>
		 }

		  case ESTAGIO_01:
		  {

			  if((a[1] == 'U'))
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	3301      	adds	r3, #1
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	2b55      	cmp	r3, #85	; 0x55
 800037e:	d109      	bne.n	8000394 <Protocolo+0xa4>
			  {

				  V_Estagio_Protocolo  = ESTAGIO_02;
 8000380:	4b4e      	ldr	r3, [pc, #312]	; (80004bc <Protocolo+0x1cc>)
 8000382:	2202      	movs	r2, #2
 8000384:	701a      	strb	r2, [r3, #0]
				  contador +=1;
 8000386:	210e      	movs	r1, #14
 8000388:	187b      	adds	r3, r7, r1
 800038a:	881b      	ldrh	r3, [r3, #0]
 800038c:	3301      	adds	r3, #1
 800038e:	b29a      	uxth	r2, r3
 8000390:	187b      	adds	r3, r7, r1
 8000392:	801a      	strh	r2, [r3, #0]

			  }

			  if ((a[1] != 'U') && (a[1] != '\0'))
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	3301      	adds	r3, #1
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	2b55      	cmp	r3, #85	; 0x55
 800039c:	d005      	beq.n	80003aa <Protocolo+0xba>
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	3301      	adds	r3, #1
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d000      	beq.n	80003aa <Protocolo+0xba>
 80003a8:	e077      	b.n	800049a <Protocolo+0x1aa>
				  break;
			  }
		  }
		  case ESTAGIO_02:
		  {
			  if((a[2] == 'P'))
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	3302      	adds	r3, #2
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	2b50      	cmp	r3, #80	; 0x50
 80003b2:	d109      	bne.n	80003c8 <Protocolo+0xd8>
			  {

				  V_Estagio_Protocolo  = ESTAGIO_03;
 80003b4:	4b41      	ldr	r3, [pc, #260]	; (80004bc <Protocolo+0x1cc>)
 80003b6:	2203      	movs	r2, #3
 80003b8:	701a      	strb	r2, [r3, #0]
				  contador +=1;
 80003ba:	210e      	movs	r1, #14
 80003bc:	187b      	adds	r3, r7, r1
 80003be:	881b      	ldrh	r3, [r3, #0]
 80003c0:	3301      	adds	r3, #1
 80003c2:	b29a      	uxth	r2, r3
 80003c4:	187b      	adds	r3, r7, r1
 80003c6:	801a      	strh	r2, [r3, #0]
			  }

			  if ((a[2] != 'P') && (a[2] != '\0'))
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	3302      	adds	r3, #2
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	2b50      	cmp	r3, #80	; 0x50
 80003d0:	d004      	beq.n	80003dc <Protocolo+0xec>
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	3302      	adds	r3, #2
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d160      	bne.n	800049e <Protocolo+0x1ae>


		  }
		  case ESTAGIO_03:
		  {
			  if((a[3] == 'A'))
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	3303      	adds	r3, #3
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	2b41      	cmp	r3, #65	; 0x41
 80003e4:	d109      	bne.n	80003fa <Protocolo+0x10a>

			  {
				  V_Estagio_Protocolo = COMANDO; //Provavelmente vai sair desse ponto
 80003e6:	4b35      	ldr	r3, [pc, #212]	; (80004bc <Protocolo+0x1cc>)
 80003e8:	2208      	movs	r2, #8
 80003ea:	701a      	strb	r2, [r3, #0]
				  contador +=1;
 80003ec:	210e      	movs	r1, #14
 80003ee:	187b      	adds	r3, r7, r1
 80003f0:	881b      	ldrh	r3, [r3, #0]
 80003f2:	3301      	adds	r3, #1
 80003f4:	b29a      	uxth	r2, r3
 80003f6:	187b      	adds	r3, r7, r1
 80003f8:	801a      	strh	r2, [r3, #0]

			  }

			  if ((a[3] != 'A') && (a[3] != '\0'))
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	3303      	adds	r3, #3
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b41      	cmp	r3, #65	; 0x41
 8000402:	d004      	beq.n	800040e <Protocolo+0x11e>
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	3303      	adds	r3, #3
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d149      	bne.n	80004a2 <Protocolo+0x1b2>

		  case(COMANDO):
		  {

			  //Acende LED02
			  if (a[5] == 0)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	3305      	adds	r3, #5
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d110      	bne.n	800043a <Protocolo+0x14a>
			  {
				  V_Estagio_Protocolo =  CHECKSUM;
 8000418:	4b28      	ldr	r3, [pc, #160]	; (80004bc <Protocolo+0x1cc>)
 800041a:	220a      	movs	r2, #10
 800041c:	701a      	strb	r2, [r3, #0]
				  comand_high;
 800041e:	2390      	movs	r3, #144	; 0x90
 8000420:	05db      	lsls	r3, r3, #23
 8000422:	2201      	movs	r2, #1
 8000424:	2120      	movs	r1, #32
 8000426:	0018      	movs	r0, r3
 8000428:	f000 ff40 	bl	80012ac <HAL_GPIO_WritePin>
				  contador +=1;
 800042c:	210e      	movs	r1, #14
 800042e:	187b      	adds	r3, r7, r1
 8000430:	881b      	ldrh	r3, [r3, #0]
 8000432:	3301      	adds	r3, #1
 8000434:	b29a      	uxth	r2, r3
 8000436:	187b      	adds	r3, r7, r1
 8000438:	801a      	strh	r2, [r3, #0]
			  }

			  //Apaga LED02
			  if (a[5] == 1)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	3305      	adds	r3, #5
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	2b01      	cmp	r3, #1
 8000442:	d110      	bne.n	8000466 <Protocolo+0x176>
			  {
				  V_Estagio_Protocolo =  CHECKSUM;
 8000444:	4b1d      	ldr	r3, [pc, #116]	; (80004bc <Protocolo+0x1cc>)
 8000446:	220a      	movs	r2, #10
 8000448:	701a      	strb	r2, [r3, #0]
				  comand_low;
 800044a:	2390      	movs	r3, #144	; 0x90
 800044c:	05db      	lsls	r3, r3, #23
 800044e:	2200      	movs	r2, #0
 8000450:	2120      	movs	r1, #32
 8000452:	0018      	movs	r0, r3
 8000454:	f000 ff2a 	bl	80012ac <HAL_GPIO_WritePin>
				  contador +=1;
 8000458:	210e      	movs	r1, #14
 800045a:	187b      	adds	r3, r7, r1
 800045c:	881b      	ldrh	r3, [r3, #0]
 800045e:	3301      	adds	r3, #1
 8000460:	b29a      	uxth	r2, r3
 8000462:	187b      	adds	r3, r7, r1
 8000464:	801a      	strh	r2, [r3, #0]
			  }

			  //Pisca LED02 N vezes
			  if (a[5] == 2)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	3305      	adds	r3, #5
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2b02      	cmp	r3, #2
 800046e:	d119      	bne.n	80004a4 <Protocolo+0x1b4>
			  {

				  V_Estagio_Protocolo =  CHECKSUM;
 8000470:	4b12      	ldr	r3, [pc, #72]	; (80004bc <Protocolo+0x1cc>)
 8000472:	220a      	movs	r2, #10
 8000474:	701a      	strb	r2, [r3, #0]
				  PiscaLed(4, 500);
 8000476:	23fa      	movs	r3, #250	; 0xfa
 8000478:	005b      	lsls	r3, r3, #1
 800047a:	0019      	movs	r1, r3
 800047c:	2004      	movs	r0, #4
 800047e:	f7ff fecf 	bl	8000220 <PiscaLed>
				  contador +=1;
 8000482:	210e      	movs	r1, #14
 8000484:	187b      	adds	r3, r7, r1
 8000486:	881b      	ldrh	r3, [r3, #0]
 8000488:	3301      	adds	r3, #1
 800048a:	b29a      	uxth	r2, r3
 800048c:	187b      	adds	r3, r7, r1
 800048e:	801a      	strh	r2, [r3, #0]
 8000490:	e008      	b.n	80004a4 <Protocolo+0x1b4>
				break;
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	e006      	b.n	80004a4 <Protocolo+0x1b4>
			  break;
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	e004      	b.n	80004a4 <Protocolo+0x1b4>
				  break;
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	e002      	b.n	80004a4 <Protocolo+0x1b4>
				  break;
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	e000      	b.n	80004a4 <Protocolo+0x1b4>
				  break;
 80004a2:	46c0      	nop			; (mov r8, r8)

			  }
		  }
	  }

  HAL_UART_Transmit(&huart2,a,12,100);
 80004a4:	6879      	ldr	r1, [r7, #4]
 80004a6:	4807      	ldr	r0, [pc, #28]	; (80004c4 <Protocolo+0x1d4>)
 80004a8:	2364      	movs	r3, #100	; 0x64
 80004aa:	220c      	movs	r2, #12
 80004ac:	f001 fd6e 	bl	8001f8c <HAL_UART_Transmit>

}
 80004b0:	46c0      	nop			; (mov r8, r8)
 80004b2:	46bd      	mov	sp, r7
 80004b4:	b004      	add	sp, #16
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	2000000c 	.word	0x2000000c
 80004bc:	2000008c 	.word	0x2000008c
 80004c0:	0800384c 	.word	0x0800384c
 80004c4:	200000b4 	.word	0x200000b4

080004c8 <Recebe_dados>:


void Recebe_dados(uint8_t *Informacao_Recebida,int Tamanho_string)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	6039      	str	r1, [r7, #0]

  unsigned char *Informacao_Tratada;

  Informacao_Tratada = 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	60bb      	str	r3, [r7, #8]

  Informacao_Tratada = (unsigned char*) malloc(Tamanho_string * sizeof(unsigned char));
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	0018      	movs	r0, r3
 80004da:	f002 ffeb 	bl	80034b4 <malloc>
 80004de:	0003      	movs	r3, r0
 80004e0:	60bb      	str	r3, [r7, #8]


  for (int i = 0; i <= Tamanho_string; i++)
 80004e2:	2300      	movs	r3, #0
 80004e4:	60fb      	str	r3, [r7, #12]
 80004e6:	e00d      	b.n	8000504 <Recebe_dados+0x3c>
  {


	  if (Informacao_Recebida != NULL)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d007      	beq.n	80004fe <Recebe_dados+0x36>
	  {
		 Informacao_Tratada[i]  = Informacao_Recebida[i];
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	18d2      	adds	r2, r2, r3
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	68b9      	ldr	r1, [r7, #8]
 80004f8:	18cb      	adds	r3, r1, r3
 80004fa:	7812      	ldrb	r2, [r2, #0]
 80004fc:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i <= Tamanho_string; i++)
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	3301      	adds	r3, #1
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	68fa      	ldr	r2, [r7, #12]
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	429a      	cmp	r2, r3
 800050a:	dded      	ble.n	80004e8 <Recebe_dados+0x20>



  }

  Protocolo(Informacao_Tratada, Tamanho_string);
 800050c:	683a      	ldr	r2, [r7, #0]
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	0011      	movs	r1, r2
 8000512:	0018      	movs	r0, r3
 8000514:	f7ff feec 	bl	80002f0 <Protocolo>

}
 8000518:	46c0      	nop			; (mov r8, r8)
 800051a:	46bd      	mov	sp, r7
 800051c:	b004      	add	sp, #16
 800051e:	bd80      	pop	{r7, pc}

08000520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000520:	b590      	push	{r4, r7, lr}
 8000522:	b0c3      	sub	sp, #268	; 0x10c
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */


  	//V_Estagio  = CHECKSUM;
	V_Estagio_Protocolo = CHECKSUM;
 8000526:	4b1b      	ldr	r3, [pc, #108]	; (8000594 <main+0x74>)
 8000528:	220a      	movs	r2, #10
 800052a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052c:	f000 fa90 	bl	8000a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000530:	f000 f836 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000534:	f000 f8e0 	bl	80006f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000538:	f000 f8ae 	bl	8000698 <MX_USART2_UART_Init>
  MX_CRC_Init();
 800053c:	f000 f888 	bl	8000650 <MX_CRC_Init>
	  HAL_StatusTypeDef rx_status;


	  //HAL_Delay(500);

	  uint8_t rx_buffer[256] = {0};
 8000540:	4b15      	ldr	r3, [pc, #84]	; (8000598 <main+0x78>)
 8000542:	2484      	movs	r4, #132	; 0x84
 8000544:	0064      	lsls	r4, r4, #1
 8000546:	191b      	adds	r3, r3, r4
 8000548:	19db      	adds	r3, r3, r7
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	3304      	adds	r3, #4
 8000550:	22fc      	movs	r2, #252	; 0xfc
 8000552:	2100      	movs	r1, #0
 8000554:	0018      	movs	r0, r3
 8000556:	f002 ffb7 	bl	80034c8 <memset>
	  uint8_t recebe = 0;
 800055a:	2308      	movs	r3, #8
 800055c:	33ff      	adds	r3, #255	; 0xff
 800055e:	18fb      	adds	r3, r7, r3
 8000560:	2200      	movs	r2, #0
 8000562:	701a      	strb	r2, [r3, #0]

	  //HAL_Delay(500);

      //rx_status = HAL_UART_Receive(&huart2,rx_buffer,sizeof rx_buffer,100);
	  HAL_UART_Receive(&huart2, rx_buffer, 54, 1000);
 8000564:	23fa      	movs	r3, #250	; 0xfa
 8000566:	009b      	lsls	r3, r3, #2
 8000568:	1d39      	adds	r1, r7, #4
 800056a:	480c      	ldr	r0, [pc, #48]	; (800059c <main+0x7c>)
 800056c:	2236      	movs	r2, #54	; 0x36
 800056e:	f001 fdb7 	bl	80020e0 <HAL_UART_Receive>

	  if (rx_buffer[0] != 0)
 8000572:	4b09      	ldr	r3, [pc, #36]	; (8000598 <main+0x78>)
 8000574:	191b      	adds	r3, r3, r4
 8000576:	19db      	adds	r3, r3, r7
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d0e0      	beq.n	8000540 <main+0x20>
	  {

		  Recebe_dados(rx_buffer,rx_buffer[4]+1);
 800057e:	4b06      	ldr	r3, [pc, #24]	; (8000598 <main+0x78>)
 8000580:	191b      	adds	r3, r3, r4
 8000582:	19db      	adds	r3, r3, r7
 8000584:	791b      	ldrb	r3, [r3, #4]
 8000586:	1c5a      	adds	r2, r3, #1
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	0011      	movs	r1, r2
 800058c:	0018      	movs	r0, r3
 800058e:	f7ff ff9b 	bl	80004c8 <Recebe_dados>
  {
 8000592:	e7d5      	b.n	8000540 <main+0x20>
 8000594:	2000008c 	.word	0x2000008c
 8000598:	fffffefc 	.word	0xfffffefc
 800059c:	200000b4 	.word	0x200000b4

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b590      	push	{r4, r7, lr}
 80005a2:	b099      	sub	sp, #100	; 0x64
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	242c      	movs	r4, #44	; 0x2c
 80005a8:	193b      	adds	r3, r7, r4
 80005aa:	0018      	movs	r0, r3
 80005ac:	2334      	movs	r3, #52	; 0x34
 80005ae:	001a      	movs	r2, r3
 80005b0:	2100      	movs	r1, #0
 80005b2:	f002 ff89 	bl	80034c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b6:	231c      	movs	r3, #28
 80005b8:	18fb      	adds	r3, r7, r3
 80005ba:	0018      	movs	r0, r3
 80005bc:	2310      	movs	r3, #16
 80005be:	001a      	movs	r2, r3
 80005c0:	2100      	movs	r1, #0
 80005c2:	f002 ff81 	bl	80034c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005c6:	003b      	movs	r3, r7
 80005c8:	0018      	movs	r0, r3
 80005ca:	231c      	movs	r3, #28
 80005cc:	001a      	movs	r2, r3
 80005ce:	2100      	movs	r1, #0
 80005d0:	f002 ff7a 	bl	80034c8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d4:	0021      	movs	r1, r4
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2202      	movs	r2, #2
 80005da:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2201      	movs	r2, #1
 80005e0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2210      	movs	r2, #16
 80005e6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2200      	movs	r2, #0
 80005ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	0018      	movs	r0, r3
 80005f2:	f000 fe79 	bl	80012e8 <HAL_RCC_OscConfig>
 80005f6:	1e03      	subs	r3, r0, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80005fa:	f000 f8b5 	bl	8000768 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fe:	211c      	movs	r1, #28
 8000600:	187b      	adds	r3, r7, r1
 8000602:	2207      	movs	r2, #7
 8000604:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000606:	187b      	adds	r3, r7, r1
 8000608:	2200      	movs	r2, #0
 800060a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060c:	187b      	adds	r3, r7, r1
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000612:	187b      	adds	r3, r7, r1
 8000614:	2200      	movs	r2, #0
 8000616:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000618:	187b      	adds	r3, r7, r1
 800061a:	2100      	movs	r1, #0
 800061c:	0018      	movs	r0, r3
 800061e:	f001 f9e9 	bl	80019f4 <HAL_RCC_ClockConfig>
 8000622:	1e03      	subs	r3, r0, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000626:	f000 f89f 	bl	8000768 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800062a:	003b      	movs	r3, r7
 800062c:	2202      	movs	r2, #2
 800062e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000630:	003b      	movs	r3, r7
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000636:	003b      	movs	r3, r7
 8000638:	0018      	movs	r0, r3
 800063a:	f001 fb55 	bl	8001ce8 <HAL_RCCEx_PeriphCLKConfig>
 800063e:	1e03      	subs	r3, r0, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000642:	f000 f891 	bl	8000768 <Error_Handler>
  }
}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	b019      	add	sp, #100	; 0x64
 800064c:	bd90      	pop	{r4, r7, pc}
	...

08000650 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000654:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_CRC_Init+0x40>)
 8000656:	4a0f      	ldr	r2, [pc, #60]	; (8000694 <MX_CRC_Init+0x44>)
 8000658:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800065a:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <MX_CRC_Init+0x40>)
 800065c:	2200      	movs	r2, #0
 800065e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000660:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <MX_CRC_Init+0x40>)
 8000662:	2200      	movs	r2, #0
 8000664:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <MX_CRC_Init+0x40>)
 8000668:	2200      	movs	r2, #0
 800066a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800066c:	4b08      	ldr	r3, [pc, #32]	; (8000690 <MX_CRC_Init+0x40>)
 800066e:	2200      	movs	r2, #0
 8000670:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000672:	4b07      	ldr	r3, [pc, #28]	; (8000690 <MX_CRC_Init+0x40>)
 8000674:	2201      	movs	r2, #1
 8000676:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000678:	4b05      	ldr	r3, [pc, #20]	; (8000690 <MX_CRC_Init+0x40>)
 800067a:	0018      	movs	r0, r3
 800067c:	f000 fb4e 	bl	8000d1c <HAL_CRC_Init>
 8000680:	1e03      	subs	r3, r0, #0
 8000682:	d001      	beq.n	8000688 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000684:	f000 f870 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000688:	46c0      	nop			; (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	20000090 	.word	0x20000090
 8000694:	40023000 	.word	0x40023000

08000698 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800069c:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <MX_USART2_UART_Init+0x58>)
 800069e:	4a15      	ldr	r2, [pc, #84]	; (80006f4 <MX_USART2_UART_Init+0x5c>)
 80006a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006a2:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <MX_USART2_UART_Init+0x58>)
 80006a4:	22e1      	movs	r2, #225	; 0xe1
 80006a6:	0252      	lsls	r2, r2, #9
 80006a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_USART2_UART_Init+0x58>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_USART2_UART_Init+0x58>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_USART2_UART_Init+0x58>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_USART2_UART_Init+0x58>)
 80006be:	220c      	movs	r2, #12
 80006c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <MX_USART2_UART_Init+0x58>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_USART2_UART_Init+0x58>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <MX_USART2_UART_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_USART2_UART_Init+0x58>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006da:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <MX_USART2_UART_Init+0x58>)
 80006dc:	0018      	movs	r0, r3
 80006de:	f001 fc01 	bl	8001ee4 <HAL_UART_Init>
 80006e2:	1e03      	subs	r3, r0, #0
 80006e4:	d001      	beq.n	80006ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006e6:	f000 f83f 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	200000b4 	.word	0x200000b4
 80006f4:	40004400 	.word	0x40004400

080006f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	0018      	movs	r0, r3
 8000702:	2314      	movs	r3, #20
 8000704:	001a      	movs	r2, r3
 8000706:	2100      	movs	r1, #0
 8000708:	f002 fede 	bl	80034c8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <MX_GPIO_Init+0x6c>)
 800070e:	695a      	ldr	r2, [r3, #20]
 8000710:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_GPIO_Init+0x6c>)
 8000712:	2180      	movs	r1, #128	; 0x80
 8000714:	0289      	lsls	r1, r1, #10
 8000716:	430a      	orrs	r2, r1
 8000718:	615a      	str	r2, [r3, #20]
 800071a:	4b12      	ldr	r3, [pc, #72]	; (8000764 <MX_GPIO_Init+0x6c>)
 800071c:	695a      	ldr	r2, [r3, #20]
 800071e:	2380      	movs	r3, #128	; 0x80
 8000720:	029b      	lsls	r3, r3, #10
 8000722:	4013      	ands	r3, r2
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED02_GPIO_Port, LED02_Pin, GPIO_PIN_RESET);
 8000728:	2390      	movs	r3, #144	; 0x90
 800072a:	05db      	lsls	r3, r3, #23
 800072c:	2200      	movs	r2, #0
 800072e:	2120      	movs	r1, #32
 8000730:	0018      	movs	r0, r3
 8000732:	f000 fdbb 	bl	80012ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED02_Pin */
  GPIO_InitStruct.Pin = LED02_Pin;
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2220      	movs	r2, #32
 800073a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2201      	movs	r2, #1
 8000740:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED02_GPIO_Port, &GPIO_InitStruct);
 800074e:	1d3a      	adds	r2, r7, #4
 8000750:	2390      	movs	r3, #144	; 0x90
 8000752:	05db      	lsls	r3, r3, #23
 8000754:	0011      	movs	r1, r2
 8000756:	0018      	movs	r0, r3
 8000758:	f000 fc30 	bl	8000fbc <HAL_GPIO_Init>

}
 800075c:	46c0      	nop			; (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	b006      	add	sp, #24
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40021000 	.word	0x40021000

08000768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076c:	b672      	cpsid	i
}
 800076e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000770:	e7fe      	b.n	8000770 <Error_Handler+0x8>
	...

08000774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077a:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <HAL_MspInit+0x44>)
 800077c:	699a      	ldr	r2, [r3, #24]
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <HAL_MspInit+0x44>)
 8000780:	2101      	movs	r1, #1
 8000782:	430a      	orrs	r2, r1
 8000784:	619a      	str	r2, [r3, #24]
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <HAL_MspInit+0x44>)
 8000788:	699b      	ldr	r3, [r3, #24]
 800078a:	2201      	movs	r2, #1
 800078c:	4013      	ands	r3, r2
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <HAL_MspInit+0x44>)
 8000794:	69da      	ldr	r2, [r3, #28]
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <HAL_MspInit+0x44>)
 8000798:	2180      	movs	r1, #128	; 0x80
 800079a:	0549      	lsls	r1, r1, #21
 800079c:	430a      	orrs	r2, r1
 800079e:	61da      	str	r2, [r3, #28]
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <HAL_MspInit+0x44>)
 80007a2:	69da      	ldr	r2, [r3, #28]
 80007a4:	2380      	movs	r3, #128	; 0x80
 80007a6:	055b      	lsls	r3, r3, #21
 80007a8:	4013      	ands	r3, r2
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	b002      	add	sp, #8
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	40021000 	.word	0x40021000

080007bc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a09      	ldr	r2, [pc, #36]	; (80007f0 <HAL_CRC_MspInit+0x34>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d10b      	bne.n	80007e6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80007ce:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <HAL_CRC_MspInit+0x38>)
 80007d0:	695a      	ldr	r2, [r3, #20]
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <HAL_CRC_MspInit+0x38>)
 80007d4:	2140      	movs	r1, #64	; 0x40
 80007d6:	430a      	orrs	r2, r1
 80007d8:	615a      	str	r2, [r3, #20]
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <HAL_CRC_MspInit+0x38>)
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	2240      	movs	r2, #64	; 0x40
 80007e0:	4013      	ands	r3, r2
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	46bd      	mov	sp, r7
 80007ea:	b004      	add	sp, #16
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	40023000 	.word	0x40023000
 80007f4:	40021000 	.word	0x40021000

080007f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007f8:	b590      	push	{r4, r7, lr}
 80007fa:	b08b      	sub	sp, #44	; 0x2c
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000800:	2414      	movs	r4, #20
 8000802:	193b      	adds	r3, r7, r4
 8000804:	0018      	movs	r0, r3
 8000806:	2314      	movs	r3, #20
 8000808:	001a      	movs	r2, r3
 800080a:	2100      	movs	r1, #0
 800080c:	f002 fe5c 	bl	80034c8 <memset>
  if(huart->Instance==USART2)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a20      	ldr	r2, [pc, #128]	; (8000898 <HAL_UART_MspInit+0xa0>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d13a      	bne.n	8000890 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800081a:	4b20      	ldr	r3, [pc, #128]	; (800089c <HAL_UART_MspInit+0xa4>)
 800081c:	69da      	ldr	r2, [r3, #28]
 800081e:	4b1f      	ldr	r3, [pc, #124]	; (800089c <HAL_UART_MspInit+0xa4>)
 8000820:	2180      	movs	r1, #128	; 0x80
 8000822:	0289      	lsls	r1, r1, #10
 8000824:	430a      	orrs	r2, r1
 8000826:	61da      	str	r2, [r3, #28]
 8000828:	4b1c      	ldr	r3, [pc, #112]	; (800089c <HAL_UART_MspInit+0xa4>)
 800082a:	69da      	ldr	r2, [r3, #28]
 800082c:	2380      	movs	r3, #128	; 0x80
 800082e:	029b      	lsls	r3, r3, #10
 8000830:	4013      	ands	r3, r2
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	4b19      	ldr	r3, [pc, #100]	; (800089c <HAL_UART_MspInit+0xa4>)
 8000838:	695a      	ldr	r2, [r3, #20]
 800083a:	4b18      	ldr	r3, [pc, #96]	; (800089c <HAL_UART_MspInit+0xa4>)
 800083c:	2180      	movs	r1, #128	; 0x80
 800083e:	0289      	lsls	r1, r1, #10
 8000840:	430a      	orrs	r2, r1
 8000842:	615a      	str	r2, [r3, #20]
 8000844:	4b15      	ldr	r3, [pc, #84]	; (800089c <HAL_UART_MspInit+0xa4>)
 8000846:	695a      	ldr	r2, [r3, #20]
 8000848:	2380      	movs	r3, #128	; 0x80
 800084a:	029b      	lsls	r3, r3, #10
 800084c:	4013      	ands	r3, r2
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = TX02_Pin|RX02_Pin;
 8000852:	0021      	movs	r1, r4
 8000854:	187b      	adds	r3, r7, r1
 8000856:	220c      	movs	r2, #12
 8000858:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085a:	187b      	adds	r3, r7, r1
 800085c:	2202      	movs	r2, #2
 800085e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	187b      	adds	r3, r7, r1
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000866:	187b      	adds	r3, r7, r1
 8000868:	2203      	movs	r2, #3
 800086a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800086c:	187b      	adds	r3, r7, r1
 800086e:	2201      	movs	r2, #1
 8000870:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000872:	187a      	adds	r2, r7, r1
 8000874:	2390      	movs	r3, #144	; 0x90
 8000876:	05db      	lsls	r3, r3, #23
 8000878:	0011      	movs	r1, r2
 800087a:	0018      	movs	r0, r3
 800087c:	f000 fb9e 	bl	8000fbc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000880:	2200      	movs	r2, #0
 8000882:	2100      	movs	r1, #0
 8000884:	201c      	movs	r0, #28
 8000886:	f000 fa17 	bl	8000cb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800088a:	201c      	movs	r0, #28
 800088c:	f000 fa29 	bl	8000ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000890:	46c0      	nop			; (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	b00b      	add	sp, #44	; 0x2c
 8000896:	bd90      	pop	{r4, r7, pc}
 8000898:	40004400 	.word	0x40004400
 800089c:	40021000 	.word	0x40021000

080008a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <NMI_Handler+0x4>

080008a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <HardFault_Handler+0x4>

080008ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c4:	f000 f90c 	bl	8000ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008d4:	4b03      	ldr	r3, [pc, #12]	; (80008e4 <USART2_IRQHandler+0x14>)
 80008d6:	0018      	movs	r0, r3
 80008d8:	f001 fcf2 	bl	80022c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	200000b4 	.word	0x200000b4

080008e8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	e00a      	b.n	8000910 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008fa:	e000      	b.n	80008fe <_read+0x16>
 80008fc:	bf00      	nop
 80008fe:	0001      	movs	r1, r0
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	1c5a      	adds	r2, r3, #1
 8000904:	60ba      	str	r2, [r7, #8]
 8000906:	b2ca      	uxtb	r2, r1
 8000908:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	3301      	adds	r3, #1
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	697a      	ldr	r2, [r7, #20]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	429a      	cmp	r2, r3
 8000916:	dbf0      	blt.n	80008fa <_read+0x12>
	}

return len;
 8000918:	687b      	ldr	r3, [r7, #4]
}
 800091a:	0018      	movs	r0, r3
 800091c:	46bd      	mov	sp, r7
 800091e:	b006      	add	sp, #24
 8000920:	bd80      	pop	{r7, pc}

08000922 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b086      	sub	sp, #24
 8000926:	af00      	add	r7, sp, #0
 8000928:	60f8      	str	r0, [r7, #12]
 800092a:	60b9      	str	r1, [r7, #8]
 800092c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]
 8000932:	e009      	b.n	8000948 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	1c5a      	adds	r2, r3, #1
 8000938:	60ba      	str	r2, [r7, #8]
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	0018      	movs	r0, r3
 800093e:	e000      	b.n	8000942 <_write+0x20>
 8000940:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	3301      	adds	r3, #1
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	697a      	ldr	r2, [r7, #20]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	429a      	cmp	r2, r3
 800094e:	dbf1      	blt.n	8000934 <_write+0x12>
	}
	return len;
 8000950:	687b      	ldr	r3, [r7, #4]
}
 8000952:	0018      	movs	r0, r3
 8000954:	46bd      	mov	sp, r7
 8000956:	b006      	add	sp, #24
 8000958:	bd80      	pop	{r7, pc}

0800095a <_close>:

int _close(int file)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b082      	sub	sp, #8
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
	return -1;
 8000962:	2301      	movs	r3, #1
 8000964:	425b      	negs	r3, r3
}
 8000966:	0018      	movs	r0, r3
 8000968:	46bd      	mov	sp, r7
 800096a:	b002      	add	sp, #8
 800096c:	bd80      	pop	{r7, pc}

0800096e <_lseek>:
{
	return 1;
}

int _lseek(int file, int ptr, int dir)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b084      	sub	sp, #16
 8000972:	af00      	add	r7, sp, #0
 8000974:	60f8      	str	r0, [r7, #12]
 8000976:	60b9      	str	r1, [r7, #8]
 8000978:	607a      	str	r2, [r7, #4]
	return 0;
 800097a:	2300      	movs	r3, #0
}
 800097c:	0018      	movs	r0, r3
 800097e:	46bd      	mov	sp, r7
 8000980:	b004      	add	sp, #16
 8000982:	bd80      	pop	{r7, pc}

08000984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800098c:	4a14      	ldr	r2, [pc, #80]	; (80009e0 <_sbrk+0x5c>)
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <_sbrk+0x60>)
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000998:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <_sbrk+0x64>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d102      	bne.n	80009a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <_sbrk+0x64>)
 80009a2:	4a12      	ldr	r2, [pc, #72]	; (80009ec <_sbrk+0x68>)
 80009a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <_sbrk+0x64>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	18d3      	adds	r3, r2, r3
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d207      	bcs.n	80009c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b4:	f002 fb6c 	bl	8003090 <__errno>
 80009b8:	0003      	movs	r3, r0
 80009ba:	220c      	movs	r2, #12
 80009bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009be:	2301      	movs	r3, #1
 80009c0:	425b      	negs	r3, r3
 80009c2:	e009      	b.n	80009d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c4:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <_sbrk+0x64>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ca:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <_sbrk+0x64>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	18d2      	adds	r2, r2, r3
 80009d2:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <_sbrk+0x64>)
 80009d4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80009d6:	68fb      	ldr	r3, [r7, #12]
}
 80009d8:	0018      	movs	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	b006      	add	sp, #24
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20004000 	.word	0x20004000
 80009e4:	00000400 	.word	0x00000400
 80009e8:	20000138 	.word	0x20000138
 80009ec:	20000150 	.word	0x20000150

080009f0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009fc:	480d      	ldr	r0, [pc, #52]	; (8000a34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a00:	480d      	ldr	r0, [pc, #52]	; (8000a38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a02:	490e      	ldr	r1, [pc, #56]	; (8000a3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a04:	4a0e      	ldr	r2, [pc, #56]	; (8000a40 <LoopForever+0xe>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a08:	e002      	b.n	8000a10 <LoopCopyDataInit>

08000a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0e:	3304      	adds	r3, #4

08000a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a14:	d3f9      	bcc.n	8000a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a16:	4a0b      	ldr	r2, [pc, #44]	; (8000a44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a18:	4c0b      	ldr	r4, [pc, #44]	; (8000a48 <LoopForever+0x16>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a1c:	e001      	b.n	8000a22 <LoopFillZerobss>

08000a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a20:	3204      	adds	r2, #4

08000a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a24:	d3fb      	bcc.n	8000a1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a26:	f7ff ffe3 	bl	80009f0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a2a:	f002 fd1b 	bl	8003464 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a2e:	f7ff fd77 	bl	8000520 <main>

08000a32 <LoopForever>:

LoopForever:
    b LoopForever
 8000a32:	e7fe      	b.n	8000a32 <LoopForever>
  ldr   r0, =_estack
 8000a34:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a3c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a40:	080038fc 	.word	0x080038fc
  ldr r2, =_sbss
 8000a44:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a48:	20000150 	.word	0x20000150

08000a4c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a4c:	e7fe      	b.n	8000a4c <ADC1_COMP_IRQHandler>
	...

08000a50 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a54:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <HAL_Init+0x24>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <HAL_Init+0x24>)
 8000a5a:	2110      	movs	r1, #16
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a60:	2003      	movs	r0, #3
 8000a62:	f000 f809 	bl	8000a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a66:	f7ff fe85 	bl	8000774 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a6a:	2300      	movs	r3, #0
}
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	40022000 	.word	0x40022000

08000a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a78:	b590      	push	{r4, r7, lr}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a80:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <HAL_InitTick+0x5c>)
 8000a82:	681c      	ldr	r4, [r3, #0]
 8000a84:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <HAL_InitTick+0x60>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	0019      	movs	r1, r3
 8000a8a:	23fa      	movs	r3, #250	; 0xfa
 8000a8c:	0098      	lsls	r0, r3, #2
 8000a8e:	f7ff fb3b 	bl	8000108 <__udivsi3>
 8000a92:	0003      	movs	r3, r0
 8000a94:	0019      	movs	r1, r3
 8000a96:	0020      	movs	r0, r4
 8000a98:	f7ff fb36 	bl	8000108 <__udivsi3>
 8000a9c:	0003      	movs	r3, r0
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f000 f92f 	bl	8000d02 <HAL_SYSTICK_Config>
 8000aa4:	1e03      	subs	r3, r0, #0
 8000aa6:	d001      	beq.n	8000aac <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e00f      	b.n	8000acc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2b03      	cmp	r3, #3
 8000ab0:	d80b      	bhi.n	8000aca <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	425b      	negs	r3, r3
 8000ab8:	2200      	movs	r2, #0
 8000aba:	0018      	movs	r0, r3
 8000abc:	f000 f8fc 	bl	8000cb8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_InitTick+0x64>)
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	e000      	b.n	8000acc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
}
 8000acc:	0018      	movs	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b003      	add	sp, #12
 8000ad2:	bd90      	pop	{r4, r7, pc}
 8000ad4:	20000000 	.word	0x20000000
 8000ad8:	20000008 	.word	0x20000008
 8000adc:	20000004 	.word	0x20000004

08000ae0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <HAL_IncTick+0x1c>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	001a      	movs	r2, r3
 8000aea:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <HAL_IncTick+0x20>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	18d2      	adds	r2, r2, r3
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <HAL_IncTick+0x20>)
 8000af2:	601a      	str	r2, [r3, #0]
}
 8000af4:	46c0      	nop			; (mov r8, r8)
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	20000008 	.word	0x20000008
 8000b00:	2000013c 	.word	0x2000013c

08000b04 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  return uwTick;
 8000b08:	4b02      	ldr	r3, [pc, #8]	; (8000b14 <HAL_GetTick+0x10>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
}
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	2000013c 	.word	0x2000013c

08000b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b20:	f7ff fff0 	bl	8000b04 <HAL_GetTick>
 8000b24:	0003      	movs	r3, r0
 8000b26:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	d005      	beq.n	8000b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <HAL_Delay+0x44>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	001a      	movs	r2, r3
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	189b      	adds	r3, r3, r2
 8000b3c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	f7ff ffe0 	bl	8000b04 <HAL_GetTick>
 8000b44:	0002      	movs	r2, r0
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d8f7      	bhi.n	8000b40 <HAL_Delay+0x28>
  {
  }
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	46bd      	mov	sp, r7
 8000b56:	b004      	add	sp, #16
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	20000008 	.word	0x20000008

08000b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	0002      	movs	r2, r0
 8000b68:	1dfb      	adds	r3, r7, #7
 8000b6a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b6c:	1dfb      	adds	r3, r7, #7
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b7f      	cmp	r3, #127	; 0x7f
 8000b72:	d809      	bhi.n	8000b88 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b74:	1dfb      	adds	r3, r7, #7
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	001a      	movs	r2, r3
 8000b7a:	231f      	movs	r3, #31
 8000b7c:	401a      	ands	r2, r3
 8000b7e:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <__NVIC_EnableIRQ+0x30>)
 8000b80:	2101      	movs	r1, #1
 8000b82:	4091      	lsls	r1, r2
 8000b84:	000a      	movs	r2, r1
 8000b86:	601a      	str	r2, [r3, #0]
  }
}
 8000b88:	46c0      	nop			; (mov r8, r8)
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	b002      	add	sp, #8
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	e000e100 	.word	0xe000e100

08000b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b94:	b590      	push	{r4, r7, lr}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	0002      	movs	r2, r0
 8000b9c:	6039      	str	r1, [r7, #0]
 8000b9e:	1dfb      	adds	r3, r7, #7
 8000ba0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ba2:	1dfb      	adds	r3, r7, #7
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ba8:	d828      	bhi.n	8000bfc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000baa:	4a2f      	ldr	r2, [pc, #188]	; (8000c68 <__NVIC_SetPriority+0xd4>)
 8000bac:	1dfb      	adds	r3, r7, #7
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	b25b      	sxtb	r3, r3
 8000bb2:	089b      	lsrs	r3, r3, #2
 8000bb4:	33c0      	adds	r3, #192	; 0xc0
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	589b      	ldr	r3, [r3, r2]
 8000bba:	1dfa      	adds	r2, r7, #7
 8000bbc:	7812      	ldrb	r2, [r2, #0]
 8000bbe:	0011      	movs	r1, r2
 8000bc0:	2203      	movs	r2, #3
 8000bc2:	400a      	ands	r2, r1
 8000bc4:	00d2      	lsls	r2, r2, #3
 8000bc6:	21ff      	movs	r1, #255	; 0xff
 8000bc8:	4091      	lsls	r1, r2
 8000bca:	000a      	movs	r2, r1
 8000bcc:	43d2      	mvns	r2, r2
 8000bce:	401a      	ands	r2, r3
 8000bd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	019b      	lsls	r3, r3, #6
 8000bd6:	22ff      	movs	r2, #255	; 0xff
 8000bd8:	401a      	ands	r2, r3
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	0018      	movs	r0, r3
 8000be0:	2303      	movs	r3, #3
 8000be2:	4003      	ands	r3, r0
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000be8:	481f      	ldr	r0, [pc, #124]	; (8000c68 <__NVIC_SetPriority+0xd4>)
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	b25b      	sxtb	r3, r3
 8000bf0:	089b      	lsrs	r3, r3, #2
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	33c0      	adds	r3, #192	; 0xc0
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bfa:	e031      	b.n	8000c60 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bfc:	4a1b      	ldr	r2, [pc, #108]	; (8000c6c <__NVIC_SetPriority+0xd8>)
 8000bfe:	1dfb      	adds	r3, r7, #7
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	0019      	movs	r1, r3
 8000c04:	230f      	movs	r3, #15
 8000c06:	400b      	ands	r3, r1
 8000c08:	3b08      	subs	r3, #8
 8000c0a:	089b      	lsrs	r3, r3, #2
 8000c0c:	3306      	adds	r3, #6
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	18d3      	adds	r3, r2, r3
 8000c12:	3304      	adds	r3, #4
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	1dfa      	adds	r2, r7, #7
 8000c18:	7812      	ldrb	r2, [r2, #0]
 8000c1a:	0011      	movs	r1, r2
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	400a      	ands	r2, r1
 8000c20:	00d2      	lsls	r2, r2, #3
 8000c22:	21ff      	movs	r1, #255	; 0xff
 8000c24:	4091      	lsls	r1, r2
 8000c26:	000a      	movs	r2, r1
 8000c28:	43d2      	mvns	r2, r2
 8000c2a:	401a      	ands	r2, r3
 8000c2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	019b      	lsls	r3, r3, #6
 8000c32:	22ff      	movs	r2, #255	; 0xff
 8000c34:	401a      	ands	r2, r3
 8000c36:	1dfb      	adds	r3, r7, #7
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	4003      	ands	r3, r0
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c44:	4809      	ldr	r0, [pc, #36]	; (8000c6c <__NVIC_SetPriority+0xd8>)
 8000c46:	1dfb      	adds	r3, r7, #7
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	001c      	movs	r4, r3
 8000c4c:	230f      	movs	r3, #15
 8000c4e:	4023      	ands	r3, r4
 8000c50:	3b08      	subs	r3, #8
 8000c52:	089b      	lsrs	r3, r3, #2
 8000c54:	430a      	orrs	r2, r1
 8000c56:	3306      	adds	r3, #6
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	18c3      	adds	r3, r0, r3
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	601a      	str	r2, [r3, #0]
}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	b003      	add	sp, #12
 8000c66:	bd90      	pop	{r4, r7, pc}
 8000c68:	e000e100 	.word	0xe000e100
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	1e5a      	subs	r2, r3, #1
 8000c7c:	2380      	movs	r3, #128	; 0x80
 8000c7e:	045b      	lsls	r3, r3, #17
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d301      	bcc.n	8000c88 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c84:	2301      	movs	r3, #1
 8000c86:	e010      	b.n	8000caa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c88:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <SysTick_Config+0x44>)
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	3a01      	subs	r2, #1
 8000c8e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c90:	2301      	movs	r3, #1
 8000c92:	425b      	negs	r3, r3
 8000c94:	2103      	movs	r1, #3
 8000c96:	0018      	movs	r0, r3
 8000c98:	f7ff ff7c 	bl	8000b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <SysTick_Config+0x44>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca2:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <SysTick_Config+0x44>)
 8000ca4:	2207      	movs	r2, #7
 8000ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	0018      	movs	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b002      	add	sp, #8
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	e000e010 	.word	0xe000e010

08000cb8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60b9      	str	r1, [r7, #8]
 8000cc0:	607a      	str	r2, [r7, #4]
 8000cc2:	210f      	movs	r1, #15
 8000cc4:	187b      	adds	r3, r7, r1
 8000cc6:	1c02      	adds	r2, r0, #0
 8000cc8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	b25b      	sxtb	r3, r3
 8000cd2:	0011      	movs	r1, r2
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f7ff ff5d 	bl	8000b94 <__NVIC_SetPriority>
}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b004      	add	sp, #16
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	0002      	movs	r2, r0
 8000cea:	1dfb      	adds	r3, r7, #7
 8000cec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cee:	1dfb      	adds	r3, r7, #7
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	b25b      	sxtb	r3, r3
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f7ff ff33 	bl	8000b60 <__NVIC_EnableIRQ>
}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	b002      	add	sp, #8
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f7ff ffaf 	bl	8000c70 <SysTick_Config>
 8000d12:	0003      	movs	r3, r0
}
 8000d14:	0018      	movs	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	b002      	add	sp, #8
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d101      	bne.n	8000d2e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e056      	b.n	8000ddc <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	7f5b      	ldrb	r3, [r3, #29]
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d106      	bne.n	8000d46 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	0018      	movs	r0, r3
 8000d42:	f7ff fd3b 	bl	80007bc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2202      	movs	r2, #2
 8000d4a:	775a      	strb	r2, [r3, #29]

#if defined(CRC_POL_POL)
  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	791b      	ldrb	r3, [r3, #4]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d10c      	bne.n	8000d6e <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a22      	ldr	r2, [pc, #136]	; (8000de4 <HAL_CRC_Init+0xc8>)
 8000d5a:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	689a      	ldr	r2, [r3, #8]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2118      	movs	r1, #24
 8000d68:	438a      	bics	r2, r1
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	e00b      	b.n	8000d86 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6899      	ldr	r1, [r3, #8]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	68da      	ldr	r2, [r3, #12]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f000 f835 	bl	8000de8 <HAL_CRCEx_Polynomial_Set>
 8000d7e:	1e03      	subs	r3, r0, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e02a      	b.n	8000ddc <HAL_CRC_Init+0xc0>
#endif /* CRC_POL_POL */

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	795b      	ldrb	r3, [r3, #5]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d105      	bne.n	8000d9a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2201      	movs	r2, #1
 8000d94:	4252      	negs	r2, r2
 8000d96:	611a      	str	r2, [r3, #16]
 8000d98:	e004      	b.n	8000da4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	6912      	ldr	r2, [r2, #16]
 8000da2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	2260      	movs	r2, #96	; 0x60
 8000dac:	4393      	bics	r3, r2
 8000dae:	0019      	movs	r1, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	695a      	ldr	r2, [r3, #20]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	430a      	orrs	r2, r1
 8000dba:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	2280      	movs	r2, #128	; 0x80
 8000dc4:	4393      	bics	r3, r2
 8000dc6:	0019      	movs	r1, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	699a      	ldr	r2, [r3, #24]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000dda:	2300      	movs	r3, #0
}
 8000ddc:	0018      	movs	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	b002      	add	sp, #8
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	04c11db7 	.word	0x04c11db7

08000de8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000df4:	2317      	movs	r3, #23
 8000df6:	18fb      	adds	r3, r7, r3
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000dfc:	231f      	movs	r3, #31
 8000dfe:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000e00:	46c0      	nop			; (mov r8, r8)
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	1e5a      	subs	r2, r3, #1
 8000e06:	613a      	str	r2, [r7, #16]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d008      	beq.n	8000e1e <HAL_CRCEx_Polynomial_Set+0x36>
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	221f      	movs	r2, #31
 8000e10:	4013      	ands	r3, r2
 8000e12:	68ba      	ldr	r2, [r7, #8]
 8000e14:	40da      	lsrs	r2, r3
 8000e16:	0013      	movs	r3, r2
 8000e18:	2201      	movs	r2, #1
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	d0f1      	beq.n	8000e02 <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2b18      	cmp	r3, #24
 8000e22:	d00f      	beq.n	8000e44 <HAL_CRCEx_Polynomial_Set+0x5c>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2b18      	cmp	r3, #24
 8000e28:	d824      	bhi.n	8000e74 <HAL_CRCEx_Polynomial_Set+0x8c>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b10      	cmp	r3, #16
 8000e2e:	d011      	beq.n	8000e54 <HAL_CRCEx_Polynomial_Set+0x6c>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b10      	cmp	r3, #16
 8000e34:	d81e      	bhi.n	8000e74 <HAL_CRCEx_Polynomial_Set+0x8c>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d020      	beq.n	8000e7e <HAL_CRCEx_Polynomial_Set+0x96>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b08      	cmp	r3, #8
 8000e40:	d010      	beq.n	8000e64 <HAL_CRCEx_Polynomial_Set+0x7c>
 8000e42:	e017      	b.n	8000e74 <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	2b06      	cmp	r3, #6
 8000e48:	d91b      	bls.n	8000e82 <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 8000e4a:	2317      	movs	r3, #23
 8000e4c:	18fb      	adds	r3, r7, r3
 8000e4e:	2201      	movs	r2, #1
 8000e50:	701a      	strb	r2, [r3, #0]
      }
      break;
 8000e52:	e016      	b.n	8000e82 <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	2b07      	cmp	r3, #7
 8000e58:	d915      	bls.n	8000e86 <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 8000e5a:	2317      	movs	r3, #23
 8000e5c:	18fb      	adds	r3, r7, r3
 8000e5e:	2201      	movs	r2, #1
 8000e60:	701a      	strb	r2, [r3, #0]
      }
      break;
 8000e62:	e010      	b.n	8000e86 <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	2b0f      	cmp	r3, #15
 8000e68:	d90f      	bls.n	8000e8a <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 8000e6a:	2317      	movs	r3, #23
 8000e6c:	18fb      	adds	r3, r7, r3
 8000e6e:	2201      	movs	r2, #1
 8000e70:	701a      	strb	r2, [r3, #0]
      }
      break;
 8000e72:	e00a      	b.n	8000e8a <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8000e74:	2317      	movs	r3, #23
 8000e76:	18fb      	adds	r3, r7, r3
 8000e78:	2201      	movs	r2, #1
 8000e7a:	701a      	strb	r2, [r3, #0]
      break;
 8000e7c:	e006      	b.n	8000e8c <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	e004      	b.n	8000e8c <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	e002      	b.n	8000e8c <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	e000      	b.n	8000e8c <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8000e8a:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 8000e8c:	2317      	movs	r3, #23
 8000e8e:	18fb      	adds	r3, r7, r3
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d10e      	bne.n	8000eb4 <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	2218      	movs	r2, #24
 8000ea6:	4393      	bics	r3, r2
 8000ea8:	0019      	movs	r1, r3
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000eb4:	2317      	movs	r3, #23
 8000eb6:	18fb      	adds	r3, r7, r3
 8000eb8:	781b      	ldrb	r3, [r3, #0]
}
 8000eba:	0018      	movs	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b006      	add	sp, #24
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2221      	movs	r2, #33	; 0x21
 8000ece:	5c9b      	ldrb	r3, [r3, r2]
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d008      	beq.n	8000ee8 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2204      	movs	r2, #4
 8000eda:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2220      	movs	r2, #32
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e020      	b.n	8000f2a <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	210e      	movs	r1, #14
 8000ef4:	438a      	bics	r2, r1
 8000ef6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2101      	movs	r1, #1
 8000f04:	438a      	bics	r2, r1
 8000f06:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f10:	2101      	movs	r1, #1
 8000f12:	4091      	lsls	r1, r2
 8000f14:	000a      	movs	r2, r1
 8000f16:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2221      	movs	r2, #33	; 0x21
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2220      	movs	r2, #32
 8000f24:	2100      	movs	r1, #0
 8000f26:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	b002      	add	sp, #8
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b084      	sub	sp, #16
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f3a:	210f      	movs	r1, #15
 8000f3c:	187b      	adds	r3, r7, r1
 8000f3e:	2200      	movs	r2, #0
 8000f40:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2221      	movs	r2, #33	; 0x21
 8000f46:	5c9b      	ldrb	r3, [r3, r2]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d006      	beq.n	8000f5c <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2204      	movs	r2, #4
 8000f52:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f54:	187b      	adds	r3, r7, r1
 8000f56:	2201      	movs	r2, #1
 8000f58:	701a      	strb	r2, [r3, #0]
 8000f5a:	e028      	b.n	8000fae <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	210e      	movs	r1, #14
 8000f68:	438a      	bics	r2, r1
 8000f6a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2101      	movs	r1, #1
 8000f78:	438a      	bics	r2, r1
 8000f7a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f84:	2101      	movs	r1, #1
 8000f86:	4091      	lsls	r1, r2
 8000f88:	000a      	movs	r2, r1
 8000f8a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2221      	movs	r2, #33	; 0x21
 8000f90:	2101      	movs	r1, #1
 8000f92:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2220      	movs	r2, #32
 8000f98:	2100      	movs	r1, #0
 8000f9a:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d004      	beq.n	8000fae <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	0010      	movs	r0, r2
 8000fac:	4798      	blx	r3
    } 
  }
  return status;
 8000fae:	230f      	movs	r3, #15
 8000fb0:	18fb      	adds	r3, r7, r3
 8000fb2:	781b      	ldrb	r3, [r3, #0]
}
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b004      	add	sp, #16
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fca:	e155      	b.n	8001278 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	4091      	lsls	r1, r2
 8000fd6:	000a      	movs	r2, r1
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d100      	bne.n	8000fe4 <HAL_GPIO_Init+0x28>
 8000fe2:	e146      	b.n	8001272 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2203      	movs	r2, #3
 8000fea:	4013      	ands	r3, r2
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d005      	beq.n	8000ffc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	2203      	movs	r2, #3
 8000ff6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d130      	bne.n	800105e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	2203      	movs	r2, #3
 8001008:	409a      	lsls	r2, r3
 800100a:	0013      	movs	r3, r2
 800100c:	43da      	mvns	r2, r3
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	68da      	ldr	r2, [r3, #12]
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	409a      	lsls	r2, r3
 800101e:	0013      	movs	r3, r2
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4313      	orrs	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001032:	2201      	movs	r2, #1
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	409a      	lsls	r2, r3
 8001038:	0013      	movs	r3, r2
 800103a:	43da      	mvns	r2, r3
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	091b      	lsrs	r3, r3, #4
 8001048:	2201      	movs	r2, #1
 800104a:	401a      	ands	r2, r3
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	409a      	lsls	r2, r3
 8001050:	0013      	movs	r3, r2
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4313      	orrs	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	2203      	movs	r2, #3
 8001064:	4013      	ands	r3, r2
 8001066:	2b03      	cmp	r3, #3
 8001068:	d017      	beq.n	800109a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	2203      	movs	r2, #3
 8001076:	409a      	lsls	r2, r3
 8001078:	0013      	movs	r3, r2
 800107a:	43da      	mvns	r2, r3
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	689a      	ldr	r2, [r3, #8]
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	409a      	lsls	r2, r3
 800108c:	0013      	movs	r3, r2
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4313      	orrs	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2203      	movs	r2, #3
 80010a0:	4013      	ands	r3, r2
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d123      	bne.n	80010ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	08da      	lsrs	r2, r3, #3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	3208      	adds	r2, #8
 80010ae:	0092      	lsls	r2, r2, #2
 80010b0:	58d3      	ldr	r3, [r2, r3]
 80010b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	2207      	movs	r2, #7
 80010b8:	4013      	ands	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	220f      	movs	r2, #15
 80010be:	409a      	lsls	r2, r3
 80010c0:	0013      	movs	r3, r2
 80010c2:	43da      	mvns	r2, r3
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	691a      	ldr	r2, [r3, #16]
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	2107      	movs	r1, #7
 80010d2:	400b      	ands	r3, r1
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	409a      	lsls	r2, r3
 80010d8:	0013      	movs	r3, r2
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	08da      	lsrs	r2, r3, #3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3208      	adds	r2, #8
 80010e8:	0092      	lsls	r2, r2, #2
 80010ea:	6939      	ldr	r1, [r7, #16]
 80010ec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	2203      	movs	r2, #3
 80010fa:	409a      	lsls	r2, r3
 80010fc:	0013      	movs	r3, r2
 80010fe:	43da      	mvns	r2, r3
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	4013      	ands	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2203      	movs	r2, #3
 800110c:	401a      	ands	r2, r3
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	409a      	lsls	r2, r3
 8001114:	0013      	movs	r3, r2
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	23c0      	movs	r3, #192	; 0xc0
 8001128:	029b      	lsls	r3, r3, #10
 800112a:	4013      	ands	r3, r2
 800112c:	d100      	bne.n	8001130 <HAL_GPIO_Init+0x174>
 800112e:	e0a0      	b.n	8001272 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001130:	4b57      	ldr	r3, [pc, #348]	; (8001290 <HAL_GPIO_Init+0x2d4>)
 8001132:	699a      	ldr	r2, [r3, #24]
 8001134:	4b56      	ldr	r3, [pc, #344]	; (8001290 <HAL_GPIO_Init+0x2d4>)
 8001136:	2101      	movs	r1, #1
 8001138:	430a      	orrs	r2, r1
 800113a:	619a      	str	r2, [r3, #24]
 800113c:	4b54      	ldr	r3, [pc, #336]	; (8001290 <HAL_GPIO_Init+0x2d4>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	2201      	movs	r2, #1
 8001142:	4013      	ands	r3, r2
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001148:	4a52      	ldr	r2, [pc, #328]	; (8001294 <HAL_GPIO_Init+0x2d8>)
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	089b      	lsrs	r3, r3, #2
 800114e:	3302      	adds	r3, #2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	589b      	ldr	r3, [r3, r2]
 8001154:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	2203      	movs	r2, #3
 800115a:	4013      	ands	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	220f      	movs	r2, #15
 8001160:	409a      	lsls	r2, r3
 8001162:	0013      	movs	r3, r2
 8001164:	43da      	mvns	r2, r3
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	2390      	movs	r3, #144	; 0x90
 8001170:	05db      	lsls	r3, r3, #23
 8001172:	429a      	cmp	r2, r3
 8001174:	d019      	beq.n	80011aa <HAL_GPIO_Init+0x1ee>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a47      	ldr	r2, [pc, #284]	; (8001298 <HAL_GPIO_Init+0x2dc>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d013      	beq.n	80011a6 <HAL_GPIO_Init+0x1ea>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a46      	ldr	r2, [pc, #280]	; (800129c <HAL_GPIO_Init+0x2e0>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d00d      	beq.n	80011a2 <HAL_GPIO_Init+0x1e6>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a45      	ldr	r2, [pc, #276]	; (80012a0 <HAL_GPIO_Init+0x2e4>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d007      	beq.n	800119e <HAL_GPIO_Init+0x1e2>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a44      	ldr	r2, [pc, #272]	; (80012a4 <HAL_GPIO_Init+0x2e8>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d101      	bne.n	800119a <HAL_GPIO_Init+0x1de>
 8001196:	2304      	movs	r3, #4
 8001198:	e008      	b.n	80011ac <HAL_GPIO_Init+0x1f0>
 800119a:	2305      	movs	r3, #5
 800119c:	e006      	b.n	80011ac <HAL_GPIO_Init+0x1f0>
 800119e:	2303      	movs	r3, #3
 80011a0:	e004      	b.n	80011ac <HAL_GPIO_Init+0x1f0>
 80011a2:	2302      	movs	r3, #2
 80011a4:	e002      	b.n	80011ac <HAL_GPIO_Init+0x1f0>
 80011a6:	2301      	movs	r3, #1
 80011a8:	e000      	b.n	80011ac <HAL_GPIO_Init+0x1f0>
 80011aa:	2300      	movs	r3, #0
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	2103      	movs	r1, #3
 80011b0:	400a      	ands	r2, r1
 80011b2:	0092      	lsls	r2, r2, #2
 80011b4:	4093      	lsls	r3, r2
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011bc:	4935      	ldr	r1, [pc, #212]	; (8001294 <HAL_GPIO_Init+0x2d8>)
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	089b      	lsrs	r3, r3, #2
 80011c2:	3302      	adds	r3, #2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011ca:	4b37      	ldr	r3, [pc, #220]	; (80012a8 <HAL_GPIO_Init+0x2ec>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	43da      	mvns	r2, r3
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	2380      	movs	r3, #128	; 0x80
 80011e0:	025b      	lsls	r3, r3, #9
 80011e2:	4013      	ands	r3, r2
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011ee:	4b2e      	ldr	r3, [pc, #184]	; (80012a8 <HAL_GPIO_Init+0x2ec>)
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80011f4:	4b2c      	ldr	r3, [pc, #176]	; (80012a8 <HAL_GPIO_Init+0x2ec>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	43da      	mvns	r2, r3
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	029b      	lsls	r3, r3, #10
 800120c:	4013      	ands	r3, r2
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001218:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <HAL_GPIO_Init+0x2ec>)
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800121e:	4b22      	ldr	r3, [pc, #136]	; (80012a8 <HAL_GPIO_Init+0x2ec>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	43da      	mvns	r2, r3
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	4013      	ands	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	2380      	movs	r3, #128	; 0x80
 8001234:	035b      	lsls	r3, r3, #13
 8001236:	4013      	ands	r3, r2
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4313      	orrs	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001242:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <HAL_GPIO_Init+0x2ec>)
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001248:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <HAL_GPIO_Init+0x2ec>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	43da      	mvns	r2, r3
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	2380      	movs	r3, #128	; 0x80
 800125e:	039b      	lsls	r3, r3, #14
 8001260:	4013      	ands	r3, r2
 8001262:	d003      	beq.n	800126c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800126c:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <HAL_GPIO_Init+0x2ec>)
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	3301      	adds	r3, #1
 8001276:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	40da      	lsrs	r2, r3
 8001280:	1e13      	subs	r3, r2, #0
 8001282:	d000      	beq.n	8001286 <HAL_GPIO_Init+0x2ca>
 8001284:	e6a2      	b.n	8000fcc <HAL_GPIO_Init+0x10>
  } 
}
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	46c0      	nop			; (mov r8, r8)
 800128a:	46bd      	mov	sp, r7
 800128c:	b006      	add	sp, #24
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40021000 	.word	0x40021000
 8001294:	40010000 	.word	0x40010000
 8001298:	48000400 	.word	0x48000400
 800129c:	48000800 	.word	0x48000800
 80012a0:	48000c00 	.word	0x48000c00
 80012a4:	48001000 	.word	0x48001000
 80012a8:	40010400 	.word	0x40010400

080012ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	0008      	movs	r0, r1
 80012b6:	0011      	movs	r1, r2
 80012b8:	1cbb      	adds	r3, r7, #2
 80012ba:	1c02      	adds	r2, r0, #0
 80012bc:	801a      	strh	r2, [r3, #0]
 80012be:	1c7b      	adds	r3, r7, #1
 80012c0:	1c0a      	adds	r2, r1, #0
 80012c2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012c4:	1c7b      	adds	r3, r7, #1
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d004      	beq.n	80012d6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012cc:	1cbb      	adds	r3, r7, #2
 80012ce:	881a      	ldrh	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012d4:	e003      	b.n	80012de <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012d6:	1cbb      	adds	r3, r7, #2
 80012d8:	881a      	ldrh	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	46bd      	mov	sp, r7
 80012e2:	b002      	add	sp, #8
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d102      	bne.n	80012fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	f000 fb76 	bl	80019e8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2201      	movs	r2, #1
 8001302:	4013      	ands	r3, r2
 8001304:	d100      	bne.n	8001308 <HAL_RCC_OscConfig+0x20>
 8001306:	e08e      	b.n	8001426 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001308:	4bc5      	ldr	r3, [pc, #788]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	220c      	movs	r2, #12
 800130e:	4013      	ands	r3, r2
 8001310:	2b04      	cmp	r3, #4
 8001312:	d00e      	beq.n	8001332 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001314:	4bc2      	ldr	r3, [pc, #776]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	220c      	movs	r2, #12
 800131a:	4013      	ands	r3, r2
 800131c:	2b08      	cmp	r3, #8
 800131e:	d117      	bne.n	8001350 <HAL_RCC_OscConfig+0x68>
 8001320:	4bbf      	ldr	r3, [pc, #764]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	23c0      	movs	r3, #192	; 0xc0
 8001326:	025b      	lsls	r3, r3, #9
 8001328:	401a      	ands	r2, r3
 800132a:	2380      	movs	r3, #128	; 0x80
 800132c:	025b      	lsls	r3, r3, #9
 800132e:	429a      	cmp	r2, r3
 8001330:	d10e      	bne.n	8001350 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001332:	4bbb      	ldr	r3, [pc, #748]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	2380      	movs	r3, #128	; 0x80
 8001338:	029b      	lsls	r3, r3, #10
 800133a:	4013      	ands	r3, r2
 800133c:	d100      	bne.n	8001340 <HAL_RCC_OscConfig+0x58>
 800133e:	e071      	b.n	8001424 <HAL_RCC_OscConfig+0x13c>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d000      	beq.n	800134a <HAL_RCC_OscConfig+0x62>
 8001348:	e06c      	b.n	8001424 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	f000 fb4c 	bl	80019e8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d107      	bne.n	8001368 <HAL_RCC_OscConfig+0x80>
 8001358:	4bb1      	ldr	r3, [pc, #708]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4bb0      	ldr	r3, [pc, #704]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 800135e:	2180      	movs	r1, #128	; 0x80
 8001360:	0249      	lsls	r1, r1, #9
 8001362:	430a      	orrs	r2, r1
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	e02f      	b.n	80013c8 <HAL_RCC_OscConfig+0xe0>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d10c      	bne.n	800138a <HAL_RCC_OscConfig+0xa2>
 8001370:	4bab      	ldr	r3, [pc, #684]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4baa      	ldr	r3, [pc, #680]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 8001376:	49ab      	ldr	r1, [pc, #684]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 8001378:	400a      	ands	r2, r1
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	4ba8      	ldr	r3, [pc, #672]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4ba7      	ldr	r3, [pc, #668]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 8001382:	49a9      	ldr	r1, [pc, #676]	; (8001628 <HAL_RCC_OscConfig+0x340>)
 8001384:	400a      	ands	r2, r1
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	e01e      	b.n	80013c8 <HAL_RCC_OscConfig+0xe0>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2b05      	cmp	r3, #5
 8001390:	d10e      	bne.n	80013b0 <HAL_RCC_OscConfig+0xc8>
 8001392:	4ba3      	ldr	r3, [pc, #652]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	4ba2      	ldr	r3, [pc, #648]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 8001398:	2180      	movs	r1, #128	; 0x80
 800139a:	02c9      	lsls	r1, r1, #11
 800139c:	430a      	orrs	r2, r1
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	4b9f      	ldr	r3, [pc, #636]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b9e      	ldr	r3, [pc, #632]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 80013a6:	2180      	movs	r1, #128	; 0x80
 80013a8:	0249      	lsls	r1, r1, #9
 80013aa:	430a      	orrs	r2, r1
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	e00b      	b.n	80013c8 <HAL_RCC_OscConfig+0xe0>
 80013b0:	4b9b      	ldr	r3, [pc, #620]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b9a      	ldr	r3, [pc, #616]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 80013b6:	499b      	ldr	r1, [pc, #620]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 80013b8:	400a      	ands	r2, r1
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	4b98      	ldr	r3, [pc, #608]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	4b97      	ldr	r3, [pc, #604]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 80013c2:	4999      	ldr	r1, [pc, #612]	; (8001628 <HAL_RCC_OscConfig+0x340>)
 80013c4:	400a      	ands	r2, r1
 80013c6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d014      	beq.n	80013fa <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d0:	f7ff fb98 	bl	8000b04 <HAL_GetTick>
 80013d4:	0003      	movs	r3, r0
 80013d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013da:	f7ff fb93 	bl	8000b04 <HAL_GetTick>
 80013de:	0002      	movs	r2, r0
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b64      	cmp	r3, #100	; 0x64
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e2fd      	b.n	80019e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ec:	4b8c      	ldr	r3, [pc, #560]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	029b      	lsls	r3, r3, #10
 80013f4:	4013      	ands	r3, r2
 80013f6:	d0f0      	beq.n	80013da <HAL_RCC_OscConfig+0xf2>
 80013f8:	e015      	b.n	8001426 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fa:	f7ff fb83 	bl	8000b04 <HAL_GetTick>
 80013fe:	0003      	movs	r3, r0
 8001400:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001404:	f7ff fb7e 	bl	8000b04 <HAL_GetTick>
 8001408:	0002      	movs	r2, r0
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b64      	cmp	r3, #100	; 0x64
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e2e8      	b.n	80019e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001416:	4b82      	ldr	r3, [pc, #520]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	2380      	movs	r3, #128	; 0x80
 800141c:	029b      	lsls	r3, r3, #10
 800141e:	4013      	ands	r3, r2
 8001420:	d1f0      	bne.n	8001404 <HAL_RCC_OscConfig+0x11c>
 8001422:	e000      	b.n	8001426 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001424:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2202      	movs	r2, #2
 800142c:	4013      	ands	r3, r2
 800142e:	d100      	bne.n	8001432 <HAL_RCC_OscConfig+0x14a>
 8001430:	e06c      	b.n	800150c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001432:	4b7b      	ldr	r3, [pc, #492]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	220c      	movs	r2, #12
 8001438:	4013      	ands	r3, r2
 800143a:	d00e      	beq.n	800145a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800143c:	4b78      	ldr	r3, [pc, #480]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	220c      	movs	r2, #12
 8001442:	4013      	ands	r3, r2
 8001444:	2b08      	cmp	r3, #8
 8001446:	d11f      	bne.n	8001488 <HAL_RCC_OscConfig+0x1a0>
 8001448:	4b75      	ldr	r3, [pc, #468]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	23c0      	movs	r3, #192	; 0xc0
 800144e:	025b      	lsls	r3, r3, #9
 8001450:	401a      	ands	r2, r3
 8001452:	2380      	movs	r3, #128	; 0x80
 8001454:	021b      	lsls	r3, r3, #8
 8001456:	429a      	cmp	r2, r3
 8001458:	d116      	bne.n	8001488 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800145a:	4b71      	ldr	r3, [pc, #452]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2202      	movs	r2, #2
 8001460:	4013      	ands	r3, r2
 8001462:	d005      	beq.n	8001470 <HAL_RCC_OscConfig+0x188>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d001      	beq.n	8001470 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e2bb      	b.n	80019e8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001470:	4b6b      	ldr	r3, [pc, #428]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	22f8      	movs	r2, #248	; 0xf8
 8001476:	4393      	bics	r3, r2
 8001478:	0019      	movs	r1, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	691b      	ldr	r3, [r3, #16]
 800147e:	00da      	lsls	r2, r3, #3
 8001480:	4b67      	ldr	r3, [pc, #412]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 8001482:	430a      	orrs	r2, r1
 8001484:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001486:	e041      	b.n	800150c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d024      	beq.n	80014da <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001490:	4b63      	ldr	r3, [pc, #396]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4b62      	ldr	r3, [pc, #392]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 8001496:	2101      	movs	r1, #1
 8001498:	430a      	orrs	r2, r1
 800149a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149c:	f7ff fb32 	bl	8000b04 <HAL_GetTick>
 80014a0:	0003      	movs	r3, r0
 80014a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014a6:	f7ff fb2d 	bl	8000b04 <HAL_GetTick>
 80014aa:	0002      	movs	r2, r0
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e297      	b.n	80019e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b8:	4b59      	ldr	r3, [pc, #356]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2202      	movs	r2, #2
 80014be:	4013      	ands	r3, r2
 80014c0:	d0f1      	beq.n	80014a6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c2:	4b57      	ldr	r3, [pc, #348]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	22f8      	movs	r2, #248	; 0xf8
 80014c8:	4393      	bics	r3, r2
 80014ca:	0019      	movs	r1, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	00da      	lsls	r2, r3, #3
 80014d2:	4b53      	ldr	r3, [pc, #332]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 80014d4:	430a      	orrs	r2, r1
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	e018      	b.n	800150c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014da:	4b51      	ldr	r3, [pc, #324]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4b50      	ldr	r3, [pc, #320]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 80014e0:	2101      	movs	r1, #1
 80014e2:	438a      	bics	r2, r1
 80014e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e6:	f7ff fb0d 	bl	8000b04 <HAL_GetTick>
 80014ea:	0003      	movs	r3, r0
 80014ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014f0:	f7ff fb08 	bl	8000b04 <HAL_GetTick>
 80014f4:	0002      	movs	r2, r0
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e272      	b.n	80019e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001502:	4b47      	ldr	r3, [pc, #284]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2202      	movs	r2, #2
 8001508:	4013      	ands	r3, r2
 800150a:	d1f1      	bne.n	80014f0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2208      	movs	r2, #8
 8001512:	4013      	ands	r3, r2
 8001514:	d036      	beq.n	8001584 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d019      	beq.n	8001552 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800151e:	4b40      	ldr	r3, [pc, #256]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 8001520:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001522:	4b3f      	ldr	r3, [pc, #252]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 8001524:	2101      	movs	r1, #1
 8001526:	430a      	orrs	r2, r1
 8001528:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152a:	f7ff faeb 	bl	8000b04 <HAL_GetTick>
 800152e:	0003      	movs	r3, r0
 8001530:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001534:	f7ff fae6 	bl	8000b04 <HAL_GetTick>
 8001538:	0002      	movs	r2, r0
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e250      	b.n	80019e8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001546:	4b36      	ldr	r3, [pc, #216]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 8001548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154a:	2202      	movs	r2, #2
 800154c:	4013      	ands	r3, r2
 800154e:	d0f1      	beq.n	8001534 <HAL_RCC_OscConfig+0x24c>
 8001550:	e018      	b.n	8001584 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001552:	4b33      	ldr	r3, [pc, #204]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 8001554:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001556:	4b32      	ldr	r3, [pc, #200]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 8001558:	2101      	movs	r1, #1
 800155a:	438a      	bics	r2, r1
 800155c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155e:	f7ff fad1 	bl	8000b04 <HAL_GetTick>
 8001562:	0003      	movs	r3, r0
 8001564:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001568:	f7ff facc 	bl	8000b04 <HAL_GetTick>
 800156c:	0002      	movs	r2, r0
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e236      	b.n	80019e8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800157a:	4b29      	ldr	r3, [pc, #164]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 800157c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157e:	2202      	movs	r2, #2
 8001580:	4013      	ands	r3, r2
 8001582:	d1f1      	bne.n	8001568 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2204      	movs	r2, #4
 800158a:	4013      	ands	r3, r2
 800158c:	d100      	bne.n	8001590 <HAL_RCC_OscConfig+0x2a8>
 800158e:	e0b5      	b.n	80016fc <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001590:	201f      	movs	r0, #31
 8001592:	183b      	adds	r3, r7, r0
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001598:	4b21      	ldr	r3, [pc, #132]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 800159a:	69da      	ldr	r2, [r3, #28]
 800159c:	2380      	movs	r3, #128	; 0x80
 800159e:	055b      	lsls	r3, r3, #21
 80015a0:	4013      	ands	r3, r2
 80015a2:	d110      	bne.n	80015c6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015a4:	4b1e      	ldr	r3, [pc, #120]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 80015a6:	69da      	ldr	r2, [r3, #28]
 80015a8:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 80015aa:	2180      	movs	r1, #128	; 0x80
 80015ac:	0549      	lsls	r1, r1, #21
 80015ae:	430a      	orrs	r2, r1
 80015b0:	61da      	str	r2, [r3, #28]
 80015b2:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 80015b4:	69da      	ldr	r2, [r3, #28]
 80015b6:	2380      	movs	r3, #128	; 0x80
 80015b8:	055b      	lsls	r3, r3, #21
 80015ba:	4013      	ands	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015c0:	183b      	adds	r3, r7, r0
 80015c2:	2201      	movs	r2, #1
 80015c4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c6:	4b19      	ldr	r3, [pc, #100]	; (800162c <HAL_RCC_OscConfig+0x344>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	2380      	movs	r3, #128	; 0x80
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	4013      	ands	r3, r2
 80015d0:	d11a      	bne.n	8001608 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015d2:	4b16      	ldr	r3, [pc, #88]	; (800162c <HAL_RCC_OscConfig+0x344>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <HAL_RCC_OscConfig+0x344>)
 80015d8:	2180      	movs	r1, #128	; 0x80
 80015da:	0049      	lsls	r1, r1, #1
 80015dc:	430a      	orrs	r2, r1
 80015de:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015e0:	f7ff fa90 	bl	8000b04 <HAL_GetTick>
 80015e4:	0003      	movs	r3, r0
 80015e6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ea:	f7ff fa8b 	bl	8000b04 <HAL_GetTick>
 80015ee:	0002      	movs	r2, r0
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b64      	cmp	r3, #100	; 0x64
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e1f5      	b.n	80019e8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_RCC_OscConfig+0x344>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	2380      	movs	r3, #128	; 0x80
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	4013      	ands	r3, r2
 8001606:	d0f0      	beq.n	80015ea <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d10f      	bne.n	8001630 <HAL_RCC_OscConfig+0x348>
 8001610:	4b03      	ldr	r3, [pc, #12]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 8001612:	6a1a      	ldr	r2, [r3, #32]
 8001614:	4b02      	ldr	r3, [pc, #8]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 8001616:	2101      	movs	r1, #1
 8001618:	430a      	orrs	r2, r1
 800161a:	621a      	str	r2, [r3, #32]
 800161c:	e036      	b.n	800168c <HAL_RCC_OscConfig+0x3a4>
 800161e:	46c0      	nop			; (mov r8, r8)
 8001620:	40021000 	.word	0x40021000
 8001624:	fffeffff 	.word	0xfffeffff
 8001628:	fffbffff 	.word	0xfffbffff
 800162c:	40007000 	.word	0x40007000
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d10c      	bne.n	8001652 <HAL_RCC_OscConfig+0x36a>
 8001638:	4bca      	ldr	r3, [pc, #808]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 800163a:	6a1a      	ldr	r2, [r3, #32]
 800163c:	4bc9      	ldr	r3, [pc, #804]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 800163e:	2101      	movs	r1, #1
 8001640:	438a      	bics	r2, r1
 8001642:	621a      	str	r2, [r3, #32]
 8001644:	4bc7      	ldr	r3, [pc, #796]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 8001646:	6a1a      	ldr	r2, [r3, #32]
 8001648:	4bc6      	ldr	r3, [pc, #792]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 800164a:	2104      	movs	r1, #4
 800164c:	438a      	bics	r2, r1
 800164e:	621a      	str	r2, [r3, #32]
 8001650:	e01c      	b.n	800168c <HAL_RCC_OscConfig+0x3a4>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b05      	cmp	r3, #5
 8001658:	d10c      	bne.n	8001674 <HAL_RCC_OscConfig+0x38c>
 800165a:	4bc2      	ldr	r3, [pc, #776]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 800165c:	6a1a      	ldr	r2, [r3, #32]
 800165e:	4bc1      	ldr	r3, [pc, #772]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 8001660:	2104      	movs	r1, #4
 8001662:	430a      	orrs	r2, r1
 8001664:	621a      	str	r2, [r3, #32]
 8001666:	4bbf      	ldr	r3, [pc, #764]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 8001668:	6a1a      	ldr	r2, [r3, #32]
 800166a:	4bbe      	ldr	r3, [pc, #760]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 800166c:	2101      	movs	r1, #1
 800166e:	430a      	orrs	r2, r1
 8001670:	621a      	str	r2, [r3, #32]
 8001672:	e00b      	b.n	800168c <HAL_RCC_OscConfig+0x3a4>
 8001674:	4bbb      	ldr	r3, [pc, #748]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 8001676:	6a1a      	ldr	r2, [r3, #32]
 8001678:	4bba      	ldr	r3, [pc, #744]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 800167a:	2101      	movs	r1, #1
 800167c:	438a      	bics	r2, r1
 800167e:	621a      	str	r2, [r3, #32]
 8001680:	4bb8      	ldr	r3, [pc, #736]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 8001682:	6a1a      	ldr	r2, [r3, #32]
 8001684:	4bb7      	ldr	r3, [pc, #732]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 8001686:	2104      	movs	r1, #4
 8001688:	438a      	bics	r2, r1
 800168a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d014      	beq.n	80016be <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001694:	f7ff fa36 	bl	8000b04 <HAL_GetTick>
 8001698:	0003      	movs	r3, r0
 800169a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800169c:	e009      	b.n	80016b2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800169e:	f7ff fa31 	bl	8000b04 <HAL_GetTick>
 80016a2:	0002      	movs	r2, r0
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	4aaf      	ldr	r2, [pc, #700]	; (8001968 <HAL_RCC_OscConfig+0x680>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e19a      	b.n	80019e8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b2:	4bac      	ldr	r3, [pc, #688]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	2202      	movs	r2, #2
 80016b8:	4013      	ands	r3, r2
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x3b6>
 80016bc:	e013      	b.n	80016e6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016be:	f7ff fa21 	bl	8000b04 <HAL_GetTick>
 80016c2:	0003      	movs	r3, r0
 80016c4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c6:	e009      	b.n	80016dc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016c8:	f7ff fa1c 	bl	8000b04 <HAL_GetTick>
 80016cc:	0002      	movs	r2, r0
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	4aa5      	ldr	r2, [pc, #660]	; (8001968 <HAL_RCC_OscConfig+0x680>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e185      	b.n	80019e8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016dc:	4ba1      	ldr	r3, [pc, #644]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	2202      	movs	r2, #2
 80016e2:	4013      	ands	r3, r2
 80016e4:	d1f0      	bne.n	80016c8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016e6:	231f      	movs	r3, #31
 80016e8:	18fb      	adds	r3, r7, r3
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d105      	bne.n	80016fc <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016f0:	4b9c      	ldr	r3, [pc, #624]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 80016f2:	69da      	ldr	r2, [r3, #28]
 80016f4:	4b9b      	ldr	r3, [pc, #620]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 80016f6:	499d      	ldr	r1, [pc, #628]	; (800196c <HAL_RCC_OscConfig+0x684>)
 80016f8:	400a      	ands	r2, r1
 80016fa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2210      	movs	r2, #16
 8001702:	4013      	ands	r3, r2
 8001704:	d063      	beq.n	80017ce <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d12a      	bne.n	8001764 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800170e:	4b95      	ldr	r3, [pc, #596]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 8001710:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001712:	4b94      	ldr	r3, [pc, #592]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 8001714:	2104      	movs	r1, #4
 8001716:	430a      	orrs	r2, r1
 8001718:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800171a:	4b92      	ldr	r3, [pc, #584]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 800171c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800171e:	4b91      	ldr	r3, [pc, #580]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 8001720:	2101      	movs	r1, #1
 8001722:	430a      	orrs	r2, r1
 8001724:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001726:	f7ff f9ed 	bl	8000b04 <HAL_GetTick>
 800172a:	0003      	movs	r3, r0
 800172c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001730:	f7ff f9e8 	bl	8000b04 <HAL_GetTick>
 8001734:	0002      	movs	r2, r0
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e152      	b.n	80019e8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001742:	4b88      	ldr	r3, [pc, #544]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 8001744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001746:	2202      	movs	r2, #2
 8001748:	4013      	ands	r3, r2
 800174a:	d0f1      	beq.n	8001730 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800174c:	4b85      	ldr	r3, [pc, #532]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 800174e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001750:	22f8      	movs	r2, #248	; 0xf8
 8001752:	4393      	bics	r3, r2
 8001754:	0019      	movs	r1, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	00da      	lsls	r2, r3, #3
 800175c:	4b81      	ldr	r3, [pc, #516]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 800175e:	430a      	orrs	r2, r1
 8001760:	635a      	str	r2, [r3, #52]	; 0x34
 8001762:	e034      	b.n	80017ce <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	695b      	ldr	r3, [r3, #20]
 8001768:	3305      	adds	r3, #5
 800176a:	d111      	bne.n	8001790 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800176c:	4b7d      	ldr	r3, [pc, #500]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 800176e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001770:	4b7c      	ldr	r3, [pc, #496]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 8001772:	2104      	movs	r1, #4
 8001774:	438a      	bics	r2, r1
 8001776:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001778:	4b7a      	ldr	r3, [pc, #488]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 800177a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800177c:	22f8      	movs	r2, #248	; 0xf8
 800177e:	4393      	bics	r3, r2
 8001780:	0019      	movs	r1, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	00da      	lsls	r2, r3, #3
 8001788:	4b76      	ldr	r3, [pc, #472]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 800178a:	430a      	orrs	r2, r1
 800178c:	635a      	str	r2, [r3, #52]	; 0x34
 800178e:	e01e      	b.n	80017ce <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001790:	4b74      	ldr	r3, [pc, #464]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 8001792:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001794:	4b73      	ldr	r3, [pc, #460]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 8001796:	2104      	movs	r1, #4
 8001798:	430a      	orrs	r2, r1
 800179a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800179c:	4b71      	ldr	r3, [pc, #452]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 800179e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017a0:	4b70      	ldr	r3, [pc, #448]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 80017a2:	2101      	movs	r1, #1
 80017a4:	438a      	bics	r2, r1
 80017a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a8:	f7ff f9ac 	bl	8000b04 <HAL_GetTick>
 80017ac:	0003      	movs	r3, r0
 80017ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80017b2:	f7ff f9a7 	bl	8000b04 <HAL_GetTick>
 80017b6:	0002      	movs	r2, r0
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e111      	b.n	80019e8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017c4:	4b67      	ldr	r3, [pc, #412]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 80017c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c8:	2202      	movs	r2, #2
 80017ca:	4013      	ands	r3, r2
 80017cc:	d1f1      	bne.n	80017b2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2220      	movs	r2, #32
 80017d4:	4013      	ands	r3, r2
 80017d6:	d05c      	beq.n	8001892 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80017d8:	4b62      	ldr	r3, [pc, #392]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	220c      	movs	r2, #12
 80017de:	4013      	ands	r3, r2
 80017e0:	2b0c      	cmp	r3, #12
 80017e2:	d00e      	beq.n	8001802 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80017e4:	4b5f      	ldr	r3, [pc, #380]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	220c      	movs	r2, #12
 80017ea:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80017ec:	2b08      	cmp	r3, #8
 80017ee:	d114      	bne.n	800181a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80017f0:	4b5c      	ldr	r3, [pc, #368]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	23c0      	movs	r3, #192	; 0xc0
 80017f6:	025b      	lsls	r3, r3, #9
 80017f8:	401a      	ands	r2, r3
 80017fa:	23c0      	movs	r3, #192	; 0xc0
 80017fc:	025b      	lsls	r3, r3, #9
 80017fe:	429a      	cmp	r2, r3
 8001800:	d10b      	bne.n	800181a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001802:	4b58      	ldr	r3, [pc, #352]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 8001804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001806:	2380      	movs	r3, #128	; 0x80
 8001808:	025b      	lsls	r3, r3, #9
 800180a:	4013      	ands	r3, r2
 800180c:	d040      	beq.n	8001890 <HAL_RCC_OscConfig+0x5a8>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d03c      	beq.n	8001890 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e0e6      	b.n	80019e8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a1b      	ldr	r3, [r3, #32]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d01b      	beq.n	800185a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001822:	4b50      	ldr	r3, [pc, #320]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 8001824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001826:	4b4f      	ldr	r3, [pc, #316]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 8001828:	2180      	movs	r1, #128	; 0x80
 800182a:	0249      	lsls	r1, r1, #9
 800182c:	430a      	orrs	r2, r1
 800182e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001830:	f7ff f968 	bl	8000b04 <HAL_GetTick>
 8001834:	0003      	movs	r3, r0
 8001836:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800183a:	f7ff f963 	bl	8000b04 <HAL_GetTick>
 800183e:	0002      	movs	r2, r0
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e0cd      	b.n	80019e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800184c:	4b45      	ldr	r3, [pc, #276]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 800184e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001850:	2380      	movs	r3, #128	; 0x80
 8001852:	025b      	lsls	r3, r3, #9
 8001854:	4013      	ands	r3, r2
 8001856:	d0f0      	beq.n	800183a <HAL_RCC_OscConfig+0x552>
 8001858:	e01b      	b.n	8001892 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800185a:	4b42      	ldr	r3, [pc, #264]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 800185c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800185e:	4b41      	ldr	r3, [pc, #260]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 8001860:	4943      	ldr	r1, [pc, #268]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 8001862:	400a      	ands	r2, r1
 8001864:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001866:	f7ff f94d 	bl	8000b04 <HAL_GetTick>
 800186a:	0003      	movs	r3, r0
 800186c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001870:	f7ff f948 	bl	8000b04 <HAL_GetTick>
 8001874:	0002      	movs	r2, r0
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e0b2      	b.n	80019e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001882:	4b38      	ldr	r3, [pc, #224]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 8001884:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001886:	2380      	movs	r3, #128	; 0x80
 8001888:	025b      	lsls	r3, r3, #9
 800188a:	4013      	ands	r3, r2
 800188c:	d1f0      	bne.n	8001870 <HAL_RCC_OscConfig+0x588>
 800188e:	e000      	b.n	8001892 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001890:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	2b00      	cmp	r3, #0
 8001898:	d100      	bne.n	800189c <HAL_RCC_OscConfig+0x5b4>
 800189a:	e0a4      	b.n	80019e6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800189c:	4b31      	ldr	r3, [pc, #196]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	220c      	movs	r2, #12
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b08      	cmp	r3, #8
 80018a6:	d100      	bne.n	80018aa <HAL_RCC_OscConfig+0x5c2>
 80018a8:	e078      	b.n	800199c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d14c      	bne.n	800194c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b2:	4b2c      	ldr	r3, [pc, #176]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	4b2b      	ldr	r3, [pc, #172]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 80018b8:	492e      	ldr	r1, [pc, #184]	; (8001974 <HAL_RCC_OscConfig+0x68c>)
 80018ba:	400a      	ands	r2, r1
 80018bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018be:	f7ff f921 	bl	8000b04 <HAL_GetTick>
 80018c2:	0003      	movs	r3, r0
 80018c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c8:	f7ff f91c 	bl	8000b04 <HAL_GetTick>
 80018cc:	0002      	movs	r2, r0
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e086      	b.n	80019e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018da:	4b22      	ldr	r3, [pc, #136]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	2380      	movs	r3, #128	; 0x80
 80018e0:	049b      	lsls	r3, r3, #18
 80018e2:	4013      	ands	r3, r2
 80018e4:	d1f0      	bne.n	80018c8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018e6:	4b1f      	ldr	r3, [pc, #124]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 80018e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ea:	220f      	movs	r2, #15
 80018ec:	4393      	bics	r3, r2
 80018ee:	0019      	movs	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018f4:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 80018f6:	430a      	orrs	r2, r1
 80018f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80018fa:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	4a1e      	ldr	r2, [pc, #120]	; (8001978 <HAL_RCC_OscConfig+0x690>)
 8001900:	4013      	ands	r3, r2
 8001902:	0019      	movs	r1, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190c:	431a      	orrs	r2, r3
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 8001910:	430a      	orrs	r2, r1
 8001912:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001914:	4b13      	ldr	r3, [pc, #76]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b12      	ldr	r3, [pc, #72]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 800191a:	2180      	movs	r1, #128	; 0x80
 800191c:	0449      	lsls	r1, r1, #17
 800191e:	430a      	orrs	r2, r1
 8001920:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001922:	f7ff f8ef 	bl	8000b04 <HAL_GetTick>
 8001926:	0003      	movs	r3, r0
 8001928:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800192c:	f7ff f8ea 	bl	8000b04 <HAL_GetTick>
 8001930:	0002      	movs	r2, r0
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e054      	b.n	80019e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800193e:	4b09      	ldr	r3, [pc, #36]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	2380      	movs	r3, #128	; 0x80
 8001944:	049b      	lsls	r3, r3, #18
 8001946:	4013      	ands	r3, r2
 8001948:	d0f0      	beq.n	800192c <HAL_RCC_OscConfig+0x644>
 800194a:	e04c      	b.n	80019e6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800194c:	4b05      	ldr	r3, [pc, #20]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4b04      	ldr	r3, [pc, #16]	; (8001964 <HAL_RCC_OscConfig+0x67c>)
 8001952:	4908      	ldr	r1, [pc, #32]	; (8001974 <HAL_RCC_OscConfig+0x68c>)
 8001954:	400a      	ands	r2, r1
 8001956:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001958:	f7ff f8d4 	bl	8000b04 <HAL_GetTick>
 800195c:	0003      	movs	r3, r0
 800195e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001960:	e015      	b.n	800198e <HAL_RCC_OscConfig+0x6a6>
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	40021000 	.word	0x40021000
 8001968:	00001388 	.word	0x00001388
 800196c:	efffffff 	.word	0xefffffff
 8001970:	fffeffff 	.word	0xfffeffff
 8001974:	feffffff 	.word	0xfeffffff
 8001978:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800197c:	f7ff f8c2 	bl	8000b04 <HAL_GetTick>
 8001980:	0002      	movs	r2, r0
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e02c      	b.n	80019e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800198e:	4b18      	ldr	r3, [pc, #96]	; (80019f0 <HAL_RCC_OscConfig+0x708>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	2380      	movs	r3, #128	; 0x80
 8001994:	049b      	lsls	r3, r3, #18
 8001996:	4013      	ands	r3, r2
 8001998:	d1f0      	bne.n	800197c <HAL_RCC_OscConfig+0x694>
 800199a:	e024      	b.n	80019e6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d101      	bne.n	80019a8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e01f      	b.n	80019e8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80019a8:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <HAL_RCC_OscConfig+0x708>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80019ae:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <HAL_RCC_OscConfig+0x708>)
 80019b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	23c0      	movs	r3, #192	; 0xc0
 80019b8:	025b      	lsls	r3, r3, #9
 80019ba:	401a      	ands	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d10e      	bne.n	80019e2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	220f      	movs	r2, #15
 80019c8:	401a      	ands	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d107      	bne.n	80019e2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	23f0      	movs	r3, #240	; 0xf0
 80019d6:	039b      	lsls	r3, r3, #14
 80019d8:	401a      	ands	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80019de:	429a      	cmp	r2, r3
 80019e0:	d001      	beq.n	80019e6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	0018      	movs	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	b008      	add	sp, #32
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40021000 	.word	0x40021000

080019f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d101      	bne.n	8001a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e0bf      	b.n	8001b88 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a08:	4b61      	ldr	r3, [pc, #388]	; (8001b90 <HAL_RCC_ClockConfig+0x19c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	4013      	ands	r3, r2
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d911      	bls.n	8001a3a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a16:	4b5e      	ldr	r3, [pc, #376]	; (8001b90 <HAL_RCC_ClockConfig+0x19c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	4393      	bics	r3, r2
 8001a1e:	0019      	movs	r1, r3
 8001a20:	4b5b      	ldr	r3, [pc, #364]	; (8001b90 <HAL_RCC_ClockConfig+0x19c>)
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	430a      	orrs	r2, r1
 8001a26:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a28:	4b59      	ldr	r3, [pc, #356]	; (8001b90 <HAL_RCC_ClockConfig+0x19c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	4013      	ands	r3, r2
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d001      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e0a6      	b.n	8001b88 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2202      	movs	r2, #2
 8001a40:	4013      	ands	r3, r2
 8001a42:	d015      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2204      	movs	r2, #4
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d006      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a4e:	4b51      	ldr	r3, [pc, #324]	; (8001b94 <HAL_RCC_ClockConfig+0x1a0>)
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	4b50      	ldr	r3, [pc, #320]	; (8001b94 <HAL_RCC_ClockConfig+0x1a0>)
 8001a54:	21e0      	movs	r1, #224	; 0xe0
 8001a56:	00c9      	lsls	r1, r1, #3
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a5c:	4b4d      	ldr	r3, [pc, #308]	; (8001b94 <HAL_RCC_ClockConfig+0x1a0>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	22f0      	movs	r2, #240	; 0xf0
 8001a62:	4393      	bics	r3, r2
 8001a64:	0019      	movs	r1, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689a      	ldr	r2, [r3, #8]
 8001a6a:	4b4a      	ldr	r3, [pc, #296]	; (8001b94 <HAL_RCC_ClockConfig+0x1a0>)
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2201      	movs	r2, #1
 8001a76:	4013      	ands	r3, r2
 8001a78:	d04c      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d107      	bne.n	8001a92 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a82:	4b44      	ldr	r3, [pc, #272]	; (8001b94 <HAL_RCC_ClockConfig+0x1a0>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	2380      	movs	r3, #128	; 0x80
 8001a88:	029b      	lsls	r3, r3, #10
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	d120      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e07a      	b.n	8001b88 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d107      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a9a:	4b3e      	ldr	r3, [pc, #248]	; (8001b94 <HAL_RCC_ClockConfig+0x1a0>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	2380      	movs	r3, #128	; 0x80
 8001aa0:	049b      	lsls	r3, r3, #18
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d114      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e06e      	b.n	8001b88 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	d107      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001ab2:	4b38      	ldr	r3, [pc, #224]	; (8001b94 <HAL_RCC_ClockConfig+0x1a0>)
 8001ab4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ab6:	2380      	movs	r3, #128	; 0x80
 8001ab8:	025b      	lsls	r3, r3, #9
 8001aba:	4013      	ands	r3, r2
 8001abc:	d108      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e062      	b.n	8001b88 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac2:	4b34      	ldr	r3, [pc, #208]	; (8001b94 <HAL_RCC_ClockConfig+0x1a0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d101      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e05b      	b.n	8001b88 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ad0:	4b30      	ldr	r3, [pc, #192]	; (8001b94 <HAL_RCC_ClockConfig+0x1a0>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	4393      	bics	r3, r2
 8001ad8:	0019      	movs	r1, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	4b2d      	ldr	r3, [pc, #180]	; (8001b94 <HAL_RCC_ClockConfig+0x1a0>)
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ae4:	f7ff f80e 	bl	8000b04 <HAL_GetTick>
 8001ae8:	0003      	movs	r3, r0
 8001aea:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aec:	e009      	b.n	8001b02 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aee:	f7ff f809 	bl	8000b04 <HAL_GetTick>
 8001af2:	0002      	movs	r2, r0
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	4a27      	ldr	r2, [pc, #156]	; (8001b98 <HAL_RCC_ClockConfig+0x1a4>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e042      	b.n	8001b88 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b02:	4b24      	ldr	r3, [pc, #144]	; (8001b94 <HAL_RCC_ClockConfig+0x1a0>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	220c      	movs	r2, #12
 8001b08:	401a      	ands	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d1ec      	bne.n	8001aee <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b14:	4b1e      	ldr	r3, [pc, #120]	; (8001b90 <HAL_RCC_ClockConfig+0x19c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d211      	bcs.n	8001b46 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b22:	4b1b      	ldr	r3, [pc, #108]	; (8001b90 <HAL_RCC_ClockConfig+0x19c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2201      	movs	r2, #1
 8001b28:	4393      	bics	r3, r2
 8001b2a:	0019      	movs	r1, r3
 8001b2c:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <HAL_RCC_ClockConfig+0x19c>)
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	430a      	orrs	r2, r1
 8001b32:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b34:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <HAL_RCC_ClockConfig+0x19c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d001      	beq.n	8001b46 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e020      	b.n	8001b88 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2204      	movs	r2, #4
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d009      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b50:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <HAL_RCC_ClockConfig+0x1a0>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	4a11      	ldr	r2, [pc, #68]	; (8001b9c <HAL_RCC_ClockConfig+0x1a8>)
 8001b56:	4013      	ands	r3, r2
 8001b58:	0019      	movs	r1, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	4b0d      	ldr	r3, [pc, #52]	; (8001b94 <HAL_RCC_ClockConfig+0x1a0>)
 8001b60:	430a      	orrs	r2, r1
 8001b62:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b64:	f000 f820 	bl	8001ba8 <HAL_RCC_GetSysClockFreq>
 8001b68:	0001      	movs	r1, r0
 8001b6a:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <HAL_RCC_ClockConfig+0x1a0>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	091b      	lsrs	r3, r3, #4
 8001b70:	220f      	movs	r2, #15
 8001b72:	4013      	ands	r3, r2
 8001b74:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <HAL_RCC_ClockConfig+0x1ac>)
 8001b76:	5cd3      	ldrb	r3, [r2, r3]
 8001b78:	000a      	movs	r2, r1
 8001b7a:	40da      	lsrs	r2, r3
 8001b7c:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <HAL_RCC_ClockConfig+0x1b0>)
 8001b7e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b80:	2003      	movs	r0, #3
 8001b82:	f7fe ff79 	bl	8000a78 <HAL_InitTick>
  
  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	0018      	movs	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	b004      	add	sp, #16
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40022000 	.word	0x40022000
 8001b94:	40021000 	.word	0x40021000
 8001b98:	00001388 	.word	0x00001388
 8001b9c:	fffff8ff 	.word	0xfffff8ff
 8001ba0:	08003878 	.word	0x08003878
 8001ba4:	20000000 	.word	0x20000000

08001ba8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ba8:	b590      	push	{r4, r7, lr}
 8001baa:	b08f      	sub	sp, #60	; 0x3c
 8001bac:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001bae:	2314      	movs	r3, #20
 8001bb0:	18fb      	adds	r3, r7, r3
 8001bb2:	4a38      	ldr	r2, [pc, #224]	; (8001c94 <HAL_RCC_GetSysClockFreq+0xec>)
 8001bb4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001bb6:	c313      	stmia	r3!, {r0, r1, r4}
 8001bb8:	6812      	ldr	r2, [r2, #0]
 8001bba:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001bbc:	1d3b      	adds	r3, r7, #4
 8001bbe:	4a36      	ldr	r2, [pc, #216]	; (8001c98 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001bc0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001bc2:	c313      	stmia	r3!, {r0, r1, r4}
 8001bc4:	6812      	ldr	r2, [r2, #0]
 8001bc6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bcc:	2300      	movs	r3, #0
 8001bce:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	637b      	str	r3, [r7, #52]	; 0x34
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001bdc:	4b2f      	ldr	r3, [pc, #188]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be4:	220c      	movs	r2, #12
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b0c      	cmp	r3, #12
 8001bea:	d047      	beq.n	8001c7c <HAL_RCC_GetSysClockFreq+0xd4>
 8001bec:	d849      	bhi.n	8001c82 <HAL_RCC_GetSysClockFreq+0xda>
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	d002      	beq.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x50>
 8001bf2:	2b08      	cmp	r3, #8
 8001bf4:	d003      	beq.n	8001bfe <HAL_RCC_GetSysClockFreq+0x56>
 8001bf6:	e044      	b.n	8001c82 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bf8:	4b29      	ldr	r3, [pc, #164]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bfa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001bfc:	e044      	b.n	8001c88 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c00:	0c9b      	lsrs	r3, r3, #18
 8001c02:	220f      	movs	r2, #15
 8001c04:	4013      	ands	r3, r2
 8001c06:	2214      	movs	r2, #20
 8001c08:	18ba      	adds	r2, r7, r2
 8001c0a:	5cd3      	ldrb	r3, [r2, r3]
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001c0e:	4b23      	ldr	r3, [pc, #140]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c12:	220f      	movs	r2, #15
 8001c14:	4013      	ands	r3, r2
 8001c16:	1d3a      	adds	r2, r7, #4
 8001c18:	5cd3      	ldrb	r3, [r2, r3]
 8001c1a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001c1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c1e:	23c0      	movs	r3, #192	; 0xc0
 8001c20:	025b      	lsls	r3, r3, #9
 8001c22:	401a      	ands	r2, r3
 8001c24:	2380      	movs	r3, #128	; 0x80
 8001c26:	025b      	lsls	r3, r3, #9
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d109      	bne.n	8001c40 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c2e:	481c      	ldr	r0, [pc, #112]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c30:	f7fe fa6a 	bl	8000108 <__udivsi3>
 8001c34:	0003      	movs	r3, r0
 8001c36:	001a      	movs	r2, r3
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	4353      	muls	r3, r2
 8001c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8001c3e:	e01a      	b.n	8001c76 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c42:	23c0      	movs	r3, #192	; 0xc0
 8001c44:	025b      	lsls	r3, r3, #9
 8001c46:	401a      	ands	r2, r3
 8001c48:	23c0      	movs	r3, #192	; 0xc0
 8001c4a:	025b      	lsls	r3, r3, #9
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d109      	bne.n	8001c64 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c52:	4814      	ldr	r0, [pc, #80]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c54:	f7fe fa58 	bl	8000108 <__udivsi3>
 8001c58:	0003      	movs	r3, r0
 8001c5a:	001a      	movs	r2, r3
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5e:	4353      	muls	r3, r2
 8001c60:	637b      	str	r3, [r7, #52]	; 0x34
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c66:	480e      	ldr	r0, [pc, #56]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c68:	f7fe fa4e 	bl	8000108 <__udivsi3>
 8001c6c:	0003      	movs	r3, r0
 8001c6e:	001a      	movs	r2, r3
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	4353      	muls	r3, r2
 8001c74:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c78:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c7a:	e005      	b.n	8001c88 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001c7c:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c7e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c80:	e002      	b.n	8001c88 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c82:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c84:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c86:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	b00f      	add	sp, #60	; 0x3c
 8001c90:	bd90      	pop	{r4, r7, pc}
 8001c92:	46c0      	nop			; (mov r8, r8)
 8001c94:	0800382c 	.word	0x0800382c
 8001c98:	0800383c 	.word	0x0800383c
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	007a1200 	.word	0x007a1200
 8001ca4:	02dc6c00 	.word	0x02dc6c00

08001ca8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cac:	4b02      	ldr	r3, [pc, #8]	; (8001cb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cae:	681b      	ldr	r3, [r3, #0]
}
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	20000000 	.word	0x20000000

08001cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001cc0:	f7ff fff2 	bl	8001ca8 <HAL_RCC_GetHCLKFreq>
 8001cc4:	0001      	movs	r1, r0
 8001cc6:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	0a1b      	lsrs	r3, r3, #8
 8001ccc:	2207      	movs	r2, #7
 8001cce:	4013      	ands	r3, r2
 8001cd0:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cd2:	5cd3      	ldrb	r3, [r2, r3]
 8001cd4:	40d9      	lsrs	r1, r3
 8001cd6:	000b      	movs	r3, r1
}    
 8001cd8:	0018      	movs	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	08003888 	.word	0x08003888

08001ce8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	2380      	movs	r3, #128	; 0x80
 8001cfe:	025b      	lsls	r3, r3, #9
 8001d00:	4013      	ands	r3, r2
 8001d02:	d100      	bne.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001d04:	e08e      	b.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001d06:	2017      	movs	r0, #23
 8001d08:	183b      	adds	r3, r7, r0
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d0e:	4b6e      	ldr	r3, [pc, #440]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d10:	69da      	ldr	r2, [r3, #28]
 8001d12:	2380      	movs	r3, #128	; 0x80
 8001d14:	055b      	lsls	r3, r3, #21
 8001d16:	4013      	ands	r3, r2
 8001d18:	d110      	bne.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d1a:	4b6b      	ldr	r3, [pc, #428]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d1c:	69da      	ldr	r2, [r3, #28]
 8001d1e:	4b6a      	ldr	r3, [pc, #424]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d20:	2180      	movs	r1, #128	; 0x80
 8001d22:	0549      	lsls	r1, r1, #21
 8001d24:	430a      	orrs	r2, r1
 8001d26:	61da      	str	r2, [r3, #28]
 8001d28:	4b67      	ldr	r3, [pc, #412]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d2a:	69da      	ldr	r2, [r3, #28]
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	055b      	lsls	r3, r3, #21
 8001d30:	4013      	ands	r3, r2
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d36:	183b      	adds	r3, r7, r0
 8001d38:	2201      	movs	r2, #1
 8001d3a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3c:	4b63      	ldr	r3, [pc, #396]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	4013      	ands	r3, r2
 8001d46:	d11a      	bne.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d48:	4b60      	ldr	r3, [pc, #384]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4b5f      	ldr	r3, [pc, #380]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d4e:	2180      	movs	r1, #128	; 0x80
 8001d50:	0049      	lsls	r1, r1, #1
 8001d52:	430a      	orrs	r2, r1
 8001d54:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d56:	f7fe fed5 	bl	8000b04 <HAL_GetTick>
 8001d5a:	0003      	movs	r3, r0
 8001d5c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5e:	e008      	b.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d60:	f7fe fed0 	bl	8000b04 <HAL_GetTick>
 8001d64:	0002      	movs	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b64      	cmp	r3, #100	; 0x64
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e0a6      	b.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d72:	4b56      	ldr	r3, [pc, #344]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	2380      	movs	r3, #128	; 0x80
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d7e:	4b52      	ldr	r3, [pc, #328]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d80:	6a1a      	ldr	r2, [r3, #32]
 8001d82:	23c0      	movs	r3, #192	; 0xc0
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4013      	ands	r3, r2
 8001d88:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d034      	beq.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	23c0      	movs	r3, #192	; 0xc0
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4013      	ands	r3, r2
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d02c      	beq.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001da0:	4b49      	ldr	r3, [pc, #292]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	4a4a      	ldr	r2, [pc, #296]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001da6:	4013      	ands	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001daa:	4b47      	ldr	r3, [pc, #284]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001dac:	6a1a      	ldr	r2, [r3, #32]
 8001dae:	4b46      	ldr	r3, [pc, #280]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001db0:	2180      	movs	r1, #128	; 0x80
 8001db2:	0249      	lsls	r1, r1, #9
 8001db4:	430a      	orrs	r2, r1
 8001db6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001db8:	4b43      	ldr	r3, [pc, #268]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001dba:	6a1a      	ldr	r2, [r3, #32]
 8001dbc:	4b42      	ldr	r3, [pc, #264]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001dbe:	4945      	ldr	r1, [pc, #276]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001dc0:	400a      	ands	r2, r1
 8001dc2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001dc4:	4b40      	ldr	r3, [pc, #256]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	4013      	ands	r3, r2
 8001dd0:	d013      	beq.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd2:	f7fe fe97 	bl	8000b04 <HAL_GetTick>
 8001dd6:	0003      	movs	r3, r0
 8001dd8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dda:	e009      	b.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ddc:	f7fe fe92 	bl	8000b04 <HAL_GetTick>
 8001de0:	0002      	movs	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	4a3c      	ldr	r2, [pc, #240]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e067      	b.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df0:	4b35      	ldr	r3, [pc, #212]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	2202      	movs	r2, #2
 8001df6:	4013      	ands	r3, r2
 8001df8:	d0f0      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dfa:	4b33      	ldr	r3, [pc, #204]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	4a34      	ldr	r2, [pc, #208]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001e00:	4013      	ands	r3, r2
 8001e02:	0019      	movs	r1, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	4b2f      	ldr	r3, [pc, #188]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e0e:	2317      	movs	r3, #23
 8001e10:	18fb      	adds	r3, r7, r3
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d105      	bne.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e18:	4b2b      	ldr	r3, [pc, #172]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e1a:	69da      	ldr	r2, [r3, #28]
 8001e1c:	4b2a      	ldr	r3, [pc, #168]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e1e:	492f      	ldr	r1, [pc, #188]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001e20:	400a      	ands	r2, r1
 8001e22:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d009      	beq.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e2e:	4b26      	ldr	r3, [pc, #152]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	2203      	movs	r2, #3
 8001e34:	4393      	bics	r3, r2
 8001e36:	0019      	movs	r1, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	4b22      	ldr	r3, [pc, #136]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2202      	movs	r2, #2
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d009      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e4c:	4b1e      	ldr	r3, [pc, #120]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e50:	4a23      	ldr	r2, [pc, #140]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e52:	4013      	ands	r3, r2
 8001e54:	0019      	movs	r1, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68da      	ldr	r2, [r3, #12]
 8001e5a:	4b1b      	ldr	r3, [pc, #108]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2220      	movs	r2, #32
 8001e66:	4013      	ands	r3, r2
 8001e68:	d009      	beq.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e6a:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	2210      	movs	r2, #16
 8001e70:	4393      	bics	r3, r2
 8001e72:	0019      	movs	r1, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	2380      	movs	r3, #128	; 0x80
 8001e84:	029b      	lsls	r3, r3, #10
 8001e86:	4013      	ands	r3, r2
 8001e88:	d009      	beq.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	2280      	movs	r2, #128	; 0x80
 8001e90:	4393      	bics	r3, r2
 8001e92:	0019      	movs	r1, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	699a      	ldr	r2, [r3, #24]
 8001e98:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	2380      	movs	r3, #128	; 0x80
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d009      	beq.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001eaa:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	2240      	movs	r2, #64	; 0x40
 8001eb0:	4393      	bics	r3, r2
 8001eb2:	0019      	movs	r1, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	695a      	ldr	r2, [r3, #20]
 8001eb8:	4b03      	ldr	r3, [pc, #12]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	b006      	add	sp, #24
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	40007000 	.word	0x40007000
 8001ed0:	fffffcff 	.word	0xfffffcff
 8001ed4:	fffeffff 	.word	0xfffeffff
 8001ed8:	00001388 	.word	0x00001388
 8001edc:	efffffff 	.word	0xefffffff
 8001ee0:	fffcffff 	.word	0xfffcffff

08001ee4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e044      	b.n	8001f80 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d107      	bne.n	8001f0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2274      	movs	r2, #116	; 0x74
 8001f02:	2100      	movs	r1, #0
 8001f04:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f7fe fc75 	bl	80007f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2224      	movs	r2, #36	; 0x24
 8001f12:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2101      	movs	r1, #1
 8001f20:	438a      	bics	r2, r1
 8001f22:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	0018      	movs	r0, r3
 8001f28:	f000 fcbe 	bl	80028a8 <UART_SetConfig>
 8001f2c:	0003      	movs	r3, r0
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d101      	bne.n	8001f36 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e024      	b.n	8001f80 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	0018      	movs	r0, r3
 8001f42:	f000 fe39 	bl	8002bb8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	490d      	ldr	r1, [pc, #52]	; (8001f88 <HAL_UART_Init+0xa4>)
 8001f52:	400a      	ands	r2, r1
 8001f54:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	212a      	movs	r1, #42	; 0x2a
 8001f62:	438a      	bics	r2, r1
 8001f64:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2101      	movs	r1, #1
 8001f72:	430a      	orrs	r2, r1
 8001f74:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	0018      	movs	r0, r3
 8001f7a:	f000 fed1 	bl	8002d20 <UART_CheckIdleState>
 8001f7e:	0003      	movs	r3, r0
}
 8001f80:	0018      	movs	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	b002      	add	sp, #8
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	ffffb7ff 	.word	0xffffb7ff

08001f8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08a      	sub	sp, #40	; 0x28
 8001f90:	af02      	add	r7, sp, #8
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	603b      	str	r3, [r7, #0]
 8001f98:	1dbb      	adds	r3, r7, #6
 8001f9a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001fa0:	2b20      	cmp	r3, #32
 8001fa2:	d000      	beq.n	8001fa6 <HAL_UART_Transmit+0x1a>
 8001fa4:	e096      	b.n	80020d4 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <HAL_UART_Transmit+0x28>
 8001fac:	1dbb      	adds	r3, r7, #6
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e08e      	b.n	80020d6 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	2380      	movs	r3, #128	; 0x80
 8001fbe:	015b      	lsls	r3, r3, #5
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d109      	bne.n	8001fd8 <HAL_UART_Transmit+0x4c>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d105      	bne.n	8001fd8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d001      	beq.n	8001fd8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e07e      	b.n	80020d6 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2274      	movs	r2, #116	; 0x74
 8001fdc:	5c9b      	ldrb	r3, [r3, r2]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_UART_Transmit+0x5a>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e077      	b.n	80020d6 <HAL_UART_Transmit+0x14a>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2274      	movs	r2, #116	; 0x74
 8001fea:	2101      	movs	r1, #1
 8001fec:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2280      	movs	r2, #128	; 0x80
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2221      	movs	r2, #33	; 0x21
 8001ffa:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ffc:	f7fe fd82 	bl	8000b04 <HAL_GetTick>
 8002000:	0003      	movs	r3, r0
 8002002:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	1dba      	adds	r2, r7, #6
 8002008:	2150      	movs	r1, #80	; 0x50
 800200a:	8812      	ldrh	r2, [r2, #0]
 800200c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	1dba      	adds	r2, r7, #6
 8002012:	2152      	movs	r1, #82	; 0x52
 8002014:	8812      	ldrh	r2, [r2, #0]
 8002016:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	2380      	movs	r3, #128	; 0x80
 800201e:	015b      	lsls	r3, r3, #5
 8002020:	429a      	cmp	r2, r3
 8002022:	d108      	bne.n	8002036 <HAL_UART_Transmit+0xaa>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d104      	bne.n	8002036 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800202c:	2300      	movs	r3, #0
 800202e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	61bb      	str	r3, [r7, #24]
 8002034:	e003      	b.n	800203e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800203a:	2300      	movs	r3, #0
 800203c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2274      	movs	r2, #116	; 0x74
 8002042:	2100      	movs	r1, #0
 8002044:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002046:	e02d      	b.n	80020a4 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	0013      	movs	r3, r2
 8002052:	2200      	movs	r2, #0
 8002054:	2180      	movs	r1, #128	; 0x80
 8002056:	f000 feab 	bl	8002db0 <UART_WaitOnFlagUntilTimeout>
 800205a:	1e03      	subs	r3, r0, #0
 800205c:	d001      	beq.n	8002062 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e039      	b.n	80020d6 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10b      	bne.n	8002080 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	881a      	ldrh	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	05d2      	lsls	r2, r2, #23
 8002072:	0dd2      	lsrs	r2, r2, #23
 8002074:	b292      	uxth	r2, r2
 8002076:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	3302      	adds	r3, #2
 800207c:	61bb      	str	r3, [r7, #24]
 800207e:	e008      	b.n	8002092 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	781a      	ldrb	r2, [r3, #0]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	b292      	uxth	r2, r2
 800208a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	3301      	adds	r3, #1
 8002090:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2252      	movs	r2, #82	; 0x52
 8002096:	5a9b      	ldrh	r3, [r3, r2]
 8002098:	b29b      	uxth	r3, r3
 800209a:	3b01      	subs	r3, #1
 800209c:	b299      	uxth	r1, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2252      	movs	r2, #82	; 0x52
 80020a2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2252      	movs	r2, #82	; 0x52
 80020a8:	5a9b      	ldrh	r3, [r3, r2]
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1cb      	bne.n	8002048 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	0013      	movs	r3, r2
 80020ba:	2200      	movs	r2, #0
 80020bc:	2140      	movs	r1, #64	; 0x40
 80020be:	f000 fe77 	bl	8002db0 <UART_WaitOnFlagUntilTimeout>
 80020c2:	1e03      	subs	r3, r0, #0
 80020c4:	d001      	beq.n	80020ca <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e005      	b.n	80020d6 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2220      	movs	r2, #32
 80020ce:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80020d0:	2300      	movs	r3, #0
 80020d2:	e000      	b.n	80020d6 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80020d4:	2302      	movs	r3, #2
  }
}
 80020d6:	0018      	movs	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	b008      	add	sp, #32
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08a      	sub	sp, #40	; 0x28
 80020e4:	af02      	add	r7, sp, #8
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	603b      	str	r3, [r7, #0]
 80020ec:	1dbb      	adds	r3, r7, #6
 80020ee:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020f4:	2b20      	cmp	r3, #32
 80020f6:	d000      	beq.n	80020fa <HAL_UART_Receive+0x1a>
 80020f8:	e0da      	b.n	80022b0 <HAL_UART_Receive+0x1d0>
  {
    if ((pData == NULL) || (Size == 0U))
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_UART_Receive+0x28>
 8002100:	1dbb      	adds	r3, r7, #6
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e0d2      	b.n	80022b2 <HAL_UART_Receive+0x1d2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	2380      	movs	r3, #128	; 0x80
 8002112:	015b      	lsls	r3, r3, #5
 8002114:	429a      	cmp	r2, r3
 8002116:	d109      	bne.n	800212c <HAL_UART_Receive+0x4c>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d105      	bne.n	800212c <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	2201      	movs	r2, #1
 8002124:	4013      	ands	r3, r2
 8002126:	d001      	beq.n	800212c <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e0c2      	b.n	80022b2 <HAL_UART_Receive+0x1d2>
      }
    }

    __HAL_LOCK(huart);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2274      	movs	r2, #116	; 0x74
 8002130:	5c9b      	ldrb	r3, [r3, r2]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d101      	bne.n	800213a <HAL_UART_Receive+0x5a>
 8002136:	2302      	movs	r3, #2
 8002138:	e0bb      	b.n	80022b2 <HAL_UART_Receive+0x1d2>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2274      	movs	r2, #116	; 0x74
 800213e:	2101      	movs	r1, #1
 8002140:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2280      	movs	r2, #128	; 0x80
 8002146:	2100      	movs	r1, #0
 8002148:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2222      	movs	r2, #34	; 0x22
 800214e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002156:	f7fe fcd5 	bl	8000b04 <HAL_GetTick>
 800215a:	0003      	movs	r3, r0
 800215c:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	1dba      	adds	r2, r7, #6
 8002162:	2158      	movs	r1, #88	; 0x58
 8002164:	8812      	ldrh	r2, [r2, #0]
 8002166:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	1dba      	adds	r2, r7, #6
 800216c:	215a      	movs	r1, #90	; 0x5a
 800216e:	8812      	ldrh	r2, [r2, #0]
 8002170:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	015b      	lsls	r3, r3, #5
 800217a:	429a      	cmp	r2, r3
 800217c:	d10d      	bne.n	800219a <HAL_UART_Receive+0xba>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d104      	bne.n	8002190 <HAL_UART_Receive+0xb0>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	225c      	movs	r2, #92	; 0x5c
 800218a:	494c      	ldr	r1, [pc, #304]	; (80022bc <HAL_UART_Receive+0x1dc>)
 800218c:	5299      	strh	r1, [r3, r2]
 800218e:	e02e      	b.n	80021ee <HAL_UART_Receive+0x10e>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	225c      	movs	r2, #92	; 0x5c
 8002194:	21ff      	movs	r1, #255	; 0xff
 8002196:	5299      	strh	r1, [r3, r2]
 8002198:	e029      	b.n	80021ee <HAL_UART_Receive+0x10e>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10d      	bne.n	80021be <HAL_UART_Receive+0xde>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d104      	bne.n	80021b4 <HAL_UART_Receive+0xd4>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	225c      	movs	r2, #92	; 0x5c
 80021ae:	21ff      	movs	r1, #255	; 0xff
 80021b0:	5299      	strh	r1, [r3, r2]
 80021b2:	e01c      	b.n	80021ee <HAL_UART_Receive+0x10e>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	225c      	movs	r2, #92	; 0x5c
 80021b8:	217f      	movs	r1, #127	; 0x7f
 80021ba:	5299      	strh	r1, [r3, r2]
 80021bc:	e017      	b.n	80021ee <HAL_UART_Receive+0x10e>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	2380      	movs	r3, #128	; 0x80
 80021c4:	055b      	lsls	r3, r3, #21
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d10d      	bne.n	80021e6 <HAL_UART_Receive+0x106>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d104      	bne.n	80021dc <HAL_UART_Receive+0xfc>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	225c      	movs	r2, #92	; 0x5c
 80021d6:	217f      	movs	r1, #127	; 0x7f
 80021d8:	5299      	strh	r1, [r3, r2]
 80021da:	e008      	b.n	80021ee <HAL_UART_Receive+0x10e>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	225c      	movs	r2, #92	; 0x5c
 80021e0:	213f      	movs	r1, #63	; 0x3f
 80021e2:	5299      	strh	r1, [r3, r2]
 80021e4:	e003      	b.n	80021ee <HAL_UART_Receive+0x10e>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	225c      	movs	r2, #92	; 0x5c
 80021ea:	2100      	movs	r1, #0
 80021ec:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80021ee:	2312      	movs	r3, #18
 80021f0:	18fb      	adds	r3, r7, r3
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	215c      	movs	r1, #92	; 0x5c
 80021f6:	5a52      	ldrh	r2, [r2, r1]
 80021f8:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	2380      	movs	r3, #128	; 0x80
 8002200:	015b      	lsls	r3, r3, #5
 8002202:	429a      	cmp	r2, r3
 8002204:	d108      	bne.n	8002218 <HAL_UART_Receive+0x138>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d104      	bne.n	8002218 <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	61bb      	str	r3, [r7, #24]
 8002216:	e003      	b.n	8002220 <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800221c:	2300      	movs	r3, #0
 800221e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2274      	movs	r2, #116	; 0x74
 8002224:	2100      	movs	r1, #0
 8002226:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002228:	e037      	b.n	800229a <HAL_UART_Receive+0x1ba>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	0013      	movs	r3, r2
 8002234:	2200      	movs	r2, #0
 8002236:	2120      	movs	r1, #32
 8002238:	f000 fdba 	bl	8002db0 <UART_WaitOnFlagUntilTimeout>
 800223c:	1e03      	subs	r3, r0, #0
 800223e:	d001      	beq.n	8002244 <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e036      	b.n	80022b2 <HAL_UART_Receive+0x1d2>
      }
      if (pdata8bits == NULL)
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10e      	bne.n	8002268 <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002250:	b29b      	uxth	r3, r3
 8002252:	2212      	movs	r2, #18
 8002254:	18ba      	adds	r2, r7, r2
 8002256:	8812      	ldrh	r2, [r2, #0]
 8002258:	4013      	ands	r3, r2
 800225a:	b29a      	uxth	r2, r3
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	3302      	adds	r3, #2
 8002264:	61bb      	str	r3, [r7, #24]
 8002266:	e00f      	b.n	8002288 <HAL_UART_Receive+0x1a8>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800226e:	b29b      	uxth	r3, r3
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2212      	movs	r2, #18
 8002274:	18ba      	adds	r2, r7, r2
 8002276:	8812      	ldrh	r2, [r2, #0]
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	4013      	ands	r3, r2
 800227c:	b2da      	uxtb	r2, r3
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	3301      	adds	r3, #1
 8002286:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	225a      	movs	r2, #90	; 0x5a
 800228c:	5a9b      	ldrh	r3, [r3, r2]
 800228e:	b29b      	uxth	r3, r3
 8002290:	3b01      	subs	r3, #1
 8002292:	b299      	uxth	r1, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	225a      	movs	r2, #90	; 0x5a
 8002298:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	225a      	movs	r2, #90	; 0x5a
 800229e:	5a9b      	ldrh	r3, [r3, r2]
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1c1      	bne.n	800222a <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2220      	movs	r2, #32
 80022aa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80022ac:	2300      	movs	r3, #0
 80022ae:	e000      	b.n	80022b2 <HAL_UART_Receive+0x1d2>
  }
  else
  {
    return HAL_BUSY;
 80022b0:	2302      	movs	r3, #2
  }
}
 80022b2:	0018      	movs	r0, r3
 80022b4:	46bd      	mov	sp, r7
 80022b6:	b008      	add	sp, #32
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	000001ff 	.word	0x000001ff

080022c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80022c0:	b590      	push	{r4, r7, lr}
 80022c2:	b0ab      	sub	sp, #172	; 0xac
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	22a4      	movs	r2, #164	; 0xa4
 80022d0:	18b9      	adds	r1, r7, r2
 80022d2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	20a0      	movs	r0, #160	; 0xa0
 80022dc:	1839      	adds	r1, r7, r0
 80022de:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	219c      	movs	r1, #156	; 0x9c
 80022e8:	1879      	adds	r1, r7, r1
 80022ea:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80022ec:	0011      	movs	r1, r2
 80022ee:	18bb      	adds	r3, r7, r2
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a99      	ldr	r2, [pc, #612]	; (8002558 <HAL_UART_IRQHandler+0x298>)
 80022f4:	4013      	ands	r3, r2
 80022f6:	2298      	movs	r2, #152	; 0x98
 80022f8:	18bc      	adds	r4, r7, r2
 80022fa:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80022fc:	18bb      	adds	r3, r7, r2
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d114      	bne.n	800232e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002304:	187b      	adds	r3, r7, r1
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2220      	movs	r2, #32
 800230a:	4013      	ands	r3, r2
 800230c:	d00f      	beq.n	800232e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800230e:	183b      	adds	r3, r7, r0
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2220      	movs	r2, #32
 8002314:	4013      	ands	r3, r2
 8002316:	d00a      	beq.n	800232e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800231c:	2b00      	cmp	r3, #0
 800231e:	d100      	bne.n	8002322 <HAL_UART_IRQHandler+0x62>
 8002320:	e296      	b.n	8002850 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	0010      	movs	r0, r2
 800232a:	4798      	blx	r3
      }
      return;
 800232c:	e290      	b.n	8002850 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800232e:	2398      	movs	r3, #152	; 0x98
 8002330:	18fb      	adds	r3, r7, r3
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d100      	bne.n	800233a <HAL_UART_IRQHandler+0x7a>
 8002338:	e114      	b.n	8002564 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800233a:	239c      	movs	r3, #156	; 0x9c
 800233c:	18fb      	adds	r3, r7, r3
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2201      	movs	r2, #1
 8002342:	4013      	ands	r3, r2
 8002344:	d106      	bne.n	8002354 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002346:	23a0      	movs	r3, #160	; 0xa0
 8002348:	18fb      	adds	r3, r7, r3
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a83      	ldr	r2, [pc, #524]	; (800255c <HAL_UART_IRQHandler+0x29c>)
 800234e:	4013      	ands	r3, r2
 8002350:	d100      	bne.n	8002354 <HAL_UART_IRQHandler+0x94>
 8002352:	e107      	b.n	8002564 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002354:	23a4      	movs	r3, #164	; 0xa4
 8002356:	18fb      	adds	r3, r7, r3
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2201      	movs	r2, #1
 800235c:	4013      	ands	r3, r2
 800235e:	d012      	beq.n	8002386 <HAL_UART_IRQHandler+0xc6>
 8002360:	23a0      	movs	r3, #160	; 0xa0
 8002362:	18fb      	adds	r3, r7, r3
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	2380      	movs	r3, #128	; 0x80
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	4013      	ands	r3, r2
 800236c:	d00b      	beq.n	8002386 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2201      	movs	r2, #1
 8002374:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2280      	movs	r2, #128	; 0x80
 800237a:	589b      	ldr	r3, [r3, r2]
 800237c:	2201      	movs	r2, #1
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2180      	movs	r1, #128	; 0x80
 8002384:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002386:	23a4      	movs	r3, #164	; 0xa4
 8002388:	18fb      	adds	r3, r7, r3
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2202      	movs	r2, #2
 800238e:	4013      	ands	r3, r2
 8002390:	d011      	beq.n	80023b6 <HAL_UART_IRQHandler+0xf6>
 8002392:	239c      	movs	r3, #156	; 0x9c
 8002394:	18fb      	adds	r3, r7, r3
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2201      	movs	r2, #1
 800239a:	4013      	ands	r3, r2
 800239c:	d00b      	beq.n	80023b6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2202      	movs	r2, #2
 80023a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2280      	movs	r2, #128	; 0x80
 80023aa:	589b      	ldr	r3, [r3, r2]
 80023ac:	2204      	movs	r2, #4
 80023ae:	431a      	orrs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2180      	movs	r1, #128	; 0x80
 80023b4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80023b6:	23a4      	movs	r3, #164	; 0xa4
 80023b8:	18fb      	adds	r3, r7, r3
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2204      	movs	r2, #4
 80023be:	4013      	ands	r3, r2
 80023c0:	d011      	beq.n	80023e6 <HAL_UART_IRQHandler+0x126>
 80023c2:	239c      	movs	r3, #156	; 0x9c
 80023c4:	18fb      	adds	r3, r7, r3
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2201      	movs	r2, #1
 80023ca:	4013      	ands	r3, r2
 80023cc:	d00b      	beq.n	80023e6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2204      	movs	r2, #4
 80023d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2280      	movs	r2, #128	; 0x80
 80023da:	589b      	ldr	r3, [r3, r2]
 80023dc:	2202      	movs	r2, #2
 80023de:	431a      	orrs	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2180      	movs	r1, #128	; 0x80
 80023e4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80023e6:	23a4      	movs	r3, #164	; 0xa4
 80023e8:	18fb      	adds	r3, r7, r3
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2208      	movs	r2, #8
 80023ee:	4013      	ands	r3, r2
 80023f0:	d017      	beq.n	8002422 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80023f2:	23a0      	movs	r3, #160	; 0xa0
 80023f4:	18fb      	adds	r3, r7, r3
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2220      	movs	r2, #32
 80023fa:	4013      	ands	r3, r2
 80023fc:	d105      	bne.n	800240a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80023fe:	239c      	movs	r3, #156	; 0x9c
 8002400:	18fb      	adds	r3, r7, r3
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2201      	movs	r2, #1
 8002406:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002408:	d00b      	beq.n	8002422 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2208      	movs	r2, #8
 8002410:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2280      	movs	r2, #128	; 0x80
 8002416:	589b      	ldr	r3, [r3, r2]
 8002418:	2208      	movs	r2, #8
 800241a:	431a      	orrs	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2180      	movs	r1, #128	; 0x80
 8002420:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002422:	23a4      	movs	r3, #164	; 0xa4
 8002424:	18fb      	adds	r3, r7, r3
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	2380      	movs	r3, #128	; 0x80
 800242a:	011b      	lsls	r3, r3, #4
 800242c:	4013      	ands	r3, r2
 800242e:	d013      	beq.n	8002458 <HAL_UART_IRQHandler+0x198>
 8002430:	23a0      	movs	r3, #160	; 0xa0
 8002432:	18fb      	adds	r3, r7, r3
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	2380      	movs	r3, #128	; 0x80
 8002438:	04db      	lsls	r3, r3, #19
 800243a:	4013      	ands	r3, r2
 800243c:	d00c      	beq.n	8002458 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2280      	movs	r2, #128	; 0x80
 8002444:	0112      	lsls	r2, r2, #4
 8002446:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2280      	movs	r2, #128	; 0x80
 800244c:	589b      	ldr	r3, [r3, r2]
 800244e:	2220      	movs	r2, #32
 8002450:	431a      	orrs	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2180      	movs	r1, #128	; 0x80
 8002456:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2280      	movs	r2, #128	; 0x80
 800245c:	589b      	ldr	r3, [r3, r2]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d100      	bne.n	8002464 <HAL_UART_IRQHandler+0x1a4>
 8002462:	e1f7      	b.n	8002854 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002464:	23a4      	movs	r3, #164	; 0xa4
 8002466:	18fb      	adds	r3, r7, r3
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2220      	movs	r2, #32
 800246c:	4013      	ands	r3, r2
 800246e:	d00e      	beq.n	800248e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002470:	23a0      	movs	r3, #160	; 0xa0
 8002472:	18fb      	adds	r3, r7, r3
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2220      	movs	r2, #32
 8002478:	4013      	ands	r3, r2
 800247a:	d008      	beq.n	800248e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002480:	2b00      	cmp	r3, #0
 8002482:	d004      	beq.n	800248e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	0010      	movs	r0, r2
 800248c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	589b      	ldr	r3, [r3, r2]
 8002494:	2194      	movs	r1, #148	; 0x94
 8002496:	187a      	adds	r2, r7, r1
 8002498:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	2240      	movs	r2, #64	; 0x40
 80024a2:	4013      	ands	r3, r2
 80024a4:	2b40      	cmp	r3, #64	; 0x40
 80024a6:	d004      	beq.n	80024b2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80024a8:	187b      	adds	r3, r7, r1
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2228      	movs	r2, #40	; 0x28
 80024ae:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80024b0:	d047      	beq.n	8002542 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	0018      	movs	r0, r3
 80024b6:	f000 fd3f 	bl	8002f38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	2240      	movs	r2, #64	; 0x40
 80024c2:	4013      	ands	r3, r2
 80024c4:	2b40      	cmp	r3, #64	; 0x40
 80024c6:	d137      	bne.n	8002538 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024c8:	f3ef 8310 	mrs	r3, PRIMASK
 80024cc:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80024ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024d0:	2090      	movs	r0, #144	; 0x90
 80024d2:	183a      	adds	r2, r7, r0
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	2301      	movs	r3, #1
 80024d8:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024dc:	f383 8810 	msr	PRIMASK, r3
}
 80024e0:	46c0      	nop			; (mov r8, r8)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2140      	movs	r1, #64	; 0x40
 80024ee:	438a      	bics	r2, r1
 80024f0:	609a      	str	r2, [r3, #8]
 80024f2:	183b      	adds	r3, r7, r0
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024fa:	f383 8810 	msr	PRIMASK, r3
}
 80024fe:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002504:	2b00      	cmp	r3, #0
 8002506:	d012      	beq.n	800252e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250c:	4a14      	ldr	r2, [pc, #80]	; (8002560 <HAL_UART_IRQHandler+0x2a0>)
 800250e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002514:	0018      	movs	r0, r3
 8002516:	f7fe fd0c 	bl	8000f32 <HAL_DMA_Abort_IT>
 800251a:	1e03      	subs	r3, r0, #0
 800251c:	d01a      	beq.n	8002554 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002522:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002528:	0018      	movs	r0, r3
 800252a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800252c:	e012      	b.n	8002554 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	0018      	movs	r0, r3
 8002532:	f000 f9a5 	bl	8002880 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002536:	e00d      	b.n	8002554 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	0018      	movs	r0, r3
 800253c:	f000 f9a0 	bl	8002880 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002540:	e008      	b.n	8002554 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	0018      	movs	r0, r3
 8002546:	f000 f99b 	bl	8002880 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2280      	movs	r2, #128	; 0x80
 800254e:	2100      	movs	r1, #0
 8002550:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002552:	e17f      	b.n	8002854 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002554:	46c0      	nop			; (mov r8, r8)
    return;
 8002556:	e17d      	b.n	8002854 <HAL_UART_IRQHandler+0x594>
 8002558:	0000080f 	.word	0x0000080f
 800255c:	04000120 	.word	0x04000120
 8002560:	08002ffd 	.word	0x08002ffd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002568:	2b01      	cmp	r3, #1
 800256a:	d000      	beq.n	800256e <HAL_UART_IRQHandler+0x2ae>
 800256c:	e131      	b.n	80027d2 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800256e:	23a4      	movs	r3, #164	; 0xa4
 8002570:	18fb      	adds	r3, r7, r3
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2210      	movs	r2, #16
 8002576:	4013      	ands	r3, r2
 8002578:	d100      	bne.n	800257c <HAL_UART_IRQHandler+0x2bc>
 800257a:	e12a      	b.n	80027d2 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800257c:	23a0      	movs	r3, #160	; 0xa0
 800257e:	18fb      	adds	r3, r7, r3
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2210      	movs	r2, #16
 8002584:	4013      	ands	r3, r2
 8002586:	d100      	bne.n	800258a <HAL_UART_IRQHandler+0x2ca>
 8002588:	e123      	b.n	80027d2 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2210      	movs	r2, #16
 8002590:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	2240      	movs	r2, #64	; 0x40
 800259a:	4013      	ands	r3, r2
 800259c:	2b40      	cmp	r3, #64	; 0x40
 800259e:	d000      	beq.n	80025a2 <HAL_UART_IRQHandler+0x2e2>
 80025a0:	e09b      	b.n	80026da <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	217e      	movs	r1, #126	; 0x7e
 80025ac:	187b      	adds	r3, r7, r1
 80025ae:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80025b0:	187b      	adds	r3, r7, r1
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d100      	bne.n	80025ba <HAL_UART_IRQHandler+0x2fa>
 80025b8:	e14e      	b.n	8002858 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2258      	movs	r2, #88	; 0x58
 80025be:	5a9b      	ldrh	r3, [r3, r2]
 80025c0:	187a      	adds	r2, r7, r1
 80025c2:	8812      	ldrh	r2, [r2, #0]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d300      	bcc.n	80025ca <HAL_UART_IRQHandler+0x30a>
 80025c8:	e146      	b.n	8002858 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	187a      	adds	r2, r7, r1
 80025ce:	215a      	movs	r1, #90	; 0x5a
 80025d0:	8812      	ldrh	r2, [r2, #0]
 80025d2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	2b20      	cmp	r3, #32
 80025dc:	d06e      	beq.n	80026bc <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025de:	f3ef 8310 	mrs	r3, PRIMASK
 80025e2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80025e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025e6:	67bb      	str	r3, [r7, #120]	; 0x78
 80025e8:	2301      	movs	r3, #1
 80025ea:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ee:	f383 8810 	msr	PRIMASK, r3
}
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	499a      	ldr	r1, [pc, #616]	; (8002868 <HAL_UART_IRQHandler+0x5a8>)
 8002600:	400a      	ands	r2, r1
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002606:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800260a:	f383 8810 	msr	PRIMASK, r3
}
 800260e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002610:	f3ef 8310 	mrs	r3, PRIMASK
 8002614:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002618:	677b      	str	r3, [r7, #116]	; 0x74
 800261a:	2301      	movs	r3, #1
 800261c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800261e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002620:	f383 8810 	msr	PRIMASK, r3
}
 8002624:	46c0      	nop			; (mov r8, r8)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2101      	movs	r1, #1
 8002632:	438a      	bics	r2, r1
 8002634:	609a      	str	r2, [r3, #8]
 8002636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002638:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800263a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800263c:	f383 8810 	msr	PRIMASK, r3
}
 8002640:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002642:	f3ef 8310 	mrs	r3, PRIMASK
 8002646:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002648:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800264a:	673b      	str	r3, [r7, #112]	; 0x70
 800264c:	2301      	movs	r3, #1
 800264e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002652:	f383 8810 	msr	PRIMASK, r3
}
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2140      	movs	r1, #64	; 0x40
 8002664:	438a      	bics	r2, r1
 8002666:	609a      	str	r2, [r3, #8]
 8002668:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800266a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800266c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800266e:	f383 8810 	msr	PRIMASK, r3
}
 8002672:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2220      	movs	r2, #32
 8002678:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002680:	f3ef 8310 	mrs	r3, PRIMASK
 8002684:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002686:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002688:	66fb      	str	r3, [r7, #108]	; 0x6c
 800268a:	2301      	movs	r3, #1
 800268c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800268e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002690:	f383 8810 	msr	PRIMASK, r3
}
 8002694:	46c0      	nop			; (mov r8, r8)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2110      	movs	r1, #16
 80026a2:	438a      	bics	r2, r1
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026ac:	f383 8810 	msr	PRIMASK, r3
}
 80026b0:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b6:	0018      	movs	r0, r3
 80026b8:	f7fe fc03 	bl	8000ec2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2258      	movs	r2, #88	; 0x58
 80026c0:	5a9a      	ldrh	r2, [r3, r2]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	215a      	movs	r1, #90	; 0x5a
 80026c6:	5a5b      	ldrh	r3, [r3, r1]
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	0011      	movs	r1, r2
 80026d2:	0018      	movs	r0, r3
 80026d4:	f000 f8dc 	bl	8002890 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80026d8:	e0be      	b.n	8002858 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2258      	movs	r2, #88	; 0x58
 80026de:	5a99      	ldrh	r1, [r3, r2]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	225a      	movs	r2, #90	; 0x5a
 80026e4:	5a9b      	ldrh	r3, [r3, r2]
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	208e      	movs	r0, #142	; 0x8e
 80026ea:	183b      	adds	r3, r7, r0
 80026ec:	1a8a      	subs	r2, r1, r2
 80026ee:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	225a      	movs	r2, #90	; 0x5a
 80026f4:	5a9b      	ldrh	r3, [r3, r2]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d100      	bne.n	80026fe <HAL_UART_IRQHandler+0x43e>
 80026fc:	e0ae      	b.n	800285c <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80026fe:	183b      	adds	r3, r7, r0
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d100      	bne.n	8002708 <HAL_UART_IRQHandler+0x448>
 8002706:	e0a9      	b.n	800285c <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002708:	f3ef 8310 	mrs	r3, PRIMASK
 800270c:	60fb      	str	r3, [r7, #12]
  return(result);
 800270e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002710:	2488      	movs	r4, #136	; 0x88
 8002712:	193a      	adds	r2, r7, r4
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	2301      	movs	r3, #1
 8002718:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	f383 8810 	msr	PRIMASK, r3
}
 8002720:	46c0      	nop			; (mov r8, r8)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	494f      	ldr	r1, [pc, #316]	; (800286c <HAL_UART_IRQHandler+0x5ac>)
 800272e:	400a      	ands	r2, r1
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	193b      	adds	r3, r7, r4
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f383 8810 	msr	PRIMASK, r3
}
 800273e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002740:	f3ef 8310 	mrs	r3, PRIMASK
 8002744:	61bb      	str	r3, [r7, #24]
  return(result);
 8002746:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002748:	2484      	movs	r4, #132	; 0x84
 800274a:	193a      	adds	r2, r7, r4
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	2301      	movs	r3, #1
 8002750:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	f383 8810 	msr	PRIMASK, r3
}
 8002758:	46c0      	nop			; (mov r8, r8)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2101      	movs	r1, #1
 8002766:	438a      	bics	r2, r1
 8002768:	609a      	str	r2, [r3, #8]
 800276a:	193b      	adds	r3, r7, r4
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002770:	6a3b      	ldr	r3, [r7, #32]
 8002772:	f383 8810 	msr	PRIMASK, r3
}
 8002776:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2220      	movs	r2, #32
 800277c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800278a:	f3ef 8310 	mrs	r3, PRIMASK
 800278e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002792:	2480      	movs	r4, #128	; 0x80
 8002794:	193a      	adds	r2, r7, r4
 8002796:	6013      	str	r3, [r2, #0]
 8002798:	2301      	movs	r3, #1
 800279a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800279c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279e:	f383 8810 	msr	PRIMASK, r3
}
 80027a2:	46c0      	nop			; (mov r8, r8)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2110      	movs	r1, #16
 80027b0:	438a      	bics	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	193b      	adds	r3, r7, r4
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027bc:	f383 8810 	msr	PRIMASK, r3
}
 80027c0:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80027c2:	183b      	adds	r3, r7, r0
 80027c4:	881a      	ldrh	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	0011      	movs	r1, r2
 80027ca:	0018      	movs	r0, r3
 80027cc:	f000 f860 	bl	8002890 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80027d0:	e044      	b.n	800285c <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80027d2:	23a4      	movs	r3, #164	; 0xa4
 80027d4:	18fb      	adds	r3, r7, r3
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	2380      	movs	r3, #128	; 0x80
 80027da:	035b      	lsls	r3, r3, #13
 80027dc:	4013      	ands	r3, r2
 80027de:	d010      	beq.n	8002802 <HAL_UART_IRQHandler+0x542>
 80027e0:	239c      	movs	r3, #156	; 0x9c
 80027e2:	18fb      	adds	r3, r7, r3
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	2380      	movs	r3, #128	; 0x80
 80027e8:	03db      	lsls	r3, r3, #15
 80027ea:	4013      	ands	r3, r2
 80027ec:	d009      	beq.n	8002802 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2280      	movs	r2, #128	; 0x80
 80027f4:	0352      	lsls	r2, r2, #13
 80027f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	0018      	movs	r0, r3
 80027fc:	f000 fc40 	bl	8003080 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002800:	e02f      	b.n	8002862 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002802:	23a4      	movs	r3, #164	; 0xa4
 8002804:	18fb      	adds	r3, r7, r3
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2280      	movs	r2, #128	; 0x80
 800280a:	4013      	ands	r3, r2
 800280c:	d00f      	beq.n	800282e <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800280e:	23a0      	movs	r3, #160	; 0xa0
 8002810:	18fb      	adds	r3, r7, r3
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2280      	movs	r2, #128	; 0x80
 8002816:	4013      	ands	r3, r2
 8002818:	d009      	beq.n	800282e <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800281e:	2b00      	cmp	r3, #0
 8002820:	d01e      	beq.n	8002860 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	0010      	movs	r0, r2
 800282a:	4798      	blx	r3
    }
    return;
 800282c:	e018      	b.n	8002860 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800282e:	23a4      	movs	r3, #164	; 0xa4
 8002830:	18fb      	adds	r3, r7, r3
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2240      	movs	r2, #64	; 0x40
 8002836:	4013      	ands	r3, r2
 8002838:	d013      	beq.n	8002862 <HAL_UART_IRQHandler+0x5a2>
 800283a:	23a0      	movs	r3, #160	; 0xa0
 800283c:	18fb      	adds	r3, r7, r3
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2240      	movs	r2, #64	; 0x40
 8002842:	4013      	ands	r3, r2
 8002844:	d00d      	beq.n	8002862 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	0018      	movs	r0, r3
 800284a:	f000 fbee 	bl	800302a <UART_EndTransmit_IT>
    return;
 800284e:	e008      	b.n	8002862 <HAL_UART_IRQHandler+0x5a2>
      return;
 8002850:	46c0      	nop			; (mov r8, r8)
 8002852:	e006      	b.n	8002862 <HAL_UART_IRQHandler+0x5a2>
    return;
 8002854:	46c0      	nop			; (mov r8, r8)
 8002856:	e004      	b.n	8002862 <HAL_UART_IRQHandler+0x5a2>
      return;
 8002858:	46c0      	nop			; (mov r8, r8)
 800285a:	e002      	b.n	8002862 <HAL_UART_IRQHandler+0x5a2>
      return;
 800285c:	46c0      	nop			; (mov r8, r8)
 800285e:	e000      	b.n	8002862 <HAL_UART_IRQHandler+0x5a2>
    return;
 8002860:	46c0      	nop			; (mov r8, r8)
  }

}
 8002862:	46bd      	mov	sp, r7
 8002864:	b02b      	add	sp, #172	; 0xac
 8002866:	bd90      	pop	{r4, r7, pc}
 8002868:	fffffeff 	.word	0xfffffeff
 800286c:	fffffedf 	.word	0xfffffedf

08002870 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002878:	46c0      	nop			; (mov r8, r8)
 800287a:	46bd      	mov	sp, r7
 800287c:	b002      	add	sp, #8
 800287e:	bd80      	pop	{r7, pc}

08002880 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002888:	46c0      	nop			; (mov r8, r8)
 800288a:	46bd      	mov	sp, r7
 800288c:	b002      	add	sp, #8
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	000a      	movs	r2, r1
 800289a:	1cbb      	adds	r3, r7, #2
 800289c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800289e:	46c0      	nop			; (mov r8, r8)
 80028a0:	46bd      	mov	sp, r7
 80028a2:	b002      	add	sp, #8
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b088      	sub	sp, #32
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028b0:	231e      	movs	r3, #30
 80028b2:	18fb      	adds	r3, r7, r3
 80028b4:	2200      	movs	r2, #0
 80028b6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	431a      	orrs	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	69db      	ldr	r3, [r3, #28]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4aaf      	ldr	r2, [pc, #700]	; (8002b94 <UART_SetConfig+0x2ec>)
 80028d8:	4013      	ands	r3, r2
 80028da:	0019      	movs	r1, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	4aaa      	ldr	r2, [pc, #680]	; (8002b98 <UART_SetConfig+0x2f0>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	0019      	movs	r1, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	4313      	orrs	r3, r2
 800290c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	4aa1      	ldr	r2, [pc, #644]	; (8002b9c <UART_SetConfig+0x2f4>)
 8002916:	4013      	ands	r3, r2
 8002918:	0019      	movs	r1, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	430a      	orrs	r2, r1
 8002922:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a9d      	ldr	r2, [pc, #628]	; (8002ba0 <UART_SetConfig+0x2f8>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d127      	bne.n	800297e <UART_SetConfig+0xd6>
 800292e:	4b9d      	ldr	r3, [pc, #628]	; (8002ba4 <UART_SetConfig+0x2fc>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	2203      	movs	r2, #3
 8002934:	4013      	ands	r3, r2
 8002936:	2b03      	cmp	r3, #3
 8002938:	d00d      	beq.n	8002956 <UART_SetConfig+0xae>
 800293a:	d81b      	bhi.n	8002974 <UART_SetConfig+0xcc>
 800293c:	2b02      	cmp	r3, #2
 800293e:	d014      	beq.n	800296a <UART_SetConfig+0xc2>
 8002940:	d818      	bhi.n	8002974 <UART_SetConfig+0xcc>
 8002942:	2b00      	cmp	r3, #0
 8002944:	d002      	beq.n	800294c <UART_SetConfig+0xa4>
 8002946:	2b01      	cmp	r3, #1
 8002948:	d00a      	beq.n	8002960 <UART_SetConfig+0xb8>
 800294a:	e013      	b.n	8002974 <UART_SetConfig+0xcc>
 800294c:	231f      	movs	r3, #31
 800294e:	18fb      	adds	r3, r7, r3
 8002950:	2200      	movs	r2, #0
 8002952:	701a      	strb	r2, [r3, #0]
 8002954:	e065      	b.n	8002a22 <UART_SetConfig+0x17a>
 8002956:	231f      	movs	r3, #31
 8002958:	18fb      	adds	r3, r7, r3
 800295a:	2202      	movs	r2, #2
 800295c:	701a      	strb	r2, [r3, #0]
 800295e:	e060      	b.n	8002a22 <UART_SetConfig+0x17a>
 8002960:	231f      	movs	r3, #31
 8002962:	18fb      	adds	r3, r7, r3
 8002964:	2204      	movs	r2, #4
 8002966:	701a      	strb	r2, [r3, #0]
 8002968:	e05b      	b.n	8002a22 <UART_SetConfig+0x17a>
 800296a:	231f      	movs	r3, #31
 800296c:	18fb      	adds	r3, r7, r3
 800296e:	2208      	movs	r2, #8
 8002970:	701a      	strb	r2, [r3, #0]
 8002972:	e056      	b.n	8002a22 <UART_SetConfig+0x17a>
 8002974:	231f      	movs	r3, #31
 8002976:	18fb      	adds	r3, r7, r3
 8002978:	2210      	movs	r2, #16
 800297a:	701a      	strb	r2, [r3, #0]
 800297c:	e051      	b.n	8002a22 <UART_SetConfig+0x17a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a89      	ldr	r2, [pc, #548]	; (8002ba8 <UART_SetConfig+0x300>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d134      	bne.n	80029f2 <UART_SetConfig+0x14a>
 8002988:	4b86      	ldr	r3, [pc, #536]	; (8002ba4 <UART_SetConfig+0x2fc>)
 800298a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800298c:	23c0      	movs	r3, #192	; 0xc0
 800298e:	029b      	lsls	r3, r3, #10
 8002990:	4013      	ands	r3, r2
 8002992:	22c0      	movs	r2, #192	; 0xc0
 8002994:	0292      	lsls	r2, r2, #10
 8002996:	4293      	cmp	r3, r2
 8002998:	d017      	beq.n	80029ca <UART_SetConfig+0x122>
 800299a:	22c0      	movs	r2, #192	; 0xc0
 800299c:	0292      	lsls	r2, r2, #10
 800299e:	4293      	cmp	r3, r2
 80029a0:	d822      	bhi.n	80029e8 <UART_SetConfig+0x140>
 80029a2:	2280      	movs	r2, #128	; 0x80
 80029a4:	0292      	lsls	r2, r2, #10
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d019      	beq.n	80029de <UART_SetConfig+0x136>
 80029aa:	2280      	movs	r2, #128	; 0x80
 80029ac:	0292      	lsls	r2, r2, #10
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d81a      	bhi.n	80029e8 <UART_SetConfig+0x140>
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d004      	beq.n	80029c0 <UART_SetConfig+0x118>
 80029b6:	2280      	movs	r2, #128	; 0x80
 80029b8:	0252      	lsls	r2, r2, #9
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d00a      	beq.n	80029d4 <UART_SetConfig+0x12c>
 80029be:	e013      	b.n	80029e8 <UART_SetConfig+0x140>
 80029c0:	231f      	movs	r3, #31
 80029c2:	18fb      	adds	r3, r7, r3
 80029c4:	2200      	movs	r2, #0
 80029c6:	701a      	strb	r2, [r3, #0]
 80029c8:	e02b      	b.n	8002a22 <UART_SetConfig+0x17a>
 80029ca:	231f      	movs	r3, #31
 80029cc:	18fb      	adds	r3, r7, r3
 80029ce:	2202      	movs	r2, #2
 80029d0:	701a      	strb	r2, [r3, #0]
 80029d2:	e026      	b.n	8002a22 <UART_SetConfig+0x17a>
 80029d4:	231f      	movs	r3, #31
 80029d6:	18fb      	adds	r3, r7, r3
 80029d8:	2204      	movs	r2, #4
 80029da:	701a      	strb	r2, [r3, #0]
 80029dc:	e021      	b.n	8002a22 <UART_SetConfig+0x17a>
 80029de:	231f      	movs	r3, #31
 80029e0:	18fb      	adds	r3, r7, r3
 80029e2:	2208      	movs	r2, #8
 80029e4:	701a      	strb	r2, [r3, #0]
 80029e6:	e01c      	b.n	8002a22 <UART_SetConfig+0x17a>
 80029e8:	231f      	movs	r3, #31
 80029ea:	18fb      	adds	r3, r7, r3
 80029ec:	2210      	movs	r2, #16
 80029ee:	701a      	strb	r2, [r3, #0]
 80029f0:	e017      	b.n	8002a22 <UART_SetConfig+0x17a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a6d      	ldr	r2, [pc, #436]	; (8002bac <UART_SetConfig+0x304>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d104      	bne.n	8002a06 <UART_SetConfig+0x15e>
 80029fc:	231f      	movs	r3, #31
 80029fe:	18fb      	adds	r3, r7, r3
 8002a00:	2200      	movs	r2, #0
 8002a02:	701a      	strb	r2, [r3, #0]
 8002a04:	e00d      	b.n	8002a22 <UART_SetConfig+0x17a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a69      	ldr	r2, [pc, #420]	; (8002bb0 <UART_SetConfig+0x308>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d104      	bne.n	8002a1a <UART_SetConfig+0x172>
 8002a10:	231f      	movs	r3, #31
 8002a12:	18fb      	adds	r3, r7, r3
 8002a14:	2200      	movs	r2, #0
 8002a16:	701a      	strb	r2, [r3, #0]
 8002a18:	e003      	b.n	8002a22 <UART_SetConfig+0x17a>
 8002a1a:	231f      	movs	r3, #31
 8002a1c:	18fb      	adds	r3, r7, r3
 8002a1e:	2210      	movs	r2, #16
 8002a20:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	69da      	ldr	r2, [r3, #28]
 8002a26:	2380      	movs	r3, #128	; 0x80
 8002a28:	021b      	lsls	r3, r3, #8
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d15d      	bne.n	8002aea <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8002a2e:	231f      	movs	r3, #31
 8002a30:	18fb      	adds	r3, r7, r3
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d015      	beq.n	8002a64 <UART_SetConfig+0x1bc>
 8002a38:	dc18      	bgt.n	8002a6c <UART_SetConfig+0x1c4>
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	d00d      	beq.n	8002a5a <UART_SetConfig+0x1b2>
 8002a3e:	dc15      	bgt.n	8002a6c <UART_SetConfig+0x1c4>
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d002      	beq.n	8002a4a <UART_SetConfig+0x1a2>
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d005      	beq.n	8002a54 <UART_SetConfig+0x1ac>
 8002a48:	e010      	b.n	8002a6c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a4a:	f7ff f937 	bl	8001cbc <HAL_RCC_GetPCLK1Freq>
 8002a4e:	0003      	movs	r3, r0
 8002a50:	61bb      	str	r3, [r7, #24]
        break;
 8002a52:	e012      	b.n	8002a7a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a54:	4b57      	ldr	r3, [pc, #348]	; (8002bb4 <UART_SetConfig+0x30c>)
 8002a56:	61bb      	str	r3, [r7, #24]
        break;
 8002a58:	e00f      	b.n	8002a7a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a5a:	f7ff f8a5 	bl	8001ba8 <HAL_RCC_GetSysClockFreq>
 8002a5e:	0003      	movs	r3, r0
 8002a60:	61bb      	str	r3, [r7, #24]
        break;
 8002a62:	e00a      	b.n	8002a7a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a64:	2380      	movs	r3, #128	; 0x80
 8002a66:	021b      	lsls	r3, r3, #8
 8002a68:	61bb      	str	r3, [r7, #24]
        break;
 8002a6a:	e006      	b.n	8002a7a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a70:	231e      	movs	r3, #30
 8002a72:	18fb      	adds	r3, r7, r3
 8002a74:	2201      	movs	r2, #1
 8002a76:	701a      	strb	r2, [r3, #0]
        break;
 8002a78:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d100      	bne.n	8002a82 <UART_SetConfig+0x1da>
 8002a80:	e07b      	b.n	8002b7a <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	005a      	lsls	r2, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	085b      	lsrs	r3, r3, #1
 8002a8c:	18d2      	adds	r2, r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	0019      	movs	r1, r3
 8002a94:	0010      	movs	r0, r2
 8002a96:	f7fd fb37 	bl	8000108 <__udivsi3>
 8002a9a:	0003      	movs	r3, r0
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	2b0f      	cmp	r3, #15
 8002aa4:	d91c      	bls.n	8002ae0 <UART_SetConfig+0x238>
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	2380      	movs	r3, #128	; 0x80
 8002aaa:	025b      	lsls	r3, r3, #9
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d217      	bcs.n	8002ae0 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	200e      	movs	r0, #14
 8002ab6:	183b      	adds	r3, r7, r0
 8002ab8:	210f      	movs	r1, #15
 8002aba:	438a      	bics	r2, r1
 8002abc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	085b      	lsrs	r3, r3, #1
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	2207      	movs	r2, #7
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	b299      	uxth	r1, r3
 8002aca:	183b      	adds	r3, r7, r0
 8002acc:	183a      	adds	r2, r7, r0
 8002ace:	8812      	ldrh	r2, [r2, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	183a      	adds	r2, r7, r0
 8002ada:	8812      	ldrh	r2, [r2, #0]
 8002adc:	60da      	str	r2, [r3, #12]
 8002ade:	e04c      	b.n	8002b7a <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8002ae0:	231e      	movs	r3, #30
 8002ae2:	18fb      	adds	r3, r7, r3
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	701a      	strb	r2, [r3, #0]
 8002ae8:	e047      	b.n	8002b7a <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002aea:	231f      	movs	r3, #31
 8002aec:	18fb      	adds	r3, r7, r3
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b08      	cmp	r3, #8
 8002af2:	d015      	beq.n	8002b20 <UART_SetConfig+0x278>
 8002af4:	dc18      	bgt.n	8002b28 <UART_SetConfig+0x280>
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d00d      	beq.n	8002b16 <UART_SetConfig+0x26e>
 8002afa:	dc15      	bgt.n	8002b28 <UART_SetConfig+0x280>
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d002      	beq.n	8002b06 <UART_SetConfig+0x25e>
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d005      	beq.n	8002b10 <UART_SetConfig+0x268>
 8002b04:	e010      	b.n	8002b28 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b06:	f7ff f8d9 	bl	8001cbc <HAL_RCC_GetPCLK1Freq>
 8002b0a:	0003      	movs	r3, r0
 8002b0c:	61bb      	str	r3, [r7, #24]
        break;
 8002b0e:	e012      	b.n	8002b36 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b10:	4b28      	ldr	r3, [pc, #160]	; (8002bb4 <UART_SetConfig+0x30c>)
 8002b12:	61bb      	str	r3, [r7, #24]
        break;
 8002b14:	e00f      	b.n	8002b36 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b16:	f7ff f847 	bl	8001ba8 <HAL_RCC_GetSysClockFreq>
 8002b1a:	0003      	movs	r3, r0
 8002b1c:	61bb      	str	r3, [r7, #24]
        break;
 8002b1e:	e00a      	b.n	8002b36 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b20:	2380      	movs	r3, #128	; 0x80
 8002b22:	021b      	lsls	r3, r3, #8
 8002b24:	61bb      	str	r3, [r7, #24]
        break;
 8002b26:	e006      	b.n	8002b36 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b2c:	231e      	movs	r3, #30
 8002b2e:	18fb      	adds	r3, r7, r3
 8002b30:	2201      	movs	r2, #1
 8002b32:	701a      	strb	r2, [r3, #0]
        break;
 8002b34:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d01e      	beq.n	8002b7a <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	085a      	lsrs	r2, r3, #1
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	18d2      	adds	r2, r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	0019      	movs	r1, r3
 8002b4c:	0010      	movs	r0, r2
 8002b4e:	f7fd fadb 	bl	8000108 <__udivsi3>
 8002b52:	0003      	movs	r3, r0
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	2b0f      	cmp	r3, #15
 8002b5c:	d909      	bls.n	8002b72 <UART_SetConfig+0x2ca>
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	2380      	movs	r3, #128	; 0x80
 8002b62:	025b      	lsls	r3, r3, #9
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d204      	bcs.n	8002b72 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	60da      	str	r2, [r3, #12]
 8002b70:	e003      	b.n	8002b7a <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8002b72:	231e      	movs	r3, #30
 8002b74:	18fb      	adds	r3, r7, r3
 8002b76:	2201      	movs	r2, #1
 8002b78:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002b86:	231e      	movs	r3, #30
 8002b88:	18fb      	adds	r3, r7, r3
 8002b8a:	781b      	ldrb	r3, [r3, #0]
}
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	b008      	add	sp, #32
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	efff69f3 	.word	0xefff69f3
 8002b98:	ffffcfff 	.word	0xffffcfff
 8002b9c:	fffff4ff 	.word	0xfffff4ff
 8002ba0:	40013800 	.word	0x40013800
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	40004400 	.word	0x40004400
 8002bac:	40004800 	.word	0x40004800
 8002bb0:	40004c00 	.word	0x40004c00
 8002bb4:	007a1200 	.word	0x007a1200

08002bb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	d00b      	beq.n	8002be2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	4a4a      	ldr	r2, [pc, #296]	; (8002cfc <UART_AdvFeatureConfig+0x144>)
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	0019      	movs	r1, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	2202      	movs	r2, #2
 8002be8:	4013      	ands	r3, r2
 8002bea:	d00b      	beq.n	8002c04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	4a43      	ldr	r2, [pc, #268]	; (8002d00 <UART_AdvFeatureConfig+0x148>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	0019      	movs	r1, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	2204      	movs	r2, #4
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	d00b      	beq.n	8002c26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	4a3b      	ldr	r2, [pc, #236]	; (8002d04 <UART_AdvFeatureConfig+0x14c>)
 8002c16:	4013      	ands	r3, r2
 8002c18:	0019      	movs	r1, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	2208      	movs	r2, #8
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d00b      	beq.n	8002c48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	4a34      	ldr	r2, [pc, #208]	; (8002d08 <UART_AdvFeatureConfig+0x150>)
 8002c38:	4013      	ands	r3, r2
 8002c3a:	0019      	movs	r1, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	430a      	orrs	r2, r1
 8002c46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4c:	2210      	movs	r2, #16
 8002c4e:	4013      	ands	r3, r2
 8002c50:	d00b      	beq.n	8002c6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	4a2c      	ldr	r2, [pc, #176]	; (8002d0c <UART_AdvFeatureConfig+0x154>)
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	0019      	movs	r1, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	2220      	movs	r2, #32
 8002c70:	4013      	ands	r3, r2
 8002c72:	d00b      	beq.n	8002c8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	4a25      	ldr	r2, [pc, #148]	; (8002d10 <UART_AdvFeatureConfig+0x158>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	0019      	movs	r1, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	2240      	movs	r2, #64	; 0x40
 8002c92:	4013      	ands	r3, r2
 8002c94:	d01d      	beq.n	8002cd2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	4a1d      	ldr	r2, [pc, #116]	; (8002d14 <UART_AdvFeatureConfig+0x15c>)
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	0019      	movs	r1, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cb2:	2380      	movs	r3, #128	; 0x80
 8002cb4:	035b      	lsls	r3, r3, #13
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d10b      	bne.n	8002cd2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	4a15      	ldr	r2, [pc, #84]	; (8002d18 <UART_AdvFeatureConfig+0x160>)
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	0019      	movs	r1, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd6:	2280      	movs	r2, #128	; 0x80
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d00b      	beq.n	8002cf4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	4a0e      	ldr	r2, [pc, #56]	; (8002d1c <UART_AdvFeatureConfig+0x164>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	0019      	movs	r1, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	605a      	str	r2, [r3, #4]
  }
}
 8002cf4:	46c0      	nop			; (mov r8, r8)
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b002      	add	sp, #8
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	fffdffff 	.word	0xfffdffff
 8002d00:	fffeffff 	.word	0xfffeffff
 8002d04:	fffbffff 	.word	0xfffbffff
 8002d08:	ffff7fff 	.word	0xffff7fff
 8002d0c:	ffffefff 	.word	0xffffefff
 8002d10:	ffffdfff 	.word	0xffffdfff
 8002d14:	ffefffff 	.word	0xffefffff
 8002d18:	ff9fffff 	.word	0xff9fffff
 8002d1c:	fff7ffff 	.word	0xfff7ffff

08002d20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af02      	add	r7, sp, #8
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2280      	movs	r2, #128	; 0x80
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d30:	f7fd fee8 	bl	8000b04 <HAL_GetTick>
 8002d34:	0003      	movs	r3, r0
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2208      	movs	r2, #8
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d10c      	bne.n	8002d60 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2280      	movs	r2, #128	; 0x80
 8002d4a:	0391      	lsls	r1, r2, #14
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	4a17      	ldr	r2, [pc, #92]	; (8002dac <UART_CheckIdleState+0x8c>)
 8002d50:	9200      	str	r2, [sp, #0]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f000 f82c 	bl	8002db0 <UART_WaitOnFlagUntilTimeout>
 8002d58:	1e03      	subs	r3, r0, #0
 8002d5a:	d001      	beq.n	8002d60 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e021      	b.n	8002da4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2204      	movs	r2, #4
 8002d68:	4013      	ands	r3, r2
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d10c      	bne.n	8002d88 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2280      	movs	r2, #128	; 0x80
 8002d72:	03d1      	lsls	r1, r2, #15
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	4a0d      	ldr	r2, [pc, #52]	; (8002dac <UART_CheckIdleState+0x8c>)
 8002d78:	9200      	str	r2, [sp, #0]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f000 f818 	bl	8002db0 <UART_WaitOnFlagUntilTimeout>
 8002d80:	1e03      	subs	r3, r0, #0
 8002d82:	d001      	beq.n	8002d88 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e00d      	b.n	8002da4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2220      	movs	r2, #32
 8002d92:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2274      	movs	r2, #116	; 0x74
 8002d9e:	2100      	movs	r1, #0
 8002da0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	0018      	movs	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b004      	add	sp, #16
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	01ffffff 	.word	0x01ffffff

08002db0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b094      	sub	sp, #80	; 0x50
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	603b      	str	r3, [r7, #0]
 8002dbc:	1dfb      	adds	r3, r7, #7
 8002dbe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dc0:	e0a3      	b.n	8002f0a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	d100      	bne.n	8002dca <UART_WaitOnFlagUntilTimeout+0x1a>
 8002dc8:	e09f      	b.n	8002f0a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dca:	f7fd fe9b 	bl	8000b04 <HAL_GetTick>
 8002dce:	0002      	movs	r2, r0
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d302      	bcc.n	8002de0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002dda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d13d      	bne.n	8002e5c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002de0:	f3ef 8310 	mrs	r3, PRIMASK
 8002de4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002de8:	647b      	str	r3, [r7, #68]	; 0x44
 8002dea:	2301      	movs	r3, #1
 8002dec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df0:	f383 8810 	msr	PRIMASK, r3
}
 8002df4:	46c0      	nop			; (mov r8, r8)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	494c      	ldr	r1, [pc, #304]	; (8002f34 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002e02:	400a      	ands	r2, r1
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e08:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0c:	f383 8810 	msr	PRIMASK, r3
}
 8002e10:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e12:	f3ef 8310 	mrs	r3, PRIMASK
 8002e16:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e1a:	643b      	str	r3, [r7, #64]	; 0x40
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e22:	f383 8810 	msr	PRIMASK, r3
}
 8002e26:	46c0      	nop			; (mov r8, r8)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2101      	movs	r1, #1
 8002e34:	438a      	bics	r2, r1
 8002e36:	609a      	str	r2, [r3, #8]
 8002e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e3e:	f383 8810 	msr	PRIMASK, r3
}
 8002e42:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2220      	movs	r2, #32
 8002e48:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2274      	movs	r2, #116	; 0x74
 8002e54:	2100      	movs	r1, #0
 8002e56:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e067      	b.n	8002f2c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2204      	movs	r2, #4
 8002e64:	4013      	ands	r3, r2
 8002e66:	d050      	beq.n	8002f0a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	69da      	ldr	r2, [r3, #28]
 8002e6e:	2380      	movs	r3, #128	; 0x80
 8002e70:	011b      	lsls	r3, r3, #4
 8002e72:	401a      	ands	r2, r3
 8002e74:	2380      	movs	r3, #128	; 0x80
 8002e76:	011b      	lsls	r3, r3, #4
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d146      	bne.n	8002f0a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2280      	movs	r2, #128	; 0x80
 8002e82:	0112      	lsls	r2, r2, #4
 8002e84:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e86:	f3ef 8310 	mrs	r3, PRIMASK
 8002e8a:	613b      	str	r3, [r7, #16]
  return(result);
 8002e8c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e90:	2301      	movs	r3, #1
 8002e92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	f383 8810 	msr	PRIMASK, r3
}
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4923      	ldr	r1, [pc, #140]	; (8002f34 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002ea8:	400a      	ands	r2, r1
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	f383 8810 	msr	PRIMASK, r3
}
 8002eb6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eb8:	f3ef 8310 	mrs	r3, PRIMASK
 8002ebc:	61fb      	str	r3, [r7, #28]
  return(result);
 8002ebe:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ec0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	f383 8810 	msr	PRIMASK, r3
}
 8002ecc:	46c0      	nop			; (mov r8, r8)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2101      	movs	r1, #1
 8002eda:	438a      	bics	r2, r1
 8002edc:	609a      	str	r2, [r3, #8]
 8002ede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	f383 8810 	msr	PRIMASK, r3
}
 8002ee8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2220      	movs	r2, #32
 8002eee:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2280      	movs	r2, #128	; 0x80
 8002efa:	2120      	movs	r1, #32
 8002efc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2274      	movs	r2, #116	; 0x74
 8002f02:	2100      	movs	r1, #0
 8002f04:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e010      	b.n	8002f2c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	69db      	ldr	r3, [r3, #28]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	4013      	ands	r3, r2
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	425a      	negs	r2, r3
 8002f1a:	4153      	adcs	r3, r2
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	001a      	movs	r2, r3
 8002f20:	1dfb      	adds	r3, r7, #7
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d100      	bne.n	8002f2a <UART_WaitOnFlagUntilTimeout+0x17a>
 8002f28:	e74b      	b.n	8002dc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	b014      	add	sp, #80	; 0x50
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	fffffe5f 	.word	0xfffffe5f

08002f38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08e      	sub	sp, #56	; 0x38
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f40:	f3ef 8310 	mrs	r3, PRIMASK
 8002f44:	617b      	str	r3, [r7, #20]
  return(result);
 8002f46:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f48:	637b      	str	r3, [r7, #52]	; 0x34
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	f383 8810 	msr	PRIMASK, r3
}
 8002f54:	46c0      	nop			; (mov r8, r8)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4925      	ldr	r1, [pc, #148]	; (8002ff8 <UART_EndRxTransfer+0xc0>)
 8002f62:	400a      	ands	r2, r1
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	f383 8810 	msr	PRIMASK, r3
}
 8002f70:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f72:	f3ef 8310 	mrs	r3, PRIMASK
 8002f76:	623b      	str	r3, [r7, #32]
  return(result);
 8002f78:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f7a:	633b      	str	r3, [r7, #48]	; 0x30
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	f383 8810 	msr	PRIMASK, r3
}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2101      	movs	r1, #1
 8002f94:	438a      	bics	r2, r1
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9e:	f383 8810 	msr	PRIMASK, r3
}
 8002fa2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d118      	bne.n	8002fde <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fac:	f3ef 8310 	mrs	r3, PRIMASK
 8002fb0:	60bb      	str	r3, [r7, #8]
  return(result);
 8002fb2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f383 8810 	msr	PRIMASK, r3
}
 8002fc0:	46c0      	nop			; (mov r8, r8)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2110      	movs	r1, #16
 8002fce:	438a      	bics	r2, r1
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	f383 8810 	msr	PRIMASK, r3
}
 8002fdc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002ff0:	46c0      	nop			; (mov r8, r8)
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	b00e      	add	sp, #56	; 0x38
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	fffffedf 	.word	0xfffffedf

08002ffc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	225a      	movs	r2, #90	; 0x5a
 800300e:	2100      	movs	r1, #0
 8003010:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2252      	movs	r2, #82	; 0x52
 8003016:	2100      	movs	r1, #0
 8003018:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	0018      	movs	r0, r3
 800301e:	f7ff fc2f 	bl	8002880 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	46bd      	mov	sp, r7
 8003026:	b004      	add	sp, #16
 8003028:	bd80      	pop	{r7, pc}

0800302a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b086      	sub	sp, #24
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003032:	f3ef 8310 	mrs	r3, PRIMASK
 8003036:	60bb      	str	r3, [r7, #8]
  return(result);
 8003038:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	2301      	movs	r3, #1
 800303e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f383 8810 	msr	PRIMASK, r3
}
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2140      	movs	r1, #64	; 0x40
 8003054:	438a      	bics	r2, r1
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	f383 8810 	msr	PRIMASK, r3
}
 8003062:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2220      	movs	r2, #32
 8003068:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	0018      	movs	r0, r3
 8003074:	f7ff fbfc 	bl	8002870 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003078:	46c0      	nop			; (mov r8, r8)
 800307a:	46bd      	mov	sp, r7
 800307c:	b006      	add	sp, #24
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003088:	46c0      	nop			; (mov r8, r8)
 800308a:	46bd      	mov	sp, r7
 800308c:	b002      	add	sp, #8
 800308e:	bd80      	pop	{r7, pc}

08003090 <__errno>:
 8003090:	4b01      	ldr	r3, [pc, #4]	; (8003098 <__errno+0x8>)
 8003092:	6818      	ldr	r0, [r3, #0]
 8003094:	4770      	bx	lr
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	2000000c 	.word	0x2000000c

0800309c <__sflush_r>:
 800309c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800309e:	898b      	ldrh	r3, [r1, #12]
 80030a0:	0005      	movs	r5, r0
 80030a2:	000c      	movs	r4, r1
 80030a4:	071a      	lsls	r2, r3, #28
 80030a6:	d45f      	bmi.n	8003168 <__sflush_r+0xcc>
 80030a8:	684a      	ldr	r2, [r1, #4]
 80030aa:	2a00      	cmp	r2, #0
 80030ac:	dc04      	bgt.n	80030b8 <__sflush_r+0x1c>
 80030ae:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80030b0:	2a00      	cmp	r2, #0
 80030b2:	dc01      	bgt.n	80030b8 <__sflush_r+0x1c>
 80030b4:	2000      	movs	r0, #0
 80030b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80030b8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80030ba:	2f00      	cmp	r7, #0
 80030bc:	d0fa      	beq.n	80030b4 <__sflush_r+0x18>
 80030be:	2200      	movs	r2, #0
 80030c0:	2180      	movs	r1, #128	; 0x80
 80030c2:	682e      	ldr	r6, [r5, #0]
 80030c4:	602a      	str	r2, [r5, #0]
 80030c6:	001a      	movs	r2, r3
 80030c8:	0149      	lsls	r1, r1, #5
 80030ca:	400a      	ands	r2, r1
 80030cc:	420b      	tst	r3, r1
 80030ce:	d034      	beq.n	800313a <__sflush_r+0x9e>
 80030d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80030d2:	89a3      	ldrh	r3, [r4, #12]
 80030d4:	075b      	lsls	r3, r3, #29
 80030d6:	d506      	bpl.n	80030e6 <__sflush_r+0x4a>
 80030d8:	6863      	ldr	r3, [r4, #4]
 80030da:	1ac0      	subs	r0, r0, r3
 80030dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <__sflush_r+0x4a>
 80030e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030e4:	1ac0      	subs	r0, r0, r3
 80030e6:	0002      	movs	r2, r0
 80030e8:	6a21      	ldr	r1, [r4, #32]
 80030ea:	2300      	movs	r3, #0
 80030ec:	0028      	movs	r0, r5
 80030ee:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80030f0:	47b8      	blx	r7
 80030f2:	89a1      	ldrh	r1, [r4, #12]
 80030f4:	1c43      	adds	r3, r0, #1
 80030f6:	d106      	bne.n	8003106 <__sflush_r+0x6a>
 80030f8:	682b      	ldr	r3, [r5, #0]
 80030fa:	2b1d      	cmp	r3, #29
 80030fc:	d831      	bhi.n	8003162 <__sflush_r+0xc6>
 80030fe:	4a2c      	ldr	r2, [pc, #176]	; (80031b0 <__sflush_r+0x114>)
 8003100:	40da      	lsrs	r2, r3
 8003102:	07d3      	lsls	r3, r2, #31
 8003104:	d52d      	bpl.n	8003162 <__sflush_r+0xc6>
 8003106:	2300      	movs	r3, #0
 8003108:	6063      	str	r3, [r4, #4]
 800310a:	6923      	ldr	r3, [r4, #16]
 800310c:	6023      	str	r3, [r4, #0]
 800310e:	04cb      	lsls	r3, r1, #19
 8003110:	d505      	bpl.n	800311e <__sflush_r+0x82>
 8003112:	1c43      	adds	r3, r0, #1
 8003114:	d102      	bne.n	800311c <__sflush_r+0x80>
 8003116:	682b      	ldr	r3, [r5, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d100      	bne.n	800311e <__sflush_r+0x82>
 800311c:	6560      	str	r0, [r4, #84]	; 0x54
 800311e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003120:	602e      	str	r6, [r5, #0]
 8003122:	2900      	cmp	r1, #0
 8003124:	d0c6      	beq.n	80030b4 <__sflush_r+0x18>
 8003126:	0023      	movs	r3, r4
 8003128:	3344      	adds	r3, #68	; 0x44
 800312a:	4299      	cmp	r1, r3
 800312c:	d002      	beq.n	8003134 <__sflush_r+0x98>
 800312e:	0028      	movs	r0, r5
 8003130:	f000 f9d2 	bl	80034d8 <_free_r>
 8003134:	2000      	movs	r0, #0
 8003136:	6360      	str	r0, [r4, #52]	; 0x34
 8003138:	e7bd      	b.n	80030b6 <__sflush_r+0x1a>
 800313a:	2301      	movs	r3, #1
 800313c:	0028      	movs	r0, r5
 800313e:	6a21      	ldr	r1, [r4, #32]
 8003140:	47b8      	blx	r7
 8003142:	1c43      	adds	r3, r0, #1
 8003144:	d1c5      	bne.n	80030d2 <__sflush_r+0x36>
 8003146:	682b      	ldr	r3, [r5, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0c2      	beq.n	80030d2 <__sflush_r+0x36>
 800314c:	2b1d      	cmp	r3, #29
 800314e:	d001      	beq.n	8003154 <__sflush_r+0xb8>
 8003150:	2b16      	cmp	r3, #22
 8003152:	d101      	bne.n	8003158 <__sflush_r+0xbc>
 8003154:	602e      	str	r6, [r5, #0]
 8003156:	e7ad      	b.n	80030b4 <__sflush_r+0x18>
 8003158:	2340      	movs	r3, #64	; 0x40
 800315a:	89a2      	ldrh	r2, [r4, #12]
 800315c:	4313      	orrs	r3, r2
 800315e:	81a3      	strh	r3, [r4, #12]
 8003160:	e7a9      	b.n	80030b6 <__sflush_r+0x1a>
 8003162:	2340      	movs	r3, #64	; 0x40
 8003164:	430b      	orrs	r3, r1
 8003166:	e7fa      	b.n	800315e <__sflush_r+0xc2>
 8003168:	690f      	ldr	r7, [r1, #16]
 800316a:	2f00      	cmp	r7, #0
 800316c:	d0a2      	beq.n	80030b4 <__sflush_r+0x18>
 800316e:	680a      	ldr	r2, [r1, #0]
 8003170:	600f      	str	r7, [r1, #0]
 8003172:	1bd2      	subs	r2, r2, r7
 8003174:	9201      	str	r2, [sp, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	079b      	lsls	r3, r3, #30
 800317a:	d100      	bne.n	800317e <__sflush_r+0xe2>
 800317c:	694a      	ldr	r2, [r1, #20]
 800317e:	60a2      	str	r2, [r4, #8]
 8003180:	9b01      	ldr	r3, [sp, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	dc00      	bgt.n	8003188 <__sflush_r+0xec>
 8003186:	e795      	b.n	80030b4 <__sflush_r+0x18>
 8003188:	003a      	movs	r2, r7
 800318a:	0028      	movs	r0, r5
 800318c:	9b01      	ldr	r3, [sp, #4]
 800318e:	6a21      	ldr	r1, [r4, #32]
 8003190:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003192:	47b0      	blx	r6
 8003194:	2800      	cmp	r0, #0
 8003196:	dc06      	bgt.n	80031a6 <__sflush_r+0x10a>
 8003198:	2340      	movs	r3, #64	; 0x40
 800319a:	2001      	movs	r0, #1
 800319c:	89a2      	ldrh	r2, [r4, #12]
 800319e:	4240      	negs	r0, r0
 80031a0:	4313      	orrs	r3, r2
 80031a2:	81a3      	strh	r3, [r4, #12]
 80031a4:	e787      	b.n	80030b6 <__sflush_r+0x1a>
 80031a6:	9b01      	ldr	r3, [sp, #4]
 80031a8:	183f      	adds	r7, r7, r0
 80031aa:	1a1b      	subs	r3, r3, r0
 80031ac:	9301      	str	r3, [sp, #4]
 80031ae:	e7e7      	b.n	8003180 <__sflush_r+0xe4>
 80031b0:	20400001 	.word	0x20400001

080031b4 <_fflush_r>:
 80031b4:	690b      	ldr	r3, [r1, #16]
 80031b6:	b570      	push	{r4, r5, r6, lr}
 80031b8:	0005      	movs	r5, r0
 80031ba:	000c      	movs	r4, r1
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d102      	bne.n	80031c6 <_fflush_r+0x12>
 80031c0:	2500      	movs	r5, #0
 80031c2:	0028      	movs	r0, r5
 80031c4:	bd70      	pop	{r4, r5, r6, pc}
 80031c6:	2800      	cmp	r0, #0
 80031c8:	d004      	beq.n	80031d4 <_fflush_r+0x20>
 80031ca:	6983      	ldr	r3, [r0, #24]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d101      	bne.n	80031d4 <_fflush_r+0x20>
 80031d0:	f000 f8a8 	bl	8003324 <__sinit>
 80031d4:	4b14      	ldr	r3, [pc, #80]	; (8003228 <_fflush_r+0x74>)
 80031d6:	429c      	cmp	r4, r3
 80031d8:	d11b      	bne.n	8003212 <_fflush_r+0x5e>
 80031da:	686c      	ldr	r4, [r5, #4]
 80031dc:	220c      	movs	r2, #12
 80031de:	5ea3      	ldrsh	r3, [r4, r2]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0ed      	beq.n	80031c0 <_fflush_r+0xc>
 80031e4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80031e6:	07d2      	lsls	r2, r2, #31
 80031e8:	d404      	bmi.n	80031f4 <_fflush_r+0x40>
 80031ea:	059b      	lsls	r3, r3, #22
 80031ec:	d402      	bmi.n	80031f4 <_fflush_r+0x40>
 80031ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031f0:	f000 f95d 	bl	80034ae <__retarget_lock_acquire_recursive>
 80031f4:	0028      	movs	r0, r5
 80031f6:	0021      	movs	r1, r4
 80031f8:	f7ff ff50 	bl	800309c <__sflush_r>
 80031fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80031fe:	0005      	movs	r5, r0
 8003200:	07db      	lsls	r3, r3, #31
 8003202:	d4de      	bmi.n	80031c2 <_fflush_r+0xe>
 8003204:	89a3      	ldrh	r3, [r4, #12]
 8003206:	059b      	lsls	r3, r3, #22
 8003208:	d4db      	bmi.n	80031c2 <_fflush_r+0xe>
 800320a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800320c:	f000 f950 	bl	80034b0 <__retarget_lock_release_recursive>
 8003210:	e7d7      	b.n	80031c2 <_fflush_r+0xe>
 8003212:	4b06      	ldr	r3, [pc, #24]	; (800322c <_fflush_r+0x78>)
 8003214:	429c      	cmp	r4, r3
 8003216:	d101      	bne.n	800321c <_fflush_r+0x68>
 8003218:	68ac      	ldr	r4, [r5, #8]
 800321a:	e7df      	b.n	80031dc <_fflush_r+0x28>
 800321c:	4b04      	ldr	r3, [pc, #16]	; (8003230 <_fflush_r+0x7c>)
 800321e:	429c      	cmp	r4, r3
 8003220:	d1dc      	bne.n	80031dc <_fflush_r+0x28>
 8003222:	68ec      	ldr	r4, [r5, #12]
 8003224:	e7da      	b.n	80031dc <_fflush_r+0x28>
 8003226:	46c0      	nop			; (mov r8, r8)
 8003228:	080038b0 	.word	0x080038b0
 800322c:	080038d0 	.word	0x080038d0
 8003230:	08003890 	.word	0x08003890

08003234 <fflush>:
 8003234:	0001      	movs	r1, r0
 8003236:	b510      	push	{r4, lr}
 8003238:	2800      	cmp	r0, #0
 800323a:	d105      	bne.n	8003248 <fflush+0x14>
 800323c:	4b05      	ldr	r3, [pc, #20]	; (8003254 <fflush+0x20>)
 800323e:	4906      	ldr	r1, [pc, #24]	; (8003258 <fflush+0x24>)
 8003240:	6818      	ldr	r0, [r3, #0]
 8003242:	f000 f8ef 	bl	8003424 <_fwalk_reent>
 8003246:	bd10      	pop	{r4, pc}
 8003248:	4b04      	ldr	r3, [pc, #16]	; (800325c <fflush+0x28>)
 800324a:	6818      	ldr	r0, [r3, #0]
 800324c:	f7ff ffb2 	bl	80031b4 <_fflush_r>
 8003250:	e7f9      	b.n	8003246 <fflush+0x12>
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	080038f0 	.word	0x080038f0
 8003258:	080031b5 	.word	0x080031b5
 800325c:	2000000c 	.word	0x2000000c

08003260 <std>:
 8003260:	2300      	movs	r3, #0
 8003262:	b510      	push	{r4, lr}
 8003264:	0004      	movs	r4, r0
 8003266:	6003      	str	r3, [r0, #0]
 8003268:	6043      	str	r3, [r0, #4]
 800326a:	6083      	str	r3, [r0, #8]
 800326c:	8181      	strh	r1, [r0, #12]
 800326e:	6643      	str	r3, [r0, #100]	; 0x64
 8003270:	0019      	movs	r1, r3
 8003272:	81c2      	strh	r2, [r0, #14]
 8003274:	6103      	str	r3, [r0, #16]
 8003276:	6143      	str	r3, [r0, #20]
 8003278:	6183      	str	r3, [r0, #24]
 800327a:	2208      	movs	r2, #8
 800327c:	305c      	adds	r0, #92	; 0x5c
 800327e:	f000 f923 	bl	80034c8 <memset>
 8003282:	4b05      	ldr	r3, [pc, #20]	; (8003298 <std+0x38>)
 8003284:	6224      	str	r4, [r4, #32]
 8003286:	6263      	str	r3, [r4, #36]	; 0x24
 8003288:	4b04      	ldr	r3, [pc, #16]	; (800329c <std+0x3c>)
 800328a:	62a3      	str	r3, [r4, #40]	; 0x28
 800328c:	4b04      	ldr	r3, [pc, #16]	; (80032a0 <std+0x40>)
 800328e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003290:	4b04      	ldr	r3, [pc, #16]	; (80032a4 <std+0x44>)
 8003292:	6323      	str	r3, [r4, #48]	; 0x30
 8003294:	bd10      	pop	{r4, pc}
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	080036c1 	.word	0x080036c1
 800329c:	080036e9 	.word	0x080036e9
 80032a0:	08003721 	.word	0x08003721
 80032a4:	0800374d 	.word	0x0800374d

080032a8 <_cleanup_r>:
 80032a8:	b510      	push	{r4, lr}
 80032aa:	4902      	ldr	r1, [pc, #8]	; (80032b4 <_cleanup_r+0xc>)
 80032ac:	f000 f8ba 	bl	8003424 <_fwalk_reent>
 80032b0:	bd10      	pop	{r4, pc}
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	080031b5 	.word	0x080031b5

080032b8 <__sfmoreglue>:
 80032b8:	b570      	push	{r4, r5, r6, lr}
 80032ba:	2568      	movs	r5, #104	; 0x68
 80032bc:	1e4a      	subs	r2, r1, #1
 80032be:	4355      	muls	r5, r2
 80032c0:	000e      	movs	r6, r1
 80032c2:	0029      	movs	r1, r5
 80032c4:	3174      	adds	r1, #116	; 0x74
 80032c6:	f000 f973 	bl	80035b0 <_malloc_r>
 80032ca:	1e04      	subs	r4, r0, #0
 80032cc:	d008      	beq.n	80032e0 <__sfmoreglue+0x28>
 80032ce:	2100      	movs	r1, #0
 80032d0:	002a      	movs	r2, r5
 80032d2:	6001      	str	r1, [r0, #0]
 80032d4:	6046      	str	r6, [r0, #4]
 80032d6:	300c      	adds	r0, #12
 80032d8:	60a0      	str	r0, [r4, #8]
 80032da:	3268      	adds	r2, #104	; 0x68
 80032dc:	f000 f8f4 	bl	80034c8 <memset>
 80032e0:	0020      	movs	r0, r4
 80032e2:	bd70      	pop	{r4, r5, r6, pc}

080032e4 <__sfp_lock_acquire>:
 80032e4:	b510      	push	{r4, lr}
 80032e6:	4802      	ldr	r0, [pc, #8]	; (80032f0 <__sfp_lock_acquire+0xc>)
 80032e8:	f000 f8e1 	bl	80034ae <__retarget_lock_acquire_recursive>
 80032ec:	bd10      	pop	{r4, pc}
 80032ee:	46c0      	nop			; (mov r8, r8)
 80032f0:	20000141 	.word	0x20000141

080032f4 <__sfp_lock_release>:
 80032f4:	b510      	push	{r4, lr}
 80032f6:	4802      	ldr	r0, [pc, #8]	; (8003300 <__sfp_lock_release+0xc>)
 80032f8:	f000 f8da 	bl	80034b0 <__retarget_lock_release_recursive>
 80032fc:	bd10      	pop	{r4, pc}
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	20000141 	.word	0x20000141

08003304 <__sinit_lock_acquire>:
 8003304:	b510      	push	{r4, lr}
 8003306:	4802      	ldr	r0, [pc, #8]	; (8003310 <__sinit_lock_acquire+0xc>)
 8003308:	f000 f8d1 	bl	80034ae <__retarget_lock_acquire_recursive>
 800330c:	bd10      	pop	{r4, pc}
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	20000142 	.word	0x20000142

08003314 <__sinit_lock_release>:
 8003314:	b510      	push	{r4, lr}
 8003316:	4802      	ldr	r0, [pc, #8]	; (8003320 <__sinit_lock_release+0xc>)
 8003318:	f000 f8ca 	bl	80034b0 <__retarget_lock_release_recursive>
 800331c:	bd10      	pop	{r4, pc}
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	20000142 	.word	0x20000142

08003324 <__sinit>:
 8003324:	b513      	push	{r0, r1, r4, lr}
 8003326:	0004      	movs	r4, r0
 8003328:	f7ff ffec 	bl	8003304 <__sinit_lock_acquire>
 800332c:	69a3      	ldr	r3, [r4, #24]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <__sinit+0x14>
 8003332:	f7ff ffef 	bl	8003314 <__sinit_lock_release>
 8003336:	bd13      	pop	{r0, r1, r4, pc}
 8003338:	64a3      	str	r3, [r4, #72]	; 0x48
 800333a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800333c:	6523      	str	r3, [r4, #80]	; 0x50
 800333e:	4b13      	ldr	r3, [pc, #76]	; (800338c <__sinit+0x68>)
 8003340:	4a13      	ldr	r2, [pc, #76]	; (8003390 <__sinit+0x6c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	62a2      	str	r2, [r4, #40]	; 0x28
 8003346:	9301      	str	r3, [sp, #4]
 8003348:	42a3      	cmp	r3, r4
 800334a:	d101      	bne.n	8003350 <__sinit+0x2c>
 800334c:	2301      	movs	r3, #1
 800334e:	61a3      	str	r3, [r4, #24]
 8003350:	0020      	movs	r0, r4
 8003352:	f000 f81f 	bl	8003394 <__sfp>
 8003356:	6060      	str	r0, [r4, #4]
 8003358:	0020      	movs	r0, r4
 800335a:	f000 f81b 	bl	8003394 <__sfp>
 800335e:	60a0      	str	r0, [r4, #8]
 8003360:	0020      	movs	r0, r4
 8003362:	f000 f817 	bl	8003394 <__sfp>
 8003366:	2200      	movs	r2, #0
 8003368:	2104      	movs	r1, #4
 800336a:	60e0      	str	r0, [r4, #12]
 800336c:	6860      	ldr	r0, [r4, #4]
 800336e:	f7ff ff77 	bl	8003260 <std>
 8003372:	2201      	movs	r2, #1
 8003374:	2109      	movs	r1, #9
 8003376:	68a0      	ldr	r0, [r4, #8]
 8003378:	f7ff ff72 	bl	8003260 <std>
 800337c:	2202      	movs	r2, #2
 800337e:	2112      	movs	r1, #18
 8003380:	68e0      	ldr	r0, [r4, #12]
 8003382:	f7ff ff6d 	bl	8003260 <std>
 8003386:	2301      	movs	r3, #1
 8003388:	61a3      	str	r3, [r4, #24]
 800338a:	e7d2      	b.n	8003332 <__sinit+0xe>
 800338c:	080038f0 	.word	0x080038f0
 8003390:	080032a9 	.word	0x080032a9

08003394 <__sfp>:
 8003394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003396:	0007      	movs	r7, r0
 8003398:	f7ff ffa4 	bl	80032e4 <__sfp_lock_acquire>
 800339c:	4b1f      	ldr	r3, [pc, #124]	; (800341c <__sfp+0x88>)
 800339e:	681e      	ldr	r6, [r3, #0]
 80033a0:	69b3      	ldr	r3, [r6, #24]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d102      	bne.n	80033ac <__sfp+0x18>
 80033a6:	0030      	movs	r0, r6
 80033a8:	f7ff ffbc 	bl	8003324 <__sinit>
 80033ac:	3648      	adds	r6, #72	; 0x48
 80033ae:	68b4      	ldr	r4, [r6, #8]
 80033b0:	6873      	ldr	r3, [r6, #4]
 80033b2:	3b01      	subs	r3, #1
 80033b4:	d504      	bpl.n	80033c0 <__sfp+0x2c>
 80033b6:	6833      	ldr	r3, [r6, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d022      	beq.n	8003402 <__sfp+0x6e>
 80033bc:	6836      	ldr	r6, [r6, #0]
 80033be:	e7f6      	b.n	80033ae <__sfp+0x1a>
 80033c0:	220c      	movs	r2, #12
 80033c2:	5ea5      	ldrsh	r5, [r4, r2]
 80033c4:	2d00      	cmp	r5, #0
 80033c6:	d11a      	bne.n	80033fe <__sfp+0x6a>
 80033c8:	0020      	movs	r0, r4
 80033ca:	4b15      	ldr	r3, [pc, #84]	; (8003420 <__sfp+0x8c>)
 80033cc:	3058      	adds	r0, #88	; 0x58
 80033ce:	60e3      	str	r3, [r4, #12]
 80033d0:	6665      	str	r5, [r4, #100]	; 0x64
 80033d2:	f000 f86b 	bl	80034ac <__retarget_lock_init_recursive>
 80033d6:	f7ff ff8d 	bl	80032f4 <__sfp_lock_release>
 80033da:	0020      	movs	r0, r4
 80033dc:	2208      	movs	r2, #8
 80033de:	0029      	movs	r1, r5
 80033e0:	6025      	str	r5, [r4, #0]
 80033e2:	60a5      	str	r5, [r4, #8]
 80033e4:	6065      	str	r5, [r4, #4]
 80033e6:	6125      	str	r5, [r4, #16]
 80033e8:	6165      	str	r5, [r4, #20]
 80033ea:	61a5      	str	r5, [r4, #24]
 80033ec:	305c      	adds	r0, #92	; 0x5c
 80033ee:	f000 f86b 	bl	80034c8 <memset>
 80033f2:	6365      	str	r5, [r4, #52]	; 0x34
 80033f4:	63a5      	str	r5, [r4, #56]	; 0x38
 80033f6:	64a5      	str	r5, [r4, #72]	; 0x48
 80033f8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80033fa:	0020      	movs	r0, r4
 80033fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033fe:	3468      	adds	r4, #104	; 0x68
 8003400:	e7d7      	b.n	80033b2 <__sfp+0x1e>
 8003402:	2104      	movs	r1, #4
 8003404:	0038      	movs	r0, r7
 8003406:	f7ff ff57 	bl	80032b8 <__sfmoreglue>
 800340a:	1e04      	subs	r4, r0, #0
 800340c:	6030      	str	r0, [r6, #0]
 800340e:	d1d5      	bne.n	80033bc <__sfp+0x28>
 8003410:	f7ff ff70 	bl	80032f4 <__sfp_lock_release>
 8003414:	230c      	movs	r3, #12
 8003416:	603b      	str	r3, [r7, #0]
 8003418:	e7ef      	b.n	80033fa <__sfp+0x66>
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	080038f0 	.word	0x080038f0
 8003420:	ffff0001 	.word	0xffff0001

08003424 <_fwalk_reent>:
 8003424:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003426:	0004      	movs	r4, r0
 8003428:	0006      	movs	r6, r0
 800342a:	2700      	movs	r7, #0
 800342c:	9101      	str	r1, [sp, #4]
 800342e:	3448      	adds	r4, #72	; 0x48
 8003430:	6863      	ldr	r3, [r4, #4]
 8003432:	68a5      	ldr	r5, [r4, #8]
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	9b00      	ldr	r3, [sp, #0]
 8003438:	3b01      	subs	r3, #1
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	d504      	bpl.n	8003448 <_fwalk_reent+0x24>
 800343e:	6824      	ldr	r4, [r4, #0]
 8003440:	2c00      	cmp	r4, #0
 8003442:	d1f5      	bne.n	8003430 <_fwalk_reent+0xc>
 8003444:	0038      	movs	r0, r7
 8003446:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003448:	89ab      	ldrh	r3, [r5, #12]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d908      	bls.n	8003460 <_fwalk_reent+0x3c>
 800344e:	220e      	movs	r2, #14
 8003450:	5eab      	ldrsh	r3, [r5, r2]
 8003452:	3301      	adds	r3, #1
 8003454:	d004      	beq.n	8003460 <_fwalk_reent+0x3c>
 8003456:	0029      	movs	r1, r5
 8003458:	0030      	movs	r0, r6
 800345a:	9b01      	ldr	r3, [sp, #4]
 800345c:	4798      	blx	r3
 800345e:	4307      	orrs	r7, r0
 8003460:	3568      	adds	r5, #104	; 0x68
 8003462:	e7e8      	b.n	8003436 <_fwalk_reent+0x12>

08003464 <__libc_init_array>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	2600      	movs	r6, #0
 8003468:	4d0c      	ldr	r5, [pc, #48]	; (800349c <__libc_init_array+0x38>)
 800346a:	4c0d      	ldr	r4, [pc, #52]	; (80034a0 <__libc_init_array+0x3c>)
 800346c:	1b64      	subs	r4, r4, r5
 800346e:	10a4      	asrs	r4, r4, #2
 8003470:	42a6      	cmp	r6, r4
 8003472:	d109      	bne.n	8003488 <__libc_init_array+0x24>
 8003474:	2600      	movs	r6, #0
 8003476:	f000 f9cd 	bl	8003814 <_init>
 800347a:	4d0a      	ldr	r5, [pc, #40]	; (80034a4 <__libc_init_array+0x40>)
 800347c:	4c0a      	ldr	r4, [pc, #40]	; (80034a8 <__libc_init_array+0x44>)
 800347e:	1b64      	subs	r4, r4, r5
 8003480:	10a4      	asrs	r4, r4, #2
 8003482:	42a6      	cmp	r6, r4
 8003484:	d105      	bne.n	8003492 <__libc_init_array+0x2e>
 8003486:	bd70      	pop	{r4, r5, r6, pc}
 8003488:	00b3      	lsls	r3, r6, #2
 800348a:	58eb      	ldr	r3, [r5, r3]
 800348c:	4798      	blx	r3
 800348e:	3601      	adds	r6, #1
 8003490:	e7ee      	b.n	8003470 <__libc_init_array+0xc>
 8003492:	00b3      	lsls	r3, r6, #2
 8003494:	58eb      	ldr	r3, [r5, r3]
 8003496:	4798      	blx	r3
 8003498:	3601      	adds	r6, #1
 800349a:	e7f2      	b.n	8003482 <__libc_init_array+0x1e>
 800349c:	080038f4 	.word	0x080038f4
 80034a0:	080038f4 	.word	0x080038f4
 80034a4:	080038f4 	.word	0x080038f4
 80034a8:	080038f8 	.word	0x080038f8

080034ac <__retarget_lock_init_recursive>:
 80034ac:	4770      	bx	lr

080034ae <__retarget_lock_acquire_recursive>:
 80034ae:	4770      	bx	lr

080034b0 <__retarget_lock_release_recursive>:
 80034b0:	4770      	bx	lr
	...

080034b4 <malloc>:
 80034b4:	b510      	push	{r4, lr}
 80034b6:	4b03      	ldr	r3, [pc, #12]	; (80034c4 <malloc+0x10>)
 80034b8:	0001      	movs	r1, r0
 80034ba:	6818      	ldr	r0, [r3, #0]
 80034bc:	f000 f878 	bl	80035b0 <_malloc_r>
 80034c0:	bd10      	pop	{r4, pc}
 80034c2:	46c0      	nop			; (mov r8, r8)
 80034c4:	2000000c 	.word	0x2000000c

080034c8 <memset>:
 80034c8:	0003      	movs	r3, r0
 80034ca:	1882      	adds	r2, r0, r2
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d100      	bne.n	80034d2 <memset+0xa>
 80034d0:	4770      	bx	lr
 80034d2:	7019      	strb	r1, [r3, #0]
 80034d4:	3301      	adds	r3, #1
 80034d6:	e7f9      	b.n	80034cc <memset+0x4>

080034d8 <_free_r>:
 80034d8:	b570      	push	{r4, r5, r6, lr}
 80034da:	0005      	movs	r5, r0
 80034dc:	2900      	cmp	r1, #0
 80034de:	d010      	beq.n	8003502 <_free_r+0x2a>
 80034e0:	1f0c      	subs	r4, r1, #4
 80034e2:	6823      	ldr	r3, [r4, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	da00      	bge.n	80034ea <_free_r+0x12>
 80034e8:	18e4      	adds	r4, r4, r3
 80034ea:	0028      	movs	r0, r5
 80034ec:	f000 f96e 	bl	80037cc <__malloc_lock>
 80034f0:	4a1d      	ldr	r2, [pc, #116]	; (8003568 <_free_r+0x90>)
 80034f2:	6813      	ldr	r3, [r2, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d105      	bne.n	8003504 <_free_r+0x2c>
 80034f8:	6063      	str	r3, [r4, #4]
 80034fa:	6014      	str	r4, [r2, #0]
 80034fc:	0028      	movs	r0, r5
 80034fe:	f000 f96d 	bl	80037dc <__malloc_unlock>
 8003502:	bd70      	pop	{r4, r5, r6, pc}
 8003504:	42a3      	cmp	r3, r4
 8003506:	d908      	bls.n	800351a <_free_r+0x42>
 8003508:	6821      	ldr	r1, [r4, #0]
 800350a:	1860      	adds	r0, r4, r1
 800350c:	4283      	cmp	r3, r0
 800350e:	d1f3      	bne.n	80034f8 <_free_r+0x20>
 8003510:	6818      	ldr	r0, [r3, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	1841      	adds	r1, r0, r1
 8003516:	6021      	str	r1, [r4, #0]
 8003518:	e7ee      	b.n	80034f8 <_free_r+0x20>
 800351a:	001a      	movs	r2, r3
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <_free_r+0x4e>
 8003522:	42a3      	cmp	r3, r4
 8003524:	d9f9      	bls.n	800351a <_free_r+0x42>
 8003526:	6811      	ldr	r1, [r2, #0]
 8003528:	1850      	adds	r0, r2, r1
 800352a:	42a0      	cmp	r0, r4
 800352c:	d10b      	bne.n	8003546 <_free_r+0x6e>
 800352e:	6820      	ldr	r0, [r4, #0]
 8003530:	1809      	adds	r1, r1, r0
 8003532:	1850      	adds	r0, r2, r1
 8003534:	6011      	str	r1, [r2, #0]
 8003536:	4283      	cmp	r3, r0
 8003538:	d1e0      	bne.n	80034fc <_free_r+0x24>
 800353a:	6818      	ldr	r0, [r3, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	1841      	adds	r1, r0, r1
 8003540:	6011      	str	r1, [r2, #0]
 8003542:	6053      	str	r3, [r2, #4]
 8003544:	e7da      	b.n	80034fc <_free_r+0x24>
 8003546:	42a0      	cmp	r0, r4
 8003548:	d902      	bls.n	8003550 <_free_r+0x78>
 800354a:	230c      	movs	r3, #12
 800354c:	602b      	str	r3, [r5, #0]
 800354e:	e7d5      	b.n	80034fc <_free_r+0x24>
 8003550:	6821      	ldr	r1, [r4, #0]
 8003552:	1860      	adds	r0, r4, r1
 8003554:	4283      	cmp	r3, r0
 8003556:	d103      	bne.n	8003560 <_free_r+0x88>
 8003558:	6818      	ldr	r0, [r3, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	1841      	adds	r1, r0, r1
 800355e:	6021      	str	r1, [r4, #0]
 8003560:	6063      	str	r3, [r4, #4]
 8003562:	6054      	str	r4, [r2, #4]
 8003564:	e7ca      	b.n	80034fc <_free_r+0x24>
 8003566:	46c0      	nop			; (mov r8, r8)
 8003568:	20000144 	.word	0x20000144

0800356c <sbrk_aligned>:
 800356c:	b570      	push	{r4, r5, r6, lr}
 800356e:	4e0f      	ldr	r6, [pc, #60]	; (80035ac <sbrk_aligned+0x40>)
 8003570:	000d      	movs	r5, r1
 8003572:	6831      	ldr	r1, [r6, #0]
 8003574:	0004      	movs	r4, r0
 8003576:	2900      	cmp	r1, #0
 8003578:	d102      	bne.n	8003580 <sbrk_aligned+0x14>
 800357a:	f000 f88f 	bl	800369c <_sbrk_r>
 800357e:	6030      	str	r0, [r6, #0]
 8003580:	0029      	movs	r1, r5
 8003582:	0020      	movs	r0, r4
 8003584:	f000 f88a 	bl	800369c <_sbrk_r>
 8003588:	1c43      	adds	r3, r0, #1
 800358a:	d00a      	beq.n	80035a2 <sbrk_aligned+0x36>
 800358c:	2303      	movs	r3, #3
 800358e:	1cc5      	adds	r5, r0, #3
 8003590:	439d      	bics	r5, r3
 8003592:	42a8      	cmp	r0, r5
 8003594:	d007      	beq.n	80035a6 <sbrk_aligned+0x3a>
 8003596:	1a29      	subs	r1, r5, r0
 8003598:	0020      	movs	r0, r4
 800359a:	f000 f87f 	bl	800369c <_sbrk_r>
 800359e:	1c43      	adds	r3, r0, #1
 80035a0:	d101      	bne.n	80035a6 <sbrk_aligned+0x3a>
 80035a2:	2501      	movs	r5, #1
 80035a4:	426d      	negs	r5, r5
 80035a6:	0028      	movs	r0, r5
 80035a8:	bd70      	pop	{r4, r5, r6, pc}
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	20000148 	.word	0x20000148

080035b0 <_malloc_r>:
 80035b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035b2:	2203      	movs	r2, #3
 80035b4:	1ccb      	adds	r3, r1, #3
 80035b6:	4393      	bics	r3, r2
 80035b8:	3308      	adds	r3, #8
 80035ba:	0006      	movs	r6, r0
 80035bc:	001f      	movs	r7, r3
 80035be:	2b0c      	cmp	r3, #12
 80035c0:	d232      	bcs.n	8003628 <_malloc_r+0x78>
 80035c2:	270c      	movs	r7, #12
 80035c4:	42b9      	cmp	r1, r7
 80035c6:	d831      	bhi.n	800362c <_malloc_r+0x7c>
 80035c8:	0030      	movs	r0, r6
 80035ca:	f000 f8ff 	bl	80037cc <__malloc_lock>
 80035ce:	4d32      	ldr	r5, [pc, #200]	; (8003698 <_malloc_r+0xe8>)
 80035d0:	682b      	ldr	r3, [r5, #0]
 80035d2:	001c      	movs	r4, r3
 80035d4:	2c00      	cmp	r4, #0
 80035d6:	d12e      	bne.n	8003636 <_malloc_r+0x86>
 80035d8:	0039      	movs	r1, r7
 80035da:	0030      	movs	r0, r6
 80035dc:	f7ff ffc6 	bl	800356c <sbrk_aligned>
 80035e0:	0004      	movs	r4, r0
 80035e2:	1c43      	adds	r3, r0, #1
 80035e4:	d11e      	bne.n	8003624 <_malloc_r+0x74>
 80035e6:	682c      	ldr	r4, [r5, #0]
 80035e8:	0025      	movs	r5, r4
 80035ea:	2d00      	cmp	r5, #0
 80035ec:	d14a      	bne.n	8003684 <_malloc_r+0xd4>
 80035ee:	6823      	ldr	r3, [r4, #0]
 80035f0:	0029      	movs	r1, r5
 80035f2:	18e3      	adds	r3, r4, r3
 80035f4:	0030      	movs	r0, r6
 80035f6:	9301      	str	r3, [sp, #4]
 80035f8:	f000 f850 	bl	800369c <_sbrk_r>
 80035fc:	9b01      	ldr	r3, [sp, #4]
 80035fe:	4283      	cmp	r3, r0
 8003600:	d143      	bne.n	800368a <_malloc_r+0xda>
 8003602:	6823      	ldr	r3, [r4, #0]
 8003604:	3703      	adds	r7, #3
 8003606:	1aff      	subs	r7, r7, r3
 8003608:	2303      	movs	r3, #3
 800360a:	439f      	bics	r7, r3
 800360c:	3708      	adds	r7, #8
 800360e:	2f0c      	cmp	r7, #12
 8003610:	d200      	bcs.n	8003614 <_malloc_r+0x64>
 8003612:	270c      	movs	r7, #12
 8003614:	0039      	movs	r1, r7
 8003616:	0030      	movs	r0, r6
 8003618:	f7ff ffa8 	bl	800356c <sbrk_aligned>
 800361c:	1c43      	adds	r3, r0, #1
 800361e:	d034      	beq.n	800368a <_malloc_r+0xda>
 8003620:	6823      	ldr	r3, [r4, #0]
 8003622:	19df      	adds	r7, r3, r7
 8003624:	6027      	str	r7, [r4, #0]
 8003626:	e013      	b.n	8003650 <_malloc_r+0xa0>
 8003628:	2b00      	cmp	r3, #0
 800362a:	dacb      	bge.n	80035c4 <_malloc_r+0x14>
 800362c:	230c      	movs	r3, #12
 800362e:	2500      	movs	r5, #0
 8003630:	6033      	str	r3, [r6, #0]
 8003632:	0028      	movs	r0, r5
 8003634:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003636:	6822      	ldr	r2, [r4, #0]
 8003638:	1bd1      	subs	r1, r2, r7
 800363a:	d420      	bmi.n	800367e <_malloc_r+0xce>
 800363c:	290b      	cmp	r1, #11
 800363e:	d917      	bls.n	8003670 <_malloc_r+0xc0>
 8003640:	19e2      	adds	r2, r4, r7
 8003642:	6027      	str	r7, [r4, #0]
 8003644:	42a3      	cmp	r3, r4
 8003646:	d111      	bne.n	800366c <_malloc_r+0xbc>
 8003648:	602a      	str	r2, [r5, #0]
 800364a:	6863      	ldr	r3, [r4, #4]
 800364c:	6011      	str	r1, [r2, #0]
 800364e:	6053      	str	r3, [r2, #4]
 8003650:	0030      	movs	r0, r6
 8003652:	0025      	movs	r5, r4
 8003654:	f000 f8c2 	bl	80037dc <__malloc_unlock>
 8003658:	2207      	movs	r2, #7
 800365a:	350b      	adds	r5, #11
 800365c:	1d23      	adds	r3, r4, #4
 800365e:	4395      	bics	r5, r2
 8003660:	1aea      	subs	r2, r5, r3
 8003662:	429d      	cmp	r5, r3
 8003664:	d0e5      	beq.n	8003632 <_malloc_r+0x82>
 8003666:	1b5b      	subs	r3, r3, r5
 8003668:	50a3      	str	r3, [r4, r2]
 800366a:	e7e2      	b.n	8003632 <_malloc_r+0x82>
 800366c:	605a      	str	r2, [r3, #4]
 800366e:	e7ec      	b.n	800364a <_malloc_r+0x9a>
 8003670:	6862      	ldr	r2, [r4, #4]
 8003672:	42a3      	cmp	r3, r4
 8003674:	d101      	bne.n	800367a <_malloc_r+0xca>
 8003676:	602a      	str	r2, [r5, #0]
 8003678:	e7ea      	b.n	8003650 <_malloc_r+0xa0>
 800367a:	605a      	str	r2, [r3, #4]
 800367c:	e7e8      	b.n	8003650 <_malloc_r+0xa0>
 800367e:	0023      	movs	r3, r4
 8003680:	6864      	ldr	r4, [r4, #4]
 8003682:	e7a7      	b.n	80035d4 <_malloc_r+0x24>
 8003684:	002c      	movs	r4, r5
 8003686:	686d      	ldr	r5, [r5, #4]
 8003688:	e7af      	b.n	80035ea <_malloc_r+0x3a>
 800368a:	230c      	movs	r3, #12
 800368c:	0030      	movs	r0, r6
 800368e:	6033      	str	r3, [r6, #0]
 8003690:	f000 f8a4 	bl	80037dc <__malloc_unlock>
 8003694:	e7cd      	b.n	8003632 <_malloc_r+0x82>
 8003696:	46c0      	nop			; (mov r8, r8)
 8003698:	20000144 	.word	0x20000144

0800369c <_sbrk_r>:
 800369c:	2300      	movs	r3, #0
 800369e:	b570      	push	{r4, r5, r6, lr}
 80036a0:	4d06      	ldr	r5, [pc, #24]	; (80036bc <_sbrk_r+0x20>)
 80036a2:	0004      	movs	r4, r0
 80036a4:	0008      	movs	r0, r1
 80036a6:	602b      	str	r3, [r5, #0]
 80036a8:	f7fd f96c 	bl	8000984 <_sbrk>
 80036ac:	1c43      	adds	r3, r0, #1
 80036ae:	d103      	bne.n	80036b8 <_sbrk_r+0x1c>
 80036b0:	682b      	ldr	r3, [r5, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d000      	beq.n	80036b8 <_sbrk_r+0x1c>
 80036b6:	6023      	str	r3, [r4, #0]
 80036b8:	bd70      	pop	{r4, r5, r6, pc}
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	2000014c 	.word	0x2000014c

080036c0 <__sread>:
 80036c0:	b570      	push	{r4, r5, r6, lr}
 80036c2:	000c      	movs	r4, r1
 80036c4:	250e      	movs	r5, #14
 80036c6:	5f49      	ldrsh	r1, [r1, r5]
 80036c8:	f000 f890 	bl	80037ec <_read_r>
 80036cc:	2800      	cmp	r0, #0
 80036ce:	db03      	blt.n	80036d8 <__sread+0x18>
 80036d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80036d2:	181b      	adds	r3, r3, r0
 80036d4:	6563      	str	r3, [r4, #84]	; 0x54
 80036d6:	bd70      	pop	{r4, r5, r6, pc}
 80036d8:	89a3      	ldrh	r3, [r4, #12]
 80036da:	4a02      	ldr	r2, [pc, #8]	; (80036e4 <__sread+0x24>)
 80036dc:	4013      	ands	r3, r2
 80036de:	81a3      	strh	r3, [r4, #12]
 80036e0:	e7f9      	b.n	80036d6 <__sread+0x16>
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	ffffefff 	.word	0xffffefff

080036e8 <__swrite>:
 80036e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ea:	001f      	movs	r7, r3
 80036ec:	898b      	ldrh	r3, [r1, #12]
 80036ee:	0005      	movs	r5, r0
 80036f0:	000c      	movs	r4, r1
 80036f2:	0016      	movs	r6, r2
 80036f4:	05db      	lsls	r3, r3, #23
 80036f6:	d505      	bpl.n	8003704 <__swrite+0x1c>
 80036f8:	230e      	movs	r3, #14
 80036fa:	5ec9      	ldrsh	r1, [r1, r3]
 80036fc:	2200      	movs	r2, #0
 80036fe:	2302      	movs	r3, #2
 8003700:	f000 f850 	bl	80037a4 <_lseek_r>
 8003704:	89a3      	ldrh	r3, [r4, #12]
 8003706:	4a05      	ldr	r2, [pc, #20]	; (800371c <__swrite+0x34>)
 8003708:	0028      	movs	r0, r5
 800370a:	4013      	ands	r3, r2
 800370c:	81a3      	strh	r3, [r4, #12]
 800370e:	0032      	movs	r2, r6
 8003710:	230e      	movs	r3, #14
 8003712:	5ee1      	ldrsh	r1, [r4, r3]
 8003714:	003b      	movs	r3, r7
 8003716:	f000 f81f 	bl	8003758 <_write_r>
 800371a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800371c:	ffffefff 	.word	0xffffefff

08003720 <__sseek>:
 8003720:	b570      	push	{r4, r5, r6, lr}
 8003722:	000c      	movs	r4, r1
 8003724:	250e      	movs	r5, #14
 8003726:	5f49      	ldrsh	r1, [r1, r5]
 8003728:	f000 f83c 	bl	80037a4 <_lseek_r>
 800372c:	89a3      	ldrh	r3, [r4, #12]
 800372e:	1c42      	adds	r2, r0, #1
 8003730:	d103      	bne.n	800373a <__sseek+0x1a>
 8003732:	4a05      	ldr	r2, [pc, #20]	; (8003748 <__sseek+0x28>)
 8003734:	4013      	ands	r3, r2
 8003736:	81a3      	strh	r3, [r4, #12]
 8003738:	bd70      	pop	{r4, r5, r6, pc}
 800373a:	2280      	movs	r2, #128	; 0x80
 800373c:	0152      	lsls	r2, r2, #5
 800373e:	4313      	orrs	r3, r2
 8003740:	81a3      	strh	r3, [r4, #12]
 8003742:	6560      	str	r0, [r4, #84]	; 0x54
 8003744:	e7f8      	b.n	8003738 <__sseek+0x18>
 8003746:	46c0      	nop			; (mov r8, r8)
 8003748:	ffffefff 	.word	0xffffefff

0800374c <__sclose>:
 800374c:	b510      	push	{r4, lr}
 800374e:	230e      	movs	r3, #14
 8003750:	5ec9      	ldrsh	r1, [r1, r3]
 8003752:	f000 f815 	bl	8003780 <_close_r>
 8003756:	bd10      	pop	{r4, pc}

08003758 <_write_r>:
 8003758:	b570      	push	{r4, r5, r6, lr}
 800375a:	0004      	movs	r4, r0
 800375c:	0008      	movs	r0, r1
 800375e:	0011      	movs	r1, r2
 8003760:	001a      	movs	r2, r3
 8003762:	2300      	movs	r3, #0
 8003764:	4d05      	ldr	r5, [pc, #20]	; (800377c <_write_r+0x24>)
 8003766:	602b      	str	r3, [r5, #0]
 8003768:	f7fd f8db 	bl	8000922 <_write>
 800376c:	1c43      	adds	r3, r0, #1
 800376e:	d103      	bne.n	8003778 <_write_r+0x20>
 8003770:	682b      	ldr	r3, [r5, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d000      	beq.n	8003778 <_write_r+0x20>
 8003776:	6023      	str	r3, [r4, #0]
 8003778:	bd70      	pop	{r4, r5, r6, pc}
 800377a:	46c0      	nop			; (mov r8, r8)
 800377c:	2000014c 	.word	0x2000014c

08003780 <_close_r>:
 8003780:	2300      	movs	r3, #0
 8003782:	b570      	push	{r4, r5, r6, lr}
 8003784:	4d06      	ldr	r5, [pc, #24]	; (80037a0 <_close_r+0x20>)
 8003786:	0004      	movs	r4, r0
 8003788:	0008      	movs	r0, r1
 800378a:	602b      	str	r3, [r5, #0]
 800378c:	f7fd f8e5 	bl	800095a <_close>
 8003790:	1c43      	adds	r3, r0, #1
 8003792:	d103      	bne.n	800379c <_close_r+0x1c>
 8003794:	682b      	ldr	r3, [r5, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d000      	beq.n	800379c <_close_r+0x1c>
 800379a:	6023      	str	r3, [r4, #0]
 800379c:	bd70      	pop	{r4, r5, r6, pc}
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	2000014c 	.word	0x2000014c

080037a4 <_lseek_r>:
 80037a4:	b570      	push	{r4, r5, r6, lr}
 80037a6:	0004      	movs	r4, r0
 80037a8:	0008      	movs	r0, r1
 80037aa:	0011      	movs	r1, r2
 80037ac:	001a      	movs	r2, r3
 80037ae:	2300      	movs	r3, #0
 80037b0:	4d05      	ldr	r5, [pc, #20]	; (80037c8 <_lseek_r+0x24>)
 80037b2:	602b      	str	r3, [r5, #0]
 80037b4:	f7fd f8db 	bl	800096e <_lseek>
 80037b8:	1c43      	adds	r3, r0, #1
 80037ba:	d103      	bne.n	80037c4 <_lseek_r+0x20>
 80037bc:	682b      	ldr	r3, [r5, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d000      	beq.n	80037c4 <_lseek_r+0x20>
 80037c2:	6023      	str	r3, [r4, #0]
 80037c4:	bd70      	pop	{r4, r5, r6, pc}
 80037c6:	46c0      	nop			; (mov r8, r8)
 80037c8:	2000014c 	.word	0x2000014c

080037cc <__malloc_lock>:
 80037cc:	b510      	push	{r4, lr}
 80037ce:	4802      	ldr	r0, [pc, #8]	; (80037d8 <__malloc_lock+0xc>)
 80037d0:	f7ff fe6d 	bl	80034ae <__retarget_lock_acquire_recursive>
 80037d4:	bd10      	pop	{r4, pc}
 80037d6:	46c0      	nop			; (mov r8, r8)
 80037d8:	20000140 	.word	0x20000140

080037dc <__malloc_unlock>:
 80037dc:	b510      	push	{r4, lr}
 80037de:	4802      	ldr	r0, [pc, #8]	; (80037e8 <__malloc_unlock+0xc>)
 80037e0:	f7ff fe66 	bl	80034b0 <__retarget_lock_release_recursive>
 80037e4:	bd10      	pop	{r4, pc}
 80037e6:	46c0      	nop			; (mov r8, r8)
 80037e8:	20000140 	.word	0x20000140

080037ec <_read_r>:
 80037ec:	b570      	push	{r4, r5, r6, lr}
 80037ee:	0004      	movs	r4, r0
 80037f0:	0008      	movs	r0, r1
 80037f2:	0011      	movs	r1, r2
 80037f4:	001a      	movs	r2, r3
 80037f6:	2300      	movs	r3, #0
 80037f8:	4d05      	ldr	r5, [pc, #20]	; (8003810 <_read_r+0x24>)
 80037fa:	602b      	str	r3, [r5, #0]
 80037fc:	f7fd f874 	bl	80008e8 <_read>
 8003800:	1c43      	adds	r3, r0, #1
 8003802:	d103      	bne.n	800380c <_read_r+0x20>
 8003804:	682b      	ldr	r3, [r5, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d000      	beq.n	800380c <_read_r+0x20>
 800380a:	6023      	str	r3, [r4, #0]
 800380c:	bd70      	pop	{r4, r5, r6, pc}
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	2000014c 	.word	0x2000014c

08003814 <_init>:
 8003814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800381a:	bc08      	pop	{r3}
 800381c:	469e      	mov	lr, r3
 800381e:	4770      	bx	lr

08003820 <_fini>:
 8003820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003826:	bc08      	pop	{r3}
 8003828:	469e      	mov	lr, r3
 800382a:	4770      	bx	lr
