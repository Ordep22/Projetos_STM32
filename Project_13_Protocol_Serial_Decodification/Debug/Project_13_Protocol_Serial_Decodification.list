
Project_13_Protocol_Serial_Decodification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a90  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08003b50  08003b50  00013b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c18  08003c18  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003c18  08003c18  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c18  08003c18  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c18  08003c18  00013c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c1c  08003c1c  00013c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003c20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000070  08003c90  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08003c90  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b294  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ef5  00000000  00000000  0002b32c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000890  00000000  00000000  0002d228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007b8  00000000  00000000  0002dab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5e3  00000000  00000000  0002e270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bdcd  00000000  00000000  00048853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009373a  00000000  00000000  00054620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e7d5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002210  00000000  00000000  000e7dac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003b38 	.word	0x08003b38

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003b38 	.word	0x08003b38

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <PiscaLed>:
static void MX_CRC_Init(void);

/* USER CODE BEGIN PFP */

int PiscaLed(int NumPiscadas , int TempoDelay)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]

	for(int i = 0; i < NumPiscadas; i++)
 800022a:	2300      	movs	r3, #0
 800022c:	60fb      	str	r3, [r7, #12]
 800022e:	e018      	b.n	8000262 <PiscaLed+0x42>
	{

		HAL_GPIO_WritePin(GPIOA,LED02_Pin,GPIO_PIN_SET);
 8000230:	2390      	movs	r3, #144	; 0x90
 8000232:	05db      	lsls	r3, r3, #23
 8000234:	2201      	movs	r2, #1
 8000236:	2120      	movs	r1, #32
 8000238:	0018      	movs	r0, r3
 800023a:	f001 f839 	bl	80012b0 <HAL_GPIO_WritePin>
		HAL_Delay(TempoDelay);
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	0018      	movs	r0, r3
 8000242:	f000 fc6b 	bl	8000b1c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA,LED02_Pin,GPIO_PIN_RESET);
 8000246:	2390      	movs	r3, #144	; 0x90
 8000248:	05db      	lsls	r3, r3, #23
 800024a:	2200      	movs	r2, #0
 800024c:	2120      	movs	r1, #32
 800024e:	0018      	movs	r0, r3
 8000250:	f001 f82e 	bl	80012b0 <HAL_GPIO_WritePin>
		HAL_Delay(TempoDelay);
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	0018      	movs	r0, r3
 8000258:	f000 fc60 	bl	8000b1c <HAL_Delay>
	for(int i = 0; i < NumPiscadas; i++)
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	3301      	adds	r3, #1
 8000260:	60fb      	str	r3, [r7, #12]
 8000262:	68fa      	ldr	r2, [r7, #12]
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	429a      	cmp	r2, r3
 8000268:	dbe2      	blt.n	8000230 <PiscaLed+0x10>

	}

	return 0;
 800026a:	2300      	movs	r3, #0

}
 800026c:	0018      	movs	r0, r3
 800026e:	46bd      	mov	sp, r7
 8000270:	b004      	add	sp, #16
 8000272:	bd80      	pop	{r7, pc}

08000274 <CheckSum>:


int CheckSum(uint8_t *Byte, int tamanho)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b086      	sub	sp, #24
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	6039      	str	r1, [r7, #0]
	//Adicionar uma vriável chamda tamanho para controlar até onde o for irá

	uint8_t dados= 0;
 800027e:	2317      	movs	r3, #23
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	2200      	movs	r2, #0
 8000284:	701a      	strb	r2, [r3, #0]

	uint8_t CS_Incorreto = 0;
 8000286:	230f      	movs	r3, #15
 8000288:	18fb      	adds	r3, r7, r3
 800028a:	2200      	movs	r2, #0
 800028c:	701a      	strb	r2, [r3, #0]

	uint8_t CS_Correto = 1;
 800028e:	230e      	movs	r3, #14
 8000290:	18fb      	adds	r3, r7, r3
 8000292:	2201      	movs	r2, #1
 8000294:	701a      	strb	r2, [r3, #0]



	for (int i = 0; i < tamanho - 1; i++)
 8000296:	2300      	movs	r3, #0
 8000298:	613b      	str	r3, [r7, #16]
 800029a:	e00f      	b.n	80002bc <CheckSum+0x48>
	{

			HAL_Delay(100);
 800029c:	2064      	movs	r0, #100	; 0x64
 800029e:	f000 fc3d 	bl	8000b1c <HAL_Delay>
			dados += Byte[i];
 80002a2:	693b      	ldr	r3, [r7, #16]
 80002a4:	687a      	ldr	r2, [r7, #4]
 80002a6:	18d3      	adds	r3, r2, r3
 80002a8:	7819      	ldrb	r1, [r3, #0]
 80002aa:	2217      	movs	r2, #23
 80002ac:	18bb      	adds	r3, r7, r2
 80002ae:	18ba      	adds	r2, r7, r2
 80002b0:	7812      	ldrb	r2, [r2, #0]
 80002b2:	188a      	adds	r2, r1, r2
 80002b4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < tamanho - 1; i++)
 80002b6:	693b      	ldr	r3, [r7, #16]
 80002b8:	3301      	adds	r3, #1
 80002ba:	613b      	str	r3, [r7, #16]
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	3b01      	subs	r3, #1
 80002c0:	693a      	ldr	r2, [r7, #16]
 80002c2:	429a      	cmp	r2, r3
 80002c4:	dbea      	blt.n	800029c <CheckSum+0x28>
	}



	if (dados != Byte[tamanho])
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	687a      	ldr	r2, [r7, #4]
 80002ca:	18d3      	adds	r3, r2, r3
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	2217      	movs	r2, #23
 80002d0:	18ba      	adds	r2, r7, r2
 80002d2:	7812      	ldrb	r2, [r2, #0]
 80002d4:	429a      	cmp	r2, r3
 80002d6:	d003      	beq.n	80002e0 <CheckSum+0x6c>
	{

		return CS_Incorreto;
 80002d8:	230f      	movs	r3, #15
 80002da:	18fb      	adds	r3, r7, r3
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	e002      	b.n	80002e6 <CheckSum+0x72>
	}

	else
	{

		return CS_Correto;
 80002e0:	230e      	movs	r3, #14
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	781b      	ldrb	r3, [r3, #0]

	}



}
 80002e6:	0018      	movs	r0, r3
 80002e8:	46bd      	mov	sp, r7
 80002ea:	b006      	add	sp, #24
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <Protocolo>:


void Protocolo(uint8_t *a,int Tamanho_string)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	6039      	str	r1, [r7, #0]
//Quan a função é declarada e logo abaixo é chamda não é necessário montar um projeto

	  fflush(stdin);
 80002fa:	4b6f      	ldr	r3, [pc, #444]	; (80004b8 <Protocolo+0x1c8>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	685b      	ldr	r3, [r3, #4]
 8000300:	0018      	movs	r0, r3
 8000302:	f003 f929 	bl	8003558 <fflush>

	  uint8_t Verificacao;

	  short int  contador = 0;
 8000306:	230e      	movs	r3, #14
 8000308:	18fb      	adds	r3, r7, r3
 800030a:	2200      	movs	r2, #0
 800030c:	801a      	strh	r2, [r3, #0]

	  switch(V_Estagio_Protocolo)
 800030e:	4b6b      	ldr	r3, [pc, #428]	; (80004bc <Protocolo+0x1cc>)
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	b2db      	uxtb	r3, r3
 8000314:	2b0a      	cmp	r3, #10
 8000316:	d900      	bls.n	800031a <Protocolo+0x2a>
 8000318:	e0c4      	b.n	80004a4 <Protocolo+0x1b4>
 800031a:	009a      	lsls	r2, r3, #2
 800031c:	4b68      	ldr	r3, [pc, #416]	; (80004c0 <Protocolo+0x1d0>)
 800031e:	18d3      	adds	r3, r2, r3
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	469f      	mov	pc, r3


		case(CHECKSUM):
		{

			Verificacao = CheckSum(a, Tamanho_string);
 8000324:	683a      	ldr	r2, [r7, #0]
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	0011      	movs	r1, r2
 800032a:	0018      	movs	r0, r3
 800032c:	f7ff ffa2 	bl	8000274 <CheckSum>
 8000330:	0002      	movs	r2, r0
 8000332:	210d      	movs	r1, #13
 8000334:	187b      	adds	r3, r7, r1
 8000336:	701a      	strb	r2, [r3, #0]

			if (Verificacao == 1)
 8000338:	187b      	adds	r3, r7, r1
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	2b01      	cmp	r3, #1
 800033e:	d000      	beq.n	8000342 <Protocolo+0x52>
 8000340:	e0a7      	b.n	8000492 <Protocolo+0x1a2>
			{
				V_Estagio_Protocolo =  ESTAGIO_PREPROSSEAMENTO;
 8000342:	4b5e      	ldr	r3, [pc, #376]	; (80004bc <Protocolo+0x1cc>)
 8000344:	2200      	movs	r2, #0
 8000346:	701a      	strb	r2, [r3, #0]
		}

		case ESTAGIO_PREPROSSEAMENTO:
		{

		  if((a[0] == 'L')){
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	2b4c      	cmp	r3, #76	; 0x4c
 800034e:	d109      	bne.n	8000364 <Protocolo+0x74>

			 V_Estagio_Protocolo  = ESTAGIO_01;
 8000350:	4b5a      	ldr	r3, [pc, #360]	; (80004bc <Protocolo+0x1cc>)
 8000352:	2201      	movs	r2, #1
 8000354:	701a      	strb	r2, [r3, #0]
			 contador +=1;
 8000356:	210e      	movs	r1, #14
 8000358:	187b      	adds	r3, r7, r1
 800035a:	881b      	ldrh	r3, [r3, #0]
 800035c:	3301      	adds	r3, #1
 800035e:	b29a      	uxth	r2, r3
 8000360:	187b      	adds	r3, r7, r1
 8000362:	801a      	strh	r2, [r3, #0]

		  }

		  if ((a[0] != 'L' ) && (a[0] != '\0') )
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	2b4c      	cmp	r3, #76	; 0x4c
 800036a:	d004      	beq.n	8000376 <Protocolo+0x86>
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	2b00      	cmp	r3, #0
 8000372:	d000      	beq.n	8000376 <Protocolo+0x86>
 8000374:	e08f      	b.n	8000496 <Protocolo+0x1a6>
		 }

		  case ESTAGIO_01:
		  {

			  if((a[1] == 'U'))
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	3301      	adds	r3, #1
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	2b55      	cmp	r3, #85	; 0x55
 800037e:	d109      	bne.n	8000394 <Protocolo+0xa4>
			  {

				  V_Estagio_Protocolo  = ESTAGIO_02;
 8000380:	4b4e      	ldr	r3, [pc, #312]	; (80004bc <Protocolo+0x1cc>)
 8000382:	2202      	movs	r2, #2
 8000384:	701a      	strb	r2, [r3, #0]
				  contador +=1;
 8000386:	210e      	movs	r1, #14
 8000388:	187b      	adds	r3, r7, r1
 800038a:	881b      	ldrh	r3, [r3, #0]
 800038c:	3301      	adds	r3, #1
 800038e:	b29a      	uxth	r2, r3
 8000390:	187b      	adds	r3, r7, r1
 8000392:	801a      	strh	r2, [r3, #0]

			  }

			  if ((a[1] != 'U') && (a[1] != '\0'))
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	3301      	adds	r3, #1
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	2b55      	cmp	r3, #85	; 0x55
 800039c:	d005      	beq.n	80003aa <Protocolo+0xba>
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	3301      	adds	r3, #1
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d000      	beq.n	80003aa <Protocolo+0xba>
 80003a8:	e077      	b.n	800049a <Protocolo+0x1aa>
				  break;
			  }
		  }
		  case ESTAGIO_02:
		  {
			  if((a[2] == 'P'))
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	3302      	adds	r3, #2
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	2b50      	cmp	r3, #80	; 0x50
 80003b2:	d109      	bne.n	80003c8 <Protocolo+0xd8>
			  {

				  V_Estagio_Protocolo  = ESTAGIO_03;
 80003b4:	4b41      	ldr	r3, [pc, #260]	; (80004bc <Protocolo+0x1cc>)
 80003b6:	2203      	movs	r2, #3
 80003b8:	701a      	strb	r2, [r3, #0]
				  contador +=1;
 80003ba:	210e      	movs	r1, #14
 80003bc:	187b      	adds	r3, r7, r1
 80003be:	881b      	ldrh	r3, [r3, #0]
 80003c0:	3301      	adds	r3, #1
 80003c2:	b29a      	uxth	r2, r3
 80003c4:	187b      	adds	r3, r7, r1
 80003c6:	801a      	strh	r2, [r3, #0]
			  }

			  if ((a[2] != 'P') && (a[2] != '\0'))
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	3302      	adds	r3, #2
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	2b50      	cmp	r3, #80	; 0x50
 80003d0:	d004      	beq.n	80003dc <Protocolo+0xec>
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	3302      	adds	r3, #2
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d160      	bne.n	800049e <Protocolo+0x1ae>


		  }
		  case ESTAGIO_03:
		  {
			  if((a[3] == 'A'))
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	3303      	adds	r3, #3
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	2b41      	cmp	r3, #65	; 0x41
 80003e4:	d109      	bne.n	80003fa <Protocolo+0x10a>

			  {
				  V_Estagio_Protocolo = COMANDO; //Provavelmente vai sair desse ponto
 80003e6:	4b35      	ldr	r3, [pc, #212]	; (80004bc <Protocolo+0x1cc>)
 80003e8:	2208      	movs	r2, #8
 80003ea:	701a      	strb	r2, [r3, #0]
				  contador +=1;
 80003ec:	210e      	movs	r1, #14
 80003ee:	187b      	adds	r3, r7, r1
 80003f0:	881b      	ldrh	r3, [r3, #0]
 80003f2:	3301      	adds	r3, #1
 80003f4:	b29a      	uxth	r2, r3
 80003f6:	187b      	adds	r3, r7, r1
 80003f8:	801a      	strh	r2, [r3, #0]

			  }

			  if ((a[3] != 'A') && (a[3] != '\0'))
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	3303      	adds	r3, #3
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b41      	cmp	r3, #65	; 0x41
 8000402:	d004      	beq.n	800040e <Protocolo+0x11e>
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	3303      	adds	r3, #3
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d149      	bne.n	80004a2 <Protocolo+0x1b2>

		  case(COMANDO):
		  {

			  //Acende LED02
			  if (a[5] == 0)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	3305      	adds	r3, #5
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d110      	bne.n	800043a <Protocolo+0x14a>
			  {
				  V_Estagio_Protocolo =  CHECKSUM;
 8000418:	4b28      	ldr	r3, [pc, #160]	; (80004bc <Protocolo+0x1cc>)
 800041a:	220a      	movs	r2, #10
 800041c:	701a      	strb	r2, [r3, #0]
				  comand_high;
 800041e:	2390      	movs	r3, #144	; 0x90
 8000420:	05db      	lsls	r3, r3, #23
 8000422:	2201      	movs	r2, #1
 8000424:	2120      	movs	r1, #32
 8000426:	0018      	movs	r0, r3
 8000428:	f000 ff42 	bl	80012b0 <HAL_GPIO_WritePin>
				  contador +=1;
 800042c:	210e      	movs	r1, #14
 800042e:	187b      	adds	r3, r7, r1
 8000430:	881b      	ldrh	r3, [r3, #0]
 8000432:	3301      	adds	r3, #1
 8000434:	b29a      	uxth	r2, r3
 8000436:	187b      	adds	r3, r7, r1
 8000438:	801a      	strh	r2, [r3, #0]
			  }

			  //Apaga LED02
			  if (a[5] == 1)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	3305      	adds	r3, #5
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	2b01      	cmp	r3, #1
 8000442:	d110      	bne.n	8000466 <Protocolo+0x176>
			  {
				  V_Estagio_Protocolo =  CHECKSUM;
 8000444:	4b1d      	ldr	r3, [pc, #116]	; (80004bc <Protocolo+0x1cc>)
 8000446:	220a      	movs	r2, #10
 8000448:	701a      	strb	r2, [r3, #0]
				  comand_low;
 800044a:	2390      	movs	r3, #144	; 0x90
 800044c:	05db      	lsls	r3, r3, #23
 800044e:	2200      	movs	r2, #0
 8000450:	2120      	movs	r1, #32
 8000452:	0018      	movs	r0, r3
 8000454:	f000 ff2c 	bl	80012b0 <HAL_GPIO_WritePin>
				  contador +=1;
 8000458:	210e      	movs	r1, #14
 800045a:	187b      	adds	r3, r7, r1
 800045c:	881b      	ldrh	r3, [r3, #0]
 800045e:	3301      	adds	r3, #1
 8000460:	b29a      	uxth	r2, r3
 8000462:	187b      	adds	r3, r7, r1
 8000464:	801a      	strh	r2, [r3, #0]
			  }

			  //Pisca LED02 N vezes
			  if (a[5] == 2)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	3305      	adds	r3, #5
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2b02      	cmp	r3, #2
 800046e:	d119      	bne.n	80004a4 <Protocolo+0x1b4>
			  {

				  V_Estagio_Protocolo =  CHECKSUM;
 8000470:	4b12      	ldr	r3, [pc, #72]	; (80004bc <Protocolo+0x1cc>)
 8000472:	220a      	movs	r2, #10
 8000474:	701a      	strb	r2, [r3, #0]
				  PiscaLed(4, 500);
 8000476:	23fa      	movs	r3, #250	; 0xfa
 8000478:	005b      	lsls	r3, r3, #1
 800047a:	0019      	movs	r1, r3
 800047c:	2004      	movs	r0, #4
 800047e:	f7ff fecf 	bl	8000220 <PiscaLed>
				  contador +=1;
 8000482:	210e      	movs	r1, #14
 8000484:	187b      	adds	r3, r7, r1
 8000486:	881b      	ldrh	r3, [r3, #0]
 8000488:	3301      	adds	r3, #1
 800048a:	b29a      	uxth	r2, r3
 800048c:	187b      	adds	r3, r7, r1
 800048e:	801a      	strh	r2, [r3, #0]
 8000490:	e008      	b.n	80004a4 <Protocolo+0x1b4>
				break;
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	e006      	b.n	80004a4 <Protocolo+0x1b4>
			  break;
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	e004      	b.n	80004a4 <Protocolo+0x1b4>
				  break;
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	e002      	b.n	80004a4 <Protocolo+0x1b4>
				  break;
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	e000      	b.n	80004a4 <Protocolo+0x1b4>
				  break;
 80004a2:	46c0      	nop			; (mov r8, r8)

			  }
		  }
	  }

  HAL_UART_Transmit(&huart2,a,12,100);
 80004a4:	6879      	ldr	r1, [r7, #4]
 80004a6:	4807      	ldr	r0, [pc, #28]	; (80004c4 <Protocolo+0x1d4>)
 80004a8:	2364      	movs	r3, #100	; 0x64
 80004aa:	220c      	movs	r2, #12
 80004ac:	f001 fd70 	bl	8001f90 <HAL_UART_Transmit>

}
 80004b0:	46c0      	nop			; (mov r8, r8)
 80004b2:	46bd      	mov	sp, r7
 80004b4:	b004      	add	sp, #16
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	2000000c 	.word	0x2000000c
 80004bc:	2000008c 	.word	0x2000008c
 80004c0:	08003b70 	.word	0x08003b70
 80004c4:	200000b4 	.word	0x200000b4

080004c8 <Recebe_dados>:


void Recebe_dados(uint8_t *Informacao_Recebida,int Tamanho_string)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	6039      	str	r1, [r7, #0]

  unsigned char *Informacao_Tratada;

  Informacao_Tratada = 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	60bb      	str	r3, [r7, #8]

  Informacao_Tratada = (unsigned char*) malloc(Tamanho_string * sizeof(unsigned char));
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	0018      	movs	r0, r3
 80004da:	f003 f97d 	bl	80037d8 <malloc>
 80004de:	0003      	movs	r3, r0
 80004e0:	60bb      	str	r3, [r7, #8]


  for (int i = 0; i <= Tamanho_string; i++)
 80004e2:	2300      	movs	r3, #0
 80004e4:	60fb      	str	r3, [r7, #12]
 80004e6:	e00d      	b.n	8000504 <Recebe_dados+0x3c>
  {


	  if (Informacao_Recebida != NULL)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d007      	beq.n	80004fe <Recebe_dados+0x36>
	  {
		 Informacao_Tratada[i]  = Informacao_Recebida[i];
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	18d2      	adds	r2, r2, r3
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	68b9      	ldr	r1, [r7, #8]
 80004f8:	18cb      	adds	r3, r1, r3
 80004fa:	7812      	ldrb	r2, [r2, #0]
 80004fc:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i <= Tamanho_string; i++)
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	3301      	adds	r3, #1
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	68fa      	ldr	r2, [r7, #12]
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	429a      	cmp	r2, r3
 800050a:	dded      	ble.n	80004e8 <Recebe_dados+0x20>



  }

  Protocolo(Informacao_Tratada, Tamanho_string);
 800050c:	683a      	ldr	r2, [r7, #0]
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	0011      	movs	r1, r2
 8000512:	0018      	movs	r0, r3
 8000514:	f7ff feec 	bl	80002f0 <Protocolo>

}
 8000518:	46c0      	nop			; (mov r8, r8)
 800051a:	46bd      	mov	sp, r7
 800051c:	b004      	add	sp, #16
 800051e:	bd80      	pop	{r7, pc}

08000520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000520:	b5b0      	push	{r4, r5, r7, lr}
 8000522:	b09a      	sub	sp, #104	; 0x68
 8000524:	af00      	add	r7, sp, #0
	//int Tamanho_dado = 0;



  	//V_Estagio  = CHECKSUM;
	V_Estagio_Protocolo = CHECKSUM;
 8000526:	4b1d      	ldr	r3, [pc, #116]	; (800059c <main+0x7c>)
 8000528:	220a      	movs	r2, #10
 800052a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052c:	f000 fa92 	bl	8000a54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000530:	f000 f838 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000534:	f000 f8e2 	bl	80006fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000538:	f000 f8b0 	bl	800069c <MX_USART2_UART_Init>
  MX_CRC_Init();
 800053c:	f000 f88a 	bl	8000654 <MX_CRC_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  HAL_Delay(500);
 8000540:	23fa      	movs	r3, #250	; 0xfa
 8000542:	005b      	lsls	r3, r3, #1
 8000544:	0018      	movs	r0, r3
 8000546:	f000 fae9 	bl	8000b1c <HAL_Delay>

	  uint8_t rx_buffer[100] = {0};
 800054a:	003b      	movs	r3, r7
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	3304      	adds	r3, #4
 8000552:	2260      	movs	r2, #96	; 0x60
 8000554:	2100      	movs	r1, #0
 8000556:	0018      	movs	r0, r3
 8000558:	f003 f948 	bl	80037ec <memset>

	  HAL_Delay(500);
 800055c:	23fa      	movs	r3, #250	; 0xfa
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	0018      	movs	r0, r3
 8000562:	f000 fadb 	bl	8000b1c <HAL_Delay>

	  rx_status = HAL_UART_Receive_IT(&huart2,rx_buffer,sizeof rx_buffer);
 8000566:	2567      	movs	r5, #103	; 0x67
 8000568:	197c      	adds	r4, r7, r5
 800056a:	0039      	movs	r1, r7
 800056c:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <main+0x80>)
 800056e:	2264      	movs	r2, #100	; 0x64
 8000570:	0018      	movs	r0, r3
 8000572:	f001 fdb6 	bl	80020e2 <HAL_UART_Receive_IT>
 8000576:	0003      	movs	r3, r0
 8000578:	7023      	strb	r3, [r4, #0]

	  if (rx_status !=  HAL_ERROR && rx_buffer[0] == 'L')
 800057a:	197b      	adds	r3, r7, r5
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b01      	cmp	r3, #1
 8000580:	d0de      	beq.n	8000540 <main+0x20>
 8000582:	003b      	movs	r3, r7
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b4c      	cmp	r3, #76	; 0x4c
 8000588:	d1da      	bne.n	8000540 <main+0x20>
	  {

		  Recebe_dados(rx_buffer,rx_buffer[4]+1);
 800058a:	003b      	movs	r3, r7
 800058c:	791b      	ldrb	r3, [r3, #4]
 800058e:	1c5a      	adds	r2, r3, #1
 8000590:	003b      	movs	r3, r7
 8000592:	0011      	movs	r1, r2
 8000594:	0018      	movs	r0, r3
 8000596:	f7ff ff97 	bl	80004c8 <Recebe_dados>
  {
 800059a:	e7d1      	b.n	8000540 <main+0x20>
 800059c:	2000008c 	.word	0x2000008c
 80005a0:	200000b4 	.word	0x200000b4

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b590      	push	{r4, r7, lr}
 80005a6:	b099      	sub	sp, #100	; 0x64
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	242c      	movs	r4, #44	; 0x2c
 80005ac:	193b      	adds	r3, r7, r4
 80005ae:	0018      	movs	r0, r3
 80005b0:	2334      	movs	r3, #52	; 0x34
 80005b2:	001a      	movs	r2, r3
 80005b4:	2100      	movs	r1, #0
 80005b6:	f003 f919 	bl	80037ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ba:	231c      	movs	r3, #28
 80005bc:	18fb      	adds	r3, r7, r3
 80005be:	0018      	movs	r0, r3
 80005c0:	2310      	movs	r3, #16
 80005c2:	001a      	movs	r2, r3
 80005c4:	2100      	movs	r1, #0
 80005c6:	f003 f911 	bl	80037ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005ca:	003b      	movs	r3, r7
 80005cc:	0018      	movs	r0, r3
 80005ce:	231c      	movs	r3, #28
 80005d0:	001a      	movs	r2, r3
 80005d2:	2100      	movs	r1, #0
 80005d4:	f003 f90a 	bl	80037ec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d8:	0021      	movs	r1, r4
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	2202      	movs	r2, #2
 80005de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	2201      	movs	r2, #1
 80005e4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2210      	movs	r2, #16
 80005ea:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2200      	movs	r2, #0
 80005f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	0018      	movs	r0, r3
 80005f6:	f000 fe79 	bl	80012ec <HAL_RCC_OscConfig>
 80005fa:	1e03      	subs	r3, r0, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80005fe:	f000 f8b5 	bl	800076c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000602:	211c      	movs	r1, #28
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2207      	movs	r2, #7
 8000608:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800060a:	187b      	adds	r3, r7, r1
 800060c:	2200      	movs	r2, #0
 800060e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000610:	187b      	adds	r3, r7, r1
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000616:	187b      	adds	r3, r7, r1
 8000618:	2200      	movs	r2, #0
 800061a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2100      	movs	r1, #0
 8000620:	0018      	movs	r0, r3
 8000622:	f001 f9e9 	bl	80019f8 <HAL_RCC_ClockConfig>
 8000626:	1e03      	subs	r3, r0, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800062a:	f000 f89f 	bl	800076c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800062e:	003b      	movs	r3, r7
 8000630:	2202      	movs	r2, #2
 8000632:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000634:	003b      	movs	r3, r7
 8000636:	2200      	movs	r2, #0
 8000638:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800063a:	003b      	movs	r3, r7
 800063c:	0018      	movs	r0, r3
 800063e:	f001 fb55 	bl	8001cec <HAL_RCCEx_PeriphCLKConfig>
 8000642:	1e03      	subs	r3, r0, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000646:	f000 f891 	bl	800076c <Error_Handler>
  }
}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	b019      	add	sp, #100	; 0x64
 8000650:	bd90      	pop	{r4, r7, pc}
	...

08000654 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000658:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <MX_CRC_Init+0x40>)
 800065a:	4a0f      	ldr	r2, [pc, #60]	; (8000698 <MX_CRC_Init+0x44>)
 800065c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800065e:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <MX_CRC_Init+0x40>)
 8000660:	2200      	movs	r2, #0
 8000662:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000664:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <MX_CRC_Init+0x40>)
 8000666:	2200      	movs	r2, #0
 8000668:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800066a:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <MX_CRC_Init+0x40>)
 800066c:	2200      	movs	r2, #0
 800066e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <MX_CRC_Init+0x40>)
 8000672:	2200      	movs	r2, #0
 8000674:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000676:	4b07      	ldr	r3, [pc, #28]	; (8000694 <MX_CRC_Init+0x40>)
 8000678:	2201      	movs	r2, #1
 800067a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <MX_CRC_Init+0x40>)
 800067e:	0018      	movs	r0, r3
 8000680:	f000 fb4e 	bl	8000d20 <HAL_CRC_Init>
 8000684:	1e03      	subs	r3, r0, #0
 8000686:	d001      	beq.n	800068c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000688:	f000 f870 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800068c:	46c0      	nop			; (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	20000090 	.word	0x20000090
 8000698:	40023000 	.word	0x40023000

0800069c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a0:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006a2:	4a15      	ldr	r2, [pc, #84]	; (80006f8 <MX_USART2_UART_Init+0x5c>)
 80006a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006a8:	2296      	movs	r2, #150	; 0x96
 80006aa:	0192      	lsls	r2, r2, #6
 80006ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006c2:	220c      	movs	r2, #12
 80006c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006da:	2200      	movs	r2, #0
 80006dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006de:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006e0:	0018      	movs	r0, r3
 80006e2:	f001 fc01 	bl	8001ee8 <HAL_UART_Init>
 80006e6:	1e03      	subs	r3, r0, #0
 80006e8:	d001      	beq.n	80006ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006ea:	f000 f83f 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	200000b4 	.word	0x200000b4
 80006f8:	40004400 	.word	0x40004400

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	0018      	movs	r0, r3
 8000706:	2314      	movs	r3, #20
 8000708:	001a      	movs	r2, r3
 800070a:	2100      	movs	r1, #0
 800070c:	f003 f86e 	bl	80037ec <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000710:	4b15      	ldr	r3, [pc, #84]	; (8000768 <MX_GPIO_Init+0x6c>)
 8000712:	695a      	ldr	r2, [r3, #20]
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_GPIO_Init+0x6c>)
 8000716:	2180      	movs	r1, #128	; 0x80
 8000718:	0289      	lsls	r1, r1, #10
 800071a:	430a      	orrs	r2, r1
 800071c:	615a      	str	r2, [r3, #20]
 800071e:	4b12      	ldr	r3, [pc, #72]	; (8000768 <MX_GPIO_Init+0x6c>)
 8000720:	695a      	ldr	r2, [r3, #20]
 8000722:	2380      	movs	r3, #128	; 0x80
 8000724:	029b      	lsls	r3, r3, #10
 8000726:	4013      	ands	r3, r2
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED02_GPIO_Port, LED02_Pin, GPIO_PIN_RESET);
 800072c:	2390      	movs	r3, #144	; 0x90
 800072e:	05db      	lsls	r3, r3, #23
 8000730:	2200      	movs	r2, #0
 8000732:	2120      	movs	r1, #32
 8000734:	0018      	movs	r0, r3
 8000736:	f000 fdbb 	bl	80012b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED02_Pin */
  GPIO_InitStruct.Pin = LED02_Pin;
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2220      	movs	r2, #32
 800073e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2201      	movs	r2, #1
 8000744:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED02_GPIO_Port, &GPIO_InitStruct);
 8000752:	1d3a      	adds	r2, r7, #4
 8000754:	2390      	movs	r3, #144	; 0x90
 8000756:	05db      	lsls	r3, r3, #23
 8000758:	0011      	movs	r1, r2
 800075a:	0018      	movs	r0, r3
 800075c:	f000 fc30 	bl	8000fc0 <HAL_GPIO_Init>

}
 8000760:	46c0      	nop			; (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	b006      	add	sp, #24
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40021000 	.word	0x40021000

0800076c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000770:	b672      	cpsid	i
}
 8000772:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000774:	e7fe      	b.n	8000774 <Error_Handler+0x8>
	...

08000778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <HAL_MspInit+0x44>)
 8000780:	699a      	ldr	r2, [r3, #24]
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <HAL_MspInit+0x44>)
 8000784:	2101      	movs	r1, #1
 8000786:	430a      	orrs	r2, r1
 8000788:	619a      	str	r2, [r3, #24]
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <HAL_MspInit+0x44>)
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	2201      	movs	r2, #1
 8000790:	4013      	ands	r3, r2
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <HAL_MspInit+0x44>)
 8000798:	69da      	ldr	r2, [r3, #28]
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <HAL_MspInit+0x44>)
 800079c:	2180      	movs	r1, #128	; 0x80
 800079e:	0549      	lsls	r1, r1, #21
 80007a0:	430a      	orrs	r2, r1
 80007a2:	61da      	str	r2, [r3, #28]
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <HAL_MspInit+0x44>)
 80007a6:	69da      	ldr	r2, [r3, #28]
 80007a8:	2380      	movs	r3, #128	; 0x80
 80007aa:	055b      	lsls	r3, r3, #21
 80007ac:	4013      	ands	r3, r2
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	46bd      	mov	sp, r7
 80007b6:	b002      	add	sp, #8
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	40021000 	.word	0x40021000

080007c0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a09      	ldr	r2, [pc, #36]	; (80007f4 <HAL_CRC_MspInit+0x34>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d10b      	bne.n	80007ea <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <HAL_CRC_MspInit+0x38>)
 80007d4:	695a      	ldr	r2, [r3, #20]
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <HAL_CRC_MspInit+0x38>)
 80007d8:	2140      	movs	r1, #64	; 0x40
 80007da:	430a      	orrs	r2, r1
 80007dc:	615a      	str	r2, [r3, #20]
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <HAL_CRC_MspInit+0x38>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	2240      	movs	r2, #64	; 0x40
 80007e4:	4013      	ands	r3, r2
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	b004      	add	sp, #16
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	40023000 	.word	0x40023000
 80007f8:	40021000 	.word	0x40021000

080007fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007fc:	b590      	push	{r4, r7, lr}
 80007fe:	b08b      	sub	sp, #44	; 0x2c
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	2414      	movs	r4, #20
 8000806:	193b      	adds	r3, r7, r4
 8000808:	0018      	movs	r0, r3
 800080a:	2314      	movs	r3, #20
 800080c:	001a      	movs	r2, r3
 800080e:	2100      	movs	r1, #0
 8000810:	f002 ffec 	bl	80037ec <memset>
  if(huart->Instance==USART2)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a20      	ldr	r2, [pc, #128]	; (800089c <HAL_UART_MspInit+0xa0>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d13a      	bne.n	8000894 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800081e:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <HAL_UART_MspInit+0xa4>)
 8000820:	69da      	ldr	r2, [r3, #28]
 8000822:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <HAL_UART_MspInit+0xa4>)
 8000824:	2180      	movs	r1, #128	; 0x80
 8000826:	0289      	lsls	r1, r1, #10
 8000828:	430a      	orrs	r2, r1
 800082a:	61da      	str	r2, [r3, #28]
 800082c:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <HAL_UART_MspInit+0xa4>)
 800082e:	69da      	ldr	r2, [r3, #28]
 8000830:	2380      	movs	r3, #128	; 0x80
 8000832:	029b      	lsls	r3, r3, #10
 8000834:	4013      	ands	r3, r2
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <HAL_UART_MspInit+0xa4>)
 800083c:	695a      	ldr	r2, [r3, #20]
 800083e:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <HAL_UART_MspInit+0xa4>)
 8000840:	2180      	movs	r1, #128	; 0x80
 8000842:	0289      	lsls	r1, r1, #10
 8000844:	430a      	orrs	r2, r1
 8000846:	615a      	str	r2, [r3, #20]
 8000848:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <HAL_UART_MspInit+0xa4>)
 800084a:	695a      	ldr	r2, [r3, #20]
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	029b      	lsls	r3, r3, #10
 8000850:	4013      	ands	r3, r2
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = TX02_Pin|RX02_Pin;
 8000856:	0021      	movs	r1, r4
 8000858:	187b      	adds	r3, r7, r1
 800085a:	220c      	movs	r2, #12
 800085c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2202      	movs	r2, #2
 8000862:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2203      	movs	r2, #3
 800086e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000870:	187b      	adds	r3, r7, r1
 8000872:	2201      	movs	r2, #1
 8000874:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	187a      	adds	r2, r7, r1
 8000878:	2390      	movs	r3, #144	; 0x90
 800087a:	05db      	lsls	r3, r3, #23
 800087c:	0011      	movs	r1, r2
 800087e:	0018      	movs	r0, r3
 8000880:	f000 fb9e 	bl	8000fc0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000884:	2200      	movs	r2, #0
 8000886:	2100      	movs	r1, #0
 8000888:	201c      	movs	r0, #28
 800088a:	f000 fa17 	bl	8000cbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800088e:	201c      	movs	r0, #28
 8000890:	f000 fa29 	bl	8000ce6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000894:	46c0      	nop			; (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	b00b      	add	sp, #44	; 0x2c
 800089a:	bd90      	pop	{r4, r7, pc}
 800089c:	40004400 	.word	0x40004400
 80008a0:	40021000 	.word	0x40021000

080008a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <NMI_Handler+0x4>

080008aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <HardFault_Handler+0x4>

080008b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008b4:	46c0      	nop			; (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c8:	f000 f90c 	bl	8000ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008cc:	46c0      	nop			; (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
	...

080008d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008d8:	4b03      	ldr	r3, [pc, #12]	; (80008e8 <USART2_IRQHandler+0x14>)
 80008da:	0018      	movs	r0, r3
 80008dc:	f001 fc62 	bl	80021a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	200000b4 	.word	0x200000b4

080008ec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	e00a      	b.n	8000914 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008fe:	e000      	b.n	8000902 <_read+0x16>
 8000900:	bf00      	nop
 8000902:	0001      	movs	r1, r0
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	1c5a      	adds	r2, r3, #1
 8000908:	60ba      	str	r2, [r7, #8]
 800090a:	b2ca      	uxtb	r2, r1
 800090c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	3301      	adds	r3, #1
 8000912:	617b      	str	r3, [r7, #20]
 8000914:	697a      	ldr	r2, [r7, #20]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	429a      	cmp	r2, r3
 800091a:	dbf0      	blt.n	80008fe <_read+0x12>
	}

return len;
 800091c:	687b      	ldr	r3, [r7, #4]
}
 800091e:	0018      	movs	r0, r3
 8000920:	46bd      	mov	sp, r7
 8000922:	b006      	add	sp, #24
 8000924:	bd80      	pop	{r7, pc}

08000926 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b086      	sub	sp, #24
 800092a:	af00      	add	r7, sp, #0
 800092c:	60f8      	str	r0, [r7, #12]
 800092e:	60b9      	str	r1, [r7, #8]
 8000930:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
 8000936:	e009      	b.n	800094c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	1c5a      	adds	r2, r3, #1
 800093c:	60ba      	str	r2, [r7, #8]
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	0018      	movs	r0, r3
 8000942:	e000      	b.n	8000946 <_write+0x20>
 8000944:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	3301      	adds	r3, #1
 800094a:	617b      	str	r3, [r7, #20]
 800094c:	697a      	ldr	r2, [r7, #20]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	429a      	cmp	r2, r3
 8000952:	dbf1      	blt.n	8000938 <_write+0x12>
	}
	return len;
 8000954:	687b      	ldr	r3, [r7, #4]
}
 8000956:	0018      	movs	r0, r3
 8000958:	46bd      	mov	sp, r7
 800095a:	b006      	add	sp, #24
 800095c:	bd80      	pop	{r7, pc}

0800095e <_close>:

int _close(int file)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
	return -1;
 8000966:	2301      	movs	r3, #1
 8000968:	425b      	negs	r3, r3
}
 800096a:	0018      	movs	r0, r3
 800096c:	46bd      	mov	sp, r7
 800096e:	b002      	add	sp, #8
 8000970:	bd80      	pop	{r7, pc}

08000972 <_lseek>:
{
	return 1;
}

int _lseek(int file, int ptr, int dir)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b084      	sub	sp, #16
 8000976:	af00      	add	r7, sp, #0
 8000978:	60f8      	str	r0, [r7, #12]
 800097a:	60b9      	str	r1, [r7, #8]
 800097c:	607a      	str	r2, [r7, #4]
	return 0;
 800097e:	2300      	movs	r3, #0
}
 8000980:	0018      	movs	r0, r3
 8000982:	46bd      	mov	sp, r7
 8000984:	b004      	add	sp, #16
 8000986:	bd80      	pop	{r7, pc}

08000988 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000990:	4a14      	ldr	r2, [pc, #80]	; (80009e4 <_sbrk+0x5c>)
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <_sbrk+0x60>)
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800099c:	4b13      	ldr	r3, [pc, #76]	; (80009ec <_sbrk+0x64>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d102      	bne.n	80009aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <_sbrk+0x64>)
 80009a6:	4a12      	ldr	r2, [pc, #72]	; (80009f0 <_sbrk+0x68>)
 80009a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <_sbrk+0x64>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	18d3      	adds	r3, r2, r3
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d207      	bcs.n	80009c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b8:	f002 fcfc 	bl	80033b4 <__errno>
 80009bc:	0003      	movs	r3, r0
 80009be:	220c      	movs	r2, #12
 80009c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009c2:	2301      	movs	r3, #1
 80009c4:	425b      	negs	r3, r3
 80009c6:	e009      	b.n	80009dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <_sbrk+0x64>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ce:	4b07      	ldr	r3, [pc, #28]	; (80009ec <_sbrk+0x64>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	18d2      	adds	r2, r2, r3
 80009d6:	4b05      	ldr	r3, [pc, #20]	; (80009ec <_sbrk+0x64>)
 80009d8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80009da:	68fb      	ldr	r3, [r7, #12]
}
 80009dc:	0018      	movs	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	b006      	add	sp, #24
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20004000 	.word	0x20004000
 80009e8:	00000400 	.word	0x00000400
 80009ec:	20000138 	.word	0x20000138
 80009f0:	20000150 	.word	0x20000150

080009f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80009f8:	46c0      	nop			; (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a00:	480d      	ldr	r0, [pc, #52]	; (8000a38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a02:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a04:	480d      	ldr	r0, [pc, #52]	; (8000a3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a06:	490e      	ldr	r1, [pc, #56]	; (8000a40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a08:	4a0e      	ldr	r2, [pc, #56]	; (8000a44 <LoopForever+0xe>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a0c:	e002      	b.n	8000a14 <LoopCopyDataInit>

08000a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a12:	3304      	adds	r3, #4

08000a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a18:	d3f9      	bcc.n	8000a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1a:	4a0b      	ldr	r2, [pc, #44]	; (8000a48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a1c:	4c0b      	ldr	r4, [pc, #44]	; (8000a4c <LoopForever+0x16>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a20:	e001      	b.n	8000a26 <LoopFillZerobss>

08000a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a24:	3204      	adds	r2, #4

08000a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a28:	d3fb      	bcc.n	8000a22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a2a:	f7ff ffe3 	bl	80009f4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a2e:	f002 feab 	bl	8003788 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a32:	f7ff fd75 	bl	8000520 <main>

08000a36 <LoopForever>:

LoopForever:
    b LoopForever
 8000a36:	e7fe      	b.n	8000a36 <LoopForever>
  ldr   r0, =_estack
 8000a38:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a40:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a44:	08003c20 	.word	0x08003c20
  ldr r2, =_sbss
 8000a48:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a4c:	20000150 	.word	0x20000150

08000a50 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a50:	e7fe      	b.n	8000a50 <ADC1_COMP_IRQHandler>
	...

08000a54 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a58:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <HAL_Init+0x24>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_Init+0x24>)
 8000a5e:	2110      	movs	r1, #16
 8000a60:	430a      	orrs	r2, r1
 8000a62:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a64:	2003      	movs	r0, #3
 8000a66:	f000 f809 	bl	8000a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a6a:	f7ff fe85 	bl	8000778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a6e:	2300      	movs	r3, #0
}
 8000a70:	0018      	movs	r0, r3
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	40022000 	.word	0x40022000

08000a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a7c:	b590      	push	{r4, r7, lr}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a84:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <HAL_InitTick+0x5c>)
 8000a86:	681c      	ldr	r4, [r3, #0]
 8000a88:	4b14      	ldr	r3, [pc, #80]	; (8000adc <HAL_InitTick+0x60>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	0019      	movs	r1, r3
 8000a8e:	23fa      	movs	r3, #250	; 0xfa
 8000a90:	0098      	lsls	r0, r3, #2
 8000a92:	f7ff fb39 	bl	8000108 <__udivsi3>
 8000a96:	0003      	movs	r3, r0
 8000a98:	0019      	movs	r1, r3
 8000a9a:	0020      	movs	r0, r4
 8000a9c:	f7ff fb34 	bl	8000108 <__udivsi3>
 8000aa0:	0003      	movs	r3, r0
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f000 f92f 	bl	8000d06 <HAL_SYSTICK_Config>
 8000aa8:	1e03      	subs	r3, r0, #0
 8000aaa:	d001      	beq.n	8000ab0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000aac:	2301      	movs	r3, #1
 8000aae:	e00f      	b.n	8000ad0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2b03      	cmp	r3, #3
 8000ab4:	d80b      	bhi.n	8000ace <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab6:	6879      	ldr	r1, [r7, #4]
 8000ab8:	2301      	movs	r3, #1
 8000aba:	425b      	negs	r3, r3
 8000abc:	2200      	movs	r2, #0
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f000 f8fc 	bl	8000cbc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_InitTick+0x64>)
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000aca:	2300      	movs	r3, #0
 8000acc:	e000      	b.n	8000ad0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
}
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	b003      	add	sp, #12
 8000ad6:	bd90      	pop	{r4, r7, pc}
 8000ad8:	20000000 	.word	0x20000000
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	20000004 	.word	0x20000004

08000ae4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae8:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <HAL_IncTick+0x1c>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	001a      	movs	r2, r3
 8000aee:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <HAL_IncTick+0x20>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	18d2      	adds	r2, r2, r3
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <HAL_IncTick+0x20>)
 8000af6:	601a      	str	r2, [r3, #0]
}
 8000af8:	46c0      	nop			; (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	20000008 	.word	0x20000008
 8000b04:	2000013c 	.word	0x2000013c

08000b08 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b0c:	4b02      	ldr	r3, [pc, #8]	; (8000b18 <HAL_GetTick+0x10>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
}
 8000b10:	0018      	movs	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	2000013c 	.word	0x2000013c

08000b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b24:	f7ff fff0 	bl	8000b08 <HAL_GetTick>
 8000b28:	0003      	movs	r3, r0
 8000b2a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	3301      	adds	r3, #1
 8000b34:	d005      	beq.n	8000b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b36:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <HAL_Delay+0x44>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	001a      	movs	r2, r3
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	189b      	adds	r3, r3, r2
 8000b40:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	f7ff ffe0 	bl	8000b08 <HAL_GetTick>
 8000b48:	0002      	movs	r2, r0
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d8f7      	bhi.n	8000b44 <HAL_Delay+0x28>
  {
  }
}
 8000b54:	46c0      	nop			; (mov r8, r8)
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	b004      	add	sp, #16
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	20000008 	.word	0x20000008

08000b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	0002      	movs	r2, r0
 8000b6c:	1dfb      	adds	r3, r7, #7
 8000b6e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b70:	1dfb      	adds	r3, r7, #7
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b7f      	cmp	r3, #127	; 0x7f
 8000b76:	d809      	bhi.n	8000b8c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b78:	1dfb      	adds	r3, r7, #7
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	001a      	movs	r2, r3
 8000b7e:	231f      	movs	r3, #31
 8000b80:	401a      	ands	r2, r3
 8000b82:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <__NVIC_EnableIRQ+0x30>)
 8000b84:	2101      	movs	r1, #1
 8000b86:	4091      	lsls	r1, r2
 8000b88:	000a      	movs	r2, r1
 8000b8a:	601a      	str	r2, [r3, #0]
  }
}
 8000b8c:	46c0      	nop			; (mov r8, r8)
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	b002      	add	sp, #8
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	e000e100 	.word	0xe000e100

08000b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b98:	b590      	push	{r4, r7, lr}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	0002      	movs	r2, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	1dfb      	adds	r3, r7, #7
 8000ba4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ba6:	1dfb      	adds	r3, r7, #7
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2b7f      	cmp	r3, #127	; 0x7f
 8000bac:	d828      	bhi.n	8000c00 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bae:	4a2f      	ldr	r2, [pc, #188]	; (8000c6c <__NVIC_SetPriority+0xd4>)
 8000bb0:	1dfb      	adds	r3, r7, #7
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	b25b      	sxtb	r3, r3
 8000bb6:	089b      	lsrs	r3, r3, #2
 8000bb8:	33c0      	adds	r3, #192	; 0xc0
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	589b      	ldr	r3, [r3, r2]
 8000bbe:	1dfa      	adds	r2, r7, #7
 8000bc0:	7812      	ldrb	r2, [r2, #0]
 8000bc2:	0011      	movs	r1, r2
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	400a      	ands	r2, r1
 8000bc8:	00d2      	lsls	r2, r2, #3
 8000bca:	21ff      	movs	r1, #255	; 0xff
 8000bcc:	4091      	lsls	r1, r2
 8000bce:	000a      	movs	r2, r1
 8000bd0:	43d2      	mvns	r2, r2
 8000bd2:	401a      	ands	r2, r3
 8000bd4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	019b      	lsls	r3, r3, #6
 8000bda:	22ff      	movs	r2, #255	; 0xff
 8000bdc:	401a      	ands	r2, r3
 8000bde:	1dfb      	adds	r3, r7, #7
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	0018      	movs	r0, r3
 8000be4:	2303      	movs	r3, #3
 8000be6:	4003      	ands	r3, r0
 8000be8:	00db      	lsls	r3, r3, #3
 8000bea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bec:	481f      	ldr	r0, [pc, #124]	; (8000c6c <__NVIC_SetPriority+0xd4>)
 8000bee:	1dfb      	adds	r3, r7, #7
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	b25b      	sxtb	r3, r3
 8000bf4:	089b      	lsrs	r3, r3, #2
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	33c0      	adds	r3, #192	; 0xc0
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bfe:	e031      	b.n	8000c64 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c00:	4a1b      	ldr	r2, [pc, #108]	; (8000c70 <__NVIC_SetPriority+0xd8>)
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	0019      	movs	r1, r3
 8000c08:	230f      	movs	r3, #15
 8000c0a:	400b      	ands	r3, r1
 8000c0c:	3b08      	subs	r3, #8
 8000c0e:	089b      	lsrs	r3, r3, #2
 8000c10:	3306      	adds	r3, #6
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	18d3      	adds	r3, r2, r3
 8000c16:	3304      	adds	r3, #4
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	1dfa      	adds	r2, r7, #7
 8000c1c:	7812      	ldrb	r2, [r2, #0]
 8000c1e:	0011      	movs	r1, r2
 8000c20:	2203      	movs	r2, #3
 8000c22:	400a      	ands	r2, r1
 8000c24:	00d2      	lsls	r2, r2, #3
 8000c26:	21ff      	movs	r1, #255	; 0xff
 8000c28:	4091      	lsls	r1, r2
 8000c2a:	000a      	movs	r2, r1
 8000c2c:	43d2      	mvns	r2, r2
 8000c2e:	401a      	ands	r2, r3
 8000c30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	019b      	lsls	r3, r3, #6
 8000c36:	22ff      	movs	r2, #255	; 0xff
 8000c38:	401a      	ands	r2, r3
 8000c3a:	1dfb      	adds	r3, r7, #7
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	0018      	movs	r0, r3
 8000c40:	2303      	movs	r3, #3
 8000c42:	4003      	ands	r3, r0
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c48:	4809      	ldr	r0, [pc, #36]	; (8000c70 <__NVIC_SetPriority+0xd8>)
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	001c      	movs	r4, r3
 8000c50:	230f      	movs	r3, #15
 8000c52:	4023      	ands	r3, r4
 8000c54:	3b08      	subs	r3, #8
 8000c56:	089b      	lsrs	r3, r3, #2
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	3306      	adds	r3, #6
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	18c3      	adds	r3, r0, r3
 8000c60:	3304      	adds	r3, #4
 8000c62:	601a      	str	r2, [r3, #0]
}
 8000c64:	46c0      	nop			; (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	b003      	add	sp, #12
 8000c6a:	bd90      	pop	{r4, r7, pc}
 8000c6c:	e000e100 	.word	0xe000e100
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	1e5a      	subs	r2, r3, #1
 8000c80:	2380      	movs	r3, #128	; 0x80
 8000c82:	045b      	lsls	r3, r3, #17
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d301      	bcc.n	8000c8c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e010      	b.n	8000cae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c8c:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <SysTick_Config+0x44>)
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	3a01      	subs	r2, #1
 8000c92:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c94:	2301      	movs	r3, #1
 8000c96:	425b      	negs	r3, r3
 8000c98:	2103      	movs	r1, #3
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f7ff ff7c 	bl	8000b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <SysTick_Config+0x44>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca6:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <SysTick_Config+0x44>)
 8000ca8:	2207      	movs	r2, #7
 8000caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	0018      	movs	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b002      	add	sp, #8
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	e000e010 	.word	0xe000e010

08000cbc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
 8000cc6:	210f      	movs	r1, #15
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	1c02      	adds	r2, r0, #0
 8000ccc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	187b      	adds	r3, r7, r1
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	b25b      	sxtb	r3, r3
 8000cd6:	0011      	movs	r1, r2
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f7ff ff5d 	bl	8000b98 <__NVIC_SetPriority>
}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	b004      	add	sp, #16
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	0002      	movs	r2, r0
 8000cee:	1dfb      	adds	r3, r7, #7
 8000cf0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf2:	1dfb      	adds	r3, r7, #7
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	b25b      	sxtb	r3, r3
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f7ff ff33 	bl	8000b64 <__NVIC_EnableIRQ>
}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b002      	add	sp, #8
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	0018      	movs	r0, r3
 8000d12:	f7ff ffaf 	bl	8000c74 <SysTick_Config>
 8000d16:	0003      	movs	r3, r0
}
 8000d18:	0018      	movs	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b002      	add	sp, #8
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d101      	bne.n	8000d32 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e056      	b.n	8000de0 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	7f5b      	ldrb	r3, [r3, #29]
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d106      	bne.n	8000d4a <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	0018      	movs	r0, r3
 8000d46:	f7ff fd3b 	bl	80007c0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	775a      	strb	r2, [r3, #29]

#if defined(CRC_POL_POL)
  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	791b      	ldrb	r3, [r3, #4]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d10c      	bne.n	8000d72 <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a22      	ldr	r2, [pc, #136]	; (8000de8 <HAL_CRC_Init+0xc8>)
 8000d5e:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	689a      	ldr	r2, [r3, #8]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2118      	movs	r1, #24
 8000d6c:	438a      	bics	r2, r1
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	e00b      	b.n	8000d8a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6899      	ldr	r1, [r3, #8]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	68da      	ldr	r2, [r3, #12]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f000 f835 	bl	8000dec <HAL_CRCEx_Polynomial_Set>
 8000d82:	1e03      	subs	r3, r0, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e02a      	b.n	8000de0 <HAL_CRC_Init+0xc0>
#endif /* CRC_POL_POL */

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	795b      	ldrb	r3, [r3, #5]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d105      	bne.n	8000d9e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2201      	movs	r2, #1
 8000d98:	4252      	negs	r2, r2
 8000d9a:	611a      	str	r2, [r3, #16]
 8000d9c:	e004      	b.n	8000da8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	6912      	ldr	r2, [r2, #16]
 8000da6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	2260      	movs	r2, #96	; 0x60
 8000db0:	4393      	bics	r3, r2
 8000db2:	0019      	movs	r1, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	695a      	ldr	r2, [r3, #20]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	2280      	movs	r2, #128	; 0x80
 8000dc8:	4393      	bics	r3, r2
 8000dca:	0019      	movs	r1, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	699a      	ldr	r2, [r3, #24]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2201      	movs	r2, #1
 8000ddc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000dde:	2300      	movs	r3, #0
}
 8000de0:	0018      	movs	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	b002      	add	sp, #8
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	04c11db7 	.word	0x04c11db7

08000dec <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000df8:	2317      	movs	r3, #23
 8000dfa:	18fb      	adds	r3, r7, r3
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000e00:	231f      	movs	r3, #31
 8000e02:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000e04:	46c0      	nop			; (mov r8, r8)
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	1e5a      	subs	r2, r3, #1
 8000e0a:	613a      	str	r2, [r7, #16]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d008      	beq.n	8000e22 <HAL_CRCEx_Polynomial_Set+0x36>
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	221f      	movs	r2, #31
 8000e14:	4013      	ands	r3, r2
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	40da      	lsrs	r2, r3
 8000e1a:	0013      	movs	r3, r2
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	4013      	ands	r3, r2
 8000e20:	d0f1      	beq.n	8000e06 <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2b18      	cmp	r3, #24
 8000e26:	d00f      	beq.n	8000e48 <HAL_CRCEx_Polynomial_Set+0x5c>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b18      	cmp	r3, #24
 8000e2c:	d824      	bhi.n	8000e78 <HAL_CRCEx_Polynomial_Set+0x8c>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2b10      	cmp	r3, #16
 8000e32:	d011      	beq.n	8000e58 <HAL_CRCEx_Polynomial_Set+0x6c>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2b10      	cmp	r3, #16
 8000e38:	d81e      	bhi.n	8000e78 <HAL_CRCEx_Polynomial_Set+0x8c>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d020      	beq.n	8000e82 <HAL_CRCEx_Polynomial_Set+0x96>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2b08      	cmp	r3, #8
 8000e44:	d010      	beq.n	8000e68 <HAL_CRCEx_Polynomial_Set+0x7c>
 8000e46:	e017      	b.n	8000e78 <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	2b06      	cmp	r3, #6
 8000e4c:	d91b      	bls.n	8000e86 <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 8000e4e:	2317      	movs	r3, #23
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	2201      	movs	r2, #1
 8000e54:	701a      	strb	r2, [r3, #0]
      }
      break;
 8000e56:	e016      	b.n	8000e86 <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	2b07      	cmp	r3, #7
 8000e5c:	d915      	bls.n	8000e8a <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 8000e5e:	2317      	movs	r3, #23
 8000e60:	18fb      	adds	r3, r7, r3
 8000e62:	2201      	movs	r2, #1
 8000e64:	701a      	strb	r2, [r3, #0]
      }
      break;
 8000e66:	e010      	b.n	8000e8a <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	2b0f      	cmp	r3, #15
 8000e6c:	d90f      	bls.n	8000e8e <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 8000e6e:	2317      	movs	r3, #23
 8000e70:	18fb      	adds	r3, r7, r3
 8000e72:	2201      	movs	r2, #1
 8000e74:	701a      	strb	r2, [r3, #0]
      }
      break;
 8000e76:	e00a      	b.n	8000e8e <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8000e78:	2317      	movs	r3, #23
 8000e7a:	18fb      	adds	r3, r7, r3
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	701a      	strb	r2, [r3, #0]
      break;
 8000e80:	e006      	b.n	8000e90 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	e004      	b.n	8000e90 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	e002      	b.n	8000e90 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	e000      	b.n	8000e90 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8000e8e:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 8000e90:	2317      	movs	r3, #23
 8000e92:	18fb      	adds	r3, r7, r3
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d10e      	bne.n	8000eb8 <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	2218      	movs	r2, #24
 8000eaa:	4393      	bics	r3, r2
 8000eac:	0019      	movs	r1, r3
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000eb8:	2317      	movs	r3, #23
 8000eba:	18fb      	adds	r3, r7, r3
 8000ebc:	781b      	ldrb	r3, [r3, #0]
}
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b006      	add	sp, #24
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2221      	movs	r2, #33	; 0x21
 8000ed2:	5c9b      	ldrb	r3, [r3, r2]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d008      	beq.n	8000eec <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2204      	movs	r2, #4
 8000ede:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2220      	movs	r2, #32
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e020      	b.n	8000f2e <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	210e      	movs	r1, #14
 8000ef8:	438a      	bics	r2, r1
 8000efa:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2101      	movs	r1, #1
 8000f08:	438a      	bics	r2, r1
 8000f0a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f14:	2101      	movs	r1, #1
 8000f16:	4091      	lsls	r1, r2
 8000f18:	000a      	movs	r2, r1
 8000f1a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2221      	movs	r2, #33	; 0x21
 8000f20:	2101      	movs	r1, #1
 8000f22:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2220      	movs	r2, #32
 8000f28:	2100      	movs	r1, #0
 8000f2a:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	0018      	movs	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	b002      	add	sp, #8
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b084      	sub	sp, #16
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f3e:	210f      	movs	r1, #15
 8000f40:	187b      	adds	r3, r7, r1
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2221      	movs	r2, #33	; 0x21
 8000f4a:	5c9b      	ldrb	r3, [r3, r2]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d006      	beq.n	8000f60 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2204      	movs	r2, #4
 8000f56:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f58:	187b      	adds	r3, r7, r1
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	701a      	strb	r2, [r3, #0]
 8000f5e:	e028      	b.n	8000fb2 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	210e      	movs	r1, #14
 8000f6c:	438a      	bics	r2, r1
 8000f6e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	438a      	bics	r2, r1
 8000f7e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f88:	2101      	movs	r1, #1
 8000f8a:	4091      	lsls	r1, r2
 8000f8c:	000a      	movs	r2, r1
 8000f8e:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2221      	movs	r2, #33	; 0x21
 8000f94:	2101      	movs	r1, #1
 8000f96:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2220      	movs	r2, #32
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d004      	beq.n	8000fb2 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	0010      	movs	r0, r2
 8000fb0:	4798      	blx	r3
    } 
  }
  return status;
 8000fb2:	230f      	movs	r3, #15
 8000fb4:	18fb      	adds	r3, r7, r3
 8000fb6:	781b      	ldrb	r3, [r3, #0]
}
 8000fb8:	0018      	movs	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b004      	add	sp, #16
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fce:	e155      	b.n	800127c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	697a      	ldr	r2, [r7, #20]
 8000fd8:	4091      	lsls	r1, r2
 8000fda:	000a      	movs	r2, r1
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d100      	bne.n	8000fe8 <HAL_GPIO_Init+0x28>
 8000fe6:	e146      	b.n	8001276 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2203      	movs	r2, #3
 8000fee:	4013      	ands	r3, r2
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d005      	beq.n	8001000 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d130      	bne.n	8001062 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	2203      	movs	r2, #3
 800100c:	409a      	lsls	r2, r3
 800100e:	0013      	movs	r3, r2
 8001010:	43da      	mvns	r2, r3
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	68da      	ldr	r2, [r3, #12]
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	409a      	lsls	r2, r3
 8001022:	0013      	movs	r3, r2
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001036:	2201      	movs	r2, #1
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	409a      	lsls	r2, r3
 800103c:	0013      	movs	r3, r2
 800103e:	43da      	mvns	r2, r3
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	091b      	lsrs	r3, r3, #4
 800104c:	2201      	movs	r2, #1
 800104e:	401a      	ands	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	409a      	lsls	r2, r3
 8001054:	0013      	movs	r3, r2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2203      	movs	r2, #3
 8001068:	4013      	ands	r3, r2
 800106a:	2b03      	cmp	r3, #3
 800106c:	d017      	beq.n	800109e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	2203      	movs	r2, #3
 800107a:	409a      	lsls	r2, r3
 800107c:	0013      	movs	r3, r2
 800107e:	43da      	mvns	r2, r3
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	4013      	ands	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	689a      	ldr	r2, [r3, #8]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	409a      	lsls	r2, r3
 8001090:	0013      	movs	r3, r2
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2203      	movs	r2, #3
 80010a4:	4013      	ands	r3, r2
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d123      	bne.n	80010f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	08da      	lsrs	r2, r3, #3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3208      	adds	r2, #8
 80010b2:	0092      	lsls	r2, r2, #2
 80010b4:	58d3      	ldr	r3, [r2, r3]
 80010b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	2207      	movs	r2, #7
 80010bc:	4013      	ands	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	220f      	movs	r2, #15
 80010c2:	409a      	lsls	r2, r3
 80010c4:	0013      	movs	r3, r2
 80010c6:	43da      	mvns	r2, r3
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	691a      	ldr	r2, [r3, #16]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	2107      	movs	r1, #7
 80010d6:	400b      	ands	r3, r1
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	409a      	lsls	r2, r3
 80010dc:	0013      	movs	r3, r2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	08da      	lsrs	r2, r3, #3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3208      	adds	r2, #8
 80010ec:	0092      	lsls	r2, r2, #2
 80010ee:	6939      	ldr	r1, [r7, #16]
 80010f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	2203      	movs	r2, #3
 80010fe:	409a      	lsls	r2, r3
 8001100:	0013      	movs	r3, r2
 8001102:	43da      	mvns	r2, r3
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2203      	movs	r2, #3
 8001110:	401a      	ands	r2, r3
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	409a      	lsls	r2, r3
 8001118:	0013      	movs	r3, r2
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	23c0      	movs	r3, #192	; 0xc0
 800112c:	029b      	lsls	r3, r3, #10
 800112e:	4013      	ands	r3, r2
 8001130:	d100      	bne.n	8001134 <HAL_GPIO_Init+0x174>
 8001132:	e0a0      	b.n	8001276 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001134:	4b57      	ldr	r3, [pc, #348]	; (8001294 <HAL_GPIO_Init+0x2d4>)
 8001136:	699a      	ldr	r2, [r3, #24]
 8001138:	4b56      	ldr	r3, [pc, #344]	; (8001294 <HAL_GPIO_Init+0x2d4>)
 800113a:	2101      	movs	r1, #1
 800113c:	430a      	orrs	r2, r1
 800113e:	619a      	str	r2, [r3, #24]
 8001140:	4b54      	ldr	r3, [pc, #336]	; (8001294 <HAL_GPIO_Init+0x2d4>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	2201      	movs	r2, #1
 8001146:	4013      	ands	r3, r2
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800114c:	4a52      	ldr	r2, [pc, #328]	; (8001298 <HAL_GPIO_Init+0x2d8>)
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	089b      	lsrs	r3, r3, #2
 8001152:	3302      	adds	r3, #2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	589b      	ldr	r3, [r3, r2]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	2203      	movs	r2, #3
 800115e:	4013      	ands	r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	220f      	movs	r2, #15
 8001164:	409a      	lsls	r2, r3
 8001166:	0013      	movs	r3, r2
 8001168:	43da      	mvns	r2, r3
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	2390      	movs	r3, #144	; 0x90
 8001174:	05db      	lsls	r3, r3, #23
 8001176:	429a      	cmp	r2, r3
 8001178:	d019      	beq.n	80011ae <HAL_GPIO_Init+0x1ee>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a47      	ldr	r2, [pc, #284]	; (800129c <HAL_GPIO_Init+0x2dc>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d013      	beq.n	80011aa <HAL_GPIO_Init+0x1ea>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a46      	ldr	r2, [pc, #280]	; (80012a0 <HAL_GPIO_Init+0x2e0>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d00d      	beq.n	80011a6 <HAL_GPIO_Init+0x1e6>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a45      	ldr	r2, [pc, #276]	; (80012a4 <HAL_GPIO_Init+0x2e4>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d007      	beq.n	80011a2 <HAL_GPIO_Init+0x1e2>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a44      	ldr	r2, [pc, #272]	; (80012a8 <HAL_GPIO_Init+0x2e8>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d101      	bne.n	800119e <HAL_GPIO_Init+0x1de>
 800119a:	2304      	movs	r3, #4
 800119c:	e008      	b.n	80011b0 <HAL_GPIO_Init+0x1f0>
 800119e:	2305      	movs	r3, #5
 80011a0:	e006      	b.n	80011b0 <HAL_GPIO_Init+0x1f0>
 80011a2:	2303      	movs	r3, #3
 80011a4:	e004      	b.n	80011b0 <HAL_GPIO_Init+0x1f0>
 80011a6:	2302      	movs	r3, #2
 80011a8:	e002      	b.n	80011b0 <HAL_GPIO_Init+0x1f0>
 80011aa:	2301      	movs	r3, #1
 80011ac:	e000      	b.n	80011b0 <HAL_GPIO_Init+0x1f0>
 80011ae:	2300      	movs	r3, #0
 80011b0:	697a      	ldr	r2, [r7, #20]
 80011b2:	2103      	movs	r1, #3
 80011b4:	400a      	ands	r2, r1
 80011b6:	0092      	lsls	r2, r2, #2
 80011b8:	4093      	lsls	r3, r2
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011c0:	4935      	ldr	r1, [pc, #212]	; (8001298 <HAL_GPIO_Init+0x2d8>)
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	089b      	lsrs	r3, r3, #2
 80011c6:	3302      	adds	r3, #2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011ce:	4b37      	ldr	r3, [pc, #220]	; (80012ac <HAL_GPIO_Init+0x2ec>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	43da      	mvns	r2, r3
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	4013      	ands	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	2380      	movs	r3, #128	; 0x80
 80011e4:	025b      	lsls	r3, r3, #9
 80011e6:	4013      	ands	r3, r2
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011f2:	4b2e      	ldr	r3, [pc, #184]	; (80012ac <HAL_GPIO_Init+0x2ec>)
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80011f8:	4b2c      	ldr	r3, [pc, #176]	; (80012ac <HAL_GPIO_Init+0x2ec>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	43da      	mvns	r2, r3
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	4013      	ands	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685a      	ldr	r2, [r3, #4]
 800120c:	2380      	movs	r3, #128	; 0x80
 800120e:	029b      	lsls	r3, r3, #10
 8001210:	4013      	ands	r3, r2
 8001212:	d003      	beq.n	800121c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	4313      	orrs	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800121c:	4b23      	ldr	r3, [pc, #140]	; (80012ac <HAL_GPIO_Init+0x2ec>)
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001222:	4b22      	ldr	r3, [pc, #136]	; (80012ac <HAL_GPIO_Init+0x2ec>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	43da      	mvns	r2, r3
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	4013      	ands	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685a      	ldr	r2, [r3, #4]
 8001236:	2380      	movs	r3, #128	; 0x80
 8001238:	035b      	lsls	r3, r3, #13
 800123a:	4013      	ands	r3, r2
 800123c:	d003      	beq.n	8001246 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4313      	orrs	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001246:	4b19      	ldr	r3, [pc, #100]	; (80012ac <HAL_GPIO_Init+0x2ec>)
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800124c:	4b17      	ldr	r3, [pc, #92]	; (80012ac <HAL_GPIO_Init+0x2ec>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	43da      	mvns	r2, r3
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	4013      	ands	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	2380      	movs	r3, #128	; 0x80
 8001262:	039b      	lsls	r3, r3, #14
 8001264:	4013      	ands	r3, r2
 8001266:	d003      	beq.n	8001270 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	4313      	orrs	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001270:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <HAL_GPIO_Init+0x2ec>)
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	3301      	adds	r3, #1
 800127a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	40da      	lsrs	r2, r3
 8001284:	1e13      	subs	r3, r2, #0
 8001286:	d000      	beq.n	800128a <HAL_GPIO_Init+0x2ca>
 8001288:	e6a2      	b.n	8000fd0 <HAL_GPIO_Init+0x10>
  } 
}
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	46c0      	nop			; (mov r8, r8)
 800128e:	46bd      	mov	sp, r7
 8001290:	b006      	add	sp, #24
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40021000 	.word	0x40021000
 8001298:	40010000 	.word	0x40010000
 800129c:	48000400 	.word	0x48000400
 80012a0:	48000800 	.word	0x48000800
 80012a4:	48000c00 	.word	0x48000c00
 80012a8:	48001000 	.word	0x48001000
 80012ac:	40010400 	.word	0x40010400

080012b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	0008      	movs	r0, r1
 80012ba:	0011      	movs	r1, r2
 80012bc:	1cbb      	adds	r3, r7, #2
 80012be:	1c02      	adds	r2, r0, #0
 80012c0:	801a      	strh	r2, [r3, #0]
 80012c2:	1c7b      	adds	r3, r7, #1
 80012c4:	1c0a      	adds	r2, r1, #0
 80012c6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012c8:	1c7b      	adds	r3, r7, #1
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d004      	beq.n	80012da <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012d0:	1cbb      	adds	r3, r7, #2
 80012d2:	881a      	ldrh	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012d8:	e003      	b.n	80012e2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012da:	1cbb      	adds	r3, r7, #2
 80012dc:	881a      	ldrh	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012e2:	46c0      	nop			; (mov r8, r8)
 80012e4:	46bd      	mov	sp, r7
 80012e6:	b002      	add	sp, #8
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d102      	bne.n	8001300 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	f000 fb76 	bl	80019ec <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2201      	movs	r2, #1
 8001306:	4013      	ands	r3, r2
 8001308:	d100      	bne.n	800130c <HAL_RCC_OscConfig+0x20>
 800130a:	e08e      	b.n	800142a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800130c:	4bc5      	ldr	r3, [pc, #788]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	220c      	movs	r2, #12
 8001312:	4013      	ands	r3, r2
 8001314:	2b04      	cmp	r3, #4
 8001316:	d00e      	beq.n	8001336 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001318:	4bc2      	ldr	r3, [pc, #776]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	220c      	movs	r2, #12
 800131e:	4013      	ands	r3, r2
 8001320:	2b08      	cmp	r3, #8
 8001322:	d117      	bne.n	8001354 <HAL_RCC_OscConfig+0x68>
 8001324:	4bbf      	ldr	r3, [pc, #764]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	23c0      	movs	r3, #192	; 0xc0
 800132a:	025b      	lsls	r3, r3, #9
 800132c:	401a      	ands	r2, r3
 800132e:	2380      	movs	r3, #128	; 0x80
 8001330:	025b      	lsls	r3, r3, #9
 8001332:	429a      	cmp	r2, r3
 8001334:	d10e      	bne.n	8001354 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001336:	4bbb      	ldr	r3, [pc, #748]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	2380      	movs	r3, #128	; 0x80
 800133c:	029b      	lsls	r3, r3, #10
 800133e:	4013      	ands	r3, r2
 8001340:	d100      	bne.n	8001344 <HAL_RCC_OscConfig+0x58>
 8001342:	e071      	b.n	8001428 <HAL_RCC_OscConfig+0x13c>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d000      	beq.n	800134e <HAL_RCC_OscConfig+0x62>
 800134c:	e06c      	b.n	8001428 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	f000 fb4c 	bl	80019ec <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d107      	bne.n	800136c <HAL_RCC_OscConfig+0x80>
 800135c:	4bb1      	ldr	r3, [pc, #708]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4bb0      	ldr	r3, [pc, #704]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 8001362:	2180      	movs	r1, #128	; 0x80
 8001364:	0249      	lsls	r1, r1, #9
 8001366:	430a      	orrs	r2, r1
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	e02f      	b.n	80013cc <HAL_RCC_OscConfig+0xe0>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d10c      	bne.n	800138e <HAL_RCC_OscConfig+0xa2>
 8001374:	4bab      	ldr	r3, [pc, #684]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4baa      	ldr	r3, [pc, #680]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 800137a:	49ab      	ldr	r1, [pc, #684]	; (8001628 <HAL_RCC_OscConfig+0x33c>)
 800137c:	400a      	ands	r2, r1
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	4ba8      	ldr	r3, [pc, #672]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4ba7      	ldr	r3, [pc, #668]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 8001386:	49a9      	ldr	r1, [pc, #676]	; (800162c <HAL_RCC_OscConfig+0x340>)
 8001388:	400a      	ands	r2, r1
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	e01e      	b.n	80013cc <HAL_RCC_OscConfig+0xe0>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	2b05      	cmp	r3, #5
 8001394:	d10e      	bne.n	80013b4 <HAL_RCC_OscConfig+0xc8>
 8001396:	4ba3      	ldr	r3, [pc, #652]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	4ba2      	ldr	r3, [pc, #648]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 800139c:	2180      	movs	r1, #128	; 0x80
 800139e:	02c9      	lsls	r1, r1, #11
 80013a0:	430a      	orrs	r2, r1
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	4b9f      	ldr	r3, [pc, #636]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4b9e      	ldr	r3, [pc, #632]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 80013aa:	2180      	movs	r1, #128	; 0x80
 80013ac:	0249      	lsls	r1, r1, #9
 80013ae:	430a      	orrs	r2, r1
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	e00b      	b.n	80013cc <HAL_RCC_OscConfig+0xe0>
 80013b4:	4b9b      	ldr	r3, [pc, #620]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	4b9a      	ldr	r3, [pc, #616]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 80013ba:	499b      	ldr	r1, [pc, #620]	; (8001628 <HAL_RCC_OscConfig+0x33c>)
 80013bc:	400a      	ands	r2, r1
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	4b98      	ldr	r3, [pc, #608]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4b97      	ldr	r3, [pc, #604]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 80013c6:	4999      	ldr	r1, [pc, #612]	; (800162c <HAL_RCC_OscConfig+0x340>)
 80013c8:	400a      	ands	r2, r1
 80013ca:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d014      	beq.n	80013fe <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fb98 	bl	8000b08 <HAL_GetTick>
 80013d8:	0003      	movs	r3, r0
 80013da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013de:	f7ff fb93 	bl	8000b08 <HAL_GetTick>
 80013e2:	0002      	movs	r2, r0
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b64      	cmp	r3, #100	; 0x64
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e2fd      	b.n	80019ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f0:	4b8c      	ldr	r3, [pc, #560]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	2380      	movs	r3, #128	; 0x80
 80013f6:	029b      	lsls	r3, r3, #10
 80013f8:	4013      	ands	r3, r2
 80013fa:	d0f0      	beq.n	80013de <HAL_RCC_OscConfig+0xf2>
 80013fc:	e015      	b.n	800142a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fe:	f7ff fb83 	bl	8000b08 <HAL_GetTick>
 8001402:	0003      	movs	r3, r0
 8001404:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001408:	f7ff fb7e 	bl	8000b08 <HAL_GetTick>
 800140c:	0002      	movs	r2, r0
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b64      	cmp	r3, #100	; 0x64
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e2e8      	b.n	80019ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800141a:	4b82      	ldr	r3, [pc, #520]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	2380      	movs	r3, #128	; 0x80
 8001420:	029b      	lsls	r3, r3, #10
 8001422:	4013      	ands	r3, r2
 8001424:	d1f0      	bne.n	8001408 <HAL_RCC_OscConfig+0x11c>
 8001426:	e000      	b.n	800142a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001428:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2202      	movs	r2, #2
 8001430:	4013      	ands	r3, r2
 8001432:	d100      	bne.n	8001436 <HAL_RCC_OscConfig+0x14a>
 8001434:	e06c      	b.n	8001510 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001436:	4b7b      	ldr	r3, [pc, #492]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	220c      	movs	r2, #12
 800143c:	4013      	ands	r3, r2
 800143e:	d00e      	beq.n	800145e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001440:	4b78      	ldr	r3, [pc, #480]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	220c      	movs	r2, #12
 8001446:	4013      	ands	r3, r2
 8001448:	2b08      	cmp	r3, #8
 800144a:	d11f      	bne.n	800148c <HAL_RCC_OscConfig+0x1a0>
 800144c:	4b75      	ldr	r3, [pc, #468]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	23c0      	movs	r3, #192	; 0xc0
 8001452:	025b      	lsls	r3, r3, #9
 8001454:	401a      	ands	r2, r3
 8001456:	2380      	movs	r3, #128	; 0x80
 8001458:	021b      	lsls	r3, r3, #8
 800145a:	429a      	cmp	r2, r3
 800145c:	d116      	bne.n	800148c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800145e:	4b71      	ldr	r3, [pc, #452]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2202      	movs	r2, #2
 8001464:	4013      	ands	r3, r2
 8001466:	d005      	beq.n	8001474 <HAL_RCC_OscConfig+0x188>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d001      	beq.n	8001474 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e2bb      	b.n	80019ec <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001474:	4b6b      	ldr	r3, [pc, #428]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	22f8      	movs	r2, #248	; 0xf8
 800147a:	4393      	bics	r3, r2
 800147c:	0019      	movs	r1, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	00da      	lsls	r2, r3, #3
 8001484:	4b67      	ldr	r3, [pc, #412]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 8001486:	430a      	orrs	r2, r1
 8001488:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800148a:	e041      	b.n	8001510 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d024      	beq.n	80014de <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001494:	4b63      	ldr	r3, [pc, #396]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4b62      	ldr	r3, [pc, #392]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 800149a:	2101      	movs	r1, #1
 800149c:	430a      	orrs	r2, r1
 800149e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a0:	f7ff fb32 	bl	8000b08 <HAL_GetTick>
 80014a4:	0003      	movs	r3, r0
 80014a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014aa:	f7ff fb2d 	bl	8000b08 <HAL_GetTick>
 80014ae:	0002      	movs	r2, r0
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e297      	b.n	80019ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014bc:	4b59      	ldr	r3, [pc, #356]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2202      	movs	r2, #2
 80014c2:	4013      	ands	r3, r2
 80014c4:	d0f1      	beq.n	80014aa <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c6:	4b57      	ldr	r3, [pc, #348]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	22f8      	movs	r2, #248	; 0xf8
 80014cc:	4393      	bics	r3, r2
 80014ce:	0019      	movs	r1, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	00da      	lsls	r2, r3, #3
 80014d6:	4b53      	ldr	r3, [pc, #332]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 80014d8:	430a      	orrs	r2, r1
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	e018      	b.n	8001510 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014de:	4b51      	ldr	r3, [pc, #324]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	4b50      	ldr	r3, [pc, #320]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 80014e4:	2101      	movs	r1, #1
 80014e6:	438a      	bics	r2, r1
 80014e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ea:	f7ff fb0d 	bl	8000b08 <HAL_GetTick>
 80014ee:	0003      	movs	r3, r0
 80014f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014f4:	f7ff fb08 	bl	8000b08 <HAL_GetTick>
 80014f8:	0002      	movs	r2, r0
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e272      	b.n	80019ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001506:	4b47      	ldr	r3, [pc, #284]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2202      	movs	r2, #2
 800150c:	4013      	ands	r3, r2
 800150e:	d1f1      	bne.n	80014f4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2208      	movs	r2, #8
 8001516:	4013      	ands	r3, r2
 8001518:	d036      	beq.n	8001588 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d019      	beq.n	8001556 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001522:	4b40      	ldr	r3, [pc, #256]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 8001524:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001526:	4b3f      	ldr	r3, [pc, #252]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 8001528:	2101      	movs	r1, #1
 800152a:	430a      	orrs	r2, r1
 800152c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152e:	f7ff faeb 	bl	8000b08 <HAL_GetTick>
 8001532:	0003      	movs	r3, r0
 8001534:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001538:	f7ff fae6 	bl	8000b08 <HAL_GetTick>
 800153c:	0002      	movs	r2, r0
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e250      	b.n	80019ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800154a:	4b36      	ldr	r3, [pc, #216]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 800154c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154e:	2202      	movs	r2, #2
 8001550:	4013      	ands	r3, r2
 8001552:	d0f1      	beq.n	8001538 <HAL_RCC_OscConfig+0x24c>
 8001554:	e018      	b.n	8001588 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001556:	4b33      	ldr	r3, [pc, #204]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 8001558:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800155a:	4b32      	ldr	r3, [pc, #200]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 800155c:	2101      	movs	r1, #1
 800155e:	438a      	bics	r2, r1
 8001560:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001562:	f7ff fad1 	bl	8000b08 <HAL_GetTick>
 8001566:	0003      	movs	r3, r0
 8001568:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800156c:	f7ff facc 	bl	8000b08 <HAL_GetTick>
 8001570:	0002      	movs	r2, r0
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e236      	b.n	80019ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800157e:	4b29      	ldr	r3, [pc, #164]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 8001580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001582:	2202      	movs	r2, #2
 8001584:	4013      	ands	r3, r2
 8001586:	d1f1      	bne.n	800156c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2204      	movs	r2, #4
 800158e:	4013      	ands	r3, r2
 8001590:	d100      	bne.n	8001594 <HAL_RCC_OscConfig+0x2a8>
 8001592:	e0b5      	b.n	8001700 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001594:	201f      	movs	r0, #31
 8001596:	183b      	adds	r3, r7, r0
 8001598:	2200      	movs	r2, #0
 800159a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800159c:	4b21      	ldr	r3, [pc, #132]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 800159e:	69da      	ldr	r2, [r3, #28]
 80015a0:	2380      	movs	r3, #128	; 0x80
 80015a2:	055b      	lsls	r3, r3, #21
 80015a4:	4013      	ands	r3, r2
 80015a6:	d110      	bne.n	80015ca <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015a8:	4b1e      	ldr	r3, [pc, #120]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 80015aa:	69da      	ldr	r2, [r3, #28]
 80015ac:	4b1d      	ldr	r3, [pc, #116]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 80015ae:	2180      	movs	r1, #128	; 0x80
 80015b0:	0549      	lsls	r1, r1, #21
 80015b2:	430a      	orrs	r2, r1
 80015b4:	61da      	str	r2, [r3, #28]
 80015b6:	4b1b      	ldr	r3, [pc, #108]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 80015b8:	69da      	ldr	r2, [r3, #28]
 80015ba:	2380      	movs	r3, #128	; 0x80
 80015bc:	055b      	lsls	r3, r3, #21
 80015be:	4013      	ands	r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015c4:	183b      	adds	r3, r7, r0
 80015c6:	2201      	movs	r2, #1
 80015c8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ca:	4b19      	ldr	r3, [pc, #100]	; (8001630 <HAL_RCC_OscConfig+0x344>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	4013      	ands	r3, r2
 80015d4:	d11a      	bne.n	800160c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015d6:	4b16      	ldr	r3, [pc, #88]	; (8001630 <HAL_RCC_OscConfig+0x344>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	4b15      	ldr	r3, [pc, #84]	; (8001630 <HAL_RCC_OscConfig+0x344>)
 80015dc:	2180      	movs	r1, #128	; 0x80
 80015de:	0049      	lsls	r1, r1, #1
 80015e0:	430a      	orrs	r2, r1
 80015e2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015e4:	f7ff fa90 	bl	8000b08 <HAL_GetTick>
 80015e8:	0003      	movs	r3, r0
 80015ea:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ee:	f7ff fa8b 	bl	8000b08 <HAL_GetTick>
 80015f2:	0002      	movs	r2, r0
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b64      	cmp	r3, #100	; 0x64
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e1f5      	b.n	80019ec <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001600:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <HAL_RCC_OscConfig+0x344>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	2380      	movs	r3, #128	; 0x80
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	4013      	ands	r3, r2
 800160a:	d0f0      	beq.n	80015ee <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d10f      	bne.n	8001634 <HAL_RCC_OscConfig+0x348>
 8001614:	4b03      	ldr	r3, [pc, #12]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 8001616:	6a1a      	ldr	r2, [r3, #32]
 8001618:	4b02      	ldr	r3, [pc, #8]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 800161a:	2101      	movs	r1, #1
 800161c:	430a      	orrs	r2, r1
 800161e:	621a      	str	r2, [r3, #32]
 8001620:	e036      	b.n	8001690 <HAL_RCC_OscConfig+0x3a4>
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	40021000 	.word	0x40021000
 8001628:	fffeffff 	.word	0xfffeffff
 800162c:	fffbffff 	.word	0xfffbffff
 8001630:	40007000 	.word	0x40007000
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d10c      	bne.n	8001656 <HAL_RCC_OscConfig+0x36a>
 800163c:	4bca      	ldr	r3, [pc, #808]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 800163e:	6a1a      	ldr	r2, [r3, #32]
 8001640:	4bc9      	ldr	r3, [pc, #804]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 8001642:	2101      	movs	r1, #1
 8001644:	438a      	bics	r2, r1
 8001646:	621a      	str	r2, [r3, #32]
 8001648:	4bc7      	ldr	r3, [pc, #796]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 800164a:	6a1a      	ldr	r2, [r3, #32]
 800164c:	4bc6      	ldr	r3, [pc, #792]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 800164e:	2104      	movs	r1, #4
 8001650:	438a      	bics	r2, r1
 8001652:	621a      	str	r2, [r3, #32]
 8001654:	e01c      	b.n	8001690 <HAL_RCC_OscConfig+0x3a4>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2b05      	cmp	r3, #5
 800165c:	d10c      	bne.n	8001678 <HAL_RCC_OscConfig+0x38c>
 800165e:	4bc2      	ldr	r3, [pc, #776]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 8001660:	6a1a      	ldr	r2, [r3, #32]
 8001662:	4bc1      	ldr	r3, [pc, #772]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 8001664:	2104      	movs	r1, #4
 8001666:	430a      	orrs	r2, r1
 8001668:	621a      	str	r2, [r3, #32]
 800166a:	4bbf      	ldr	r3, [pc, #764]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 800166c:	6a1a      	ldr	r2, [r3, #32]
 800166e:	4bbe      	ldr	r3, [pc, #760]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 8001670:	2101      	movs	r1, #1
 8001672:	430a      	orrs	r2, r1
 8001674:	621a      	str	r2, [r3, #32]
 8001676:	e00b      	b.n	8001690 <HAL_RCC_OscConfig+0x3a4>
 8001678:	4bbb      	ldr	r3, [pc, #748]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 800167a:	6a1a      	ldr	r2, [r3, #32]
 800167c:	4bba      	ldr	r3, [pc, #744]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 800167e:	2101      	movs	r1, #1
 8001680:	438a      	bics	r2, r1
 8001682:	621a      	str	r2, [r3, #32]
 8001684:	4bb8      	ldr	r3, [pc, #736]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 8001686:	6a1a      	ldr	r2, [r3, #32]
 8001688:	4bb7      	ldr	r3, [pc, #732]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 800168a:	2104      	movs	r1, #4
 800168c:	438a      	bics	r2, r1
 800168e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d014      	beq.n	80016c2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001698:	f7ff fa36 	bl	8000b08 <HAL_GetTick>
 800169c:	0003      	movs	r3, r0
 800169e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a0:	e009      	b.n	80016b6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016a2:	f7ff fa31 	bl	8000b08 <HAL_GetTick>
 80016a6:	0002      	movs	r2, r0
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	4aaf      	ldr	r2, [pc, #700]	; (800196c <HAL_RCC_OscConfig+0x680>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e19a      	b.n	80019ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b6:	4bac      	ldr	r3, [pc, #688]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 80016b8:	6a1b      	ldr	r3, [r3, #32]
 80016ba:	2202      	movs	r2, #2
 80016bc:	4013      	ands	r3, r2
 80016be:	d0f0      	beq.n	80016a2 <HAL_RCC_OscConfig+0x3b6>
 80016c0:	e013      	b.n	80016ea <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c2:	f7ff fa21 	bl	8000b08 <HAL_GetTick>
 80016c6:	0003      	movs	r3, r0
 80016c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ca:	e009      	b.n	80016e0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016cc:	f7ff fa1c 	bl	8000b08 <HAL_GetTick>
 80016d0:	0002      	movs	r2, r0
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	4aa5      	ldr	r2, [pc, #660]	; (800196c <HAL_RCC_OscConfig+0x680>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e185      	b.n	80019ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e0:	4ba1      	ldr	r3, [pc, #644]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	2202      	movs	r2, #2
 80016e6:	4013      	ands	r3, r2
 80016e8:	d1f0      	bne.n	80016cc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016ea:	231f      	movs	r3, #31
 80016ec:	18fb      	adds	r3, r7, r3
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d105      	bne.n	8001700 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016f4:	4b9c      	ldr	r3, [pc, #624]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 80016f6:	69da      	ldr	r2, [r3, #28]
 80016f8:	4b9b      	ldr	r3, [pc, #620]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 80016fa:	499d      	ldr	r1, [pc, #628]	; (8001970 <HAL_RCC_OscConfig+0x684>)
 80016fc:	400a      	ands	r2, r1
 80016fe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2210      	movs	r2, #16
 8001706:	4013      	ands	r3, r2
 8001708:	d063      	beq.n	80017d2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d12a      	bne.n	8001768 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001712:	4b95      	ldr	r3, [pc, #596]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 8001714:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001716:	4b94      	ldr	r3, [pc, #592]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 8001718:	2104      	movs	r1, #4
 800171a:	430a      	orrs	r2, r1
 800171c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800171e:	4b92      	ldr	r3, [pc, #584]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 8001720:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001722:	4b91      	ldr	r3, [pc, #580]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 8001724:	2101      	movs	r1, #1
 8001726:	430a      	orrs	r2, r1
 8001728:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800172a:	f7ff f9ed 	bl	8000b08 <HAL_GetTick>
 800172e:	0003      	movs	r3, r0
 8001730:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001734:	f7ff f9e8 	bl	8000b08 <HAL_GetTick>
 8001738:	0002      	movs	r2, r0
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e152      	b.n	80019ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001746:	4b88      	ldr	r3, [pc, #544]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 8001748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800174a:	2202      	movs	r2, #2
 800174c:	4013      	ands	r3, r2
 800174e:	d0f1      	beq.n	8001734 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001750:	4b85      	ldr	r3, [pc, #532]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 8001752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001754:	22f8      	movs	r2, #248	; 0xf8
 8001756:	4393      	bics	r3, r2
 8001758:	0019      	movs	r1, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	00da      	lsls	r2, r3, #3
 8001760:	4b81      	ldr	r3, [pc, #516]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 8001762:	430a      	orrs	r2, r1
 8001764:	635a      	str	r2, [r3, #52]	; 0x34
 8001766:	e034      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	695b      	ldr	r3, [r3, #20]
 800176c:	3305      	adds	r3, #5
 800176e:	d111      	bne.n	8001794 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001770:	4b7d      	ldr	r3, [pc, #500]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 8001772:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001774:	4b7c      	ldr	r3, [pc, #496]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 8001776:	2104      	movs	r1, #4
 8001778:	438a      	bics	r2, r1
 800177a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800177c:	4b7a      	ldr	r3, [pc, #488]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 800177e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001780:	22f8      	movs	r2, #248	; 0xf8
 8001782:	4393      	bics	r3, r2
 8001784:	0019      	movs	r1, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	00da      	lsls	r2, r3, #3
 800178c:	4b76      	ldr	r3, [pc, #472]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 800178e:	430a      	orrs	r2, r1
 8001790:	635a      	str	r2, [r3, #52]	; 0x34
 8001792:	e01e      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001794:	4b74      	ldr	r3, [pc, #464]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 8001796:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001798:	4b73      	ldr	r3, [pc, #460]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 800179a:	2104      	movs	r1, #4
 800179c:	430a      	orrs	r2, r1
 800179e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80017a0:	4b71      	ldr	r3, [pc, #452]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 80017a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017a4:	4b70      	ldr	r3, [pc, #448]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 80017a6:	2101      	movs	r1, #1
 80017a8:	438a      	bics	r2, r1
 80017aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ac:	f7ff f9ac 	bl	8000b08 <HAL_GetTick>
 80017b0:	0003      	movs	r3, r0
 80017b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80017b6:	f7ff f9a7 	bl	8000b08 <HAL_GetTick>
 80017ba:	0002      	movs	r2, r0
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e111      	b.n	80019ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017c8:	4b67      	ldr	r3, [pc, #412]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 80017ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017cc:	2202      	movs	r2, #2
 80017ce:	4013      	ands	r3, r2
 80017d0:	d1f1      	bne.n	80017b6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2220      	movs	r2, #32
 80017d8:	4013      	ands	r3, r2
 80017da:	d05c      	beq.n	8001896 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80017dc:	4b62      	ldr	r3, [pc, #392]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	220c      	movs	r2, #12
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b0c      	cmp	r3, #12
 80017e6:	d00e      	beq.n	8001806 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80017e8:	4b5f      	ldr	r3, [pc, #380]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	220c      	movs	r2, #12
 80017ee:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80017f0:	2b08      	cmp	r3, #8
 80017f2:	d114      	bne.n	800181e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80017f4:	4b5c      	ldr	r3, [pc, #368]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	23c0      	movs	r3, #192	; 0xc0
 80017fa:	025b      	lsls	r3, r3, #9
 80017fc:	401a      	ands	r2, r3
 80017fe:	23c0      	movs	r3, #192	; 0xc0
 8001800:	025b      	lsls	r3, r3, #9
 8001802:	429a      	cmp	r2, r3
 8001804:	d10b      	bne.n	800181e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001806:	4b58      	ldr	r3, [pc, #352]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 8001808:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	025b      	lsls	r3, r3, #9
 800180e:	4013      	ands	r3, r2
 8001810:	d040      	beq.n	8001894 <HAL_RCC_OscConfig+0x5a8>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d03c      	beq.n	8001894 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e0e6      	b.n	80019ec <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d01b      	beq.n	800185e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001826:	4b50      	ldr	r3, [pc, #320]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 8001828:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800182a:	4b4f      	ldr	r3, [pc, #316]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 800182c:	2180      	movs	r1, #128	; 0x80
 800182e:	0249      	lsls	r1, r1, #9
 8001830:	430a      	orrs	r2, r1
 8001832:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001834:	f7ff f968 	bl	8000b08 <HAL_GetTick>
 8001838:	0003      	movs	r3, r0
 800183a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800183e:	f7ff f963 	bl	8000b08 <HAL_GetTick>
 8001842:	0002      	movs	r2, r0
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e0cd      	b.n	80019ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001850:	4b45      	ldr	r3, [pc, #276]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 8001852:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001854:	2380      	movs	r3, #128	; 0x80
 8001856:	025b      	lsls	r3, r3, #9
 8001858:	4013      	ands	r3, r2
 800185a:	d0f0      	beq.n	800183e <HAL_RCC_OscConfig+0x552>
 800185c:	e01b      	b.n	8001896 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800185e:	4b42      	ldr	r3, [pc, #264]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 8001860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001862:	4b41      	ldr	r3, [pc, #260]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 8001864:	4943      	ldr	r1, [pc, #268]	; (8001974 <HAL_RCC_OscConfig+0x688>)
 8001866:	400a      	ands	r2, r1
 8001868:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186a:	f7ff f94d 	bl	8000b08 <HAL_GetTick>
 800186e:	0003      	movs	r3, r0
 8001870:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001874:	f7ff f948 	bl	8000b08 <HAL_GetTick>
 8001878:	0002      	movs	r2, r0
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e0b2      	b.n	80019ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001886:	4b38      	ldr	r3, [pc, #224]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 8001888:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800188a:	2380      	movs	r3, #128	; 0x80
 800188c:	025b      	lsls	r3, r3, #9
 800188e:	4013      	ands	r3, r2
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x588>
 8001892:	e000      	b.n	8001896 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001894:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189a:	2b00      	cmp	r3, #0
 800189c:	d100      	bne.n	80018a0 <HAL_RCC_OscConfig+0x5b4>
 800189e:	e0a4      	b.n	80019ea <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018a0:	4b31      	ldr	r3, [pc, #196]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	220c      	movs	r2, #12
 80018a6:	4013      	ands	r3, r2
 80018a8:	2b08      	cmp	r3, #8
 80018aa:	d100      	bne.n	80018ae <HAL_RCC_OscConfig+0x5c2>
 80018ac:	e078      	b.n	80019a0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d14c      	bne.n	8001950 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b6:	4b2c      	ldr	r3, [pc, #176]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	4b2b      	ldr	r3, [pc, #172]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 80018bc:	492e      	ldr	r1, [pc, #184]	; (8001978 <HAL_RCC_OscConfig+0x68c>)
 80018be:	400a      	ands	r2, r1
 80018c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c2:	f7ff f921 	bl	8000b08 <HAL_GetTick>
 80018c6:	0003      	movs	r3, r0
 80018c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018cc:	f7ff f91c 	bl	8000b08 <HAL_GetTick>
 80018d0:	0002      	movs	r2, r0
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e086      	b.n	80019ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018de:	4b22      	ldr	r3, [pc, #136]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	2380      	movs	r3, #128	; 0x80
 80018e4:	049b      	lsls	r3, r3, #18
 80018e6:	4013      	ands	r3, r2
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ea:	4b1f      	ldr	r3, [pc, #124]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 80018ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ee:	220f      	movs	r2, #15
 80018f0:	4393      	bics	r3, r2
 80018f2:	0019      	movs	r1, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018f8:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 80018fa:	430a      	orrs	r2, r1
 80018fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80018fe:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	4a1e      	ldr	r2, [pc, #120]	; (800197c <HAL_RCC_OscConfig+0x690>)
 8001904:	4013      	ands	r3, r2
 8001906:	0019      	movs	r1, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001910:	431a      	orrs	r2, r3
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 8001914:	430a      	orrs	r2, r1
 8001916:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001918:	4b13      	ldr	r3, [pc, #76]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b12      	ldr	r3, [pc, #72]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 800191e:	2180      	movs	r1, #128	; 0x80
 8001920:	0449      	lsls	r1, r1, #17
 8001922:	430a      	orrs	r2, r1
 8001924:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001926:	f7ff f8ef 	bl	8000b08 <HAL_GetTick>
 800192a:	0003      	movs	r3, r0
 800192c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001930:	f7ff f8ea 	bl	8000b08 <HAL_GetTick>
 8001934:	0002      	movs	r2, r0
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e054      	b.n	80019ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	2380      	movs	r3, #128	; 0x80
 8001948:	049b      	lsls	r3, r3, #18
 800194a:	4013      	ands	r3, r2
 800194c:	d0f0      	beq.n	8001930 <HAL_RCC_OscConfig+0x644>
 800194e:	e04c      	b.n	80019ea <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b04      	ldr	r3, [pc, #16]	; (8001968 <HAL_RCC_OscConfig+0x67c>)
 8001956:	4908      	ldr	r1, [pc, #32]	; (8001978 <HAL_RCC_OscConfig+0x68c>)
 8001958:	400a      	ands	r2, r1
 800195a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195c:	f7ff f8d4 	bl	8000b08 <HAL_GetTick>
 8001960:	0003      	movs	r3, r0
 8001962:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001964:	e015      	b.n	8001992 <HAL_RCC_OscConfig+0x6a6>
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	40021000 	.word	0x40021000
 800196c:	00001388 	.word	0x00001388
 8001970:	efffffff 	.word	0xefffffff
 8001974:	fffeffff 	.word	0xfffeffff
 8001978:	feffffff 	.word	0xfeffffff
 800197c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001980:	f7ff f8c2 	bl	8000b08 <HAL_GetTick>
 8001984:	0002      	movs	r2, r0
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e02c      	b.n	80019ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001992:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <HAL_RCC_OscConfig+0x708>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	2380      	movs	r3, #128	; 0x80
 8001998:	049b      	lsls	r3, r3, #18
 800199a:	4013      	ands	r3, r2
 800199c:	d1f0      	bne.n	8001980 <HAL_RCC_OscConfig+0x694>
 800199e:	e024      	b.n	80019ea <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d101      	bne.n	80019ac <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e01f      	b.n	80019ec <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80019ac:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <HAL_RCC_OscConfig+0x708>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <HAL_RCC_OscConfig+0x708>)
 80019b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b8:	697a      	ldr	r2, [r7, #20]
 80019ba:	23c0      	movs	r3, #192	; 0xc0
 80019bc:	025b      	lsls	r3, r3, #9
 80019be:	401a      	ands	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d10e      	bne.n	80019e6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	220f      	movs	r2, #15
 80019cc:	401a      	ands	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d107      	bne.n	80019e6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	23f0      	movs	r3, #240	; 0xf0
 80019da:	039b      	lsls	r3, r3, #14
 80019dc:	401a      	ands	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d001      	beq.n	80019ea <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	0018      	movs	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	b008      	add	sp, #32
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40021000 	.word	0x40021000

080019f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e0bf      	b.n	8001b8c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a0c:	4b61      	ldr	r3, [pc, #388]	; (8001b94 <HAL_RCC_ClockConfig+0x19c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2201      	movs	r2, #1
 8001a12:	4013      	ands	r3, r2
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d911      	bls.n	8001a3e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1a:	4b5e      	ldr	r3, [pc, #376]	; (8001b94 <HAL_RCC_ClockConfig+0x19c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	4393      	bics	r3, r2
 8001a22:	0019      	movs	r1, r3
 8001a24:	4b5b      	ldr	r3, [pc, #364]	; (8001b94 <HAL_RCC_ClockConfig+0x19c>)
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2c:	4b59      	ldr	r3, [pc, #356]	; (8001b94 <HAL_RCC_ClockConfig+0x19c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2201      	movs	r2, #1
 8001a32:	4013      	ands	r3, r2
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d001      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e0a6      	b.n	8001b8c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2202      	movs	r2, #2
 8001a44:	4013      	ands	r3, r2
 8001a46:	d015      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2204      	movs	r2, #4
 8001a4e:	4013      	ands	r3, r2
 8001a50:	d006      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a52:	4b51      	ldr	r3, [pc, #324]	; (8001b98 <HAL_RCC_ClockConfig+0x1a0>)
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	4b50      	ldr	r3, [pc, #320]	; (8001b98 <HAL_RCC_ClockConfig+0x1a0>)
 8001a58:	21e0      	movs	r1, #224	; 0xe0
 8001a5a:	00c9      	lsls	r1, r1, #3
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a60:	4b4d      	ldr	r3, [pc, #308]	; (8001b98 <HAL_RCC_ClockConfig+0x1a0>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	22f0      	movs	r2, #240	; 0xf0
 8001a66:	4393      	bics	r3, r2
 8001a68:	0019      	movs	r1, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	4b4a      	ldr	r3, [pc, #296]	; (8001b98 <HAL_RCC_ClockConfig+0x1a0>)
 8001a70:	430a      	orrs	r2, r1
 8001a72:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d04c      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d107      	bne.n	8001a96 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a86:	4b44      	ldr	r3, [pc, #272]	; (8001b98 <HAL_RCC_ClockConfig+0x1a0>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	2380      	movs	r3, #128	; 0x80
 8001a8c:	029b      	lsls	r3, r3, #10
 8001a8e:	4013      	ands	r3, r2
 8001a90:	d120      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e07a      	b.n	8001b8c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d107      	bne.n	8001aae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a9e:	4b3e      	ldr	r3, [pc, #248]	; (8001b98 <HAL_RCC_ClockConfig+0x1a0>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	2380      	movs	r3, #128	; 0x80
 8001aa4:	049b      	lsls	r3, r3, #18
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	d114      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e06e      	b.n	8001b8c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	d107      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001ab6:	4b38      	ldr	r3, [pc, #224]	; (8001b98 <HAL_RCC_ClockConfig+0x1a0>)
 8001ab8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aba:	2380      	movs	r3, #128	; 0x80
 8001abc:	025b      	lsls	r3, r3, #9
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d108      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e062      	b.n	8001b8c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac6:	4b34      	ldr	r3, [pc, #208]	; (8001b98 <HAL_RCC_ClockConfig+0x1a0>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2202      	movs	r2, #2
 8001acc:	4013      	ands	r3, r2
 8001ace:	d101      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e05b      	b.n	8001b8c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ad4:	4b30      	ldr	r3, [pc, #192]	; (8001b98 <HAL_RCC_ClockConfig+0x1a0>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2203      	movs	r2, #3
 8001ada:	4393      	bics	r3, r2
 8001adc:	0019      	movs	r1, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	4b2d      	ldr	r3, [pc, #180]	; (8001b98 <HAL_RCC_ClockConfig+0x1a0>)
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ae8:	f7ff f80e 	bl	8000b08 <HAL_GetTick>
 8001aec:	0003      	movs	r3, r0
 8001aee:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af0:	e009      	b.n	8001b06 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af2:	f7ff f809 	bl	8000b08 <HAL_GetTick>
 8001af6:	0002      	movs	r2, r0
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	4a27      	ldr	r2, [pc, #156]	; (8001b9c <HAL_RCC_ClockConfig+0x1a4>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e042      	b.n	8001b8c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b06:	4b24      	ldr	r3, [pc, #144]	; (8001b98 <HAL_RCC_ClockConfig+0x1a0>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	220c      	movs	r2, #12
 8001b0c:	401a      	ands	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d1ec      	bne.n	8001af2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b18:	4b1e      	ldr	r3, [pc, #120]	; (8001b94 <HAL_RCC_ClockConfig+0x19c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	4013      	ands	r3, r2
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d211      	bcs.n	8001b4a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b26:	4b1b      	ldr	r3, [pc, #108]	; (8001b94 <HAL_RCC_ClockConfig+0x19c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	4393      	bics	r3, r2
 8001b2e:	0019      	movs	r1, r3
 8001b30:	4b18      	ldr	r3, [pc, #96]	; (8001b94 <HAL_RCC_ClockConfig+0x19c>)
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	430a      	orrs	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b38:	4b16      	ldr	r3, [pc, #88]	; (8001b94 <HAL_RCC_ClockConfig+0x19c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	4013      	ands	r3, r2
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d001      	beq.n	8001b4a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e020      	b.n	8001b8c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2204      	movs	r2, #4
 8001b50:	4013      	ands	r3, r2
 8001b52:	d009      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b54:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <HAL_RCC_ClockConfig+0x1a0>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	4a11      	ldr	r2, [pc, #68]	; (8001ba0 <HAL_RCC_ClockConfig+0x1a8>)
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	0019      	movs	r1, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68da      	ldr	r2, [r3, #12]
 8001b62:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <HAL_RCC_ClockConfig+0x1a0>)
 8001b64:	430a      	orrs	r2, r1
 8001b66:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b68:	f000 f820 	bl	8001bac <HAL_RCC_GetSysClockFreq>
 8001b6c:	0001      	movs	r1, r0
 8001b6e:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <HAL_RCC_ClockConfig+0x1a0>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	091b      	lsrs	r3, r3, #4
 8001b74:	220f      	movs	r2, #15
 8001b76:	4013      	ands	r3, r2
 8001b78:	4a0a      	ldr	r2, [pc, #40]	; (8001ba4 <HAL_RCC_ClockConfig+0x1ac>)
 8001b7a:	5cd3      	ldrb	r3, [r2, r3]
 8001b7c:	000a      	movs	r2, r1
 8001b7e:	40da      	lsrs	r2, r3
 8001b80:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <HAL_RCC_ClockConfig+0x1b0>)
 8001b82:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b84:	2003      	movs	r0, #3
 8001b86:	f7fe ff79 	bl	8000a7c <HAL_InitTick>
  
  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	b004      	add	sp, #16
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40022000 	.word	0x40022000
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	00001388 	.word	0x00001388
 8001ba0:	fffff8ff 	.word	0xfffff8ff
 8001ba4:	08003b9c 	.word	0x08003b9c
 8001ba8:	20000000 	.word	0x20000000

08001bac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bac:	b590      	push	{r4, r7, lr}
 8001bae:	b08f      	sub	sp, #60	; 0x3c
 8001bb0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001bb2:	2314      	movs	r3, #20
 8001bb4:	18fb      	adds	r3, r7, r3
 8001bb6:	4a38      	ldr	r2, [pc, #224]	; (8001c98 <HAL_RCC_GetSysClockFreq+0xec>)
 8001bb8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001bba:	c313      	stmia	r3!, {r0, r1, r4}
 8001bbc:	6812      	ldr	r2, [r2, #0]
 8001bbe:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	4a36      	ldr	r2, [pc, #216]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xf0>)
 8001bc4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001bc6:	c313      	stmia	r3!, {r0, r1, r4}
 8001bc8:	6812      	ldr	r2, [r2, #0]
 8001bca:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	637b      	str	r3, [r7, #52]	; 0x34
 8001bd8:	2300      	movs	r3, #0
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001be0:	4b2f      	ldr	r3, [pc, #188]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be8:	220c      	movs	r2, #12
 8001bea:	4013      	ands	r3, r2
 8001bec:	2b0c      	cmp	r3, #12
 8001bee:	d047      	beq.n	8001c80 <HAL_RCC_GetSysClockFreq+0xd4>
 8001bf0:	d849      	bhi.n	8001c86 <HAL_RCC_GetSysClockFreq+0xda>
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d002      	beq.n	8001bfc <HAL_RCC_GetSysClockFreq+0x50>
 8001bf6:	2b08      	cmp	r3, #8
 8001bf8:	d003      	beq.n	8001c02 <HAL_RCC_GetSysClockFreq+0x56>
 8001bfa:	e044      	b.n	8001c86 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bfc:	4b29      	ldr	r3, [pc, #164]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bfe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c00:	e044      	b.n	8001c8c <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c04:	0c9b      	lsrs	r3, r3, #18
 8001c06:	220f      	movs	r2, #15
 8001c08:	4013      	ands	r3, r2
 8001c0a:	2214      	movs	r2, #20
 8001c0c:	18ba      	adds	r2, r7, r2
 8001c0e:	5cd3      	ldrb	r3, [r2, r3]
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001c12:	4b23      	ldr	r3, [pc, #140]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c16:	220f      	movs	r2, #15
 8001c18:	4013      	ands	r3, r2
 8001c1a:	1d3a      	adds	r2, r7, #4
 8001c1c:	5cd3      	ldrb	r3, [r2, r3]
 8001c1e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001c20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c22:	23c0      	movs	r3, #192	; 0xc0
 8001c24:	025b      	lsls	r3, r3, #9
 8001c26:	401a      	ands	r2, r3
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	025b      	lsls	r3, r3, #9
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d109      	bne.n	8001c44 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c32:	481c      	ldr	r0, [pc, #112]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c34:	f7fe fa68 	bl	8000108 <__udivsi3>
 8001c38:	0003      	movs	r3, r0
 8001c3a:	001a      	movs	r2, r3
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	4353      	muls	r3, r2
 8001c40:	637b      	str	r3, [r7, #52]	; 0x34
 8001c42:	e01a      	b.n	8001c7a <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c46:	23c0      	movs	r3, #192	; 0xc0
 8001c48:	025b      	lsls	r3, r3, #9
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	23c0      	movs	r3, #192	; 0xc0
 8001c4e:	025b      	lsls	r3, r3, #9
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d109      	bne.n	8001c68 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c56:	4814      	ldr	r0, [pc, #80]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c58:	f7fe fa56 	bl	8000108 <__udivsi3>
 8001c5c:	0003      	movs	r3, r0
 8001c5e:	001a      	movs	r2, r3
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	4353      	muls	r3, r2
 8001c64:	637b      	str	r3, [r7, #52]	; 0x34
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c6a:	480e      	ldr	r0, [pc, #56]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c6c:	f7fe fa4c 	bl	8000108 <__udivsi3>
 8001c70:	0003      	movs	r3, r0
 8001c72:	001a      	movs	r2, r3
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c76:	4353      	muls	r3, r2
 8001c78:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c7c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c7e:	e005      	b.n	8001c8c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001c80:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c82:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c84:	e002      	b.n	8001c8c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c86:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c88:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c8a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001c8e:	0018      	movs	r0, r3
 8001c90:	46bd      	mov	sp, r7
 8001c92:	b00f      	add	sp, #60	; 0x3c
 8001c94:	bd90      	pop	{r4, r7, pc}
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	08003b50 	.word	0x08003b50
 8001c9c:	08003b60 	.word	0x08003b60
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	007a1200 	.word	0x007a1200
 8001ca8:	02dc6c00 	.word	0x02dc6c00

08001cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cb0:	4b02      	ldr	r3, [pc, #8]	; (8001cbc <HAL_RCC_GetHCLKFreq+0x10>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
}
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	46c0      	nop			; (mov r8, r8)
 8001cbc:	20000000 	.word	0x20000000

08001cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001cc4:	f7ff fff2 	bl	8001cac <HAL_RCC_GetHCLKFreq>
 8001cc8:	0001      	movs	r1, r0
 8001cca:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	0a1b      	lsrs	r3, r3, #8
 8001cd0:	2207      	movs	r2, #7
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cd6:	5cd3      	ldrb	r3, [r2, r3]
 8001cd8:	40d9      	lsrs	r1, r3
 8001cda:	000b      	movs	r3, r1
}    
 8001cdc:	0018      	movs	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	08003bac 	.word	0x08003bac

08001cec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	2380      	movs	r3, #128	; 0x80
 8001d02:	025b      	lsls	r3, r3, #9
 8001d04:	4013      	ands	r3, r2
 8001d06:	d100      	bne.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001d08:	e08e      	b.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001d0a:	2017      	movs	r0, #23
 8001d0c:	183b      	adds	r3, r7, r0
 8001d0e:	2200      	movs	r2, #0
 8001d10:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d12:	4b6e      	ldr	r3, [pc, #440]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d14:	69da      	ldr	r2, [r3, #28]
 8001d16:	2380      	movs	r3, #128	; 0x80
 8001d18:	055b      	lsls	r3, r3, #21
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d110      	bne.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d1e:	4b6b      	ldr	r3, [pc, #428]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d20:	69da      	ldr	r2, [r3, #28]
 8001d22:	4b6a      	ldr	r3, [pc, #424]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d24:	2180      	movs	r1, #128	; 0x80
 8001d26:	0549      	lsls	r1, r1, #21
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	61da      	str	r2, [r3, #28]
 8001d2c:	4b67      	ldr	r3, [pc, #412]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d2e:	69da      	ldr	r2, [r3, #28]
 8001d30:	2380      	movs	r3, #128	; 0x80
 8001d32:	055b      	lsls	r3, r3, #21
 8001d34:	4013      	ands	r3, r2
 8001d36:	60bb      	str	r3, [r7, #8]
 8001d38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d3a:	183b      	adds	r3, r7, r0
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d40:	4b63      	ldr	r3, [pc, #396]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	2380      	movs	r3, #128	; 0x80
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d11a      	bne.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d4c:	4b60      	ldr	r3, [pc, #384]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4b5f      	ldr	r3, [pc, #380]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d52:	2180      	movs	r1, #128	; 0x80
 8001d54:	0049      	lsls	r1, r1, #1
 8001d56:	430a      	orrs	r2, r1
 8001d58:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d5a:	f7fe fed5 	bl	8000b08 <HAL_GetTick>
 8001d5e:	0003      	movs	r3, r0
 8001d60:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d62:	e008      	b.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d64:	f7fe fed0 	bl	8000b08 <HAL_GetTick>
 8001d68:	0002      	movs	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b64      	cmp	r3, #100	; 0x64
 8001d70:	d901      	bls.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e0a6      	b.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d76:	4b56      	ldr	r3, [pc, #344]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	2380      	movs	r3, #128	; 0x80
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d0f0      	beq.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d82:	4b52      	ldr	r3, [pc, #328]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d84:	6a1a      	ldr	r2, [r3, #32]
 8001d86:	23c0      	movs	r3, #192	; 0xc0
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d034      	beq.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	23c0      	movs	r3, #192	; 0xc0
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d02c      	beq.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001da4:	4b49      	ldr	r3, [pc, #292]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	4a4a      	ldr	r2, [pc, #296]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001daa:	4013      	ands	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001dae:	4b47      	ldr	r3, [pc, #284]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001db0:	6a1a      	ldr	r2, [r3, #32]
 8001db2:	4b46      	ldr	r3, [pc, #280]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001db4:	2180      	movs	r1, #128	; 0x80
 8001db6:	0249      	lsls	r1, r1, #9
 8001db8:	430a      	orrs	r2, r1
 8001dba:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001dbc:	4b43      	ldr	r3, [pc, #268]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001dbe:	6a1a      	ldr	r2, [r3, #32]
 8001dc0:	4b42      	ldr	r3, [pc, #264]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001dc2:	4945      	ldr	r1, [pc, #276]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001dc4:	400a      	ands	r2, r1
 8001dc6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001dc8:	4b40      	ldr	r3, [pc, #256]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d013      	beq.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd6:	f7fe fe97 	bl	8000b08 <HAL_GetTick>
 8001dda:	0003      	movs	r3, r0
 8001ddc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dde:	e009      	b.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de0:	f7fe fe92 	bl	8000b08 <HAL_GetTick>
 8001de4:	0002      	movs	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	4a3c      	ldr	r2, [pc, #240]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e067      	b.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df4:	4b35      	ldr	r3, [pc, #212]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	2202      	movs	r2, #2
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d0f0      	beq.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dfe:	4b33      	ldr	r3, [pc, #204]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	4a34      	ldr	r2, [pc, #208]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001e04:	4013      	ands	r3, r2
 8001e06:	0019      	movs	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	4b2f      	ldr	r3, [pc, #188]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e12:	2317      	movs	r3, #23
 8001e14:	18fb      	adds	r3, r7, r3
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d105      	bne.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e1c:	4b2b      	ldr	r3, [pc, #172]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e1e:	69da      	ldr	r2, [r3, #28]
 8001e20:	4b2a      	ldr	r3, [pc, #168]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e22:	492f      	ldr	r1, [pc, #188]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001e24:	400a      	ands	r2, r1
 8001e26:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d009      	beq.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e32:	4b26      	ldr	r3, [pc, #152]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	2203      	movs	r2, #3
 8001e38:	4393      	bics	r3, r2
 8001e3a:	0019      	movs	r1, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	4b22      	ldr	r3, [pc, #136]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e42:	430a      	orrs	r2, r1
 8001e44:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	d009      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e50:	4b1e      	ldr	r3, [pc, #120]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e54:	4a23      	ldr	r2, [pc, #140]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	0019      	movs	r1, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e60:	430a      	orrs	r2, r1
 8001e62:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2220      	movs	r2, #32
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d009      	beq.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e6e:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	2210      	movs	r2, #16
 8001e74:	4393      	bics	r3, r2
 8001e76:	0019      	movs	r1, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691a      	ldr	r2, [r3, #16]
 8001e7c:	4b13      	ldr	r3, [pc, #76]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	2380      	movs	r3, #128	; 0x80
 8001e88:	029b      	lsls	r3, r3, #10
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d009      	beq.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e8e:	4b0f      	ldr	r3, [pc, #60]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	2280      	movs	r2, #128	; 0x80
 8001e94:	4393      	bics	r3, r2
 8001e96:	0019      	movs	r1, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	699a      	ldr	r2, [r3, #24]
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	2380      	movs	r3, #128	; 0x80
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d009      	beq.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001eae:	4b07      	ldr	r3, [pc, #28]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	2240      	movs	r2, #64	; 0x40
 8001eb4:	4393      	bics	r3, r2
 8001eb6:	0019      	movs	r1, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	695a      	ldr	r2, [r3, #20]
 8001ebc:	4b03      	ldr	r3, [pc, #12]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	b006      	add	sp, #24
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40007000 	.word	0x40007000
 8001ed4:	fffffcff 	.word	0xfffffcff
 8001ed8:	fffeffff 	.word	0xfffeffff
 8001edc:	00001388 	.word	0x00001388
 8001ee0:	efffffff 	.word	0xefffffff
 8001ee4:	fffcffff 	.word	0xfffcffff

08001ee8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e044      	b.n	8001f84 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d107      	bne.n	8001f12 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2274      	movs	r2, #116	; 0x74
 8001f06:	2100      	movs	r1, #0
 8001f08:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f7fe fc75 	bl	80007fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2224      	movs	r2, #36	; 0x24
 8001f16:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2101      	movs	r1, #1
 8001f24:	438a      	bics	r2, r1
 8001f26:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	f000 fc36 	bl	800279c <UART_SetConfig>
 8001f30:	0003      	movs	r3, r0
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d101      	bne.n	8001f3a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e024      	b.n	8001f84 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	0018      	movs	r0, r3
 8001f46:	f000 fdb1 	bl	8002aac <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	490d      	ldr	r1, [pc, #52]	; (8001f8c <HAL_UART_Init+0xa4>)
 8001f56:	400a      	ands	r2, r1
 8001f58:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	212a      	movs	r1, #42	; 0x2a
 8001f66:	438a      	bics	r2, r1
 8001f68:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2101      	movs	r1, #1
 8001f76:	430a      	orrs	r2, r1
 8001f78:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f000 fe49 	bl	8002c14 <UART_CheckIdleState>
 8001f82:	0003      	movs	r3, r0
}
 8001f84:	0018      	movs	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	b002      	add	sp, #8
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	ffffb7ff 	.word	0xffffb7ff

08001f90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08a      	sub	sp, #40	; 0x28
 8001f94:	af02      	add	r7, sp, #8
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	603b      	str	r3, [r7, #0]
 8001f9c:	1dbb      	adds	r3, r7, #6
 8001f9e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001fa4:	2b20      	cmp	r3, #32
 8001fa6:	d000      	beq.n	8001faa <HAL_UART_Transmit+0x1a>
 8001fa8:	e096      	b.n	80020d8 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <HAL_UART_Transmit+0x28>
 8001fb0:	1dbb      	adds	r3, r7, #6
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e08e      	b.n	80020da <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	2380      	movs	r3, #128	; 0x80
 8001fc2:	015b      	lsls	r3, r3, #5
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d109      	bne.n	8001fdc <HAL_UART_Transmit+0x4c>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d105      	bne.n	8001fdc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d001      	beq.n	8001fdc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e07e      	b.n	80020da <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2274      	movs	r2, #116	; 0x74
 8001fe0:	5c9b      	ldrb	r3, [r3, r2]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d101      	bne.n	8001fea <HAL_UART_Transmit+0x5a>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e077      	b.n	80020da <HAL_UART_Transmit+0x14a>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2274      	movs	r2, #116	; 0x74
 8001fee:	2101      	movs	r1, #1
 8001ff0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2280      	movs	r2, #128	; 0x80
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2221      	movs	r2, #33	; 0x21
 8001ffe:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002000:	f7fe fd82 	bl	8000b08 <HAL_GetTick>
 8002004:	0003      	movs	r3, r0
 8002006:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	1dba      	adds	r2, r7, #6
 800200c:	2150      	movs	r1, #80	; 0x50
 800200e:	8812      	ldrh	r2, [r2, #0]
 8002010:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	1dba      	adds	r2, r7, #6
 8002016:	2152      	movs	r1, #82	; 0x52
 8002018:	8812      	ldrh	r2, [r2, #0]
 800201a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	2380      	movs	r3, #128	; 0x80
 8002022:	015b      	lsls	r3, r3, #5
 8002024:	429a      	cmp	r2, r3
 8002026:	d108      	bne.n	800203a <HAL_UART_Transmit+0xaa>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d104      	bne.n	800203a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002030:	2300      	movs	r3, #0
 8002032:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	61bb      	str	r3, [r7, #24]
 8002038:	e003      	b.n	8002042 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800203e:	2300      	movs	r3, #0
 8002040:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2274      	movs	r2, #116	; 0x74
 8002046:	2100      	movs	r1, #0
 8002048:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800204a:	e02d      	b.n	80020a8 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	0013      	movs	r3, r2
 8002056:	2200      	movs	r2, #0
 8002058:	2180      	movs	r1, #128	; 0x80
 800205a:	f000 fe23 	bl	8002ca4 <UART_WaitOnFlagUntilTimeout>
 800205e:	1e03      	subs	r3, r0, #0
 8002060:	d001      	beq.n	8002066 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e039      	b.n	80020da <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d10b      	bne.n	8002084 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	881a      	ldrh	r2, [r3, #0]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	05d2      	lsls	r2, r2, #23
 8002076:	0dd2      	lsrs	r2, r2, #23
 8002078:	b292      	uxth	r2, r2
 800207a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	3302      	adds	r3, #2
 8002080:	61bb      	str	r3, [r7, #24]
 8002082:	e008      	b.n	8002096 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	781a      	ldrb	r2, [r3, #0]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	b292      	uxth	r2, r2
 800208e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	3301      	adds	r3, #1
 8002094:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2252      	movs	r2, #82	; 0x52
 800209a:	5a9b      	ldrh	r3, [r3, r2]
 800209c:	b29b      	uxth	r3, r3
 800209e:	3b01      	subs	r3, #1
 80020a0:	b299      	uxth	r1, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2252      	movs	r2, #82	; 0x52
 80020a6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2252      	movs	r2, #82	; 0x52
 80020ac:	5a9b      	ldrh	r3, [r3, r2]
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1cb      	bne.n	800204c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	0013      	movs	r3, r2
 80020be:	2200      	movs	r2, #0
 80020c0:	2140      	movs	r1, #64	; 0x40
 80020c2:	f000 fdef 	bl	8002ca4 <UART_WaitOnFlagUntilTimeout>
 80020c6:	1e03      	subs	r3, r0, #0
 80020c8:	d001      	beq.n	80020ce <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e005      	b.n	80020da <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2220      	movs	r2, #32
 80020d2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80020d4:	2300      	movs	r3, #0
 80020d6:	e000      	b.n	80020da <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80020d8:	2302      	movs	r3, #2
  }
}
 80020da:	0018      	movs	r0, r3
 80020dc:	46bd      	mov	sp, r7
 80020de:	b008      	add	sp, #32
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b088      	sub	sp, #32
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	60f8      	str	r0, [r7, #12]
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	1dbb      	adds	r3, r7, #6
 80020ee:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020f4:	2b20      	cmp	r3, #32
 80020f6:	d150      	bne.n	800219a <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_UART_Receive_IT+0x24>
 80020fe:	1dbb      	adds	r3, r7, #6
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e048      	b.n	800219c <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	2380      	movs	r3, #128	; 0x80
 8002110:	015b      	lsls	r3, r3, #5
 8002112:	429a      	cmp	r2, r3
 8002114:	d109      	bne.n	800212a <HAL_UART_Receive_IT+0x48>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d105      	bne.n	800212a <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	2201      	movs	r2, #1
 8002122:	4013      	ands	r3, r2
 8002124:	d001      	beq.n	800212a <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e038      	b.n	800219c <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2274      	movs	r2, #116	; 0x74
 800212e:	5c9b      	ldrb	r3, [r3, r2]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d101      	bne.n	8002138 <HAL_UART_Receive_IT+0x56>
 8002134:	2302      	movs	r3, #2
 8002136:	e031      	b.n	800219c <HAL_UART_Receive_IT+0xba>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2274      	movs	r2, #116	; 0x74
 800213c:	2101      	movs	r1, #1
 800213e:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	2380      	movs	r3, #128	; 0x80
 800214e:	041b      	lsls	r3, r3, #16
 8002150:	4013      	ands	r3, r2
 8002152:	d019      	beq.n	8002188 <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002154:	f3ef 8310 	mrs	r3, PRIMASK
 8002158:	613b      	str	r3, [r7, #16]
  return(result);
 800215a:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800215c:	61fb      	str	r3, [r7, #28]
 800215e:	2301      	movs	r3, #1
 8002160:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f383 8810 	msr	PRIMASK, r3
}
 8002168:	46c0      	nop			; (mov r8, r8)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2180      	movs	r1, #128	; 0x80
 8002176:	04c9      	lsls	r1, r1, #19
 8002178:	430a      	orrs	r2, r1
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	f383 8810 	msr	PRIMASK, r3
}
 8002186:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002188:	1dbb      	adds	r3, r7, #6
 800218a:	881a      	ldrh	r2, [r3, #0]
 800218c:	68b9      	ldr	r1, [r7, #8]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	0018      	movs	r0, r3
 8002192:	f000 fe4b 	bl	8002e2c <UART_Start_Receive_IT>
 8002196:	0003      	movs	r3, r0
 8002198:	e000      	b.n	800219c <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 800219a:	2302      	movs	r3, #2
  }
}
 800219c:	0018      	movs	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	b008      	add	sp, #32
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80021a4:	b590      	push	{r4, r7, lr}
 80021a6:	b0ab      	sub	sp, #172	; 0xac
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	22a4      	movs	r2, #164	; 0xa4
 80021b4:	18b9      	adds	r1, r7, r2
 80021b6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	20a0      	movs	r0, #160	; 0xa0
 80021c0:	1839      	adds	r1, r7, r0
 80021c2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	219c      	movs	r1, #156	; 0x9c
 80021cc:	1879      	adds	r1, r7, r1
 80021ce:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80021d0:	0011      	movs	r1, r2
 80021d2:	18bb      	adds	r3, r7, r2
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a99      	ldr	r2, [pc, #612]	; (800243c <HAL_UART_IRQHandler+0x298>)
 80021d8:	4013      	ands	r3, r2
 80021da:	2298      	movs	r2, #152	; 0x98
 80021dc:	18bc      	adds	r4, r7, r2
 80021de:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80021e0:	18bb      	adds	r3, r7, r2
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d114      	bne.n	8002212 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80021e8:	187b      	adds	r3, r7, r1
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2220      	movs	r2, #32
 80021ee:	4013      	ands	r3, r2
 80021f0:	d00f      	beq.n	8002212 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80021f2:	183b      	adds	r3, r7, r0
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2220      	movs	r2, #32
 80021f8:	4013      	ands	r3, r2
 80021fa:	d00a      	beq.n	8002212 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002200:	2b00      	cmp	r3, #0
 8002202:	d100      	bne.n	8002206 <HAL_UART_IRQHandler+0x62>
 8002204:	e296      	b.n	8002734 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	0010      	movs	r0, r2
 800220e:	4798      	blx	r3
      }
      return;
 8002210:	e290      	b.n	8002734 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002212:	2398      	movs	r3, #152	; 0x98
 8002214:	18fb      	adds	r3, r7, r3
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d100      	bne.n	800221e <HAL_UART_IRQHandler+0x7a>
 800221c:	e114      	b.n	8002448 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800221e:	239c      	movs	r3, #156	; 0x9c
 8002220:	18fb      	adds	r3, r7, r3
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2201      	movs	r2, #1
 8002226:	4013      	ands	r3, r2
 8002228:	d106      	bne.n	8002238 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800222a:	23a0      	movs	r3, #160	; 0xa0
 800222c:	18fb      	adds	r3, r7, r3
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a83      	ldr	r2, [pc, #524]	; (8002440 <HAL_UART_IRQHandler+0x29c>)
 8002232:	4013      	ands	r3, r2
 8002234:	d100      	bne.n	8002238 <HAL_UART_IRQHandler+0x94>
 8002236:	e107      	b.n	8002448 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002238:	23a4      	movs	r3, #164	; 0xa4
 800223a:	18fb      	adds	r3, r7, r3
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2201      	movs	r2, #1
 8002240:	4013      	ands	r3, r2
 8002242:	d012      	beq.n	800226a <HAL_UART_IRQHandler+0xc6>
 8002244:	23a0      	movs	r3, #160	; 0xa0
 8002246:	18fb      	adds	r3, r7, r3
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	2380      	movs	r3, #128	; 0x80
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	4013      	ands	r3, r2
 8002250:	d00b      	beq.n	800226a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2201      	movs	r2, #1
 8002258:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2280      	movs	r2, #128	; 0x80
 800225e:	589b      	ldr	r3, [r3, r2]
 8002260:	2201      	movs	r2, #1
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2180      	movs	r1, #128	; 0x80
 8002268:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800226a:	23a4      	movs	r3, #164	; 0xa4
 800226c:	18fb      	adds	r3, r7, r3
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2202      	movs	r2, #2
 8002272:	4013      	ands	r3, r2
 8002274:	d011      	beq.n	800229a <HAL_UART_IRQHandler+0xf6>
 8002276:	239c      	movs	r3, #156	; 0x9c
 8002278:	18fb      	adds	r3, r7, r3
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2201      	movs	r2, #1
 800227e:	4013      	ands	r3, r2
 8002280:	d00b      	beq.n	800229a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2202      	movs	r2, #2
 8002288:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2280      	movs	r2, #128	; 0x80
 800228e:	589b      	ldr	r3, [r3, r2]
 8002290:	2204      	movs	r2, #4
 8002292:	431a      	orrs	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2180      	movs	r1, #128	; 0x80
 8002298:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800229a:	23a4      	movs	r3, #164	; 0xa4
 800229c:	18fb      	adds	r3, r7, r3
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2204      	movs	r2, #4
 80022a2:	4013      	ands	r3, r2
 80022a4:	d011      	beq.n	80022ca <HAL_UART_IRQHandler+0x126>
 80022a6:	239c      	movs	r3, #156	; 0x9c
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2201      	movs	r2, #1
 80022ae:	4013      	ands	r3, r2
 80022b0:	d00b      	beq.n	80022ca <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2204      	movs	r2, #4
 80022b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2280      	movs	r2, #128	; 0x80
 80022be:	589b      	ldr	r3, [r3, r2]
 80022c0:	2202      	movs	r2, #2
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2180      	movs	r1, #128	; 0x80
 80022c8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80022ca:	23a4      	movs	r3, #164	; 0xa4
 80022cc:	18fb      	adds	r3, r7, r3
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2208      	movs	r2, #8
 80022d2:	4013      	ands	r3, r2
 80022d4:	d017      	beq.n	8002306 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80022d6:	23a0      	movs	r3, #160	; 0xa0
 80022d8:	18fb      	adds	r3, r7, r3
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2220      	movs	r2, #32
 80022de:	4013      	ands	r3, r2
 80022e0:	d105      	bne.n	80022ee <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80022e2:	239c      	movs	r3, #156	; 0x9c
 80022e4:	18fb      	adds	r3, r7, r3
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2201      	movs	r2, #1
 80022ea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80022ec:	d00b      	beq.n	8002306 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2208      	movs	r2, #8
 80022f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2280      	movs	r2, #128	; 0x80
 80022fa:	589b      	ldr	r3, [r3, r2]
 80022fc:	2208      	movs	r2, #8
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2180      	movs	r1, #128	; 0x80
 8002304:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002306:	23a4      	movs	r3, #164	; 0xa4
 8002308:	18fb      	adds	r3, r7, r3
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	2380      	movs	r3, #128	; 0x80
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	4013      	ands	r3, r2
 8002312:	d013      	beq.n	800233c <HAL_UART_IRQHandler+0x198>
 8002314:	23a0      	movs	r3, #160	; 0xa0
 8002316:	18fb      	adds	r3, r7, r3
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	2380      	movs	r3, #128	; 0x80
 800231c:	04db      	lsls	r3, r3, #19
 800231e:	4013      	ands	r3, r2
 8002320:	d00c      	beq.n	800233c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2280      	movs	r2, #128	; 0x80
 8002328:	0112      	lsls	r2, r2, #4
 800232a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2280      	movs	r2, #128	; 0x80
 8002330:	589b      	ldr	r3, [r3, r2]
 8002332:	2220      	movs	r2, #32
 8002334:	431a      	orrs	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2180      	movs	r1, #128	; 0x80
 800233a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2280      	movs	r2, #128	; 0x80
 8002340:	589b      	ldr	r3, [r3, r2]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d100      	bne.n	8002348 <HAL_UART_IRQHandler+0x1a4>
 8002346:	e1f7      	b.n	8002738 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002348:	23a4      	movs	r3, #164	; 0xa4
 800234a:	18fb      	adds	r3, r7, r3
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2220      	movs	r2, #32
 8002350:	4013      	ands	r3, r2
 8002352:	d00e      	beq.n	8002372 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002354:	23a0      	movs	r3, #160	; 0xa0
 8002356:	18fb      	adds	r3, r7, r3
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2220      	movs	r2, #32
 800235c:	4013      	ands	r3, r2
 800235e:	d008      	beq.n	8002372 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002364:	2b00      	cmp	r3, #0
 8002366:	d004      	beq.n	8002372 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	0010      	movs	r0, r2
 8002370:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2280      	movs	r2, #128	; 0x80
 8002376:	589b      	ldr	r3, [r3, r2]
 8002378:	2194      	movs	r1, #148	; 0x94
 800237a:	187a      	adds	r2, r7, r1
 800237c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	2240      	movs	r2, #64	; 0x40
 8002386:	4013      	ands	r3, r2
 8002388:	2b40      	cmp	r3, #64	; 0x40
 800238a:	d004      	beq.n	8002396 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800238c:	187b      	adds	r3, r7, r1
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2228      	movs	r2, #40	; 0x28
 8002392:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002394:	d047      	beq.n	8002426 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	0018      	movs	r0, r3
 800239a:	f000 fdf7 	bl	8002f8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	2240      	movs	r2, #64	; 0x40
 80023a6:	4013      	ands	r3, r2
 80023a8:	2b40      	cmp	r3, #64	; 0x40
 80023aa:	d137      	bne.n	800241c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023ac:	f3ef 8310 	mrs	r3, PRIMASK
 80023b0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80023b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023b4:	2090      	movs	r0, #144	; 0x90
 80023b6:	183a      	adds	r2, r7, r0
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	2301      	movs	r3, #1
 80023bc:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023c0:	f383 8810 	msr	PRIMASK, r3
}
 80023c4:	46c0      	nop			; (mov r8, r8)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2140      	movs	r1, #64	; 0x40
 80023d2:	438a      	bics	r2, r1
 80023d4:	609a      	str	r2, [r3, #8]
 80023d6:	183b      	adds	r3, r7, r0
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023de:	f383 8810 	msr	PRIMASK, r3
}
 80023e2:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d012      	beq.n	8002412 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f0:	4a14      	ldr	r2, [pc, #80]	; (8002444 <HAL_UART_IRQHandler+0x2a0>)
 80023f2:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f8:	0018      	movs	r0, r3
 80023fa:	f7fe fd9c 	bl	8000f36 <HAL_DMA_Abort_IT>
 80023fe:	1e03      	subs	r3, r0, #0
 8002400:	d01a      	beq.n	8002438 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240c:	0018      	movs	r0, r3
 800240e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002410:	e012      	b.n	8002438 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	0018      	movs	r0, r3
 8002416:	f000 f9ad 	bl	8002774 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800241a:	e00d      	b.n	8002438 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	0018      	movs	r0, r3
 8002420:	f000 f9a8 	bl	8002774 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002424:	e008      	b.n	8002438 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	0018      	movs	r0, r3
 800242a:	f000 f9a3 	bl	8002774 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2280      	movs	r2, #128	; 0x80
 8002432:	2100      	movs	r1, #0
 8002434:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002436:	e17f      	b.n	8002738 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002438:	46c0      	nop			; (mov r8, r8)
    return;
 800243a:	e17d      	b.n	8002738 <HAL_UART_IRQHandler+0x594>
 800243c:	0000080f 	.word	0x0000080f
 8002440:	04000120 	.word	0x04000120
 8002444:	08003051 	.word	0x08003051

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800244c:	2b01      	cmp	r3, #1
 800244e:	d000      	beq.n	8002452 <HAL_UART_IRQHandler+0x2ae>
 8002450:	e131      	b.n	80026b6 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002452:	23a4      	movs	r3, #164	; 0xa4
 8002454:	18fb      	adds	r3, r7, r3
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2210      	movs	r2, #16
 800245a:	4013      	ands	r3, r2
 800245c:	d100      	bne.n	8002460 <HAL_UART_IRQHandler+0x2bc>
 800245e:	e12a      	b.n	80026b6 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002460:	23a0      	movs	r3, #160	; 0xa0
 8002462:	18fb      	adds	r3, r7, r3
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2210      	movs	r2, #16
 8002468:	4013      	ands	r3, r2
 800246a:	d100      	bne.n	800246e <HAL_UART_IRQHandler+0x2ca>
 800246c:	e123      	b.n	80026b6 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2210      	movs	r2, #16
 8002474:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	2240      	movs	r2, #64	; 0x40
 800247e:	4013      	ands	r3, r2
 8002480:	2b40      	cmp	r3, #64	; 0x40
 8002482:	d000      	beq.n	8002486 <HAL_UART_IRQHandler+0x2e2>
 8002484:	e09b      	b.n	80025be <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	217e      	movs	r1, #126	; 0x7e
 8002490:	187b      	adds	r3, r7, r1
 8002492:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002494:	187b      	adds	r3, r7, r1
 8002496:	881b      	ldrh	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d100      	bne.n	800249e <HAL_UART_IRQHandler+0x2fa>
 800249c:	e14e      	b.n	800273c <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2258      	movs	r2, #88	; 0x58
 80024a2:	5a9b      	ldrh	r3, [r3, r2]
 80024a4:	187a      	adds	r2, r7, r1
 80024a6:	8812      	ldrh	r2, [r2, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d300      	bcc.n	80024ae <HAL_UART_IRQHandler+0x30a>
 80024ac:	e146      	b.n	800273c <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	187a      	adds	r2, r7, r1
 80024b2:	215a      	movs	r1, #90	; 0x5a
 80024b4:	8812      	ldrh	r2, [r2, #0]
 80024b6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	2b20      	cmp	r3, #32
 80024c0:	d06e      	beq.n	80025a0 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024c2:	f3ef 8310 	mrs	r3, PRIMASK
 80024c6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80024c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80024ca:	67bb      	str	r3, [r7, #120]	; 0x78
 80024cc:	2301      	movs	r3, #1
 80024ce:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024d2:	f383 8810 	msr	PRIMASK, r3
}
 80024d6:	46c0      	nop			; (mov r8, r8)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	499a      	ldr	r1, [pc, #616]	; (800274c <HAL_UART_IRQHandler+0x5a8>)
 80024e4:	400a      	ands	r2, r1
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024ea:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ee:	f383 8810 	msr	PRIMASK, r3
}
 80024f2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024f4:	f3ef 8310 	mrs	r3, PRIMASK
 80024f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80024fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024fc:	677b      	str	r3, [r7, #116]	; 0x74
 80024fe:	2301      	movs	r3, #1
 8002500:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002504:	f383 8810 	msr	PRIMASK, r3
}
 8002508:	46c0      	nop			; (mov r8, r8)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2101      	movs	r1, #1
 8002516:	438a      	bics	r2, r1
 8002518:	609a      	str	r2, [r3, #8]
 800251a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800251c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800251e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002520:	f383 8810 	msr	PRIMASK, r3
}
 8002524:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002526:	f3ef 8310 	mrs	r3, PRIMASK
 800252a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800252c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800252e:	673b      	str	r3, [r7, #112]	; 0x70
 8002530:	2301      	movs	r3, #1
 8002532:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002536:	f383 8810 	msr	PRIMASK, r3
}
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689a      	ldr	r2, [r3, #8]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2140      	movs	r1, #64	; 0x40
 8002548:	438a      	bics	r2, r1
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800254e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002550:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002552:	f383 8810 	msr	PRIMASK, r3
}
 8002556:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2220      	movs	r2, #32
 800255c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002564:	f3ef 8310 	mrs	r3, PRIMASK
 8002568:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800256a:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800256c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800256e:	2301      	movs	r3, #1
 8002570:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002572:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002574:	f383 8810 	msr	PRIMASK, r3
}
 8002578:	46c0      	nop			; (mov r8, r8)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2110      	movs	r1, #16
 8002586:	438a      	bics	r2, r1
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800258c:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800258e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002590:	f383 8810 	msr	PRIMASK, r3
}
 8002594:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259a:	0018      	movs	r0, r3
 800259c:	f7fe fc93 	bl	8000ec6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2258      	movs	r2, #88	; 0x58
 80025a4:	5a9a      	ldrh	r2, [r3, r2]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	215a      	movs	r1, #90	; 0x5a
 80025aa:	5a5b      	ldrh	r3, [r3, r1]
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	0011      	movs	r1, r2
 80025b6:	0018      	movs	r0, r3
 80025b8:	f000 f8e4 	bl	8002784 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80025bc:	e0be      	b.n	800273c <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2258      	movs	r2, #88	; 0x58
 80025c2:	5a99      	ldrh	r1, [r3, r2]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	225a      	movs	r2, #90	; 0x5a
 80025c8:	5a9b      	ldrh	r3, [r3, r2]
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	208e      	movs	r0, #142	; 0x8e
 80025ce:	183b      	adds	r3, r7, r0
 80025d0:	1a8a      	subs	r2, r1, r2
 80025d2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	225a      	movs	r2, #90	; 0x5a
 80025d8:	5a9b      	ldrh	r3, [r3, r2]
 80025da:	b29b      	uxth	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d100      	bne.n	80025e2 <HAL_UART_IRQHandler+0x43e>
 80025e0:	e0ae      	b.n	8002740 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80025e2:	183b      	adds	r3, r7, r0
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d100      	bne.n	80025ec <HAL_UART_IRQHandler+0x448>
 80025ea:	e0a9      	b.n	8002740 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025ec:	f3ef 8310 	mrs	r3, PRIMASK
 80025f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80025f2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025f4:	2488      	movs	r4, #136	; 0x88
 80025f6:	193a      	adds	r2, r7, r4
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	2301      	movs	r3, #1
 80025fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	f383 8810 	msr	PRIMASK, r3
}
 8002604:	46c0      	nop			; (mov r8, r8)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	494f      	ldr	r1, [pc, #316]	; (8002750 <HAL_UART_IRQHandler+0x5ac>)
 8002612:	400a      	ands	r2, r1
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	193b      	adds	r3, r7, r4
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f383 8810 	msr	PRIMASK, r3
}
 8002622:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002624:	f3ef 8310 	mrs	r3, PRIMASK
 8002628:	61bb      	str	r3, [r7, #24]
  return(result);
 800262a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800262c:	2484      	movs	r4, #132	; 0x84
 800262e:	193a      	adds	r2, r7, r4
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	2301      	movs	r3, #1
 8002634:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	f383 8810 	msr	PRIMASK, r3
}
 800263c:	46c0      	nop			; (mov r8, r8)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2101      	movs	r1, #1
 800264a:	438a      	bics	r2, r1
 800264c:	609a      	str	r2, [r3, #8]
 800264e:	193b      	adds	r3, r7, r4
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	f383 8810 	msr	PRIMASK, r3
}
 800265a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2220      	movs	r2, #32
 8002660:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800266e:	f3ef 8310 	mrs	r3, PRIMASK
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002676:	2480      	movs	r4, #128	; 0x80
 8002678:	193a      	adds	r2, r7, r4
 800267a:	6013      	str	r3, [r2, #0]
 800267c:	2301      	movs	r3, #1
 800267e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002682:	f383 8810 	msr	PRIMASK, r3
}
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2110      	movs	r1, #16
 8002694:	438a      	bics	r2, r1
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	193b      	adds	r3, r7, r4
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800269e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a0:	f383 8810 	msr	PRIMASK, r3
}
 80026a4:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80026a6:	183b      	adds	r3, r7, r0
 80026a8:	881a      	ldrh	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	0011      	movs	r1, r2
 80026ae:	0018      	movs	r0, r3
 80026b0:	f000 f868 	bl	8002784 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80026b4:	e044      	b.n	8002740 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80026b6:	23a4      	movs	r3, #164	; 0xa4
 80026b8:	18fb      	adds	r3, r7, r3
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	2380      	movs	r3, #128	; 0x80
 80026be:	035b      	lsls	r3, r3, #13
 80026c0:	4013      	ands	r3, r2
 80026c2:	d010      	beq.n	80026e6 <HAL_UART_IRQHandler+0x542>
 80026c4:	239c      	movs	r3, #156	; 0x9c
 80026c6:	18fb      	adds	r3, r7, r3
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	2380      	movs	r3, #128	; 0x80
 80026cc:	03db      	lsls	r3, r3, #15
 80026ce:	4013      	ands	r3, r2
 80026d0:	d009      	beq.n	80026e6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2280      	movs	r2, #128	; 0x80
 80026d8:	0352      	lsls	r2, r2, #13
 80026da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	0018      	movs	r0, r3
 80026e0:	f000 fe60 	bl	80033a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80026e4:	e02f      	b.n	8002746 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80026e6:	23a4      	movs	r3, #164	; 0xa4
 80026e8:	18fb      	adds	r3, r7, r3
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2280      	movs	r2, #128	; 0x80
 80026ee:	4013      	ands	r3, r2
 80026f0:	d00f      	beq.n	8002712 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80026f2:	23a0      	movs	r3, #160	; 0xa0
 80026f4:	18fb      	adds	r3, r7, r3
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2280      	movs	r2, #128	; 0x80
 80026fa:	4013      	ands	r3, r2
 80026fc:	d009      	beq.n	8002712 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002702:	2b00      	cmp	r3, #0
 8002704:	d01e      	beq.n	8002744 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	0010      	movs	r0, r2
 800270e:	4798      	blx	r3
    }
    return;
 8002710:	e018      	b.n	8002744 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002712:	23a4      	movs	r3, #164	; 0xa4
 8002714:	18fb      	adds	r3, r7, r3
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2240      	movs	r2, #64	; 0x40
 800271a:	4013      	ands	r3, r2
 800271c:	d013      	beq.n	8002746 <HAL_UART_IRQHandler+0x5a2>
 800271e:	23a0      	movs	r3, #160	; 0xa0
 8002720:	18fb      	adds	r3, r7, r3
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2240      	movs	r2, #64	; 0x40
 8002726:	4013      	ands	r3, r2
 8002728:	d00d      	beq.n	8002746 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	0018      	movs	r0, r3
 800272e:	f000 fca6 	bl	800307e <UART_EndTransmit_IT>
    return;
 8002732:	e008      	b.n	8002746 <HAL_UART_IRQHandler+0x5a2>
      return;
 8002734:	46c0      	nop			; (mov r8, r8)
 8002736:	e006      	b.n	8002746 <HAL_UART_IRQHandler+0x5a2>
    return;
 8002738:	46c0      	nop			; (mov r8, r8)
 800273a:	e004      	b.n	8002746 <HAL_UART_IRQHandler+0x5a2>
      return;
 800273c:	46c0      	nop			; (mov r8, r8)
 800273e:	e002      	b.n	8002746 <HAL_UART_IRQHandler+0x5a2>
      return;
 8002740:	46c0      	nop			; (mov r8, r8)
 8002742:	e000      	b.n	8002746 <HAL_UART_IRQHandler+0x5a2>
    return;
 8002744:	46c0      	nop			; (mov r8, r8)
  }

}
 8002746:	46bd      	mov	sp, r7
 8002748:	b02b      	add	sp, #172	; 0xac
 800274a:	bd90      	pop	{r4, r7, pc}
 800274c:	fffffeff 	.word	0xfffffeff
 8002750:	fffffedf 	.word	0xfffffedf

08002754 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800275c:	46c0      	nop			; (mov r8, r8)
 800275e:	46bd      	mov	sp, r7
 8002760:	b002      	add	sp, #8
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800276c:	46c0      	nop			; (mov r8, r8)
 800276e:	46bd      	mov	sp, r7
 8002770:	b002      	add	sp, #8
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800277c:	46c0      	nop			; (mov r8, r8)
 800277e:	46bd      	mov	sp, r7
 8002780:	b002      	add	sp, #8
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	000a      	movs	r2, r1
 800278e:	1cbb      	adds	r3, r7, #2
 8002790:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002792:	46c0      	nop			; (mov r8, r8)
 8002794:	46bd      	mov	sp, r7
 8002796:	b002      	add	sp, #8
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80027a4:	231e      	movs	r3, #30
 80027a6:	18fb      	adds	r3, r7, r3
 80027a8:	2200      	movs	r2, #0
 80027aa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	431a      	orrs	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4aaf      	ldr	r2, [pc, #700]	; (8002a88 <UART_SetConfig+0x2ec>)
 80027cc:	4013      	ands	r3, r2
 80027ce:	0019      	movs	r1, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	4aaa      	ldr	r2, [pc, #680]	; (8002a8c <UART_SetConfig+0x2f0>)
 80027e2:	4013      	ands	r3, r2
 80027e4:	0019      	movs	r1, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	4313      	orrs	r3, r2
 8002800:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	4aa1      	ldr	r2, [pc, #644]	; (8002a90 <UART_SetConfig+0x2f4>)
 800280a:	4013      	ands	r3, r2
 800280c:	0019      	movs	r1, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	430a      	orrs	r2, r1
 8002816:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a9d      	ldr	r2, [pc, #628]	; (8002a94 <UART_SetConfig+0x2f8>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d127      	bne.n	8002872 <UART_SetConfig+0xd6>
 8002822:	4b9d      	ldr	r3, [pc, #628]	; (8002a98 <UART_SetConfig+0x2fc>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	2203      	movs	r2, #3
 8002828:	4013      	ands	r3, r2
 800282a:	2b03      	cmp	r3, #3
 800282c:	d00d      	beq.n	800284a <UART_SetConfig+0xae>
 800282e:	d81b      	bhi.n	8002868 <UART_SetConfig+0xcc>
 8002830:	2b02      	cmp	r3, #2
 8002832:	d014      	beq.n	800285e <UART_SetConfig+0xc2>
 8002834:	d818      	bhi.n	8002868 <UART_SetConfig+0xcc>
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <UART_SetConfig+0xa4>
 800283a:	2b01      	cmp	r3, #1
 800283c:	d00a      	beq.n	8002854 <UART_SetConfig+0xb8>
 800283e:	e013      	b.n	8002868 <UART_SetConfig+0xcc>
 8002840:	231f      	movs	r3, #31
 8002842:	18fb      	adds	r3, r7, r3
 8002844:	2200      	movs	r2, #0
 8002846:	701a      	strb	r2, [r3, #0]
 8002848:	e065      	b.n	8002916 <UART_SetConfig+0x17a>
 800284a:	231f      	movs	r3, #31
 800284c:	18fb      	adds	r3, r7, r3
 800284e:	2202      	movs	r2, #2
 8002850:	701a      	strb	r2, [r3, #0]
 8002852:	e060      	b.n	8002916 <UART_SetConfig+0x17a>
 8002854:	231f      	movs	r3, #31
 8002856:	18fb      	adds	r3, r7, r3
 8002858:	2204      	movs	r2, #4
 800285a:	701a      	strb	r2, [r3, #0]
 800285c:	e05b      	b.n	8002916 <UART_SetConfig+0x17a>
 800285e:	231f      	movs	r3, #31
 8002860:	18fb      	adds	r3, r7, r3
 8002862:	2208      	movs	r2, #8
 8002864:	701a      	strb	r2, [r3, #0]
 8002866:	e056      	b.n	8002916 <UART_SetConfig+0x17a>
 8002868:	231f      	movs	r3, #31
 800286a:	18fb      	adds	r3, r7, r3
 800286c:	2210      	movs	r2, #16
 800286e:	701a      	strb	r2, [r3, #0]
 8002870:	e051      	b.n	8002916 <UART_SetConfig+0x17a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a89      	ldr	r2, [pc, #548]	; (8002a9c <UART_SetConfig+0x300>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d134      	bne.n	80028e6 <UART_SetConfig+0x14a>
 800287c:	4b86      	ldr	r3, [pc, #536]	; (8002a98 <UART_SetConfig+0x2fc>)
 800287e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002880:	23c0      	movs	r3, #192	; 0xc0
 8002882:	029b      	lsls	r3, r3, #10
 8002884:	4013      	ands	r3, r2
 8002886:	22c0      	movs	r2, #192	; 0xc0
 8002888:	0292      	lsls	r2, r2, #10
 800288a:	4293      	cmp	r3, r2
 800288c:	d017      	beq.n	80028be <UART_SetConfig+0x122>
 800288e:	22c0      	movs	r2, #192	; 0xc0
 8002890:	0292      	lsls	r2, r2, #10
 8002892:	4293      	cmp	r3, r2
 8002894:	d822      	bhi.n	80028dc <UART_SetConfig+0x140>
 8002896:	2280      	movs	r2, #128	; 0x80
 8002898:	0292      	lsls	r2, r2, #10
 800289a:	4293      	cmp	r3, r2
 800289c:	d019      	beq.n	80028d2 <UART_SetConfig+0x136>
 800289e:	2280      	movs	r2, #128	; 0x80
 80028a0:	0292      	lsls	r2, r2, #10
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d81a      	bhi.n	80028dc <UART_SetConfig+0x140>
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d004      	beq.n	80028b4 <UART_SetConfig+0x118>
 80028aa:	2280      	movs	r2, #128	; 0x80
 80028ac:	0252      	lsls	r2, r2, #9
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d00a      	beq.n	80028c8 <UART_SetConfig+0x12c>
 80028b2:	e013      	b.n	80028dc <UART_SetConfig+0x140>
 80028b4:	231f      	movs	r3, #31
 80028b6:	18fb      	adds	r3, r7, r3
 80028b8:	2200      	movs	r2, #0
 80028ba:	701a      	strb	r2, [r3, #0]
 80028bc:	e02b      	b.n	8002916 <UART_SetConfig+0x17a>
 80028be:	231f      	movs	r3, #31
 80028c0:	18fb      	adds	r3, r7, r3
 80028c2:	2202      	movs	r2, #2
 80028c4:	701a      	strb	r2, [r3, #0]
 80028c6:	e026      	b.n	8002916 <UART_SetConfig+0x17a>
 80028c8:	231f      	movs	r3, #31
 80028ca:	18fb      	adds	r3, r7, r3
 80028cc:	2204      	movs	r2, #4
 80028ce:	701a      	strb	r2, [r3, #0]
 80028d0:	e021      	b.n	8002916 <UART_SetConfig+0x17a>
 80028d2:	231f      	movs	r3, #31
 80028d4:	18fb      	adds	r3, r7, r3
 80028d6:	2208      	movs	r2, #8
 80028d8:	701a      	strb	r2, [r3, #0]
 80028da:	e01c      	b.n	8002916 <UART_SetConfig+0x17a>
 80028dc:	231f      	movs	r3, #31
 80028de:	18fb      	adds	r3, r7, r3
 80028e0:	2210      	movs	r2, #16
 80028e2:	701a      	strb	r2, [r3, #0]
 80028e4:	e017      	b.n	8002916 <UART_SetConfig+0x17a>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a6d      	ldr	r2, [pc, #436]	; (8002aa0 <UART_SetConfig+0x304>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d104      	bne.n	80028fa <UART_SetConfig+0x15e>
 80028f0:	231f      	movs	r3, #31
 80028f2:	18fb      	adds	r3, r7, r3
 80028f4:	2200      	movs	r2, #0
 80028f6:	701a      	strb	r2, [r3, #0]
 80028f8:	e00d      	b.n	8002916 <UART_SetConfig+0x17a>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a69      	ldr	r2, [pc, #420]	; (8002aa4 <UART_SetConfig+0x308>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d104      	bne.n	800290e <UART_SetConfig+0x172>
 8002904:	231f      	movs	r3, #31
 8002906:	18fb      	adds	r3, r7, r3
 8002908:	2200      	movs	r2, #0
 800290a:	701a      	strb	r2, [r3, #0]
 800290c:	e003      	b.n	8002916 <UART_SetConfig+0x17a>
 800290e:	231f      	movs	r3, #31
 8002910:	18fb      	adds	r3, r7, r3
 8002912:	2210      	movs	r2, #16
 8002914:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69da      	ldr	r2, [r3, #28]
 800291a:	2380      	movs	r3, #128	; 0x80
 800291c:	021b      	lsls	r3, r3, #8
 800291e:	429a      	cmp	r2, r3
 8002920:	d15d      	bne.n	80029de <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8002922:	231f      	movs	r3, #31
 8002924:	18fb      	adds	r3, r7, r3
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b08      	cmp	r3, #8
 800292a:	d015      	beq.n	8002958 <UART_SetConfig+0x1bc>
 800292c:	dc18      	bgt.n	8002960 <UART_SetConfig+0x1c4>
 800292e:	2b04      	cmp	r3, #4
 8002930:	d00d      	beq.n	800294e <UART_SetConfig+0x1b2>
 8002932:	dc15      	bgt.n	8002960 <UART_SetConfig+0x1c4>
 8002934:	2b00      	cmp	r3, #0
 8002936:	d002      	beq.n	800293e <UART_SetConfig+0x1a2>
 8002938:	2b02      	cmp	r3, #2
 800293a:	d005      	beq.n	8002948 <UART_SetConfig+0x1ac>
 800293c:	e010      	b.n	8002960 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800293e:	f7ff f9bf 	bl	8001cc0 <HAL_RCC_GetPCLK1Freq>
 8002942:	0003      	movs	r3, r0
 8002944:	61bb      	str	r3, [r7, #24]
        break;
 8002946:	e012      	b.n	800296e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002948:	4b57      	ldr	r3, [pc, #348]	; (8002aa8 <UART_SetConfig+0x30c>)
 800294a:	61bb      	str	r3, [r7, #24]
        break;
 800294c:	e00f      	b.n	800296e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800294e:	f7ff f92d 	bl	8001bac <HAL_RCC_GetSysClockFreq>
 8002952:	0003      	movs	r3, r0
 8002954:	61bb      	str	r3, [r7, #24]
        break;
 8002956:	e00a      	b.n	800296e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002958:	2380      	movs	r3, #128	; 0x80
 800295a:	021b      	lsls	r3, r3, #8
 800295c:	61bb      	str	r3, [r7, #24]
        break;
 800295e:	e006      	b.n	800296e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002964:	231e      	movs	r3, #30
 8002966:	18fb      	adds	r3, r7, r3
 8002968:	2201      	movs	r2, #1
 800296a:	701a      	strb	r2, [r3, #0]
        break;
 800296c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d100      	bne.n	8002976 <UART_SetConfig+0x1da>
 8002974:	e07b      	b.n	8002a6e <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	005a      	lsls	r2, r3, #1
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	085b      	lsrs	r3, r3, #1
 8002980:	18d2      	adds	r2, r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	0019      	movs	r1, r3
 8002988:	0010      	movs	r0, r2
 800298a:	f7fd fbbd 	bl	8000108 <__udivsi3>
 800298e:	0003      	movs	r3, r0
 8002990:	b29b      	uxth	r3, r3
 8002992:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	2b0f      	cmp	r3, #15
 8002998:	d91c      	bls.n	80029d4 <UART_SetConfig+0x238>
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	2380      	movs	r3, #128	; 0x80
 800299e:	025b      	lsls	r3, r3, #9
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d217      	bcs.n	80029d4 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	200e      	movs	r0, #14
 80029aa:	183b      	adds	r3, r7, r0
 80029ac:	210f      	movs	r1, #15
 80029ae:	438a      	bics	r2, r1
 80029b0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	085b      	lsrs	r3, r3, #1
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	2207      	movs	r2, #7
 80029ba:	4013      	ands	r3, r2
 80029bc:	b299      	uxth	r1, r3
 80029be:	183b      	adds	r3, r7, r0
 80029c0:	183a      	adds	r2, r7, r0
 80029c2:	8812      	ldrh	r2, [r2, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	183a      	adds	r2, r7, r0
 80029ce:	8812      	ldrh	r2, [r2, #0]
 80029d0:	60da      	str	r2, [r3, #12]
 80029d2:	e04c      	b.n	8002a6e <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80029d4:	231e      	movs	r3, #30
 80029d6:	18fb      	adds	r3, r7, r3
 80029d8:	2201      	movs	r2, #1
 80029da:	701a      	strb	r2, [r3, #0]
 80029dc:	e047      	b.n	8002a6e <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80029de:	231f      	movs	r3, #31
 80029e0:	18fb      	adds	r3, r7, r3
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d015      	beq.n	8002a14 <UART_SetConfig+0x278>
 80029e8:	dc18      	bgt.n	8002a1c <UART_SetConfig+0x280>
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	d00d      	beq.n	8002a0a <UART_SetConfig+0x26e>
 80029ee:	dc15      	bgt.n	8002a1c <UART_SetConfig+0x280>
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d002      	beq.n	80029fa <UART_SetConfig+0x25e>
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d005      	beq.n	8002a04 <UART_SetConfig+0x268>
 80029f8:	e010      	b.n	8002a1c <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029fa:	f7ff f961 	bl	8001cc0 <HAL_RCC_GetPCLK1Freq>
 80029fe:	0003      	movs	r3, r0
 8002a00:	61bb      	str	r3, [r7, #24]
        break;
 8002a02:	e012      	b.n	8002a2a <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a04:	4b28      	ldr	r3, [pc, #160]	; (8002aa8 <UART_SetConfig+0x30c>)
 8002a06:	61bb      	str	r3, [r7, #24]
        break;
 8002a08:	e00f      	b.n	8002a2a <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a0a:	f7ff f8cf 	bl	8001bac <HAL_RCC_GetSysClockFreq>
 8002a0e:	0003      	movs	r3, r0
 8002a10:	61bb      	str	r3, [r7, #24]
        break;
 8002a12:	e00a      	b.n	8002a2a <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a14:	2380      	movs	r3, #128	; 0x80
 8002a16:	021b      	lsls	r3, r3, #8
 8002a18:	61bb      	str	r3, [r7, #24]
        break;
 8002a1a:	e006      	b.n	8002a2a <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a20:	231e      	movs	r3, #30
 8002a22:	18fb      	adds	r3, r7, r3
 8002a24:	2201      	movs	r2, #1
 8002a26:	701a      	strb	r2, [r3, #0]
        break;
 8002a28:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d01e      	beq.n	8002a6e <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	085a      	lsrs	r2, r3, #1
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	18d2      	adds	r2, r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	0019      	movs	r1, r3
 8002a40:	0010      	movs	r0, r2
 8002a42:	f7fd fb61 	bl	8000108 <__udivsi3>
 8002a46:	0003      	movs	r3, r0
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	2b0f      	cmp	r3, #15
 8002a50:	d909      	bls.n	8002a66 <UART_SetConfig+0x2ca>
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	2380      	movs	r3, #128	; 0x80
 8002a56:	025b      	lsls	r3, r3, #9
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d204      	bcs.n	8002a66 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	60da      	str	r2, [r3, #12]
 8002a64:	e003      	b.n	8002a6e <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8002a66:	231e      	movs	r3, #30
 8002a68:	18fb      	adds	r3, r7, r3
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002a7a:	231e      	movs	r3, #30
 8002a7c:	18fb      	adds	r3, r7, r3
 8002a7e:	781b      	ldrb	r3, [r3, #0]
}
 8002a80:	0018      	movs	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	b008      	add	sp, #32
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	efff69f3 	.word	0xefff69f3
 8002a8c:	ffffcfff 	.word	0xffffcfff
 8002a90:	fffff4ff 	.word	0xfffff4ff
 8002a94:	40013800 	.word	0x40013800
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	40004400 	.word	0x40004400
 8002aa0:	40004800 	.word	0x40004800
 8002aa4:	40004c00 	.word	0x40004c00
 8002aa8:	007a1200 	.word	0x007a1200

08002aac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	2201      	movs	r2, #1
 8002aba:	4013      	ands	r3, r2
 8002abc:	d00b      	beq.n	8002ad6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	4a4a      	ldr	r2, [pc, #296]	; (8002bf0 <UART_AdvFeatureConfig+0x144>)
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	0019      	movs	r1, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	2202      	movs	r2, #2
 8002adc:	4013      	ands	r3, r2
 8002ade:	d00b      	beq.n	8002af8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	4a43      	ldr	r2, [pc, #268]	; (8002bf4 <UART_AdvFeatureConfig+0x148>)
 8002ae8:	4013      	ands	r3, r2
 8002aea:	0019      	movs	r1, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	2204      	movs	r2, #4
 8002afe:	4013      	ands	r3, r2
 8002b00:	d00b      	beq.n	8002b1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	4a3b      	ldr	r2, [pc, #236]	; (8002bf8 <UART_AdvFeatureConfig+0x14c>)
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	0019      	movs	r1, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	2208      	movs	r2, #8
 8002b20:	4013      	ands	r3, r2
 8002b22:	d00b      	beq.n	8002b3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	4a34      	ldr	r2, [pc, #208]	; (8002bfc <UART_AdvFeatureConfig+0x150>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	0019      	movs	r1, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	2210      	movs	r2, #16
 8002b42:	4013      	ands	r3, r2
 8002b44:	d00b      	beq.n	8002b5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	4a2c      	ldr	r2, [pc, #176]	; (8002c00 <UART_AdvFeatureConfig+0x154>)
 8002b4e:	4013      	ands	r3, r2
 8002b50:	0019      	movs	r1, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	2220      	movs	r2, #32
 8002b64:	4013      	ands	r3, r2
 8002b66:	d00b      	beq.n	8002b80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	4a25      	ldr	r2, [pc, #148]	; (8002c04 <UART_AdvFeatureConfig+0x158>)
 8002b70:	4013      	ands	r3, r2
 8002b72:	0019      	movs	r1, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	2240      	movs	r2, #64	; 0x40
 8002b86:	4013      	ands	r3, r2
 8002b88:	d01d      	beq.n	8002bc6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	4a1d      	ldr	r2, [pc, #116]	; (8002c08 <UART_AdvFeatureConfig+0x15c>)
 8002b92:	4013      	ands	r3, r2
 8002b94:	0019      	movs	r1, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ba6:	2380      	movs	r3, #128	; 0x80
 8002ba8:	035b      	lsls	r3, r3, #13
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d10b      	bne.n	8002bc6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	4a15      	ldr	r2, [pc, #84]	; (8002c0c <UART_AdvFeatureConfig+0x160>)
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	0019      	movs	r1, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	2280      	movs	r2, #128	; 0x80
 8002bcc:	4013      	ands	r3, r2
 8002bce:	d00b      	beq.n	8002be8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	4a0e      	ldr	r2, [pc, #56]	; (8002c10 <UART_AdvFeatureConfig+0x164>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	0019      	movs	r1, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	605a      	str	r2, [r3, #4]
  }
}
 8002be8:	46c0      	nop			; (mov r8, r8)
 8002bea:	46bd      	mov	sp, r7
 8002bec:	b002      	add	sp, #8
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	fffdffff 	.word	0xfffdffff
 8002bf4:	fffeffff 	.word	0xfffeffff
 8002bf8:	fffbffff 	.word	0xfffbffff
 8002bfc:	ffff7fff 	.word	0xffff7fff
 8002c00:	ffffefff 	.word	0xffffefff
 8002c04:	ffffdfff 	.word	0xffffdfff
 8002c08:	ffefffff 	.word	0xffefffff
 8002c0c:	ff9fffff 	.word	0xff9fffff
 8002c10:	fff7ffff 	.word	0xfff7ffff

08002c14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af02      	add	r7, sp, #8
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2280      	movs	r2, #128	; 0x80
 8002c20:	2100      	movs	r1, #0
 8002c22:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c24:	f7fd ff70 	bl	8000b08 <HAL_GetTick>
 8002c28:	0003      	movs	r3, r0
 8002c2a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2208      	movs	r2, #8
 8002c34:	4013      	ands	r3, r2
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d10c      	bne.n	8002c54 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2280      	movs	r2, #128	; 0x80
 8002c3e:	0391      	lsls	r1, r2, #14
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	4a17      	ldr	r2, [pc, #92]	; (8002ca0 <UART_CheckIdleState+0x8c>)
 8002c44:	9200      	str	r2, [sp, #0]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f000 f82c 	bl	8002ca4 <UART_WaitOnFlagUntilTimeout>
 8002c4c:	1e03      	subs	r3, r0, #0
 8002c4e:	d001      	beq.n	8002c54 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e021      	b.n	8002c98 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2204      	movs	r2, #4
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d10c      	bne.n	8002c7c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2280      	movs	r2, #128	; 0x80
 8002c66:	03d1      	lsls	r1, r2, #15
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	4a0d      	ldr	r2, [pc, #52]	; (8002ca0 <UART_CheckIdleState+0x8c>)
 8002c6c:	9200      	str	r2, [sp, #0]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f000 f818 	bl	8002ca4 <UART_WaitOnFlagUntilTimeout>
 8002c74:	1e03      	subs	r3, r0, #0
 8002c76:	d001      	beq.n	8002c7c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e00d      	b.n	8002c98 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2220      	movs	r2, #32
 8002c86:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2274      	movs	r2, #116	; 0x74
 8002c92:	2100      	movs	r1, #0
 8002c94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	0018      	movs	r0, r3
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	b004      	add	sp, #16
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	01ffffff 	.word	0x01ffffff

08002ca4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b094      	sub	sp, #80	; 0x50
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	603b      	str	r3, [r7, #0]
 8002cb0:	1dfb      	adds	r3, r7, #7
 8002cb2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cb4:	e0a3      	b.n	8002dfe <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cb8:	3301      	adds	r3, #1
 8002cba:	d100      	bne.n	8002cbe <UART_WaitOnFlagUntilTimeout+0x1a>
 8002cbc:	e09f      	b.n	8002dfe <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cbe:	f7fd ff23 	bl	8000b08 <HAL_GetTick>
 8002cc2:	0002      	movs	r2, r0
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d302      	bcc.n	8002cd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002cce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d13d      	bne.n	8002d50 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cd4:	f3ef 8310 	mrs	r3, PRIMASK
 8002cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cdc:	647b      	str	r3, [r7, #68]	; 0x44
 8002cde:	2301      	movs	r3, #1
 8002ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce4:	f383 8810 	msr	PRIMASK, r3
}
 8002ce8:	46c0      	nop			; (mov r8, r8)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	494c      	ldr	r1, [pc, #304]	; (8002e28 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002cf6:	400a      	ands	r2, r1
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cfc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d00:	f383 8810 	msr	PRIMASK, r3
}
 8002d04:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d06:	f3ef 8310 	mrs	r3, PRIMASK
 8002d0a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d0e:	643b      	str	r3, [r7, #64]	; 0x40
 8002d10:	2301      	movs	r3, #1
 8002d12:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d16:	f383 8810 	msr	PRIMASK, r3
}
 8002d1a:	46c0      	nop			; (mov r8, r8)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2101      	movs	r1, #1
 8002d28:	438a      	bics	r2, r1
 8002d2a:	609a      	str	r2, [r3, #8]
 8002d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d32:	f383 8810 	msr	PRIMASK, r3
}
 8002d36:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2220      	movs	r2, #32
 8002d42:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2274      	movs	r2, #116	; 0x74
 8002d48:	2100      	movs	r1, #0
 8002d4a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e067      	b.n	8002e20 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2204      	movs	r2, #4
 8002d58:	4013      	ands	r3, r2
 8002d5a:	d050      	beq.n	8002dfe <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	69da      	ldr	r2, [r3, #28]
 8002d62:	2380      	movs	r3, #128	; 0x80
 8002d64:	011b      	lsls	r3, r3, #4
 8002d66:	401a      	ands	r2, r3
 8002d68:	2380      	movs	r3, #128	; 0x80
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d146      	bne.n	8002dfe <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2280      	movs	r2, #128	; 0x80
 8002d76:	0112      	lsls	r2, r2, #4
 8002d78:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d7a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d7e:	613b      	str	r3, [r7, #16]
  return(result);
 8002d80:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d84:	2301      	movs	r3, #1
 8002d86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f383 8810 	msr	PRIMASK, r3
}
 8002d8e:	46c0      	nop			; (mov r8, r8)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4923      	ldr	r1, [pc, #140]	; (8002e28 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002d9c:	400a      	ands	r2, r1
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002da2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	f383 8810 	msr	PRIMASK, r3
}
 8002daa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dac:	f3ef 8310 	mrs	r3, PRIMASK
 8002db0:	61fb      	str	r3, [r7, #28]
  return(result);
 8002db2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002db4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002db6:	2301      	movs	r3, #1
 8002db8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	f383 8810 	msr	PRIMASK, r3
}
 8002dc0:	46c0      	nop			; (mov r8, r8)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2101      	movs	r1, #1
 8002dce:	438a      	bics	r2, r1
 8002dd0:	609a      	str	r2, [r3, #8]
 8002dd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dd4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	f383 8810 	msr	PRIMASK, r3
}
 8002ddc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2220      	movs	r2, #32
 8002de2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2220      	movs	r2, #32
 8002de8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2280      	movs	r2, #128	; 0x80
 8002dee:	2120      	movs	r1, #32
 8002df0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2274      	movs	r2, #116	; 0x74
 8002df6:	2100      	movs	r1, #0
 8002df8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e010      	b.n	8002e20 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	4013      	ands	r3, r2
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	425a      	negs	r2, r3
 8002e0e:	4153      	adcs	r3, r2
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	001a      	movs	r2, r3
 8002e14:	1dfb      	adds	r3, r7, #7
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d100      	bne.n	8002e1e <UART_WaitOnFlagUntilTimeout+0x17a>
 8002e1c:	e74b      	b.n	8002cb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	0018      	movs	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	b014      	add	sp, #80	; 0x50
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	fffffe5f 	.word	0xfffffe5f

08002e2c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b08c      	sub	sp, #48	; 0x30
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	1dbb      	adds	r3, r7, #6
 8002e38:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	1dba      	adds	r2, r7, #6
 8002e44:	2158      	movs	r1, #88	; 0x58
 8002e46:	8812      	ldrh	r2, [r2, #0]
 8002e48:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	1dba      	adds	r2, r7, #6
 8002e4e:	215a      	movs	r1, #90	; 0x5a
 8002e50:	8812      	ldrh	r2, [r2, #0]
 8002e52:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	2380      	movs	r3, #128	; 0x80
 8002e60:	015b      	lsls	r3, r3, #5
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d10d      	bne.n	8002e82 <UART_Start_Receive_IT+0x56>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d104      	bne.n	8002e78 <UART_Start_Receive_IT+0x4c>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	225c      	movs	r2, #92	; 0x5c
 8002e72:	4943      	ldr	r1, [pc, #268]	; (8002f80 <UART_Start_Receive_IT+0x154>)
 8002e74:	5299      	strh	r1, [r3, r2]
 8002e76:	e02e      	b.n	8002ed6 <UART_Start_Receive_IT+0xaa>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	225c      	movs	r2, #92	; 0x5c
 8002e7c:	21ff      	movs	r1, #255	; 0xff
 8002e7e:	5299      	strh	r1, [r3, r2]
 8002e80:	e029      	b.n	8002ed6 <UART_Start_Receive_IT+0xaa>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10d      	bne.n	8002ea6 <UART_Start_Receive_IT+0x7a>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d104      	bne.n	8002e9c <UART_Start_Receive_IT+0x70>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	225c      	movs	r2, #92	; 0x5c
 8002e96:	21ff      	movs	r1, #255	; 0xff
 8002e98:	5299      	strh	r1, [r3, r2]
 8002e9a:	e01c      	b.n	8002ed6 <UART_Start_Receive_IT+0xaa>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	225c      	movs	r2, #92	; 0x5c
 8002ea0:	217f      	movs	r1, #127	; 0x7f
 8002ea2:	5299      	strh	r1, [r3, r2]
 8002ea4:	e017      	b.n	8002ed6 <UART_Start_Receive_IT+0xaa>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	2380      	movs	r3, #128	; 0x80
 8002eac:	055b      	lsls	r3, r3, #21
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d10d      	bne.n	8002ece <UART_Start_Receive_IT+0xa2>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d104      	bne.n	8002ec4 <UART_Start_Receive_IT+0x98>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	225c      	movs	r2, #92	; 0x5c
 8002ebe:	217f      	movs	r1, #127	; 0x7f
 8002ec0:	5299      	strh	r1, [r3, r2]
 8002ec2:	e008      	b.n	8002ed6 <UART_Start_Receive_IT+0xaa>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	225c      	movs	r2, #92	; 0x5c
 8002ec8:	213f      	movs	r1, #63	; 0x3f
 8002eca:	5299      	strh	r1, [r3, r2]
 8002ecc:	e003      	b.n	8002ed6 <UART_Start_Receive_IT+0xaa>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	225c      	movs	r2, #92	; 0x5c
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2280      	movs	r2, #128	; 0x80
 8002eda:	2100      	movs	r1, #0
 8002edc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2222      	movs	r2, #34	; 0x22
 8002ee2:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ee4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ee8:	61fb      	str	r3, [r7, #28]
  return(result);
 8002eea:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eee:	2301      	movs	r3, #1
 8002ef0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	f383 8810 	msr	PRIMASK, r3
}
 8002ef8:	46c0      	nop			; (mov r8, r8)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2101      	movs	r1, #1
 8002f06:	430a      	orrs	r2, r1
 8002f08:	609a      	str	r2, [r3, #8]
 8002f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	f383 8810 	msr	PRIMASK, r3
}
 8002f14:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	2380      	movs	r3, #128	; 0x80
 8002f1c:	015b      	lsls	r3, r3, #5
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d107      	bne.n	8002f32 <UART_Start_Receive_IT+0x106>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d103      	bne.n	8002f32 <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	4a15      	ldr	r2, [pc, #84]	; (8002f84 <UART_Start_Receive_IT+0x158>)
 8002f2e:	665a      	str	r2, [r3, #100]	; 0x64
 8002f30:	e002      	b.n	8002f38 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	4a14      	ldr	r2, [pc, #80]	; (8002f88 <UART_Start_Receive_IT+0x15c>)
 8002f36:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2274      	movs	r2, #116	; 0x74
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f40:	f3ef 8310 	mrs	r3, PRIMASK
 8002f44:	613b      	str	r3, [r7, #16]
  return(result);
 8002f46:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002f48:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f383 8810 	msr	PRIMASK, r3
}
 8002f54:	46c0      	nop			; (mov r8, r8)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2190      	movs	r1, #144	; 0x90
 8002f62:	0049      	lsls	r1, r1, #1
 8002f64:	430a      	orrs	r2, r1
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	f383 8810 	msr	PRIMASK, r3
}
 8002f72:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	0018      	movs	r0, r3
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	b00c      	add	sp, #48	; 0x30
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	000001ff 	.word	0x000001ff
 8002f84:	0800323d 	.word	0x0800323d
 8002f88:	080030d5 	.word	0x080030d5

08002f8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b08e      	sub	sp, #56	; 0x38
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f94:	f3ef 8310 	mrs	r3, PRIMASK
 8002f98:	617b      	str	r3, [r7, #20]
  return(result);
 8002f9a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	f383 8810 	msr	PRIMASK, r3
}
 8002fa8:	46c0      	nop			; (mov r8, r8)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4925      	ldr	r1, [pc, #148]	; (800304c <UART_EndRxTransfer+0xc0>)
 8002fb6:	400a      	ands	r2, r1
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fbc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	f383 8810 	msr	PRIMASK, r3
}
 8002fc4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fc6:	f3ef 8310 	mrs	r3, PRIMASK
 8002fca:	623b      	str	r3, [r7, #32]
  return(result);
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fce:	633b      	str	r3, [r7, #48]	; 0x30
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	f383 8810 	msr	PRIMASK, r3
}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	438a      	bics	r2, r1
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fee:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff2:	f383 8810 	msr	PRIMASK, r3
}
 8002ff6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d118      	bne.n	8003032 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003000:	f3ef 8310 	mrs	r3, PRIMASK
 8003004:	60bb      	str	r3, [r7, #8]
  return(result);
 8003006:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003008:	62fb      	str	r3, [r7, #44]	; 0x2c
 800300a:	2301      	movs	r3, #1
 800300c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f383 8810 	msr	PRIMASK, r3
}
 8003014:	46c0      	nop			; (mov r8, r8)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2110      	movs	r1, #16
 8003022:	438a      	bics	r2, r1
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003028:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	f383 8810 	msr	PRIMASK, r3
}
 8003030:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2220      	movs	r2, #32
 8003036:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003044:	46c0      	nop			; (mov r8, r8)
 8003046:	46bd      	mov	sp, r7
 8003048:	b00e      	add	sp, #56	; 0x38
 800304a:	bd80      	pop	{r7, pc}
 800304c:	fffffedf 	.word	0xfffffedf

08003050 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	225a      	movs	r2, #90	; 0x5a
 8003062:	2100      	movs	r1, #0
 8003064:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2252      	movs	r2, #82	; 0x52
 800306a:	2100      	movs	r1, #0
 800306c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	0018      	movs	r0, r3
 8003072:	f7ff fb7f 	bl	8002774 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003076:	46c0      	nop			; (mov r8, r8)
 8003078:	46bd      	mov	sp, r7
 800307a:	b004      	add	sp, #16
 800307c:	bd80      	pop	{r7, pc}

0800307e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b086      	sub	sp, #24
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003086:	f3ef 8310 	mrs	r3, PRIMASK
 800308a:	60bb      	str	r3, [r7, #8]
  return(result);
 800308c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800308e:	617b      	str	r3, [r7, #20]
 8003090:	2301      	movs	r3, #1
 8003092:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f383 8810 	msr	PRIMASK, r3
}
 800309a:	46c0      	nop			; (mov r8, r8)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2140      	movs	r1, #64	; 0x40
 80030a8:	438a      	bics	r2, r1
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	f383 8810 	msr	PRIMASK, r3
}
 80030b6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2220      	movs	r2, #32
 80030bc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	0018      	movs	r0, r3
 80030c8:	f7ff fb44 	bl	8002754 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030cc:	46c0      	nop			; (mov r8, r8)
 80030ce:	46bd      	mov	sp, r7
 80030d0:	b006      	add	sp, #24
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b090      	sub	sp, #64	; 0x40
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80030dc:	203e      	movs	r0, #62	; 0x3e
 80030de:	183b      	adds	r3, r7, r0
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	215c      	movs	r1, #92	; 0x5c
 80030e4:	5a52      	ldrh	r2, [r2, r1]
 80030e6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030ec:	2b22      	cmp	r3, #34	; 0x22
 80030ee:	d000      	beq.n	80030f2 <UART_RxISR_8BIT+0x1e>
 80030f0:	e095      	b.n	800321e <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	213c      	movs	r1, #60	; 0x3c
 80030f8:	187b      	adds	r3, r7, r1
 80030fa:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80030fc:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80030fe:	187b      	adds	r3, r7, r1
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	b2da      	uxtb	r2, r3
 8003104:	183b      	adds	r3, r7, r0
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	b2d9      	uxtb	r1, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310e:	400a      	ands	r2, r1
 8003110:	b2d2      	uxtb	r2, r2
 8003112:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003118:	1c5a      	adds	r2, r3, #1
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	225a      	movs	r2, #90	; 0x5a
 8003122:	5a9b      	ldrh	r3, [r3, r2]
 8003124:	b29b      	uxth	r3, r3
 8003126:	3b01      	subs	r3, #1
 8003128:	b299      	uxth	r1, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	225a      	movs	r2, #90	; 0x5a
 800312e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	225a      	movs	r2, #90	; 0x5a
 8003134:	5a9b      	ldrh	r3, [r3, r2]
 8003136:	b29b      	uxth	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	d178      	bne.n	800322e <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800313c:	f3ef 8310 	mrs	r3, PRIMASK
 8003140:	61bb      	str	r3, [r7, #24]
  return(result);
 8003142:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003144:	63bb      	str	r3, [r7, #56]	; 0x38
 8003146:	2301      	movs	r3, #1
 8003148:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	f383 8810 	msr	PRIMASK, r3
}
 8003150:	46c0      	nop			; (mov r8, r8)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4936      	ldr	r1, [pc, #216]	; (8003238 <UART_RxISR_8BIT+0x164>)
 800315e:	400a      	ands	r2, r1
 8003160:	601a      	str	r2, [r3, #0]
 8003162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003164:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	f383 8810 	msr	PRIMASK, r3
}
 800316c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800316e:	f3ef 8310 	mrs	r3, PRIMASK
 8003172:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003176:	637b      	str	r3, [r7, #52]	; 0x34
 8003178:	2301      	movs	r3, #1
 800317a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800317c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317e:	f383 8810 	msr	PRIMASK, r3
}
 8003182:	46c0      	nop			; (mov r8, r8)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689a      	ldr	r2, [r3, #8]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2101      	movs	r1, #1
 8003190:	438a      	bics	r2, r1
 8003192:	609a      	str	r2, [r3, #8]
 8003194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003196:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319a:	f383 8810 	msr	PRIMASK, r3
}
 800319e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2220      	movs	r2, #32
 80031a4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d12f      	bne.n	8003214 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031ba:	f3ef 8310 	mrs	r3, PRIMASK
 80031be:	60fb      	str	r3, [r7, #12]
  return(result);
 80031c0:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031c2:	633b      	str	r3, [r7, #48]	; 0x30
 80031c4:	2301      	movs	r3, #1
 80031c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	f383 8810 	msr	PRIMASK, r3
}
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2110      	movs	r1, #16
 80031dc:	438a      	bics	r2, r1
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f383 8810 	msr	PRIMASK, r3
}
 80031ea:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	2210      	movs	r2, #16
 80031f4:	4013      	ands	r3, r2
 80031f6:	2b10      	cmp	r3, #16
 80031f8:	d103      	bne.n	8003202 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2210      	movs	r2, #16
 8003200:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2258      	movs	r2, #88	; 0x58
 8003206:	5a9a      	ldrh	r2, [r3, r2]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	0011      	movs	r1, r2
 800320c:	0018      	movs	r0, r3
 800320e:	f7ff fab9 	bl	8002784 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003212:	e00c      	b.n	800322e <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	0018      	movs	r0, r3
 8003218:	f7ff faa4 	bl	8002764 <HAL_UART_RxCpltCallback>
}
 800321c:	e007      	b.n	800322e <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	699a      	ldr	r2, [r3, #24]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2108      	movs	r1, #8
 800322a:	430a      	orrs	r2, r1
 800322c:	619a      	str	r2, [r3, #24]
}
 800322e:	46c0      	nop			; (mov r8, r8)
 8003230:	46bd      	mov	sp, r7
 8003232:	b010      	add	sp, #64	; 0x40
 8003234:	bd80      	pop	{r7, pc}
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	fffffedf 	.word	0xfffffedf

0800323c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b090      	sub	sp, #64	; 0x40
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003244:	203e      	movs	r0, #62	; 0x3e
 8003246:	183b      	adds	r3, r7, r0
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	215c      	movs	r1, #92	; 0x5c
 800324c:	5a52      	ldrh	r2, [r2, r1]
 800324e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003254:	2b22      	cmp	r3, #34	; 0x22
 8003256:	d000      	beq.n	800325a <UART_RxISR_16BIT+0x1e>
 8003258:	e095      	b.n	8003386 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	213c      	movs	r1, #60	; 0x3c
 8003260:	187b      	adds	r3, r7, r1
 8003262:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003264:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326a:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 800326c:	187b      	adds	r3, r7, r1
 800326e:	183a      	adds	r2, r7, r0
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	8812      	ldrh	r2, [r2, #0]
 8003274:	4013      	ands	r3, r2
 8003276:	b29a      	uxth	r2, r3
 8003278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800327a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003280:	1c9a      	adds	r2, r3, #2
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	225a      	movs	r2, #90	; 0x5a
 800328a:	5a9b      	ldrh	r3, [r3, r2]
 800328c:	b29b      	uxth	r3, r3
 800328e:	3b01      	subs	r3, #1
 8003290:	b299      	uxth	r1, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	225a      	movs	r2, #90	; 0x5a
 8003296:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	225a      	movs	r2, #90	; 0x5a
 800329c:	5a9b      	ldrh	r3, [r3, r2]
 800329e:	b29b      	uxth	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d178      	bne.n	8003396 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032a4:	f3ef 8310 	mrs	r3, PRIMASK
 80032a8:	617b      	str	r3, [r7, #20]
  return(result);
 80032aa:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032ac:	637b      	str	r3, [r7, #52]	; 0x34
 80032ae:	2301      	movs	r3, #1
 80032b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	f383 8810 	msr	PRIMASK, r3
}
 80032b8:	46c0      	nop			; (mov r8, r8)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4936      	ldr	r1, [pc, #216]	; (80033a0 <UART_RxISR_16BIT+0x164>)
 80032c6:	400a      	ands	r2, r1
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	f383 8810 	msr	PRIMASK, r3
}
 80032d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032d6:	f3ef 8310 	mrs	r3, PRIMASK
 80032da:	623b      	str	r3, [r7, #32]
  return(result);
 80032dc:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032de:	633b      	str	r3, [r7, #48]	; 0x30
 80032e0:	2301      	movs	r3, #1
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	f383 8810 	msr	PRIMASK, r3
}
 80032ea:	46c0      	nop			; (mov r8, r8)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2101      	movs	r1, #1
 80032f8:	438a      	bics	r2, r1
 80032fa:	609a      	str	r2, [r3, #8]
 80032fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003302:	f383 8810 	msr	PRIMASK, r3
}
 8003306:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2220      	movs	r2, #32
 800330c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003318:	2b01      	cmp	r3, #1
 800331a:	d12f      	bne.n	800337c <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003322:	f3ef 8310 	mrs	r3, PRIMASK
 8003326:	60bb      	str	r3, [r7, #8]
  return(result);
 8003328:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800332a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800332c:	2301      	movs	r3, #1
 800332e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f383 8810 	msr	PRIMASK, r3
}
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2110      	movs	r1, #16
 8003344:	438a      	bics	r2, r1
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	f383 8810 	msr	PRIMASK, r3
}
 8003352:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	2210      	movs	r2, #16
 800335c:	4013      	ands	r3, r2
 800335e:	2b10      	cmp	r3, #16
 8003360:	d103      	bne.n	800336a <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2210      	movs	r2, #16
 8003368:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2258      	movs	r2, #88	; 0x58
 800336e:	5a9a      	ldrh	r2, [r3, r2]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	0011      	movs	r1, r2
 8003374:	0018      	movs	r0, r3
 8003376:	f7ff fa05 	bl	8002784 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800337a:	e00c      	b.n	8003396 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	0018      	movs	r0, r3
 8003380:	f7ff f9f0 	bl	8002764 <HAL_UART_RxCpltCallback>
}
 8003384:	e007      	b.n	8003396 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	699a      	ldr	r2, [r3, #24]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2108      	movs	r1, #8
 8003392:	430a      	orrs	r2, r1
 8003394:	619a      	str	r2, [r3, #24]
}
 8003396:	46c0      	nop			; (mov r8, r8)
 8003398:	46bd      	mov	sp, r7
 800339a:	b010      	add	sp, #64	; 0x40
 800339c:	bd80      	pop	{r7, pc}
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	fffffedf 	.word	0xfffffedf

080033a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80033ac:	46c0      	nop			; (mov r8, r8)
 80033ae:	46bd      	mov	sp, r7
 80033b0:	b002      	add	sp, #8
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <__errno>:
 80033b4:	4b01      	ldr	r3, [pc, #4]	; (80033bc <__errno+0x8>)
 80033b6:	6818      	ldr	r0, [r3, #0]
 80033b8:	4770      	bx	lr
 80033ba:	46c0      	nop			; (mov r8, r8)
 80033bc:	2000000c 	.word	0x2000000c

080033c0 <__sflush_r>:
 80033c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033c2:	898b      	ldrh	r3, [r1, #12]
 80033c4:	0005      	movs	r5, r0
 80033c6:	000c      	movs	r4, r1
 80033c8:	071a      	lsls	r2, r3, #28
 80033ca:	d45f      	bmi.n	800348c <__sflush_r+0xcc>
 80033cc:	684a      	ldr	r2, [r1, #4]
 80033ce:	2a00      	cmp	r2, #0
 80033d0:	dc04      	bgt.n	80033dc <__sflush_r+0x1c>
 80033d2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80033d4:	2a00      	cmp	r2, #0
 80033d6:	dc01      	bgt.n	80033dc <__sflush_r+0x1c>
 80033d8:	2000      	movs	r0, #0
 80033da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80033dc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80033de:	2f00      	cmp	r7, #0
 80033e0:	d0fa      	beq.n	80033d8 <__sflush_r+0x18>
 80033e2:	2200      	movs	r2, #0
 80033e4:	2180      	movs	r1, #128	; 0x80
 80033e6:	682e      	ldr	r6, [r5, #0]
 80033e8:	602a      	str	r2, [r5, #0]
 80033ea:	001a      	movs	r2, r3
 80033ec:	0149      	lsls	r1, r1, #5
 80033ee:	400a      	ands	r2, r1
 80033f0:	420b      	tst	r3, r1
 80033f2:	d034      	beq.n	800345e <__sflush_r+0x9e>
 80033f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80033f6:	89a3      	ldrh	r3, [r4, #12]
 80033f8:	075b      	lsls	r3, r3, #29
 80033fa:	d506      	bpl.n	800340a <__sflush_r+0x4a>
 80033fc:	6863      	ldr	r3, [r4, #4]
 80033fe:	1ac0      	subs	r0, r0, r3
 8003400:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <__sflush_r+0x4a>
 8003406:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003408:	1ac0      	subs	r0, r0, r3
 800340a:	0002      	movs	r2, r0
 800340c:	6a21      	ldr	r1, [r4, #32]
 800340e:	2300      	movs	r3, #0
 8003410:	0028      	movs	r0, r5
 8003412:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003414:	47b8      	blx	r7
 8003416:	89a1      	ldrh	r1, [r4, #12]
 8003418:	1c43      	adds	r3, r0, #1
 800341a:	d106      	bne.n	800342a <__sflush_r+0x6a>
 800341c:	682b      	ldr	r3, [r5, #0]
 800341e:	2b1d      	cmp	r3, #29
 8003420:	d831      	bhi.n	8003486 <__sflush_r+0xc6>
 8003422:	4a2c      	ldr	r2, [pc, #176]	; (80034d4 <__sflush_r+0x114>)
 8003424:	40da      	lsrs	r2, r3
 8003426:	07d3      	lsls	r3, r2, #31
 8003428:	d52d      	bpl.n	8003486 <__sflush_r+0xc6>
 800342a:	2300      	movs	r3, #0
 800342c:	6063      	str	r3, [r4, #4]
 800342e:	6923      	ldr	r3, [r4, #16]
 8003430:	6023      	str	r3, [r4, #0]
 8003432:	04cb      	lsls	r3, r1, #19
 8003434:	d505      	bpl.n	8003442 <__sflush_r+0x82>
 8003436:	1c43      	adds	r3, r0, #1
 8003438:	d102      	bne.n	8003440 <__sflush_r+0x80>
 800343a:	682b      	ldr	r3, [r5, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d100      	bne.n	8003442 <__sflush_r+0x82>
 8003440:	6560      	str	r0, [r4, #84]	; 0x54
 8003442:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003444:	602e      	str	r6, [r5, #0]
 8003446:	2900      	cmp	r1, #0
 8003448:	d0c6      	beq.n	80033d8 <__sflush_r+0x18>
 800344a:	0023      	movs	r3, r4
 800344c:	3344      	adds	r3, #68	; 0x44
 800344e:	4299      	cmp	r1, r3
 8003450:	d002      	beq.n	8003458 <__sflush_r+0x98>
 8003452:	0028      	movs	r0, r5
 8003454:	f000 f9d2 	bl	80037fc <_free_r>
 8003458:	2000      	movs	r0, #0
 800345a:	6360      	str	r0, [r4, #52]	; 0x34
 800345c:	e7bd      	b.n	80033da <__sflush_r+0x1a>
 800345e:	2301      	movs	r3, #1
 8003460:	0028      	movs	r0, r5
 8003462:	6a21      	ldr	r1, [r4, #32]
 8003464:	47b8      	blx	r7
 8003466:	1c43      	adds	r3, r0, #1
 8003468:	d1c5      	bne.n	80033f6 <__sflush_r+0x36>
 800346a:	682b      	ldr	r3, [r5, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0c2      	beq.n	80033f6 <__sflush_r+0x36>
 8003470:	2b1d      	cmp	r3, #29
 8003472:	d001      	beq.n	8003478 <__sflush_r+0xb8>
 8003474:	2b16      	cmp	r3, #22
 8003476:	d101      	bne.n	800347c <__sflush_r+0xbc>
 8003478:	602e      	str	r6, [r5, #0]
 800347a:	e7ad      	b.n	80033d8 <__sflush_r+0x18>
 800347c:	2340      	movs	r3, #64	; 0x40
 800347e:	89a2      	ldrh	r2, [r4, #12]
 8003480:	4313      	orrs	r3, r2
 8003482:	81a3      	strh	r3, [r4, #12]
 8003484:	e7a9      	b.n	80033da <__sflush_r+0x1a>
 8003486:	2340      	movs	r3, #64	; 0x40
 8003488:	430b      	orrs	r3, r1
 800348a:	e7fa      	b.n	8003482 <__sflush_r+0xc2>
 800348c:	690f      	ldr	r7, [r1, #16]
 800348e:	2f00      	cmp	r7, #0
 8003490:	d0a2      	beq.n	80033d8 <__sflush_r+0x18>
 8003492:	680a      	ldr	r2, [r1, #0]
 8003494:	600f      	str	r7, [r1, #0]
 8003496:	1bd2      	subs	r2, r2, r7
 8003498:	9201      	str	r2, [sp, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	079b      	lsls	r3, r3, #30
 800349e:	d100      	bne.n	80034a2 <__sflush_r+0xe2>
 80034a0:	694a      	ldr	r2, [r1, #20]
 80034a2:	60a2      	str	r2, [r4, #8]
 80034a4:	9b01      	ldr	r3, [sp, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	dc00      	bgt.n	80034ac <__sflush_r+0xec>
 80034aa:	e795      	b.n	80033d8 <__sflush_r+0x18>
 80034ac:	003a      	movs	r2, r7
 80034ae:	0028      	movs	r0, r5
 80034b0:	9b01      	ldr	r3, [sp, #4]
 80034b2:	6a21      	ldr	r1, [r4, #32]
 80034b4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80034b6:	47b0      	blx	r6
 80034b8:	2800      	cmp	r0, #0
 80034ba:	dc06      	bgt.n	80034ca <__sflush_r+0x10a>
 80034bc:	2340      	movs	r3, #64	; 0x40
 80034be:	2001      	movs	r0, #1
 80034c0:	89a2      	ldrh	r2, [r4, #12]
 80034c2:	4240      	negs	r0, r0
 80034c4:	4313      	orrs	r3, r2
 80034c6:	81a3      	strh	r3, [r4, #12]
 80034c8:	e787      	b.n	80033da <__sflush_r+0x1a>
 80034ca:	9b01      	ldr	r3, [sp, #4]
 80034cc:	183f      	adds	r7, r7, r0
 80034ce:	1a1b      	subs	r3, r3, r0
 80034d0:	9301      	str	r3, [sp, #4]
 80034d2:	e7e7      	b.n	80034a4 <__sflush_r+0xe4>
 80034d4:	20400001 	.word	0x20400001

080034d8 <_fflush_r>:
 80034d8:	690b      	ldr	r3, [r1, #16]
 80034da:	b570      	push	{r4, r5, r6, lr}
 80034dc:	0005      	movs	r5, r0
 80034de:	000c      	movs	r4, r1
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d102      	bne.n	80034ea <_fflush_r+0x12>
 80034e4:	2500      	movs	r5, #0
 80034e6:	0028      	movs	r0, r5
 80034e8:	bd70      	pop	{r4, r5, r6, pc}
 80034ea:	2800      	cmp	r0, #0
 80034ec:	d004      	beq.n	80034f8 <_fflush_r+0x20>
 80034ee:	6983      	ldr	r3, [r0, #24]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <_fflush_r+0x20>
 80034f4:	f000 f8a8 	bl	8003648 <__sinit>
 80034f8:	4b14      	ldr	r3, [pc, #80]	; (800354c <_fflush_r+0x74>)
 80034fa:	429c      	cmp	r4, r3
 80034fc:	d11b      	bne.n	8003536 <_fflush_r+0x5e>
 80034fe:	686c      	ldr	r4, [r5, #4]
 8003500:	220c      	movs	r2, #12
 8003502:	5ea3      	ldrsh	r3, [r4, r2]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0ed      	beq.n	80034e4 <_fflush_r+0xc>
 8003508:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800350a:	07d2      	lsls	r2, r2, #31
 800350c:	d404      	bmi.n	8003518 <_fflush_r+0x40>
 800350e:	059b      	lsls	r3, r3, #22
 8003510:	d402      	bmi.n	8003518 <_fflush_r+0x40>
 8003512:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003514:	f000 f95d 	bl	80037d2 <__retarget_lock_acquire_recursive>
 8003518:	0028      	movs	r0, r5
 800351a:	0021      	movs	r1, r4
 800351c:	f7ff ff50 	bl	80033c0 <__sflush_r>
 8003520:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003522:	0005      	movs	r5, r0
 8003524:	07db      	lsls	r3, r3, #31
 8003526:	d4de      	bmi.n	80034e6 <_fflush_r+0xe>
 8003528:	89a3      	ldrh	r3, [r4, #12]
 800352a:	059b      	lsls	r3, r3, #22
 800352c:	d4db      	bmi.n	80034e6 <_fflush_r+0xe>
 800352e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003530:	f000 f950 	bl	80037d4 <__retarget_lock_release_recursive>
 8003534:	e7d7      	b.n	80034e6 <_fflush_r+0xe>
 8003536:	4b06      	ldr	r3, [pc, #24]	; (8003550 <_fflush_r+0x78>)
 8003538:	429c      	cmp	r4, r3
 800353a:	d101      	bne.n	8003540 <_fflush_r+0x68>
 800353c:	68ac      	ldr	r4, [r5, #8]
 800353e:	e7df      	b.n	8003500 <_fflush_r+0x28>
 8003540:	4b04      	ldr	r3, [pc, #16]	; (8003554 <_fflush_r+0x7c>)
 8003542:	429c      	cmp	r4, r3
 8003544:	d1dc      	bne.n	8003500 <_fflush_r+0x28>
 8003546:	68ec      	ldr	r4, [r5, #12]
 8003548:	e7da      	b.n	8003500 <_fflush_r+0x28>
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	08003bd4 	.word	0x08003bd4
 8003550:	08003bf4 	.word	0x08003bf4
 8003554:	08003bb4 	.word	0x08003bb4

08003558 <fflush>:
 8003558:	0001      	movs	r1, r0
 800355a:	b510      	push	{r4, lr}
 800355c:	2800      	cmp	r0, #0
 800355e:	d105      	bne.n	800356c <fflush+0x14>
 8003560:	4b05      	ldr	r3, [pc, #20]	; (8003578 <fflush+0x20>)
 8003562:	4906      	ldr	r1, [pc, #24]	; (800357c <fflush+0x24>)
 8003564:	6818      	ldr	r0, [r3, #0]
 8003566:	f000 f8ef 	bl	8003748 <_fwalk_reent>
 800356a:	bd10      	pop	{r4, pc}
 800356c:	4b04      	ldr	r3, [pc, #16]	; (8003580 <fflush+0x28>)
 800356e:	6818      	ldr	r0, [r3, #0]
 8003570:	f7ff ffb2 	bl	80034d8 <_fflush_r>
 8003574:	e7f9      	b.n	800356a <fflush+0x12>
 8003576:	46c0      	nop			; (mov r8, r8)
 8003578:	08003c14 	.word	0x08003c14
 800357c:	080034d9 	.word	0x080034d9
 8003580:	2000000c 	.word	0x2000000c

08003584 <std>:
 8003584:	2300      	movs	r3, #0
 8003586:	b510      	push	{r4, lr}
 8003588:	0004      	movs	r4, r0
 800358a:	6003      	str	r3, [r0, #0]
 800358c:	6043      	str	r3, [r0, #4]
 800358e:	6083      	str	r3, [r0, #8]
 8003590:	8181      	strh	r1, [r0, #12]
 8003592:	6643      	str	r3, [r0, #100]	; 0x64
 8003594:	0019      	movs	r1, r3
 8003596:	81c2      	strh	r2, [r0, #14]
 8003598:	6103      	str	r3, [r0, #16]
 800359a:	6143      	str	r3, [r0, #20]
 800359c:	6183      	str	r3, [r0, #24]
 800359e:	2208      	movs	r2, #8
 80035a0:	305c      	adds	r0, #92	; 0x5c
 80035a2:	f000 f923 	bl	80037ec <memset>
 80035a6:	4b05      	ldr	r3, [pc, #20]	; (80035bc <std+0x38>)
 80035a8:	6224      	str	r4, [r4, #32]
 80035aa:	6263      	str	r3, [r4, #36]	; 0x24
 80035ac:	4b04      	ldr	r3, [pc, #16]	; (80035c0 <std+0x3c>)
 80035ae:	62a3      	str	r3, [r4, #40]	; 0x28
 80035b0:	4b04      	ldr	r3, [pc, #16]	; (80035c4 <std+0x40>)
 80035b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80035b4:	4b04      	ldr	r3, [pc, #16]	; (80035c8 <std+0x44>)
 80035b6:	6323      	str	r3, [r4, #48]	; 0x30
 80035b8:	bd10      	pop	{r4, pc}
 80035ba:	46c0      	nop			; (mov r8, r8)
 80035bc:	080039e5 	.word	0x080039e5
 80035c0:	08003a0d 	.word	0x08003a0d
 80035c4:	08003a45 	.word	0x08003a45
 80035c8:	08003a71 	.word	0x08003a71

080035cc <_cleanup_r>:
 80035cc:	b510      	push	{r4, lr}
 80035ce:	4902      	ldr	r1, [pc, #8]	; (80035d8 <_cleanup_r+0xc>)
 80035d0:	f000 f8ba 	bl	8003748 <_fwalk_reent>
 80035d4:	bd10      	pop	{r4, pc}
 80035d6:	46c0      	nop			; (mov r8, r8)
 80035d8:	080034d9 	.word	0x080034d9

080035dc <__sfmoreglue>:
 80035dc:	b570      	push	{r4, r5, r6, lr}
 80035de:	2568      	movs	r5, #104	; 0x68
 80035e0:	1e4a      	subs	r2, r1, #1
 80035e2:	4355      	muls	r5, r2
 80035e4:	000e      	movs	r6, r1
 80035e6:	0029      	movs	r1, r5
 80035e8:	3174      	adds	r1, #116	; 0x74
 80035ea:	f000 f973 	bl	80038d4 <_malloc_r>
 80035ee:	1e04      	subs	r4, r0, #0
 80035f0:	d008      	beq.n	8003604 <__sfmoreglue+0x28>
 80035f2:	2100      	movs	r1, #0
 80035f4:	002a      	movs	r2, r5
 80035f6:	6001      	str	r1, [r0, #0]
 80035f8:	6046      	str	r6, [r0, #4]
 80035fa:	300c      	adds	r0, #12
 80035fc:	60a0      	str	r0, [r4, #8]
 80035fe:	3268      	adds	r2, #104	; 0x68
 8003600:	f000 f8f4 	bl	80037ec <memset>
 8003604:	0020      	movs	r0, r4
 8003606:	bd70      	pop	{r4, r5, r6, pc}

08003608 <__sfp_lock_acquire>:
 8003608:	b510      	push	{r4, lr}
 800360a:	4802      	ldr	r0, [pc, #8]	; (8003614 <__sfp_lock_acquire+0xc>)
 800360c:	f000 f8e1 	bl	80037d2 <__retarget_lock_acquire_recursive>
 8003610:	bd10      	pop	{r4, pc}
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	20000141 	.word	0x20000141

08003618 <__sfp_lock_release>:
 8003618:	b510      	push	{r4, lr}
 800361a:	4802      	ldr	r0, [pc, #8]	; (8003624 <__sfp_lock_release+0xc>)
 800361c:	f000 f8da 	bl	80037d4 <__retarget_lock_release_recursive>
 8003620:	bd10      	pop	{r4, pc}
 8003622:	46c0      	nop			; (mov r8, r8)
 8003624:	20000141 	.word	0x20000141

08003628 <__sinit_lock_acquire>:
 8003628:	b510      	push	{r4, lr}
 800362a:	4802      	ldr	r0, [pc, #8]	; (8003634 <__sinit_lock_acquire+0xc>)
 800362c:	f000 f8d1 	bl	80037d2 <__retarget_lock_acquire_recursive>
 8003630:	bd10      	pop	{r4, pc}
 8003632:	46c0      	nop			; (mov r8, r8)
 8003634:	20000142 	.word	0x20000142

08003638 <__sinit_lock_release>:
 8003638:	b510      	push	{r4, lr}
 800363a:	4802      	ldr	r0, [pc, #8]	; (8003644 <__sinit_lock_release+0xc>)
 800363c:	f000 f8ca 	bl	80037d4 <__retarget_lock_release_recursive>
 8003640:	bd10      	pop	{r4, pc}
 8003642:	46c0      	nop			; (mov r8, r8)
 8003644:	20000142 	.word	0x20000142

08003648 <__sinit>:
 8003648:	b513      	push	{r0, r1, r4, lr}
 800364a:	0004      	movs	r4, r0
 800364c:	f7ff ffec 	bl	8003628 <__sinit_lock_acquire>
 8003650:	69a3      	ldr	r3, [r4, #24]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <__sinit+0x14>
 8003656:	f7ff ffef 	bl	8003638 <__sinit_lock_release>
 800365a:	bd13      	pop	{r0, r1, r4, pc}
 800365c:	64a3      	str	r3, [r4, #72]	; 0x48
 800365e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003660:	6523      	str	r3, [r4, #80]	; 0x50
 8003662:	4b13      	ldr	r3, [pc, #76]	; (80036b0 <__sinit+0x68>)
 8003664:	4a13      	ldr	r2, [pc, #76]	; (80036b4 <__sinit+0x6c>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	62a2      	str	r2, [r4, #40]	; 0x28
 800366a:	9301      	str	r3, [sp, #4]
 800366c:	42a3      	cmp	r3, r4
 800366e:	d101      	bne.n	8003674 <__sinit+0x2c>
 8003670:	2301      	movs	r3, #1
 8003672:	61a3      	str	r3, [r4, #24]
 8003674:	0020      	movs	r0, r4
 8003676:	f000 f81f 	bl	80036b8 <__sfp>
 800367a:	6060      	str	r0, [r4, #4]
 800367c:	0020      	movs	r0, r4
 800367e:	f000 f81b 	bl	80036b8 <__sfp>
 8003682:	60a0      	str	r0, [r4, #8]
 8003684:	0020      	movs	r0, r4
 8003686:	f000 f817 	bl	80036b8 <__sfp>
 800368a:	2200      	movs	r2, #0
 800368c:	2104      	movs	r1, #4
 800368e:	60e0      	str	r0, [r4, #12]
 8003690:	6860      	ldr	r0, [r4, #4]
 8003692:	f7ff ff77 	bl	8003584 <std>
 8003696:	2201      	movs	r2, #1
 8003698:	2109      	movs	r1, #9
 800369a:	68a0      	ldr	r0, [r4, #8]
 800369c:	f7ff ff72 	bl	8003584 <std>
 80036a0:	2202      	movs	r2, #2
 80036a2:	2112      	movs	r1, #18
 80036a4:	68e0      	ldr	r0, [r4, #12]
 80036a6:	f7ff ff6d 	bl	8003584 <std>
 80036aa:	2301      	movs	r3, #1
 80036ac:	61a3      	str	r3, [r4, #24]
 80036ae:	e7d2      	b.n	8003656 <__sinit+0xe>
 80036b0:	08003c14 	.word	0x08003c14
 80036b4:	080035cd 	.word	0x080035cd

080036b8 <__sfp>:
 80036b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ba:	0007      	movs	r7, r0
 80036bc:	f7ff ffa4 	bl	8003608 <__sfp_lock_acquire>
 80036c0:	4b1f      	ldr	r3, [pc, #124]	; (8003740 <__sfp+0x88>)
 80036c2:	681e      	ldr	r6, [r3, #0]
 80036c4:	69b3      	ldr	r3, [r6, #24]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d102      	bne.n	80036d0 <__sfp+0x18>
 80036ca:	0030      	movs	r0, r6
 80036cc:	f7ff ffbc 	bl	8003648 <__sinit>
 80036d0:	3648      	adds	r6, #72	; 0x48
 80036d2:	68b4      	ldr	r4, [r6, #8]
 80036d4:	6873      	ldr	r3, [r6, #4]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	d504      	bpl.n	80036e4 <__sfp+0x2c>
 80036da:	6833      	ldr	r3, [r6, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d022      	beq.n	8003726 <__sfp+0x6e>
 80036e0:	6836      	ldr	r6, [r6, #0]
 80036e2:	e7f6      	b.n	80036d2 <__sfp+0x1a>
 80036e4:	220c      	movs	r2, #12
 80036e6:	5ea5      	ldrsh	r5, [r4, r2]
 80036e8:	2d00      	cmp	r5, #0
 80036ea:	d11a      	bne.n	8003722 <__sfp+0x6a>
 80036ec:	0020      	movs	r0, r4
 80036ee:	4b15      	ldr	r3, [pc, #84]	; (8003744 <__sfp+0x8c>)
 80036f0:	3058      	adds	r0, #88	; 0x58
 80036f2:	60e3      	str	r3, [r4, #12]
 80036f4:	6665      	str	r5, [r4, #100]	; 0x64
 80036f6:	f000 f86b 	bl	80037d0 <__retarget_lock_init_recursive>
 80036fa:	f7ff ff8d 	bl	8003618 <__sfp_lock_release>
 80036fe:	0020      	movs	r0, r4
 8003700:	2208      	movs	r2, #8
 8003702:	0029      	movs	r1, r5
 8003704:	6025      	str	r5, [r4, #0]
 8003706:	60a5      	str	r5, [r4, #8]
 8003708:	6065      	str	r5, [r4, #4]
 800370a:	6125      	str	r5, [r4, #16]
 800370c:	6165      	str	r5, [r4, #20]
 800370e:	61a5      	str	r5, [r4, #24]
 8003710:	305c      	adds	r0, #92	; 0x5c
 8003712:	f000 f86b 	bl	80037ec <memset>
 8003716:	6365      	str	r5, [r4, #52]	; 0x34
 8003718:	63a5      	str	r5, [r4, #56]	; 0x38
 800371a:	64a5      	str	r5, [r4, #72]	; 0x48
 800371c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800371e:	0020      	movs	r0, r4
 8003720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003722:	3468      	adds	r4, #104	; 0x68
 8003724:	e7d7      	b.n	80036d6 <__sfp+0x1e>
 8003726:	2104      	movs	r1, #4
 8003728:	0038      	movs	r0, r7
 800372a:	f7ff ff57 	bl	80035dc <__sfmoreglue>
 800372e:	1e04      	subs	r4, r0, #0
 8003730:	6030      	str	r0, [r6, #0]
 8003732:	d1d5      	bne.n	80036e0 <__sfp+0x28>
 8003734:	f7ff ff70 	bl	8003618 <__sfp_lock_release>
 8003738:	230c      	movs	r3, #12
 800373a:	603b      	str	r3, [r7, #0]
 800373c:	e7ef      	b.n	800371e <__sfp+0x66>
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	08003c14 	.word	0x08003c14
 8003744:	ffff0001 	.word	0xffff0001

08003748 <_fwalk_reent>:
 8003748:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800374a:	0004      	movs	r4, r0
 800374c:	0006      	movs	r6, r0
 800374e:	2700      	movs	r7, #0
 8003750:	9101      	str	r1, [sp, #4]
 8003752:	3448      	adds	r4, #72	; 0x48
 8003754:	6863      	ldr	r3, [r4, #4]
 8003756:	68a5      	ldr	r5, [r4, #8]
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	9b00      	ldr	r3, [sp, #0]
 800375c:	3b01      	subs	r3, #1
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	d504      	bpl.n	800376c <_fwalk_reent+0x24>
 8003762:	6824      	ldr	r4, [r4, #0]
 8003764:	2c00      	cmp	r4, #0
 8003766:	d1f5      	bne.n	8003754 <_fwalk_reent+0xc>
 8003768:	0038      	movs	r0, r7
 800376a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800376c:	89ab      	ldrh	r3, [r5, #12]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d908      	bls.n	8003784 <_fwalk_reent+0x3c>
 8003772:	220e      	movs	r2, #14
 8003774:	5eab      	ldrsh	r3, [r5, r2]
 8003776:	3301      	adds	r3, #1
 8003778:	d004      	beq.n	8003784 <_fwalk_reent+0x3c>
 800377a:	0029      	movs	r1, r5
 800377c:	0030      	movs	r0, r6
 800377e:	9b01      	ldr	r3, [sp, #4]
 8003780:	4798      	blx	r3
 8003782:	4307      	orrs	r7, r0
 8003784:	3568      	adds	r5, #104	; 0x68
 8003786:	e7e8      	b.n	800375a <_fwalk_reent+0x12>

08003788 <__libc_init_array>:
 8003788:	b570      	push	{r4, r5, r6, lr}
 800378a:	2600      	movs	r6, #0
 800378c:	4d0c      	ldr	r5, [pc, #48]	; (80037c0 <__libc_init_array+0x38>)
 800378e:	4c0d      	ldr	r4, [pc, #52]	; (80037c4 <__libc_init_array+0x3c>)
 8003790:	1b64      	subs	r4, r4, r5
 8003792:	10a4      	asrs	r4, r4, #2
 8003794:	42a6      	cmp	r6, r4
 8003796:	d109      	bne.n	80037ac <__libc_init_array+0x24>
 8003798:	2600      	movs	r6, #0
 800379a:	f000 f9cd 	bl	8003b38 <_init>
 800379e:	4d0a      	ldr	r5, [pc, #40]	; (80037c8 <__libc_init_array+0x40>)
 80037a0:	4c0a      	ldr	r4, [pc, #40]	; (80037cc <__libc_init_array+0x44>)
 80037a2:	1b64      	subs	r4, r4, r5
 80037a4:	10a4      	asrs	r4, r4, #2
 80037a6:	42a6      	cmp	r6, r4
 80037a8:	d105      	bne.n	80037b6 <__libc_init_array+0x2e>
 80037aa:	bd70      	pop	{r4, r5, r6, pc}
 80037ac:	00b3      	lsls	r3, r6, #2
 80037ae:	58eb      	ldr	r3, [r5, r3]
 80037b0:	4798      	blx	r3
 80037b2:	3601      	adds	r6, #1
 80037b4:	e7ee      	b.n	8003794 <__libc_init_array+0xc>
 80037b6:	00b3      	lsls	r3, r6, #2
 80037b8:	58eb      	ldr	r3, [r5, r3]
 80037ba:	4798      	blx	r3
 80037bc:	3601      	adds	r6, #1
 80037be:	e7f2      	b.n	80037a6 <__libc_init_array+0x1e>
 80037c0:	08003c18 	.word	0x08003c18
 80037c4:	08003c18 	.word	0x08003c18
 80037c8:	08003c18 	.word	0x08003c18
 80037cc:	08003c1c 	.word	0x08003c1c

080037d0 <__retarget_lock_init_recursive>:
 80037d0:	4770      	bx	lr

080037d2 <__retarget_lock_acquire_recursive>:
 80037d2:	4770      	bx	lr

080037d4 <__retarget_lock_release_recursive>:
 80037d4:	4770      	bx	lr
	...

080037d8 <malloc>:
 80037d8:	b510      	push	{r4, lr}
 80037da:	4b03      	ldr	r3, [pc, #12]	; (80037e8 <malloc+0x10>)
 80037dc:	0001      	movs	r1, r0
 80037de:	6818      	ldr	r0, [r3, #0]
 80037e0:	f000 f878 	bl	80038d4 <_malloc_r>
 80037e4:	bd10      	pop	{r4, pc}
 80037e6:	46c0      	nop			; (mov r8, r8)
 80037e8:	2000000c 	.word	0x2000000c

080037ec <memset>:
 80037ec:	0003      	movs	r3, r0
 80037ee:	1882      	adds	r2, r0, r2
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d100      	bne.n	80037f6 <memset+0xa>
 80037f4:	4770      	bx	lr
 80037f6:	7019      	strb	r1, [r3, #0]
 80037f8:	3301      	adds	r3, #1
 80037fa:	e7f9      	b.n	80037f0 <memset+0x4>

080037fc <_free_r>:
 80037fc:	b570      	push	{r4, r5, r6, lr}
 80037fe:	0005      	movs	r5, r0
 8003800:	2900      	cmp	r1, #0
 8003802:	d010      	beq.n	8003826 <_free_r+0x2a>
 8003804:	1f0c      	subs	r4, r1, #4
 8003806:	6823      	ldr	r3, [r4, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	da00      	bge.n	800380e <_free_r+0x12>
 800380c:	18e4      	adds	r4, r4, r3
 800380e:	0028      	movs	r0, r5
 8003810:	f000 f96e 	bl	8003af0 <__malloc_lock>
 8003814:	4a1d      	ldr	r2, [pc, #116]	; (800388c <_free_r+0x90>)
 8003816:	6813      	ldr	r3, [r2, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d105      	bne.n	8003828 <_free_r+0x2c>
 800381c:	6063      	str	r3, [r4, #4]
 800381e:	6014      	str	r4, [r2, #0]
 8003820:	0028      	movs	r0, r5
 8003822:	f000 f96d 	bl	8003b00 <__malloc_unlock>
 8003826:	bd70      	pop	{r4, r5, r6, pc}
 8003828:	42a3      	cmp	r3, r4
 800382a:	d908      	bls.n	800383e <_free_r+0x42>
 800382c:	6821      	ldr	r1, [r4, #0]
 800382e:	1860      	adds	r0, r4, r1
 8003830:	4283      	cmp	r3, r0
 8003832:	d1f3      	bne.n	800381c <_free_r+0x20>
 8003834:	6818      	ldr	r0, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	1841      	adds	r1, r0, r1
 800383a:	6021      	str	r1, [r4, #0]
 800383c:	e7ee      	b.n	800381c <_free_r+0x20>
 800383e:	001a      	movs	r2, r3
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <_free_r+0x4e>
 8003846:	42a3      	cmp	r3, r4
 8003848:	d9f9      	bls.n	800383e <_free_r+0x42>
 800384a:	6811      	ldr	r1, [r2, #0]
 800384c:	1850      	adds	r0, r2, r1
 800384e:	42a0      	cmp	r0, r4
 8003850:	d10b      	bne.n	800386a <_free_r+0x6e>
 8003852:	6820      	ldr	r0, [r4, #0]
 8003854:	1809      	adds	r1, r1, r0
 8003856:	1850      	adds	r0, r2, r1
 8003858:	6011      	str	r1, [r2, #0]
 800385a:	4283      	cmp	r3, r0
 800385c:	d1e0      	bne.n	8003820 <_free_r+0x24>
 800385e:	6818      	ldr	r0, [r3, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	1841      	adds	r1, r0, r1
 8003864:	6011      	str	r1, [r2, #0]
 8003866:	6053      	str	r3, [r2, #4]
 8003868:	e7da      	b.n	8003820 <_free_r+0x24>
 800386a:	42a0      	cmp	r0, r4
 800386c:	d902      	bls.n	8003874 <_free_r+0x78>
 800386e:	230c      	movs	r3, #12
 8003870:	602b      	str	r3, [r5, #0]
 8003872:	e7d5      	b.n	8003820 <_free_r+0x24>
 8003874:	6821      	ldr	r1, [r4, #0]
 8003876:	1860      	adds	r0, r4, r1
 8003878:	4283      	cmp	r3, r0
 800387a:	d103      	bne.n	8003884 <_free_r+0x88>
 800387c:	6818      	ldr	r0, [r3, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	1841      	adds	r1, r0, r1
 8003882:	6021      	str	r1, [r4, #0]
 8003884:	6063      	str	r3, [r4, #4]
 8003886:	6054      	str	r4, [r2, #4]
 8003888:	e7ca      	b.n	8003820 <_free_r+0x24>
 800388a:	46c0      	nop			; (mov r8, r8)
 800388c:	20000144 	.word	0x20000144

08003890 <sbrk_aligned>:
 8003890:	b570      	push	{r4, r5, r6, lr}
 8003892:	4e0f      	ldr	r6, [pc, #60]	; (80038d0 <sbrk_aligned+0x40>)
 8003894:	000d      	movs	r5, r1
 8003896:	6831      	ldr	r1, [r6, #0]
 8003898:	0004      	movs	r4, r0
 800389a:	2900      	cmp	r1, #0
 800389c:	d102      	bne.n	80038a4 <sbrk_aligned+0x14>
 800389e:	f000 f88f 	bl	80039c0 <_sbrk_r>
 80038a2:	6030      	str	r0, [r6, #0]
 80038a4:	0029      	movs	r1, r5
 80038a6:	0020      	movs	r0, r4
 80038a8:	f000 f88a 	bl	80039c0 <_sbrk_r>
 80038ac:	1c43      	adds	r3, r0, #1
 80038ae:	d00a      	beq.n	80038c6 <sbrk_aligned+0x36>
 80038b0:	2303      	movs	r3, #3
 80038b2:	1cc5      	adds	r5, r0, #3
 80038b4:	439d      	bics	r5, r3
 80038b6:	42a8      	cmp	r0, r5
 80038b8:	d007      	beq.n	80038ca <sbrk_aligned+0x3a>
 80038ba:	1a29      	subs	r1, r5, r0
 80038bc:	0020      	movs	r0, r4
 80038be:	f000 f87f 	bl	80039c0 <_sbrk_r>
 80038c2:	1c43      	adds	r3, r0, #1
 80038c4:	d101      	bne.n	80038ca <sbrk_aligned+0x3a>
 80038c6:	2501      	movs	r5, #1
 80038c8:	426d      	negs	r5, r5
 80038ca:	0028      	movs	r0, r5
 80038cc:	bd70      	pop	{r4, r5, r6, pc}
 80038ce:	46c0      	nop			; (mov r8, r8)
 80038d0:	20000148 	.word	0x20000148

080038d4 <_malloc_r>:
 80038d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038d6:	2203      	movs	r2, #3
 80038d8:	1ccb      	adds	r3, r1, #3
 80038da:	4393      	bics	r3, r2
 80038dc:	3308      	adds	r3, #8
 80038de:	0006      	movs	r6, r0
 80038e0:	001f      	movs	r7, r3
 80038e2:	2b0c      	cmp	r3, #12
 80038e4:	d232      	bcs.n	800394c <_malloc_r+0x78>
 80038e6:	270c      	movs	r7, #12
 80038e8:	42b9      	cmp	r1, r7
 80038ea:	d831      	bhi.n	8003950 <_malloc_r+0x7c>
 80038ec:	0030      	movs	r0, r6
 80038ee:	f000 f8ff 	bl	8003af0 <__malloc_lock>
 80038f2:	4d32      	ldr	r5, [pc, #200]	; (80039bc <_malloc_r+0xe8>)
 80038f4:	682b      	ldr	r3, [r5, #0]
 80038f6:	001c      	movs	r4, r3
 80038f8:	2c00      	cmp	r4, #0
 80038fa:	d12e      	bne.n	800395a <_malloc_r+0x86>
 80038fc:	0039      	movs	r1, r7
 80038fe:	0030      	movs	r0, r6
 8003900:	f7ff ffc6 	bl	8003890 <sbrk_aligned>
 8003904:	0004      	movs	r4, r0
 8003906:	1c43      	adds	r3, r0, #1
 8003908:	d11e      	bne.n	8003948 <_malloc_r+0x74>
 800390a:	682c      	ldr	r4, [r5, #0]
 800390c:	0025      	movs	r5, r4
 800390e:	2d00      	cmp	r5, #0
 8003910:	d14a      	bne.n	80039a8 <_malloc_r+0xd4>
 8003912:	6823      	ldr	r3, [r4, #0]
 8003914:	0029      	movs	r1, r5
 8003916:	18e3      	adds	r3, r4, r3
 8003918:	0030      	movs	r0, r6
 800391a:	9301      	str	r3, [sp, #4]
 800391c:	f000 f850 	bl	80039c0 <_sbrk_r>
 8003920:	9b01      	ldr	r3, [sp, #4]
 8003922:	4283      	cmp	r3, r0
 8003924:	d143      	bne.n	80039ae <_malloc_r+0xda>
 8003926:	6823      	ldr	r3, [r4, #0]
 8003928:	3703      	adds	r7, #3
 800392a:	1aff      	subs	r7, r7, r3
 800392c:	2303      	movs	r3, #3
 800392e:	439f      	bics	r7, r3
 8003930:	3708      	adds	r7, #8
 8003932:	2f0c      	cmp	r7, #12
 8003934:	d200      	bcs.n	8003938 <_malloc_r+0x64>
 8003936:	270c      	movs	r7, #12
 8003938:	0039      	movs	r1, r7
 800393a:	0030      	movs	r0, r6
 800393c:	f7ff ffa8 	bl	8003890 <sbrk_aligned>
 8003940:	1c43      	adds	r3, r0, #1
 8003942:	d034      	beq.n	80039ae <_malloc_r+0xda>
 8003944:	6823      	ldr	r3, [r4, #0]
 8003946:	19df      	adds	r7, r3, r7
 8003948:	6027      	str	r7, [r4, #0]
 800394a:	e013      	b.n	8003974 <_malloc_r+0xa0>
 800394c:	2b00      	cmp	r3, #0
 800394e:	dacb      	bge.n	80038e8 <_malloc_r+0x14>
 8003950:	230c      	movs	r3, #12
 8003952:	2500      	movs	r5, #0
 8003954:	6033      	str	r3, [r6, #0]
 8003956:	0028      	movs	r0, r5
 8003958:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800395a:	6822      	ldr	r2, [r4, #0]
 800395c:	1bd1      	subs	r1, r2, r7
 800395e:	d420      	bmi.n	80039a2 <_malloc_r+0xce>
 8003960:	290b      	cmp	r1, #11
 8003962:	d917      	bls.n	8003994 <_malloc_r+0xc0>
 8003964:	19e2      	adds	r2, r4, r7
 8003966:	6027      	str	r7, [r4, #0]
 8003968:	42a3      	cmp	r3, r4
 800396a:	d111      	bne.n	8003990 <_malloc_r+0xbc>
 800396c:	602a      	str	r2, [r5, #0]
 800396e:	6863      	ldr	r3, [r4, #4]
 8003970:	6011      	str	r1, [r2, #0]
 8003972:	6053      	str	r3, [r2, #4]
 8003974:	0030      	movs	r0, r6
 8003976:	0025      	movs	r5, r4
 8003978:	f000 f8c2 	bl	8003b00 <__malloc_unlock>
 800397c:	2207      	movs	r2, #7
 800397e:	350b      	adds	r5, #11
 8003980:	1d23      	adds	r3, r4, #4
 8003982:	4395      	bics	r5, r2
 8003984:	1aea      	subs	r2, r5, r3
 8003986:	429d      	cmp	r5, r3
 8003988:	d0e5      	beq.n	8003956 <_malloc_r+0x82>
 800398a:	1b5b      	subs	r3, r3, r5
 800398c:	50a3      	str	r3, [r4, r2]
 800398e:	e7e2      	b.n	8003956 <_malloc_r+0x82>
 8003990:	605a      	str	r2, [r3, #4]
 8003992:	e7ec      	b.n	800396e <_malloc_r+0x9a>
 8003994:	6862      	ldr	r2, [r4, #4]
 8003996:	42a3      	cmp	r3, r4
 8003998:	d101      	bne.n	800399e <_malloc_r+0xca>
 800399a:	602a      	str	r2, [r5, #0]
 800399c:	e7ea      	b.n	8003974 <_malloc_r+0xa0>
 800399e:	605a      	str	r2, [r3, #4]
 80039a0:	e7e8      	b.n	8003974 <_malloc_r+0xa0>
 80039a2:	0023      	movs	r3, r4
 80039a4:	6864      	ldr	r4, [r4, #4]
 80039a6:	e7a7      	b.n	80038f8 <_malloc_r+0x24>
 80039a8:	002c      	movs	r4, r5
 80039aa:	686d      	ldr	r5, [r5, #4]
 80039ac:	e7af      	b.n	800390e <_malloc_r+0x3a>
 80039ae:	230c      	movs	r3, #12
 80039b0:	0030      	movs	r0, r6
 80039b2:	6033      	str	r3, [r6, #0]
 80039b4:	f000 f8a4 	bl	8003b00 <__malloc_unlock>
 80039b8:	e7cd      	b.n	8003956 <_malloc_r+0x82>
 80039ba:	46c0      	nop			; (mov r8, r8)
 80039bc:	20000144 	.word	0x20000144

080039c0 <_sbrk_r>:
 80039c0:	2300      	movs	r3, #0
 80039c2:	b570      	push	{r4, r5, r6, lr}
 80039c4:	4d06      	ldr	r5, [pc, #24]	; (80039e0 <_sbrk_r+0x20>)
 80039c6:	0004      	movs	r4, r0
 80039c8:	0008      	movs	r0, r1
 80039ca:	602b      	str	r3, [r5, #0]
 80039cc:	f7fc ffdc 	bl	8000988 <_sbrk>
 80039d0:	1c43      	adds	r3, r0, #1
 80039d2:	d103      	bne.n	80039dc <_sbrk_r+0x1c>
 80039d4:	682b      	ldr	r3, [r5, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d000      	beq.n	80039dc <_sbrk_r+0x1c>
 80039da:	6023      	str	r3, [r4, #0]
 80039dc:	bd70      	pop	{r4, r5, r6, pc}
 80039de:	46c0      	nop			; (mov r8, r8)
 80039e0:	2000014c 	.word	0x2000014c

080039e4 <__sread>:
 80039e4:	b570      	push	{r4, r5, r6, lr}
 80039e6:	000c      	movs	r4, r1
 80039e8:	250e      	movs	r5, #14
 80039ea:	5f49      	ldrsh	r1, [r1, r5]
 80039ec:	f000 f890 	bl	8003b10 <_read_r>
 80039f0:	2800      	cmp	r0, #0
 80039f2:	db03      	blt.n	80039fc <__sread+0x18>
 80039f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80039f6:	181b      	adds	r3, r3, r0
 80039f8:	6563      	str	r3, [r4, #84]	; 0x54
 80039fa:	bd70      	pop	{r4, r5, r6, pc}
 80039fc:	89a3      	ldrh	r3, [r4, #12]
 80039fe:	4a02      	ldr	r2, [pc, #8]	; (8003a08 <__sread+0x24>)
 8003a00:	4013      	ands	r3, r2
 8003a02:	81a3      	strh	r3, [r4, #12]
 8003a04:	e7f9      	b.n	80039fa <__sread+0x16>
 8003a06:	46c0      	nop			; (mov r8, r8)
 8003a08:	ffffefff 	.word	0xffffefff

08003a0c <__swrite>:
 8003a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a0e:	001f      	movs	r7, r3
 8003a10:	898b      	ldrh	r3, [r1, #12]
 8003a12:	0005      	movs	r5, r0
 8003a14:	000c      	movs	r4, r1
 8003a16:	0016      	movs	r6, r2
 8003a18:	05db      	lsls	r3, r3, #23
 8003a1a:	d505      	bpl.n	8003a28 <__swrite+0x1c>
 8003a1c:	230e      	movs	r3, #14
 8003a1e:	5ec9      	ldrsh	r1, [r1, r3]
 8003a20:	2200      	movs	r2, #0
 8003a22:	2302      	movs	r3, #2
 8003a24:	f000 f850 	bl	8003ac8 <_lseek_r>
 8003a28:	89a3      	ldrh	r3, [r4, #12]
 8003a2a:	4a05      	ldr	r2, [pc, #20]	; (8003a40 <__swrite+0x34>)
 8003a2c:	0028      	movs	r0, r5
 8003a2e:	4013      	ands	r3, r2
 8003a30:	81a3      	strh	r3, [r4, #12]
 8003a32:	0032      	movs	r2, r6
 8003a34:	230e      	movs	r3, #14
 8003a36:	5ee1      	ldrsh	r1, [r4, r3]
 8003a38:	003b      	movs	r3, r7
 8003a3a:	f000 f81f 	bl	8003a7c <_write_r>
 8003a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a40:	ffffefff 	.word	0xffffefff

08003a44 <__sseek>:
 8003a44:	b570      	push	{r4, r5, r6, lr}
 8003a46:	000c      	movs	r4, r1
 8003a48:	250e      	movs	r5, #14
 8003a4a:	5f49      	ldrsh	r1, [r1, r5]
 8003a4c:	f000 f83c 	bl	8003ac8 <_lseek_r>
 8003a50:	89a3      	ldrh	r3, [r4, #12]
 8003a52:	1c42      	adds	r2, r0, #1
 8003a54:	d103      	bne.n	8003a5e <__sseek+0x1a>
 8003a56:	4a05      	ldr	r2, [pc, #20]	; (8003a6c <__sseek+0x28>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	81a3      	strh	r3, [r4, #12]
 8003a5c:	bd70      	pop	{r4, r5, r6, pc}
 8003a5e:	2280      	movs	r2, #128	; 0x80
 8003a60:	0152      	lsls	r2, r2, #5
 8003a62:	4313      	orrs	r3, r2
 8003a64:	81a3      	strh	r3, [r4, #12]
 8003a66:	6560      	str	r0, [r4, #84]	; 0x54
 8003a68:	e7f8      	b.n	8003a5c <__sseek+0x18>
 8003a6a:	46c0      	nop			; (mov r8, r8)
 8003a6c:	ffffefff 	.word	0xffffefff

08003a70 <__sclose>:
 8003a70:	b510      	push	{r4, lr}
 8003a72:	230e      	movs	r3, #14
 8003a74:	5ec9      	ldrsh	r1, [r1, r3]
 8003a76:	f000 f815 	bl	8003aa4 <_close_r>
 8003a7a:	bd10      	pop	{r4, pc}

08003a7c <_write_r>:
 8003a7c:	b570      	push	{r4, r5, r6, lr}
 8003a7e:	0004      	movs	r4, r0
 8003a80:	0008      	movs	r0, r1
 8003a82:	0011      	movs	r1, r2
 8003a84:	001a      	movs	r2, r3
 8003a86:	2300      	movs	r3, #0
 8003a88:	4d05      	ldr	r5, [pc, #20]	; (8003aa0 <_write_r+0x24>)
 8003a8a:	602b      	str	r3, [r5, #0]
 8003a8c:	f7fc ff4b 	bl	8000926 <_write>
 8003a90:	1c43      	adds	r3, r0, #1
 8003a92:	d103      	bne.n	8003a9c <_write_r+0x20>
 8003a94:	682b      	ldr	r3, [r5, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d000      	beq.n	8003a9c <_write_r+0x20>
 8003a9a:	6023      	str	r3, [r4, #0]
 8003a9c:	bd70      	pop	{r4, r5, r6, pc}
 8003a9e:	46c0      	nop			; (mov r8, r8)
 8003aa0:	2000014c 	.word	0x2000014c

08003aa4 <_close_r>:
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	b570      	push	{r4, r5, r6, lr}
 8003aa8:	4d06      	ldr	r5, [pc, #24]	; (8003ac4 <_close_r+0x20>)
 8003aaa:	0004      	movs	r4, r0
 8003aac:	0008      	movs	r0, r1
 8003aae:	602b      	str	r3, [r5, #0]
 8003ab0:	f7fc ff55 	bl	800095e <_close>
 8003ab4:	1c43      	adds	r3, r0, #1
 8003ab6:	d103      	bne.n	8003ac0 <_close_r+0x1c>
 8003ab8:	682b      	ldr	r3, [r5, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d000      	beq.n	8003ac0 <_close_r+0x1c>
 8003abe:	6023      	str	r3, [r4, #0]
 8003ac0:	bd70      	pop	{r4, r5, r6, pc}
 8003ac2:	46c0      	nop			; (mov r8, r8)
 8003ac4:	2000014c 	.word	0x2000014c

08003ac8 <_lseek_r>:
 8003ac8:	b570      	push	{r4, r5, r6, lr}
 8003aca:	0004      	movs	r4, r0
 8003acc:	0008      	movs	r0, r1
 8003ace:	0011      	movs	r1, r2
 8003ad0:	001a      	movs	r2, r3
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	4d05      	ldr	r5, [pc, #20]	; (8003aec <_lseek_r+0x24>)
 8003ad6:	602b      	str	r3, [r5, #0]
 8003ad8:	f7fc ff4b 	bl	8000972 <_lseek>
 8003adc:	1c43      	adds	r3, r0, #1
 8003ade:	d103      	bne.n	8003ae8 <_lseek_r+0x20>
 8003ae0:	682b      	ldr	r3, [r5, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d000      	beq.n	8003ae8 <_lseek_r+0x20>
 8003ae6:	6023      	str	r3, [r4, #0]
 8003ae8:	bd70      	pop	{r4, r5, r6, pc}
 8003aea:	46c0      	nop			; (mov r8, r8)
 8003aec:	2000014c 	.word	0x2000014c

08003af0 <__malloc_lock>:
 8003af0:	b510      	push	{r4, lr}
 8003af2:	4802      	ldr	r0, [pc, #8]	; (8003afc <__malloc_lock+0xc>)
 8003af4:	f7ff fe6d 	bl	80037d2 <__retarget_lock_acquire_recursive>
 8003af8:	bd10      	pop	{r4, pc}
 8003afa:	46c0      	nop			; (mov r8, r8)
 8003afc:	20000140 	.word	0x20000140

08003b00 <__malloc_unlock>:
 8003b00:	b510      	push	{r4, lr}
 8003b02:	4802      	ldr	r0, [pc, #8]	; (8003b0c <__malloc_unlock+0xc>)
 8003b04:	f7ff fe66 	bl	80037d4 <__retarget_lock_release_recursive>
 8003b08:	bd10      	pop	{r4, pc}
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	20000140 	.word	0x20000140

08003b10 <_read_r>:
 8003b10:	b570      	push	{r4, r5, r6, lr}
 8003b12:	0004      	movs	r4, r0
 8003b14:	0008      	movs	r0, r1
 8003b16:	0011      	movs	r1, r2
 8003b18:	001a      	movs	r2, r3
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	4d05      	ldr	r5, [pc, #20]	; (8003b34 <_read_r+0x24>)
 8003b1e:	602b      	str	r3, [r5, #0]
 8003b20:	f7fc fee4 	bl	80008ec <_read>
 8003b24:	1c43      	adds	r3, r0, #1
 8003b26:	d103      	bne.n	8003b30 <_read_r+0x20>
 8003b28:	682b      	ldr	r3, [r5, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d000      	beq.n	8003b30 <_read_r+0x20>
 8003b2e:	6023      	str	r3, [r4, #0]
 8003b30:	bd70      	pop	{r4, r5, r6, pc}
 8003b32:	46c0      	nop			; (mov r8, r8)
 8003b34:	2000014c 	.word	0x2000014c

08003b38 <_init>:
 8003b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3a:	46c0      	nop			; (mov r8, r8)
 8003b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b3e:	bc08      	pop	{r3}
 8003b40:	469e      	mov	lr, r3
 8003b42:	4770      	bx	lr

08003b44 <_fini>:
 8003b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b4a:	bc08      	pop	{r3}
 8003b4c:	469e      	mov	lr, r3
 8003b4e:	4770      	bx	lr
