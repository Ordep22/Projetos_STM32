
Project_17.1_Temperature_Sensor_Function_Solution.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f80  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800a040  0800a040  0001a040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5a4  0800a5a4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a5a4  0800a5a4  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a5a4  0800a5a4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5a4  0800a5a4  0001a5a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5a8  0800a5a8  0001a5a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a5ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  200001e0  0800a78c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  0800a78c  000202d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b194  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d80  00000000  00000000  0002b39c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e8  00000000  00000000  0002d120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000820  00000000  00000000  0002da08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a51f  00000000  00000000  0002e228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc3f  00000000  00000000  00048747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094b0e  00000000  00000000  00054386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8e94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000336c  00000000  00000000  000e8ee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a028 	.word	0x0800a028

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800a028 	.word	0x0800a028

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ff7d 	bl	800133c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fecd 	bl	80011ec <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff6f 	bl	800133c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff65 	bl	800133c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fef5 	bl	8001270 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 feeb 	bl	8001270 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_d2uiz>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	2200      	movs	r2, #0
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004ae:	0004      	movs	r4, r0
 80004b0:	000d      	movs	r5, r1
 80004b2:	f7ff ffef 	bl	8000494 <__aeabi_dcmpge>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d104      	bne.n	80004c4 <__aeabi_d2uiz+0x1c>
 80004ba:	0020      	movs	r0, r4
 80004bc:	0029      	movs	r1, r5
 80004be:	f001 fdbd 	bl	800203c <__aeabi_d2iz>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	0020      	movs	r0, r4
 80004ca:	0029      	movs	r1, r5
 80004cc:	f001 fa06 	bl	80018dc <__aeabi_dsub>
 80004d0:	f001 fdb4 	bl	800203c <__aeabi_d2iz>
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	061b      	lsls	r3, r3, #24
 80004d8:	469c      	mov	ip, r3
 80004da:	4460      	add	r0, ip
 80004dc:	e7f1      	b.n	80004c2 <__aeabi_d2uiz+0x1a>
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	41e00000 	.word	0x41e00000

080004e4 <__aeabi_d2lz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	0005      	movs	r5, r0
 80004e8:	000c      	movs	r4, r1
 80004ea:	2200      	movs	r2, #0
 80004ec:	2300      	movs	r3, #0
 80004ee:	0028      	movs	r0, r5
 80004f0:	0021      	movs	r1, r4
 80004f2:	f7ff ffb1 	bl	8000458 <__aeabi_dcmplt>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	d108      	bne.n	800050c <__aeabi_d2lz+0x28>
 80004fa:	0028      	movs	r0, r5
 80004fc:	0021      	movs	r1, r4
 80004fe:	f000 f80f 	bl	8000520 <__aeabi_d2ulz>
 8000502:	0002      	movs	r2, r0
 8000504:	000b      	movs	r3, r1
 8000506:	0010      	movs	r0, r2
 8000508:	0019      	movs	r1, r3
 800050a:	bd70      	pop	{r4, r5, r6, pc}
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	061b      	lsls	r3, r3, #24
 8000510:	18e1      	adds	r1, r4, r3
 8000512:	0028      	movs	r0, r5
 8000514:	f000 f804 	bl	8000520 <__aeabi_d2ulz>
 8000518:	2300      	movs	r3, #0
 800051a:	4242      	negs	r2, r0
 800051c:	418b      	sbcs	r3, r1
 800051e:	e7f2      	b.n	8000506 <__aeabi_d2lz+0x22>

08000520 <__aeabi_d2ulz>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	2200      	movs	r2, #0
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <__aeabi_d2ulz+0x34>)
 8000526:	000d      	movs	r5, r1
 8000528:	0004      	movs	r4, r0
 800052a:	f000 ff6b 	bl	8001404 <__aeabi_dmul>
 800052e:	f7ff ffbb 	bl	80004a8 <__aeabi_d2uiz>
 8000532:	0006      	movs	r6, r0
 8000534:	f001 fde8 	bl	8002108 <__aeabi_ui2d>
 8000538:	2200      	movs	r2, #0
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <__aeabi_d2ulz+0x38>)
 800053c:	f000 ff62 	bl	8001404 <__aeabi_dmul>
 8000540:	0002      	movs	r2, r0
 8000542:	000b      	movs	r3, r1
 8000544:	0020      	movs	r0, r4
 8000546:	0029      	movs	r1, r5
 8000548:	f001 f9c8 	bl	80018dc <__aeabi_dsub>
 800054c:	f7ff ffac 	bl	80004a8 <__aeabi_d2uiz>
 8000550:	0031      	movs	r1, r6
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	3df00000 	.word	0x3df00000
 8000558:	41f00000 	.word	0x41f00000

0800055c <__aeabi_l2d>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	0006      	movs	r6, r0
 8000560:	0008      	movs	r0, r1
 8000562:	f001 fda1 	bl	80020a8 <__aeabi_i2d>
 8000566:	2200      	movs	r2, #0
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <__aeabi_l2d+0x28>)
 800056a:	f000 ff4b 	bl	8001404 <__aeabi_dmul>
 800056e:	000d      	movs	r5, r1
 8000570:	0004      	movs	r4, r0
 8000572:	0030      	movs	r0, r6
 8000574:	f001 fdc8 	bl	8002108 <__aeabi_ui2d>
 8000578:	002b      	movs	r3, r5
 800057a:	0022      	movs	r2, r4
 800057c:	f000 f804 	bl	8000588 <__aeabi_dadd>
 8000580:	bd70      	pop	{r4, r5, r6, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	41f00000 	.word	0x41f00000

08000588 <__aeabi_dadd>:
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058a:	464f      	mov	r7, r9
 800058c:	4646      	mov	r6, r8
 800058e:	46d6      	mov	lr, sl
 8000590:	000d      	movs	r5, r1
 8000592:	0004      	movs	r4, r0
 8000594:	b5c0      	push	{r6, r7, lr}
 8000596:	001f      	movs	r7, r3
 8000598:	0011      	movs	r1, r2
 800059a:	0328      	lsls	r0, r5, #12
 800059c:	0f62      	lsrs	r2, r4, #29
 800059e:	0a40      	lsrs	r0, r0, #9
 80005a0:	4310      	orrs	r0, r2
 80005a2:	007a      	lsls	r2, r7, #1
 80005a4:	0d52      	lsrs	r2, r2, #21
 80005a6:	00e3      	lsls	r3, r4, #3
 80005a8:	033c      	lsls	r4, r7, #12
 80005aa:	4691      	mov	r9, r2
 80005ac:	0a64      	lsrs	r4, r4, #9
 80005ae:	0ffa      	lsrs	r2, r7, #31
 80005b0:	0f4f      	lsrs	r7, r1, #29
 80005b2:	006e      	lsls	r6, r5, #1
 80005b4:	4327      	orrs	r7, r4
 80005b6:	4692      	mov	sl, r2
 80005b8:	46b8      	mov	r8, r7
 80005ba:	0d76      	lsrs	r6, r6, #21
 80005bc:	0fed      	lsrs	r5, r5, #31
 80005be:	00c9      	lsls	r1, r1, #3
 80005c0:	4295      	cmp	r5, r2
 80005c2:	d100      	bne.n	80005c6 <__aeabi_dadd+0x3e>
 80005c4:	e099      	b.n	80006fa <__aeabi_dadd+0x172>
 80005c6:	464c      	mov	r4, r9
 80005c8:	1b34      	subs	r4, r6, r4
 80005ca:	46a4      	mov	ip, r4
 80005cc:	2c00      	cmp	r4, #0
 80005ce:	dc00      	bgt.n	80005d2 <__aeabi_dadd+0x4a>
 80005d0:	e07c      	b.n	80006cc <__aeabi_dadd+0x144>
 80005d2:	464a      	mov	r2, r9
 80005d4:	2a00      	cmp	r2, #0
 80005d6:	d100      	bne.n	80005da <__aeabi_dadd+0x52>
 80005d8:	e0b8      	b.n	800074c <__aeabi_dadd+0x1c4>
 80005da:	4ac5      	ldr	r2, [pc, #788]	; (80008f0 <__aeabi_dadd+0x368>)
 80005dc:	4296      	cmp	r6, r2
 80005de:	d100      	bne.n	80005e2 <__aeabi_dadd+0x5a>
 80005e0:	e11c      	b.n	800081c <__aeabi_dadd+0x294>
 80005e2:	2280      	movs	r2, #128	; 0x80
 80005e4:	003c      	movs	r4, r7
 80005e6:	0412      	lsls	r2, r2, #16
 80005e8:	4314      	orrs	r4, r2
 80005ea:	46a0      	mov	r8, r4
 80005ec:	4662      	mov	r2, ip
 80005ee:	2a38      	cmp	r2, #56	; 0x38
 80005f0:	dd00      	ble.n	80005f4 <__aeabi_dadd+0x6c>
 80005f2:	e161      	b.n	80008b8 <__aeabi_dadd+0x330>
 80005f4:	2a1f      	cmp	r2, #31
 80005f6:	dd00      	ble.n	80005fa <__aeabi_dadd+0x72>
 80005f8:	e1cc      	b.n	8000994 <__aeabi_dadd+0x40c>
 80005fa:	4664      	mov	r4, ip
 80005fc:	2220      	movs	r2, #32
 80005fe:	1b12      	subs	r2, r2, r4
 8000600:	4644      	mov	r4, r8
 8000602:	4094      	lsls	r4, r2
 8000604:	000f      	movs	r7, r1
 8000606:	46a1      	mov	r9, r4
 8000608:	4664      	mov	r4, ip
 800060a:	4091      	lsls	r1, r2
 800060c:	40e7      	lsrs	r7, r4
 800060e:	464c      	mov	r4, r9
 8000610:	1e4a      	subs	r2, r1, #1
 8000612:	4191      	sbcs	r1, r2
 8000614:	433c      	orrs	r4, r7
 8000616:	4642      	mov	r2, r8
 8000618:	4321      	orrs	r1, r4
 800061a:	4664      	mov	r4, ip
 800061c:	40e2      	lsrs	r2, r4
 800061e:	1a80      	subs	r0, r0, r2
 8000620:	1a5c      	subs	r4, r3, r1
 8000622:	42a3      	cmp	r3, r4
 8000624:	419b      	sbcs	r3, r3
 8000626:	425f      	negs	r7, r3
 8000628:	1bc7      	subs	r7, r0, r7
 800062a:	023b      	lsls	r3, r7, #8
 800062c:	d400      	bmi.n	8000630 <__aeabi_dadd+0xa8>
 800062e:	e0d0      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000630:	027f      	lsls	r7, r7, #9
 8000632:	0a7f      	lsrs	r7, r7, #9
 8000634:	2f00      	cmp	r7, #0
 8000636:	d100      	bne.n	800063a <__aeabi_dadd+0xb2>
 8000638:	e0ff      	b.n	800083a <__aeabi_dadd+0x2b2>
 800063a:	0038      	movs	r0, r7
 800063c:	f001 fe12 	bl	8002264 <__clzsi2>
 8000640:	0001      	movs	r1, r0
 8000642:	3908      	subs	r1, #8
 8000644:	2320      	movs	r3, #32
 8000646:	0022      	movs	r2, r4
 8000648:	1a5b      	subs	r3, r3, r1
 800064a:	408f      	lsls	r7, r1
 800064c:	40da      	lsrs	r2, r3
 800064e:	408c      	lsls	r4, r1
 8000650:	4317      	orrs	r7, r2
 8000652:	42b1      	cmp	r1, r6
 8000654:	da00      	bge.n	8000658 <__aeabi_dadd+0xd0>
 8000656:	e0ff      	b.n	8000858 <__aeabi_dadd+0x2d0>
 8000658:	1b89      	subs	r1, r1, r6
 800065a:	1c4b      	adds	r3, r1, #1
 800065c:	2b1f      	cmp	r3, #31
 800065e:	dd00      	ble.n	8000662 <__aeabi_dadd+0xda>
 8000660:	e0a8      	b.n	80007b4 <__aeabi_dadd+0x22c>
 8000662:	2220      	movs	r2, #32
 8000664:	0039      	movs	r1, r7
 8000666:	1ad2      	subs	r2, r2, r3
 8000668:	0020      	movs	r0, r4
 800066a:	4094      	lsls	r4, r2
 800066c:	4091      	lsls	r1, r2
 800066e:	40d8      	lsrs	r0, r3
 8000670:	1e62      	subs	r2, r4, #1
 8000672:	4194      	sbcs	r4, r2
 8000674:	40df      	lsrs	r7, r3
 8000676:	2600      	movs	r6, #0
 8000678:	4301      	orrs	r1, r0
 800067a:	430c      	orrs	r4, r1
 800067c:	0763      	lsls	r3, r4, #29
 800067e:	d009      	beq.n	8000694 <__aeabi_dadd+0x10c>
 8000680:	230f      	movs	r3, #15
 8000682:	4023      	ands	r3, r4
 8000684:	2b04      	cmp	r3, #4
 8000686:	d005      	beq.n	8000694 <__aeabi_dadd+0x10c>
 8000688:	1d23      	adds	r3, r4, #4
 800068a:	42a3      	cmp	r3, r4
 800068c:	41a4      	sbcs	r4, r4
 800068e:	4264      	negs	r4, r4
 8000690:	193f      	adds	r7, r7, r4
 8000692:	001c      	movs	r4, r3
 8000694:	023b      	lsls	r3, r7, #8
 8000696:	d400      	bmi.n	800069a <__aeabi_dadd+0x112>
 8000698:	e09e      	b.n	80007d8 <__aeabi_dadd+0x250>
 800069a:	4b95      	ldr	r3, [pc, #596]	; (80008f0 <__aeabi_dadd+0x368>)
 800069c:	3601      	adds	r6, #1
 800069e:	429e      	cmp	r6, r3
 80006a0:	d100      	bne.n	80006a4 <__aeabi_dadd+0x11c>
 80006a2:	e0b7      	b.n	8000814 <__aeabi_dadd+0x28c>
 80006a4:	4a93      	ldr	r2, [pc, #588]	; (80008f4 <__aeabi_dadd+0x36c>)
 80006a6:	08e4      	lsrs	r4, r4, #3
 80006a8:	4017      	ands	r7, r2
 80006aa:	077b      	lsls	r3, r7, #29
 80006ac:	0571      	lsls	r1, r6, #21
 80006ae:	027f      	lsls	r7, r7, #9
 80006b0:	4323      	orrs	r3, r4
 80006b2:	0b3f      	lsrs	r7, r7, #12
 80006b4:	0d4a      	lsrs	r2, r1, #21
 80006b6:	0512      	lsls	r2, r2, #20
 80006b8:	433a      	orrs	r2, r7
 80006ba:	07ed      	lsls	r5, r5, #31
 80006bc:	432a      	orrs	r2, r5
 80006be:	0018      	movs	r0, r3
 80006c0:	0011      	movs	r1, r2
 80006c2:	bce0      	pop	{r5, r6, r7}
 80006c4:	46ba      	mov	sl, r7
 80006c6:	46b1      	mov	r9, r6
 80006c8:	46a8      	mov	r8, r5
 80006ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006cc:	2c00      	cmp	r4, #0
 80006ce:	d04b      	beq.n	8000768 <__aeabi_dadd+0x1e0>
 80006d0:	464c      	mov	r4, r9
 80006d2:	1ba4      	subs	r4, r4, r6
 80006d4:	46a4      	mov	ip, r4
 80006d6:	2e00      	cmp	r6, #0
 80006d8:	d000      	beq.n	80006dc <__aeabi_dadd+0x154>
 80006da:	e123      	b.n	8000924 <__aeabi_dadd+0x39c>
 80006dc:	0004      	movs	r4, r0
 80006de:	431c      	orrs	r4, r3
 80006e0:	d100      	bne.n	80006e4 <__aeabi_dadd+0x15c>
 80006e2:	e1af      	b.n	8000a44 <__aeabi_dadd+0x4bc>
 80006e4:	4662      	mov	r2, ip
 80006e6:	1e54      	subs	r4, r2, #1
 80006e8:	2a01      	cmp	r2, #1
 80006ea:	d100      	bne.n	80006ee <__aeabi_dadd+0x166>
 80006ec:	e215      	b.n	8000b1a <__aeabi_dadd+0x592>
 80006ee:	4d80      	ldr	r5, [pc, #512]	; (80008f0 <__aeabi_dadd+0x368>)
 80006f0:	45ac      	cmp	ip, r5
 80006f2:	d100      	bne.n	80006f6 <__aeabi_dadd+0x16e>
 80006f4:	e1c8      	b.n	8000a88 <__aeabi_dadd+0x500>
 80006f6:	46a4      	mov	ip, r4
 80006f8:	e11b      	b.n	8000932 <__aeabi_dadd+0x3aa>
 80006fa:	464a      	mov	r2, r9
 80006fc:	1ab2      	subs	r2, r6, r2
 80006fe:	4694      	mov	ip, r2
 8000700:	2a00      	cmp	r2, #0
 8000702:	dc00      	bgt.n	8000706 <__aeabi_dadd+0x17e>
 8000704:	e0ac      	b.n	8000860 <__aeabi_dadd+0x2d8>
 8000706:	464a      	mov	r2, r9
 8000708:	2a00      	cmp	r2, #0
 800070a:	d043      	beq.n	8000794 <__aeabi_dadd+0x20c>
 800070c:	4a78      	ldr	r2, [pc, #480]	; (80008f0 <__aeabi_dadd+0x368>)
 800070e:	4296      	cmp	r6, r2
 8000710:	d100      	bne.n	8000714 <__aeabi_dadd+0x18c>
 8000712:	e1af      	b.n	8000a74 <__aeabi_dadd+0x4ec>
 8000714:	2280      	movs	r2, #128	; 0x80
 8000716:	003c      	movs	r4, r7
 8000718:	0412      	lsls	r2, r2, #16
 800071a:	4314      	orrs	r4, r2
 800071c:	46a0      	mov	r8, r4
 800071e:	4662      	mov	r2, ip
 8000720:	2a38      	cmp	r2, #56	; 0x38
 8000722:	dc67      	bgt.n	80007f4 <__aeabi_dadd+0x26c>
 8000724:	2a1f      	cmp	r2, #31
 8000726:	dc00      	bgt.n	800072a <__aeabi_dadd+0x1a2>
 8000728:	e15f      	b.n	80009ea <__aeabi_dadd+0x462>
 800072a:	4647      	mov	r7, r8
 800072c:	3a20      	subs	r2, #32
 800072e:	40d7      	lsrs	r7, r2
 8000730:	4662      	mov	r2, ip
 8000732:	2a20      	cmp	r2, #32
 8000734:	d005      	beq.n	8000742 <__aeabi_dadd+0x1ba>
 8000736:	4664      	mov	r4, ip
 8000738:	2240      	movs	r2, #64	; 0x40
 800073a:	1b12      	subs	r2, r2, r4
 800073c:	4644      	mov	r4, r8
 800073e:	4094      	lsls	r4, r2
 8000740:	4321      	orrs	r1, r4
 8000742:	1e4a      	subs	r2, r1, #1
 8000744:	4191      	sbcs	r1, r2
 8000746:	000c      	movs	r4, r1
 8000748:	433c      	orrs	r4, r7
 800074a:	e057      	b.n	80007fc <__aeabi_dadd+0x274>
 800074c:	003a      	movs	r2, r7
 800074e:	430a      	orrs	r2, r1
 8000750:	d100      	bne.n	8000754 <__aeabi_dadd+0x1cc>
 8000752:	e105      	b.n	8000960 <__aeabi_dadd+0x3d8>
 8000754:	0022      	movs	r2, r4
 8000756:	3a01      	subs	r2, #1
 8000758:	2c01      	cmp	r4, #1
 800075a:	d100      	bne.n	800075e <__aeabi_dadd+0x1d6>
 800075c:	e182      	b.n	8000a64 <__aeabi_dadd+0x4dc>
 800075e:	4c64      	ldr	r4, [pc, #400]	; (80008f0 <__aeabi_dadd+0x368>)
 8000760:	45a4      	cmp	ip, r4
 8000762:	d05b      	beq.n	800081c <__aeabi_dadd+0x294>
 8000764:	4694      	mov	ip, r2
 8000766:	e741      	b.n	80005ec <__aeabi_dadd+0x64>
 8000768:	4c63      	ldr	r4, [pc, #396]	; (80008f8 <__aeabi_dadd+0x370>)
 800076a:	1c77      	adds	r7, r6, #1
 800076c:	4227      	tst	r7, r4
 800076e:	d000      	beq.n	8000772 <__aeabi_dadd+0x1ea>
 8000770:	e0c4      	b.n	80008fc <__aeabi_dadd+0x374>
 8000772:	0004      	movs	r4, r0
 8000774:	431c      	orrs	r4, r3
 8000776:	2e00      	cmp	r6, #0
 8000778:	d000      	beq.n	800077c <__aeabi_dadd+0x1f4>
 800077a:	e169      	b.n	8000a50 <__aeabi_dadd+0x4c8>
 800077c:	2c00      	cmp	r4, #0
 800077e:	d100      	bne.n	8000782 <__aeabi_dadd+0x1fa>
 8000780:	e1bf      	b.n	8000b02 <__aeabi_dadd+0x57a>
 8000782:	4644      	mov	r4, r8
 8000784:	430c      	orrs	r4, r1
 8000786:	d000      	beq.n	800078a <__aeabi_dadd+0x202>
 8000788:	e1d0      	b.n	8000b2c <__aeabi_dadd+0x5a4>
 800078a:	0742      	lsls	r2, r0, #29
 800078c:	08db      	lsrs	r3, r3, #3
 800078e:	4313      	orrs	r3, r2
 8000790:	08c0      	lsrs	r0, r0, #3
 8000792:	e029      	b.n	80007e8 <__aeabi_dadd+0x260>
 8000794:	003a      	movs	r2, r7
 8000796:	430a      	orrs	r2, r1
 8000798:	d100      	bne.n	800079c <__aeabi_dadd+0x214>
 800079a:	e170      	b.n	8000a7e <__aeabi_dadd+0x4f6>
 800079c:	4662      	mov	r2, ip
 800079e:	4664      	mov	r4, ip
 80007a0:	3a01      	subs	r2, #1
 80007a2:	2c01      	cmp	r4, #1
 80007a4:	d100      	bne.n	80007a8 <__aeabi_dadd+0x220>
 80007a6:	e0e0      	b.n	800096a <__aeabi_dadd+0x3e2>
 80007a8:	4c51      	ldr	r4, [pc, #324]	; (80008f0 <__aeabi_dadd+0x368>)
 80007aa:	45a4      	cmp	ip, r4
 80007ac:	d100      	bne.n	80007b0 <__aeabi_dadd+0x228>
 80007ae:	e161      	b.n	8000a74 <__aeabi_dadd+0x4ec>
 80007b0:	4694      	mov	ip, r2
 80007b2:	e7b4      	b.n	800071e <__aeabi_dadd+0x196>
 80007b4:	003a      	movs	r2, r7
 80007b6:	391f      	subs	r1, #31
 80007b8:	40ca      	lsrs	r2, r1
 80007ba:	0011      	movs	r1, r2
 80007bc:	2b20      	cmp	r3, #32
 80007be:	d003      	beq.n	80007c8 <__aeabi_dadd+0x240>
 80007c0:	2240      	movs	r2, #64	; 0x40
 80007c2:	1ad3      	subs	r3, r2, r3
 80007c4:	409f      	lsls	r7, r3
 80007c6:	433c      	orrs	r4, r7
 80007c8:	1e63      	subs	r3, r4, #1
 80007ca:	419c      	sbcs	r4, r3
 80007cc:	2700      	movs	r7, #0
 80007ce:	2600      	movs	r6, #0
 80007d0:	430c      	orrs	r4, r1
 80007d2:	0763      	lsls	r3, r4, #29
 80007d4:	d000      	beq.n	80007d8 <__aeabi_dadd+0x250>
 80007d6:	e753      	b.n	8000680 <__aeabi_dadd+0xf8>
 80007d8:	46b4      	mov	ip, r6
 80007da:	08e4      	lsrs	r4, r4, #3
 80007dc:	077b      	lsls	r3, r7, #29
 80007de:	4323      	orrs	r3, r4
 80007e0:	08f8      	lsrs	r0, r7, #3
 80007e2:	4a43      	ldr	r2, [pc, #268]	; (80008f0 <__aeabi_dadd+0x368>)
 80007e4:	4594      	cmp	ip, r2
 80007e6:	d01d      	beq.n	8000824 <__aeabi_dadd+0x29c>
 80007e8:	4662      	mov	r2, ip
 80007ea:	0307      	lsls	r7, r0, #12
 80007ec:	0552      	lsls	r2, r2, #21
 80007ee:	0b3f      	lsrs	r7, r7, #12
 80007f0:	0d52      	lsrs	r2, r2, #21
 80007f2:	e760      	b.n	80006b6 <__aeabi_dadd+0x12e>
 80007f4:	4644      	mov	r4, r8
 80007f6:	430c      	orrs	r4, r1
 80007f8:	1e62      	subs	r2, r4, #1
 80007fa:	4194      	sbcs	r4, r2
 80007fc:	18e4      	adds	r4, r4, r3
 80007fe:	429c      	cmp	r4, r3
 8000800:	419b      	sbcs	r3, r3
 8000802:	425f      	negs	r7, r3
 8000804:	183f      	adds	r7, r7, r0
 8000806:	023b      	lsls	r3, r7, #8
 8000808:	d5e3      	bpl.n	80007d2 <__aeabi_dadd+0x24a>
 800080a:	4b39      	ldr	r3, [pc, #228]	; (80008f0 <__aeabi_dadd+0x368>)
 800080c:	3601      	adds	r6, #1
 800080e:	429e      	cmp	r6, r3
 8000810:	d000      	beq.n	8000814 <__aeabi_dadd+0x28c>
 8000812:	e0b5      	b.n	8000980 <__aeabi_dadd+0x3f8>
 8000814:	0032      	movs	r2, r6
 8000816:	2700      	movs	r7, #0
 8000818:	2300      	movs	r3, #0
 800081a:	e74c      	b.n	80006b6 <__aeabi_dadd+0x12e>
 800081c:	0742      	lsls	r2, r0, #29
 800081e:	08db      	lsrs	r3, r3, #3
 8000820:	4313      	orrs	r3, r2
 8000822:	08c0      	lsrs	r0, r0, #3
 8000824:	001a      	movs	r2, r3
 8000826:	4302      	orrs	r2, r0
 8000828:	d100      	bne.n	800082c <__aeabi_dadd+0x2a4>
 800082a:	e1e1      	b.n	8000bf0 <__aeabi_dadd+0x668>
 800082c:	2780      	movs	r7, #128	; 0x80
 800082e:	033f      	lsls	r7, r7, #12
 8000830:	4307      	orrs	r7, r0
 8000832:	033f      	lsls	r7, r7, #12
 8000834:	4a2e      	ldr	r2, [pc, #184]	; (80008f0 <__aeabi_dadd+0x368>)
 8000836:	0b3f      	lsrs	r7, r7, #12
 8000838:	e73d      	b.n	80006b6 <__aeabi_dadd+0x12e>
 800083a:	0020      	movs	r0, r4
 800083c:	f001 fd12 	bl	8002264 <__clzsi2>
 8000840:	0001      	movs	r1, r0
 8000842:	3118      	adds	r1, #24
 8000844:	291f      	cmp	r1, #31
 8000846:	dc00      	bgt.n	800084a <__aeabi_dadd+0x2c2>
 8000848:	e6fc      	b.n	8000644 <__aeabi_dadd+0xbc>
 800084a:	3808      	subs	r0, #8
 800084c:	4084      	lsls	r4, r0
 800084e:	0027      	movs	r7, r4
 8000850:	2400      	movs	r4, #0
 8000852:	42b1      	cmp	r1, r6
 8000854:	db00      	blt.n	8000858 <__aeabi_dadd+0x2d0>
 8000856:	e6ff      	b.n	8000658 <__aeabi_dadd+0xd0>
 8000858:	4a26      	ldr	r2, [pc, #152]	; (80008f4 <__aeabi_dadd+0x36c>)
 800085a:	1a76      	subs	r6, r6, r1
 800085c:	4017      	ands	r7, r2
 800085e:	e70d      	b.n	800067c <__aeabi_dadd+0xf4>
 8000860:	2a00      	cmp	r2, #0
 8000862:	d02f      	beq.n	80008c4 <__aeabi_dadd+0x33c>
 8000864:	464a      	mov	r2, r9
 8000866:	1b92      	subs	r2, r2, r6
 8000868:	4694      	mov	ip, r2
 800086a:	2e00      	cmp	r6, #0
 800086c:	d100      	bne.n	8000870 <__aeabi_dadd+0x2e8>
 800086e:	e0ad      	b.n	80009cc <__aeabi_dadd+0x444>
 8000870:	4a1f      	ldr	r2, [pc, #124]	; (80008f0 <__aeabi_dadd+0x368>)
 8000872:	4591      	cmp	r9, r2
 8000874:	d100      	bne.n	8000878 <__aeabi_dadd+0x2f0>
 8000876:	e10f      	b.n	8000a98 <__aeabi_dadd+0x510>
 8000878:	2280      	movs	r2, #128	; 0x80
 800087a:	0412      	lsls	r2, r2, #16
 800087c:	4310      	orrs	r0, r2
 800087e:	4662      	mov	r2, ip
 8000880:	2a38      	cmp	r2, #56	; 0x38
 8000882:	dd00      	ble.n	8000886 <__aeabi_dadd+0x2fe>
 8000884:	e10f      	b.n	8000aa6 <__aeabi_dadd+0x51e>
 8000886:	2a1f      	cmp	r2, #31
 8000888:	dd00      	ble.n	800088c <__aeabi_dadd+0x304>
 800088a:	e180      	b.n	8000b8e <__aeabi_dadd+0x606>
 800088c:	4664      	mov	r4, ip
 800088e:	2220      	movs	r2, #32
 8000890:	001e      	movs	r6, r3
 8000892:	1b12      	subs	r2, r2, r4
 8000894:	4667      	mov	r7, ip
 8000896:	0004      	movs	r4, r0
 8000898:	4093      	lsls	r3, r2
 800089a:	4094      	lsls	r4, r2
 800089c:	40fe      	lsrs	r6, r7
 800089e:	1e5a      	subs	r2, r3, #1
 80008a0:	4193      	sbcs	r3, r2
 80008a2:	40f8      	lsrs	r0, r7
 80008a4:	4334      	orrs	r4, r6
 80008a6:	431c      	orrs	r4, r3
 80008a8:	4480      	add	r8, r0
 80008aa:	1864      	adds	r4, r4, r1
 80008ac:	428c      	cmp	r4, r1
 80008ae:	41bf      	sbcs	r7, r7
 80008b0:	427f      	negs	r7, r7
 80008b2:	464e      	mov	r6, r9
 80008b4:	4447      	add	r7, r8
 80008b6:	e7a6      	b.n	8000806 <__aeabi_dadd+0x27e>
 80008b8:	4642      	mov	r2, r8
 80008ba:	430a      	orrs	r2, r1
 80008bc:	0011      	movs	r1, r2
 80008be:	1e4a      	subs	r2, r1, #1
 80008c0:	4191      	sbcs	r1, r2
 80008c2:	e6ad      	b.n	8000620 <__aeabi_dadd+0x98>
 80008c4:	4c0c      	ldr	r4, [pc, #48]	; (80008f8 <__aeabi_dadd+0x370>)
 80008c6:	1c72      	adds	r2, r6, #1
 80008c8:	4222      	tst	r2, r4
 80008ca:	d000      	beq.n	80008ce <__aeabi_dadd+0x346>
 80008cc:	e0a1      	b.n	8000a12 <__aeabi_dadd+0x48a>
 80008ce:	0002      	movs	r2, r0
 80008d0:	431a      	orrs	r2, r3
 80008d2:	2e00      	cmp	r6, #0
 80008d4:	d000      	beq.n	80008d8 <__aeabi_dadd+0x350>
 80008d6:	e0fa      	b.n	8000ace <__aeabi_dadd+0x546>
 80008d8:	2a00      	cmp	r2, #0
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x356>
 80008dc:	e145      	b.n	8000b6a <__aeabi_dadd+0x5e2>
 80008de:	003a      	movs	r2, r7
 80008e0:	430a      	orrs	r2, r1
 80008e2:	d000      	beq.n	80008e6 <__aeabi_dadd+0x35e>
 80008e4:	e146      	b.n	8000b74 <__aeabi_dadd+0x5ec>
 80008e6:	0742      	lsls	r2, r0, #29
 80008e8:	08db      	lsrs	r3, r3, #3
 80008ea:	4313      	orrs	r3, r2
 80008ec:	08c0      	lsrs	r0, r0, #3
 80008ee:	e77b      	b.n	80007e8 <__aeabi_dadd+0x260>
 80008f0:	000007ff 	.word	0x000007ff
 80008f4:	ff7fffff 	.word	0xff7fffff
 80008f8:	000007fe 	.word	0x000007fe
 80008fc:	4647      	mov	r7, r8
 80008fe:	1a5c      	subs	r4, r3, r1
 8000900:	1bc2      	subs	r2, r0, r7
 8000902:	42a3      	cmp	r3, r4
 8000904:	41bf      	sbcs	r7, r7
 8000906:	427f      	negs	r7, r7
 8000908:	46b9      	mov	r9, r7
 800090a:	0017      	movs	r7, r2
 800090c:	464a      	mov	r2, r9
 800090e:	1abf      	subs	r7, r7, r2
 8000910:	023a      	lsls	r2, r7, #8
 8000912:	d500      	bpl.n	8000916 <__aeabi_dadd+0x38e>
 8000914:	e08d      	b.n	8000a32 <__aeabi_dadd+0x4aa>
 8000916:	0023      	movs	r3, r4
 8000918:	433b      	orrs	r3, r7
 800091a:	d000      	beq.n	800091e <__aeabi_dadd+0x396>
 800091c:	e68a      	b.n	8000634 <__aeabi_dadd+0xac>
 800091e:	2000      	movs	r0, #0
 8000920:	2500      	movs	r5, #0
 8000922:	e761      	b.n	80007e8 <__aeabi_dadd+0x260>
 8000924:	4cb4      	ldr	r4, [pc, #720]	; (8000bf8 <__aeabi_dadd+0x670>)
 8000926:	45a1      	cmp	r9, r4
 8000928:	d100      	bne.n	800092c <__aeabi_dadd+0x3a4>
 800092a:	e0ad      	b.n	8000a88 <__aeabi_dadd+0x500>
 800092c:	2480      	movs	r4, #128	; 0x80
 800092e:	0424      	lsls	r4, r4, #16
 8000930:	4320      	orrs	r0, r4
 8000932:	4664      	mov	r4, ip
 8000934:	2c38      	cmp	r4, #56	; 0x38
 8000936:	dc3d      	bgt.n	80009b4 <__aeabi_dadd+0x42c>
 8000938:	4662      	mov	r2, ip
 800093a:	2c1f      	cmp	r4, #31
 800093c:	dd00      	ble.n	8000940 <__aeabi_dadd+0x3b8>
 800093e:	e0b7      	b.n	8000ab0 <__aeabi_dadd+0x528>
 8000940:	2520      	movs	r5, #32
 8000942:	001e      	movs	r6, r3
 8000944:	1b2d      	subs	r5, r5, r4
 8000946:	0004      	movs	r4, r0
 8000948:	40ab      	lsls	r3, r5
 800094a:	40ac      	lsls	r4, r5
 800094c:	40d6      	lsrs	r6, r2
 800094e:	40d0      	lsrs	r0, r2
 8000950:	4642      	mov	r2, r8
 8000952:	1e5d      	subs	r5, r3, #1
 8000954:	41ab      	sbcs	r3, r5
 8000956:	4334      	orrs	r4, r6
 8000958:	1a12      	subs	r2, r2, r0
 800095a:	4690      	mov	r8, r2
 800095c:	4323      	orrs	r3, r4
 800095e:	e02c      	b.n	80009ba <__aeabi_dadd+0x432>
 8000960:	0742      	lsls	r2, r0, #29
 8000962:	08db      	lsrs	r3, r3, #3
 8000964:	4313      	orrs	r3, r2
 8000966:	08c0      	lsrs	r0, r0, #3
 8000968:	e73b      	b.n	80007e2 <__aeabi_dadd+0x25a>
 800096a:	185c      	adds	r4, r3, r1
 800096c:	429c      	cmp	r4, r3
 800096e:	419b      	sbcs	r3, r3
 8000970:	4440      	add	r0, r8
 8000972:	425b      	negs	r3, r3
 8000974:	18c7      	adds	r7, r0, r3
 8000976:	2601      	movs	r6, #1
 8000978:	023b      	lsls	r3, r7, #8
 800097a:	d400      	bmi.n	800097e <__aeabi_dadd+0x3f6>
 800097c:	e729      	b.n	80007d2 <__aeabi_dadd+0x24a>
 800097e:	2602      	movs	r6, #2
 8000980:	4a9e      	ldr	r2, [pc, #632]	; (8000bfc <__aeabi_dadd+0x674>)
 8000982:	0863      	lsrs	r3, r4, #1
 8000984:	4017      	ands	r7, r2
 8000986:	2201      	movs	r2, #1
 8000988:	4014      	ands	r4, r2
 800098a:	431c      	orrs	r4, r3
 800098c:	07fb      	lsls	r3, r7, #31
 800098e:	431c      	orrs	r4, r3
 8000990:	087f      	lsrs	r7, r7, #1
 8000992:	e673      	b.n	800067c <__aeabi_dadd+0xf4>
 8000994:	4644      	mov	r4, r8
 8000996:	3a20      	subs	r2, #32
 8000998:	40d4      	lsrs	r4, r2
 800099a:	4662      	mov	r2, ip
 800099c:	2a20      	cmp	r2, #32
 800099e:	d005      	beq.n	80009ac <__aeabi_dadd+0x424>
 80009a0:	4667      	mov	r7, ip
 80009a2:	2240      	movs	r2, #64	; 0x40
 80009a4:	1bd2      	subs	r2, r2, r7
 80009a6:	4647      	mov	r7, r8
 80009a8:	4097      	lsls	r7, r2
 80009aa:	4339      	orrs	r1, r7
 80009ac:	1e4a      	subs	r2, r1, #1
 80009ae:	4191      	sbcs	r1, r2
 80009b0:	4321      	orrs	r1, r4
 80009b2:	e635      	b.n	8000620 <__aeabi_dadd+0x98>
 80009b4:	4303      	orrs	r3, r0
 80009b6:	1e58      	subs	r0, r3, #1
 80009b8:	4183      	sbcs	r3, r0
 80009ba:	1acc      	subs	r4, r1, r3
 80009bc:	42a1      	cmp	r1, r4
 80009be:	41bf      	sbcs	r7, r7
 80009c0:	4643      	mov	r3, r8
 80009c2:	427f      	negs	r7, r7
 80009c4:	4655      	mov	r5, sl
 80009c6:	464e      	mov	r6, r9
 80009c8:	1bdf      	subs	r7, r3, r7
 80009ca:	e62e      	b.n	800062a <__aeabi_dadd+0xa2>
 80009cc:	0002      	movs	r2, r0
 80009ce:	431a      	orrs	r2, r3
 80009d0:	d100      	bne.n	80009d4 <__aeabi_dadd+0x44c>
 80009d2:	e0bd      	b.n	8000b50 <__aeabi_dadd+0x5c8>
 80009d4:	4662      	mov	r2, ip
 80009d6:	4664      	mov	r4, ip
 80009d8:	3a01      	subs	r2, #1
 80009da:	2c01      	cmp	r4, #1
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x458>
 80009de:	e0e5      	b.n	8000bac <__aeabi_dadd+0x624>
 80009e0:	4c85      	ldr	r4, [pc, #532]	; (8000bf8 <__aeabi_dadd+0x670>)
 80009e2:	45a4      	cmp	ip, r4
 80009e4:	d058      	beq.n	8000a98 <__aeabi_dadd+0x510>
 80009e6:	4694      	mov	ip, r2
 80009e8:	e749      	b.n	800087e <__aeabi_dadd+0x2f6>
 80009ea:	4664      	mov	r4, ip
 80009ec:	2220      	movs	r2, #32
 80009ee:	1b12      	subs	r2, r2, r4
 80009f0:	4644      	mov	r4, r8
 80009f2:	4094      	lsls	r4, r2
 80009f4:	000f      	movs	r7, r1
 80009f6:	46a1      	mov	r9, r4
 80009f8:	4664      	mov	r4, ip
 80009fa:	4091      	lsls	r1, r2
 80009fc:	40e7      	lsrs	r7, r4
 80009fe:	464c      	mov	r4, r9
 8000a00:	1e4a      	subs	r2, r1, #1
 8000a02:	4191      	sbcs	r1, r2
 8000a04:	433c      	orrs	r4, r7
 8000a06:	4642      	mov	r2, r8
 8000a08:	430c      	orrs	r4, r1
 8000a0a:	4661      	mov	r1, ip
 8000a0c:	40ca      	lsrs	r2, r1
 8000a0e:	1880      	adds	r0, r0, r2
 8000a10:	e6f4      	b.n	80007fc <__aeabi_dadd+0x274>
 8000a12:	4c79      	ldr	r4, [pc, #484]	; (8000bf8 <__aeabi_dadd+0x670>)
 8000a14:	42a2      	cmp	r2, r4
 8000a16:	d100      	bne.n	8000a1a <__aeabi_dadd+0x492>
 8000a18:	e6fd      	b.n	8000816 <__aeabi_dadd+0x28e>
 8000a1a:	1859      	adds	r1, r3, r1
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	419b      	sbcs	r3, r3
 8000a20:	4440      	add	r0, r8
 8000a22:	425f      	negs	r7, r3
 8000a24:	19c7      	adds	r7, r0, r7
 8000a26:	07fc      	lsls	r4, r7, #31
 8000a28:	0849      	lsrs	r1, r1, #1
 8000a2a:	0016      	movs	r6, r2
 8000a2c:	430c      	orrs	r4, r1
 8000a2e:	087f      	lsrs	r7, r7, #1
 8000a30:	e6cf      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000a32:	1acc      	subs	r4, r1, r3
 8000a34:	42a1      	cmp	r1, r4
 8000a36:	41bf      	sbcs	r7, r7
 8000a38:	4643      	mov	r3, r8
 8000a3a:	427f      	negs	r7, r7
 8000a3c:	1a18      	subs	r0, r3, r0
 8000a3e:	4655      	mov	r5, sl
 8000a40:	1bc7      	subs	r7, r0, r7
 8000a42:	e5f7      	b.n	8000634 <__aeabi_dadd+0xac>
 8000a44:	08c9      	lsrs	r1, r1, #3
 8000a46:	077b      	lsls	r3, r7, #29
 8000a48:	4655      	mov	r5, sl
 8000a4a:	430b      	orrs	r3, r1
 8000a4c:	08f8      	lsrs	r0, r7, #3
 8000a4e:	e6c8      	b.n	80007e2 <__aeabi_dadd+0x25a>
 8000a50:	2c00      	cmp	r4, #0
 8000a52:	d000      	beq.n	8000a56 <__aeabi_dadd+0x4ce>
 8000a54:	e081      	b.n	8000b5a <__aeabi_dadd+0x5d2>
 8000a56:	4643      	mov	r3, r8
 8000a58:	430b      	orrs	r3, r1
 8000a5a:	d115      	bne.n	8000a88 <__aeabi_dadd+0x500>
 8000a5c:	2080      	movs	r0, #128	; 0x80
 8000a5e:	2500      	movs	r5, #0
 8000a60:	0300      	lsls	r0, r0, #12
 8000a62:	e6e3      	b.n	800082c <__aeabi_dadd+0x2a4>
 8000a64:	1a5c      	subs	r4, r3, r1
 8000a66:	42a3      	cmp	r3, r4
 8000a68:	419b      	sbcs	r3, r3
 8000a6a:	1bc7      	subs	r7, r0, r7
 8000a6c:	425b      	negs	r3, r3
 8000a6e:	2601      	movs	r6, #1
 8000a70:	1aff      	subs	r7, r7, r3
 8000a72:	e5da      	b.n	800062a <__aeabi_dadd+0xa2>
 8000a74:	0742      	lsls	r2, r0, #29
 8000a76:	08db      	lsrs	r3, r3, #3
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	08c0      	lsrs	r0, r0, #3
 8000a7c:	e6d2      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000a7e:	0742      	lsls	r2, r0, #29
 8000a80:	08db      	lsrs	r3, r3, #3
 8000a82:	4313      	orrs	r3, r2
 8000a84:	08c0      	lsrs	r0, r0, #3
 8000a86:	e6ac      	b.n	80007e2 <__aeabi_dadd+0x25a>
 8000a88:	4643      	mov	r3, r8
 8000a8a:	4642      	mov	r2, r8
 8000a8c:	08c9      	lsrs	r1, r1, #3
 8000a8e:	075b      	lsls	r3, r3, #29
 8000a90:	4655      	mov	r5, sl
 8000a92:	430b      	orrs	r3, r1
 8000a94:	08d0      	lsrs	r0, r2, #3
 8000a96:	e6c5      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000a98:	4643      	mov	r3, r8
 8000a9a:	4642      	mov	r2, r8
 8000a9c:	075b      	lsls	r3, r3, #29
 8000a9e:	08c9      	lsrs	r1, r1, #3
 8000aa0:	430b      	orrs	r3, r1
 8000aa2:	08d0      	lsrs	r0, r2, #3
 8000aa4:	e6be      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000aa6:	4303      	orrs	r3, r0
 8000aa8:	001c      	movs	r4, r3
 8000aaa:	1e63      	subs	r3, r4, #1
 8000aac:	419c      	sbcs	r4, r3
 8000aae:	e6fc      	b.n	80008aa <__aeabi_dadd+0x322>
 8000ab0:	0002      	movs	r2, r0
 8000ab2:	3c20      	subs	r4, #32
 8000ab4:	40e2      	lsrs	r2, r4
 8000ab6:	0014      	movs	r4, r2
 8000ab8:	4662      	mov	r2, ip
 8000aba:	2a20      	cmp	r2, #32
 8000abc:	d003      	beq.n	8000ac6 <__aeabi_dadd+0x53e>
 8000abe:	2540      	movs	r5, #64	; 0x40
 8000ac0:	1aad      	subs	r5, r5, r2
 8000ac2:	40a8      	lsls	r0, r5
 8000ac4:	4303      	orrs	r3, r0
 8000ac6:	1e58      	subs	r0, r3, #1
 8000ac8:	4183      	sbcs	r3, r0
 8000aca:	4323      	orrs	r3, r4
 8000acc:	e775      	b.n	80009ba <__aeabi_dadd+0x432>
 8000ace:	2a00      	cmp	r2, #0
 8000ad0:	d0e2      	beq.n	8000a98 <__aeabi_dadd+0x510>
 8000ad2:	003a      	movs	r2, r7
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	d0cd      	beq.n	8000a74 <__aeabi_dadd+0x4ec>
 8000ad8:	0742      	lsls	r2, r0, #29
 8000ada:	08db      	lsrs	r3, r3, #3
 8000adc:	4313      	orrs	r3, r2
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	08c0      	lsrs	r0, r0, #3
 8000ae2:	0312      	lsls	r2, r2, #12
 8000ae4:	4210      	tst	r0, r2
 8000ae6:	d006      	beq.n	8000af6 <__aeabi_dadd+0x56e>
 8000ae8:	08fc      	lsrs	r4, r7, #3
 8000aea:	4214      	tst	r4, r2
 8000aec:	d103      	bne.n	8000af6 <__aeabi_dadd+0x56e>
 8000aee:	0020      	movs	r0, r4
 8000af0:	08cb      	lsrs	r3, r1, #3
 8000af2:	077a      	lsls	r2, r7, #29
 8000af4:	4313      	orrs	r3, r2
 8000af6:	0f5a      	lsrs	r2, r3, #29
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	0752      	lsls	r2, r2, #29
 8000afc:	08db      	lsrs	r3, r3, #3
 8000afe:	4313      	orrs	r3, r2
 8000b00:	e690      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000b02:	4643      	mov	r3, r8
 8000b04:	430b      	orrs	r3, r1
 8000b06:	d100      	bne.n	8000b0a <__aeabi_dadd+0x582>
 8000b08:	e709      	b.n	800091e <__aeabi_dadd+0x396>
 8000b0a:	4643      	mov	r3, r8
 8000b0c:	4642      	mov	r2, r8
 8000b0e:	08c9      	lsrs	r1, r1, #3
 8000b10:	075b      	lsls	r3, r3, #29
 8000b12:	4655      	mov	r5, sl
 8000b14:	430b      	orrs	r3, r1
 8000b16:	08d0      	lsrs	r0, r2, #3
 8000b18:	e666      	b.n	80007e8 <__aeabi_dadd+0x260>
 8000b1a:	1acc      	subs	r4, r1, r3
 8000b1c:	42a1      	cmp	r1, r4
 8000b1e:	4189      	sbcs	r1, r1
 8000b20:	1a3f      	subs	r7, r7, r0
 8000b22:	4249      	negs	r1, r1
 8000b24:	4655      	mov	r5, sl
 8000b26:	2601      	movs	r6, #1
 8000b28:	1a7f      	subs	r7, r7, r1
 8000b2a:	e57e      	b.n	800062a <__aeabi_dadd+0xa2>
 8000b2c:	4642      	mov	r2, r8
 8000b2e:	1a5c      	subs	r4, r3, r1
 8000b30:	1a87      	subs	r7, r0, r2
 8000b32:	42a3      	cmp	r3, r4
 8000b34:	4192      	sbcs	r2, r2
 8000b36:	4252      	negs	r2, r2
 8000b38:	1abf      	subs	r7, r7, r2
 8000b3a:	023a      	lsls	r2, r7, #8
 8000b3c:	d53d      	bpl.n	8000bba <__aeabi_dadd+0x632>
 8000b3e:	1acc      	subs	r4, r1, r3
 8000b40:	42a1      	cmp	r1, r4
 8000b42:	4189      	sbcs	r1, r1
 8000b44:	4643      	mov	r3, r8
 8000b46:	4249      	negs	r1, r1
 8000b48:	1a1f      	subs	r7, r3, r0
 8000b4a:	4655      	mov	r5, sl
 8000b4c:	1a7f      	subs	r7, r7, r1
 8000b4e:	e595      	b.n	800067c <__aeabi_dadd+0xf4>
 8000b50:	077b      	lsls	r3, r7, #29
 8000b52:	08c9      	lsrs	r1, r1, #3
 8000b54:	430b      	orrs	r3, r1
 8000b56:	08f8      	lsrs	r0, r7, #3
 8000b58:	e643      	b.n	80007e2 <__aeabi_dadd+0x25a>
 8000b5a:	4644      	mov	r4, r8
 8000b5c:	08db      	lsrs	r3, r3, #3
 8000b5e:	430c      	orrs	r4, r1
 8000b60:	d130      	bne.n	8000bc4 <__aeabi_dadd+0x63c>
 8000b62:	0742      	lsls	r2, r0, #29
 8000b64:	4313      	orrs	r3, r2
 8000b66:	08c0      	lsrs	r0, r0, #3
 8000b68:	e65c      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000b6a:	077b      	lsls	r3, r7, #29
 8000b6c:	08c9      	lsrs	r1, r1, #3
 8000b6e:	430b      	orrs	r3, r1
 8000b70:	08f8      	lsrs	r0, r7, #3
 8000b72:	e639      	b.n	80007e8 <__aeabi_dadd+0x260>
 8000b74:	185c      	adds	r4, r3, r1
 8000b76:	429c      	cmp	r4, r3
 8000b78:	419b      	sbcs	r3, r3
 8000b7a:	4440      	add	r0, r8
 8000b7c:	425b      	negs	r3, r3
 8000b7e:	18c7      	adds	r7, r0, r3
 8000b80:	023b      	lsls	r3, r7, #8
 8000b82:	d400      	bmi.n	8000b86 <__aeabi_dadd+0x5fe>
 8000b84:	e625      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000b86:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <__aeabi_dadd+0x674>)
 8000b88:	2601      	movs	r6, #1
 8000b8a:	401f      	ands	r7, r3
 8000b8c:	e621      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000b8e:	0004      	movs	r4, r0
 8000b90:	3a20      	subs	r2, #32
 8000b92:	40d4      	lsrs	r4, r2
 8000b94:	4662      	mov	r2, ip
 8000b96:	2a20      	cmp	r2, #32
 8000b98:	d004      	beq.n	8000ba4 <__aeabi_dadd+0x61c>
 8000b9a:	2240      	movs	r2, #64	; 0x40
 8000b9c:	4666      	mov	r6, ip
 8000b9e:	1b92      	subs	r2, r2, r6
 8000ba0:	4090      	lsls	r0, r2
 8000ba2:	4303      	orrs	r3, r0
 8000ba4:	1e5a      	subs	r2, r3, #1
 8000ba6:	4193      	sbcs	r3, r2
 8000ba8:	431c      	orrs	r4, r3
 8000baa:	e67e      	b.n	80008aa <__aeabi_dadd+0x322>
 8000bac:	185c      	adds	r4, r3, r1
 8000bae:	428c      	cmp	r4, r1
 8000bb0:	4189      	sbcs	r1, r1
 8000bb2:	4440      	add	r0, r8
 8000bb4:	4249      	negs	r1, r1
 8000bb6:	1847      	adds	r7, r0, r1
 8000bb8:	e6dd      	b.n	8000976 <__aeabi_dadd+0x3ee>
 8000bba:	0023      	movs	r3, r4
 8000bbc:	433b      	orrs	r3, r7
 8000bbe:	d100      	bne.n	8000bc2 <__aeabi_dadd+0x63a>
 8000bc0:	e6ad      	b.n	800091e <__aeabi_dadd+0x396>
 8000bc2:	e606      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000bc4:	0744      	lsls	r4, r0, #29
 8000bc6:	4323      	orrs	r3, r4
 8000bc8:	2480      	movs	r4, #128	; 0x80
 8000bca:	08c0      	lsrs	r0, r0, #3
 8000bcc:	0324      	lsls	r4, r4, #12
 8000bce:	4220      	tst	r0, r4
 8000bd0:	d008      	beq.n	8000be4 <__aeabi_dadd+0x65c>
 8000bd2:	4642      	mov	r2, r8
 8000bd4:	08d6      	lsrs	r6, r2, #3
 8000bd6:	4226      	tst	r6, r4
 8000bd8:	d104      	bne.n	8000be4 <__aeabi_dadd+0x65c>
 8000bda:	4655      	mov	r5, sl
 8000bdc:	0030      	movs	r0, r6
 8000bde:	08cb      	lsrs	r3, r1, #3
 8000be0:	0751      	lsls	r1, r2, #29
 8000be2:	430b      	orrs	r3, r1
 8000be4:	0f5a      	lsrs	r2, r3, #29
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	08db      	lsrs	r3, r3, #3
 8000bea:	0752      	lsls	r2, r2, #29
 8000bec:	4313      	orrs	r3, r2
 8000bee:	e619      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	4a01      	ldr	r2, [pc, #4]	; (8000bf8 <__aeabi_dadd+0x670>)
 8000bf4:	001f      	movs	r7, r3
 8000bf6:	e55e      	b.n	80006b6 <__aeabi_dadd+0x12e>
 8000bf8:	000007ff 	.word	0x000007ff
 8000bfc:	ff7fffff 	.word	0xff7fffff

08000c00 <__aeabi_ddiv>:
 8000c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c02:	4657      	mov	r7, sl
 8000c04:	464e      	mov	r6, r9
 8000c06:	4645      	mov	r5, r8
 8000c08:	46de      	mov	lr, fp
 8000c0a:	b5e0      	push	{r5, r6, r7, lr}
 8000c0c:	4681      	mov	r9, r0
 8000c0e:	0005      	movs	r5, r0
 8000c10:	030c      	lsls	r4, r1, #12
 8000c12:	0048      	lsls	r0, r1, #1
 8000c14:	4692      	mov	sl, r2
 8000c16:	001f      	movs	r7, r3
 8000c18:	b085      	sub	sp, #20
 8000c1a:	0b24      	lsrs	r4, r4, #12
 8000c1c:	0d40      	lsrs	r0, r0, #21
 8000c1e:	0fce      	lsrs	r6, r1, #31
 8000c20:	2800      	cmp	r0, #0
 8000c22:	d100      	bne.n	8000c26 <__aeabi_ddiv+0x26>
 8000c24:	e156      	b.n	8000ed4 <__aeabi_ddiv+0x2d4>
 8000c26:	4bd4      	ldr	r3, [pc, #848]	; (8000f78 <__aeabi_ddiv+0x378>)
 8000c28:	4298      	cmp	r0, r3
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_ddiv+0x2e>
 8000c2c:	e172      	b.n	8000f14 <__aeabi_ddiv+0x314>
 8000c2e:	0f6b      	lsrs	r3, r5, #29
 8000c30:	00e4      	lsls	r4, r4, #3
 8000c32:	431c      	orrs	r4, r3
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	041b      	lsls	r3, r3, #16
 8000c38:	4323      	orrs	r3, r4
 8000c3a:	4698      	mov	r8, r3
 8000c3c:	4bcf      	ldr	r3, [pc, #828]	; (8000f7c <__aeabi_ddiv+0x37c>)
 8000c3e:	00ed      	lsls	r5, r5, #3
 8000c40:	469b      	mov	fp, r3
 8000c42:	2300      	movs	r3, #0
 8000c44:	4699      	mov	r9, r3
 8000c46:	4483      	add	fp, r0
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	033c      	lsls	r4, r7, #12
 8000c4c:	007b      	lsls	r3, r7, #1
 8000c4e:	4650      	mov	r0, sl
 8000c50:	0b24      	lsrs	r4, r4, #12
 8000c52:	0d5b      	lsrs	r3, r3, #21
 8000c54:	0fff      	lsrs	r7, r7, #31
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d100      	bne.n	8000c5c <__aeabi_ddiv+0x5c>
 8000c5a:	e11f      	b.n	8000e9c <__aeabi_ddiv+0x29c>
 8000c5c:	4ac6      	ldr	r2, [pc, #792]	; (8000f78 <__aeabi_ddiv+0x378>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d100      	bne.n	8000c64 <__aeabi_ddiv+0x64>
 8000c62:	e162      	b.n	8000f2a <__aeabi_ddiv+0x32a>
 8000c64:	49c5      	ldr	r1, [pc, #788]	; (8000f7c <__aeabi_ddiv+0x37c>)
 8000c66:	0f42      	lsrs	r2, r0, #29
 8000c68:	468c      	mov	ip, r1
 8000c6a:	00e4      	lsls	r4, r4, #3
 8000c6c:	4659      	mov	r1, fp
 8000c6e:	4314      	orrs	r4, r2
 8000c70:	2280      	movs	r2, #128	; 0x80
 8000c72:	4463      	add	r3, ip
 8000c74:	0412      	lsls	r2, r2, #16
 8000c76:	1acb      	subs	r3, r1, r3
 8000c78:	4314      	orrs	r4, r2
 8000c7a:	469b      	mov	fp, r3
 8000c7c:	00c2      	lsls	r2, r0, #3
 8000c7e:	2000      	movs	r0, #0
 8000c80:	0033      	movs	r3, r6
 8000c82:	407b      	eors	r3, r7
 8000c84:	469a      	mov	sl, r3
 8000c86:	464b      	mov	r3, r9
 8000c88:	2b0f      	cmp	r3, #15
 8000c8a:	d827      	bhi.n	8000cdc <__aeabi_ddiv+0xdc>
 8000c8c:	49bc      	ldr	r1, [pc, #752]	; (8000f80 <__aeabi_ddiv+0x380>)
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	58cb      	ldr	r3, [r1, r3]
 8000c92:	469f      	mov	pc, r3
 8000c94:	46b2      	mov	sl, r6
 8000c96:	9b00      	ldr	r3, [sp, #0]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d016      	beq.n	8000cca <__aeabi_ddiv+0xca>
 8000c9c:	2b03      	cmp	r3, #3
 8000c9e:	d100      	bne.n	8000ca2 <__aeabi_ddiv+0xa2>
 8000ca0:	e28e      	b.n	80011c0 <__aeabi_ddiv+0x5c0>
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d000      	beq.n	8000ca8 <__aeabi_ddiv+0xa8>
 8000ca6:	e0d9      	b.n	8000e5c <__aeabi_ddiv+0x25c>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	2400      	movs	r4, #0
 8000cac:	2500      	movs	r5, #0
 8000cae:	4652      	mov	r2, sl
 8000cb0:	051b      	lsls	r3, r3, #20
 8000cb2:	4323      	orrs	r3, r4
 8000cb4:	07d2      	lsls	r2, r2, #31
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	0028      	movs	r0, r5
 8000cba:	0019      	movs	r1, r3
 8000cbc:	b005      	add	sp, #20
 8000cbe:	bcf0      	pop	{r4, r5, r6, r7}
 8000cc0:	46bb      	mov	fp, r7
 8000cc2:	46b2      	mov	sl, r6
 8000cc4:	46a9      	mov	r9, r5
 8000cc6:	46a0      	mov	r8, r4
 8000cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cca:	2400      	movs	r4, #0
 8000ccc:	2500      	movs	r5, #0
 8000cce:	4baa      	ldr	r3, [pc, #680]	; (8000f78 <__aeabi_ddiv+0x378>)
 8000cd0:	e7ed      	b.n	8000cae <__aeabi_ddiv+0xae>
 8000cd2:	46ba      	mov	sl, r7
 8000cd4:	46a0      	mov	r8, r4
 8000cd6:	0015      	movs	r5, r2
 8000cd8:	9000      	str	r0, [sp, #0]
 8000cda:	e7dc      	b.n	8000c96 <__aeabi_ddiv+0x96>
 8000cdc:	4544      	cmp	r4, r8
 8000cde:	d200      	bcs.n	8000ce2 <__aeabi_ddiv+0xe2>
 8000ce0:	e1c7      	b.n	8001072 <__aeabi_ddiv+0x472>
 8000ce2:	d100      	bne.n	8000ce6 <__aeabi_ddiv+0xe6>
 8000ce4:	e1c2      	b.n	800106c <__aeabi_ddiv+0x46c>
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	425b      	negs	r3, r3
 8000cea:	469c      	mov	ip, r3
 8000cec:	002e      	movs	r6, r5
 8000cee:	4640      	mov	r0, r8
 8000cf0:	2500      	movs	r5, #0
 8000cf2:	44e3      	add	fp, ip
 8000cf4:	0223      	lsls	r3, r4, #8
 8000cf6:	0e14      	lsrs	r4, r2, #24
 8000cf8:	431c      	orrs	r4, r3
 8000cfa:	0c1b      	lsrs	r3, r3, #16
 8000cfc:	4699      	mov	r9, r3
 8000cfe:	0423      	lsls	r3, r4, #16
 8000d00:	0c1f      	lsrs	r7, r3, #16
 8000d02:	0212      	lsls	r2, r2, #8
 8000d04:	4649      	mov	r1, r9
 8000d06:	9200      	str	r2, [sp, #0]
 8000d08:	9701      	str	r7, [sp, #4]
 8000d0a:	f7ff fa9f 	bl	800024c <__aeabi_uidivmod>
 8000d0e:	0002      	movs	r2, r0
 8000d10:	437a      	muls	r2, r7
 8000d12:	040b      	lsls	r3, r1, #16
 8000d14:	0c31      	lsrs	r1, r6, #16
 8000d16:	4680      	mov	r8, r0
 8000d18:	4319      	orrs	r1, r3
 8000d1a:	428a      	cmp	r2, r1
 8000d1c:	d907      	bls.n	8000d2e <__aeabi_ddiv+0x12e>
 8000d1e:	2301      	movs	r3, #1
 8000d20:	425b      	negs	r3, r3
 8000d22:	469c      	mov	ip, r3
 8000d24:	1909      	adds	r1, r1, r4
 8000d26:	44e0      	add	r8, ip
 8000d28:	428c      	cmp	r4, r1
 8000d2a:	d800      	bhi.n	8000d2e <__aeabi_ddiv+0x12e>
 8000d2c:	e207      	b.n	800113e <__aeabi_ddiv+0x53e>
 8000d2e:	1a88      	subs	r0, r1, r2
 8000d30:	4649      	mov	r1, r9
 8000d32:	f7ff fa8b 	bl	800024c <__aeabi_uidivmod>
 8000d36:	0409      	lsls	r1, r1, #16
 8000d38:	468c      	mov	ip, r1
 8000d3a:	0431      	lsls	r1, r6, #16
 8000d3c:	4666      	mov	r6, ip
 8000d3e:	9a01      	ldr	r2, [sp, #4]
 8000d40:	0c09      	lsrs	r1, r1, #16
 8000d42:	4342      	muls	r2, r0
 8000d44:	0003      	movs	r3, r0
 8000d46:	4331      	orrs	r1, r6
 8000d48:	428a      	cmp	r2, r1
 8000d4a:	d904      	bls.n	8000d56 <__aeabi_ddiv+0x156>
 8000d4c:	1909      	adds	r1, r1, r4
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	428c      	cmp	r4, r1
 8000d52:	d800      	bhi.n	8000d56 <__aeabi_ddiv+0x156>
 8000d54:	e1ed      	b.n	8001132 <__aeabi_ddiv+0x532>
 8000d56:	1a88      	subs	r0, r1, r2
 8000d58:	4642      	mov	r2, r8
 8000d5a:	0412      	lsls	r2, r2, #16
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	4690      	mov	r8, r2
 8000d60:	4641      	mov	r1, r8
 8000d62:	9b00      	ldr	r3, [sp, #0]
 8000d64:	040e      	lsls	r6, r1, #16
 8000d66:	0c1b      	lsrs	r3, r3, #16
 8000d68:	001f      	movs	r7, r3
 8000d6a:	9302      	str	r3, [sp, #8]
 8000d6c:	9b00      	ldr	r3, [sp, #0]
 8000d6e:	0c36      	lsrs	r6, r6, #16
 8000d70:	041b      	lsls	r3, r3, #16
 8000d72:	0c19      	lsrs	r1, r3, #16
 8000d74:	000b      	movs	r3, r1
 8000d76:	4373      	muls	r3, r6
 8000d78:	0c12      	lsrs	r2, r2, #16
 8000d7a:	437e      	muls	r6, r7
 8000d7c:	9103      	str	r1, [sp, #12]
 8000d7e:	4351      	muls	r1, r2
 8000d80:	437a      	muls	r2, r7
 8000d82:	0c1f      	lsrs	r7, r3, #16
 8000d84:	46bc      	mov	ip, r7
 8000d86:	1876      	adds	r6, r6, r1
 8000d88:	4466      	add	r6, ip
 8000d8a:	42b1      	cmp	r1, r6
 8000d8c:	d903      	bls.n	8000d96 <__aeabi_ddiv+0x196>
 8000d8e:	2180      	movs	r1, #128	; 0x80
 8000d90:	0249      	lsls	r1, r1, #9
 8000d92:	468c      	mov	ip, r1
 8000d94:	4462      	add	r2, ip
 8000d96:	0c31      	lsrs	r1, r6, #16
 8000d98:	188a      	adds	r2, r1, r2
 8000d9a:	0431      	lsls	r1, r6, #16
 8000d9c:	041e      	lsls	r6, r3, #16
 8000d9e:	0c36      	lsrs	r6, r6, #16
 8000da0:	198e      	adds	r6, r1, r6
 8000da2:	4290      	cmp	r0, r2
 8000da4:	d302      	bcc.n	8000dac <__aeabi_ddiv+0x1ac>
 8000da6:	d112      	bne.n	8000dce <__aeabi_ddiv+0x1ce>
 8000da8:	42b5      	cmp	r5, r6
 8000daa:	d210      	bcs.n	8000dce <__aeabi_ddiv+0x1ce>
 8000dac:	4643      	mov	r3, r8
 8000dae:	1e59      	subs	r1, r3, #1
 8000db0:	9b00      	ldr	r3, [sp, #0]
 8000db2:	469c      	mov	ip, r3
 8000db4:	4465      	add	r5, ip
 8000db6:	001f      	movs	r7, r3
 8000db8:	429d      	cmp	r5, r3
 8000dba:	419b      	sbcs	r3, r3
 8000dbc:	425b      	negs	r3, r3
 8000dbe:	191b      	adds	r3, r3, r4
 8000dc0:	18c0      	adds	r0, r0, r3
 8000dc2:	4284      	cmp	r4, r0
 8000dc4:	d200      	bcs.n	8000dc8 <__aeabi_ddiv+0x1c8>
 8000dc6:	e1a0      	b.n	800110a <__aeabi_ddiv+0x50a>
 8000dc8:	d100      	bne.n	8000dcc <__aeabi_ddiv+0x1cc>
 8000dca:	e19b      	b.n	8001104 <__aeabi_ddiv+0x504>
 8000dcc:	4688      	mov	r8, r1
 8000dce:	1bae      	subs	r6, r5, r6
 8000dd0:	42b5      	cmp	r5, r6
 8000dd2:	41ad      	sbcs	r5, r5
 8000dd4:	1a80      	subs	r0, r0, r2
 8000dd6:	426d      	negs	r5, r5
 8000dd8:	1b40      	subs	r0, r0, r5
 8000dda:	4284      	cmp	r4, r0
 8000ddc:	d100      	bne.n	8000de0 <__aeabi_ddiv+0x1e0>
 8000dde:	e1d5      	b.n	800118c <__aeabi_ddiv+0x58c>
 8000de0:	4649      	mov	r1, r9
 8000de2:	f7ff fa33 	bl	800024c <__aeabi_uidivmod>
 8000de6:	9a01      	ldr	r2, [sp, #4]
 8000de8:	040b      	lsls	r3, r1, #16
 8000dea:	4342      	muls	r2, r0
 8000dec:	0c31      	lsrs	r1, r6, #16
 8000dee:	0005      	movs	r5, r0
 8000df0:	4319      	orrs	r1, r3
 8000df2:	428a      	cmp	r2, r1
 8000df4:	d900      	bls.n	8000df8 <__aeabi_ddiv+0x1f8>
 8000df6:	e16c      	b.n	80010d2 <__aeabi_ddiv+0x4d2>
 8000df8:	1a88      	subs	r0, r1, r2
 8000dfa:	4649      	mov	r1, r9
 8000dfc:	f7ff fa26 	bl	800024c <__aeabi_uidivmod>
 8000e00:	9a01      	ldr	r2, [sp, #4]
 8000e02:	0436      	lsls	r6, r6, #16
 8000e04:	4342      	muls	r2, r0
 8000e06:	0409      	lsls	r1, r1, #16
 8000e08:	0c36      	lsrs	r6, r6, #16
 8000e0a:	0003      	movs	r3, r0
 8000e0c:	430e      	orrs	r6, r1
 8000e0e:	42b2      	cmp	r2, r6
 8000e10:	d900      	bls.n	8000e14 <__aeabi_ddiv+0x214>
 8000e12:	e153      	b.n	80010bc <__aeabi_ddiv+0x4bc>
 8000e14:	9803      	ldr	r0, [sp, #12]
 8000e16:	1ab6      	subs	r6, r6, r2
 8000e18:	0002      	movs	r2, r0
 8000e1a:	042d      	lsls	r5, r5, #16
 8000e1c:	431d      	orrs	r5, r3
 8000e1e:	9f02      	ldr	r7, [sp, #8]
 8000e20:	042b      	lsls	r3, r5, #16
 8000e22:	0c1b      	lsrs	r3, r3, #16
 8000e24:	435a      	muls	r2, r3
 8000e26:	437b      	muls	r3, r7
 8000e28:	469c      	mov	ip, r3
 8000e2a:	0c29      	lsrs	r1, r5, #16
 8000e2c:	4348      	muls	r0, r1
 8000e2e:	0c13      	lsrs	r3, r2, #16
 8000e30:	4484      	add	ip, r0
 8000e32:	4463      	add	r3, ip
 8000e34:	4379      	muls	r1, r7
 8000e36:	4298      	cmp	r0, r3
 8000e38:	d903      	bls.n	8000e42 <__aeabi_ddiv+0x242>
 8000e3a:	2080      	movs	r0, #128	; 0x80
 8000e3c:	0240      	lsls	r0, r0, #9
 8000e3e:	4684      	mov	ip, r0
 8000e40:	4461      	add	r1, ip
 8000e42:	0c18      	lsrs	r0, r3, #16
 8000e44:	0412      	lsls	r2, r2, #16
 8000e46:	041b      	lsls	r3, r3, #16
 8000e48:	0c12      	lsrs	r2, r2, #16
 8000e4a:	1841      	adds	r1, r0, r1
 8000e4c:	189b      	adds	r3, r3, r2
 8000e4e:	428e      	cmp	r6, r1
 8000e50:	d200      	bcs.n	8000e54 <__aeabi_ddiv+0x254>
 8000e52:	e0ff      	b.n	8001054 <__aeabi_ddiv+0x454>
 8000e54:	d100      	bne.n	8000e58 <__aeabi_ddiv+0x258>
 8000e56:	e0fa      	b.n	800104e <__aeabi_ddiv+0x44e>
 8000e58:	2301      	movs	r3, #1
 8000e5a:	431d      	orrs	r5, r3
 8000e5c:	4a49      	ldr	r2, [pc, #292]	; (8000f84 <__aeabi_ddiv+0x384>)
 8000e5e:	445a      	add	r2, fp
 8000e60:	2a00      	cmp	r2, #0
 8000e62:	dc00      	bgt.n	8000e66 <__aeabi_ddiv+0x266>
 8000e64:	e0aa      	b.n	8000fbc <__aeabi_ddiv+0x3bc>
 8000e66:	076b      	lsls	r3, r5, #29
 8000e68:	d000      	beq.n	8000e6c <__aeabi_ddiv+0x26c>
 8000e6a:	e13d      	b.n	80010e8 <__aeabi_ddiv+0x4e8>
 8000e6c:	08ed      	lsrs	r5, r5, #3
 8000e6e:	4643      	mov	r3, r8
 8000e70:	01db      	lsls	r3, r3, #7
 8000e72:	d506      	bpl.n	8000e82 <__aeabi_ddiv+0x282>
 8000e74:	4642      	mov	r2, r8
 8000e76:	4b44      	ldr	r3, [pc, #272]	; (8000f88 <__aeabi_ddiv+0x388>)
 8000e78:	401a      	ands	r2, r3
 8000e7a:	4690      	mov	r8, r2
 8000e7c:	2280      	movs	r2, #128	; 0x80
 8000e7e:	00d2      	lsls	r2, r2, #3
 8000e80:	445a      	add	r2, fp
 8000e82:	4b42      	ldr	r3, [pc, #264]	; (8000f8c <__aeabi_ddiv+0x38c>)
 8000e84:	429a      	cmp	r2, r3
 8000e86:	dd00      	ble.n	8000e8a <__aeabi_ddiv+0x28a>
 8000e88:	e71f      	b.n	8000cca <__aeabi_ddiv+0xca>
 8000e8a:	4643      	mov	r3, r8
 8000e8c:	075b      	lsls	r3, r3, #29
 8000e8e:	431d      	orrs	r5, r3
 8000e90:	4643      	mov	r3, r8
 8000e92:	0552      	lsls	r2, r2, #21
 8000e94:	025c      	lsls	r4, r3, #9
 8000e96:	0b24      	lsrs	r4, r4, #12
 8000e98:	0d53      	lsrs	r3, r2, #21
 8000e9a:	e708      	b.n	8000cae <__aeabi_ddiv+0xae>
 8000e9c:	4652      	mov	r2, sl
 8000e9e:	4322      	orrs	r2, r4
 8000ea0:	d100      	bne.n	8000ea4 <__aeabi_ddiv+0x2a4>
 8000ea2:	e07b      	b.n	8000f9c <__aeabi_ddiv+0x39c>
 8000ea4:	2c00      	cmp	r4, #0
 8000ea6:	d100      	bne.n	8000eaa <__aeabi_ddiv+0x2aa>
 8000ea8:	e0fa      	b.n	80010a0 <__aeabi_ddiv+0x4a0>
 8000eaa:	0020      	movs	r0, r4
 8000eac:	f001 f9da 	bl	8002264 <__clzsi2>
 8000eb0:	0002      	movs	r2, r0
 8000eb2:	3a0b      	subs	r2, #11
 8000eb4:	231d      	movs	r3, #29
 8000eb6:	0001      	movs	r1, r0
 8000eb8:	1a9b      	subs	r3, r3, r2
 8000eba:	4652      	mov	r2, sl
 8000ebc:	3908      	subs	r1, #8
 8000ebe:	40da      	lsrs	r2, r3
 8000ec0:	408c      	lsls	r4, r1
 8000ec2:	4314      	orrs	r4, r2
 8000ec4:	4652      	mov	r2, sl
 8000ec6:	408a      	lsls	r2, r1
 8000ec8:	4b31      	ldr	r3, [pc, #196]	; (8000f90 <__aeabi_ddiv+0x390>)
 8000eca:	4458      	add	r0, fp
 8000ecc:	469b      	mov	fp, r3
 8000ece:	4483      	add	fp, r0
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	e6d5      	b.n	8000c80 <__aeabi_ddiv+0x80>
 8000ed4:	464b      	mov	r3, r9
 8000ed6:	4323      	orrs	r3, r4
 8000ed8:	4698      	mov	r8, r3
 8000eda:	d044      	beq.n	8000f66 <__aeabi_ddiv+0x366>
 8000edc:	2c00      	cmp	r4, #0
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_ddiv+0x2e2>
 8000ee0:	e0ce      	b.n	8001080 <__aeabi_ddiv+0x480>
 8000ee2:	0020      	movs	r0, r4
 8000ee4:	f001 f9be 	bl	8002264 <__clzsi2>
 8000ee8:	0001      	movs	r1, r0
 8000eea:	0002      	movs	r2, r0
 8000eec:	390b      	subs	r1, #11
 8000eee:	231d      	movs	r3, #29
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	0010      	movs	r0, r2
 8000ef6:	40d9      	lsrs	r1, r3
 8000ef8:	3808      	subs	r0, #8
 8000efa:	4084      	lsls	r4, r0
 8000efc:	000b      	movs	r3, r1
 8000efe:	464d      	mov	r5, r9
 8000f00:	4323      	orrs	r3, r4
 8000f02:	4698      	mov	r8, r3
 8000f04:	4085      	lsls	r5, r0
 8000f06:	4823      	ldr	r0, [pc, #140]	; (8000f94 <__aeabi_ddiv+0x394>)
 8000f08:	1a83      	subs	r3, r0, r2
 8000f0a:	469b      	mov	fp, r3
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	4699      	mov	r9, r3
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	e69a      	b.n	8000c4a <__aeabi_ddiv+0x4a>
 8000f14:	464b      	mov	r3, r9
 8000f16:	4323      	orrs	r3, r4
 8000f18:	4698      	mov	r8, r3
 8000f1a:	d11d      	bne.n	8000f58 <__aeabi_ddiv+0x358>
 8000f1c:	2308      	movs	r3, #8
 8000f1e:	4699      	mov	r9, r3
 8000f20:	3b06      	subs	r3, #6
 8000f22:	2500      	movs	r5, #0
 8000f24:	4683      	mov	fp, r0
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	e68f      	b.n	8000c4a <__aeabi_ddiv+0x4a>
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	4322      	orrs	r2, r4
 8000f2e:	d109      	bne.n	8000f44 <__aeabi_ddiv+0x344>
 8000f30:	2302      	movs	r3, #2
 8000f32:	4649      	mov	r1, r9
 8000f34:	4319      	orrs	r1, r3
 8000f36:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <__aeabi_ddiv+0x398>)
 8000f38:	4689      	mov	r9, r1
 8000f3a:	469c      	mov	ip, r3
 8000f3c:	2400      	movs	r4, #0
 8000f3e:	2002      	movs	r0, #2
 8000f40:	44e3      	add	fp, ip
 8000f42:	e69d      	b.n	8000c80 <__aeabi_ddiv+0x80>
 8000f44:	2303      	movs	r3, #3
 8000f46:	464a      	mov	r2, r9
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <__aeabi_ddiv+0x398>)
 8000f4c:	4691      	mov	r9, r2
 8000f4e:	469c      	mov	ip, r3
 8000f50:	4652      	mov	r2, sl
 8000f52:	2003      	movs	r0, #3
 8000f54:	44e3      	add	fp, ip
 8000f56:	e693      	b.n	8000c80 <__aeabi_ddiv+0x80>
 8000f58:	230c      	movs	r3, #12
 8000f5a:	4699      	mov	r9, r3
 8000f5c:	3b09      	subs	r3, #9
 8000f5e:	46a0      	mov	r8, r4
 8000f60:	4683      	mov	fp, r0
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	e671      	b.n	8000c4a <__aeabi_ddiv+0x4a>
 8000f66:	2304      	movs	r3, #4
 8000f68:	4699      	mov	r9, r3
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	469b      	mov	fp, r3
 8000f6e:	3301      	adds	r3, #1
 8000f70:	2500      	movs	r5, #0
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	e669      	b.n	8000c4a <__aeabi_ddiv+0x4a>
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	000007ff 	.word	0x000007ff
 8000f7c:	fffffc01 	.word	0xfffffc01
 8000f80:	0800a068 	.word	0x0800a068
 8000f84:	000003ff 	.word	0x000003ff
 8000f88:	feffffff 	.word	0xfeffffff
 8000f8c:	000007fe 	.word	0x000007fe
 8000f90:	000003f3 	.word	0x000003f3
 8000f94:	fffffc0d 	.word	0xfffffc0d
 8000f98:	fffff801 	.word	0xfffff801
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	4319      	orrs	r1, r3
 8000fa2:	4689      	mov	r9, r1
 8000fa4:	2400      	movs	r4, #0
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	e66a      	b.n	8000c80 <__aeabi_ddiv+0x80>
 8000faa:	2300      	movs	r3, #0
 8000fac:	2480      	movs	r4, #128	; 0x80
 8000fae:	469a      	mov	sl, r3
 8000fb0:	2500      	movs	r5, #0
 8000fb2:	4b8a      	ldr	r3, [pc, #552]	; (80011dc <__aeabi_ddiv+0x5dc>)
 8000fb4:	0324      	lsls	r4, r4, #12
 8000fb6:	e67a      	b.n	8000cae <__aeabi_ddiv+0xae>
 8000fb8:	2501      	movs	r5, #1
 8000fba:	426d      	negs	r5, r5
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	1a9b      	subs	r3, r3, r2
 8000fc0:	2b38      	cmp	r3, #56	; 0x38
 8000fc2:	dd00      	ble.n	8000fc6 <__aeabi_ddiv+0x3c6>
 8000fc4:	e670      	b.n	8000ca8 <__aeabi_ddiv+0xa8>
 8000fc6:	2b1f      	cmp	r3, #31
 8000fc8:	dc00      	bgt.n	8000fcc <__aeabi_ddiv+0x3cc>
 8000fca:	e0bf      	b.n	800114c <__aeabi_ddiv+0x54c>
 8000fcc:	211f      	movs	r1, #31
 8000fce:	4249      	negs	r1, r1
 8000fd0:	1a8a      	subs	r2, r1, r2
 8000fd2:	4641      	mov	r1, r8
 8000fd4:	40d1      	lsrs	r1, r2
 8000fd6:	000a      	movs	r2, r1
 8000fd8:	2b20      	cmp	r3, #32
 8000fda:	d004      	beq.n	8000fe6 <__aeabi_ddiv+0x3e6>
 8000fdc:	4641      	mov	r1, r8
 8000fde:	4b80      	ldr	r3, [pc, #512]	; (80011e0 <__aeabi_ddiv+0x5e0>)
 8000fe0:	445b      	add	r3, fp
 8000fe2:	4099      	lsls	r1, r3
 8000fe4:	430d      	orrs	r5, r1
 8000fe6:	1e6b      	subs	r3, r5, #1
 8000fe8:	419d      	sbcs	r5, r3
 8000fea:	2307      	movs	r3, #7
 8000fec:	432a      	orrs	r2, r5
 8000fee:	001d      	movs	r5, r3
 8000ff0:	2400      	movs	r4, #0
 8000ff2:	4015      	ands	r5, r2
 8000ff4:	4213      	tst	r3, r2
 8000ff6:	d100      	bne.n	8000ffa <__aeabi_ddiv+0x3fa>
 8000ff8:	e0d4      	b.n	80011a4 <__aeabi_ddiv+0x5a4>
 8000ffa:	210f      	movs	r1, #15
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	4011      	ands	r1, r2
 8001000:	2904      	cmp	r1, #4
 8001002:	d100      	bne.n	8001006 <__aeabi_ddiv+0x406>
 8001004:	e0cb      	b.n	800119e <__aeabi_ddiv+0x59e>
 8001006:	1d11      	adds	r1, r2, #4
 8001008:	4291      	cmp	r1, r2
 800100a:	4192      	sbcs	r2, r2
 800100c:	4252      	negs	r2, r2
 800100e:	189b      	adds	r3, r3, r2
 8001010:	000a      	movs	r2, r1
 8001012:	0219      	lsls	r1, r3, #8
 8001014:	d400      	bmi.n	8001018 <__aeabi_ddiv+0x418>
 8001016:	e0c2      	b.n	800119e <__aeabi_ddiv+0x59e>
 8001018:	2301      	movs	r3, #1
 800101a:	2400      	movs	r4, #0
 800101c:	2500      	movs	r5, #0
 800101e:	e646      	b.n	8000cae <__aeabi_ddiv+0xae>
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	4641      	mov	r1, r8
 8001024:	031b      	lsls	r3, r3, #12
 8001026:	4219      	tst	r1, r3
 8001028:	d008      	beq.n	800103c <__aeabi_ddiv+0x43c>
 800102a:	421c      	tst	r4, r3
 800102c:	d106      	bne.n	800103c <__aeabi_ddiv+0x43c>
 800102e:	431c      	orrs	r4, r3
 8001030:	0324      	lsls	r4, r4, #12
 8001032:	46ba      	mov	sl, r7
 8001034:	0015      	movs	r5, r2
 8001036:	4b69      	ldr	r3, [pc, #420]	; (80011dc <__aeabi_ddiv+0x5dc>)
 8001038:	0b24      	lsrs	r4, r4, #12
 800103a:	e638      	b.n	8000cae <__aeabi_ddiv+0xae>
 800103c:	2480      	movs	r4, #128	; 0x80
 800103e:	4643      	mov	r3, r8
 8001040:	0324      	lsls	r4, r4, #12
 8001042:	431c      	orrs	r4, r3
 8001044:	0324      	lsls	r4, r4, #12
 8001046:	46b2      	mov	sl, r6
 8001048:	4b64      	ldr	r3, [pc, #400]	; (80011dc <__aeabi_ddiv+0x5dc>)
 800104a:	0b24      	lsrs	r4, r4, #12
 800104c:	e62f      	b.n	8000cae <__aeabi_ddiv+0xae>
 800104e:	2b00      	cmp	r3, #0
 8001050:	d100      	bne.n	8001054 <__aeabi_ddiv+0x454>
 8001052:	e703      	b.n	8000e5c <__aeabi_ddiv+0x25c>
 8001054:	19a6      	adds	r6, r4, r6
 8001056:	1e68      	subs	r0, r5, #1
 8001058:	42a6      	cmp	r6, r4
 800105a:	d200      	bcs.n	800105e <__aeabi_ddiv+0x45e>
 800105c:	e08d      	b.n	800117a <__aeabi_ddiv+0x57a>
 800105e:	428e      	cmp	r6, r1
 8001060:	d200      	bcs.n	8001064 <__aeabi_ddiv+0x464>
 8001062:	e0a3      	b.n	80011ac <__aeabi_ddiv+0x5ac>
 8001064:	d100      	bne.n	8001068 <__aeabi_ddiv+0x468>
 8001066:	e0b3      	b.n	80011d0 <__aeabi_ddiv+0x5d0>
 8001068:	0005      	movs	r5, r0
 800106a:	e6f5      	b.n	8000e58 <__aeabi_ddiv+0x258>
 800106c:	42aa      	cmp	r2, r5
 800106e:	d900      	bls.n	8001072 <__aeabi_ddiv+0x472>
 8001070:	e639      	b.n	8000ce6 <__aeabi_ddiv+0xe6>
 8001072:	4643      	mov	r3, r8
 8001074:	07de      	lsls	r6, r3, #31
 8001076:	0858      	lsrs	r0, r3, #1
 8001078:	086b      	lsrs	r3, r5, #1
 800107a:	431e      	orrs	r6, r3
 800107c:	07ed      	lsls	r5, r5, #31
 800107e:	e639      	b.n	8000cf4 <__aeabi_ddiv+0xf4>
 8001080:	4648      	mov	r0, r9
 8001082:	f001 f8ef 	bl	8002264 <__clzsi2>
 8001086:	0001      	movs	r1, r0
 8001088:	0002      	movs	r2, r0
 800108a:	3115      	adds	r1, #21
 800108c:	3220      	adds	r2, #32
 800108e:	291c      	cmp	r1, #28
 8001090:	dc00      	bgt.n	8001094 <__aeabi_ddiv+0x494>
 8001092:	e72c      	b.n	8000eee <__aeabi_ddiv+0x2ee>
 8001094:	464b      	mov	r3, r9
 8001096:	3808      	subs	r0, #8
 8001098:	4083      	lsls	r3, r0
 800109a:	2500      	movs	r5, #0
 800109c:	4698      	mov	r8, r3
 800109e:	e732      	b.n	8000f06 <__aeabi_ddiv+0x306>
 80010a0:	f001 f8e0 	bl	8002264 <__clzsi2>
 80010a4:	0003      	movs	r3, r0
 80010a6:	001a      	movs	r2, r3
 80010a8:	3215      	adds	r2, #21
 80010aa:	3020      	adds	r0, #32
 80010ac:	2a1c      	cmp	r2, #28
 80010ae:	dc00      	bgt.n	80010b2 <__aeabi_ddiv+0x4b2>
 80010b0:	e700      	b.n	8000eb4 <__aeabi_ddiv+0x2b4>
 80010b2:	4654      	mov	r4, sl
 80010b4:	3b08      	subs	r3, #8
 80010b6:	2200      	movs	r2, #0
 80010b8:	409c      	lsls	r4, r3
 80010ba:	e705      	b.n	8000ec8 <__aeabi_ddiv+0x2c8>
 80010bc:	1936      	adds	r6, r6, r4
 80010be:	3b01      	subs	r3, #1
 80010c0:	42b4      	cmp	r4, r6
 80010c2:	d900      	bls.n	80010c6 <__aeabi_ddiv+0x4c6>
 80010c4:	e6a6      	b.n	8000e14 <__aeabi_ddiv+0x214>
 80010c6:	42b2      	cmp	r2, r6
 80010c8:	d800      	bhi.n	80010cc <__aeabi_ddiv+0x4cc>
 80010ca:	e6a3      	b.n	8000e14 <__aeabi_ddiv+0x214>
 80010cc:	1e83      	subs	r3, r0, #2
 80010ce:	1936      	adds	r6, r6, r4
 80010d0:	e6a0      	b.n	8000e14 <__aeabi_ddiv+0x214>
 80010d2:	1909      	adds	r1, r1, r4
 80010d4:	3d01      	subs	r5, #1
 80010d6:	428c      	cmp	r4, r1
 80010d8:	d900      	bls.n	80010dc <__aeabi_ddiv+0x4dc>
 80010da:	e68d      	b.n	8000df8 <__aeabi_ddiv+0x1f8>
 80010dc:	428a      	cmp	r2, r1
 80010de:	d800      	bhi.n	80010e2 <__aeabi_ddiv+0x4e2>
 80010e0:	e68a      	b.n	8000df8 <__aeabi_ddiv+0x1f8>
 80010e2:	1e85      	subs	r5, r0, #2
 80010e4:	1909      	adds	r1, r1, r4
 80010e6:	e687      	b.n	8000df8 <__aeabi_ddiv+0x1f8>
 80010e8:	230f      	movs	r3, #15
 80010ea:	402b      	ands	r3, r5
 80010ec:	2b04      	cmp	r3, #4
 80010ee:	d100      	bne.n	80010f2 <__aeabi_ddiv+0x4f2>
 80010f0:	e6bc      	b.n	8000e6c <__aeabi_ddiv+0x26c>
 80010f2:	2305      	movs	r3, #5
 80010f4:	425b      	negs	r3, r3
 80010f6:	42ab      	cmp	r3, r5
 80010f8:	419b      	sbcs	r3, r3
 80010fa:	3504      	adds	r5, #4
 80010fc:	425b      	negs	r3, r3
 80010fe:	08ed      	lsrs	r5, r5, #3
 8001100:	4498      	add	r8, r3
 8001102:	e6b4      	b.n	8000e6e <__aeabi_ddiv+0x26e>
 8001104:	42af      	cmp	r7, r5
 8001106:	d900      	bls.n	800110a <__aeabi_ddiv+0x50a>
 8001108:	e660      	b.n	8000dcc <__aeabi_ddiv+0x1cc>
 800110a:	4282      	cmp	r2, r0
 800110c:	d804      	bhi.n	8001118 <__aeabi_ddiv+0x518>
 800110e:	d000      	beq.n	8001112 <__aeabi_ddiv+0x512>
 8001110:	e65c      	b.n	8000dcc <__aeabi_ddiv+0x1cc>
 8001112:	42ae      	cmp	r6, r5
 8001114:	d800      	bhi.n	8001118 <__aeabi_ddiv+0x518>
 8001116:	e659      	b.n	8000dcc <__aeabi_ddiv+0x1cc>
 8001118:	2302      	movs	r3, #2
 800111a:	425b      	negs	r3, r3
 800111c:	469c      	mov	ip, r3
 800111e:	9b00      	ldr	r3, [sp, #0]
 8001120:	44e0      	add	r8, ip
 8001122:	469c      	mov	ip, r3
 8001124:	4465      	add	r5, ip
 8001126:	429d      	cmp	r5, r3
 8001128:	419b      	sbcs	r3, r3
 800112a:	425b      	negs	r3, r3
 800112c:	191b      	adds	r3, r3, r4
 800112e:	18c0      	adds	r0, r0, r3
 8001130:	e64d      	b.n	8000dce <__aeabi_ddiv+0x1ce>
 8001132:	428a      	cmp	r2, r1
 8001134:	d800      	bhi.n	8001138 <__aeabi_ddiv+0x538>
 8001136:	e60e      	b.n	8000d56 <__aeabi_ddiv+0x156>
 8001138:	1e83      	subs	r3, r0, #2
 800113a:	1909      	adds	r1, r1, r4
 800113c:	e60b      	b.n	8000d56 <__aeabi_ddiv+0x156>
 800113e:	428a      	cmp	r2, r1
 8001140:	d800      	bhi.n	8001144 <__aeabi_ddiv+0x544>
 8001142:	e5f4      	b.n	8000d2e <__aeabi_ddiv+0x12e>
 8001144:	1e83      	subs	r3, r0, #2
 8001146:	4698      	mov	r8, r3
 8001148:	1909      	adds	r1, r1, r4
 800114a:	e5f0      	b.n	8000d2e <__aeabi_ddiv+0x12e>
 800114c:	4925      	ldr	r1, [pc, #148]	; (80011e4 <__aeabi_ddiv+0x5e4>)
 800114e:	0028      	movs	r0, r5
 8001150:	4459      	add	r1, fp
 8001152:	408d      	lsls	r5, r1
 8001154:	4642      	mov	r2, r8
 8001156:	408a      	lsls	r2, r1
 8001158:	1e69      	subs	r1, r5, #1
 800115a:	418d      	sbcs	r5, r1
 800115c:	4641      	mov	r1, r8
 800115e:	40d8      	lsrs	r0, r3
 8001160:	40d9      	lsrs	r1, r3
 8001162:	4302      	orrs	r2, r0
 8001164:	432a      	orrs	r2, r5
 8001166:	000b      	movs	r3, r1
 8001168:	0751      	lsls	r1, r2, #29
 800116a:	d100      	bne.n	800116e <__aeabi_ddiv+0x56e>
 800116c:	e751      	b.n	8001012 <__aeabi_ddiv+0x412>
 800116e:	210f      	movs	r1, #15
 8001170:	4011      	ands	r1, r2
 8001172:	2904      	cmp	r1, #4
 8001174:	d000      	beq.n	8001178 <__aeabi_ddiv+0x578>
 8001176:	e746      	b.n	8001006 <__aeabi_ddiv+0x406>
 8001178:	e74b      	b.n	8001012 <__aeabi_ddiv+0x412>
 800117a:	0005      	movs	r5, r0
 800117c:	428e      	cmp	r6, r1
 800117e:	d000      	beq.n	8001182 <__aeabi_ddiv+0x582>
 8001180:	e66a      	b.n	8000e58 <__aeabi_ddiv+0x258>
 8001182:	9a00      	ldr	r2, [sp, #0]
 8001184:	4293      	cmp	r3, r2
 8001186:	d000      	beq.n	800118a <__aeabi_ddiv+0x58a>
 8001188:	e666      	b.n	8000e58 <__aeabi_ddiv+0x258>
 800118a:	e667      	b.n	8000e5c <__aeabi_ddiv+0x25c>
 800118c:	4a16      	ldr	r2, [pc, #88]	; (80011e8 <__aeabi_ddiv+0x5e8>)
 800118e:	445a      	add	r2, fp
 8001190:	2a00      	cmp	r2, #0
 8001192:	dc00      	bgt.n	8001196 <__aeabi_ddiv+0x596>
 8001194:	e710      	b.n	8000fb8 <__aeabi_ddiv+0x3b8>
 8001196:	2301      	movs	r3, #1
 8001198:	2500      	movs	r5, #0
 800119a:	4498      	add	r8, r3
 800119c:	e667      	b.n	8000e6e <__aeabi_ddiv+0x26e>
 800119e:	075d      	lsls	r5, r3, #29
 80011a0:	025b      	lsls	r3, r3, #9
 80011a2:	0b1c      	lsrs	r4, r3, #12
 80011a4:	08d2      	lsrs	r2, r2, #3
 80011a6:	2300      	movs	r3, #0
 80011a8:	4315      	orrs	r5, r2
 80011aa:	e580      	b.n	8000cae <__aeabi_ddiv+0xae>
 80011ac:	9800      	ldr	r0, [sp, #0]
 80011ae:	3d02      	subs	r5, #2
 80011b0:	0042      	lsls	r2, r0, #1
 80011b2:	4282      	cmp	r2, r0
 80011b4:	41bf      	sbcs	r7, r7
 80011b6:	427f      	negs	r7, r7
 80011b8:	193c      	adds	r4, r7, r4
 80011ba:	1936      	adds	r6, r6, r4
 80011bc:	9200      	str	r2, [sp, #0]
 80011be:	e7dd      	b.n	800117c <__aeabi_ddiv+0x57c>
 80011c0:	2480      	movs	r4, #128	; 0x80
 80011c2:	4643      	mov	r3, r8
 80011c4:	0324      	lsls	r4, r4, #12
 80011c6:	431c      	orrs	r4, r3
 80011c8:	0324      	lsls	r4, r4, #12
 80011ca:	4b04      	ldr	r3, [pc, #16]	; (80011dc <__aeabi_ddiv+0x5dc>)
 80011cc:	0b24      	lsrs	r4, r4, #12
 80011ce:	e56e      	b.n	8000cae <__aeabi_ddiv+0xae>
 80011d0:	9a00      	ldr	r2, [sp, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d3ea      	bcc.n	80011ac <__aeabi_ddiv+0x5ac>
 80011d6:	0005      	movs	r5, r0
 80011d8:	e7d3      	b.n	8001182 <__aeabi_ddiv+0x582>
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	000007ff 	.word	0x000007ff
 80011e0:	0000043e 	.word	0x0000043e
 80011e4:	0000041e 	.word	0x0000041e
 80011e8:	000003ff 	.word	0x000003ff

080011ec <__eqdf2>:
 80011ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ee:	464e      	mov	r6, r9
 80011f0:	4645      	mov	r5, r8
 80011f2:	46de      	mov	lr, fp
 80011f4:	4657      	mov	r7, sl
 80011f6:	4690      	mov	r8, r2
 80011f8:	b5e0      	push	{r5, r6, r7, lr}
 80011fa:	0017      	movs	r7, r2
 80011fc:	031a      	lsls	r2, r3, #12
 80011fe:	0b12      	lsrs	r2, r2, #12
 8001200:	0005      	movs	r5, r0
 8001202:	4684      	mov	ip, r0
 8001204:	4819      	ldr	r0, [pc, #100]	; (800126c <__eqdf2+0x80>)
 8001206:	030e      	lsls	r6, r1, #12
 8001208:	004c      	lsls	r4, r1, #1
 800120a:	4691      	mov	r9, r2
 800120c:	005a      	lsls	r2, r3, #1
 800120e:	0fdb      	lsrs	r3, r3, #31
 8001210:	469b      	mov	fp, r3
 8001212:	0b36      	lsrs	r6, r6, #12
 8001214:	0d64      	lsrs	r4, r4, #21
 8001216:	0fc9      	lsrs	r1, r1, #31
 8001218:	0d52      	lsrs	r2, r2, #21
 800121a:	4284      	cmp	r4, r0
 800121c:	d019      	beq.n	8001252 <__eqdf2+0x66>
 800121e:	4282      	cmp	r2, r0
 8001220:	d010      	beq.n	8001244 <__eqdf2+0x58>
 8001222:	2001      	movs	r0, #1
 8001224:	4294      	cmp	r4, r2
 8001226:	d10e      	bne.n	8001246 <__eqdf2+0x5a>
 8001228:	454e      	cmp	r6, r9
 800122a:	d10c      	bne.n	8001246 <__eqdf2+0x5a>
 800122c:	2001      	movs	r0, #1
 800122e:	45c4      	cmp	ip, r8
 8001230:	d109      	bne.n	8001246 <__eqdf2+0x5a>
 8001232:	4559      	cmp	r1, fp
 8001234:	d017      	beq.n	8001266 <__eqdf2+0x7a>
 8001236:	2c00      	cmp	r4, #0
 8001238:	d105      	bne.n	8001246 <__eqdf2+0x5a>
 800123a:	0030      	movs	r0, r6
 800123c:	4328      	orrs	r0, r5
 800123e:	1e43      	subs	r3, r0, #1
 8001240:	4198      	sbcs	r0, r3
 8001242:	e000      	b.n	8001246 <__eqdf2+0x5a>
 8001244:	2001      	movs	r0, #1
 8001246:	bcf0      	pop	{r4, r5, r6, r7}
 8001248:	46bb      	mov	fp, r7
 800124a:	46b2      	mov	sl, r6
 800124c:	46a9      	mov	r9, r5
 800124e:	46a0      	mov	r8, r4
 8001250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001252:	0033      	movs	r3, r6
 8001254:	2001      	movs	r0, #1
 8001256:	432b      	orrs	r3, r5
 8001258:	d1f5      	bne.n	8001246 <__eqdf2+0x5a>
 800125a:	42a2      	cmp	r2, r4
 800125c:	d1f3      	bne.n	8001246 <__eqdf2+0x5a>
 800125e:	464b      	mov	r3, r9
 8001260:	433b      	orrs	r3, r7
 8001262:	d1f0      	bne.n	8001246 <__eqdf2+0x5a>
 8001264:	e7e2      	b.n	800122c <__eqdf2+0x40>
 8001266:	2000      	movs	r0, #0
 8001268:	e7ed      	b.n	8001246 <__eqdf2+0x5a>
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	000007ff 	.word	0x000007ff

08001270 <__gedf2>:
 8001270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001272:	4647      	mov	r7, r8
 8001274:	46ce      	mov	lr, r9
 8001276:	0004      	movs	r4, r0
 8001278:	0018      	movs	r0, r3
 800127a:	0016      	movs	r6, r2
 800127c:	031b      	lsls	r3, r3, #12
 800127e:	0b1b      	lsrs	r3, r3, #12
 8001280:	4d2d      	ldr	r5, [pc, #180]	; (8001338 <__gedf2+0xc8>)
 8001282:	004a      	lsls	r2, r1, #1
 8001284:	4699      	mov	r9, r3
 8001286:	b580      	push	{r7, lr}
 8001288:	0043      	lsls	r3, r0, #1
 800128a:	030f      	lsls	r7, r1, #12
 800128c:	46a4      	mov	ip, r4
 800128e:	46b0      	mov	r8, r6
 8001290:	0b3f      	lsrs	r7, r7, #12
 8001292:	0d52      	lsrs	r2, r2, #21
 8001294:	0fc9      	lsrs	r1, r1, #31
 8001296:	0d5b      	lsrs	r3, r3, #21
 8001298:	0fc0      	lsrs	r0, r0, #31
 800129a:	42aa      	cmp	r2, r5
 800129c:	d021      	beq.n	80012e2 <__gedf2+0x72>
 800129e:	42ab      	cmp	r3, r5
 80012a0:	d013      	beq.n	80012ca <__gedf2+0x5a>
 80012a2:	2a00      	cmp	r2, #0
 80012a4:	d122      	bne.n	80012ec <__gedf2+0x7c>
 80012a6:	433c      	orrs	r4, r7
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d102      	bne.n	80012b2 <__gedf2+0x42>
 80012ac:	464d      	mov	r5, r9
 80012ae:	432e      	orrs	r6, r5
 80012b0:	d022      	beq.n	80012f8 <__gedf2+0x88>
 80012b2:	2c00      	cmp	r4, #0
 80012b4:	d010      	beq.n	80012d8 <__gedf2+0x68>
 80012b6:	4281      	cmp	r1, r0
 80012b8:	d022      	beq.n	8001300 <__gedf2+0x90>
 80012ba:	2002      	movs	r0, #2
 80012bc:	3901      	subs	r1, #1
 80012be:	4008      	ands	r0, r1
 80012c0:	3801      	subs	r0, #1
 80012c2:	bcc0      	pop	{r6, r7}
 80012c4:	46b9      	mov	r9, r7
 80012c6:	46b0      	mov	r8, r6
 80012c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ca:	464d      	mov	r5, r9
 80012cc:	432e      	orrs	r6, r5
 80012ce:	d129      	bne.n	8001324 <__gedf2+0xb4>
 80012d0:	2a00      	cmp	r2, #0
 80012d2:	d1f0      	bne.n	80012b6 <__gedf2+0x46>
 80012d4:	433c      	orrs	r4, r7
 80012d6:	d1ee      	bne.n	80012b6 <__gedf2+0x46>
 80012d8:	2800      	cmp	r0, #0
 80012da:	d1f2      	bne.n	80012c2 <__gedf2+0x52>
 80012dc:	2001      	movs	r0, #1
 80012de:	4240      	negs	r0, r0
 80012e0:	e7ef      	b.n	80012c2 <__gedf2+0x52>
 80012e2:	003d      	movs	r5, r7
 80012e4:	4325      	orrs	r5, r4
 80012e6:	d11d      	bne.n	8001324 <__gedf2+0xb4>
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d0ee      	beq.n	80012ca <__gedf2+0x5a>
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1e2      	bne.n	80012b6 <__gedf2+0x46>
 80012f0:	464c      	mov	r4, r9
 80012f2:	4326      	orrs	r6, r4
 80012f4:	d1df      	bne.n	80012b6 <__gedf2+0x46>
 80012f6:	e7e0      	b.n	80012ba <__gedf2+0x4a>
 80012f8:	2000      	movs	r0, #0
 80012fa:	2c00      	cmp	r4, #0
 80012fc:	d0e1      	beq.n	80012c2 <__gedf2+0x52>
 80012fe:	e7dc      	b.n	80012ba <__gedf2+0x4a>
 8001300:	429a      	cmp	r2, r3
 8001302:	dc0a      	bgt.n	800131a <__gedf2+0xaa>
 8001304:	dbe8      	blt.n	80012d8 <__gedf2+0x68>
 8001306:	454f      	cmp	r7, r9
 8001308:	d8d7      	bhi.n	80012ba <__gedf2+0x4a>
 800130a:	d00e      	beq.n	800132a <__gedf2+0xba>
 800130c:	2000      	movs	r0, #0
 800130e:	454f      	cmp	r7, r9
 8001310:	d2d7      	bcs.n	80012c2 <__gedf2+0x52>
 8001312:	2900      	cmp	r1, #0
 8001314:	d0e2      	beq.n	80012dc <__gedf2+0x6c>
 8001316:	0008      	movs	r0, r1
 8001318:	e7d3      	b.n	80012c2 <__gedf2+0x52>
 800131a:	4243      	negs	r3, r0
 800131c:	4158      	adcs	r0, r3
 800131e:	0040      	lsls	r0, r0, #1
 8001320:	3801      	subs	r0, #1
 8001322:	e7ce      	b.n	80012c2 <__gedf2+0x52>
 8001324:	2002      	movs	r0, #2
 8001326:	4240      	negs	r0, r0
 8001328:	e7cb      	b.n	80012c2 <__gedf2+0x52>
 800132a:	45c4      	cmp	ip, r8
 800132c:	d8c5      	bhi.n	80012ba <__gedf2+0x4a>
 800132e:	2000      	movs	r0, #0
 8001330:	45c4      	cmp	ip, r8
 8001332:	d2c6      	bcs.n	80012c2 <__gedf2+0x52>
 8001334:	e7ed      	b.n	8001312 <__gedf2+0xa2>
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	000007ff 	.word	0x000007ff

0800133c <__ledf2>:
 800133c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133e:	4647      	mov	r7, r8
 8001340:	46ce      	mov	lr, r9
 8001342:	0004      	movs	r4, r0
 8001344:	0018      	movs	r0, r3
 8001346:	0016      	movs	r6, r2
 8001348:	031b      	lsls	r3, r3, #12
 800134a:	0b1b      	lsrs	r3, r3, #12
 800134c:	4d2c      	ldr	r5, [pc, #176]	; (8001400 <__ledf2+0xc4>)
 800134e:	004a      	lsls	r2, r1, #1
 8001350:	4699      	mov	r9, r3
 8001352:	b580      	push	{r7, lr}
 8001354:	0043      	lsls	r3, r0, #1
 8001356:	030f      	lsls	r7, r1, #12
 8001358:	46a4      	mov	ip, r4
 800135a:	46b0      	mov	r8, r6
 800135c:	0b3f      	lsrs	r7, r7, #12
 800135e:	0d52      	lsrs	r2, r2, #21
 8001360:	0fc9      	lsrs	r1, r1, #31
 8001362:	0d5b      	lsrs	r3, r3, #21
 8001364:	0fc0      	lsrs	r0, r0, #31
 8001366:	42aa      	cmp	r2, r5
 8001368:	d00d      	beq.n	8001386 <__ledf2+0x4a>
 800136a:	42ab      	cmp	r3, r5
 800136c:	d010      	beq.n	8001390 <__ledf2+0x54>
 800136e:	2a00      	cmp	r2, #0
 8001370:	d127      	bne.n	80013c2 <__ledf2+0x86>
 8001372:	433c      	orrs	r4, r7
 8001374:	2b00      	cmp	r3, #0
 8001376:	d111      	bne.n	800139c <__ledf2+0x60>
 8001378:	464d      	mov	r5, r9
 800137a:	432e      	orrs	r6, r5
 800137c:	d10e      	bne.n	800139c <__ledf2+0x60>
 800137e:	2000      	movs	r0, #0
 8001380:	2c00      	cmp	r4, #0
 8001382:	d015      	beq.n	80013b0 <__ledf2+0x74>
 8001384:	e00e      	b.n	80013a4 <__ledf2+0x68>
 8001386:	003d      	movs	r5, r7
 8001388:	4325      	orrs	r5, r4
 800138a:	d110      	bne.n	80013ae <__ledf2+0x72>
 800138c:	4293      	cmp	r3, r2
 800138e:	d118      	bne.n	80013c2 <__ledf2+0x86>
 8001390:	464d      	mov	r5, r9
 8001392:	432e      	orrs	r6, r5
 8001394:	d10b      	bne.n	80013ae <__ledf2+0x72>
 8001396:	2a00      	cmp	r2, #0
 8001398:	d102      	bne.n	80013a0 <__ledf2+0x64>
 800139a:	433c      	orrs	r4, r7
 800139c:	2c00      	cmp	r4, #0
 800139e:	d00b      	beq.n	80013b8 <__ledf2+0x7c>
 80013a0:	4281      	cmp	r1, r0
 80013a2:	d014      	beq.n	80013ce <__ledf2+0x92>
 80013a4:	2002      	movs	r0, #2
 80013a6:	3901      	subs	r1, #1
 80013a8:	4008      	ands	r0, r1
 80013aa:	3801      	subs	r0, #1
 80013ac:	e000      	b.n	80013b0 <__ledf2+0x74>
 80013ae:	2002      	movs	r0, #2
 80013b0:	bcc0      	pop	{r6, r7}
 80013b2:	46b9      	mov	r9, r7
 80013b4:	46b0      	mov	r8, r6
 80013b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013b8:	2800      	cmp	r0, #0
 80013ba:	d1f9      	bne.n	80013b0 <__ledf2+0x74>
 80013bc:	2001      	movs	r0, #1
 80013be:	4240      	negs	r0, r0
 80013c0:	e7f6      	b.n	80013b0 <__ledf2+0x74>
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1ec      	bne.n	80013a0 <__ledf2+0x64>
 80013c6:	464c      	mov	r4, r9
 80013c8:	4326      	orrs	r6, r4
 80013ca:	d1e9      	bne.n	80013a0 <__ledf2+0x64>
 80013cc:	e7ea      	b.n	80013a4 <__ledf2+0x68>
 80013ce:	429a      	cmp	r2, r3
 80013d0:	dd04      	ble.n	80013dc <__ledf2+0xa0>
 80013d2:	4243      	negs	r3, r0
 80013d4:	4158      	adcs	r0, r3
 80013d6:	0040      	lsls	r0, r0, #1
 80013d8:	3801      	subs	r0, #1
 80013da:	e7e9      	b.n	80013b0 <__ledf2+0x74>
 80013dc:	429a      	cmp	r2, r3
 80013de:	dbeb      	blt.n	80013b8 <__ledf2+0x7c>
 80013e0:	454f      	cmp	r7, r9
 80013e2:	d8df      	bhi.n	80013a4 <__ledf2+0x68>
 80013e4:	d006      	beq.n	80013f4 <__ledf2+0xb8>
 80013e6:	2000      	movs	r0, #0
 80013e8:	454f      	cmp	r7, r9
 80013ea:	d2e1      	bcs.n	80013b0 <__ledf2+0x74>
 80013ec:	2900      	cmp	r1, #0
 80013ee:	d0e5      	beq.n	80013bc <__ledf2+0x80>
 80013f0:	0008      	movs	r0, r1
 80013f2:	e7dd      	b.n	80013b0 <__ledf2+0x74>
 80013f4:	45c4      	cmp	ip, r8
 80013f6:	d8d5      	bhi.n	80013a4 <__ledf2+0x68>
 80013f8:	2000      	movs	r0, #0
 80013fa:	45c4      	cmp	ip, r8
 80013fc:	d2d8      	bcs.n	80013b0 <__ledf2+0x74>
 80013fe:	e7f5      	b.n	80013ec <__ledf2+0xb0>
 8001400:	000007ff 	.word	0x000007ff

08001404 <__aeabi_dmul>:
 8001404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001406:	4657      	mov	r7, sl
 8001408:	464e      	mov	r6, r9
 800140a:	4645      	mov	r5, r8
 800140c:	46de      	mov	lr, fp
 800140e:	b5e0      	push	{r5, r6, r7, lr}
 8001410:	4698      	mov	r8, r3
 8001412:	030c      	lsls	r4, r1, #12
 8001414:	004b      	lsls	r3, r1, #1
 8001416:	0006      	movs	r6, r0
 8001418:	4692      	mov	sl, r2
 800141a:	b087      	sub	sp, #28
 800141c:	0b24      	lsrs	r4, r4, #12
 800141e:	0d5b      	lsrs	r3, r3, #21
 8001420:	0fcf      	lsrs	r7, r1, #31
 8001422:	2b00      	cmp	r3, #0
 8001424:	d100      	bne.n	8001428 <__aeabi_dmul+0x24>
 8001426:	e15c      	b.n	80016e2 <__aeabi_dmul+0x2de>
 8001428:	4ad9      	ldr	r2, [pc, #868]	; (8001790 <__aeabi_dmul+0x38c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d100      	bne.n	8001430 <__aeabi_dmul+0x2c>
 800142e:	e175      	b.n	800171c <__aeabi_dmul+0x318>
 8001430:	0f42      	lsrs	r2, r0, #29
 8001432:	00e4      	lsls	r4, r4, #3
 8001434:	4314      	orrs	r4, r2
 8001436:	2280      	movs	r2, #128	; 0x80
 8001438:	0412      	lsls	r2, r2, #16
 800143a:	4314      	orrs	r4, r2
 800143c:	4ad5      	ldr	r2, [pc, #852]	; (8001794 <__aeabi_dmul+0x390>)
 800143e:	00c5      	lsls	r5, r0, #3
 8001440:	4694      	mov	ip, r2
 8001442:	4463      	add	r3, ip
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2300      	movs	r3, #0
 8001448:	4699      	mov	r9, r3
 800144a:	469b      	mov	fp, r3
 800144c:	4643      	mov	r3, r8
 800144e:	4642      	mov	r2, r8
 8001450:	031e      	lsls	r6, r3, #12
 8001452:	0fd2      	lsrs	r2, r2, #31
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	4650      	mov	r0, sl
 8001458:	4690      	mov	r8, r2
 800145a:	0b36      	lsrs	r6, r6, #12
 800145c:	0d5b      	lsrs	r3, r3, #21
 800145e:	d100      	bne.n	8001462 <__aeabi_dmul+0x5e>
 8001460:	e120      	b.n	80016a4 <__aeabi_dmul+0x2a0>
 8001462:	4acb      	ldr	r2, [pc, #812]	; (8001790 <__aeabi_dmul+0x38c>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d100      	bne.n	800146a <__aeabi_dmul+0x66>
 8001468:	e162      	b.n	8001730 <__aeabi_dmul+0x32c>
 800146a:	49ca      	ldr	r1, [pc, #808]	; (8001794 <__aeabi_dmul+0x390>)
 800146c:	0f42      	lsrs	r2, r0, #29
 800146e:	468c      	mov	ip, r1
 8001470:	9900      	ldr	r1, [sp, #0]
 8001472:	4463      	add	r3, ip
 8001474:	00f6      	lsls	r6, r6, #3
 8001476:	468c      	mov	ip, r1
 8001478:	4316      	orrs	r6, r2
 800147a:	2280      	movs	r2, #128	; 0x80
 800147c:	449c      	add	ip, r3
 800147e:	0412      	lsls	r2, r2, #16
 8001480:	4663      	mov	r3, ip
 8001482:	4316      	orrs	r6, r2
 8001484:	00c2      	lsls	r2, r0, #3
 8001486:	2000      	movs	r0, #0
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	9900      	ldr	r1, [sp, #0]
 800148c:	4643      	mov	r3, r8
 800148e:	3101      	adds	r1, #1
 8001490:	468c      	mov	ip, r1
 8001492:	4649      	mov	r1, r9
 8001494:	407b      	eors	r3, r7
 8001496:	9301      	str	r3, [sp, #4]
 8001498:	290f      	cmp	r1, #15
 800149a:	d826      	bhi.n	80014ea <__aeabi_dmul+0xe6>
 800149c:	4bbe      	ldr	r3, [pc, #760]	; (8001798 <__aeabi_dmul+0x394>)
 800149e:	0089      	lsls	r1, r1, #2
 80014a0:	5859      	ldr	r1, [r3, r1]
 80014a2:	468f      	mov	pc, r1
 80014a4:	4643      	mov	r3, r8
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	0034      	movs	r4, r6
 80014aa:	0015      	movs	r5, r2
 80014ac:	4683      	mov	fp, r0
 80014ae:	465b      	mov	r3, fp
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d016      	beq.n	80014e2 <__aeabi_dmul+0xde>
 80014b4:	2b03      	cmp	r3, #3
 80014b6:	d100      	bne.n	80014ba <__aeabi_dmul+0xb6>
 80014b8:	e203      	b.n	80018c2 <__aeabi_dmul+0x4be>
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d000      	beq.n	80014c0 <__aeabi_dmul+0xbc>
 80014be:	e0cd      	b.n	800165c <__aeabi_dmul+0x258>
 80014c0:	2200      	movs	r2, #0
 80014c2:	2400      	movs	r4, #0
 80014c4:	2500      	movs	r5, #0
 80014c6:	9b01      	ldr	r3, [sp, #4]
 80014c8:	0512      	lsls	r2, r2, #20
 80014ca:	4322      	orrs	r2, r4
 80014cc:	07db      	lsls	r3, r3, #31
 80014ce:	431a      	orrs	r2, r3
 80014d0:	0028      	movs	r0, r5
 80014d2:	0011      	movs	r1, r2
 80014d4:	b007      	add	sp, #28
 80014d6:	bcf0      	pop	{r4, r5, r6, r7}
 80014d8:	46bb      	mov	fp, r7
 80014da:	46b2      	mov	sl, r6
 80014dc:	46a9      	mov	r9, r5
 80014de:	46a0      	mov	r8, r4
 80014e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e2:	2400      	movs	r4, #0
 80014e4:	2500      	movs	r5, #0
 80014e6:	4aaa      	ldr	r2, [pc, #680]	; (8001790 <__aeabi_dmul+0x38c>)
 80014e8:	e7ed      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80014ea:	0c28      	lsrs	r0, r5, #16
 80014ec:	042d      	lsls	r5, r5, #16
 80014ee:	0c2d      	lsrs	r5, r5, #16
 80014f0:	002b      	movs	r3, r5
 80014f2:	0c11      	lsrs	r1, r2, #16
 80014f4:	0412      	lsls	r2, r2, #16
 80014f6:	0c12      	lsrs	r2, r2, #16
 80014f8:	4353      	muls	r3, r2
 80014fa:	4698      	mov	r8, r3
 80014fc:	0013      	movs	r3, r2
 80014fe:	002f      	movs	r7, r5
 8001500:	4343      	muls	r3, r0
 8001502:	4699      	mov	r9, r3
 8001504:	434f      	muls	r7, r1
 8001506:	444f      	add	r7, r9
 8001508:	46bb      	mov	fp, r7
 800150a:	4647      	mov	r7, r8
 800150c:	000b      	movs	r3, r1
 800150e:	0c3f      	lsrs	r7, r7, #16
 8001510:	46ba      	mov	sl, r7
 8001512:	4343      	muls	r3, r0
 8001514:	44da      	add	sl, fp
 8001516:	9302      	str	r3, [sp, #8]
 8001518:	45d1      	cmp	r9, sl
 800151a:	d904      	bls.n	8001526 <__aeabi_dmul+0x122>
 800151c:	2780      	movs	r7, #128	; 0x80
 800151e:	027f      	lsls	r7, r7, #9
 8001520:	46b9      	mov	r9, r7
 8001522:	444b      	add	r3, r9
 8001524:	9302      	str	r3, [sp, #8]
 8001526:	4653      	mov	r3, sl
 8001528:	0c1b      	lsrs	r3, r3, #16
 800152a:	469b      	mov	fp, r3
 800152c:	4653      	mov	r3, sl
 800152e:	041f      	lsls	r7, r3, #16
 8001530:	4643      	mov	r3, r8
 8001532:	041b      	lsls	r3, r3, #16
 8001534:	0c1b      	lsrs	r3, r3, #16
 8001536:	4698      	mov	r8, r3
 8001538:	003b      	movs	r3, r7
 800153a:	4443      	add	r3, r8
 800153c:	9304      	str	r3, [sp, #16]
 800153e:	0c33      	lsrs	r3, r6, #16
 8001540:	0436      	lsls	r6, r6, #16
 8001542:	0c36      	lsrs	r6, r6, #16
 8001544:	4698      	mov	r8, r3
 8001546:	0033      	movs	r3, r6
 8001548:	4343      	muls	r3, r0
 800154a:	4699      	mov	r9, r3
 800154c:	4643      	mov	r3, r8
 800154e:	4343      	muls	r3, r0
 8001550:	002f      	movs	r7, r5
 8001552:	469a      	mov	sl, r3
 8001554:	4643      	mov	r3, r8
 8001556:	4377      	muls	r7, r6
 8001558:	435d      	muls	r5, r3
 800155a:	0c38      	lsrs	r0, r7, #16
 800155c:	444d      	add	r5, r9
 800155e:	1945      	adds	r5, r0, r5
 8001560:	45a9      	cmp	r9, r5
 8001562:	d903      	bls.n	800156c <__aeabi_dmul+0x168>
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	025b      	lsls	r3, r3, #9
 8001568:	4699      	mov	r9, r3
 800156a:	44ca      	add	sl, r9
 800156c:	043f      	lsls	r7, r7, #16
 800156e:	0c28      	lsrs	r0, r5, #16
 8001570:	0c3f      	lsrs	r7, r7, #16
 8001572:	042d      	lsls	r5, r5, #16
 8001574:	19ed      	adds	r5, r5, r7
 8001576:	0c27      	lsrs	r7, r4, #16
 8001578:	0424      	lsls	r4, r4, #16
 800157a:	0c24      	lsrs	r4, r4, #16
 800157c:	0003      	movs	r3, r0
 800157e:	0020      	movs	r0, r4
 8001580:	4350      	muls	r0, r2
 8001582:	437a      	muls	r2, r7
 8001584:	4691      	mov	r9, r2
 8001586:	003a      	movs	r2, r7
 8001588:	4453      	add	r3, sl
 800158a:	9305      	str	r3, [sp, #20]
 800158c:	0c03      	lsrs	r3, r0, #16
 800158e:	469a      	mov	sl, r3
 8001590:	434a      	muls	r2, r1
 8001592:	4361      	muls	r1, r4
 8001594:	4449      	add	r1, r9
 8001596:	4451      	add	r1, sl
 8001598:	44ab      	add	fp, r5
 800159a:	4589      	cmp	r9, r1
 800159c:	d903      	bls.n	80015a6 <__aeabi_dmul+0x1a2>
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	025b      	lsls	r3, r3, #9
 80015a2:	4699      	mov	r9, r3
 80015a4:	444a      	add	r2, r9
 80015a6:	0400      	lsls	r0, r0, #16
 80015a8:	0c0b      	lsrs	r3, r1, #16
 80015aa:	0c00      	lsrs	r0, r0, #16
 80015ac:	0409      	lsls	r1, r1, #16
 80015ae:	1809      	adds	r1, r1, r0
 80015b0:	0020      	movs	r0, r4
 80015b2:	4699      	mov	r9, r3
 80015b4:	4643      	mov	r3, r8
 80015b6:	4370      	muls	r0, r6
 80015b8:	435c      	muls	r4, r3
 80015ba:	437e      	muls	r6, r7
 80015bc:	435f      	muls	r7, r3
 80015be:	0c03      	lsrs	r3, r0, #16
 80015c0:	4698      	mov	r8, r3
 80015c2:	19a4      	adds	r4, r4, r6
 80015c4:	4444      	add	r4, r8
 80015c6:	444a      	add	r2, r9
 80015c8:	9703      	str	r7, [sp, #12]
 80015ca:	42a6      	cmp	r6, r4
 80015cc:	d904      	bls.n	80015d8 <__aeabi_dmul+0x1d4>
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	025b      	lsls	r3, r3, #9
 80015d2:	4698      	mov	r8, r3
 80015d4:	4447      	add	r7, r8
 80015d6:	9703      	str	r7, [sp, #12]
 80015d8:	0423      	lsls	r3, r4, #16
 80015da:	9e02      	ldr	r6, [sp, #8]
 80015dc:	469a      	mov	sl, r3
 80015de:	9b05      	ldr	r3, [sp, #20]
 80015e0:	445e      	add	r6, fp
 80015e2:	4698      	mov	r8, r3
 80015e4:	42ae      	cmp	r6, r5
 80015e6:	41ad      	sbcs	r5, r5
 80015e8:	1876      	adds	r6, r6, r1
 80015ea:	428e      	cmp	r6, r1
 80015ec:	4189      	sbcs	r1, r1
 80015ee:	0400      	lsls	r0, r0, #16
 80015f0:	0c00      	lsrs	r0, r0, #16
 80015f2:	4450      	add	r0, sl
 80015f4:	4440      	add	r0, r8
 80015f6:	426d      	negs	r5, r5
 80015f8:	1947      	adds	r7, r0, r5
 80015fa:	46b8      	mov	r8, r7
 80015fc:	4693      	mov	fp, r2
 80015fe:	4249      	negs	r1, r1
 8001600:	4689      	mov	r9, r1
 8001602:	44c3      	add	fp, r8
 8001604:	44d9      	add	r9, fp
 8001606:	4298      	cmp	r0, r3
 8001608:	4180      	sbcs	r0, r0
 800160a:	45a8      	cmp	r8, r5
 800160c:	41ad      	sbcs	r5, r5
 800160e:	4593      	cmp	fp, r2
 8001610:	4192      	sbcs	r2, r2
 8001612:	4589      	cmp	r9, r1
 8001614:	4189      	sbcs	r1, r1
 8001616:	426d      	negs	r5, r5
 8001618:	4240      	negs	r0, r0
 800161a:	4328      	orrs	r0, r5
 800161c:	0c24      	lsrs	r4, r4, #16
 800161e:	4252      	negs	r2, r2
 8001620:	4249      	negs	r1, r1
 8001622:	430a      	orrs	r2, r1
 8001624:	9b03      	ldr	r3, [sp, #12]
 8001626:	1900      	adds	r0, r0, r4
 8001628:	1880      	adds	r0, r0, r2
 800162a:	18c7      	adds	r7, r0, r3
 800162c:	464b      	mov	r3, r9
 800162e:	0ddc      	lsrs	r4, r3, #23
 8001630:	9b04      	ldr	r3, [sp, #16]
 8001632:	0275      	lsls	r5, r6, #9
 8001634:	431d      	orrs	r5, r3
 8001636:	1e6a      	subs	r2, r5, #1
 8001638:	4195      	sbcs	r5, r2
 800163a:	464b      	mov	r3, r9
 800163c:	0df6      	lsrs	r6, r6, #23
 800163e:	027f      	lsls	r7, r7, #9
 8001640:	4335      	orrs	r5, r6
 8001642:	025a      	lsls	r2, r3, #9
 8001644:	433c      	orrs	r4, r7
 8001646:	4315      	orrs	r5, r2
 8001648:	01fb      	lsls	r3, r7, #7
 800164a:	d400      	bmi.n	800164e <__aeabi_dmul+0x24a>
 800164c:	e11c      	b.n	8001888 <__aeabi_dmul+0x484>
 800164e:	2101      	movs	r1, #1
 8001650:	086a      	lsrs	r2, r5, #1
 8001652:	400d      	ands	r5, r1
 8001654:	4315      	orrs	r5, r2
 8001656:	07e2      	lsls	r2, r4, #31
 8001658:	4315      	orrs	r5, r2
 800165a:	0864      	lsrs	r4, r4, #1
 800165c:	494f      	ldr	r1, [pc, #316]	; (800179c <__aeabi_dmul+0x398>)
 800165e:	4461      	add	r1, ip
 8001660:	2900      	cmp	r1, #0
 8001662:	dc00      	bgt.n	8001666 <__aeabi_dmul+0x262>
 8001664:	e0b0      	b.n	80017c8 <__aeabi_dmul+0x3c4>
 8001666:	076b      	lsls	r3, r5, #29
 8001668:	d009      	beq.n	800167e <__aeabi_dmul+0x27a>
 800166a:	220f      	movs	r2, #15
 800166c:	402a      	ands	r2, r5
 800166e:	2a04      	cmp	r2, #4
 8001670:	d005      	beq.n	800167e <__aeabi_dmul+0x27a>
 8001672:	1d2a      	adds	r2, r5, #4
 8001674:	42aa      	cmp	r2, r5
 8001676:	41ad      	sbcs	r5, r5
 8001678:	426d      	negs	r5, r5
 800167a:	1964      	adds	r4, r4, r5
 800167c:	0015      	movs	r5, r2
 800167e:	01e3      	lsls	r3, r4, #7
 8001680:	d504      	bpl.n	800168c <__aeabi_dmul+0x288>
 8001682:	2180      	movs	r1, #128	; 0x80
 8001684:	4a46      	ldr	r2, [pc, #280]	; (80017a0 <__aeabi_dmul+0x39c>)
 8001686:	00c9      	lsls	r1, r1, #3
 8001688:	4014      	ands	r4, r2
 800168a:	4461      	add	r1, ip
 800168c:	4a45      	ldr	r2, [pc, #276]	; (80017a4 <__aeabi_dmul+0x3a0>)
 800168e:	4291      	cmp	r1, r2
 8001690:	dd00      	ble.n	8001694 <__aeabi_dmul+0x290>
 8001692:	e726      	b.n	80014e2 <__aeabi_dmul+0xde>
 8001694:	0762      	lsls	r2, r4, #29
 8001696:	08ed      	lsrs	r5, r5, #3
 8001698:	0264      	lsls	r4, r4, #9
 800169a:	0549      	lsls	r1, r1, #21
 800169c:	4315      	orrs	r5, r2
 800169e:	0b24      	lsrs	r4, r4, #12
 80016a0:	0d4a      	lsrs	r2, r1, #21
 80016a2:	e710      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80016a4:	4652      	mov	r2, sl
 80016a6:	4332      	orrs	r2, r6
 80016a8:	d100      	bne.n	80016ac <__aeabi_dmul+0x2a8>
 80016aa:	e07f      	b.n	80017ac <__aeabi_dmul+0x3a8>
 80016ac:	2e00      	cmp	r6, #0
 80016ae:	d100      	bne.n	80016b2 <__aeabi_dmul+0x2ae>
 80016b0:	e0dc      	b.n	800186c <__aeabi_dmul+0x468>
 80016b2:	0030      	movs	r0, r6
 80016b4:	f000 fdd6 	bl	8002264 <__clzsi2>
 80016b8:	0002      	movs	r2, r0
 80016ba:	3a0b      	subs	r2, #11
 80016bc:	231d      	movs	r3, #29
 80016be:	0001      	movs	r1, r0
 80016c0:	1a9b      	subs	r3, r3, r2
 80016c2:	4652      	mov	r2, sl
 80016c4:	3908      	subs	r1, #8
 80016c6:	40da      	lsrs	r2, r3
 80016c8:	408e      	lsls	r6, r1
 80016ca:	4316      	orrs	r6, r2
 80016cc:	4652      	mov	r2, sl
 80016ce:	408a      	lsls	r2, r1
 80016d0:	9b00      	ldr	r3, [sp, #0]
 80016d2:	4935      	ldr	r1, [pc, #212]	; (80017a8 <__aeabi_dmul+0x3a4>)
 80016d4:	1a18      	subs	r0, r3, r0
 80016d6:	0003      	movs	r3, r0
 80016d8:	468c      	mov	ip, r1
 80016da:	4463      	add	r3, ip
 80016dc:	2000      	movs	r0, #0
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	e6d3      	b.n	800148a <__aeabi_dmul+0x86>
 80016e2:	0025      	movs	r5, r4
 80016e4:	4305      	orrs	r5, r0
 80016e6:	d04a      	beq.n	800177e <__aeabi_dmul+0x37a>
 80016e8:	2c00      	cmp	r4, #0
 80016ea:	d100      	bne.n	80016ee <__aeabi_dmul+0x2ea>
 80016ec:	e0b0      	b.n	8001850 <__aeabi_dmul+0x44c>
 80016ee:	0020      	movs	r0, r4
 80016f0:	f000 fdb8 	bl	8002264 <__clzsi2>
 80016f4:	0001      	movs	r1, r0
 80016f6:	0002      	movs	r2, r0
 80016f8:	390b      	subs	r1, #11
 80016fa:	231d      	movs	r3, #29
 80016fc:	0010      	movs	r0, r2
 80016fe:	1a5b      	subs	r3, r3, r1
 8001700:	0031      	movs	r1, r6
 8001702:	0035      	movs	r5, r6
 8001704:	3808      	subs	r0, #8
 8001706:	4084      	lsls	r4, r0
 8001708:	40d9      	lsrs	r1, r3
 800170a:	4085      	lsls	r5, r0
 800170c:	430c      	orrs	r4, r1
 800170e:	4826      	ldr	r0, [pc, #152]	; (80017a8 <__aeabi_dmul+0x3a4>)
 8001710:	1a83      	subs	r3, r0, r2
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	2300      	movs	r3, #0
 8001716:	4699      	mov	r9, r3
 8001718:	469b      	mov	fp, r3
 800171a:	e697      	b.n	800144c <__aeabi_dmul+0x48>
 800171c:	0005      	movs	r5, r0
 800171e:	4325      	orrs	r5, r4
 8001720:	d126      	bne.n	8001770 <__aeabi_dmul+0x36c>
 8001722:	2208      	movs	r2, #8
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	2302      	movs	r3, #2
 8001728:	2400      	movs	r4, #0
 800172a:	4691      	mov	r9, r2
 800172c:	469b      	mov	fp, r3
 800172e:	e68d      	b.n	800144c <__aeabi_dmul+0x48>
 8001730:	4652      	mov	r2, sl
 8001732:	9b00      	ldr	r3, [sp, #0]
 8001734:	4332      	orrs	r2, r6
 8001736:	d110      	bne.n	800175a <__aeabi_dmul+0x356>
 8001738:	4915      	ldr	r1, [pc, #84]	; (8001790 <__aeabi_dmul+0x38c>)
 800173a:	2600      	movs	r6, #0
 800173c:	468c      	mov	ip, r1
 800173e:	4463      	add	r3, ip
 8001740:	4649      	mov	r1, r9
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	2302      	movs	r3, #2
 8001746:	4319      	orrs	r1, r3
 8001748:	4689      	mov	r9, r1
 800174a:	2002      	movs	r0, #2
 800174c:	e69d      	b.n	800148a <__aeabi_dmul+0x86>
 800174e:	465b      	mov	r3, fp
 8001750:	9701      	str	r7, [sp, #4]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d000      	beq.n	8001758 <__aeabi_dmul+0x354>
 8001756:	e6ad      	b.n	80014b4 <__aeabi_dmul+0xb0>
 8001758:	e6c3      	b.n	80014e2 <__aeabi_dmul+0xde>
 800175a:	4a0d      	ldr	r2, [pc, #52]	; (8001790 <__aeabi_dmul+0x38c>)
 800175c:	2003      	movs	r0, #3
 800175e:	4694      	mov	ip, r2
 8001760:	4463      	add	r3, ip
 8001762:	464a      	mov	r2, r9
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	2303      	movs	r3, #3
 8001768:	431a      	orrs	r2, r3
 800176a:	4691      	mov	r9, r2
 800176c:	4652      	mov	r2, sl
 800176e:	e68c      	b.n	800148a <__aeabi_dmul+0x86>
 8001770:	220c      	movs	r2, #12
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	2303      	movs	r3, #3
 8001776:	0005      	movs	r5, r0
 8001778:	4691      	mov	r9, r2
 800177a:	469b      	mov	fp, r3
 800177c:	e666      	b.n	800144c <__aeabi_dmul+0x48>
 800177e:	2304      	movs	r3, #4
 8001780:	4699      	mov	r9, r3
 8001782:	2300      	movs	r3, #0
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	3301      	adds	r3, #1
 8001788:	2400      	movs	r4, #0
 800178a:	469b      	mov	fp, r3
 800178c:	e65e      	b.n	800144c <__aeabi_dmul+0x48>
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	000007ff 	.word	0x000007ff
 8001794:	fffffc01 	.word	0xfffffc01
 8001798:	0800a0a8 	.word	0x0800a0a8
 800179c:	000003ff 	.word	0x000003ff
 80017a0:	feffffff 	.word	0xfeffffff
 80017a4:	000007fe 	.word	0x000007fe
 80017a8:	fffffc0d 	.word	0xfffffc0d
 80017ac:	4649      	mov	r1, r9
 80017ae:	2301      	movs	r3, #1
 80017b0:	4319      	orrs	r1, r3
 80017b2:	4689      	mov	r9, r1
 80017b4:	2600      	movs	r6, #0
 80017b6:	2001      	movs	r0, #1
 80017b8:	e667      	b.n	800148a <__aeabi_dmul+0x86>
 80017ba:	2300      	movs	r3, #0
 80017bc:	2480      	movs	r4, #128	; 0x80
 80017be:	2500      	movs	r5, #0
 80017c0:	4a43      	ldr	r2, [pc, #268]	; (80018d0 <__aeabi_dmul+0x4cc>)
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	0324      	lsls	r4, r4, #12
 80017c6:	e67e      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80017c8:	2001      	movs	r0, #1
 80017ca:	1a40      	subs	r0, r0, r1
 80017cc:	2838      	cmp	r0, #56	; 0x38
 80017ce:	dd00      	ble.n	80017d2 <__aeabi_dmul+0x3ce>
 80017d0:	e676      	b.n	80014c0 <__aeabi_dmul+0xbc>
 80017d2:	281f      	cmp	r0, #31
 80017d4:	dd5b      	ble.n	800188e <__aeabi_dmul+0x48a>
 80017d6:	221f      	movs	r2, #31
 80017d8:	0023      	movs	r3, r4
 80017da:	4252      	negs	r2, r2
 80017dc:	1a51      	subs	r1, r2, r1
 80017de:	40cb      	lsrs	r3, r1
 80017e0:	0019      	movs	r1, r3
 80017e2:	2820      	cmp	r0, #32
 80017e4:	d003      	beq.n	80017ee <__aeabi_dmul+0x3ea>
 80017e6:	4a3b      	ldr	r2, [pc, #236]	; (80018d4 <__aeabi_dmul+0x4d0>)
 80017e8:	4462      	add	r2, ip
 80017ea:	4094      	lsls	r4, r2
 80017ec:	4325      	orrs	r5, r4
 80017ee:	1e6a      	subs	r2, r5, #1
 80017f0:	4195      	sbcs	r5, r2
 80017f2:	002a      	movs	r2, r5
 80017f4:	430a      	orrs	r2, r1
 80017f6:	2107      	movs	r1, #7
 80017f8:	000d      	movs	r5, r1
 80017fa:	2400      	movs	r4, #0
 80017fc:	4015      	ands	r5, r2
 80017fe:	4211      	tst	r1, r2
 8001800:	d05b      	beq.n	80018ba <__aeabi_dmul+0x4b6>
 8001802:	210f      	movs	r1, #15
 8001804:	2400      	movs	r4, #0
 8001806:	4011      	ands	r1, r2
 8001808:	2904      	cmp	r1, #4
 800180a:	d053      	beq.n	80018b4 <__aeabi_dmul+0x4b0>
 800180c:	1d11      	adds	r1, r2, #4
 800180e:	4291      	cmp	r1, r2
 8001810:	4192      	sbcs	r2, r2
 8001812:	4252      	negs	r2, r2
 8001814:	18a4      	adds	r4, r4, r2
 8001816:	000a      	movs	r2, r1
 8001818:	0223      	lsls	r3, r4, #8
 800181a:	d54b      	bpl.n	80018b4 <__aeabi_dmul+0x4b0>
 800181c:	2201      	movs	r2, #1
 800181e:	2400      	movs	r4, #0
 8001820:	2500      	movs	r5, #0
 8001822:	e650      	b.n	80014c6 <__aeabi_dmul+0xc2>
 8001824:	2380      	movs	r3, #128	; 0x80
 8001826:	031b      	lsls	r3, r3, #12
 8001828:	421c      	tst	r4, r3
 800182a:	d009      	beq.n	8001840 <__aeabi_dmul+0x43c>
 800182c:	421e      	tst	r6, r3
 800182e:	d107      	bne.n	8001840 <__aeabi_dmul+0x43c>
 8001830:	4333      	orrs	r3, r6
 8001832:	031c      	lsls	r4, r3, #12
 8001834:	4643      	mov	r3, r8
 8001836:	0015      	movs	r5, r2
 8001838:	0b24      	lsrs	r4, r4, #12
 800183a:	4a25      	ldr	r2, [pc, #148]	; (80018d0 <__aeabi_dmul+0x4cc>)
 800183c:	9301      	str	r3, [sp, #4]
 800183e:	e642      	b.n	80014c6 <__aeabi_dmul+0xc2>
 8001840:	2280      	movs	r2, #128	; 0x80
 8001842:	0312      	lsls	r2, r2, #12
 8001844:	4314      	orrs	r4, r2
 8001846:	0324      	lsls	r4, r4, #12
 8001848:	4a21      	ldr	r2, [pc, #132]	; (80018d0 <__aeabi_dmul+0x4cc>)
 800184a:	0b24      	lsrs	r4, r4, #12
 800184c:	9701      	str	r7, [sp, #4]
 800184e:	e63a      	b.n	80014c6 <__aeabi_dmul+0xc2>
 8001850:	f000 fd08 	bl	8002264 <__clzsi2>
 8001854:	0001      	movs	r1, r0
 8001856:	0002      	movs	r2, r0
 8001858:	3115      	adds	r1, #21
 800185a:	3220      	adds	r2, #32
 800185c:	291c      	cmp	r1, #28
 800185e:	dc00      	bgt.n	8001862 <__aeabi_dmul+0x45e>
 8001860:	e74b      	b.n	80016fa <__aeabi_dmul+0x2f6>
 8001862:	0034      	movs	r4, r6
 8001864:	3808      	subs	r0, #8
 8001866:	2500      	movs	r5, #0
 8001868:	4084      	lsls	r4, r0
 800186a:	e750      	b.n	800170e <__aeabi_dmul+0x30a>
 800186c:	f000 fcfa 	bl	8002264 <__clzsi2>
 8001870:	0003      	movs	r3, r0
 8001872:	001a      	movs	r2, r3
 8001874:	3215      	adds	r2, #21
 8001876:	3020      	adds	r0, #32
 8001878:	2a1c      	cmp	r2, #28
 800187a:	dc00      	bgt.n	800187e <__aeabi_dmul+0x47a>
 800187c:	e71e      	b.n	80016bc <__aeabi_dmul+0x2b8>
 800187e:	4656      	mov	r6, sl
 8001880:	3b08      	subs	r3, #8
 8001882:	2200      	movs	r2, #0
 8001884:	409e      	lsls	r6, r3
 8001886:	e723      	b.n	80016d0 <__aeabi_dmul+0x2cc>
 8001888:	9b00      	ldr	r3, [sp, #0]
 800188a:	469c      	mov	ip, r3
 800188c:	e6e6      	b.n	800165c <__aeabi_dmul+0x258>
 800188e:	4912      	ldr	r1, [pc, #72]	; (80018d8 <__aeabi_dmul+0x4d4>)
 8001890:	0022      	movs	r2, r4
 8001892:	4461      	add	r1, ip
 8001894:	002e      	movs	r6, r5
 8001896:	408d      	lsls	r5, r1
 8001898:	408a      	lsls	r2, r1
 800189a:	40c6      	lsrs	r6, r0
 800189c:	1e69      	subs	r1, r5, #1
 800189e:	418d      	sbcs	r5, r1
 80018a0:	4332      	orrs	r2, r6
 80018a2:	432a      	orrs	r2, r5
 80018a4:	40c4      	lsrs	r4, r0
 80018a6:	0753      	lsls	r3, r2, #29
 80018a8:	d0b6      	beq.n	8001818 <__aeabi_dmul+0x414>
 80018aa:	210f      	movs	r1, #15
 80018ac:	4011      	ands	r1, r2
 80018ae:	2904      	cmp	r1, #4
 80018b0:	d1ac      	bne.n	800180c <__aeabi_dmul+0x408>
 80018b2:	e7b1      	b.n	8001818 <__aeabi_dmul+0x414>
 80018b4:	0765      	lsls	r5, r4, #29
 80018b6:	0264      	lsls	r4, r4, #9
 80018b8:	0b24      	lsrs	r4, r4, #12
 80018ba:	08d2      	lsrs	r2, r2, #3
 80018bc:	4315      	orrs	r5, r2
 80018be:	2200      	movs	r2, #0
 80018c0:	e601      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80018c2:	2280      	movs	r2, #128	; 0x80
 80018c4:	0312      	lsls	r2, r2, #12
 80018c6:	4314      	orrs	r4, r2
 80018c8:	0324      	lsls	r4, r4, #12
 80018ca:	4a01      	ldr	r2, [pc, #4]	; (80018d0 <__aeabi_dmul+0x4cc>)
 80018cc:	0b24      	lsrs	r4, r4, #12
 80018ce:	e5fa      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80018d0:	000007ff 	.word	0x000007ff
 80018d4:	0000043e 	.word	0x0000043e
 80018d8:	0000041e 	.word	0x0000041e

080018dc <__aeabi_dsub>:
 80018dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018de:	4657      	mov	r7, sl
 80018e0:	464e      	mov	r6, r9
 80018e2:	4645      	mov	r5, r8
 80018e4:	46de      	mov	lr, fp
 80018e6:	b5e0      	push	{r5, r6, r7, lr}
 80018e8:	001e      	movs	r6, r3
 80018ea:	0017      	movs	r7, r2
 80018ec:	004a      	lsls	r2, r1, #1
 80018ee:	030b      	lsls	r3, r1, #12
 80018f0:	0d52      	lsrs	r2, r2, #21
 80018f2:	0a5b      	lsrs	r3, r3, #9
 80018f4:	4690      	mov	r8, r2
 80018f6:	0f42      	lsrs	r2, r0, #29
 80018f8:	431a      	orrs	r2, r3
 80018fa:	0fcd      	lsrs	r5, r1, #31
 80018fc:	4ccd      	ldr	r4, [pc, #820]	; (8001c34 <__aeabi_dsub+0x358>)
 80018fe:	0331      	lsls	r1, r6, #12
 8001900:	00c3      	lsls	r3, r0, #3
 8001902:	4694      	mov	ip, r2
 8001904:	0070      	lsls	r0, r6, #1
 8001906:	0f7a      	lsrs	r2, r7, #29
 8001908:	0a49      	lsrs	r1, r1, #9
 800190a:	00ff      	lsls	r7, r7, #3
 800190c:	469a      	mov	sl, r3
 800190e:	46b9      	mov	r9, r7
 8001910:	0d40      	lsrs	r0, r0, #21
 8001912:	0ff6      	lsrs	r6, r6, #31
 8001914:	4311      	orrs	r1, r2
 8001916:	42a0      	cmp	r0, r4
 8001918:	d100      	bne.n	800191c <__aeabi_dsub+0x40>
 800191a:	e0b1      	b.n	8001a80 <__aeabi_dsub+0x1a4>
 800191c:	2201      	movs	r2, #1
 800191e:	4056      	eors	r6, r2
 8001920:	46b3      	mov	fp, r6
 8001922:	42b5      	cmp	r5, r6
 8001924:	d100      	bne.n	8001928 <__aeabi_dsub+0x4c>
 8001926:	e088      	b.n	8001a3a <__aeabi_dsub+0x15e>
 8001928:	4642      	mov	r2, r8
 800192a:	1a12      	subs	r2, r2, r0
 800192c:	2a00      	cmp	r2, #0
 800192e:	dc00      	bgt.n	8001932 <__aeabi_dsub+0x56>
 8001930:	e0ae      	b.n	8001a90 <__aeabi_dsub+0x1b4>
 8001932:	2800      	cmp	r0, #0
 8001934:	d100      	bne.n	8001938 <__aeabi_dsub+0x5c>
 8001936:	e0c1      	b.n	8001abc <__aeabi_dsub+0x1e0>
 8001938:	48be      	ldr	r0, [pc, #760]	; (8001c34 <__aeabi_dsub+0x358>)
 800193a:	4580      	cmp	r8, r0
 800193c:	d100      	bne.n	8001940 <__aeabi_dsub+0x64>
 800193e:	e151      	b.n	8001be4 <__aeabi_dsub+0x308>
 8001940:	2080      	movs	r0, #128	; 0x80
 8001942:	0400      	lsls	r0, r0, #16
 8001944:	4301      	orrs	r1, r0
 8001946:	2a38      	cmp	r2, #56	; 0x38
 8001948:	dd00      	ble.n	800194c <__aeabi_dsub+0x70>
 800194a:	e17b      	b.n	8001c44 <__aeabi_dsub+0x368>
 800194c:	2a1f      	cmp	r2, #31
 800194e:	dd00      	ble.n	8001952 <__aeabi_dsub+0x76>
 8001950:	e1ee      	b.n	8001d30 <__aeabi_dsub+0x454>
 8001952:	2020      	movs	r0, #32
 8001954:	003e      	movs	r6, r7
 8001956:	1a80      	subs	r0, r0, r2
 8001958:	000c      	movs	r4, r1
 800195a:	40d6      	lsrs	r6, r2
 800195c:	40d1      	lsrs	r1, r2
 800195e:	4087      	lsls	r7, r0
 8001960:	4662      	mov	r2, ip
 8001962:	4084      	lsls	r4, r0
 8001964:	1a52      	subs	r2, r2, r1
 8001966:	1e78      	subs	r0, r7, #1
 8001968:	4187      	sbcs	r7, r0
 800196a:	4694      	mov	ip, r2
 800196c:	4334      	orrs	r4, r6
 800196e:	4327      	orrs	r7, r4
 8001970:	1bdc      	subs	r4, r3, r7
 8001972:	42a3      	cmp	r3, r4
 8001974:	419b      	sbcs	r3, r3
 8001976:	4662      	mov	r2, ip
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	4699      	mov	r9, r3
 800197e:	464b      	mov	r3, r9
 8001980:	021b      	lsls	r3, r3, #8
 8001982:	d400      	bmi.n	8001986 <__aeabi_dsub+0xaa>
 8001984:	e118      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001986:	464b      	mov	r3, r9
 8001988:	0258      	lsls	r0, r3, #9
 800198a:	0a43      	lsrs	r3, r0, #9
 800198c:	4699      	mov	r9, r3
 800198e:	464b      	mov	r3, r9
 8001990:	2b00      	cmp	r3, #0
 8001992:	d100      	bne.n	8001996 <__aeabi_dsub+0xba>
 8001994:	e137      	b.n	8001c06 <__aeabi_dsub+0x32a>
 8001996:	4648      	mov	r0, r9
 8001998:	f000 fc64 	bl	8002264 <__clzsi2>
 800199c:	0001      	movs	r1, r0
 800199e:	3908      	subs	r1, #8
 80019a0:	2320      	movs	r3, #32
 80019a2:	0022      	movs	r2, r4
 80019a4:	4648      	mov	r0, r9
 80019a6:	1a5b      	subs	r3, r3, r1
 80019a8:	40da      	lsrs	r2, r3
 80019aa:	4088      	lsls	r0, r1
 80019ac:	408c      	lsls	r4, r1
 80019ae:	4643      	mov	r3, r8
 80019b0:	4310      	orrs	r0, r2
 80019b2:	4588      	cmp	r8, r1
 80019b4:	dd00      	ble.n	80019b8 <__aeabi_dsub+0xdc>
 80019b6:	e136      	b.n	8001c26 <__aeabi_dsub+0x34a>
 80019b8:	1ac9      	subs	r1, r1, r3
 80019ba:	1c4b      	adds	r3, r1, #1
 80019bc:	2b1f      	cmp	r3, #31
 80019be:	dd00      	ble.n	80019c2 <__aeabi_dsub+0xe6>
 80019c0:	e0ea      	b.n	8001b98 <__aeabi_dsub+0x2bc>
 80019c2:	2220      	movs	r2, #32
 80019c4:	0026      	movs	r6, r4
 80019c6:	1ad2      	subs	r2, r2, r3
 80019c8:	0001      	movs	r1, r0
 80019ca:	4094      	lsls	r4, r2
 80019cc:	40de      	lsrs	r6, r3
 80019ce:	40d8      	lsrs	r0, r3
 80019d0:	2300      	movs	r3, #0
 80019d2:	4091      	lsls	r1, r2
 80019d4:	1e62      	subs	r2, r4, #1
 80019d6:	4194      	sbcs	r4, r2
 80019d8:	4681      	mov	r9, r0
 80019da:	4698      	mov	r8, r3
 80019dc:	4331      	orrs	r1, r6
 80019de:	430c      	orrs	r4, r1
 80019e0:	0763      	lsls	r3, r4, #29
 80019e2:	d009      	beq.n	80019f8 <__aeabi_dsub+0x11c>
 80019e4:	230f      	movs	r3, #15
 80019e6:	4023      	ands	r3, r4
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d005      	beq.n	80019f8 <__aeabi_dsub+0x11c>
 80019ec:	1d23      	adds	r3, r4, #4
 80019ee:	42a3      	cmp	r3, r4
 80019f0:	41a4      	sbcs	r4, r4
 80019f2:	4264      	negs	r4, r4
 80019f4:	44a1      	add	r9, r4
 80019f6:	001c      	movs	r4, r3
 80019f8:	464b      	mov	r3, r9
 80019fa:	021b      	lsls	r3, r3, #8
 80019fc:	d400      	bmi.n	8001a00 <__aeabi_dsub+0x124>
 80019fe:	e0de      	b.n	8001bbe <__aeabi_dsub+0x2e2>
 8001a00:	4641      	mov	r1, r8
 8001a02:	4b8c      	ldr	r3, [pc, #560]	; (8001c34 <__aeabi_dsub+0x358>)
 8001a04:	3101      	adds	r1, #1
 8001a06:	4299      	cmp	r1, r3
 8001a08:	d100      	bne.n	8001a0c <__aeabi_dsub+0x130>
 8001a0a:	e0e7      	b.n	8001bdc <__aeabi_dsub+0x300>
 8001a0c:	464b      	mov	r3, r9
 8001a0e:	488a      	ldr	r0, [pc, #552]	; (8001c38 <__aeabi_dsub+0x35c>)
 8001a10:	08e4      	lsrs	r4, r4, #3
 8001a12:	4003      	ands	r3, r0
 8001a14:	0018      	movs	r0, r3
 8001a16:	0549      	lsls	r1, r1, #21
 8001a18:	075b      	lsls	r3, r3, #29
 8001a1a:	0240      	lsls	r0, r0, #9
 8001a1c:	4323      	orrs	r3, r4
 8001a1e:	0d4a      	lsrs	r2, r1, #21
 8001a20:	0b04      	lsrs	r4, r0, #12
 8001a22:	0512      	lsls	r2, r2, #20
 8001a24:	07ed      	lsls	r5, r5, #31
 8001a26:	4322      	orrs	r2, r4
 8001a28:	432a      	orrs	r2, r5
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	0011      	movs	r1, r2
 8001a2e:	bcf0      	pop	{r4, r5, r6, r7}
 8001a30:	46bb      	mov	fp, r7
 8001a32:	46b2      	mov	sl, r6
 8001a34:	46a9      	mov	r9, r5
 8001a36:	46a0      	mov	r8, r4
 8001a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a3a:	4642      	mov	r2, r8
 8001a3c:	1a12      	subs	r2, r2, r0
 8001a3e:	2a00      	cmp	r2, #0
 8001a40:	dd52      	ble.n	8001ae8 <__aeabi_dsub+0x20c>
 8001a42:	2800      	cmp	r0, #0
 8001a44:	d100      	bne.n	8001a48 <__aeabi_dsub+0x16c>
 8001a46:	e09c      	b.n	8001b82 <__aeabi_dsub+0x2a6>
 8001a48:	45a0      	cmp	r8, r4
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dsub+0x172>
 8001a4c:	e0ca      	b.n	8001be4 <__aeabi_dsub+0x308>
 8001a4e:	2080      	movs	r0, #128	; 0x80
 8001a50:	0400      	lsls	r0, r0, #16
 8001a52:	4301      	orrs	r1, r0
 8001a54:	2a38      	cmp	r2, #56	; 0x38
 8001a56:	dd00      	ble.n	8001a5a <__aeabi_dsub+0x17e>
 8001a58:	e149      	b.n	8001cee <__aeabi_dsub+0x412>
 8001a5a:	2a1f      	cmp	r2, #31
 8001a5c:	dc00      	bgt.n	8001a60 <__aeabi_dsub+0x184>
 8001a5e:	e197      	b.n	8001d90 <__aeabi_dsub+0x4b4>
 8001a60:	0010      	movs	r0, r2
 8001a62:	000e      	movs	r6, r1
 8001a64:	3820      	subs	r0, #32
 8001a66:	40c6      	lsrs	r6, r0
 8001a68:	2a20      	cmp	r2, #32
 8001a6a:	d004      	beq.n	8001a76 <__aeabi_dsub+0x19a>
 8001a6c:	2040      	movs	r0, #64	; 0x40
 8001a6e:	1a82      	subs	r2, r0, r2
 8001a70:	4091      	lsls	r1, r2
 8001a72:	430f      	orrs	r7, r1
 8001a74:	46b9      	mov	r9, r7
 8001a76:	464c      	mov	r4, r9
 8001a78:	1e62      	subs	r2, r4, #1
 8001a7a:	4194      	sbcs	r4, r2
 8001a7c:	4334      	orrs	r4, r6
 8001a7e:	e13a      	b.n	8001cf6 <__aeabi_dsub+0x41a>
 8001a80:	000a      	movs	r2, r1
 8001a82:	433a      	orrs	r2, r7
 8001a84:	d028      	beq.n	8001ad8 <__aeabi_dsub+0x1fc>
 8001a86:	46b3      	mov	fp, r6
 8001a88:	42b5      	cmp	r5, r6
 8001a8a:	d02b      	beq.n	8001ae4 <__aeabi_dsub+0x208>
 8001a8c:	4a6b      	ldr	r2, [pc, #428]	; (8001c3c <__aeabi_dsub+0x360>)
 8001a8e:	4442      	add	r2, r8
 8001a90:	2a00      	cmp	r2, #0
 8001a92:	d05d      	beq.n	8001b50 <__aeabi_dsub+0x274>
 8001a94:	4642      	mov	r2, r8
 8001a96:	4644      	mov	r4, r8
 8001a98:	1a82      	subs	r2, r0, r2
 8001a9a:	2c00      	cmp	r4, #0
 8001a9c:	d000      	beq.n	8001aa0 <__aeabi_dsub+0x1c4>
 8001a9e:	e0f5      	b.n	8001c8c <__aeabi_dsub+0x3b0>
 8001aa0:	4665      	mov	r5, ip
 8001aa2:	431d      	orrs	r5, r3
 8001aa4:	d100      	bne.n	8001aa8 <__aeabi_dsub+0x1cc>
 8001aa6:	e19c      	b.n	8001de2 <__aeabi_dsub+0x506>
 8001aa8:	1e55      	subs	r5, r2, #1
 8001aaa:	2a01      	cmp	r2, #1
 8001aac:	d100      	bne.n	8001ab0 <__aeabi_dsub+0x1d4>
 8001aae:	e1fb      	b.n	8001ea8 <__aeabi_dsub+0x5cc>
 8001ab0:	4c60      	ldr	r4, [pc, #384]	; (8001c34 <__aeabi_dsub+0x358>)
 8001ab2:	42a2      	cmp	r2, r4
 8001ab4:	d100      	bne.n	8001ab8 <__aeabi_dsub+0x1dc>
 8001ab6:	e1bd      	b.n	8001e34 <__aeabi_dsub+0x558>
 8001ab8:	002a      	movs	r2, r5
 8001aba:	e0f0      	b.n	8001c9e <__aeabi_dsub+0x3c2>
 8001abc:	0008      	movs	r0, r1
 8001abe:	4338      	orrs	r0, r7
 8001ac0:	d100      	bne.n	8001ac4 <__aeabi_dsub+0x1e8>
 8001ac2:	e0c3      	b.n	8001c4c <__aeabi_dsub+0x370>
 8001ac4:	1e50      	subs	r0, r2, #1
 8001ac6:	2a01      	cmp	r2, #1
 8001ac8:	d100      	bne.n	8001acc <__aeabi_dsub+0x1f0>
 8001aca:	e1a8      	b.n	8001e1e <__aeabi_dsub+0x542>
 8001acc:	4c59      	ldr	r4, [pc, #356]	; (8001c34 <__aeabi_dsub+0x358>)
 8001ace:	42a2      	cmp	r2, r4
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dsub+0x1f8>
 8001ad2:	e087      	b.n	8001be4 <__aeabi_dsub+0x308>
 8001ad4:	0002      	movs	r2, r0
 8001ad6:	e736      	b.n	8001946 <__aeabi_dsub+0x6a>
 8001ad8:	2201      	movs	r2, #1
 8001ada:	4056      	eors	r6, r2
 8001adc:	46b3      	mov	fp, r6
 8001ade:	42b5      	cmp	r5, r6
 8001ae0:	d000      	beq.n	8001ae4 <__aeabi_dsub+0x208>
 8001ae2:	e721      	b.n	8001928 <__aeabi_dsub+0x4c>
 8001ae4:	4a55      	ldr	r2, [pc, #340]	; (8001c3c <__aeabi_dsub+0x360>)
 8001ae6:	4442      	add	r2, r8
 8001ae8:	2a00      	cmp	r2, #0
 8001aea:	d100      	bne.n	8001aee <__aeabi_dsub+0x212>
 8001aec:	e0b5      	b.n	8001c5a <__aeabi_dsub+0x37e>
 8001aee:	4642      	mov	r2, r8
 8001af0:	4644      	mov	r4, r8
 8001af2:	1a82      	subs	r2, r0, r2
 8001af4:	2c00      	cmp	r4, #0
 8001af6:	d100      	bne.n	8001afa <__aeabi_dsub+0x21e>
 8001af8:	e138      	b.n	8001d6c <__aeabi_dsub+0x490>
 8001afa:	4e4e      	ldr	r6, [pc, #312]	; (8001c34 <__aeabi_dsub+0x358>)
 8001afc:	42b0      	cmp	r0, r6
 8001afe:	d100      	bne.n	8001b02 <__aeabi_dsub+0x226>
 8001b00:	e1de      	b.n	8001ec0 <__aeabi_dsub+0x5e4>
 8001b02:	2680      	movs	r6, #128	; 0x80
 8001b04:	4664      	mov	r4, ip
 8001b06:	0436      	lsls	r6, r6, #16
 8001b08:	4334      	orrs	r4, r6
 8001b0a:	46a4      	mov	ip, r4
 8001b0c:	2a38      	cmp	r2, #56	; 0x38
 8001b0e:	dd00      	ble.n	8001b12 <__aeabi_dsub+0x236>
 8001b10:	e196      	b.n	8001e40 <__aeabi_dsub+0x564>
 8001b12:	2a1f      	cmp	r2, #31
 8001b14:	dd00      	ble.n	8001b18 <__aeabi_dsub+0x23c>
 8001b16:	e224      	b.n	8001f62 <__aeabi_dsub+0x686>
 8001b18:	2620      	movs	r6, #32
 8001b1a:	1ab4      	subs	r4, r6, r2
 8001b1c:	46a2      	mov	sl, r4
 8001b1e:	4664      	mov	r4, ip
 8001b20:	4656      	mov	r6, sl
 8001b22:	40b4      	lsls	r4, r6
 8001b24:	46a1      	mov	r9, r4
 8001b26:	001c      	movs	r4, r3
 8001b28:	464e      	mov	r6, r9
 8001b2a:	40d4      	lsrs	r4, r2
 8001b2c:	4326      	orrs	r6, r4
 8001b2e:	0034      	movs	r4, r6
 8001b30:	4656      	mov	r6, sl
 8001b32:	40b3      	lsls	r3, r6
 8001b34:	1e5e      	subs	r6, r3, #1
 8001b36:	41b3      	sbcs	r3, r6
 8001b38:	431c      	orrs	r4, r3
 8001b3a:	4663      	mov	r3, ip
 8001b3c:	40d3      	lsrs	r3, r2
 8001b3e:	18c9      	adds	r1, r1, r3
 8001b40:	19e4      	adds	r4, r4, r7
 8001b42:	42bc      	cmp	r4, r7
 8001b44:	41bf      	sbcs	r7, r7
 8001b46:	427f      	negs	r7, r7
 8001b48:	46b9      	mov	r9, r7
 8001b4a:	4680      	mov	r8, r0
 8001b4c:	4489      	add	r9, r1
 8001b4e:	e0d8      	b.n	8001d02 <__aeabi_dsub+0x426>
 8001b50:	4640      	mov	r0, r8
 8001b52:	4c3b      	ldr	r4, [pc, #236]	; (8001c40 <__aeabi_dsub+0x364>)
 8001b54:	3001      	adds	r0, #1
 8001b56:	4220      	tst	r0, r4
 8001b58:	d000      	beq.n	8001b5c <__aeabi_dsub+0x280>
 8001b5a:	e0b4      	b.n	8001cc6 <__aeabi_dsub+0x3ea>
 8001b5c:	4640      	mov	r0, r8
 8001b5e:	2800      	cmp	r0, #0
 8001b60:	d000      	beq.n	8001b64 <__aeabi_dsub+0x288>
 8001b62:	e144      	b.n	8001dee <__aeabi_dsub+0x512>
 8001b64:	4660      	mov	r0, ip
 8001b66:	4318      	orrs	r0, r3
 8001b68:	d100      	bne.n	8001b6c <__aeabi_dsub+0x290>
 8001b6a:	e190      	b.n	8001e8e <__aeabi_dsub+0x5b2>
 8001b6c:	0008      	movs	r0, r1
 8001b6e:	4338      	orrs	r0, r7
 8001b70:	d000      	beq.n	8001b74 <__aeabi_dsub+0x298>
 8001b72:	e1aa      	b.n	8001eca <__aeabi_dsub+0x5ee>
 8001b74:	4661      	mov	r1, ip
 8001b76:	08db      	lsrs	r3, r3, #3
 8001b78:	0749      	lsls	r1, r1, #29
 8001b7a:	430b      	orrs	r3, r1
 8001b7c:	4661      	mov	r1, ip
 8001b7e:	08cc      	lsrs	r4, r1, #3
 8001b80:	e027      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001b82:	0008      	movs	r0, r1
 8001b84:	4338      	orrs	r0, r7
 8001b86:	d061      	beq.n	8001c4c <__aeabi_dsub+0x370>
 8001b88:	1e50      	subs	r0, r2, #1
 8001b8a:	2a01      	cmp	r2, #1
 8001b8c:	d100      	bne.n	8001b90 <__aeabi_dsub+0x2b4>
 8001b8e:	e139      	b.n	8001e04 <__aeabi_dsub+0x528>
 8001b90:	42a2      	cmp	r2, r4
 8001b92:	d027      	beq.n	8001be4 <__aeabi_dsub+0x308>
 8001b94:	0002      	movs	r2, r0
 8001b96:	e75d      	b.n	8001a54 <__aeabi_dsub+0x178>
 8001b98:	0002      	movs	r2, r0
 8001b9a:	391f      	subs	r1, #31
 8001b9c:	40ca      	lsrs	r2, r1
 8001b9e:	0011      	movs	r1, r2
 8001ba0:	2b20      	cmp	r3, #32
 8001ba2:	d003      	beq.n	8001bac <__aeabi_dsub+0x2d0>
 8001ba4:	2240      	movs	r2, #64	; 0x40
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	4098      	lsls	r0, r3
 8001baa:	4304      	orrs	r4, r0
 8001bac:	1e63      	subs	r3, r4, #1
 8001bae:	419c      	sbcs	r4, r3
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	4699      	mov	r9, r3
 8001bb4:	4698      	mov	r8, r3
 8001bb6:	430c      	orrs	r4, r1
 8001bb8:	0763      	lsls	r3, r4, #29
 8001bba:	d000      	beq.n	8001bbe <__aeabi_dsub+0x2e2>
 8001bbc:	e712      	b.n	80019e4 <__aeabi_dsub+0x108>
 8001bbe:	464b      	mov	r3, r9
 8001bc0:	464a      	mov	r2, r9
 8001bc2:	08e4      	lsrs	r4, r4, #3
 8001bc4:	075b      	lsls	r3, r3, #29
 8001bc6:	4323      	orrs	r3, r4
 8001bc8:	08d4      	lsrs	r4, r2, #3
 8001bca:	4642      	mov	r2, r8
 8001bcc:	4919      	ldr	r1, [pc, #100]	; (8001c34 <__aeabi_dsub+0x358>)
 8001bce:	428a      	cmp	r2, r1
 8001bd0:	d00e      	beq.n	8001bf0 <__aeabi_dsub+0x314>
 8001bd2:	0324      	lsls	r4, r4, #12
 8001bd4:	0552      	lsls	r2, r2, #21
 8001bd6:	0b24      	lsrs	r4, r4, #12
 8001bd8:	0d52      	lsrs	r2, r2, #21
 8001bda:	e722      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001bdc:	000a      	movs	r2, r1
 8001bde:	2400      	movs	r4, #0
 8001be0:	2300      	movs	r3, #0
 8001be2:	e71e      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001be4:	08db      	lsrs	r3, r3, #3
 8001be6:	4662      	mov	r2, ip
 8001be8:	0752      	lsls	r2, r2, #29
 8001bea:	4313      	orrs	r3, r2
 8001bec:	4662      	mov	r2, ip
 8001bee:	08d4      	lsrs	r4, r2, #3
 8001bf0:	001a      	movs	r2, r3
 8001bf2:	4322      	orrs	r2, r4
 8001bf4:	d100      	bne.n	8001bf8 <__aeabi_dsub+0x31c>
 8001bf6:	e1fc      	b.n	8001ff2 <__aeabi_dsub+0x716>
 8001bf8:	2280      	movs	r2, #128	; 0x80
 8001bfa:	0312      	lsls	r2, r2, #12
 8001bfc:	4314      	orrs	r4, r2
 8001bfe:	0324      	lsls	r4, r4, #12
 8001c00:	4a0c      	ldr	r2, [pc, #48]	; (8001c34 <__aeabi_dsub+0x358>)
 8001c02:	0b24      	lsrs	r4, r4, #12
 8001c04:	e70d      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001c06:	0020      	movs	r0, r4
 8001c08:	f000 fb2c 	bl	8002264 <__clzsi2>
 8001c0c:	0001      	movs	r1, r0
 8001c0e:	3118      	adds	r1, #24
 8001c10:	291f      	cmp	r1, #31
 8001c12:	dc00      	bgt.n	8001c16 <__aeabi_dsub+0x33a>
 8001c14:	e6c4      	b.n	80019a0 <__aeabi_dsub+0xc4>
 8001c16:	3808      	subs	r0, #8
 8001c18:	4084      	lsls	r4, r0
 8001c1a:	4643      	mov	r3, r8
 8001c1c:	0020      	movs	r0, r4
 8001c1e:	2400      	movs	r4, #0
 8001c20:	4588      	cmp	r8, r1
 8001c22:	dc00      	bgt.n	8001c26 <__aeabi_dsub+0x34a>
 8001c24:	e6c8      	b.n	80019b8 <__aeabi_dsub+0xdc>
 8001c26:	4a04      	ldr	r2, [pc, #16]	; (8001c38 <__aeabi_dsub+0x35c>)
 8001c28:	1a5b      	subs	r3, r3, r1
 8001c2a:	4010      	ands	r0, r2
 8001c2c:	4698      	mov	r8, r3
 8001c2e:	4681      	mov	r9, r0
 8001c30:	e6d6      	b.n	80019e0 <__aeabi_dsub+0x104>
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	000007ff 	.word	0x000007ff
 8001c38:	ff7fffff 	.word	0xff7fffff
 8001c3c:	fffff801 	.word	0xfffff801
 8001c40:	000007fe 	.word	0x000007fe
 8001c44:	430f      	orrs	r7, r1
 8001c46:	1e7a      	subs	r2, r7, #1
 8001c48:	4197      	sbcs	r7, r2
 8001c4a:	e691      	b.n	8001970 <__aeabi_dsub+0x94>
 8001c4c:	4661      	mov	r1, ip
 8001c4e:	08db      	lsrs	r3, r3, #3
 8001c50:	0749      	lsls	r1, r1, #29
 8001c52:	430b      	orrs	r3, r1
 8001c54:	4661      	mov	r1, ip
 8001c56:	08cc      	lsrs	r4, r1, #3
 8001c58:	e7b8      	b.n	8001bcc <__aeabi_dsub+0x2f0>
 8001c5a:	4640      	mov	r0, r8
 8001c5c:	4cd3      	ldr	r4, [pc, #844]	; (8001fac <__aeabi_dsub+0x6d0>)
 8001c5e:	3001      	adds	r0, #1
 8001c60:	4220      	tst	r0, r4
 8001c62:	d000      	beq.n	8001c66 <__aeabi_dsub+0x38a>
 8001c64:	e0a2      	b.n	8001dac <__aeabi_dsub+0x4d0>
 8001c66:	4640      	mov	r0, r8
 8001c68:	2800      	cmp	r0, #0
 8001c6a:	d000      	beq.n	8001c6e <__aeabi_dsub+0x392>
 8001c6c:	e101      	b.n	8001e72 <__aeabi_dsub+0x596>
 8001c6e:	4660      	mov	r0, ip
 8001c70:	4318      	orrs	r0, r3
 8001c72:	d100      	bne.n	8001c76 <__aeabi_dsub+0x39a>
 8001c74:	e15e      	b.n	8001f34 <__aeabi_dsub+0x658>
 8001c76:	0008      	movs	r0, r1
 8001c78:	4338      	orrs	r0, r7
 8001c7a:	d000      	beq.n	8001c7e <__aeabi_dsub+0x3a2>
 8001c7c:	e15f      	b.n	8001f3e <__aeabi_dsub+0x662>
 8001c7e:	4661      	mov	r1, ip
 8001c80:	08db      	lsrs	r3, r3, #3
 8001c82:	0749      	lsls	r1, r1, #29
 8001c84:	430b      	orrs	r3, r1
 8001c86:	4661      	mov	r1, ip
 8001c88:	08cc      	lsrs	r4, r1, #3
 8001c8a:	e7a2      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001c8c:	4dc8      	ldr	r5, [pc, #800]	; (8001fb0 <__aeabi_dsub+0x6d4>)
 8001c8e:	42a8      	cmp	r0, r5
 8001c90:	d100      	bne.n	8001c94 <__aeabi_dsub+0x3b8>
 8001c92:	e0cf      	b.n	8001e34 <__aeabi_dsub+0x558>
 8001c94:	2580      	movs	r5, #128	; 0x80
 8001c96:	4664      	mov	r4, ip
 8001c98:	042d      	lsls	r5, r5, #16
 8001c9a:	432c      	orrs	r4, r5
 8001c9c:	46a4      	mov	ip, r4
 8001c9e:	2a38      	cmp	r2, #56	; 0x38
 8001ca0:	dc56      	bgt.n	8001d50 <__aeabi_dsub+0x474>
 8001ca2:	2a1f      	cmp	r2, #31
 8001ca4:	dd00      	ble.n	8001ca8 <__aeabi_dsub+0x3cc>
 8001ca6:	e0d1      	b.n	8001e4c <__aeabi_dsub+0x570>
 8001ca8:	2520      	movs	r5, #32
 8001caa:	001e      	movs	r6, r3
 8001cac:	1aad      	subs	r5, r5, r2
 8001cae:	4664      	mov	r4, ip
 8001cb0:	40ab      	lsls	r3, r5
 8001cb2:	40ac      	lsls	r4, r5
 8001cb4:	40d6      	lsrs	r6, r2
 8001cb6:	1e5d      	subs	r5, r3, #1
 8001cb8:	41ab      	sbcs	r3, r5
 8001cba:	4334      	orrs	r4, r6
 8001cbc:	4323      	orrs	r3, r4
 8001cbe:	4664      	mov	r4, ip
 8001cc0:	40d4      	lsrs	r4, r2
 8001cc2:	1b09      	subs	r1, r1, r4
 8001cc4:	e049      	b.n	8001d5a <__aeabi_dsub+0x47e>
 8001cc6:	4660      	mov	r0, ip
 8001cc8:	1bdc      	subs	r4, r3, r7
 8001cca:	1a46      	subs	r6, r0, r1
 8001ccc:	42a3      	cmp	r3, r4
 8001cce:	4180      	sbcs	r0, r0
 8001cd0:	4240      	negs	r0, r0
 8001cd2:	4681      	mov	r9, r0
 8001cd4:	0030      	movs	r0, r6
 8001cd6:	464e      	mov	r6, r9
 8001cd8:	1b80      	subs	r0, r0, r6
 8001cda:	4681      	mov	r9, r0
 8001cdc:	0200      	lsls	r0, r0, #8
 8001cde:	d476      	bmi.n	8001dce <__aeabi_dsub+0x4f2>
 8001ce0:	464b      	mov	r3, r9
 8001ce2:	4323      	orrs	r3, r4
 8001ce4:	d000      	beq.n	8001ce8 <__aeabi_dsub+0x40c>
 8001ce6:	e652      	b.n	800198e <__aeabi_dsub+0xb2>
 8001ce8:	2400      	movs	r4, #0
 8001cea:	2500      	movs	r5, #0
 8001cec:	e771      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001cee:	4339      	orrs	r1, r7
 8001cf0:	000c      	movs	r4, r1
 8001cf2:	1e62      	subs	r2, r4, #1
 8001cf4:	4194      	sbcs	r4, r2
 8001cf6:	18e4      	adds	r4, r4, r3
 8001cf8:	429c      	cmp	r4, r3
 8001cfa:	419b      	sbcs	r3, r3
 8001cfc:	425b      	negs	r3, r3
 8001cfe:	4463      	add	r3, ip
 8001d00:	4699      	mov	r9, r3
 8001d02:	464b      	mov	r3, r9
 8001d04:	021b      	lsls	r3, r3, #8
 8001d06:	d400      	bmi.n	8001d0a <__aeabi_dsub+0x42e>
 8001d08:	e756      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	469c      	mov	ip, r3
 8001d0e:	4ba8      	ldr	r3, [pc, #672]	; (8001fb0 <__aeabi_dsub+0x6d4>)
 8001d10:	44e0      	add	r8, ip
 8001d12:	4598      	cmp	r8, r3
 8001d14:	d038      	beq.n	8001d88 <__aeabi_dsub+0x4ac>
 8001d16:	464b      	mov	r3, r9
 8001d18:	48a6      	ldr	r0, [pc, #664]	; (8001fb4 <__aeabi_dsub+0x6d8>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	4003      	ands	r3, r0
 8001d1e:	0018      	movs	r0, r3
 8001d20:	0863      	lsrs	r3, r4, #1
 8001d22:	4014      	ands	r4, r2
 8001d24:	431c      	orrs	r4, r3
 8001d26:	07c3      	lsls	r3, r0, #31
 8001d28:	431c      	orrs	r4, r3
 8001d2a:	0843      	lsrs	r3, r0, #1
 8001d2c:	4699      	mov	r9, r3
 8001d2e:	e657      	b.n	80019e0 <__aeabi_dsub+0x104>
 8001d30:	0010      	movs	r0, r2
 8001d32:	000e      	movs	r6, r1
 8001d34:	3820      	subs	r0, #32
 8001d36:	40c6      	lsrs	r6, r0
 8001d38:	2a20      	cmp	r2, #32
 8001d3a:	d004      	beq.n	8001d46 <__aeabi_dsub+0x46a>
 8001d3c:	2040      	movs	r0, #64	; 0x40
 8001d3e:	1a82      	subs	r2, r0, r2
 8001d40:	4091      	lsls	r1, r2
 8001d42:	430f      	orrs	r7, r1
 8001d44:	46b9      	mov	r9, r7
 8001d46:	464f      	mov	r7, r9
 8001d48:	1e7a      	subs	r2, r7, #1
 8001d4a:	4197      	sbcs	r7, r2
 8001d4c:	4337      	orrs	r7, r6
 8001d4e:	e60f      	b.n	8001970 <__aeabi_dsub+0x94>
 8001d50:	4662      	mov	r2, ip
 8001d52:	431a      	orrs	r2, r3
 8001d54:	0013      	movs	r3, r2
 8001d56:	1e5a      	subs	r2, r3, #1
 8001d58:	4193      	sbcs	r3, r2
 8001d5a:	1afc      	subs	r4, r7, r3
 8001d5c:	42a7      	cmp	r7, r4
 8001d5e:	41bf      	sbcs	r7, r7
 8001d60:	427f      	negs	r7, r7
 8001d62:	1bcb      	subs	r3, r1, r7
 8001d64:	4699      	mov	r9, r3
 8001d66:	465d      	mov	r5, fp
 8001d68:	4680      	mov	r8, r0
 8001d6a:	e608      	b.n	800197e <__aeabi_dsub+0xa2>
 8001d6c:	4666      	mov	r6, ip
 8001d6e:	431e      	orrs	r6, r3
 8001d70:	d100      	bne.n	8001d74 <__aeabi_dsub+0x498>
 8001d72:	e0be      	b.n	8001ef2 <__aeabi_dsub+0x616>
 8001d74:	1e56      	subs	r6, r2, #1
 8001d76:	2a01      	cmp	r2, #1
 8001d78:	d100      	bne.n	8001d7c <__aeabi_dsub+0x4a0>
 8001d7a:	e109      	b.n	8001f90 <__aeabi_dsub+0x6b4>
 8001d7c:	4c8c      	ldr	r4, [pc, #560]	; (8001fb0 <__aeabi_dsub+0x6d4>)
 8001d7e:	42a2      	cmp	r2, r4
 8001d80:	d100      	bne.n	8001d84 <__aeabi_dsub+0x4a8>
 8001d82:	e119      	b.n	8001fb8 <__aeabi_dsub+0x6dc>
 8001d84:	0032      	movs	r2, r6
 8001d86:	e6c1      	b.n	8001b0c <__aeabi_dsub+0x230>
 8001d88:	4642      	mov	r2, r8
 8001d8a:	2400      	movs	r4, #0
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	e648      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001d90:	2020      	movs	r0, #32
 8001d92:	000c      	movs	r4, r1
 8001d94:	1a80      	subs	r0, r0, r2
 8001d96:	003e      	movs	r6, r7
 8001d98:	4087      	lsls	r7, r0
 8001d9a:	4084      	lsls	r4, r0
 8001d9c:	40d6      	lsrs	r6, r2
 8001d9e:	1e78      	subs	r0, r7, #1
 8001da0:	4187      	sbcs	r7, r0
 8001da2:	40d1      	lsrs	r1, r2
 8001da4:	4334      	orrs	r4, r6
 8001da6:	433c      	orrs	r4, r7
 8001da8:	448c      	add	ip, r1
 8001daa:	e7a4      	b.n	8001cf6 <__aeabi_dsub+0x41a>
 8001dac:	4a80      	ldr	r2, [pc, #512]	; (8001fb0 <__aeabi_dsub+0x6d4>)
 8001dae:	4290      	cmp	r0, r2
 8001db0:	d100      	bne.n	8001db4 <__aeabi_dsub+0x4d8>
 8001db2:	e0e9      	b.n	8001f88 <__aeabi_dsub+0x6ac>
 8001db4:	19df      	adds	r7, r3, r7
 8001db6:	429f      	cmp	r7, r3
 8001db8:	419b      	sbcs	r3, r3
 8001dba:	4461      	add	r1, ip
 8001dbc:	425b      	negs	r3, r3
 8001dbe:	18c9      	adds	r1, r1, r3
 8001dc0:	07cc      	lsls	r4, r1, #31
 8001dc2:	087f      	lsrs	r7, r7, #1
 8001dc4:	084b      	lsrs	r3, r1, #1
 8001dc6:	4699      	mov	r9, r3
 8001dc8:	4680      	mov	r8, r0
 8001dca:	433c      	orrs	r4, r7
 8001dcc:	e6f4      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001dce:	1afc      	subs	r4, r7, r3
 8001dd0:	42a7      	cmp	r7, r4
 8001dd2:	41bf      	sbcs	r7, r7
 8001dd4:	4663      	mov	r3, ip
 8001dd6:	427f      	negs	r7, r7
 8001dd8:	1ac9      	subs	r1, r1, r3
 8001dda:	1bcb      	subs	r3, r1, r7
 8001ddc:	4699      	mov	r9, r3
 8001dde:	465d      	mov	r5, fp
 8001de0:	e5d5      	b.n	800198e <__aeabi_dsub+0xb2>
 8001de2:	08ff      	lsrs	r7, r7, #3
 8001de4:	074b      	lsls	r3, r1, #29
 8001de6:	465d      	mov	r5, fp
 8001de8:	433b      	orrs	r3, r7
 8001dea:	08cc      	lsrs	r4, r1, #3
 8001dec:	e6ee      	b.n	8001bcc <__aeabi_dsub+0x2f0>
 8001dee:	4662      	mov	r2, ip
 8001df0:	431a      	orrs	r2, r3
 8001df2:	d000      	beq.n	8001df6 <__aeabi_dsub+0x51a>
 8001df4:	e082      	b.n	8001efc <__aeabi_dsub+0x620>
 8001df6:	000b      	movs	r3, r1
 8001df8:	433b      	orrs	r3, r7
 8001dfa:	d11b      	bne.n	8001e34 <__aeabi_dsub+0x558>
 8001dfc:	2480      	movs	r4, #128	; 0x80
 8001dfe:	2500      	movs	r5, #0
 8001e00:	0324      	lsls	r4, r4, #12
 8001e02:	e6f9      	b.n	8001bf8 <__aeabi_dsub+0x31c>
 8001e04:	19dc      	adds	r4, r3, r7
 8001e06:	429c      	cmp	r4, r3
 8001e08:	419b      	sbcs	r3, r3
 8001e0a:	4461      	add	r1, ip
 8001e0c:	4689      	mov	r9, r1
 8001e0e:	425b      	negs	r3, r3
 8001e10:	4499      	add	r9, r3
 8001e12:	464b      	mov	r3, r9
 8001e14:	021b      	lsls	r3, r3, #8
 8001e16:	d444      	bmi.n	8001ea2 <__aeabi_dsub+0x5c6>
 8001e18:	2301      	movs	r3, #1
 8001e1a:	4698      	mov	r8, r3
 8001e1c:	e6cc      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001e1e:	1bdc      	subs	r4, r3, r7
 8001e20:	4662      	mov	r2, ip
 8001e22:	42a3      	cmp	r3, r4
 8001e24:	419b      	sbcs	r3, r3
 8001e26:	1a51      	subs	r1, r2, r1
 8001e28:	425b      	negs	r3, r3
 8001e2a:	1acb      	subs	r3, r1, r3
 8001e2c:	4699      	mov	r9, r3
 8001e2e:	2301      	movs	r3, #1
 8001e30:	4698      	mov	r8, r3
 8001e32:	e5a4      	b.n	800197e <__aeabi_dsub+0xa2>
 8001e34:	08ff      	lsrs	r7, r7, #3
 8001e36:	074b      	lsls	r3, r1, #29
 8001e38:	465d      	mov	r5, fp
 8001e3a:	433b      	orrs	r3, r7
 8001e3c:	08cc      	lsrs	r4, r1, #3
 8001e3e:	e6d7      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001e40:	4662      	mov	r2, ip
 8001e42:	431a      	orrs	r2, r3
 8001e44:	0014      	movs	r4, r2
 8001e46:	1e63      	subs	r3, r4, #1
 8001e48:	419c      	sbcs	r4, r3
 8001e4a:	e679      	b.n	8001b40 <__aeabi_dsub+0x264>
 8001e4c:	0015      	movs	r5, r2
 8001e4e:	4664      	mov	r4, ip
 8001e50:	3d20      	subs	r5, #32
 8001e52:	40ec      	lsrs	r4, r5
 8001e54:	46a0      	mov	r8, r4
 8001e56:	2a20      	cmp	r2, #32
 8001e58:	d005      	beq.n	8001e66 <__aeabi_dsub+0x58a>
 8001e5a:	2540      	movs	r5, #64	; 0x40
 8001e5c:	4664      	mov	r4, ip
 8001e5e:	1aaa      	subs	r2, r5, r2
 8001e60:	4094      	lsls	r4, r2
 8001e62:	4323      	orrs	r3, r4
 8001e64:	469a      	mov	sl, r3
 8001e66:	4654      	mov	r4, sl
 8001e68:	1e63      	subs	r3, r4, #1
 8001e6a:	419c      	sbcs	r4, r3
 8001e6c:	4643      	mov	r3, r8
 8001e6e:	4323      	orrs	r3, r4
 8001e70:	e773      	b.n	8001d5a <__aeabi_dsub+0x47e>
 8001e72:	4662      	mov	r2, ip
 8001e74:	431a      	orrs	r2, r3
 8001e76:	d023      	beq.n	8001ec0 <__aeabi_dsub+0x5e4>
 8001e78:	000a      	movs	r2, r1
 8001e7a:	433a      	orrs	r2, r7
 8001e7c:	d000      	beq.n	8001e80 <__aeabi_dsub+0x5a4>
 8001e7e:	e0a0      	b.n	8001fc2 <__aeabi_dsub+0x6e6>
 8001e80:	4662      	mov	r2, ip
 8001e82:	08db      	lsrs	r3, r3, #3
 8001e84:	0752      	lsls	r2, r2, #29
 8001e86:	4313      	orrs	r3, r2
 8001e88:	4662      	mov	r2, ip
 8001e8a:	08d4      	lsrs	r4, r2, #3
 8001e8c:	e6b0      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001e8e:	000b      	movs	r3, r1
 8001e90:	433b      	orrs	r3, r7
 8001e92:	d100      	bne.n	8001e96 <__aeabi_dsub+0x5ba>
 8001e94:	e728      	b.n	8001ce8 <__aeabi_dsub+0x40c>
 8001e96:	08ff      	lsrs	r7, r7, #3
 8001e98:	074b      	lsls	r3, r1, #29
 8001e9a:	465d      	mov	r5, fp
 8001e9c:	433b      	orrs	r3, r7
 8001e9e:	08cc      	lsrs	r4, r1, #3
 8001ea0:	e697      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	4698      	mov	r8, r3
 8001ea6:	e736      	b.n	8001d16 <__aeabi_dsub+0x43a>
 8001ea8:	1afc      	subs	r4, r7, r3
 8001eaa:	42a7      	cmp	r7, r4
 8001eac:	41bf      	sbcs	r7, r7
 8001eae:	4663      	mov	r3, ip
 8001eb0:	427f      	negs	r7, r7
 8001eb2:	1ac9      	subs	r1, r1, r3
 8001eb4:	1bcb      	subs	r3, r1, r7
 8001eb6:	4699      	mov	r9, r3
 8001eb8:	2301      	movs	r3, #1
 8001eba:	465d      	mov	r5, fp
 8001ebc:	4698      	mov	r8, r3
 8001ebe:	e55e      	b.n	800197e <__aeabi_dsub+0xa2>
 8001ec0:	074b      	lsls	r3, r1, #29
 8001ec2:	08ff      	lsrs	r7, r7, #3
 8001ec4:	433b      	orrs	r3, r7
 8001ec6:	08cc      	lsrs	r4, r1, #3
 8001ec8:	e692      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001eca:	1bdc      	subs	r4, r3, r7
 8001ecc:	4660      	mov	r0, ip
 8001ece:	42a3      	cmp	r3, r4
 8001ed0:	41b6      	sbcs	r6, r6
 8001ed2:	1a40      	subs	r0, r0, r1
 8001ed4:	4276      	negs	r6, r6
 8001ed6:	1b80      	subs	r0, r0, r6
 8001ed8:	4681      	mov	r9, r0
 8001eda:	0200      	lsls	r0, r0, #8
 8001edc:	d560      	bpl.n	8001fa0 <__aeabi_dsub+0x6c4>
 8001ede:	1afc      	subs	r4, r7, r3
 8001ee0:	42a7      	cmp	r7, r4
 8001ee2:	41bf      	sbcs	r7, r7
 8001ee4:	4663      	mov	r3, ip
 8001ee6:	427f      	negs	r7, r7
 8001ee8:	1ac9      	subs	r1, r1, r3
 8001eea:	1bcb      	subs	r3, r1, r7
 8001eec:	4699      	mov	r9, r3
 8001eee:	465d      	mov	r5, fp
 8001ef0:	e576      	b.n	80019e0 <__aeabi_dsub+0x104>
 8001ef2:	08ff      	lsrs	r7, r7, #3
 8001ef4:	074b      	lsls	r3, r1, #29
 8001ef6:	433b      	orrs	r3, r7
 8001ef8:	08cc      	lsrs	r4, r1, #3
 8001efa:	e667      	b.n	8001bcc <__aeabi_dsub+0x2f0>
 8001efc:	000a      	movs	r2, r1
 8001efe:	08db      	lsrs	r3, r3, #3
 8001f00:	433a      	orrs	r2, r7
 8001f02:	d100      	bne.n	8001f06 <__aeabi_dsub+0x62a>
 8001f04:	e66f      	b.n	8001be6 <__aeabi_dsub+0x30a>
 8001f06:	4662      	mov	r2, ip
 8001f08:	0752      	lsls	r2, r2, #29
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	4662      	mov	r2, ip
 8001f0e:	08d4      	lsrs	r4, r2, #3
 8001f10:	2280      	movs	r2, #128	; 0x80
 8001f12:	0312      	lsls	r2, r2, #12
 8001f14:	4214      	tst	r4, r2
 8001f16:	d007      	beq.n	8001f28 <__aeabi_dsub+0x64c>
 8001f18:	08c8      	lsrs	r0, r1, #3
 8001f1a:	4210      	tst	r0, r2
 8001f1c:	d104      	bne.n	8001f28 <__aeabi_dsub+0x64c>
 8001f1e:	465d      	mov	r5, fp
 8001f20:	0004      	movs	r4, r0
 8001f22:	08fb      	lsrs	r3, r7, #3
 8001f24:	0749      	lsls	r1, r1, #29
 8001f26:	430b      	orrs	r3, r1
 8001f28:	0f5a      	lsrs	r2, r3, #29
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	08db      	lsrs	r3, r3, #3
 8001f2e:	0752      	lsls	r2, r2, #29
 8001f30:	4313      	orrs	r3, r2
 8001f32:	e65d      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001f34:	074b      	lsls	r3, r1, #29
 8001f36:	08ff      	lsrs	r7, r7, #3
 8001f38:	433b      	orrs	r3, r7
 8001f3a:	08cc      	lsrs	r4, r1, #3
 8001f3c:	e649      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001f3e:	19dc      	adds	r4, r3, r7
 8001f40:	429c      	cmp	r4, r3
 8001f42:	419b      	sbcs	r3, r3
 8001f44:	4461      	add	r1, ip
 8001f46:	4689      	mov	r9, r1
 8001f48:	425b      	negs	r3, r3
 8001f4a:	4499      	add	r9, r3
 8001f4c:	464b      	mov	r3, r9
 8001f4e:	021b      	lsls	r3, r3, #8
 8001f50:	d400      	bmi.n	8001f54 <__aeabi_dsub+0x678>
 8001f52:	e631      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001f54:	464a      	mov	r2, r9
 8001f56:	4b17      	ldr	r3, [pc, #92]	; (8001fb4 <__aeabi_dsub+0x6d8>)
 8001f58:	401a      	ands	r2, r3
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	4691      	mov	r9, r2
 8001f5e:	4698      	mov	r8, r3
 8001f60:	e62a      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001f62:	0016      	movs	r6, r2
 8001f64:	4664      	mov	r4, ip
 8001f66:	3e20      	subs	r6, #32
 8001f68:	40f4      	lsrs	r4, r6
 8001f6a:	46a0      	mov	r8, r4
 8001f6c:	2a20      	cmp	r2, #32
 8001f6e:	d005      	beq.n	8001f7c <__aeabi_dsub+0x6a0>
 8001f70:	2640      	movs	r6, #64	; 0x40
 8001f72:	4664      	mov	r4, ip
 8001f74:	1ab2      	subs	r2, r6, r2
 8001f76:	4094      	lsls	r4, r2
 8001f78:	4323      	orrs	r3, r4
 8001f7a:	469a      	mov	sl, r3
 8001f7c:	4654      	mov	r4, sl
 8001f7e:	1e63      	subs	r3, r4, #1
 8001f80:	419c      	sbcs	r4, r3
 8001f82:	4643      	mov	r3, r8
 8001f84:	431c      	orrs	r4, r3
 8001f86:	e5db      	b.n	8001b40 <__aeabi_dsub+0x264>
 8001f88:	0002      	movs	r2, r0
 8001f8a:	2400      	movs	r4, #0
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	e548      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001f90:	19dc      	adds	r4, r3, r7
 8001f92:	42bc      	cmp	r4, r7
 8001f94:	41bf      	sbcs	r7, r7
 8001f96:	4461      	add	r1, ip
 8001f98:	4689      	mov	r9, r1
 8001f9a:	427f      	negs	r7, r7
 8001f9c:	44b9      	add	r9, r7
 8001f9e:	e738      	b.n	8001e12 <__aeabi_dsub+0x536>
 8001fa0:	464b      	mov	r3, r9
 8001fa2:	4323      	orrs	r3, r4
 8001fa4:	d100      	bne.n	8001fa8 <__aeabi_dsub+0x6cc>
 8001fa6:	e69f      	b.n	8001ce8 <__aeabi_dsub+0x40c>
 8001fa8:	e606      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	000007fe 	.word	0x000007fe
 8001fb0:	000007ff 	.word	0x000007ff
 8001fb4:	ff7fffff 	.word	0xff7fffff
 8001fb8:	08ff      	lsrs	r7, r7, #3
 8001fba:	074b      	lsls	r3, r1, #29
 8001fbc:	433b      	orrs	r3, r7
 8001fbe:	08cc      	lsrs	r4, r1, #3
 8001fc0:	e616      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001fc2:	4662      	mov	r2, ip
 8001fc4:	08db      	lsrs	r3, r3, #3
 8001fc6:	0752      	lsls	r2, r2, #29
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	4662      	mov	r2, ip
 8001fcc:	08d4      	lsrs	r4, r2, #3
 8001fce:	2280      	movs	r2, #128	; 0x80
 8001fd0:	0312      	lsls	r2, r2, #12
 8001fd2:	4214      	tst	r4, r2
 8001fd4:	d007      	beq.n	8001fe6 <__aeabi_dsub+0x70a>
 8001fd6:	08c8      	lsrs	r0, r1, #3
 8001fd8:	4210      	tst	r0, r2
 8001fda:	d104      	bne.n	8001fe6 <__aeabi_dsub+0x70a>
 8001fdc:	465d      	mov	r5, fp
 8001fde:	0004      	movs	r4, r0
 8001fe0:	08fb      	lsrs	r3, r7, #3
 8001fe2:	0749      	lsls	r1, r1, #29
 8001fe4:	430b      	orrs	r3, r1
 8001fe6:	0f5a      	lsrs	r2, r3, #29
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	0752      	lsls	r2, r2, #29
 8001fec:	08db      	lsrs	r3, r3, #3
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	e5fe      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	4a01      	ldr	r2, [pc, #4]	; (8001ffc <__aeabi_dsub+0x720>)
 8001ff6:	001c      	movs	r4, r3
 8001ff8:	e513      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	000007ff 	.word	0x000007ff

08002000 <__aeabi_dcmpun>:
 8002000:	b570      	push	{r4, r5, r6, lr}
 8002002:	0005      	movs	r5, r0
 8002004:	480c      	ldr	r0, [pc, #48]	; (8002038 <__aeabi_dcmpun+0x38>)
 8002006:	031c      	lsls	r4, r3, #12
 8002008:	0016      	movs	r6, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	030a      	lsls	r2, r1, #12
 800200e:	0049      	lsls	r1, r1, #1
 8002010:	0b12      	lsrs	r2, r2, #12
 8002012:	0d49      	lsrs	r1, r1, #21
 8002014:	0b24      	lsrs	r4, r4, #12
 8002016:	0d5b      	lsrs	r3, r3, #21
 8002018:	4281      	cmp	r1, r0
 800201a:	d008      	beq.n	800202e <__aeabi_dcmpun+0x2e>
 800201c:	4a06      	ldr	r2, [pc, #24]	; (8002038 <__aeabi_dcmpun+0x38>)
 800201e:	2000      	movs	r0, #0
 8002020:	4293      	cmp	r3, r2
 8002022:	d103      	bne.n	800202c <__aeabi_dcmpun+0x2c>
 8002024:	0020      	movs	r0, r4
 8002026:	4330      	orrs	r0, r6
 8002028:	1e43      	subs	r3, r0, #1
 800202a:	4198      	sbcs	r0, r3
 800202c:	bd70      	pop	{r4, r5, r6, pc}
 800202e:	2001      	movs	r0, #1
 8002030:	432a      	orrs	r2, r5
 8002032:	d1fb      	bne.n	800202c <__aeabi_dcmpun+0x2c>
 8002034:	e7f2      	b.n	800201c <__aeabi_dcmpun+0x1c>
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	000007ff 	.word	0x000007ff

0800203c <__aeabi_d2iz>:
 800203c:	000a      	movs	r2, r1
 800203e:	b530      	push	{r4, r5, lr}
 8002040:	4c13      	ldr	r4, [pc, #76]	; (8002090 <__aeabi_d2iz+0x54>)
 8002042:	0053      	lsls	r3, r2, #1
 8002044:	0309      	lsls	r1, r1, #12
 8002046:	0005      	movs	r5, r0
 8002048:	0b09      	lsrs	r1, r1, #12
 800204a:	2000      	movs	r0, #0
 800204c:	0d5b      	lsrs	r3, r3, #21
 800204e:	0fd2      	lsrs	r2, r2, #31
 8002050:	42a3      	cmp	r3, r4
 8002052:	dd04      	ble.n	800205e <__aeabi_d2iz+0x22>
 8002054:	480f      	ldr	r0, [pc, #60]	; (8002094 <__aeabi_d2iz+0x58>)
 8002056:	4283      	cmp	r3, r0
 8002058:	dd02      	ble.n	8002060 <__aeabi_d2iz+0x24>
 800205a:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <__aeabi_d2iz+0x5c>)
 800205c:	18d0      	adds	r0, r2, r3
 800205e:	bd30      	pop	{r4, r5, pc}
 8002060:	2080      	movs	r0, #128	; 0x80
 8002062:	0340      	lsls	r0, r0, #13
 8002064:	4301      	orrs	r1, r0
 8002066:	480d      	ldr	r0, [pc, #52]	; (800209c <__aeabi_d2iz+0x60>)
 8002068:	1ac0      	subs	r0, r0, r3
 800206a:	281f      	cmp	r0, #31
 800206c:	dd08      	ble.n	8002080 <__aeabi_d2iz+0x44>
 800206e:	480c      	ldr	r0, [pc, #48]	; (80020a0 <__aeabi_d2iz+0x64>)
 8002070:	1ac3      	subs	r3, r0, r3
 8002072:	40d9      	lsrs	r1, r3
 8002074:	000b      	movs	r3, r1
 8002076:	4258      	negs	r0, r3
 8002078:	2a00      	cmp	r2, #0
 800207a:	d1f0      	bne.n	800205e <__aeabi_d2iz+0x22>
 800207c:	0018      	movs	r0, r3
 800207e:	e7ee      	b.n	800205e <__aeabi_d2iz+0x22>
 8002080:	4c08      	ldr	r4, [pc, #32]	; (80020a4 <__aeabi_d2iz+0x68>)
 8002082:	40c5      	lsrs	r5, r0
 8002084:	46a4      	mov	ip, r4
 8002086:	4463      	add	r3, ip
 8002088:	4099      	lsls	r1, r3
 800208a:	000b      	movs	r3, r1
 800208c:	432b      	orrs	r3, r5
 800208e:	e7f2      	b.n	8002076 <__aeabi_d2iz+0x3a>
 8002090:	000003fe 	.word	0x000003fe
 8002094:	0000041d 	.word	0x0000041d
 8002098:	7fffffff 	.word	0x7fffffff
 800209c:	00000433 	.word	0x00000433
 80020a0:	00000413 	.word	0x00000413
 80020a4:	fffffbed 	.word	0xfffffbed

080020a8 <__aeabi_i2d>:
 80020a8:	b570      	push	{r4, r5, r6, lr}
 80020aa:	2800      	cmp	r0, #0
 80020ac:	d016      	beq.n	80020dc <__aeabi_i2d+0x34>
 80020ae:	17c3      	asrs	r3, r0, #31
 80020b0:	18c5      	adds	r5, r0, r3
 80020b2:	405d      	eors	r5, r3
 80020b4:	0fc4      	lsrs	r4, r0, #31
 80020b6:	0028      	movs	r0, r5
 80020b8:	f000 f8d4 	bl	8002264 <__clzsi2>
 80020bc:	4a11      	ldr	r2, [pc, #68]	; (8002104 <__aeabi_i2d+0x5c>)
 80020be:	1a12      	subs	r2, r2, r0
 80020c0:	280a      	cmp	r0, #10
 80020c2:	dc16      	bgt.n	80020f2 <__aeabi_i2d+0x4a>
 80020c4:	0003      	movs	r3, r0
 80020c6:	002e      	movs	r6, r5
 80020c8:	3315      	adds	r3, #21
 80020ca:	409e      	lsls	r6, r3
 80020cc:	230b      	movs	r3, #11
 80020ce:	1a18      	subs	r0, r3, r0
 80020d0:	40c5      	lsrs	r5, r0
 80020d2:	0552      	lsls	r2, r2, #21
 80020d4:	032d      	lsls	r5, r5, #12
 80020d6:	0b2d      	lsrs	r5, r5, #12
 80020d8:	0d53      	lsrs	r3, r2, #21
 80020da:	e003      	b.n	80020e4 <__aeabi_i2d+0x3c>
 80020dc:	2400      	movs	r4, #0
 80020de:	2300      	movs	r3, #0
 80020e0:	2500      	movs	r5, #0
 80020e2:	2600      	movs	r6, #0
 80020e4:	051b      	lsls	r3, r3, #20
 80020e6:	432b      	orrs	r3, r5
 80020e8:	07e4      	lsls	r4, r4, #31
 80020ea:	4323      	orrs	r3, r4
 80020ec:	0030      	movs	r0, r6
 80020ee:	0019      	movs	r1, r3
 80020f0:	bd70      	pop	{r4, r5, r6, pc}
 80020f2:	380b      	subs	r0, #11
 80020f4:	4085      	lsls	r5, r0
 80020f6:	0552      	lsls	r2, r2, #21
 80020f8:	032d      	lsls	r5, r5, #12
 80020fa:	2600      	movs	r6, #0
 80020fc:	0b2d      	lsrs	r5, r5, #12
 80020fe:	0d53      	lsrs	r3, r2, #21
 8002100:	e7f0      	b.n	80020e4 <__aeabi_i2d+0x3c>
 8002102:	46c0      	nop			; (mov r8, r8)
 8002104:	0000041e 	.word	0x0000041e

08002108 <__aeabi_ui2d>:
 8002108:	b510      	push	{r4, lr}
 800210a:	1e04      	subs	r4, r0, #0
 800210c:	d010      	beq.n	8002130 <__aeabi_ui2d+0x28>
 800210e:	f000 f8a9 	bl	8002264 <__clzsi2>
 8002112:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <__aeabi_ui2d+0x48>)
 8002114:	1a1b      	subs	r3, r3, r0
 8002116:	280a      	cmp	r0, #10
 8002118:	dc11      	bgt.n	800213e <__aeabi_ui2d+0x36>
 800211a:	220b      	movs	r2, #11
 800211c:	0021      	movs	r1, r4
 800211e:	1a12      	subs	r2, r2, r0
 8002120:	40d1      	lsrs	r1, r2
 8002122:	3015      	adds	r0, #21
 8002124:	030a      	lsls	r2, r1, #12
 8002126:	055b      	lsls	r3, r3, #21
 8002128:	4084      	lsls	r4, r0
 800212a:	0b12      	lsrs	r2, r2, #12
 800212c:	0d5b      	lsrs	r3, r3, #21
 800212e:	e001      	b.n	8002134 <__aeabi_ui2d+0x2c>
 8002130:	2300      	movs	r3, #0
 8002132:	2200      	movs	r2, #0
 8002134:	051b      	lsls	r3, r3, #20
 8002136:	4313      	orrs	r3, r2
 8002138:	0020      	movs	r0, r4
 800213a:	0019      	movs	r1, r3
 800213c:	bd10      	pop	{r4, pc}
 800213e:	0022      	movs	r2, r4
 8002140:	380b      	subs	r0, #11
 8002142:	4082      	lsls	r2, r0
 8002144:	055b      	lsls	r3, r3, #21
 8002146:	0312      	lsls	r2, r2, #12
 8002148:	2400      	movs	r4, #0
 800214a:	0b12      	lsrs	r2, r2, #12
 800214c:	0d5b      	lsrs	r3, r3, #21
 800214e:	e7f1      	b.n	8002134 <__aeabi_ui2d+0x2c>
 8002150:	0000041e 	.word	0x0000041e

08002154 <__aeabi_d2f>:
 8002154:	0002      	movs	r2, r0
 8002156:	004b      	lsls	r3, r1, #1
 8002158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800215a:	0d5b      	lsrs	r3, r3, #21
 800215c:	030c      	lsls	r4, r1, #12
 800215e:	4e3d      	ldr	r6, [pc, #244]	; (8002254 <__aeabi_d2f+0x100>)
 8002160:	0a64      	lsrs	r4, r4, #9
 8002162:	0f40      	lsrs	r0, r0, #29
 8002164:	1c5f      	adds	r7, r3, #1
 8002166:	0fc9      	lsrs	r1, r1, #31
 8002168:	4304      	orrs	r4, r0
 800216a:	00d5      	lsls	r5, r2, #3
 800216c:	4237      	tst	r7, r6
 800216e:	d00a      	beq.n	8002186 <__aeabi_d2f+0x32>
 8002170:	4839      	ldr	r0, [pc, #228]	; (8002258 <__aeabi_d2f+0x104>)
 8002172:	181e      	adds	r6, r3, r0
 8002174:	2efe      	cmp	r6, #254	; 0xfe
 8002176:	dd16      	ble.n	80021a6 <__aeabi_d2f+0x52>
 8002178:	20ff      	movs	r0, #255	; 0xff
 800217a:	2400      	movs	r4, #0
 800217c:	05c0      	lsls	r0, r0, #23
 800217e:	4320      	orrs	r0, r4
 8002180:	07c9      	lsls	r1, r1, #31
 8002182:	4308      	orrs	r0, r1
 8002184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002186:	2b00      	cmp	r3, #0
 8002188:	d106      	bne.n	8002198 <__aeabi_d2f+0x44>
 800218a:	432c      	orrs	r4, r5
 800218c:	d026      	beq.n	80021dc <__aeabi_d2f+0x88>
 800218e:	2205      	movs	r2, #5
 8002190:	0192      	lsls	r2, r2, #6
 8002192:	0a54      	lsrs	r4, r2, #9
 8002194:	b2d8      	uxtb	r0, r3
 8002196:	e7f1      	b.n	800217c <__aeabi_d2f+0x28>
 8002198:	4325      	orrs	r5, r4
 800219a:	d0ed      	beq.n	8002178 <__aeabi_d2f+0x24>
 800219c:	2080      	movs	r0, #128	; 0x80
 800219e:	03c0      	lsls	r0, r0, #15
 80021a0:	4304      	orrs	r4, r0
 80021a2:	20ff      	movs	r0, #255	; 0xff
 80021a4:	e7ea      	b.n	800217c <__aeabi_d2f+0x28>
 80021a6:	2e00      	cmp	r6, #0
 80021a8:	dd1b      	ble.n	80021e2 <__aeabi_d2f+0x8e>
 80021aa:	0192      	lsls	r2, r2, #6
 80021ac:	1e53      	subs	r3, r2, #1
 80021ae:	419a      	sbcs	r2, r3
 80021b0:	00e4      	lsls	r4, r4, #3
 80021b2:	0f6d      	lsrs	r5, r5, #29
 80021b4:	4322      	orrs	r2, r4
 80021b6:	432a      	orrs	r2, r5
 80021b8:	0753      	lsls	r3, r2, #29
 80021ba:	d048      	beq.n	800224e <__aeabi_d2f+0xfa>
 80021bc:	230f      	movs	r3, #15
 80021be:	4013      	ands	r3, r2
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d000      	beq.n	80021c6 <__aeabi_d2f+0x72>
 80021c4:	3204      	adds	r2, #4
 80021c6:	2380      	movs	r3, #128	; 0x80
 80021c8:	04db      	lsls	r3, r3, #19
 80021ca:	4013      	ands	r3, r2
 80021cc:	d03f      	beq.n	800224e <__aeabi_d2f+0xfa>
 80021ce:	1c70      	adds	r0, r6, #1
 80021d0:	2efe      	cmp	r6, #254	; 0xfe
 80021d2:	d0d1      	beq.n	8002178 <__aeabi_d2f+0x24>
 80021d4:	0192      	lsls	r2, r2, #6
 80021d6:	0a54      	lsrs	r4, r2, #9
 80021d8:	b2c0      	uxtb	r0, r0
 80021da:	e7cf      	b.n	800217c <__aeabi_d2f+0x28>
 80021dc:	2000      	movs	r0, #0
 80021de:	2400      	movs	r4, #0
 80021e0:	e7cc      	b.n	800217c <__aeabi_d2f+0x28>
 80021e2:	0032      	movs	r2, r6
 80021e4:	3217      	adds	r2, #23
 80021e6:	db22      	blt.n	800222e <__aeabi_d2f+0xda>
 80021e8:	2080      	movs	r0, #128	; 0x80
 80021ea:	0400      	lsls	r0, r0, #16
 80021ec:	4320      	orrs	r0, r4
 80021ee:	241e      	movs	r4, #30
 80021f0:	1ba4      	subs	r4, r4, r6
 80021f2:	2c1f      	cmp	r4, #31
 80021f4:	dd1d      	ble.n	8002232 <__aeabi_d2f+0xde>
 80021f6:	2202      	movs	r2, #2
 80021f8:	4252      	negs	r2, r2
 80021fa:	1b96      	subs	r6, r2, r6
 80021fc:	0002      	movs	r2, r0
 80021fe:	40f2      	lsrs	r2, r6
 8002200:	0016      	movs	r6, r2
 8002202:	2c20      	cmp	r4, #32
 8002204:	d004      	beq.n	8002210 <__aeabi_d2f+0xbc>
 8002206:	4a15      	ldr	r2, [pc, #84]	; (800225c <__aeabi_d2f+0x108>)
 8002208:	4694      	mov	ip, r2
 800220a:	4463      	add	r3, ip
 800220c:	4098      	lsls	r0, r3
 800220e:	4305      	orrs	r5, r0
 8002210:	002a      	movs	r2, r5
 8002212:	1e53      	subs	r3, r2, #1
 8002214:	419a      	sbcs	r2, r3
 8002216:	4332      	orrs	r2, r6
 8002218:	2600      	movs	r6, #0
 800221a:	0753      	lsls	r3, r2, #29
 800221c:	d1ce      	bne.n	80021bc <__aeabi_d2f+0x68>
 800221e:	2480      	movs	r4, #128	; 0x80
 8002220:	0013      	movs	r3, r2
 8002222:	04e4      	lsls	r4, r4, #19
 8002224:	2001      	movs	r0, #1
 8002226:	4023      	ands	r3, r4
 8002228:	4222      	tst	r2, r4
 800222a:	d1d3      	bne.n	80021d4 <__aeabi_d2f+0x80>
 800222c:	e7b0      	b.n	8002190 <__aeabi_d2f+0x3c>
 800222e:	2300      	movs	r3, #0
 8002230:	e7ad      	b.n	800218e <__aeabi_d2f+0x3a>
 8002232:	4a0b      	ldr	r2, [pc, #44]	; (8002260 <__aeabi_d2f+0x10c>)
 8002234:	4694      	mov	ip, r2
 8002236:	002a      	movs	r2, r5
 8002238:	40e2      	lsrs	r2, r4
 800223a:	0014      	movs	r4, r2
 800223c:	002a      	movs	r2, r5
 800223e:	4463      	add	r3, ip
 8002240:	409a      	lsls	r2, r3
 8002242:	4098      	lsls	r0, r3
 8002244:	1e55      	subs	r5, r2, #1
 8002246:	41aa      	sbcs	r2, r5
 8002248:	4302      	orrs	r2, r0
 800224a:	4322      	orrs	r2, r4
 800224c:	e7e4      	b.n	8002218 <__aeabi_d2f+0xc4>
 800224e:	0033      	movs	r3, r6
 8002250:	e79e      	b.n	8002190 <__aeabi_d2f+0x3c>
 8002252:	46c0      	nop			; (mov r8, r8)
 8002254:	000007fe 	.word	0x000007fe
 8002258:	fffffc80 	.word	0xfffffc80
 800225c:	fffffca2 	.word	0xfffffca2
 8002260:	fffffc82 	.word	0xfffffc82

08002264 <__clzsi2>:
 8002264:	211c      	movs	r1, #28
 8002266:	2301      	movs	r3, #1
 8002268:	041b      	lsls	r3, r3, #16
 800226a:	4298      	cmp	r0, r3
 800226c:	d301      	bcc.n	8002272 <__clzsi2+0xe>
 800226e:	0c00      	lsrs	r0, r0, #16
 8002270:	3910      	subs	r1, #16
 8002272:	0a1b      	lsrs	r3, r3, #8
 8002274:	4298      	cmp	r0, r3
 8002276:	d301      	bcc.n	800227c <__clzsi2+0x18>
 8002278:	0a00      	lsrs	r0, r0, #8
 800227a:	3908      	subs	r1, #8
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	4298      	cmp	r0, r3
 8002280:	d301      	bcc.n	8002286 <__clzsi2+0x22>
 8002282:	0900      	lsrs	r0, r0, #4
 8002284:	3904      	subs	r1, #4
 8002286:	a202      	add	r2, pc, #8	; (adr r2, 8002290 <__clzsi2+0x2c>)
 8002288:	5c10      	ldrb	r0, [r2, r0]
 800228a:	1840      	adds	r0, r0, r1
 800228c:	4770      	bx	lr
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	02020304 	.word	0x02020304
 8002294:	01010101 	.word	0x01010101
	...

080022a0 <Read_Temperatur>:

/* USER CODE BEGIN PFP */


void Read_Temperatur()
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b088      	sub	sp, #32
 80022a4:	af00      	add	r7, sp, #0

	double value  = 1.0;
 80022a6:	2200      	movs	r2, #0
 80022a8:	4b24      	ldr	r3, [pc, #144]	; (800233c <Read_Temperatur+0x9c>)
 80022aa:	61ba      	str	r2, [r7, #24]
 80022ac:	61fb      	str	r3, [r7, #28]
	double raw = 0.0;
 80022ae:	2200      	movs	r2, #0
 80022b0:	2300      	movs	r3, #0
 80022b2:	613a      	str	r2, [r7, #16]
 80022b4:	617b      	str	r3, [r7, #20]
	char msg[16] = "";
 80022b6:	003b      	movs	r3, r7
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	3304      	adds	r3, #4
 80022be:	220c      	movs	r2, #12
 80022c0:	2100      	movs	r1, #0
 80022c2:	0018      	movs	r0, r3
 80022c4:	f003 f982 	bl	80055cc <memset>


	HAL_ADC_Start(&hadc);
 80022c8:	4b1d      	ldr	r3, [pc, #116]	; (8002340 <Read_Temperatur+0xa0>)
 80022ca:	0018      	movs	r0, r3
 80022cc:	f000 fd24 	bl	8002d18 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(&hadc,100);
 80022d0:	4b1b      	ldr	r3, [pc, #108]	; (8002340 <Read_Temperatur+0xa0>)
 80022d2:	2164      	movs	r1, #100	; 0x64
 80022d4:	0018      	movs	r0, r3
 80022d6:	f000 fd73 	bl	8002dc0 <HAL_ADC_PollForConversion>

	raw = (double)HAL_ADC_GetValue(&hadc);
 80022da:	4b19      	ldr	r3, [pc, #100]	; (8002340 <Read_Temperatur+0xa0>)
 80022dc:	0018      	movs	r0, r3
 80022de:	f000 fe07 	bl	8002ef0 <HAL_ADC_GetValue>
 80022e2:	0003      	movs	r3, r0
 80022e4:	0018      	movs	r0, r3
 80022e6:	f7ff ff0f 	bl	8002108 <__aeabi_ui2d>
 80022ea:	0002      	movs	r2, r0
 80022ec:	000b      	movs	r3, r1
 80022ee:	613a      	str	r2, [r7, #16]
 80022f0:	617b      	str	r3, [r7, #20]

	value  = (raw - 500)/10.0;
 80022f2:	2200      	movs	r2, #0
 80022f4:	4b13      	ldr	r3, [pc, #76]	; (8002344 <Read_Temperatur+0xa4>)
 80022f6:	6938      	ldr	r0, [r7, #16]
 80022f8:	6979      	ldr	r1, [r7, #20]
 80022fa:	f7ff faef 	bl	80018dc <__aeabi_dsub>
 80022fe:	0002      	movs	r2, r0
 8002300:	000b      	movs	r3, r1
 8002302:	0010      	movs	r0, r2
 8002304:	0019      	movs	r1, r3
 8002306:	2200      	movs	r2, #0
 8002308:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <Read_Temperatur+0xa8>)
 800230a:	f7fe fc79 	bl	8000c00 <__aeabi_ddiv>
 800230e:	0002      	movs	r2, r0
 8002310:	000b      	movs	r3, r1
 8002312:	61ba      	str	r2, [r7, #24]
 8002314:	61fb      	str	r3, [r7, #28]

	sprintf(msg,"\n\n%f\n\n",value);
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	490c      	ldr	r1, [pc, #48]	; (800234c <Read_Temperatur+0xac>)
 800231c:	0038      	movs	r0, r7
 800231e:	f003 ffd7 	bl	80062d0 <siprintf>

	HAL_UART_Transmit(&huart2,(uint8_t*)msg,13,100);
 8002322:	0039      	movs	r1, r7
 8002324:	480a      	ldr	r0, [pc, #40]	; (8002350 <Read_Temperatur+0xb0>)
 8002326:	2364      	movs	r3, #100	; 0x64
 8002328:	220d      	movs	r2, #13
 800232a:	f002 f993 	bl	8004654 <HAL_UART_Transmit>

	HAL_Delay(50);
 800232e:	2032      	movs	r0, #50	; 0x32
 8002330:	f000 fb8e 	bl	8002a50 <HAL_Delay>

}
 8002334:	46c0      	nop			; (mov r8, r8)
 8002336:	46bd      	mov	sp, r7
 8002338:	b008      	add	sp, #32
 800233a:	bd80      	pop	{r7, pc}
 800233c:	3ff00000 	.word	0x3ff00000
 8002340:	200001fc 	.word	0x200001fc
 8002344:	407f4000 	.word	0x407f4000
 8002348:	40240000 	.word	0x40240000
 800234c:	0800a040 	.word	0x0800a040
 8002350:	2000023c 	.word	0x2000023c

08002354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002358:	f000 fb16 	bl	8002988 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800235c:	f000 f809 	bl	8002372 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002360:	f000 f8f0 	bl	8002544 <MX_GPIO_Init>
  MX_ADC_Init();
 8002364:	f000 f862 	bl	800242c <MX_ADC_Init>
  MX_USART2_UART_Init();
 8002368:	f000 f8bc 	bl	80024e4 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Read_Temperatur();
 800236c:	f7ff ff98 	bl	80022a0 <Read_Temperatur>
 8002370:	e7fc      	b.n	800236c <main+0x18>

08002372 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002372:	b590      	push	{r4, r7, lr}
 8002374:	b099      	sub	sp, #100	; 0x64
 8002376:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002378:	242c      	movs	r4, #44	; 0x2c
 800237a:	193b      	adds	r3, r7, r4
 800237c:	0018      	movs	r0, r3
 800237e:	2334      	movs	r3, #52	; 0x34
 8002380:	001a      	movs	r2, r3
 8002382:	2100      	movs	r1, #0
 8002384:	f003 f922 	bl	80055cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002388:	231c      	movs	r3, #28
 800238a:	18fb      	adds	r3, r7, r3
 800238c:	0018      	movs	r0, r3
 800238e:	2310      	movs	r3, #16
 8002390:	001a      	movs	r2, r3
 8002392:	2100      	movs	r1, #0
 8002394:	f003 f91a 	bl	80055cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002398:	003b      	movs	r3, r7
 800239a:	0018      	movs	r0, r3
 800239c:	231c      	movs	r3, #28
 800239e:	001a      	movs	r2, r3
 80023a0:	2100      	movs	r1, #0
 80023a2:	f003 f913 	bl	80055cc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80023a6:	0021      	movs	r1, r4
 80023a8:	187b      	adds	r3, r7, r1
 80023aa:	2212      	movs	r2, #18
 80023ac:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023ae:	187b      	adds	r3, r7, r1
 80023b0:	2201      	movs	r2, #1
 80023b2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80023b4:	187b      	adds	r3, r7, r1
 80023b6:	2201      	movs	r2, #1
 80023b8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023ba:	187b      	adds	r3, r7, r1
 80023bc:	2210      	movs	r2, #16
 80023be:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80023c0:	187b      	adds	r3, r7, r1
 80023c2:	2210      	movs	r2, #16
 80023c4:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80023c6:	187b      	adds	r3, r7, r1
 80023c8:	2200      	movs	r2, #0
 80023ca:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023cc:	187b      	adds	r3, r7, r1
 80023ce:	0018      	movs	r0, r3
 80023d0:	f001 faee 	bl	80039b0 <HAL_RCC_OscConfig>
 80023d4:	1e03      	subs	r3, r0, #0
 80023d6:	d001      	beq.n	80023dc <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80023d8:	f000 f8ec 	bl	80025b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023dc:	211c      	movs	r1, #28
 80023de:	187b      	adds	r3, r7, r1
 80023e0:	2207      	movs	r2, #7
 80023e2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80023e4:	187b      	adds	r3, r7, r1
 80023e6:	2200      	movs	r2, #0
 80023e8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023ea:	187b      	adds	r3, r7, r1
 80023ec:	2200      	movs	r2, #0
 80023ee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023f0:	187b      	adds	r3, r7, r1
 80023f2:	2200      	movs	r2, #0
 80023f4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80023f6:	187b      	adds	r3, r7, r1
 80023f8:	2100      	movs	r1, #0
 80023fa:	0018      	movs	r0, r3
 80023fc:	f001 fe5e 	bl	80040bc <HAL_RCC_ClockConfig>
 8002400:	1e03      	subs	r3, r0, #0
 8002402:	d001      	beq.n	8002408 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002404:	f000 f8d6 	bl	80025b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002408:	003b      	movs	r3, r7
 800240a:	2202      	movs	r2, #2
 800240c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800240e:	003b      	movs	r3, r7
 8002410:	2200      	movs	r2, #0
 8002412:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002414:	003b      	movs	r3, r7
 8002416:	0018      	movs	r0, r3
 8002418:	f001 ffca 	bl	80043b0 <HAL_RCCEx_PeriphCLKConfig>
 800241c:	1e03      	subs	r3, r0, #0
 800241e:	d001      	beq.n	8002424 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002420:	f000 f8c8 	bl	80025b4 <Error_Handler>
  }
}
 8002424:	46c0      	nop			; (mov r8, r8)
 8002426:	46bd      	mov	sp, r7
 8002428:	b019      	add	sp, #100	; 0x64
 800242a:	bd90      	pop	{r4, r7, pc}

0800242c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002432:	1d3b      	adds	r3, r7, #4
 8002434:	0018      	movs	r0, r3
 8002436:	230c      	movs	r3, #12
 8002438:	001a      	movs	r2, r3
 800243a:	2100      	movs	r1, #0
 800243c:	f003 f8c6 	bl	80055cc <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002440:	4b26      	ldr	r3, [pc, #152]	; (80024dc <MX_ADC_Init+0xb0>)
 8002442:	4a27      	ldr	r2, [pc, #156]	; (80024e0 <MX_ADC_Init+0xb4>)
 8002444:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002446:	4b25      	ldr	r3, [pc, #148]	; (80024dc <MX_ADC_Init+0xb0>)
 8002448:	2200      	movs	r2, #0
 800244a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800244c:	4b23      	ldr	r3, [pc, #140]	; (80024dc <MX_ADC_Init+0xb0>)
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002452:	4b22      	ldr	r3, [pc, #136]	; (80024dc <MX_ADC_Init+0xb0>)
 8002454:	2200      	movs	r2, #0
 8002456:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002458:	4b20      	ldr	r3, [pc, #128]	; (80024dc <MX_ADC_Init+0xb0>)
 800245a:	2201      	movs	r2, #1
 800245c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800245e:	4b1f      	ldr	r3, [pc, #124]	; (80024dc <MX_ADC_Init+0xb0>)
 8002460:	2204      	movs	r2, #4
 8002462:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002464:	4b1d      	ldr	r3, [pc, #116]	; (80024dc <MX_ADC_Init+0xb0>)
 8002466:	2200      	movs	r2, #0
 8002468:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800246a:	4b1c      	ldr	r3, [pc, #112]	; (80024dc <MX_ADC_Init+0xb0>)
 800246c:	2200      	movs	r2, #0
 800246e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002470:	4b1a      	ldr	r3, [pc, #104]	; (80024dc <MX_ADC_Init+0xb0>)
 8002472:	2200      	movs	r2, #0
 8002474:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002476:	4b19      	ldr	r3, [pc, #100]	; (80024dc <MX_ADC_Init+0xb0>)
 8002478:	2200      	movs	r2, #0
 800247a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800247c:	4b17      	ldr	r3, [pc, #92]	; (80024dc <MX_ADC_Init+0xb0>)
 800247e:	22c2      	movs	r2, #194	; 0xc2
 8002480:	32ff      	adds	r2, #255	; 0xff
 8002482:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002484:	4b15      	ldr	r3, [pc, #84]	; (80024dc <MX_ADC_Init+0xb0>)
 8002486:	2200      	movs	r2, #0
 8002488:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800248a:	4b14      	ldr	r3, [pc, #80]	; (80024dc <MX_ADC_Init+0xb0>)
 800248c:	2224      	movs	r2, #36	; 0x24
 800248e:	2100      	movs	r1, #0
 8002490:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002492:	4b12      	ldr	r3, [pc, #72]	; (80024dc <MX_ADC_Init+0xb0>)
 8002494:	2201      	movs	r2, #1
 8002496:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002498:	4b10      	ldr	r3, [pc, #64]	; (80024dc <MX_ADC_Init+0xb0>)
 800249a:	0018      	movs	r0, r3
 800249c:	f000 fafc 	bl	8002a98 <HAL_ADC_Init>
 80024a0:	1e03      	subs	r3, r0, #0
 80024a2:	d001      	beq.n	80024a8 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80024a4:	f000 f886 	bl	80025b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80024a8:	1d3b      	adds	r3, r7, #4
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80024ae:	1d3b      	adds	r3, r7, #4
 80024b0:	2280      	movs	r2, #128	; 0x80
 80024b2:	0152      	lsls	r2, r2, #5
 80024b4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80024b6:	1d3b      	adds	r3, r7, #4
 80024b8:	2280      	movs	r2, #128	; 0x80
 80024ba:	0552      	lsls	r2, r2, #21
 80024bc:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80024be:	1d3a      	adds	r2, r7, #4
 80024c0:	4b06      	ldr	r3, [pc, #24]	; (80024dc <MX_ADC_Init+0xb0>)
 80024c2:	0011      	movs	r1, r2
 80024c4:	0018      	movs	r0, r3
 80024c6:	f000 fdef 	bl	80030a8 <HAL_ADC_ConfigChannel>
 80024ca:	1e03      	subs	r3, r0, #0
 80024cc:	d001      	beq.n	80024d2 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80024ce:	f000 f871 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	46bd      	mov	sp, r7
 80024d6:	b004      	add	sp, #16
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	46c0      	nop			; (mov r8, r8)
 80024dc:	200001fc 	.word	0x200001fc
 80024e0:	40012400 	.word	0x40012400

080024e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024e8:	4b14      	ldr	r3, [pc, #80]	; (800253c <MX_USART2_UART_Init+0x58>)
 80024ea:	4a15      	ldr	r2, [pc, #84]	; (8002540 <MX_USART2_UART_Init+0x5c>)
 80024ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80024ee:	4b13      	ldr	r3, [pc, #76]	; (800253c <MX_USART2_UART_Init+0x58>)
 80024f0:	2296      	movs	r2, #150	; 0x96
 80024f2:	0192      	lsls	r2, r2, #6
 80024f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024f6:	4b11      	ldr	r3, [pc, #68]	; (800253c <MX_USART2_UART_Init+0x58>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024fc:	4b0f      	ldr	r3, [pc, #60]	; (800253c <MX_USART2_UART_Init+0x58>)
 80024fe:	2200      	movs	r2, #0
 8002500:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002502:	4b0e      	ldr	r3, [pc, #56]	; (800253c <MX_USART2_UART_Init+0x58>)
 8002504:	2200      	movs	r2, #0
 8002506:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002508:	4b0c      	ldr	r3, [pc, #48]	; (800253c <MX_USART2_UART_Init+0x58>)
 800250a:	220c      	movs	r2, #12
 800250c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800250e:	4b0b      	ldr	r3, [pc, #44]	; (800253c <MX_USART2_UART_Init+0x58>)
 8002510:	2200      	movs	r2, #0
 8002512:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002514:	4b09      	ldr	r3, [pc, #36]	; (800253c <MX_USART2_UART_Init+0x58>)
 8002516:	2200      	movs	r2, #0
 8002518:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800251a:	4b08      	ldr	r3, [pc, #32]	; (800253c <MX_USART2_UART_Init+0x58>)
 800251c:	2200      	movs	r2, #0
 800251e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <MX_USART2_UART_Init+0x58>)
 8002522:	2200      	movs	r2, #0
 8002524:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002526:	4b05      	ldr	r3, [pc, #20]	; (800253c <MX_USART2_UART_Init+0x58>)
 8002528:	0018      	movs	r0, r3
 800252a:	f002 f83f 	bl	80045ac <HAL_UART_Init>
 800252e:	1e03      	subs	r3, r0, #0
 8002530:	d001      	beq.n	8002536 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002532:	f000 f83f 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002536:	46c0      	nop			; (mov r8, r8)
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	2000023c 	.word	0x2000023c
 8002540:	40004400 	.word	0x40004400

08002544 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800254a:	1d3b      	adds	r3, r7, #4
 800254c:	0018      	movs	r0, r3
 800254e:	2314      	movs	r3, #20
 8002550:	001a      	movs	r2, r3
 8002552:	2100      	movs	r1, #0
 8002554:	f003 f83a 	bl	80055cc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002558:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <MX_GPIO_Init+0x6c>)
 800255a:	695a      	ldr	r2, [r3, #20]
 800255c:	4b14      	ldr	r3, [pc, #80]	; (80025b0 <MX_GPIO_Init+0x6c>)
 800255e:	2180      	movs	r1, #128	; 0x80
 8002560:	0289      	lsls	r1, r1, #10
 8002562:	430a      	orrs	r2, r1
 8002564:	615a      	str	r2, [r3, #20]
 8002566:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <MX_GPIO_Init+0x6c>)
 8002568:	695a      	ldr	r2, [r3, #20]
 800256a:	2380      	movs	r3, #128	; 0x80
 800256c:	029b      	lsls	r3, r3, #10
 800256e:	4013      	ands	r3, r2
 8002570:	603b      	str	r3, [r7, #0]
 8002572:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED02_GPIO_Port, LED02_Pin, GPIO_PIN_RESET);
 8002574:	2390      	movs	r3, #144	; 0x90
 8002576:	05db      	lsls	r3, r3, #23
 8002578:	2200      	movs	r2, #0
 800257a:	2120      	movs	r1, #32
 800257c:	0018      	movs	r0, r3
 800257e:	f001 f9f9 	bl	8003974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED02_Pin */
  GPIO_InitStruct.Pin = LED02_Pin;
 8002582:	1d3b      	adds	r3, r7, #4
 8002584:	2220      	movs	r2, #32
 8002586:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002588:	1d3b      	adds	r3, r7, #4
 800258a:	2201      	movs	r2, #1
 800258c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258e:	1d3b      	adds	r3, r7, #4
 8002590:	2200      	movs	r2, #0
 8002592:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002594:	1d3b      	adds	r3, r7, #4
 8002596:	2200      	movs	r2, #0
 8002598:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED02_GPIO_Port, &GPIO_InitStruct);
 800259a:	1d3a      	adds	r2, r7, #4
 800259c:	2390      	movs	r3, #144	; 0x90
 800259e:	05db      	lsls	r3, r3, #23
 80025a0:	0011      	movs	r1, r2
 80025a2:	0018      	movs	r0, r3
 80025a4:	f001 f86e 	bl	8003684 <HAL_GPIO_Init>

}
 80025a8:	46c0      	nop			; (mov r8, r8)
 80025aa:	46bd      	mov	sp, r7
 80025ac:	b006      	add	sp, #24
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40021000 	.word	0x40021000

080025b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025b8:	b672      	cpsid	i
}
 80025ba:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025bc:	e7fe      	b.n	80025bc <Error_Handler+0x8>
	...

080025c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025c6:	4b0f      	ldr	r3, [pc, #60]	; (8002604 <HAL_MspInit+0x44>)
 80025c8:	699a      	ldr	r2, [r3, #24]
 80025ca:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <HAL_MspInit+0x44>)
 80025cc:	2101      	movs	r1, #1
 80025ce:	430a      	orrs	r2, r1
 80025d0:	619a      	str	r2, [r3, #24]
 80025d2:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <HAL_MspInit+0x44>)
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	2201      	movs	r2, #1
 80025d8:	4013      	ands	r3, r2
 80025da:	607b      	str	r3, [r7, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025de:	4b09      	ldr	r3, [pc, #36]	; (8002604 <HAL_MspInit+0x44>)
 80025e0:	69da      	ldr	r2, [r3, #28]
 80025e2:	4b08      	ldr	r3, [pc, #32]	; (8002604 <HAL_MspInit+0x44>)
 80025e4:	2180      	movs	r1, #128	; 0x80
 80025e6:	0549      	lsls	r1, r1, #21
 80025e8:	430a      	orrs	r2, r1
 80025ea:	61da      	str	r2, [r3, #28]
 80025ec:	4b05      	ldr	r3, [pc, #20]	; (8002604 <HAL_MspInit+0x44>)
 80025ee:	69da      	ldr	r2, [r3, #28]
 80025f0:	2380      	movs	r3, #128	; 0x80
 80025f2:	055b      	lsls	r3, r3, #21
 80025f4:	4013      	ands	r3, r2
 80025f6:	603b      	str	r3, [r7, #0]
 80025f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025fa:	46c0      	nop			; (mov r8, r8)
 80025fc:	46bd      	mov	sp, r7
 80025fe:	b002      	add	sp, #8
 8002600:	bd80      	pop	{r7, pc}
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	40021000 	.word	0x40021000

08002608 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002608:	b590      	push	{r4, r7, lr}
 800260a:	b08b      	sub	sp, #44	; 0x2c
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002610:	2414      	movs	r4, #20
 8002612:	193b      	adds	r3, r7, r4
 8002614:	0018      	movs	r0, r3
 8002616:	2314      	movs	r3, #20
 8002618:	001a      	movs	r2, r3
 800261a:	2100      	movs	r1, #0
 800261c:	f002 ffd6 	bl	80055cc <memset>
  if(hadc->Instance==ADC1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a1d      	ldr	r2, [pc, #116]	; (800269c <HAL_ADC_MspInit+0x94>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d133      	bne.n	8002692 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800262a:	4b1d      	ldr	r3, [pc, #116]	; (80026a0 <HAL_ADC_MspInit+0x98>)
 800262c:	699a      	ldr	r2, [r3, #24]
 800262e:	4b1c      	ldr	r3, [pc, #112]	; (80026a0 <HAL_ADC_MspInit+0x98>)
 8002630:	2180      	movs	r1, #128	; 0x80
 8002632:	0089      	lsls	r1, r1, #2
 8002634:	430a      	orrs	r2, r1
 8002636:	619a      	str	r2, [r3, #24]
 8002638:	4b19      	ldr	r3, [pc, #100]	; (80026a0 <HAL_ADC_MspInit+0x98>)
 800263a:	699a      	ldr	r2, [r3, #24]
 800263c:	2380      	movs	r3, #128	; 0x80
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4013      	ands	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
 8002644:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002646:	4b16      	ldr	r3, [pc, #88]	; (80026a0 <HAL_ADC_MspInit+0x98>)
 8002648:	695a      	ldr	r2, [r3, #20]
 800264a:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <HAL_ADC_MspInit+0x98>)
 800264c:	2180      	movs	r1, #128	; 0x80
 800264e:	0289      	lsls	r1, r1, #10
 8002650:	430a      	orrs	r2, r1
 8002652:	615a      	str	r2, [r3, #20]
 8002654:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <HAL_ADC_MspInit+0x98>)
 8002656:	695a      	ldr	r2, [r3, #20]
 8002658:	2380      	movs	r3, #128	; 0x80
 800265a:	029b      	lsls	r3, r3, #10
 800265c:	4013      	ands	r3, r2
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002662:	193b      	adds	r3, r7, r4
 8002664:	2201      	movs	r2, #1
 8002666:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002668:	193b      	adds	r3, r7, r4
 800266a:	2203      	movs	r2, #3
 800266c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266e:	193b      	adds	r3, r7, r4
 8002670:	2200      	movs	r2, #0
 8002672:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002674:	193a      	adds	r2, r7, r4
 8002676:	2390      	movs	r3, #144	; 0x90
 8002678:	05db      	lsls	r3, r3, #23
 800267a:	0011      	movs	r1, r2
 800267c:	0018      	movs	r0, r3
 800267e:	f001 f801 	bl	8003684 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8002682:	2200      	movs	r2, #0
 8002684:	2100      	movs	r1, #0
 8002686:	200c      	movs	r0, #12
 8002688:	f000 ff4c 	bl	8003524 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 800268c:	200c      	movs	r0, #12
 800268e:	f000 ff5e 	bl	800354e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	46bd      	mov	sp, r7
 8002696:	b00b      	add	sp, #44	; 0x2c
 8002698:	bd90      	pop	{r4, r7, pc}
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	40012400 	.word	0x40012400
 80026a0:	40021000 	.word	0x40021000

080026a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026a4:	b590      	push	{r4, r7, lr}
 80026a6:	b08b      	sub	sp, #44	; 0x2c
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ac:	2414      	movs	r4, #20
 80026ae:	193b      	adds	r3, r7, r4
 80026b0:	0018      	movs	r0, r3
 80026b2:	2314      	movs	r3, #20
 80026b4:	001a      	movs	r2, r3
 80026b6:	2100      	movs	r1, #0
 80026b8:	f002 ff88 	bl	80055cc <memset>
  if(huart->Instance==USART2)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a20      	ldr	r2, [pc, #128]	; (8002744 <HAL_UART_MspInit+0xa0>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d13a      	bne.n	800273c <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026c6:	4b20      	ldr	r3, [pc, #128]	; (8002748 <HAL_UART_MspInit+0xa4>)
 80026c8:	69da      	ldr	r2, [r3, #28]
 80026ca:	4b1f      	ldr	r3, [pc, #124]	; (8002748 <HAL_UART_MspInit+0xa4>)
 80026cc:	2180      	movs	r1, #128	; 0x80
 80026ce:	0289      	lsls	r1, r1, #10
 80026d0:	430a      	orrs	r2, r1
 80026d2:	61da      	str	r2, [r3, #28]
 80026d4:	4b1c      	ldr	r3, [pc, #112]	; (8002748 <HAL_UART_MspInit+0xa4>)
 80026d6:	69da      	ldr	r2, [r3, #28]
 80026d8:	2380      	movs	r3, #128	; 0x80
 80026da:	029b      	lsls	r3, r3, #10
 80026dc:	4013      	ands	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
 80026e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e2:	4b19      	ldr	r3, [pc, #100]	; (8002748 <HAL_UART_MspInit+0xa4>)
 80026e4:	695a      	ldr	r2, [r3, #20]
 80026e6:	4b18      	ldr	r3, [pc, #96]	; (8002748 <HAL_UART_MspInit+0xa4>)
 80026e8:	2180      	movs	r1, #128	; 0x80
 80026ea:	0289      	lsls	r1, r1, #10
 80026ec:	430a      	orrs	r2, r1
 80026ee:	615a      	str	r2, [r3, #20]
 80026f0:	4b15      	ldr	r3, [pc, #84]	; (8002748 <HAL_UART_MspInit+0xa4>)
 80026f2:	695a      	ldr	r2, [r3, #20]
 80026f4:	2380      	movs	r3, #128	; 0x80
 80026f6:	029b      	lsls	r3, r3, #10
 80026f8:	4013      	ands	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = TX02_Pin|RX02_Pin;
 80026fe:	0021      	movs	r1, r4
 8002700:	187b      	adds	r3, r7, r1
 8002702:	220c      	movs	r2, #12
 8002704:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002706:	187b      	adds	r3, r7, r1
 8002708:	2202      	movs	r2, #2
 800270a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	187b      	adds	r3, r7, r1
 800270e:	2200      	movs	r2, #0
 8002710:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002712:	187b      	adds	r3, r7, r1
 8002714:	2203      	movs	r2, #3
 8002716:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002718:	187b      	adds	r3, r7, r1
 800271a:	2201      	movs	r2, #1
 800271c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800271e:	187a      	adds	r2, r7, r1
 8002720:	2390      	movs	r3, #144	; 0x90
 8002722:	05db      	lsls	r3, r3, #23
 8002724:	0011      	movs	r1, r2
 8002726:	0018      	movs	r0, r3
 8002728:	f000 ffac 	bl	8003684 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800272c:	2200      	movs	r2, #0
 800272e:	2100      	movs	r1, #0
 8002730:	201c      	movs	r0, #28
 8002732:	f000 fef7 	bl	8003524 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002736:	201c      	movs	r0, #28
 8002738:	f000 ff09 	bl	800354e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800273c:	46c0      	nop			; (mov r8, r8)
 800273e:	46bd      	mov	sp, r7
 8002740:	b00b      	add	sp, #44	; 0x2c
 8002742:	bd90      	pop	{r4, r7, pc}
 8002744:	40004400 	.word	0x40004400
 8002748:	40021000 	.word	0x40021000

0800274c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002750:	e7fe      	b.n	8002750 <NMI_Handler+0x4>

08002752 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002756:	e7fe      	b.n	8002756 <HardFault_Handler+0x4>

08002758 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800275c:	46c0      	nop			; (mov r8, r8)
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002770:	f000 f952 	bl	8002a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002774:	46c0      	nop			; (mov r8, r8)
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
	...

0800277c <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8002780:	4b03      	ldr	r3, [pc, #12]	; (8002790 <ADC1_COMP_IRQHandler+0x14>)
 8002782:	0018      	movs	r0, r3
 8002784:	f000 fbc0 	bl	8002f08 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8002788:	46c0      	nop			; (mov r8, r8)
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	46c0      	nop			; (mov r8, r8)
 8002790:	200001fc 	.word	0x200001fc

08002794 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002798:	4b03      	ldr	r3, [pc, #12]	; (80027a8 <USART2_IRQHandler+0x14>)
 800279a:	0018      	movs	r0, r3
 800279c:	f002 f804 	bl	80047a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80027a0:	46c0      	nop			; (mov r8, r8)
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	2000023c 	.word	0x2000023c

080027ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
	return 1;
 80027b0:	2301      	movs	r3, #1
}
 80027b2:	0018      	movs	r0, r3
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <_kill>:

int _kill(int pid, int sig)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027c2:	f002 fed9 	bl	8005578 <__errno>
 80027c6:	0003      	movs	r3, r0
 80027c8:	2216      	movs	r2, #22
 80027ca:	601a      	str	r2, [r3, #0]
	return -1;
 80027cc:	2301      	movs	r3, #1
 80027ce:	425b      	negs	r3, r3
}
 80027d0:	0018      	movs	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	b002      	add	sp, #8
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <_exit>:

void _exit (int status)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027e0:	2301      	movs	r3, #1
 80027e2:	425a      	negs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	0011      	movs	r1, r2
 80027e8:	0018      	movs	r0, r3
 80027ea:	f7ff ffe5 	bl	80027b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80027ee:	e7fe      	b.n	80027ee <_exit+0x16>

080027f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027fc:	2300      	movs	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	e00a      	b.n	8002818 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002802:	e000      	b.n	8002806 <_read+0x16>
 8002804:	bf00      	nop
 8002806:	0001      	movs	r1, r0
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	1c5a      	adds	r2, r3, #1
 800280c:	60ba      	str	r2, [r7, #8]
 800280e:	b2ca      	uxtb	r2, r1
 8002810:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	3301      	adds	r3, #1
 8002816:	617b      	str	r3, [r7, #20]
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	429a      	cmp	r2, r3
 800281e:	dbf0      	blt.n	8002802 <_read+0x12>
	}

return len;
 8002820:	687b      	ldr	r3, [r7, #4]
}
 8002822:	0018      	movs	r0, r3
 8002824:	46bd      	mov	sp, r7
 8002826:	b006      	add	sp, #24
 8002828:	bd80      	pop	{r7, pc}

0800282a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b086      	sub	sp, #24
 800282e:	af00      	add	r7, sp, #0
 8002830:	60f8      	str	r0, [r7, #12]
 8002832:	60b9      	str	r1, [r7, #8]
 8002834:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	e009      	b.n	8002850 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	1c5a      	adds	r2, r3, #1
 8002840:	60ba      	str	r2, [r7, #8]
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	0018      	movs	r0, r3
 8002846:	e000      	b.n	800284a <_write+0x20>
 8002848:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	3301      	adds	r3, #1
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	429a      	cmp	r2, r3
 8002856:	dbf1      	blt.n	800283c <_write+0x12>
	}
	return len;
 8002858:	687b      	ldr	r3, [r7, #4]
}
 800285a:	0018      	movs	r0, r3
 800285c:	46bd      	mov	sp, r7
 800285e:	b006      	add	sp, #24
 8002860:	bd80      	pop	{r7, pc}

08002862 <_close>:

int _close(int file)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b082      	sub	sp, #8
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
	return -1;
 800286a:	2301      	movs	r3, #1
 800286c:	425b      	negs	r3, r3
}
 800286e:	0018      	movs	r0, r3
 8002870:	46bd      	mov	sp, r7
 8002872:	b002      	add	sp, #8
 8002874:	bd80      	pop	{r7, pc}

08002876 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	2280      	movs	r2, #128	; 0x80
 8002884:	0192      	lsls	r2, r2, #6
 8002886:	605a      	str	r2, [r3, #4]
	return 0;
 8002888:	2300      	movs	r3, #0
}
 800288a:	0018      	movs	r0, r3
 800288c:	46bd      	mov	sp, r7
 800288e:	b002      	add	sp, #8
 8002890:	bd80      	pop	{r7, pc}

08002892 <_isatty>:

int _isatty(int file)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
	return 1;
 800289a:	2301      	movs	r3, #1
}
 800289c:	0018      	movs	r0, r3
 800289e:	46bd      	mov	sp, r7
 80028a0:	b002      	add	sp, #8
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
	return 0;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	0018      	movs	r0, r3
 80028b4:	46bd      	mov	sp, r7
 80028b6:	b004      	add	sp, #16
 80028b8:	bd80      	pop	{r7, pc}
	...

080028bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028c4:	4a14      	ldr	r2, [pc, #80]	; (8002918 <_sbrk+0x5c>)
 80028c6:	4b15      	ldr	r3, [pc, #84]	; (800291c <_sbrk+0x60>)
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028d0:	4b13      	ldr	r3, [pc, #76]	; (8002920 <_sbrk+0x64>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d102      	bne.n	80028de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028d8:	4b11      	ldr	r3, [pc, #68]	; (8002920 <_sbrk+0x64>)
 80028da:	4a12      	ldr	r2, [pc, #72]	; (8002924 <_sbrk+0x68>)
 80028dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028de:	4b10      	ldr	r3, [pc, #64]	; (8002920 <_sbrk+0x64>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	18d3      	adds	r3, r2, r3
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d207      	bcs.n	80028fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028ec:	f002 fe44 	bl	8005578 <__errno>
 80028f0:	0003      	movs	r3, r0
 80028f2:	220c      	movs	r2, #12
 80028f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028f6:	2301      	movs	r3, #1
 80028f8:	425b      	negs	r3, r3
 80028fa:	e009      	b.n	8002910 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028fc:	4b08      	ldr	r3, [pc, #32]	; (8002920 <_sbrk+0x64>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002902:	4b07      	ldr	r3, [pc, #28]	; (8002920 <_sbrk+0x64>)
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	18d2      	adds	r2, r2, r3
 800290a:	4b05      	ldr	r3, [pc, #20]	; (8002920 <_sbrk+0x64>)
 800290c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800290e:	68fb      	ldr	r3, [r7, #12]
}
 8002910:	0018      	movs	r0, r3
 8002912:	46bd      	mov	sp, r7
 8002914:	b006      	add	sp, #24
 8002916:	bd80      	pop	{r7, pc}
 8002918:	20004000 	.word	0x20004000
 800291c:	00000400 	.word	0x00000400
 8002920:	200002c0 	.word	0x200002c0
 8002924:	200002d8 	.word	0x200002d8

08002928 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800292c:	46c0      	nop			; (mov r8, r8)
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
	...

08002934 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002934:	480d      	ldr	r0, [pc, #52]	; (800296c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002936:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002938:	480d      	ldr	r0, [pc, #52]	; (8002970 <LoopForever+0x6>)
  ldr r1, =_edata
 800293a:	490e      	ldr	r1, [pc, #56]	; (8002974 <LoopForever+0xa>)
  ldr r2, =_sidata
 800293c:	4a0e      	ldr	r2, [pc, #56]	; (8002978 <LoopForever+0xe>)
  movs r3, #0
 800293e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002940:	e002      	b.n	8002948 <LoopCopyDataInit>

08002942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002946:	3304      	adds	r3, #4

08002948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800294a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800294c:	d3f9      	bcc.n	8002942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800294e:	4a0b      	ldr	r2, [pc, #44]	; (800297c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002950:	4c0b      	ldr	r4, [pc, #44]	; (8002980 <LoopForever+0x16>)
  movs r3, #0
 8002952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002954:	e001      	b.n	800295a <LoopFillZerobss>

08002956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002958:	3204      	adds	r2, #4

0800295a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800295a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800295c:	d3fb      	bcc.n	8002956 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800295e:	f7ff ffe3 	bl	8002928 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002962:	f002 fe0f 	bl	8005584 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002966:	f7ff fcf5 	bl	8002354 <main>

0800296a <LoopForever>:

LoopForever:
    b LoopForever
 800296a:	e7fe      	b.n	800296a <LoopForever>
  ldr   r0, =_estack
 800296c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002974:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002978:	0800a5ac 	.word	0x0800a5ac
  ldr r2, =_sbss
 800297c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002980:	200002d8 	.word	0x200002d8

08002984 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002984:	e7fe      	b.n	8002984 <CEC_CAN_IRQHandler>
	...

08002988 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800298c:	4b07      	ldr	r3, [pc, #28]	; (80029ac <HAL_Init+0x24>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	4b06      	ldr	r3, [pc, #24]	; (80029ac <HAL_Init+0x24>)
 8002992:	2110      	movs	r1, #16
 8002994:	430a      	orrs	r2, r1
 8002996:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002998:	2003      	movs	r0, #3
 800299a:	f000 f809 	bl	80029b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800299e:	f7ff fe0f 	bl	80025c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	0018      	movs	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	46c0      	nop			; (mov r8, r8)
 80029ac:	40022000 	.word	0x40022000

080029b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029b0:	b590      	push	{r4, r7, lr}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029b8:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <HAL_InitTick+0x5c>)
 80029ba:	681c      	ldr	r4, [r3, #0]
 80029bc:	4b14      	ldr	r3, [pc, #80]	; (8002a10 <HAL_InitTick+0x60>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	0019      	movs	r1, r3
 80029c2:	23fa      	movs	r3, #250	; 0xfa
 80029c4:	0098      	lsls	r0, r3, #2
 80029c6:	f7fd fbbb 	bl	8000140 <__udivsi3>
 80029ca:	0003      	movs	r3, r0
 80029cc:	0019      	movs	r1, r3
 80029ce:	0020      	movs	r0, r4
 80029d0:	f7fd fbb6 	bl	8000140 <__udivsi3>
 80029d4:	0003      	movs	r3, r0
 80029d6:	0018      	movs	r0, r3
 80029d8:	f000 fdc9 	bl	800356e <HAL_SYSTICK_Config>
 80029dc:	1e03      	subs	r3, r0, #0
 80029de:	d001      	beq.n	80029e4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e00f      	b.n	8002a04 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b03      	cmp	r3, #3
 80029e8:	d80b      	bhi.n	8002a02 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	2301      	movs	r3, #1
 80029ee:	425b      	negs	r3, r3
 80029f0:	2200      	movs	r2, #0
 80029f2:	0018      	movs	r0, r3
 80029f4:	f000 fd96 	bl	8003524 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029f8:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <HAL_InitTick+0x64>)
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	e000      	b.n	8002a04 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
}
 8002a04:	0018      	movs	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	b003      	add	sp, #12
 8002a0a:	bd90      	pop	{r4, r7, pc}
 8002a0c:	20000000 	.word	0x20000000
 8002a10:	20000008 	.word	0x20000008
 8002a14:	20000004 	.word	0x20000004

08002a18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <HAL_IncTick+0x1c>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	001a      	movs	r2, r3
 8002a22:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <HAL_IncTick+0x20>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	18d2      	adds	r2, r2, r3
 8002a28:	4b03      	ldr	r3, [pc, #12]	; (8002a38 <HAL_IncTick+0x20>)
 8002a2a:	601a      	str	r2, [r3, #0]
}
 8002a2c:	46c0      	nop			; (mov r8, r8)
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	20000008 	.word	0x20000008
 8002a38:	200002c4 	.word	0x200002c4

08002a3c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a40:	4b02      	ldr	r3, [pc, #8]	; (8002a4c <HAL_GetTick+0x10>)
 8002a42:	681b      	ldr	r3, [r3, #0]
}
 8002a44:	0018      	movs	r0, r3
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	200002c4 	.word	0x200002c4

08002a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a58:	f7ff fff0 	bl	8002a3c <HAL_GetTick>
 8002a5c:	0003      	movs	r3, r0
 8002a5e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	3301      	adds	r3, #1
 8002a68:	d005      	beq.n	8002a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a6a:	4b0a      	ldr	r3, [pc, #40]	; (8002a94 <HAL_Delay+0x44>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	001a      	movs	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	189b      	adds	r3, r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002a76:	46c0      	nop			; (mov r8, r8)
 8002a78:	f7ff ffe0 	bl	8002a3c <HAL_GetTick>
 8002a7c:	0002      	movs	r2, r0
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d8f7      	bhi.n	8002a78 <HAL_Delay+0x28>
  {
  }
}
 8002a88:	46c0      	nop			; (mov r8, r8)
 8002a8a:	46c0      	nop			; (mov r8, r8)
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	b004      	add	sp, #16
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	46c0      	nop			; (mov r8, r8)
 8002a94:	20000008 	.word	0x20000008

08002a98 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aa0:	230f      	movs	r3, #15
 8002aa2:	18fb      	adds	r3, r7, r3
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e125      	b.n	8002d02 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10a      	bne.n	8002ad4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2234      	movs	r2, #52	; 0x34
 8002ac8:	2100      	movs	r1, #0
 8002aca:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f7ff fd9a 	bl	8002608 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad8:	2210      	movs	r2, #16
 8002ada:	4013      	ands	r3, r2
 8002adc:	d000      	beq.n	8002ae0 <HAL_ADC_Init+0x48>
 8002ade:	e103      	b.n	8002ce8 <HAL_ADC_Init+0x250>
 8002ae0:	230f      	movs	r3, #15
 8002ae2:	18fb      	adds	r3, r7, r3
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d000      	beq.n	8002aec <HAL_ADC_Init+0x54>
 8002aea:	e0fd      	b.n	8002ce8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	2204      	movs	r2, #4
 8002af4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002af6:	d000      	beq.n	8002afa <HAL_ADC_Init+0x62>
 8002af8:	e0f6      	b.n	8002ce8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afe:	4a83      	ldr	r2, [pc, #524]	; (8002d0c <HAL_ADC_Init+0x274>)
 8002b00:	4013      	ands	r3, r2
 8002b02:	2202      	movs	r2, #2
 8002b04:	431a      	orrs	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	2203      	movs	r2, #3
 8002b12:	4013      	ands	r3, r2
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d112      	bne.n	8002b3e <HAL_ADC_Init+0xa6>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d009      	beq.n	8002b3a <HAL_ADC_Init+0xa2>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68da      	ldr	r2, [r3, #12]
 8002b2c:	2380      	movs	r3, #128	; 0x80
 8002b2e:	021b      	lsls	r3, r3, #8
 8002b30:	401a      	ands	r2, r3
 8002b32:	2380      	movs	r3, #128	; 0x80
 8002b34:	021b      	lsls	r3, r3, #8
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d101      	bne.n	8002b3e <HAL_ADC_Init+0xa6>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <HAL_ADC_Init+0xa8>
 8002b3e:	2300      	movs	r3, #0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d116      	bne.n	8002b72 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	2218      	movs	r2, #24
 8002b4c:	4393      	bics	r3, r2
 8002b4e:	0019      	movs	r1, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	0899      	lsrs	r1, r3, #2
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68da      	ldr	r2, [r3, #12]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4964      	ldr	r1, [pc, #400]	; (8002d10 <HAL_ADC_Init+0x278>)
 8002b7e:	400a      	ands	r2, r1
 8002b80:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	7e1b      	ldrb	r3, [r3, #24]
 8002b86:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	7e5b      	ldrb	r3, [r3, #25]
 8002b8c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b8e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	7e9b      	ldrb	r3, [r3, #26]
 8002b94:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002b96:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d002      	beq.n	8002ba6 <HAL_ADC_Init+0x10e>
 8002ba0:	2380      	movs	r3, #128	; 0x80
 8002ba2:	015b      	lsls	r3, r3, #5
 8002ba4:	e000      	b.n	8002ba8 <HAL_ADC_Init+0x110>
 8002ba6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002ba8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002bae:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d101      	bne.n	8002bbc <HAL_ADC_Init+0x124>
 8002bb8:	2304      	movs	r3, #4
 8002bba:	e000      	b.n	8002bbe <HAL_ADC_Init+0x126>
 8002bbc:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002bbe:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2124      	movs	r1, #36	; 0x24
 8002bc4:	5c5b      	ldrb	r3, [r3, r1]
 8002bc6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002bc8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	7edb      	ldrb	r3, [r3, #27]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d115      	bne.n	8002c04 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	7e9b      	ldrb	r3, [r3, #26]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d105      	bne.n	8002bec <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2280      	movs	r2, #128	; 0x80
 8002be4:	0252      	lsls	r2, r2, #9
 8002be6:	4313      	orrs	r3, r2
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	e00b      	b.n	8002c04 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	69da      	ldr	r2, [r3, #28]
 8002c08:	23c2      	movs	r3, #194	; 0xc2
 8002c0a:	33ff      	adds	r3, #255	; 0xff
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d007      	beq.n	8002c20 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68d9      	ldr	r1, [r3, #12]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c34:	2380      	movs	r3, #128	; 0x80
 8002c36:	055b      	lsls	r3, r3, #21
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d01b      	beq.n	8002c74 <HAL_ADC_Init+0x1dc>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d017      	beq.n	8002c74 <HAL_ADC_Init+0x1dc>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d013      	beq.n	8002c74 <HAL_ADC_Init+0x1dc>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d00f      	beq.n	8002c74 <HAL_ADC_Init+0x1dc>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c58:	2b04      	cmp	r3, #4
 8002c5a:	d00b      	beq.n	8002c74 <HAL_ADC_Init+0x1dc>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c60:	2b05      	cmp	r3, #5
 8002c62:	d007      	beq.n	8002c74 <HAL_ADC_Init+0x1dc>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c68:	2b06      	cmp	r3, #6
 8002c6a:	d003      	beq.n	8002c74 <HAL_ADC_Init+0x1dc>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c70:	2b07      	cmp	r3, #7
 8002c72:	d112      	bne.n	8002c9a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	695a      	ldr	r2, [r3, #20]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2107      	movs	r1, #7
 8002c80:	438a      	bics	r2, r1
 8002c82:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6959      	ldr	r1, [r3, #20]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8e:	2207      	movs	r2, #7
 8002c90:	401a      	ands	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	4a1c      	ldr	r2, [pc, #112]	; (8002d14 <HAL_ADC_Init+0x27c>)
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d10b      	bne.n	8002cc2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb4:	2203      	movs	r2, #3
 8002cb6:	4393      	bics	r3, r2
 8002cb8:	2201      	movs	r2, #1
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002cc0:	e01c      	b.n	8002cfc <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc6:	2212      	movs	r2, #18
 8002cc8:	4393      	bics	r3, r2
 8002cca:	2210      	movs	r2, #16
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002cde:	230f      	movs	r3, #15
 8002ce0:	18fb      	adds	r3, r7, r3
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002ce6:	e009      	b.n	8002cfc <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cec:	2210      	movs	r2, #16
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002cf4:	230f      	movs	r3, #15
 8002cf6:	18fb      	adds	r3, r7, r3
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002cfc:	230f      	movs	r3, #15
 8002cfe:	18fb      	adds	r3, r7, r3
 8002d00:	781b      	ldrb	r3, [r3, #0]
}
 8002d02:	0018      	movs	r0, r3
 8002d04:	46bd      	mov	sp, r7
 8002d06:	b004      	add	sp, #16
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	46c0      	nop			; (mov r8, r8)
 8002d0c:	fffffefd 	.word	0xfffffefd
 8002d10:	fffe0219 	.word	0xfffe0219
 8002d14:	833fffe7 	.word	0x833fffe7

08002d18 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002d18:	b590      	push	{r4, r7, lr}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d20:	230f      	movs	r3, #15
 8002d22:	18fb      	adds	r3, r7, r3
 8002d24:	2200      	movs	r2, #0
 8002d26:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2204      	movs	r2, #4
 8002d30:	4013      	ands	r3, r2
 8002d32:	d138      	bne.n	8002da6 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2234      	movs	r2, #52	; 0x34
 8002d38:	5c9b      	ldrb	r3, [r3, r2]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_ADC_Start+0x2a>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e038      	b.n	8002db4 <HAL_ADC_Start+0x9c>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2234      	movs	r2, #52	; 0x34
 8002d46:	2101      	movs	r1, #1
 8002d48:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	7e5b      	ldrb	r3, [r3, #25]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d007      	beq.n	8002d62 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002d52:	230f      	movs	r3, #15
 8002d54:	18fc      	adds	r4, r7, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f000 fab3 	bl	80032c4 <ADC_Enable>
 8002d5e:	0003      	movs	r3, r0
 8002d60:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002d62:	230f      	movs	r3, #15
 8002d64:	18fb      	adds	r3, r7, r3
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d120      	bne.n	8002dae <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d70:	4a12      	ldr	r2, [pc, #72]	; (8002dbc <HAL_ADC_Start+0xa4>)
 8002d72:	4013      	ands	r3, r2
 8002d74:	2280      	movs	r2, #128	; 0x80
 8002d76:	0052      	lsls	r2, r2, #1
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2234      	movs	r2, #52	; 0x34
 8002d88:	2100      	movs	r1, #0
 8002d8a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	221c      	movs	r2, #28
 8002d92:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2104      	movs	r1, #4
 8002da0:	430a      	orrs	r2, r1
 8002da2:	609a      	str	r2, [r3, #8]
 8002da4:	e003      	b.n	8002dae <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002da6:	230f      	movs	r3, #15
 8002da8:	18fb      	adds	r3, r7, r3
 8002daa:	2202      	movs	r2, #2
 8002dac:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002dae:	230f      	movs	r3, #15
 8002db0:	18fb      	adds	r3, r7, r3
 8002db2:	781b      	ldrb	r3, [r3, #0]
}
 8002db4:	0018      	movs	r0, r3
 8002db6:	46bd      	mov	sp, r7
 8002db8:	b005      	add	sp, #20
 8002dba:	bd90      	pop	{r4, r7, pc}
 8002dbc:	fffff0fe 	.word	0xfffff0fe

08002dc0 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	d102      	bne.n	8002dd8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002dd2:	2308      	movs	r3, #8
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	e014      	b.n	8002e02 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	2201      	movs	r2, #1
 8002de0:	4013      	ands	r3, r2
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d10b      	bne.n	8002dfe <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dea:	2220      	movs	r2, #32
 8002dec:	431a      	orrs	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2234      	movs	r2, #52	; 0x34
 8002df6:	2100      	movs	r1, #0
 8002df8:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e071      	b.n	8002ee2 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002dfe:	230c      	movs	r3, #12
 8002e00:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002e02:	f7ff fe1b 	bl	8002a3c <HAL_GetTick>
 8002e06:	0003      	movs	r3, r0
 8002e08:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002e0a:	e01f      	b.n	8002e4c <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	d01c      	beq.n	8002e4c <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d007      	beq.n	8002e28 <HAL_ADC_PollForConversion+0x68>
 8002e18:	f7ff fe10 	bl	8002a3c <HAL_GetTick>
 8002e1c:	0002      	movs	r2, r0
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d211      	bcs.n	8002e4c <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	4013      	ands	r3, r2
 8002e32:	d10b      	bne.n	8002e4c <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e38:	2204      	movs	r2, #4
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2234      	movs	r2, #52	; 0x34
 8002e44:	2100      	movs	r1, #0
 8002e46:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e04a      	b.n	8002ee2 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	4013      	ands	r3, r2
 8002e56:	d0d9      	beq.n	8002e0c <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5c:	2280      	movs	r2, #128	; 0x80
 8002e5e:	0092      	lsls	r2, r2, #2
 8002e60:	431a      	orrs	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68da      	ldr	r2, [r3, #12]
 8002e6c:	23c0      	movs	r3, #192	; 0xc0
 8002e6e:	011b      	lsls	r3, r3, #4
 8002e70:	4013      	ands	r3, r2
 8002e72:	d12d      	bne.n	8002ed0 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d129      	bne.n	8002ed0 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2208      	movs	r2, #8
 8002e84:	4013      	ands	r3, r2
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	d122      	bne.n	8002ed0 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	2204      	movs	r2, #4
 8002e92:	4013      	ands	r3, r2
 8002e94:	d110      	bne.n	8002eb8 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	210c      	movs	r1, #12
 8002ea2:	438a      	bics	r2, r1
 8002ea4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eaa:	4a10      	ldr	r2, [pc, #64]	; (8002eec <HAL_ADC_PollForConversion+0x12c>)
 8002eac:	4013      	ands	r3, r2
 8002eae:	2201      	movs	r2, #1
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	639a      	str	r2, [r3, #56]	; 0x38
 8002eb6:	e00b      	b.n	8002ed0 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec8:	2201      	movs	r2, #1
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	7e1b      	ldrb	r3, [r3, #24]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d103      	bne.n	8002ee0 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	220c      	movs	r2, #12
 8002ede:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	b004      	add	sp, #16
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	fffffefe 	.word	0xfffffefe

08002ef0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002efe:	0018      	movs	r0, r3
 8002f00:	46bd      	mov	sp, r7
 8002f02:	b002      	add	sp, #8
 8002f04:	bd80      	pop	{r7, pc}
	...

08002f08 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2204      	movs	r2, #4
 8002f18:	4013      	ands	r3, r2
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	d106      	bne.n	8002f2c <HAL_ADC_IRQHandler+0x24>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2204      	movs	r2, #4
 8002f26:	4013      	ands	r3, r2
 8002f28:	2b04      	cmp	r3, #4
 8002f2a:	d00d      	beq.n	8002f48 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2208      	movs	r2, #8
 8002f34:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d14f      	bne.n	8002fda <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2208      	movs	r2, #8
 8002f42:	4013      	ands	r3, r2
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d148      	bne.n	8002fda <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4c:	2210      	movs	r2, #16
 8002f4e:	4013      	ands	r3, r2
 8002f50:	d106      	bne.n	8002f60 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f56:	2280      	movs	r2, #128	; 0x80
 8002f58:	0092      	lsls	r2, r2, #2
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	23c0      	movs	r3, #192	; 0xc0
 8002f68:	011b      	lsls	r3, r3, #4
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	d12d      	bne.n	8002fca <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d129      	bne.n	8002fca <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2208      	movs	r2, #8
 8002f7e:	4013      	ands	r3, r2
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d122      	bne.n	8002fca <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2204      	movs	r2, #4
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	d110      	bne.n	8002fb2 <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	210c      	movs	r1, #12
 8002f9c:	438a      	bics	r2, r1
 8002f9e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa4:	4a33      	ldr	r2, [pc, #204]	; (8003074 <HAL_ADC_IRQHandler+0x16c>)
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	2201      	movs	r2, #1
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	639a      	str	r2, [r3, #56]	; 0x38
 8002fb0:	e00b      	b.n	8002fca <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f000 f853 	bl	8003078 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	220c      	movs	r2, #12
 8002fd8:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2280      	movs	r2, #128	; 0x80
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	2b80      	cmp	r3, #128	; 0x80
 8002fe6:	d115      	bne.n	8003014 <HAL_ADC_IRQHandler+0x10c>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2280      	movs	r2, #128	; 0x80
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	2b80      	cmp	r3, #128	; 0x80
 8002ff4:	d10e      	bne.n	8003014 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffa:	2280      	movs	r2, #128	; 0x80
 8002ffc:	0252      	lsls	r2, r2, #9
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	0018      	movs	r0, r3
 8003008:	f000 f83e 	bl	8003088 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2280      	movs	r2, #128	; 0x80
 8003012:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2210      	movs	r2, #16
 800301c:	4013      	ands	r3, r2
 800301e:	2b10      	cmp	r3, #16
 8003020:	d123      	bne.n	800306a <HAL_ADC_IRQHandler+0x162>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2210      	movs	r2, #16
 800302a:	4013      	ands	r3, r2
 800302c:	2b10      	cmp	r3, #16
 800302e:	d11c      	bne.n	800306a <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003034:	2b01      	cmp	r3, #1
 8003036:	d006      	beq.n	8003046 <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	2201      	movs	r2, #1
 8003040:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8003042:	2b01      	cmp	r3, #1
 8003044:	d10d      	bne.n	8003062 <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800304a:	2202      	movs	r2, #2
 800304c:	431a      	orrs	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2210      	movs	r2, #16
 8003058:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	0018      	movs	r0, r3
 800305e:	f000 f81b 	bl	8003098 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2210      	movs	r2, #16
 8003068:	601a      	str	r2, [r3, #0]
  }

}
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	46bd      	mov	sp, r7
 800306e:	b002      	add	sp, #8
 8003070:	bd80      	pop	{r7, pc}
 8003072:	46c0      	nop			; (mov r8, r8)
 8003074:	fffffefe 	.word	0xfffffefe

08003078 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003080:	46c0      	nop			; (mov r8, r8)
 8003082:	46bd      	mov	sp, r7
 8003084:	b002      	add	sp, #8
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8003090:	46c0      	nop			; (mov r8, r8)
 8003092:	46bd      	mov	sp, r7
 8003094:	b002      	add	sp, #8
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80030a0:	46c0      	nop			; (mov r8, r8)
 80030a2:	46bd      	mov	sp, r7
 80030a4:	b002      	add	sp, #8
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030b2:	230f      	movs	r3, #15
 80030b4:	18fb      	adds	r3, r7, r3
 80030b6:	2200      	movs	r2, #0
 80030b8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c2:	2380      	movs	r3, #128	; 0x80
 80030c4:	055b      	lsls	r3, r3, #21
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d011      	beq.n	80030ee <HAL_ADC_ConfigChannel+0x46>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d00d      	beq.n	80030ee <HAL_ADC_ConfigChannel+0x46>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d009      	beq.n	80030ee <HAL_ADC_ConfigChannel+0x46>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030de:	2b03      	cmp	r3, #3
 80030e0:	d005      	beq.n	80030ee <HAL_ADC_ConfigChannel+0x46>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d001      	beq.n	80030ee <HAL_ADC_ConfigChannel+0x46>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2234      	movs	r2, #52	; 0x34
 80030f2:	5c9b      	ldrb	r3, [r3, r2]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d101      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x54>
 80030f8:	2302      	movs	r3, #2
 80030fa:	e0d0      	b.n	800329e <HAL_ADC_ConfigChannel+0x1f6>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2234      	movs	r2, #52	; 0x34
 8003100:	2101      	movs	r1, #1
 8003102:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	2204      	movs	r2, #4
 800310c:	4013      	ands	r3, r2
 800310e:	d000      	beq.n	8003112 <HAL_ADC_ConfigChannel+0x6a>
 8003110:	e0b4      	b.n	800327c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	4a64      	ldr	r2, [pc, #400]	; (80032a8 <HAL_ADC_ConfigChannel+0x200>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d100      	bne.n	800311e <HAL_ADC_ConfigChannel+0x76>
 800311c:	e082      	b.n	8003224 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2201      	movs	r2, #1
 800312a:	409a      	lsls	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003138:	2380      	movs	r3, #128	; 0x80
 800313a:	055b      	lsls	r3, r3, #21
 800313c:	429a      	cmp	r2, r3
 800313e:	d037      	beq.n	80031b0 <HAL_ADC_ConfigChannel+0x108>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003144:	2b01      	cmp	r3, #1
 8003146:	d033      	beq.n	80031b0 <HAL_ADC_ConfigChannel+0x108>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	2b02      	cmp	r3, #2
 800314e:	d02f      	beq.n	80031b0 <HAL_ADC_ConfigChannel+0x108>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003154:	2b03      	cmp	r3, #3
 8003156:	d02b      	beq.n	80031b0 <HAL_ADC_ConfigChannel+0x108>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315c:	2b04      	cmp	r3, #4
 800315e:	d027      	beq.n	80031b0 <HAL_ADC_ConfigChannel+0x108>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003164:	2b05      	cmp	r3, #5
 8003166:	d023      	beq.n	80031b0 <HAL_ADC_ConfigChannel+0x108>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316c:	2b06      	cmp	r3, #6
 800316e:	d01f      	beq.n	80031b0 <HAL_ADC_ConfigChannel+0x108>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003174:	2b07      	cmp	r3, #7
 8003176:	d01b      	beq.n	80031b0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	2107      	movs	r1, #7
 8003184:	400b      	ands	r3, r1
 8003186:	429a      	cmp	r2, r3
 8003188:	d012      	beq.n	80031b0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	695a      	ldr	r2, [r3, #20]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2107      	movs	r1, #7
 8003196:	438a      	bics	r2, r1
 8003198:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6959      	ldr	r1, [r3, #20]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	2207      	movs	r2, #7
 80031a6:	401a      	ands	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b10      	cmp	r3, #16
 80031b6:	d007      	beq.n	80031c8 <HAL_ADC_ConfigChannel+0x120>
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2b11      	cmp	r3, #17
 80031be:	d003      	beq.n	80031c8 <HAL_ADC_ConfigChannel+0x120>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2b12      	cmp	r3, #18
 80031c6:	d163      	bne.n	8003290 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80031c8:	4b38      	ldr	r3, [pc, #224]	; (80032ac <HAL_ADC_ConfigChannel+0x204>)
 80031ca:	6819      	ldr	r1, [r3, #0]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b10      	cmp	r3, #16
 80031d2:	d009      	beq.n	80031e8 <HAL_ADC_ConfigChannel+0x140>
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b11      	cmp	r3, #17
 80031da:	d102      	bne.n	80031e2 <HAL_ADC_ConfigChannel+0x13a>
 80031dc:	2380      	movs	r3, #128	; 0x80
 80031de:	03db      	lsls	r3, r3, #15
 80031e0:	e004      	b.n	80031ec <HAL_ADC_ConfigChannel+0x144>
 80031e2:	2380      	movs	r3, #128	; 0x80
 80031e4:	045b      	lsls	r3, r3, #17
 80031e6:	e001      	b.n	80031ec <HAL_ADC_ConfigChannel+0x144>
 80031e8:	2380      	movs	r3, #128	; 0x80
 80031ea:	041b      	lsls	r3, r3, #16
 80031ec:	4a2f      	ldr	r2, [pc, #188]	; (80032ac <HAL_ADC_ConfigChannel+0x204>)
 80031ee:	430b      	orrs	r3, r1
 80031f0:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b10      	cmp	r3, #16
 80031f8:	d14a      	bne.n	8003290 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031fa:	4b2d      	ldr	r3, [pc, #180]	; (80032b0 <HAL_ADC_ConfigChannel+0x208>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	492d      	ldr	r1, [pc, #180]	; (80032b4 <HAL_ADC_ConfigChannel+0x20c>)
 8003200:	0018      	movs	r0, r3
 8003202:	f7fc ff9d 	bl	8000140 <__udivsi3>
 8003206:	0003      	movs	r3, r0
 8003208:	001a      	movs	r2, r3
 800320a:	0013      	movs	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	189b      	adds	r3, r3, r2
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003214:	e002      	b.n	800321c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	3b01      	subs	r3, #1
 800321a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f9      	bne.n	8003216 <HAL_ADC_ConfigChannel+0x16e>
 8003222:	e035      	b.n	8003290 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2101      	movs	r1, #1
 8003230:	4099      	lsls	r1, r3
 8003232:	000b      	movs	r3, r1
 8003234:	43d9      	mvns	r1, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	400a      	ands	r2, r1
 800323c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2b10      	cmp	r3, #16
 8003244:	d007      	beq.n	8003256 <HAL_ADC_ConfigChannel+0x1ae>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b11      	cmp	r3, #17
 800324c:	d003      	beq.n	8003256 <HAL_ADC_ConfigChannel+0x1ae>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b12      	cmp	r3, #18
 8003254:	d11c      	bne.n	8003290 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003256:	4b15      	ldr	r3, [pc, #84]	; (80032ac <HAL_ADC_ConfigChannel+0x204>)
 8003258:	6819      	ldr	r1, [r3, #0]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2b10      	cmp	r3, #16
 8003260:	d007      	beq.n	8003272 <HAL_ADC_ConfigChannel+0x1ca>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2b11      	cmp	r3, #17
 8003268:	d101      	bne.n	800326e <HAL_ADC_ConfigChannel+0x1c6>
 800326a:	4b13      	ldr	r3, [pc, #76]	; (80032b8 <HAL_ADC_ConfigChannel+0x210>)
 800326c:	e002      	b.n	8003274 <HAL_ADC_ConfigChannel+0x1cc>
 800326e:	4b13      	ldr	r3, [pc, #76]	; (80032bc <HAL_ADC_ConfigChannel+0x214>)
 8003270:	e000      	b.n	8003274 <HAL_ADC_ConfigChannel+0x1cc>
 8003272:	4b13      	ldr	r3, [pc, #76]	; (80032c0 <HAL_ADC_ConfigChannel+0x218>)
 8003274:	4a0d      	ldr	r2, [pc, #52]	; (80032ac <HAL_ADC_ConfigChannel+0x204>)
 8003276:	400b      	ands	r3, r1
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	e009      	b.n	8003290 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003280:	2220      	movs	r2, #32
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003288:	230f      	movs	r3, #15
 800328a:	18fb      	adds	r3, r7, r3
 800328c:	2201      	movs	r2, #1
 800328e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2234      	movs	r2, #52	; 0x34
 8003294:	2100      	movs	r1, #0
 8003296:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003298:	230f      	movs	r3, #15
 800329a:	18fb      	adds	r3, r7, r3
 800329c:	781b      	ldrb	r3, [r3, #0]
}
 800329e:	0018      	movs	r0, r3
 80032a0:	46bd      	mov	sp, r7
 80032a2:	b004      	add	sp, #16
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	46c0      	nop			; (mov r8, r8)
 80032a8:	00001001 	.word	0x00001001
 80032ac:	40012708 	.word	0x40012708
 80032b0:	20000000 	.word	0x20000000
 80032b4:	000f4240 	.word	0x000f4240
 80032b8:	ffbfffff 	.word	0xffbfffff
 80032bc:	feffffff 	.word	0xfeffffff
 80032c0:	ff7fffff 	.word	0xff7fffff

080032c4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	2203      	movs	r2, #3
 80032dc:	4013      	ands	r3, r2
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d112      	bne.n	8003308 <ADC_Enable+0x44>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2201      	movs	r2, #1
 80032ea:	4013      	ands	r3, r2
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d009      	beq.n	8003304 <ADC_Enable+0x40>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	2380      	movs	r3, #128	; 0x80
 80032f8:	021b      	lsls	r3, r3, #8
 80032fa:	401a      	ands	r2, r3
 80032fc:	2380      	movs	r3, #128	; 0x80
 80032fe:	021b      	lsls	r3, r3, #8
 8003300:	429a      	cmp	r2, r3
 8003302:	d101      	bne.n	8003308 <ADC_Enable+0x44>
 8003304:	2301      	movs	r3, #1
 8003306:	e000      	b.n	800330a <ADC_Enable+0x46>
 8003308:	2300      	movs	r3, #0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d152      	bne.n	80033b4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	4a2a      	ldr	r2, [pc, #168]	; (80033c0 <ADC_Enable+0xfc>)
 8003316:	4013      	ands	r3, r2
 8003318:	d00d      	beq.n	8003336 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331e:	2210      	movs	r2, #16
 8003320:	431a      	orrs	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332a:	2201      	movs	r2, #1
 800332c:	431a      	orrs	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e03f      	b.n	80033b6 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2101      	movs	r1, #1
 8003342:	430a      	orrs	r2, r1
 8003344:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003346:	4b1f      	ldr	r3, [pc, #124]	; (80033c4 <ADC_Enable+0x100>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	491f      	ldr	r1, [pc, #124]	; (80033c8 <ADC_Enable+0x104>)
 800334c:	0018      	movs	r0, r3
 800334e:	f7fc fef7 	bl	8000140 <__udivsi3>
 8003352:	0003      	movs	r3, r0
 8003354:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003356:	e002      	b.n	800335e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	3b01      	subs	r3, #1
 800335c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1f9      	bne.n	8003358 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003364:	f7ff fb6a 	bl	8002a3c <HAL_GetTick>
 8003368:	0003      	movs	r3, r0
 800336a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800336c:	e01b      	b.n	80033a6 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800336e:	f7ff fb65 	bl	8002a3c <HAL_GetTick>
 8003372:	0002      	movs	r2, r0
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d914      	bls.n	80033a6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2201      	movs	r2, #1
 8003384:	4013      	ands	r3, r2
 8003386:	2b01      	cmp	r3, #1
 8003388:	d00d      	beq.n	80033a6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338e:	2210      	movs	r2, #16
 8003390:	431a      	orrs	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339a:	2201      	movs	r2, #1
 800339c:	431a      	orrs	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e007      	b.n	80033b6 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2201      	movs	r2, #1
 80033ae:	4013      	ands	r3, r2
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d1dc      	bne.n	800336e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	0018      	movs	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b004      	add	sp, #16
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	80000017 	.word	0x80000017
 80033c4:	20000000 	.word	0x20000000
 80033c8:	000f4240 	.word	0x000f4240

080033cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	0002      	movs	r2, r0
 80033d4:	1dfb      	adds	r3, r7, #7
 80033d6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80033d8:	1dfb      	adds	r3, r7, #7
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b7f      	cmp	r3, #127	; 0x7f
 80033de:	d809      	bhi.n	80033f4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033e0:	1dfb      	adds	r3, r7, #7
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	001a      	movs	r2, r3
 80033e6:	231f      	movs	r3, #31
 80033e8:	401a      	ands	r2, r3
 80033ea:	4b04      	ldr	r3, [pc, #16]	; (80033fc <__NVIC_EnableIRQ+0x30>)
 80033ec:	2101      	movs	r1, #1
 80033ee:	4091      	lsls	r1, r2
 80033f0:	000a      	movs	r2, r1
 80033f2:	601a      	str	r2, [r3, #0]
  }
}
 80033f4:	46c0      	nop			; (mov r8, r8)
 80033f6:	46bd      	mov	sp, r7
 80033f8:	b002      	add	sp, #8
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	e000e100 	.word	0xe000e100

08003400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003400:	b590      	push	{r4, r7, lr}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	0002      	movs	r2, r0
 8003408:	6039      	str	r1, [r7, #0]
 800340a:	1dfb      	adds	r3, r7, #7
 800340c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800340e:	1dfb      	adds	r3, r7, #7
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b7f      	cmp	r3, #127	; 0x7f
 8003414:	d828      	bhi.n	8003468 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003416:	4a2f      	ldr	r2, [pc, #188]	; (80034d4 <__NVIC_SetPriority+0xd4>)
 8003418:	1dfb      	adds	r3, r7, #7
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	b25b      	sxtb	r3, r3
 800341e:	089b      	lsrs	r3, r3, #2
 8003420:	33c0      	adds	r3, #192	; 0xc0
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	589b      	ldr	r3, [r3, r2]
 8003426:	1dfa      	adds	r2, r7, #7
 8003428:	7812      	ldrb	r2, [r2, #0]
 800342a:	0011      	movs	r1, r2
 800342c:	2203      	movs	r2, #3
 800342e:	400a      	ands	r2, r1
 8003430:	00d2      	lsls	r2, r2, #3
 8003432:	21ff      	movs	r1, #255	; 0xff
 8003434:	4091      	lsls	r1, r2
 8003436:	000a      	movs	r2, r1
 8003438:	43d2      	mvns	r2, r2
 800343a:	401a      	ands	r2, r3
 800343c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	019b      	lsls	r3, r3, #6
 8003442:	22ff      	movs	r2, #255	; 0xff
 8003444:	401a      	ands	r2, r3
 8003446:	1dfb      	adds	r3, r7, #7
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	0018      	movs	r0, r3
 800344c:	2303      	movs	r3, #3
 800344e:	4003      	ands	r3, r0
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003454:	481f      	ldr	r0, [pc, #124]	; (80034d4 <__NVIC_SetPriority+0xd4>)
 8003456:	1dfb      	adds	r3, r7, #7
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	b25b      	sxtb	r3, r3
 800345c:	089b      	lsrs	r3, r3, #2
 800345e:	430a      	orrs	r2, r1
 8003460:	33c0      	adds	r3, #192	; 0xc0
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003466:	e031      	b.n	80034cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003468:	4a1b      	ldr	r2, [pc, #108]	; (80034d8 <__NVIC_SetPriority+0xd8>)
 800346a:	1dfb      	adds	r3, r7, #7
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	0019      	movs	r1, r3
 8003470:	230f      	movs	r3, #15
 8003472:	400b      	ands	r3, r1
 8003474:	3b08      	subs	r3, #8
 8003476:	089b      	lsrs	r3, r3, #2
 8003478:	3306      	adds	r3, #6
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	18d3      	adds	r3, r2, r3
 800347e:	3304      	adds	r3, #4
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	1dfa      	adds	r2, r7, #7
 8003484:	7812      	ldrb	r2, [r2, #0]
 8003486:	0011      	movs	r1, r2
 8003488:	2203      	movs	r2, #3
 800348a:	400a      	ands	r2, r1
 800348c:	00d2      	lsls	r2, r2, #3
 800348e:	21ff      	movs	r1, #255	; 0xff
 8003490:	4091      	lsls	r1, r2
 8003492:	000a      	movs	r2, r1
 8003494:	43d2      	mvns	r2, r2
 8003496:	401a      	ands	r2, r3
 8003498:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	019b      	lsls	r3, r3, #6
 800349e:	22ff      	movs	r2, #255	; 0xff
 80034a0:	401a      	ands	r2, r3
 80034a2:	1dfb      	adds	r3, r7, #7
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	0018      	movs	r0, r3
 80034a8:	2303      	movs	r3, #3
 80034aa:	4003      	ands	r3, r0
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034b0:	4809      	ldr	r0, [pc, #36]	; (80034d8 <__NVIC_SetPriority+0xd8>)
 80034b2:	1dfb      	adds	r3, r7, #7
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	001c      	movs	r4, r3
 80034b8:	230f      	movs	r3, #15
 80034ba:	4023      	ands	r3, r4
 80034bc:	3b08      	subs	r3, #8
 80034be:	089b      	lsrs	r3, r3, #2
 80034c0:	430a      	orrs	r2, r1
 80034c2:	3306      	adds	r3, #6
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	18c3      	adds	r3, r0, r3
 80034c8:	3304      	adds	r3, #4
 80034ca:	601a      	str	r2, [r3, #0]
}
 80034cc:	46c0      	nop			; (mov r8, r8)
 80034ce:	46bd      	mov	sp, r7
 80034d0:	b003      	add	sp, #12
 80034d2:	bd90      	pop	{r4, r7, pc}
 80034d4:	e000e100 	.word	0xe000e100
 80034d8:	e000ed00 	.word	0xe000ed00

080034dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	1e5a      	subs	r2, r3, #1
 80034e8:	2380      	movs	r3, #128	; 0x80
 80034ea:	045b      	lsls	r3, r3, #17
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d301      	bcc.n	80034f4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034f0:	2301      	movs	r3, #1
 80034f2:	e010      	b.n	8003516 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034f4:	4b0a      	ldr	r3, [pc, #40]	; (8003520 <SysTick_Config+0x44>)
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	3a01      	subs	r2, #1
 80034fa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034fc:	2301      	movs	r3, #1
 80034fe:	425b      	negs	r3, r3
 8003500:	2103      	movs	r1, #3
 8003502:	0018      	movs	r0, r3
 8003504:	f7ff ff7c 	bl	8003400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003508:	4b05      	ldr	r3, [pc, #20]	; (8003520 <SysTick_Config+0x44>)
 800350a:	2200      	movs	r2, #0
 800350c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800350e:	4b04      	ldr	r3, [pc, #16]	; (8003520 <SysTick_Config+0x44>)
 8003510:	2207      	movs	r2, #7
 8003512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003514:	2300      	movs	r3, #0
}
 8003516:	0018      	movs	r0, r3
 8003518:	46bd      	mov	sp, r7
 800351a:	b002      	add	sp, #8
 800351c:	bd80      	pop	{r7, pc}
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	e000e010 	.word	0xe000e010

08003524 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	60b9      	str	r1, [r7, #8]
 800352c:	607a      	str	r2, [r7, #4]
 800352e:	210f      	movs	r1, #15
 8003530:	187b      	adds	r3, r7, r1
 8003532:	1c02      	adds	r2, r0, #0
 8003534:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	187b      	adds	r3, r7, r1
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	b25b      	sxtb	r3, r3
 800353e:	0011      	movs	r1, r2
 8003540:	0018      	movs	r0, r3
 8003542:	f7ff ff5d 	bl	8003400 <__NVIC_SetPriority>
}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	46bd      	mov	sp, r7
 800354a:	b004      	add	sp, #16
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b082      	sub	sp, #8
 8003552:	af00      	add	r7, sp, #0
 8003554:	0002      	movs	r2, r0
 8003556:	1dfb      	adds	r3, r7, #7
 8003558:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800355a:	1dfb      	adds	r3, r7, #7
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	b25b      	sxtb	r3, r3
 8003560:	0018      	movs	r0, r3
 8003562:	f7ff ff33 	bl	80033cc <__NVIC_EnableIRQ>
}
 8003566:	46c0      	nop			; (mov r8, r8)
 8003568:	46bd      	mov	sp, r7
 800356a:	b002      	add	sp, #8
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b082      	sub	sp, #8
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	0018      	movs	r0, r3
 800357a:	f7ff ffaf 	bl	80034dc <SysTick_Config>
 800357e:	0003      	movs	r3, r0
}
 8003580:	0018      	movs	r0, r3
 8003582:	46bd      	mov	sp, r7
 8003584:	b002      	add	sp, #8
 8003586:	bd80      	pop	{r7, pc}

08003588 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2221      	movs	r2, #33	; 0x21
 8003594:	5c9b      	ldrb	r3, [r3, r2]
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d008      	beq.n	80035ae <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2204      	movs	r2, #4
 80035a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2220      	movs	r2, #32
 80035a6:	2100      	movs	r1, #0
 80035a8:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e020      	b.n	80035f0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	210e      	movs	r1, #14
 80035ba:	438a      	bics	r2, r1
 80035bc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2101      	movs	r1, #1
 80035ca:	438a      	bics	r2, r1
 80035cc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d6:	2101      	movs	r1, #1
 80035d8:	4091      	lsls	r1, r2
 80035da:	000a      	movs	r2, r1
 80035dc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2221      	movs	r2, #33	; 0x21
 80035e2:	2101      	movs	r1, #1
 80035e4:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2220      	movs	r2, #32
 80035ea:	2100      	movs	r1, #0
 80035ec:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	0018      	movs	r0, r3
 80035f2:	46bd      	mov	sp, r7
 80035f4:	b002      	add	sp, #8
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003600:	210f      	movs	r1, #15
 8003602:	187b      	adds	r3, r7, r1
 8003604:	2200      	movs	r2, #0
 8003606:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2221      	movs	r2, #33	; 0x21
 800360c:	5c9b      	ldrb	r3, [r3, r2]
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d006      	beq.n	8003622 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2204      	movs	r2, #4
 8003618:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800361a:	187b      	adds	r3, r7, r1
 800361c:	2201      	movs	r2, #1
 800361e:	701a      	strb	r2, [r3, #0]
 8003620:	e028      	b.n	8003674 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	210e      	movs	r1, #14
 800362e:	438a      	bics	r2, r1
 8003630:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2101      	movs	r1, #1
 800363e:	438a      	bics	r2, r1
 8003640:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364a:	2101      	movs	r1, #1
 800364c:	4091      	lsls	r1, r2
 800364e:	000a      	movs	r2, r1
 8003650:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2221      	movs	r2, #33	; 0x21
 8003656:	2101      	movs	r1, #1
 8003658:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2220      	movs	r2, #32
 800365e:	2100      	movs	r1, #0
 8003660:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003666:	2b00      	cmp	r3, #0
 8003668:	d004      	beq.n	8003674 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	0010      	movs	r0, r2
 8003672:	4798      	blx	r3
    } 
  }
  return status;
 8003674:	230f      	movs	r3, #15
 8003676:	18fb      	adds	r3, r7, r3
 8003678:	781b      	ldrb	r3, [r3, #0]
}
 800367a:	0018      	movs	r0, r3
 800367c:	46bd      	mov	sp, r7
 800367e:	b004      	add	sp, #16
 8003680:	bd80      	pop	{r7, pc}
	...

08003684 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003692:	e155      	b.n	8003940 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2101      	movs	r1, #1
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	4091      	lsls	r1, r2
 800369e:	000a      	movs	r2, r1
 80036a0:	4013      	ands	r3, r2
 80036a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d100      	bne.n	80036ac <HAL_GPIO_Init+0x28>
 80036aa:	e146      	b.n	800393a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	2203      	movs	r2, #3
 80036b2:	4013      	ands	r3, r2
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d005      	beq.n	80036c4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	2203      	movs	r2, #3
 80036be:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d130      	bne.n	8003726 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	2203      	movs	r2, #3
 80036d0:	409a      	lsls	r2, r3
 80036d2:	0013      	movs	r3, r2
 80036d4:	43da      	mvns	r2, r3
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	4013      	ands	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	409a      	lsls	r2, r3
 80036e6:	0013      	movs	r3, r2
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036fa:	2201      	movs	r2, #1
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	409a      	lsls	r2, r3
 8003700:	0013      	movs	r3, r2
 8003702:	43da      	mvns	r2, r3
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	4013      	ands	r3, r2
 8003708:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	091b      	lsrs	r3, r3, #4
 8003710:	2201      	movs	r2, #1
 8003712:	401a      	ands	r2, r3
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	409a      	lsls	r2, r3
 8003718:	0013      	movs	r3, r2
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4313      	orrs	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2203      	movs	r2, #3
 800372c:	4013      	ands	r3, r2
 800372e:	2b03      	cmp	r3, #3
 8003730:	d017      	beq.n	8003762 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	2203      	movs	r2, #3
 800373e:	409a      	lsls	r2, r3
 8003740:	0013      	movs	r3, r2
 8003742:	43da      	mvns	r2, r3
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	4013      	ands	r3, r2
 8003748:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	689a      	ldr	r2, [r3, #8]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	409a      	lsls	r2, r3
 8003754:	0013      	movs	r3, r2
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2203      	movs	r2, #3
 8003768:	4013      	ands	r3, r2
 800376a:	2b02      	cmp	r3, #2
 800376c:	d123      	bne.n	80037b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	08da      	lsrs	r2, r3, #3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	3208      	adds	r2, #8
 8003776:	0092      	lsls	r2, r2, #2
 8003778:	58d3      	ldr	r3, [r2, r3]
 800377a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	2207      	movs	r2, #7
 8003780:	4013      	ands	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	220f      	movs	r2, #15
 8003786:	409a      	lsls	r2, r3
 8003788:	0013      	movs	r3, r2
 800378a:	43da      	mvns	r2, r3
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	4013      	ands	r3, r2
 8003790:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	691a      	ldr	r2, [r3, #16]
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	2107      	movs	r1, #7
 800379a:	400b      	ands	r3, r1
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	409a      	lsls	r2, r3
 80037a0:	0013      	movs	r3, r2
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	08da      	lsrs	r2, r3, #3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3208      	adds	r2, #8
 80037b0:	0092      	lsls	r2, r2, #2
 80037b2:	6939      	ldr	r1, [r7, #16]
 80037b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	2203      	movs	r2, #3
 80037c2:	409a      	lsls	r2, r3
 80037c4:	0013      	movs	r3, r2
 80037c6:	43da      	mvns	r2, r3
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	4013      	ands	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2203      	movs	r2, #3
 80037d4:	401a      	ands	r2, r3
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	409a      	lsls	r2, r3
 80037dc:	0013      	movs	r3, r2
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	23c0      	movs	r3, #192	; 0xc0
 80037f0:	029b      	lsls	r3, r3, #10
 80037f2:	4013      	ands	r3, r2
 80037f4:	d100      	bne.n	80037f8 <HAL_GPIO_Init+0x174>
 80037f6:	e0a0      	b.n	800393a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037f8:	4b57      	ldr	r3, [pc, #348]	; (8003958 <HAL_GPIO_Init+0x2d4>)
 80037fa:	699a      	ldr	r2, [r3, #24]
 80037fc:	4b56      	ldr	r3, [pc, #344]	; (8003958 <HAL_GPIO_Init+0x2d4>)
 80037fe:	2101      	movs	r1, #1
 8003800:	430a      	orrs	r2, r1
 8003802:	619a      	str	r2, [r3, #24]
 8003804:	4b54      	ldr	r3, [pc, #336]	; (8003958 <HAL_GPIO_Init+0x2d4>)
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	2201      	movs	r2, #1
 800380a:	4013      	ands	r3, r2
 800380c:	60bb      	str	r3, [r7, #8]
 800380e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003810:	4a52      	ldr	r2, [pc, #328]	; (800395c <HAL_GPIO_Init+0x2d8>)
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	089b      	lsrs	r3, r3, #2
 8003816:	3302      	adds	r3, #2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	589b      	ldr	r3, [r3, r2]
 800381c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	2203      	movs	r2, #3
 8003822:	4013      	ands	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	220f      	movs	r2, #15
 8003828:	409a      	lsls	r2, r3
 800382a:	0013      	movs	r3, r2
 800382c:	43da      	mvns	r2, r3
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	4013      	ands	r3, r2
 8003832:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	2390      	movs	r3, #144	; 0x90
 8003838:	05db      	lsls	r3, r3, #23
 800383a:	429a      	cmp	r2, r3
 800383c:	d019      	beq.n	8003872 <HAL_GPIO_Init+0x1ee>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a47      	ldr	r2, [pc, #284]	; (8003960 <HAL_GPIO_Init+0x2dc>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d013      	beq.n	800386e <HAL_GPIO_Init+0x1ea>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a46      	ldr	r2, [pc, #280]	; (8003964 <HAL_GPIO_Init+0x2e0>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d00d      	beq.n	800386a <HAL_GPIO_Init+0x1e6>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a45      	ldr	r2, [pc, #276]	; (8003968 <HAL_GPIO_Init+0x2e4>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d007      	beq.n	8003866 <HAL_GPIO_Init+0x1e2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a44      	ldr	r2, [pc, #272]	; (800396c <HAL_GPIO_Init+0x2e8>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d101      	bne.n	8003862 <HAL_GPIO_Init+0x1de>
 800385e:	2304      	movs	r3, #4
 8003860:	e008      	b.n	8003874 <HAL_GPIO_Init+0x1f0>
 8003862:	2305      	movs	r3, #5
 8003864:	e006      	b.n	8003874 <HAL_GPIO_Init+0x1f0>
 8003866:	2303      	movs	r3, #3
 8003868:	e004      	b.n	8003874 <HAL_GPIO_Init+0x1f0>
 800386a:	2302      	movs	r3, #2
 800386c:	e002      	b.n	8003874 <HAL_GPIO_Init+0x1f0>
 800386e:	2301      	movs	r3, #1
 8003870:	e000      	b.n	8003874 <HAL_GPIO_Init+0x1f0>
 8003872:	2300      	movs	r3, #0
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	2103      	movs	r1, #3
 8003878:	400a      	ands	r2, r1
 800387a:	0092      	lsls	r2, r2, #2
 800387c:	4093      	lsls	r3, r2
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	4313      	orrs	r3, r2
 8003882:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003884:	4935      	ldr	r1, [pc, #212]	; (800395c <HAL_GPIO_Init+0x2d8>)
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	089b      	lsrs	r3, r3, #2
 800388a:	3302      	adds	r3, #2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003892:	4b37      	ldr	r3, [pc, #220]	; (8003970 <HAL_GPIO_Init+0x2ec>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	43da      	mvns	r2, r3
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	4013      	ands	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	2380      	movs	r3, #128	; 0x80
 80038a8:	025b      	lsls	r3, r3, #9
 80038aa:	4013      	ands	r3, r2
 80038ac:	d003      	beq.n	80038b6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80038b6:	4b2e      	ldr	r3, [pc, #184]	; (8003970 <HAL_GPIO_Init+0x2ec>)
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80038bc:	4b2c      	ldr	r3, [pc, #176]	; (8003970 <HAL_GPIO_Init+0x2ec>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	43da      	mvns	r2, r3
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	4013      	ands	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	2380      	movs	r3, #128	; 0x80
 80038d2:	029b      	lsls	r3, r3, #10
 80038d4:	4013      	ands	r3, r2
 80038d6:	d003      	beq.n	80038e0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	4313      	orrs	r3, r2
 80038de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80038e0:	4b23      	ldr	r3, [pc, #140]	; (8003970 <HAL_GPIO_Init+0x2ec>)
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038e6:	4b22      	ldr	r3, [pc, #136]	; (8003970 <HAL_GPIO_Init+0x2ec>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	43da      	mvns	r2, r3
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	4013      	ands	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	2380      	movs	r3, #128	; 0x80
 80038fc:	035b      	lsls	r3, r3, #13
 80038fe:	4013      	ands	r3, r2
 8003900:	d003      	beq.n	800390a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4313      	orrs	r3, r2
 8003908:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800390a:	4b19      	ldr	r3, [pc, #100]	; (8003970 <HAL_GPIO_Init+0x2ec>)
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003910:	4b17      	ldr	r3, [pc, #92]	; (8003970 <HAL_GPIO_Init+0x2ec>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	43da      	mvns	r2, r3
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	4013      	ands	r3, r2
 800391e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	2380      	movs	r3, #128	; 0x80
 8003926:	039b      	lsls	r3, r3, #14
 8003928:	4013      	ands	r3, r2
 800392a:	d003      	beq.n	8003934 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	4313      	orrs	r3, r2
 8003932:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003934:	4b0e      	ldr	r3, [pc, #56]	; (8003970 <HAL_GPIO_Init+0x2ec>)
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	3301      	adds	r3, #1
 800393e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	40da      	lsrs	r2, r3
 8003948:	1e13      	subs	r3, r2, #0
 800394a:	d000      	beq.n	800394e <HAL_GPIO_Init+0x2ca>
 800394c:	e6a2      	b.n	8003694 <HAL_GPIO_Init+0x10>
  } 
}
 800394e:	46c0      	nop			; (mov r8, r8)
 8003950:	46c0      	nop			; (mov r8, r8)
 8003952:	46bd      	mov	sp, r7
 8003954:	b006      	add	sp, #24
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40021000 	.word	0x40021000
 800395c:	40010000 	.word	0x40010000
 8003960:	48000400 	.word	0x48000400
 8003964:	48000800 	.word	0x48000800
 8003968:	48000c00 	.word	0x48000c00
 800396c:	48001000 	.word	0x48001000
 8003970:	40010400 	.word	0x40010400

08003974 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	0008      	movs	r0, r1
 800397e:	0011      	movs	r1, r2
 8003980:	1cbb      	adds	r3, r7, #2
 8003982:	1c02      	adds	r2, r0, #0
 8003984:	801a      	strh	r2, [r3, #0]
 8003986:	1c7b      	adds	r3, r7, #1
 8003988:	1c0a      	adds	r2, r1, #0
 800398a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800398c:	1c7b      	adds	r3, r7, #1
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d004      	beq.n	800399e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003994:	1cbb      	adds	r3, r7, #2
 8003996:	881a      	ldrh	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800399c:	e003      	b.n	80039a6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800399e:	1cbb      	adds	r3, r7, #2
 80039a0:	881a      	ldrh	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80039a6:	46c0      	nop			; (mov r8, r8)
 80039a8:	46bd      	mov	sp, r7
 80039aa:	b002      	add	sp, #8
 80039ac:	bd80      	pop	{r7, pc}
	...

080039b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b088      	sub	sp, #32
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d102      	bne.n	80039c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	f000 fb76 	bl	80040b0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2201      	movs	r2, #1
 80039ca:	4013      	ands	r3, r2
 80039cc:	d100      	bne.n	80039d0 <HAL_RCC_OscConfig+0x20>
 80039ce:	e08e      	b.n	8003aee <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80039d0:	4bc5      	ldr	r3, [pc, #788]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	220c      	movs	r2, #12
 80039d6:	4013      	ands	r3, r2
 80039d8:	2b04      	cmp	r3, #4
 80039da:	d00e      	beq.n	80039fa <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039dc:	4bc2      	ldr	r3, [pc, #776]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	220c      	movs	r2, #12
 80039e2:	4013      	ands	r3, r2
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	d117      	bne.n	8003a18 <HAL_RCC_OscConfig+0x68>
 80039e8:	4bbf      	ldr	r3, [pc, #764]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	23c0      	movs	r3, #192	; 0xc0
 80039ee:	025b      	lsls	r3, r3, #9
 80039f0:	401a      	ands	r2, r3
 80039f2:	2380      	movs	r3, #128	; 0x80
 80039f4:	025b      	lsls	r3, r3, #9
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d10e      	bne.n	8003a18 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039fa:	4bbb      	ldr	r3, [pc, #748]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	2380      	movs	r3, #128	; 0x80
 8003a00:	029b      	lsls	r3, r3, #10
 8003a02:	4013      	ands	r3, r2
 8003a04:	d100      	bne.n	8003a08 <HAL_RCC_OscConfig+0x58>
 8003a06:	e071      	b.n	8003aec <HAL_RCC_OscConfig+0x13c>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d000      	beq.n	8003a12 <HAL_RCC_OscConfig+0x62>
 8003a10:	e06c      	b.n	8003aec <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	f000 fb4c 	bl	80040b0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d107      	bne.n	8003a30 <HAL_RCC_OscConfig+0x80>
 8003a20:	4bb1      	ldr	r3, [pc, #708]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	4bb0      	ldr	r3, [pc, #704]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003a26:	2180      	movs	r1, #128	; 0x80
 8003a28:	0249      	lsls	r1, r1, #9
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	e02f      	b.n	8003a90 <HAL_RCC_OscConfig+0xe0>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10c      	bne.n	8003a52 <HAL_RCC_OscConfig+0xa2>
 8003a38:	4bab      	ldr	r3, [pc, #684]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	4baa      	ldr	r3, [pc, #680]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003a3e:	49ab      	ldr	r1, [pc, #684]	; (8003cec <HAL_RCC_OscConfig+0x33c>)
 8003a40:	400a      	ands	r2, r1
 8003a42:	601a      	str	r2, [r3, #0]
 8003a44:	4ba8      	ldr	r3, [pc, #672]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	4ba7      	ldr	r3, [pc, #668]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003a4a:	49a9      	ldr	r1, [pc, #676]	; (8003cf0 <HAL_RCC_OscConfig+0x340>)
 8003a4c:	400a      	ands	r2, r1
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	e01e      	b.n	8003a90 <HAL_RCC_OscConfig+0xe0>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b05      	cmp	r3, #5
 8003a58:	d10e      	bne.n	8003a78 <HAL_RCC_OscConfig+0xc8>
 8003a5a:	4ba3      	ldr	r3, [pc, #652]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	4ba2      	ldr	r3, [pc, #648]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003a60:	2180      	movs	r1, #128	; 0x80
 8003a62:	02c9      	lsls	r1, r1, #11
 8003a64:	430a      	orrs	r2, r1
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	4b9f      	ldr	r3, [pc, #636]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	4b9e      	ldr	r3, [pc, #632]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003a6e:	2180      	movs	r1, #128	; 0x80
 8003a70:	0249      	lsls	r1, r1, #9
 8003a72:	430a      	orrs	r2, r1
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	e00b      	b.n	8003a90 <HAL_RCC_OscConfig+0xe0>
 8003a78:	4b9b      	ldr	r3, [pc, #620]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	4b9a      	ldr	r3, [pc, #616]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003a7e:	499b      	ldr	r1, [pc, #620]	; (8003cec <HAL_RCC_OscConfig+0x33c>)
 8003a80:	400a      	ands	r2, r1
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	4b98      	ldr	r3, [pc, #608]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	4b97      	ldr	r3, [pc, #604]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003a8a:	4999      	ldr	r1, [pc, #612]	; (8003cf0 <HAL_RCC_OscConfig+0x340>)
 8003a8c:	400a      	ands	r2, r1
 8003a8e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d014      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a98:	f7fe ffd0 	bl	8002a3c <HAL_GetTick>
 8003a9c:	0003      	movs	r3, r0
 8003a9e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa0:	e008      	b.n	8003ab4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aa2:	f7fe ffcb 	bl	8002a3c <HAL_GetTick>
 8003aa6:	0002      	movs	r2, r0
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b64      	cmp	r3, #100	; 0x64
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e2fd      	b.n	80040b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab4:	4b8c      	ldr	r3, [pc, #560]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	2380      	movs	r3, #128	; 0x80
 8003aba:	029b      	lsls	r3, r3, #10
 8003abc:	4013      	ands	r3, r2
 8003abe:	d0f0      	beq.n	8003aa2 <HAL_RCC_OscConfig+0xf2>
 8003ac0:	e015      	b.n	8003aee <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac2:	f7fe ffbb 	bl	8002a3c <HAL_GetTick>
 8003ac6:	0003      	movs	r3, r0
 8003ac8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003acc:	f7fe ffb6 	bl	8002a3c <HAL_GetTick>
 8003ad0:	0002      	movs	r2, r0
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b64      	cmp	r3, #100	; 0x64
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e2e8      	b.n	80040b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ade:	4b82      	ldr	r3, [pc, #520]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	2380      	movs	r3, #128	; 0x80
 8003ae4:	029b      	lsls	r3, r3, #10
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	d1f0      	bne.n	8003acc <HAL_RCC_OscConfig+0x11c>
 8003aea:	e000      	b.n	8003aee <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aec:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2202      	movs	r2, #2
 8003af4:	4013      	ands	r3, r2
 8003af6:	d100      	bne.n	8003afa <HAL_RCC_OscConfig+0x14a>
 8003af8:	e06c      	b.n	8003bd4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003afa:	4b7b      	ldr	r3, [pc, #492]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	220c      	movs	r2, #12
 8003b00:	4013      	ands	r3, r2
 8003b02:	d00e      	beq.n	8003b22 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003b04:	4b78      	ldr	r3, [pc, #480]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	220c      	movs	r2, #12
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	2b08      	cmp	r3, #8
 8003b0e:	d11f      	bne.n	8003b50 <HAL_RCC_OscConfig+0x1a0>
 8003b10:	4b75      	ldr	r3, [pc, #468]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	23c0      	movs	r3, #192	; 0xc0
 8003b16:	025b      	lsls	r3, r3, #9
 8003b18:	401a      	ands	r2, r3
 8003b1a:	2380      	movs	r3, #128	; 0x80
 8003b1c:	021b      	lsls	r3, r3, #8
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d116      	bne.n	8003b50 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b22:	4b71      	ldr	r3, [pc, #452]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2202      	movs	r2, #2
 8003b28:	4013      	ands	r3, r2
 8003b2a:	d005      	beq.n	8003b38 <HAL_RCC_OscConfig+0x188>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d001      	beq.n	8003b38 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e2bb      	b.n	80040b0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b38:	4b6b      	ldr	r3, [pc, #428]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	22f8      	movs	r2, #248	; 0xf8
 8003b3e:	4393      	bics	r3, r2
 8003b40:	0019      	movs	r1, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	00da      	lsls	r2, r3, #3
 8003b48:	4b67      	ldr	r3, [pc, #412]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b4e:	e041      	b.n	8003bd4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d024      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b58:	4b63      	ldr	r3, [pc, #396]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	4b62      	ldr	r3, [pc, #392]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003b5e:	2101      	movs	r1, #1
 8003b60:	430a      	orrs	r2, r1
 8003b62:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b64:	f7fe ff6a 	bl	8002a3c <HAL_GetTick>
 8003b68:	0003      	movs	r3, r0
 8003b6a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b6e:	f7fe ff65 	bl	8002a3c <HAL_GetTick>
 8003b72:	0002      	movs	r2, r0
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e297      	b.n	80040b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b80:	4b59      	ldr	r3, [pc, #356]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2202      	movs	r2, #2
 8003b86:	4013      	ands	r3, r2
 8003b88:	d0f1      	beq.n	8003b6e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b8a:	4b57      	ldr	r3, [pc, #348]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	22f8      	movs	r2, #248	; 0xf8
 8003b90:	4393      	bics	r3, r2
 8003b92:	0019      	movs	r1, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	00da      	lsls	r2, r3, #3
 8003b9a:	4b53      	ldr	r3, [pc, #332]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	e018      	b.n	8003bd4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ba2:	4b51      	ldr	r3, [pc, #324]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	4b50      	ldr	r3, [pc, #320]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003ba8:	2101      	movs	r1, #1
 8003baa:	438a      	bics	r2, r1
 8003bac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bae:	f7fe ff45 	bl	8002a3c <HAL_GetTick>
 8003bb2:	0003      	movs	r3, r0
 8003bb4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bb8:	f7fe ff40 	bl	8002a3c <HAL_GetTick>
 8003bbc:	0002      	movs	r2, r0
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e272      	b.n	80040b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bca:	4b47      	ldr	r3, [pc, #284]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2202      	movs	r2, #2
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	d1f1      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2208      	movs	r2, #8
 8003bda:	4013      	ands	r3, r2
 8003bdc:	d036      	beq.n	8003c4c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d019      	beq.n	8003c1a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003be6:	4b40      	ldr	r3, [pc, #256]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003be8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bea:	4b3f      	ldr	r3, [pc, #252]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003bec:	2101      	movs	r1, #1
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bf2:	f7fe ff23 	bl	8002a3c <HAL_GetTick>
 8003bf6:	0003      	movs	r3, r0
 8003bf8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bfc:	f7fe ff1e 	bl	8002a3c <HAL_GetTick>
 8003c00:	0002      	movs	r2, r0
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e250      	b.n	80040b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c0e:	4b36      	ldr	r3, [pc, #216]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c12:	2202      	movs	r2, #2
 8003c14:	4013      	ands	r3, r2
 8003c16:	d0f1      	beq.n	8003bfc <HAL_RCC_OscConfig+0x24c>
 8003c18:	e018      	b.n	8003c4c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c1a:	4b33      	ldr	r3, [pc, #204]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003c1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c1e:	4b32      	ldr	r3, [pc, #200]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003c20:	2101      	movs	r1, #1
 8003c22:	438a      	bics	r2, r1
 8003c24:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c26:	f7fe ff09 	bl	8002a3c <HAL_GetTick>
 8003c2a:	0003      	movs	r3, r0
 8003c2c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c30:	f7fe ff04 	bl	8002a3c <HAL_GetTick>
 8003c34:	0002      	movs	r2, r0
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e236      	b.n	80040b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c42:	4b29      	ldr	r3, [pc, #164]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	2202      	movs	r2, #2
 8003c48:	4013      	ands	r3, r2
 8003c4a:	d1f1      	bne.n	8003c30 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2204      	movs	r2, #4
 8003c52:	4013      	ands	r3, r2
 8003c54:	d100      	bne.n	8003c58 <HAL_RCC_OscConfig+0x2a8>
 8003c56:	e0b5      	b.n	8003dc4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c58:	201f      	movs	r0, #31
 8003c5a:	183b      	adds	r3, r7, r0
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c60:	4b21      	ldr	r3, [pc, #132]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003c62:	69da      	ldr	r2, [r3, #28]
 8003c64:	2380      	movs	r3, #128	; 0x80
 8003c66:	055b      	lsls	r3, r3, #21
 8003c68:	4013      	ands	r3, r2
 8003c6a:	d110      	bne.n	8003c8e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c6c:	4b1e      	ldr	r3, [pc, #120]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003c6e:	69da      	ldr	r2, [r3, #28]
 8003c70:	4b1d      	ldr	r3, [pc, #116]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003c72:	2180      	movs	r1, #128	; 0x80
 8003c74:	0549      	lsls	r1, r1, #21
 8003c76:	430a      	orrs	r2, r1
 8003c78:	61da      	str	r2, [r3, #28]
 8003c7a:	4b1b      	ldr	r3, [pc, #108]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003c7c:	69da      	ldr	r2, [r3, #28]
 8003c7e:	2380      	movs	r3, #128	; 0x80
 8003c80:	055b      	lsls	r3, r3, #21
 8003c82:	4013      	ands	r3, r2
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c88:	183b      	adds	r3, r7, r0
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c8e:	4b19      	ldr	r3, [pc, #100]	; (8003cf4 <HAL_RCC_OscConfig+0x344>)
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	2380      	movs	r3, #128	; 0x80
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	4013      	ands	r3, r2
 8003c98:	d11a      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c9a:	4b16      	ldr	r3, [pc, #88]	; (8003cf4 <HAL_RCC_OscConfig+0x344>)
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	4b15      	ldr	r3, [pc, #84]	; (8003cf4 <HAL_RCC_OscConfig+0x344>)
 8003ca0:	2180      	movs	r1, #128	; 0x80
 8003ca2:	0049      	lsls	r1, r1, #1
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ca8:	f7fe fec8 	bl	8002a3c <HAL_GetTick>
 8003cac:	0003      	movs	r3, r0
 8003cae:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb0:	e008      	b.n	8003cc4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cb2:	f7fe fec3 	bl	8002a3c <HAL_GetTick>
 8003cb6:	0002      	movs	r2, r0
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b64      	cmp	r3, #100	; 0x64
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e1f5      	b.n	80040b0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc4:	4b0b      	ldr	r3, [pc, #44]	; (8003cf4 <HAL_RCC_OscConfig+0x344>)
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	2380      	movs	r3, #128	; 0x80
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	4013      	ands	r3, r2
 8003cce:	d0f0      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d10f      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x348>
 8003cd8:	4b03      	ldr	r3, [pc, #12]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003cda:	6a1a      	ldr	r2, [r3, #32]
 8003cdc:	4b02      	ldr	r3, [pc, #8]	; (8003ce8 <HAL_RCC_OscConfig+0x338>)
 8003cde:	2101      	movs	r1, #1
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	621a      	str	r2, [r3, #32]
 8003ce4:	e036      	b.n	8003d54 <HAL_RCC_OscConfig+0x3a4>
 8003ce6:	46c0      	nop			; (mov r8, r8)
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	fffeffff 	.word	0xfffeffff
 8003cf0:	fffbffff 	.word	0xfffbffff
 8003cf4:	40007000 	.word	0x40007000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10c      	bne.n	8003d1a <HAL_RCC_OscConfig+0x36a>
 8003d00:	4bca      	ldr	r3, [pc, #808]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003d02:	6a1a      	ldr	r2, [r3, #32]
 8003d04:	4bc9      	ldr	r3, [pc, #804]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003d06:	2101      	movs	r1, #1
 8003d08:	438a      	bics	r2, r1
 8003d0a:	621a      	str	r2, [r3, #32]
 8003d0c:	4bc7      	ldr	r3, [pc, #796]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003d0e:	6a1a      	ldr	r2, [r3, #32]
 8003d10:	4bc6      	ldr	r3, [pc, #792]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003d12:	2104      	movs	r1, #4
 8003d14:	438a      	bics	r2, r1
 8003d16:	621a      	str	r2, [r3, #32]
 8003d18:	e01c      	b.n	8003d54 <HAL_RCC_OscConfig+0x3a4>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	2b05      	cmp	r3, #5
 8003d20:	d10c      	bne.n	8003d3c <HAL_RCC_OscConfig+0x38c>
 8003d22:	4bc2      	ldr	r3, [pc, #776]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003d24:	6a1a      	ldr	r2, [r3, #32]
 8003d26:	4bc1      	ldr	r3, [pc, #772]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003d28:	2104      	movs	r1, #4
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	621a      	str	r2, [r3, #32]
 8003d2e:	4bbf      	ldr	r3, [pc, #764]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003d30:	6a1a      	ldr	r2, [r3, #32]
 8003d32:	4bbe      	ldr	r3, [pc, #760]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003d34:	2101      	movs	r1, #1
 8003d36:	430a      	orrs	r2, r1
 8003d38:	621a      	str	r2, [r3, #32]
 8003d3a:	e00b      	b.n	8003d54 <HAL_RCC_OscConfig+0x3a4>
 8003d3c:	4bbb      	ldr	r3, [pc, #748]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003d3e:	6a1a      	ldr	r2, [r3, #32]
 8003d40:	4bba      	ldr	r3, [pc, #744]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003d42:	2101      	movs	r1, #1
 8003d44:	438a      	bics	r2, r1
 8003d46:	621a      	str	r2, [r3, #32]
 8003d48:	4bb8      	ldr	r3, [pc, #736]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003d4a:	6a1a      	ldr	r2, [r3, #32]
 8003d4c:	4bb7      	ldr	r3, [pc, #732]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003d4e:	2104      	movs	r1, #4
 8003d50:	438a      	bics	r2, r1
 8003d52:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d014      	beq.n	8003d86 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d5c:	f7fe fe6e 	bl	8002a3c <HAL_GetTick>
 8003d60:	0003      	movs	r3, r0
 8003d62:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d64:	e009      	b.n	8003d7a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d66:	f7fe fe69 	bl	8002a3c <HAL_GetTick>
 8003d6a:	0002      	movs	r2, r0
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	4aaf      	ldr	r2, [pc, #700]	; (8004030 <HAL_RCC_OscConfig+0x680>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e19a      	b.n	80040b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d7a:	4bac      	ldr	r3, [pc, #688]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	4013      	ands	r3, r2
 8003d82:	d0f0      	beq.n	8003d66 <HAL_RCC_OscConfig+0x3b6>
 8003d84:	e013      	b.n	8003dae <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d86:	f7fe fe59 	bl	8002a3c <HAL_GetTick>
 8003d8a:	0003      	movs	r3, r0
 8003d8c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d8e:	e009      	b.n	8003da4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d90:	f7fe fe54 	bl	8002a3c <HAL_GetTick>
 8003d94:	0002      	movs	r2, r0
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	4aa5      	ldr	r2, [pc, #660]	; (8004030 <HAL_RCC_OscConfig+0x680>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e185      	b.n	80040b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003da4:	4ba1      	ldr	r3, [pc, #644]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	2202      	movs	r2, #2
 8003daa:	4013      	ands	r3, r2
 8003dac:	d1f0      	bne.n	8003d90 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003dae:	231f      	movs	r3, #31
 8003db0:	18fb      	adds	r3, r7, r3
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d105      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003db8:	4b9c      	ldr	r3, [pc, #624]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003dba:	69da      	ldr	r2, [r3, #28]
 8003dbc:	4b9b      	ldr	r3, [pc, #620]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003dbe:	499d      	ldr	r1, [pc, #628]	; (8004034 <HAL_RCC_OscConfig+0x684>)
 8003dc0:	400a      	ands	r2, r1
 8003dc2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2210      	movs	r2, #16
 8003dca:	4013      	ands	r3, r2
 8003dcc:	d063      	beq.n	8003e96 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d12a      	bne.n	8003e2c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003dd6:	4b95      	ldr	r3, [pc, #596]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003dd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dda:	4b94      	ldr	r3, [pc, #592]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003ddc:	2104      	movs	r1, #4
 8003dde:	430a      	orrs	r2, r1
 8003de0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003de2:	4b92      	ldr	r3, [pc, #584]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003de6:	4b91      	ldr	r3, [pc, #580]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003de8:	2101      	movs	r1, #1
 8003dea:	430a      	orrs	r2, r1
 8003dec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dee:	f7fe fe25 	bl	8002a3c <HAL_GetTick>
 8003df2:	0003      	movs	r3, r0
 8003df4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003df8:	f7fe fe20 	bl	8002a3c <HAL_GetTick>
 8003dfc:	0002      	movs	r2, r0
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e152      	b.n	80040b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003e0a:	4b88      	ldr	r3, [pc, #544]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e0e:	2202      	movs	r2, #2
 8003e10:	4013      	ands	r3, r2
 8003e12:	d0f1      	beq.n	8003df8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003e14:	4b85      	ldr	r3, [pc, #532]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e18:	22f8      	movs	r2, #248	; 0xf8
 8003e1a:	4393      	bics	r3, r2
 8003e1c:	0019      	movs	r1, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	00da      	lsls	r2, r3, #3
 8003e24:	4b81      	ldr	r3, [pc, #516]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003e26:	430a      	orrs	r2, r1
 8003e28:	635a      	str	r2, [r3, #52]	; 0x34
 8003e2a:	e034      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	3305      	adds	r3, #5
 8003e32:	d111      	bne.n	8003e58 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003e34:	4b7d      	ldr	r3, [pc, #500]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003e36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e38:	4b7c      	ldr	r3, [pc, #496]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003e3a:	2104      	movs	r1, #4
 8003e3c:	438a      	bics	r2, r1
 8003e3e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003e40:	4b7a      	ldr	r3, [pc, #488]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e44:	22f8      	movs	r2, #248	; 0xf8
 8003e46:	4393      	bics	r3, r2
 8003e48:	0019      	movs	r1, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	00da      	lsls	r2, r3, #3
 8003e50:	4b76      	ldr	r3, [pc, #472]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003e52:	430a      	orrs	r2, r1
 8003e54:	635a      	str	r2, [r3, #52]	; 0x34
 8003e56:	e01e      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003e58:	4b74      	ldr	r3, [pc, #464]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003e5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e5c:	4b73      	ldr	r3, [pc, #460]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003e5e:	2104      	movs	r1, #4
 8003e60:	430a      	orrs	r2, r1
 8003e62:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003e64:	4b71      	ldr	r3, [pc, #452]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003e66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e68:	4b70      	ldr	r3, [pc, #448]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	438a      	bics	r2, r1
 8003e6e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e70:	f7fe fde4 	bl	8002a3c <HAL_GetTick>
 8003e74:	0003      	movs	r3, r0
 8003e76:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003e78:	e008      	b.n	8003e8c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003e7a:	f7fe fddf 	bl	8002a3c <HAL_GetTick>
 8003e7e:	0002      	movs	r2, r0
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e111      	b.n	80040b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003e8c:	4b67      	ldr	r3, [pc, #412]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e90:	2202      	movs	r2, #2
 8003e92:	4013      	ands	r3, r2
 8003e94:	d1f1      	bne.n	8003e7a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	d05c      	beq.n	8003f5a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003ea0:	4b62      	ldr	r3, [pc, #392]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	220c      	movs	r2, #12
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	2b0c      	cmp	r3, #12
 8003eaa:	d00e      	beq.n	8003eca <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003eac:	4b5f      	ldr	r3, [pc, #380]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	220c      	movs	r2, #12
 8003eb2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	d114      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003eb8:	4b5c      	ldr	r3, [pc, #368]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	23c0      	movs	r3, #192	; 0xc0
 8003ebe:	025b      	lsls	r3, r3, #9
 8003ec0:	401a      	ands	r2, r3
 8003ec2:	23c0      	movs	r3, #192	; 0xc0
 8003ec4:	025b      	lsls	r3, r3, #9
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d10b      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003eca:	4b58      	ldr	r3, [pc, #352]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003ecc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ece:	2380      	movs	r3, #128	; 0x80
 8003ed0:	025b      	lsls	r3, r3, #9
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	d040      	beq.n	8003f58 <HAL_RCC_OscConfig+0x5a8>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d03c      	beq.n	8003f58 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e0e6      	b.n	80040b0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d01b      	beq.n	8003f22 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003eea:	4b50      	ldr	r3, [pc, #320]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003eec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eee:	4b4f      	ldr	r3, [pc, #316]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003ef0:	2180      	movs	r1, #128	; 0x80
 8003ef2:	0249      	lsls	r1, r1, #9
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef8:	f7fe fda0 	bl	8002a3c <HAL_GetTick>
 8003efc:	0003      	movs	r3, r0
 8003efe:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003f00:	e008      	b.n	8003f14 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f02:	f7fe fd9b 	bl	8002a3c <HAL_GetTick>
 8003f06:	0002      	movs	r2, r0
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e0cd      	b.n	80040b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003f14:	4b45      	ldr	r3, [pc, #276]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003f16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f18:	2380      	movs	r3, #128	; 0x80
 8003f1a:	025b      	lsls	r3, r3, #9
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	d0f0      	beq.n	8003f02 <HAL_RCC_OscConfig+0x552>
 8003f20:	e01b      	b.n	8003f5a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003f22:	4b42      	ldr	r3, [pc, #264]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003f24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f26:	4b41      	ldr	r3, [pc, #260]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003f28:	4943      	ldr	r1, [pc, #268]	; (8004038 <HAL_RCC_OscConfig+0x688>)
 8003f2a:	400a      	ands	r2, r1
 8003f2c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f2e:	f7fe fd85 	bl	8002a3c <HAL_GetTick>
 8003f32:	0003      	movs	r3, r0
 8003f34:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f38:	f7fe fd80 	bl	8002a3c <HAL_GetTick>
 8003f3c:	0002      	movs	r2, r0
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e0b2      	b.n	80040b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003f4a:	4b38      	ldr	r3, [pc, #224]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f4e:	2380      	movs	r3, #128	; 0x80
 8003f50:	025b      	lsls	r3, r3, #9
 8003f52:	4013      	ands	r3, r2
 8003f54:	d1f0      	bne.n	8003f38 <HAL_RCC_OscConfig+0x588>
 8003f56:	e000      	b.n	8003f5a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003f58:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d100      	bne.n	8003f64 <HAL_RCC_OscConfig+0x5b4>
 8003f62:	e0a4      	b.n	80040ae <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f64:	4b31      	ldr	r3, [pc, #196]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	220c      	movs	r2, #12
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d100      	bne.n	8003f72 <HAL_RCC_OscConfig+0x5c2>
 8003f70:	e078      	b.n	8004064 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d14c      	bne.n	8004014 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f7a:	4b2c      	ldr	r3, [pc, #176]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	4b2b      	ldr	r3, [pc, #172]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003f80:	492e      	ldr	r1, [pc, #184]	; (800403c <HAL_RCC_OscConfig+0x68c>)
 8003f82:	400a      	ands	r2, r1
 8003f84:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f86:	f7fe fd59 	bl	8002a3c <HAL_GetTick>
 8003f8a:	0003      	movs	r3, r0
 8003f8c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f90:	f7fe fd54 	bl	8002a3c <HAL_GetTick>
 8003f94:	0002      	movs	r2, r0
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e086      	b.n	80040b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fa2:	4b22      	ldr	r3, [pc, #136]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	2380      	movs	r3, #128	; 0x80
 8003fa8:	049b      	lsls	r3, r3, #18
 8003faa:	4013      	ands	r3, r2
 8003fac:	d1f0      	bne.n	8003f90 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fae:	4b1f      	ldr	r3, [pc, #124]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb2:	220f      	movs	r2, #15
 8003fb4:	4393      	bics	r3, r2
 8003fb6:	0019      	movs	r1, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fbc:	4b1b      	ldr	r3, [pc, #108]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	62da      	str	r2, [r3, #44]	; 0x2c
 8003fc2:	4b1a      	ldr	r3, [pc, #104]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	4a1e      	ldr	r2, [pc, #120]	; (8004040 <HAL_RCC_OscConfig+0x690>)
 8003fc8:	4013      	ands	r3, r2
 8003fca:	0019      	movs	r1, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	4b15      	ldr	r3, [pc, #84]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fdc:	4b13      	ldr	r3, [pc, #76]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	4b12      	ldr	r3, [pc, #72]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8003fe2:	2180      	movs	r1, #128	; 0x80
 8003fe4:	0449      	lsls	r1, r1, #17
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fea:	f7fe fd27 	bl	8002a3c <HAL_GetTick>
 8003fee:	0003      	movs	r3, r0
 8003ff0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ff4:	f7fe fd22 	bl	8002a3c <HAL_GetTick>
 8003ff8:	0002      	movs	r2, r0
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e054      	b.n	80040b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004006:	4b09      	ldr	r3, [pc, #36]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	2380      	movs	r3, #128	; 0x80
 800400c:	049b      	lsls	r3, r3, #18
 800400e:	4013      	ands	r3, r2
 8004010:	d0f0      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x644>
 8004012:	e04c      	b.n	80040ae <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004014:	4b05      	ldr	r3, [pc, #20]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	4b04      	ldr	r3, [pc, #16]	; (800402c <HAL_RCC_OscConfig+0x67c>)
 800401a:	4908      	ldr	r1, [pc, #32]	; (800403c <HAL_RCC_OscConfig+0x68c>)
 800401c:	400a      	ands	r2, r1
 800401e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004020:	f7fe fd0c 	bl	8002a3c <HAL_GetTick>
 8004024:	0003      	movs	r3, r0
 8004026:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004028:	e015      	b.n	8004056 <HAL_RCC_OscConfig+0x6a6>
 800402a:	46c0      	nop			; (mov r8, r8)
 800402c:	40021000 	.word	0x40021000
 8004030:	00001388 	.word	0x00001388
 8004034:	efffffff 	.word	0xefffffff
 8004038:	fffeffff 	.word	0xfffeffff
 800403c:	feffffff 	.word	0xfeffffff
 8004040:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004044:	f7fe fcfa 	bl	8002a3c <HAL_GetTick>
 8004048:	0002      	movs	r2, r0
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e02c      	b.n	80040b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004056:	4b18      	ldr	r3, [pc, #96]	; (80040b8 <HAL_RCC_OscConfig+0x708>)
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	2380      	movs	r3, #128	; 0x80
 800405c:	049b      	lsls	r3, r3, #18
 800405e:	4013      	ands	r3, r2
 8004060:	d1f0      	bne.n	8004044 <HAL_RCC_OscConfig+0x694>
 8004062:	e024      	b.n	80040ae <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004068:	2b01      	cmp	r3, #1
 800406a:	d101      	bne.n	8004070 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e01f      	b.n	80040b0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004070:	4b11      	ldr	r3, [pc, #68]	; (80040b8 <HAL_RCC_OscConfig+0x708>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004076:	4b10      	ldr	r3, [pc, #64]	; (80040b8 <HAL_RCC_OscConfig+0x708>)
 8004078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	23c0      	movs	r3, #192	; 0xc0
 8004080:	025b      	lsls	r3, r3, #9
 8004082:	401a      	ands	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004088:	429a      	cmp	r2, r3
 800408a:	d10e      	bne.n	80040aa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	220f      	movs	r2, #15
 8004090:	401a      	ands	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004096:	429a      	cmp	r2, r3
 8004098:	d107      	bne.n	80040aa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	23f0      	movs	r3, #240	; 0xf0
 800409e:	039b      	lsls	r3, r3, #14
 80040a0:	401a      	ands	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d001      	beq.n	80040ae <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e000      	b.n	80040b0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	0018      	movs	r0, r3
 80040b2:	46bd      	mov	sp, r7
 80040b4:	b008      	add	sp, #32
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	40021000 	.word	0x40021000

080040bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e0bf      	b.n	8004250 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040d0:	4b61      	ldr	r3, [pc, #388]	; (8004258 <HAL_RCC_ClockConfig+0x19c>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2201      	movs	r2, #1
 80040d6:	4013      	ands	r3, r2
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d911      	bls.n	8004102 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040de:	4b5e      	ldr	r3, [pc, #376]	; (8004258 <HAL_RCC_ClockConfig+0x19c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2201      	movs	r2, #1
 80040e4:	4393      	bics	r3, r2
 80040e6:	0019      	movs	r1, r3
 80040e8:	4b5b      	ldr	r3, [pc, #364]	; (8004258 <HAL_RCC_ClockConfig+0x19c>)
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f0:	4b59      	ldr	r3, [pc, #356]	; (8004258 <HAL_RCC_ClockConfig+0x19c>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2201      	movs	r2, #1
 80040f6:	4013      	ands	r3, r2
 80040f8:	683a      	ldr	r2, [r7, #0]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d001      	beq.n	8004102 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e0a6      	b.n	8004250 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2202      	movs	r2, #2
 8004108:	4013      	ands	r3, r2
 800410a:	d015      	beq.n	8004138 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2204      	movs	r2, #4
 8004112:	4013      	ands	r3, r2
 8004114:	d006      	beq.n	8004124 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004116:	4b51      	ldr	r3, [pc, #324]	; (800425c <HAL_RCC_ClockConfig+0x1a0>)
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	4b50      	ldr	r3, [pc, #320]	; (800425c <HAL_RCC_ClockConfig+0x1a0>)
 800411c:	21e0      	movs	r1, #224	; 0xe0
 800411e:	00c9      	lsls	r1, r1, #3
 8004120:	430a      	orrs	r2, r1
 8004122:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004124:	4b4d      	ldr	r3, [pc, #308]	; (800425c <HAL_RCC_ClockConfig+0x1a0>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	22f0      	movs	r2, #240	; 0xf0
 800412a:	4393      	bics	r3, r2
 800412c:	0019      	movs	r1, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	4b4a      	ldr	r3, [pc, #296]	; (800425c <HAL_RCC_ClockConfig+0x1a0>)
 8004134:	430a      	orrs	r2, r1
 8004136:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2201      	movs	r2, #1
 800413e:	4013      	ands	r3, r2
 8004140:	d04c      	beq.n	80041dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d107      	bne.n	800415a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800414a:	4b44      	ldr	r3, [pc, #272]	; (800425c <HAL_RCC_ClockConfig+0x1a0>)
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	2380      	movs	r3, #128	; 0x80
 8004150:	029b      	lsls	r3, r3, #10
 8004152:	4013      	ands	r3, r2
 8004154:	d120      	bne.n	8004198 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e07a      	b.n	8004250 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2b02      	cmp	r3, #2
 8004160:	d107      	bne.n	8004172 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004162:	4b3e      	ldr	r3, [pc, #248]	; (800425c <HAL_RCC_ClockConfig+0x1a0>)
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	2380      	movs	r3, #128	; 0x80
 8004168:	049b      	lsls	r3, r3, #18
 800416a:	4013      	ands	r3, r2
 800416c:	d114      	bne.n	8004198 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e06e      	b.n	8004250 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2b03      	cmp	r3, #3
 8004178:	d107      	bne.n	800418a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800417a:	4b38      	ldr	r3, [pc, #224]	; (800425c <HAL_RCC_ClockConfig+0x1a0>)
 800417c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800417e:	2380      	movs	r3, #128	; 0x80
 8004180:	025b      	lsls	r3, r3, #9
 8004182:	4013      	ands	r3, r2
 8004184:	d108      	bne.n	8004198 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e062      	b.n	8004250 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800418a:	4b34      	ldr	r3, [pc, #208]	; (800425c <HAL_RCC_ClockConfig+0x1a0>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2202      	movs	r2, #2
 8004190:	4013      	ands	r3, r2
 8004192:	d101      	bne.n	8004198 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e05b      	b.n	8004250 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004198:	4b30      	ldr	r3, [pc, #192]	; (800425c <HAL_RCC_ClockConfig+0x1a0>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	2203      	movs	r2, #3
 800419e:	4393      	bics	r3, r2
 80041a0:	0019      	movs	r1, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	4b2d      	ldr	r3, [pc, #180]	; (800425c <HAL_RCC_ClockConfig+0x1a0>)
 80041a8:	430a      	orrs	r2, r1
 80041aa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041ac:	f7fe fc46 	bl	8002a3c <HAL_GetTick>
 80041b0:	0003      	movs	r3, r0
 80041b2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b4:	e009      	b.n	80041ca <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041b6:	f7fe fc41 	bl	8002a3c <HAL_GetTick>
 80041ba:	0002      	movs	r2, r0
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	4a27      	ldr	r2, [pc, #156]	; (8004260 <HAL_RCC_ClockConfig+0x1a4>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e042      	b.n	8004250 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ca:	4b24      	ldr	r3, [pc, #144]	; (800425c <HAL_RCC_ClockConfig+0x1a0>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	220c      	movs	r2, #12
 80041d0:	401a      	ands	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	429a      	cmp	r2, r3
 80041da:	d1ec      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041dc:	4b1e      	ldr	r3, [pc, #120]	; (8004258 <HAL_RCC_ClockConfig+0x19c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2201      	movs	r2, #1
 80041e2:	4013      	ands	r3, r2
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d211      	bcs.n	800420e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ea:	4b1b      	ldr	r3, [pc, #108]	; (8004258 <HAL_RCC_ClockConfig+0x19c>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2201      	movs	r2, #1
 80041f0:	4393      	bics	r3, r2
 80041f2:	0019      	movs	r1, r3
 80041f4:	4b18      	ldr	r3, [pc, #96]	; (8004258 <HAL_RCC_ClockConfig+0x19c>)
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041fc:	4b16      	ldr	r3, [pc, #88]	; (8004258 <HAL_RCC_ClockConfig+0x19c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2201      	movs	r2, #1
 8004202:	4013      	ands	r3, r2
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	429a      	cmp	r2, r3
 8004208:	d001      	beq.n	800420e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e020      	b.n	8004250 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2204      	movs	r2, #4
 8004214:	4013      	ands	r3, r2
 8004216:	d009      	beq.n	800422c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004218:	4b10      	ldr	r3, [pc, #64]	; (800425c <HAL_RCC_ClockConfig+0x1a0>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	4a11      	ldr	r2, [pc, #68]	; (8004264 <HAL_RCC_ClockConfig+0x1a8>)
 800421e:	4013      	ands	r3, r2
 8004220:	0019      	movs	r1, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68da      	ldr	r2, [r3, #12]
 8004226:	4b0d      	ldr	r3, [pc, #52]	; (800425c <HAL_RCC_ClockConfig+0x1a0>)
 8004228:	430a      	orrs	r2, r1
 800422a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800422c:	f000 f820 	bl	8004270 <HAL_RCC_GetSysClockFreq>
 8004230:	0001      	movs	r1, r0
 8004232:	4b0a      	ldr	r3, [pc, #40]	; (800425c <HAL_RCC_ClockConfig+0x1a0>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	091b      	lsrs	r3, r3, #4
 8004238:	220f      	movs	r2, #15
 800423a:	4013      	ands	r3, r2
 800423c:	4a0a      	ldr	r2, [pc, #40]	; (8004268 <HAL_RCC_ClockConfig+0x1ac>)
 800423e:	5cd3      	ldrb	r3, [r2, r3]
 8004240:	000a      	movs	r2, r1
 8004242:	40da      	lsrs	r2, r3
 8004244:	4b09      	ldr	r3, [pc, #36]	; (800426c <HAL_RCC_ClockConfig+0x1b0>)
 8004246:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004248:	2003      	movs	r0, #3
 800424a:	f7fe fbb1 	bl	80029b0 <HAL_InitTick>
  
  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	0018      	movs	r0, r3
 8004252:	46bd      	mov	sp, r7
 8004254:	b004      	add	sp, #16
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40022000 	.word	0x40022000
 800425c:	40021000 	.word	0x40021000
 8004260:	00001388 	.word	0x00001388
 8004264:	fffff8ff 	.word	0xfffff8ff
 8004268:	0800a0e8 	.word	0x0800a0e8
 800426c:	20000000 	.word	0x20000000

08004270 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004270:	b590      	push	{r4, r7, lr}
 8004272:	b08f      	sub	sp, #60	; 0x3c
 8004274:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004276:	2314      	movs	r3, #20
 8004278:	18fb      	adds	r3, r7, r3
 800427a:	4a38      	ldr	r2, [pc, #224]	; (800435c <HAL_RCC_GetSysClockFreq+0xec>)
 800427c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800427e:	c313      	stmia	r3!, {r0, r1, r4}
 8004280:	6812      	ldr	r2, [r2, #0]
 8004282:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004284:	1d3b      	adds	r3, r7, #4
 8004286:	4a36      	ldr	r2, [pc, #216]	; (8004360 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004288:	ca13      	ldmia	r2!, {r0, r1, r4}
 800428a:	c313      	stmia	r3!, {r0, r1, r4}
 800428c:	6812      	ldr	r2, [r2, #0]
 800428e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004290:	2300      	movs	r3, #0
 8004292:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004294:	2300      	movs	r3, #0
 8004296:	62bb      	str	r3, [r7, #40]	; 0x28
 8004298:	2300      	movs	r3, #0
 800429a:	637b      	str	r3, [r7, #52]	; 0x34
 800429c:	2300      	movs	r3, #0
 800429e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80042a4:	4b2f      	ldr	r3, [pc, #188]	; (8004364 <HAL_RCC_GetSysClockFreq+0xf4>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ac:	220c      	movs	r2, #12
 80042ae:	4013      	ands	r3, r2
 80042b0:	2b0c      	cmp	r3, #12
 80042b2:	d047      	beq.n	8004344 <HAL_RCC_GetSysClockFreq+0xd4>
 80042b4:	d849      	bhi.n	800434a <HAL_RCC_GetSysClockFreq+0xda>
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	d002      	beq.n	80042c0 <HAL_RCC_GetSysClockFreq+0x50>
 80042ba:	2b08      	cmp	r3, #8
 80042bc:	d003      	beq.n	80042c6 <HAL_RCC_GetSysClockFreq+0x56>
 80042be:	e044      	b.n	800434a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042c0:	4b29      	ldr	r3, [pc, #164]	; (8004368 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042c2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80042c4:	e044      	b.n	8004350 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80042c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c8:	0c9b      	lsrs	r3, r3, #18
 80042ca:	220f      	movs	r2, #15
 80042cc:	4013      	ands	r3, r2
 80042ce:	2214      	movs	r2, #20
 80042d0:	18ba      	adds	r2, r7, r2
 80042d2:	5cd3      	ldrb	r3, [r2, r3]
 80042d4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80042d6:	4b23      	ldr	r3, [pc, #140]	; (8004364 <HAL_RCC_GetSysClockFreq+0xf4>)
 80042d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042da:	220f      	movs	r2, #15
 80042dc:	4013      	ands	r3, r2
 80042de:	1d3a      	adds	r2, r7, #4
 80042e0:	5cd3      	ldrb	r3, [r2, r3]
 80042e2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80042e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042e6:	23c0      	movs	r3, #192	; 0xc0
 80042e8:	025b      	lsls	r3, r3, #9
 80042ea:	401a      	ands	r2, r3
 80042ec:	2380      	movs	r3, #128	; 0x80
 80042ee:	025b      	lsls	r3, r3, #9
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d109      	bne.n	8004308 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80042f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042f6:	481c      	ldr	r0, [pc, #112]	; (8004368 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042f8:	f7fb ff22 	bl	8000140 <__udivsi3>
 80042fc:	0003      	movs	r3, r0
 80042fe:	001a      	movs	r2, r3
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	4353      	muls	r3, r2
 8004304:	637b      	str	r3, [r7, #52]	; 0x34
 8004306:	e01a      	b.n	800433e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800430a:	23c0      	movs	r3, #192	; 0xc0
 800430c:	025b      	lsls	r3, r3, #9
 800430e:	401a      	ands	r2, r3
 8004310:	23c0      	movs	r3, #192	; 0xc0
 8004312:	025b      	lsls	r3, r3, #9
 8004314:	429a      	cmp	r2, r3
 8004316:	d109      	bne.n	800432c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004318:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800431a:	4814      	ldr	r0, [pc, #80]	; (800436c <HAL_RCC_GetSysClockFreq+0xfc>)
 800431c:	f7fb ff10 	bl	8000140 <__udivsi3>
 8004320:	0003      	movs	r3, r0
 8004322:	001a      	movs	r2, r3
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	4353      	muls	r3, r2
 8004328:	637b      	str	r3, [r7, #52]	; 0x34
 800432a:	e008      	b.n	800433e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800432c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800432e:	480e      	ldr	r0, [pc, #56]	; (8004368 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004330:	f7fb ff06 	bl	8000140 <__udivsi3>
 8004334:	0003      	movs	r3, r0
 8004336:	001a      	movs	r2, r3
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	4353      	muls	r3, r2
 800433c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800433e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004340:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004342:	e005      	b.n	8004350 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004344:	4b09      	ldr	r3, [pc, #36]	; (800436c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004346:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004348:	e002      	b.n	8004350 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800434a:	4b07      	ldr	r3, [pc, #28]	; (8004368 <HAL_RCC_GetSysClockFreq+0xf8>)
 800434c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800434e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004352:	0018      	movs	r0, r3
 8004354:	46bd      	mov	sp, r7
 8004356:	b00f      	add	sp, #60	; 0x3c
 8004358:	bd90      	pop	{r4, r7, pc}
 800435a:	46c0      	nop			; (mov r8, r8)
 800435c:	0800a048 	.word	0x0800a048
 8004360:	0800a058 	.word	0x0800a058
 8004364:	40021000 	.word	0x40021000
 8004368:	007a1200 	.word	0x007a1200
 800436c:	02dc6c00 	.word	0x02dc6c00

08004370 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004374:	4b02      	ldr	r3, [pc, #8]	; (8004380 <HAL_RCC_GetHCLKFreq+0x10>)
 8004376:	681b      	ldr	r3, [r3, #0]
}
 8004378:	0018      	movs	r0, r3
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	46c0      	nop			; (mov r8, r8)
 8004380:	20000000 	.word	0x20000000

08004384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004388:	f7ff fff2 	bl	8004370 <HAL_RCC_GetHCLKFreq>
 800438c:	0001      	movs	r1, r0
 800438e:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	0a1b      	lsrs	r3, r3, #8
 8004394:	2207      	movs	r2, #7
 8004396:	4013      	ands	r3, r2
 8004398:	4a04      	ldr	r2, [pc, #16]	; (80043ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800439a:	5cd3      	ldrb	r3, [r2, r3]
 800439c:	40d9      	lsrs	r1, r3
 800439e:	000b      	movs	r3, r1
}    
 80043a0:	0018      	movs	r0, r3
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	46c0      	nop			; (mov r8, r8)
 80043a8:	40021000 	.word	0x40021000
 80043ac:	0800a0f8 	.word	0x0800a0f8

080043b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80043bc:	2300      	movs	r3, #0
 80043be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	2380      	movs	r3, #128	; 0x80
 80043c6:	025b      	lsls	r3, r3, #9
 80043c8:	4013      	ands	r3, r2
 80043ca:	d100      	bne.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80043cc:	e08e      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80043ce:	2017      	movs	r0, #23
 80043d0:	183b      	adds	r3, r7, r0
 80043d2:	2200      	movs	r2, #0
 80043d4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043d6:	4b6e      	ldr	r3, [pc, #440]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80043d8:	69da      	ldr	r2, [r3, #28]
 80043da:	2380      	movs	r3, #128	; 0x80
 80043dc:	055b      	lsls	r3, r3, #21
 80043de:	4013      	ands	r3, r2
 80043e0:	d110      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043e2:	4b6b      	ldr	r3, [pc, #428]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80043e4:	69da      	ldr	r2, [r3, #28]
 80043e6:	4b6a      	ldr	r3, [pc, #424]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80043e8:	2180      	movs	r1, #128	; 0x80
 80043ea:	0549      	lsls	r1, r1, #21
 80043ec:	430a      	orrs	r2, r1
 80043ee:	61da      	str	r2, [r3, #28]
 80043f0:	4b67      	ldr	r3, [pc, #412]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80043f2:	69da      	ldr	r2, [r3, #28]
 80043f4:	2380      	movs	r3, #128	; 0x80
 80043f6:	055b      	lsls	r3, r3, #21
 80043f8:	4013      	ands	r3, r2
 80043fa:	60bb      	str	r3, [r7, #8]
 80043fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043fe:	183b      	adds	r3, r7, r0
 8004400:	2201      	movs	r2, #1
 8004402:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004404:	4b63      	ldr	r3, [pc, #396]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	2380      	movs	r3, #128	; 0x80
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	4013      	ands	r3, r2
 800440e:	d11a      	bne.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004410:	4b60      	ldr	r3, [pc, #384]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	4b5f      	ldr	r3, [pc, #380]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004416:	2180      	movs	r1, #128	; 0x80
 8004418:	0049      	lsls	r1, r1, #1
 800441a:	430a      	orrs	r2, r1
 800441c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800441e:	f7fe fb0d 	bl	8002a3c <HAL_GetTick>
 8004422:	0003      	movs	r3, r0
 8004424:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004426:	e008      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004428:	f7fe fb08 	bl	8002a3c <HAL_GetTick>
 800442c:	0002      	movs	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b64      	cmp	r3, #100	; 0x64
 8004434:	d901      	bls.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e0a6      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800443a:	4b56      	ldr	r3, [pc, #344]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	2380      	movs	r3, #128	; 0x80
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	4013      	ands	r3, r2
 8004444:	d0f0      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004446:	4b52      	ldr	r3, [pc, #328]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004448:	6a1a      	ldr	r2, [r3, #32]
 800444a:	23c0      	movs	r3, #192	; 0xc0
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4013      	ands	r3, r2
 8004450:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d034      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	23c0      	movs	r3, #192	; 0xc0
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4013      	ands	r3, r2
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	429a      	cmp	r2, r3
 8004466:	d02c      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004468:	4b49      	ldr	r3, [pc, #292]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	4a4a      	ldr	r2, [pc, #296]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800446e:	4013      	ands	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004472:	4b47      	ldr	r3, [pc, #284]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004474:	6a1a      	ldr	r2, [r3, #32]
 8004476:	4b46      	ldr	r3, [pc, #280]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004478:	2180      	movs	r1, #128	; 0x80
 800447a:	0249      	lsls	r1, r1, #9
 800447c:	430a      	orrs	r2, r1
 800447e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004480:	4b43      	ldr	r3, [pc, #268]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004482:	6a1a      	ldr	r2, [r3, #32]
 8004484:	4b42      	ldr	r3, [pc, #264]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004486:	4945      	ldr	r1, [pc, #276]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004488:	400a      	ands	r2, r1
 800448a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800448c:	4b40      	ldr	r3, [pc, #256]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2201      	movs	r2, #1
 8004496:	4013      	ands	r3, r2
 8004498:	d013      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800449a:	f7fe facf 	bl	8002a3c <HAL_GetTick>
 800449e:	0003      	movs	r3, r0
 80044a0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044a2:	e009      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044a4:	f7fe faca 	bl	8002a3c <HAL_GetTick>
 80044a8:	0002      	movs	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	4a3c      	ldr	r2, [pc, #240]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e067      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b8:	4b35      	ldr	r3, [pc, #212]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	2202      	movs	r2, #2
 80044be:	4013      	ands	r3, r2
 80044c0:	d0f0      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044c2:	4b33      	ldr	r3, [pc, #204]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	4a34      	ldr	r2, [pc, #208]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80044c8:	4013      	ands	r3, r2
 80044ca:	0019      	movs	r1, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	4b2f      	ldr	r3, [pc, #188]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80044d2:	430a      	orrs	r2, r1
 80044d4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80044d6:	2317      	movs	r3, #23
 80044d8:	18fb      	adds	r3, r7, r3
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d105      	bne.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044e0:	4b2b      	ldr	r3, [pc, #172]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80044e2:	69da      	ldr	r2, [r3, #28]
 80044e4:	4b2a      	ldr	r3, [pc, #168]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80044e6:	492f      	ldr	r1, [pc, #188]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80044e8:	400a      	ands	r2, r1
 80044ea:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2201      	movs	r2, #1
 80044f2:	4013      	ands	r3, r2
 80044f4:	d009      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044f6:	4b26      	ldr	r3, [pc, #152]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80044f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fa:	2203      	movs	r2, #3
 80044fc:	4393      	bics	r3, r2
 80044fe:	0019      	movs	r1, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	4b22      	ldr	r3, [pc, #136]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004506:	430a      	orrs	r2, r1
 8004508:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2202      	movs	r2, #2
 8004510:	4013      	ands	r3, r2
 8004512:	d009      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004514:	4b1e      	ldr	r3, [pc, #120]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004518:	4a23      	ldr	r2, [pc, #140]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800451a:	4013      	ands	r3, r2
 800451c:	0019      	movs	r1, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68da      	ldr	r2, [r3, #12]
 8004522:	4b1b      	ldr	r3, [pc, #108]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004524:	430a      	orrs	r2, r1
 8004526:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2220      	movs	r2, #32
 800452e:	4013      	ands	r3, r2
 8004530:	d009      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004532:	4b17      	ldr	r3, [pc, #92]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004536:	2210      	movs	r2, #16
 8004538:	4393      	bics	r3, r2
 800453a:	0019      	movs	r1, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691a      	ldr	r2, [r3, #16]
 8004540:	4b13      	ldr	r3, [pc, #76]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004542:	430a      	orrs	r2, r1
 8004544:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	2380      	movs	r3, #128	; 0x80
 800454c:	029b      	lsls	r3, r3, #10
 800454e:	4013      	ands	r3, r2
 8004550:	d009      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004552:	4b0f      	ldr	r3, [pc, #60]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004556:	2280      	movs	r2, #128	; 0x80
 8004558:	4393      	bics	r3, r2
 800455a:	0019      	movs	r1, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	699a      	ldr	r2, [r3, #24]
 8004560:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004562:	430a      	orrs	r2, r1
 8004564:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	2380      	movs	r3, #128	; 0x80
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	4013      	ands	r3, r2
 8004570:	d009      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004572:	4b07      	ldr	r3, [pc, #28]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004576:	2240      	movs	r2, #64	; 0x40
 8004578:	4393      	bics	r3, r2
 800457a:	0019      	movs	r1, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	695a      	ldr	r2, [r3, #20]
 8004580:	4b03      	ldr	r3, [pc, #12]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004582:	430a      	orrs	r2, r1
 8004584:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	0018      	movs	r0, r3
 800458a:	46bd      	mov	sp, r7
 800458c:	b006      	add	sp, #24
 800458e:	bd80      	pop	{r7, pc}
 8004590:	40021000 	.word	0x40021000
 8004594:	40007000 	.word	0x40007000
 8004598:	fffffcff 	.word	0xfffffcff
 800459c:	fffeffff 	.word	0xfffeffff
 80045a0:	00001388 	.word	0x00001388
 80045a4:	efffffff 	.word	0xefffffff
 80045a8:	fffcffff 	.word	0xfffcffff

080045ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e044      	b.n	8004648 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d107      	bne.n	80045d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2274      	movs	r2, #116	; 0x74
 80045ca:	2100      	movs	r1, #0
 80045cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	0018      	movs	r0, r3
 80045d2:	f7fe f867 	bl	80026a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2224      	movs	r2, #36	; 0x24
 80045da:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2101      	movs	r1, #1
 80045e8:	438a      	bics	r2, r1
 80045ea:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	0018      	movs	r0, r3
 80045f0:	f000 fbce 	bl	8004d90 <UART_SetConfig>
 80045f4:	0003      	movs	r3, r0
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d101      	bne.n	80045fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e024      	b.n	8004648 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	0018      	movs	r0, r3
 800460a:	f000 fd49 	bl	80050a0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	490d      	ldr	r1, [pc, #52]	; (8004650 <HAL_UART_Init+0xa4>)
 800461a:	400a      	ands	r2, r1
 800461c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	212a      	movs	r1, #42	; 0x2a
 800462a:	438a      	bics	r2, r1
 800462c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2101      	movs	r1, #1
 800463a:	430a      	orrs	r2, r1
 800463c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	0018      	movs	r0, r3
 8004642:	f000 fde1 	bl	8005208 <UART_CheckIdleState>
 8004646:	0003      	movs	r3, r0
}
 8004648:	0018      	movs	r0, r3
 800464a:	46bd      	mov	sp, r7
 800464c:	b002      	add	sp, #8
 800464e:	bd80      	pop	{r7, pc}
 8004650:	ffffb7ff 	.word	0xffffb7ff

08004654 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b08a      	sub	sp, #40	; 0x28
 8004658:	af02      	add	r7, sp, #8
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	603b      	str	r3, [r7, #0]
 8004660:	1dbb      	adds	r3, r7, #6
 8004662:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004668:	2b20      	cmp	r3, #32
 800466a:	d000      	beq.n	800466e <HAL_UART_Transmit+0x1a>
 800466c:	e096      	b.n	800479c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <HAL_UART_Transmit+0x28>
 8004674:	1dbb      	adds	r3, r7, #6
 8004676:	881b      	ldrh	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d101      	bne.n	8004680 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e08e      	b.n	800479e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	689a      	ldr	r2, [r3, #8]
 8004684:	2380      	movs	r3, #128	; 0x80
 8004686:	015b      	lsls	r3, r3, #5
 8004688:	429a      	cmp	r2, r3
 800468a:	d109      	bne.n	80046a0 <HAL_UART_Transmit+0x4c>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d105      	bne.n	80046a0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2201      	movs	r2, #1
 8004698:	4013      	ands	r3, r2
 800469a:	d001      	beq.n	80046a0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e07e      	b.n	800479e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2274      	movs	r2, #116	; 0x74
 80046a4:	5c9b      	ldrb	r3, [r3, r2]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d101      	bne.n	80046ae <HAL_UART_Transmit+0x5a>
 80046aa:	2302      	movs	r3, #2
 80046ac:	e077      	b.n	800479e <HAL_UART_Transmit+0x14a>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2274      	movs	r2, #116	; 0x74
 80046b2:	2101      	movs	r1, #1
 80046b4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2280      	movs	r2, #128	; 0x80
 80046ba:	2100      	movs	r1, #0
 80046bc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2221      	movs	r2, #33	; 0x21
 80046c2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046c4:	f7fe f9ba 	bl	8002a3c <HAL_GetTick>
 80046c8:	0003      	movs	r3, r0
 80046ca:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	1dba      	adds	r2, r7, #6
 80046d0:	2150      	movs	r1, #80	; 0x50
 80046d2:	8812      	ldrh	r2, [r2, #0]
 80046d4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	1dba      	adds	r2, r7, #6
 80046da:	2152      	movs	r1, #82	; 0x52
 80046dc:	8812      	ldrh	r2, [r2, #0]
 80046de:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	689a      	ldr	r2, [r3, #8]
 80046e4:	2380      	movs	r3, #128	; 0x80
 80046e6:	015b      	lsls	r3, r3, #5
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d108      	bne.n	80046fe <HAL_UART_Transmit+0xaa>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d104      	bne.n	80046fe <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80046f4:	2300      	movs	r3, #0
 80046f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	61bb      	str	r3, [r7, #24]
 80046fc:	e003      	b.n	8004706 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004702:	2300      	movs	r3, #0
 8004704:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2274      	movs	r2, #116	; 0x74
 800470a:	2100      	movs	r1, #0
 800470c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800470e:	e02d      	b.n	800476c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	0013      	movs	r3, r2
 800471a:	2200      	movs	r2, #0
 800471c:	2180      	movs	r1, #128	; 0x80
 800471e:	f000 fdbb 	bl	8005298 <UART_WaitOnFlagUntilTimeout>
 8004722:	1e03      	subs	r3, r0, #0
 8004724:	d001      	beq.n	800472a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e039      	b.n	800479e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10b      	bne.n	8004748 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	881a      	ldrh	r2, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	05d2      	lsls	r2, r2, #23
 800473a:	0dd2      	lsrs	r2, r2, #23
 800473c:	b292      	uxth	r2, r2
 800473e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	3302      	adds	r3, #2
 8004744:	61bb      	str	r3, [r7, #24]
 8004746:	e008      	b.n	800475a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	781a      	ldrb	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	b292      	uxth	r2, r2
 8004752:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	3301      	adds	r3, #1
 8004758:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2252      	movs	r2, #82	; 0x52
 800475e:	5a9b      	ldrh	r3, [r3, r2]
 8004760:	b29b      	uxth	r3, r3
 8004762:	3b01      	subs	r3, #1
 8004764:	b299      	uxth	r1, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2252      	movs	r2, #82	; 0x52
 800476a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2252      	movs	r2, #82	; 0x52
 8004770:	5a9b      	ldrh	r3, [r3, r2]
 8004772:	b29b      	uxth	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1cb      	bne.n	8004710 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	0013      	movs	r3, r2
 8004782:	2200      	movs	r2, #0
 8004784:	2140      	movs	r1, #64	; 0x40
 8004786:	f000 fd87 	bl	8005298 <UART_WaitOnFlagUntilTimeout>
 800478a:	1e03      	subs	r3, r0, #0
 800478c:	d001      	beq.n	8004792 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e005      	b.n	800479e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2220      	movs	r2, #32
 8004796:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004798:	2300      	movs	r3, #0
 800479a:	e000      	b.n	800479e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800479c:	2302      	movs	r3, #2
  }
}
 800479e:	0018      	movs	r0, r3
 80047a0:	46bd      	mov	sp, r7
 80047a2:	b008      	add	sp, #32
 80047a4:	bd80      	pop	{r7, pc}
	...

080047a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047a8:	b590      	push	{r4, r7, lr}
 80047aa:	b0ab      	sub	sp, #172	; 0xac
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	22a4      	movs	r2, #164	; 0xa4
 80047b8:	18b9      	adds	r1, r7, r2
 80047ba:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	20a0      	movs	r0, #160	; 0xa0
 80047c4:	1839      	adds	r1, r7, r0
 80047c6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	219c      	movs	r1, #156	; 0x9c
 80047d0:	1879      	adds	r1, r7, r1
 80047d2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80047d4:	0011      	movs	r1, r2
 80047d6:	18bb      	adds	r3, r7, r2
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a99      	ldr	r2, [pc, #612]	; (8004a40 <HAL_UART_IRQHandler+0x298>)
 80047dc:	4013      	ands	r3, r2
 80047de:	2298      	movs	r2, #152	; 0x98
 80047e0:	18bc      	adds	r4, r7, r2
 80047e2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80047e4:	18bb      	adds	r3, r7, r2
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d114      	bne.n	8004816 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80047ec:	187b      	adds	r3, r7, r1
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2220      	movs	r2, #32
 80047f2:	4013      	ands	r3, r2
 80047f4:	d00f      	beq.n	8004816 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047f6:	183b      	adds	r3, r7, r0
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2220      	movs	r2, #32
 80047fc:	4013      	ands	r3, r2
 80047fe:	d00a      	beq.n	8004816 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004804:	2b00      	cmp	r3, #0
 8004806:	d100      	bne.n	800480a <HAL_UART_IRQHandler+0x62>
 8004808:	e296      	b.n	8004d38 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	0010      	movs	r0, r2
 8004812:	4798      	blx	r3
      }
      return;
 8004814:	e290      	b.n	8004d38 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004816:	2398      	movs	r3, #152	; 0x98
 8004818:	18fb      	adds	r3, r7, r3
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d100      	bne.n	8004822 <HAL_UART_IRQHandler+0x7a>
 8004820:	e114      	b.n	8004a4c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004822:	239c      	movs	r3, #156	; 0x9c
 8004824:	18fb      	adds	r3, r7, r3
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2201      	movs	r2, #1
 800482a:	4013      	ands	r3, r2
 800482c:	d106      	bne.n	800483c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800482e:	23a0      	movs	r3, #160	; 0xa0
 8004830:	18fb      	adds	r3, r7, r3
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a83      	ldr	r2, [pc, #524]	; (8004a44 <HAL_UART_IRQHandler+0x29c>)
 8004836:	4013      	ands	r3, r2
 8004838:	d100      	bne.n	800483c <HAL_UART_IRQHandler+0x94>
 800483a:	e107      	b.n	8004a4c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800483c:	23a4      	movs	r3, #164	; 0xa4
 800483e:	18fb      	adds	r3, r7, r3
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2201      	movs	r2, #1
 8004844:	4013      	ands	r3, r2
 8004846:	d012      	beq.n	800486e <HAL_UART_IRQHandler+0xc6>
 8004848:	23a0      	movs	r3, #160	; 0xa0
 800484a:	18fb      	adds	r3, r7, r3
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	2380      	movs	r3, #128	; 0x80
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	4013      	ands	r3, r2
 8004854:	d00b      	beq.n	800486e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2201      	movs	r2, #1
 800485c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2280      	movs	r2, #128	; 0x80
 8004862:	589b      	ldr	r3, [r3, r2]
 8004864:	2201      	movs	r2, #1
 8004866:	431a      	orrs	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2180      	movs	r1, #128	; 0x80
 800486c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800486e:	23a4      	movs	r3, #164	; 0xa4
 8004870:	18fb      	adds	r3, r7, r3
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2202      	movs	r2, #2
 8004876:	4013      	ands	r3, r2
 8004878:	d011      	beq.n	800489e <HAL_UART_IRQHandler+0xf6>
 800487a:	239c      	movs	r3, #156	; 0x9c
 800487c:	18fb      	adds	r3, r7, r3
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2201      	movs	r2, #1
 8004882:	4013      	ands	r3, r2
 8004884:	d00b      	beq.n	800489e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2202      	movs	r2, #2
 800488c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2280      	movs	r2, #128	; 0x80
 8004892:	589b      	ldr	r3, [r3, r2]
 8004894:	2204      	movs	r2, #4
 8004896:	431a      	orrs	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2180      	movs	r1, #128	; 0x80
 800489c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800489e:	23a4      	movs	r3, #164	; 0xa4
 80048a0:	18fb      	adds	r3, r7, r3
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2204      	movs	r2, #4
 80048a6:	4013      	ands	r3, r2
 80048a8:	d011      	beq.n	80048ce <HAL_UART_IRQHandler+0x126>
 80048aa:	239c      	movs	r3, #156	; 0x9c
 80048ac:	18fb      	adds	r3, r7, r3
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2201      	movs	r2, #1
 80048b2:	4013      	ands	r3, r2
 80048b4:	d00b      	beq.n	80048ce <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2204      	movs	r2, #4
 80048bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2280      	movs	r2, #128	; 0x80
 80048c2:	589b      	ldr	r3, [r3, r2]
 80048c4:	2202      	movs	r2, #2
 80048c6:	431a      	orrs	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2180      	movs	r1, #128	; 0x80
 80048cc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80048ce:	23a4      	movs	r3, #164	; 0xa4
 80048d0:	18fb      	adds	r3, r7, r3
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2208      	movs	r2, #8
 80048d6:	4013      	ands	r3, r2
 80048d8:	d017      	beq.n	800490a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80048da:	23a0      	movs	r3, #160	; 0xa0
 80048dc:	18fb      	adds	r3, r7, r3
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2220      	movs	r2, #32
 80048e2:	4013      	ands	r3, r2
 80048e4:	d105      	bne.n	80048f2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80048e6:	239c      	movs	r3, #156	; 0x9c
 80048e8:	18fb      	adds	r3, r7, r3
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2201      	movs	r2, #1
 80048ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80048f0:	d00b      	beq.n	800490a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2208      	movs	r2, #8
 80048f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2280      	movs	r2, #128	; 0x80
 80048fe:	589b      	ldr	r3, [r3, r2]
 8004900:	2208      	movs	r2, #8
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2180      	movs	r1, #128	; 0x80
 8004908:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800490a:	23a4      	movs	r3, #164	; 0xa4
 800490c:	18fb      	adds	r3, r7, r3
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	2380      	movs	r3, #128	; 0x80
 8004912:	011b      	lsls	r3, r3, #4
 8004914:	4013      	ands	r3, r2
 8004916:	d013      	beq.n	8004940 <HAL_UART_IRQHandler+0x198>
 8004918:	23a0      	movs	r3, #160	; 0xa0
 800491a:	18fb      	adds	r3, r7, r3
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	2380      	movs	r3, #128	; 0x80
 8004920:	04db      	lsls	r3, r3, #19
 8004922:	4013      	ands	r3, r2
 8004924:	d00c      	beq.n	8004940 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2280      	movs	r2, #128	; 0x80
 800492c:	0112      	lsls	r2, r2, #4
 800492e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2280      	movs	r2, #128	; 0x80
 8004934:	589b      	ldr	r3, [r3, r2]
 8004936:	2220      	movs	r2, #32
 8004938:	431a      	orrs	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2180      	movs	r1, #128	; 0x80
 800493e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2280      	movs	r2, #128	; 0x80
 8004944:	589b      	ldr	r3, [r3, r2]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d100      	bne.n	800494c <HAL_UART_IRQHandler+0x1a4>
 800494a:	e1f7      	b.n	8004d3c <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800494c:	23a4      	movs	r3, #164	; 0xa4
 800494e:	18fb      	adds	r3, r7, r3
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2220      	movs	r2, #32
 8004954:	4013      	ands	r3, r2
 8004956:	d00e      	beq.n	8004976 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004958:	23a0      	movs	r3, #160	; 0xa0
 800495a:	18fb      	adds	r3, r7, r3
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2220      	movs	r2, #32
 8004960:	4013      	ands	r3, r2
 8004962:	d008      	beq.n	8004976 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004968:	2b00      	cmp	r3, #0
 800496a:	d004      	beq.n	8004976 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	0010      	movs	r0, r2
 8004974:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2280      	movs	r2, #128	; 0x80
 800497a:	589b      	ldr	r3, [r3, r2]
 800497c:	2194      	movs	r1, #148	; 0x94
 800497e:	187a      	adds	r2, r7, r1
 8004980:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	2240      	movs	r2, #64	; 0x40
 800498a:	4013      	ands	r3, r2
 800498c:	2b40      	cmp	r3, #64	; 0x40
 800498e:	d004      	beq.n	800499a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004990:	187b      	adds	r3, r7, r1
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2228      	movs	r2, #40	; 0x28
 8004996:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004998:	d047      	beq.n	8004a2a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	0018      	movs	r0, r3
 800499e:	f000 fd3f 	bl	8005420 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	2240      	movs	r2, #64	; 0x40
 80049aa:	4013      	ands	r3, r2
 80049ac:	2b40      	cmp	r3, #64	; 0x40
 80049ae:	d137      	bne.n	8004a20 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049b0:	f3ef 8310 	mrs	r3, PRIMASK
 80049b4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80049b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049b8:	2090      	movs	r0, #144	; 0x90
 80049ba:	183a      	adds	r2, r7, r0
 80049bc:	6013      	str	r3, [r2, #0]
 80049be:	2301      	movs	r3, #1
 80049c0:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049c4:	f383 8810 	msr	PRIMASK, r3
}
 80049c8:	46c0      	nop			; (mov r8, r8)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	689a      	ldr	r2, [r3, #8]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2140      	movs	r1, #64	; 0x40
 80049d6:	438a      	bics	r2, r1
 80049d8:	609a      	str	r2, [r3, #8]
 80049da:	183b      	adds	r3, r7, r0
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049e2:	f383 8810 	msr	PRIMASK, r3
}
 80049e6:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d012      	beq.n	8004a16 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f4:	4a14      	ldr	r2, [pc, #80]	; (8004a48 <HAL_UART_IRQHandler+0x2a0>)
 80049f6:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fc:	0018      	movs	r0, r3
 80049fe:	f7fe fdfb 	bl	80035f8 <HAL_DMA_Abort_IT>
 8004a02:	1e03      	subs	r3, r0, #0
 8004a04:	d01a      	beq.n	8004a3c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a10:	0018      	movs	r0, r3
 8004a12:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a14:	e012      	b.n	8004a3c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	0018      	movs	r0, r3
 8004a1a:	f000 f9a5 	bl	8004d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a1e:	e00d      	b.n	8004a3c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	0018      	movs	r0, r3
 8004a24:	f000 f9a0 	bl	8004d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a28:	e008      	b.n	8004a3c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	0018      	movs	r0, r3
 8004a2e:	f000 f99b 	bl	8004d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2280      	movs	r2, #128	; 0x80
 8004a36:	2100      	movs	r1, #0
 8004a38:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004a3a:	e17f      	b.n	8004d3c <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a3c:	46c0      	nop			; (mov r8, r8)
    return;
 8004a3e:	e17d      	b.n	8004d3c <HAL_UART_IRQHandler+0x594>
 8004a40:	0000080f 	.word	0x0000080f
 8004a44:	04000120 	.word	0x04000120
 8004a48:	080054e5 	.word	0x080054e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d000      	beq.n	8004a56 <HAL_UART_IRQHandler+0x2ae>
 8004a54:	e131      	b.n	8004cba <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004a56:	23a4      	movs	r3, #164	; 0xa4
 8004a58:	18fb      	adds	r3, r7, r3
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2210      	movs	r2, #16
 8004a5e:	4013      	ands	r3, r2
 8004a60:	d100      	bne.n	8004a64 <HAL_UART_IRQHandler+0x2bc>
 8004a62:	e12a      	b.n	8004cba <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004a64:	23a0      	movs	r3, #160	; 0xa0
 8004a66:	18fb      	adds	r3, r7, r3
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2210      	movs	r2, #16
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	d100      	bne.n	8004a72 <HAL_UART_IRQHandler+0x2ca>
 8004a70:	e123      	b.n	8004cba <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2210      	movs	r2, #16
 8004a78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	2240      	movs	r2, #64	; 0x40
 8004a82:	4013      	ands	r3, r2
 8004a84:	2b40      	cmp	r3, #64	; 0x40
 8004a86:	d000      	beq.n	8004a8a <HAL_UART_IRQHandler+0x2e2>
 8004a88:	e09b      	b.n	8004bc2 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	217e      	movs	r1, #126	; 0x7e
 8004a94:	187b      	adds	r3, r7, r1
 8004a96:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004a98:	187b      	adds	r3, r7, r1
 8004a9a:	881b      	ldrh	r3, [r3, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d100      	bne.n	8004aa2 <HAL_UART_IRQHandler+0x2fa>
 8004aa0:	e14e      	b.n	8004d40 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2258      	movs	r2, #88	; 0x58
 8004aa6:	5a9b      	ldrh	r3, [r3, r2]
 8004aa8:	187a      	adds	r2, r7, r1
 8004aaa:	8812      	ldrh	r2, [r2, #0]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d300      	bcc.n	8004ab2 <HAL_UART_IRQHandler+0x30a>
 8004ab0:	e146      	b.n	8004d40 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	187a      	adds	r2, r7, r1
 8004ab6:	215a      	movs	r1, #90	; 0x5a
 8004ab8:	8812      	ldrh	r2, [r2, #0]
 8004aba:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	2b20      	cmp	r3, #32
 8004ac4:	d06e      	beq.n	8004ba4 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ac6:	f3ef 8310 	mrs	r3, PRIMASK
 8004aca:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ace:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ad6:	f383 8810 	msr	PRIMASK, r3
}
 8004ada:	46c0      	nop			; (mov r8, r8)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	499a      	ldr	r1, [pc, #616]	; (8004d50 <HAL_UART_IRQHandler+0x5a8>)
 8004ae8:	400a      	ands	r2, r1
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004aee:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af2:	f383 8810 	msr	PRIMASK, r3
}
 8004af6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004af8:	f3ef 8310 	mrs	r3, PRIMASK
 8004afc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b00:	677b      	str	r3, [r7, #116]	; 0x74
 8004b02:	2301      	movs	r3, #1
 8004b04:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b08:	f383 8810 	msr	PRIMASK, r3
}
 8004b0c:	46c0      	nop			; (mov r8, r8)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2101      	movs	r1, #1
 8004b1a:	438a      	bics	r2, r1
 8004b1c:	609a      	str	r2, [r3, #8]
 8004b1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b20:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b24:	f383 8810 	msr	PRIMASK, r3
}
 8004b28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b2a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b2e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004b30:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b32:	673b      	str	r3, [r7, #112]	; 0x70
 8004b34:	2301      	movs	r3, #1
 8004b36:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b3a:	f383 8810 	msr	PRIMASK, r3
}
 8004b3e:	46c0      	nop			; (mov r8, r8)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2140      	movs	r1, #64	; 0x40
 8004b4c:	438a      	bics	r2, r1
 8004b4e:	609a      	str	r2, [r3, #8]
 8004b50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b52:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b56:	f383 8810 	msr	PRIMASK, r3
}
 8004b5a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2220      	movs	r2, #32
 8004b60:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b68:	f3ef 8310 	mrs	r3, PRIMASK
 8004b6c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004b6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b72:	2301      	movs	r3, #1
 8004b74:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b78:	f383 8810 	msr	PRIMASK, r3
}
 8004b7c:	46c0      	nop			; (mov r8, r8)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2110      	movs	r1, #16
 8004b8a:	438a      	bics	r2, r1
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b90:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b94:	f383 8810 	msr	PRIMASK, r3
}
 8004b98:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9e:	0018      	movs	r0, r3
 8004ba0:	f7fe fcf2 	bl	8003588 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2258      	movs	r2, #88	; 0x58
 8004ba8:	5a9a      	ldrh	r2, [r3, r2]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	215a      	movs	r1, #90	; 0x5a
 8004bae:	5a5b      	ldrh	r3, [r3, r1]
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	0011      	movs	r1, r2
 8004bba:	0018      	movs	r0, r3
 8004bbc:	f000 f8dc 	bl	8004d78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004bc0:	e0be      	b.n	8004d40 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2258      	movs	r2, #88	; 0x58
 8004bc6:	5a99      	ldrh	r1, [r3, r2]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	225a      	movs	r2, #90	; 0x5a
 8004bcc:	5a9b      	ldrh	r3, [r3, r2]
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	208e      	movs	r0, #142	; 0x8e
 8004bd2:	183b      	adds	r3, r7, r0
 8004bd4:	1a8a      	subs	r2, r1, r2
 8004bd6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	225a      	movs	r2, #90	; 0x5a
 8004bdc:	5a9b      	ldrh	r3, [r3, r2]
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d100      	bne.n	8004be6 <HAL_UART_IRQHandler+0x43e>
 8004be4:	e0ae      	b.n	8004d44 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8004be6:	183b      	adds	r3, r7, r0
 8004be8:	881b      	ldrh	r3, [r3, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d100      	bne.n	8004bf0 <HAL_UART_IRQHandler+0x448>
 8004bee:	e0a9      	b.n	8004d44 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bf0:	f3ef 8310 	mrs	r3, PRIMASK
 8004bf4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bf8:	2488      	movs	r4, #136	; 0x88
 8004bfa:	193a      	adds	r2, r7, r4
 8004bfc:	6013      	str	r3, [r2, #0]
 8004bfe:	2301      	movs	r3, #1
 8004c00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	f383 8810 	msr	PRIMASK, r3
}
 8004c08:	46c0      	nop			; (mov r8, r8)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	494f      	ldr	r1, [pc, #316]	; (8004d54 <HAL_UART_IRQHandler+0x5ac>)
 8004c16:	400a      	ands	r2, r1
 8004c18:	601a      	str	r2, [r3, #0]
 8004c1a:	193b      	adds	r3, r7, r4
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f383 8810 	msr	PRIMASK, r3
}
 8004c26:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c28:	f3ef 8310 	mrs	r3, PRIMASK
 8004c2c:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c2e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c30:	2484      	movs	r4, #132	; 0x84
 8004c32:	193a      	adds	r2, r7, r4
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	2301      	movs	r3, #1
 8004c38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	f383 8810 	msr	PRIMASK, r3
}
 8004c40:	46c0      	nop			; (mov r8, r8)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689a      	ldr	r2, [r3, #8]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2101      	movs	r1, #1
 8004c4e:	438a      	bics	r2, r1
 8004c50:	609a      	str	r2, [r3, #8]
 8004c52:	193b      	adds	r3, r7, r4
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c58:	6a3b      	ldr	r3, [r7, #32]
 8004c5a:	f383 8810 	msr	PRIMASK, r3
}
 8004c5e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2220      	movs	r2, #32
 8004c64:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c72:	f3ef 8310 	mrs	r3, PRIMASK
 8004c76:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c7a:	2480      	movs	r4, #128	; 0x80
 8004c7c:	193a      	adds	r2, r7, r4
 8004c7e:	6013      	str	r3, [r2, #0]
 8004c80:	2301      	movs	r3, #1
 8004c82:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c86:	f383 8810 	msr	PRIMASK, r3
}
 8004c8a:	46c0      	nop			; (mov r8, r8)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2110      	movs	r1, #16
 8004c98:	438a      	bics	r2, r1
 8004c9a:	601a      	str	r2, [r3, #0]
 8004c9c:	193b      	adds	r3, r7, r4
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca4:	f383 8810 	msr	PRIMASK, r3
}
 8004ca8:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004caa:	183b      	adds	r3, r7, r0
 8004cac:	881a      	ldrh	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	0011      	movs	r1, r2
 8004cb2:	0018      	movs	r0, r3
 8004cb4:	f000 f860 	bl	8004d78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004cb8:	e044      	b.n	8004d44 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004cba:	23a4      	movs	r3, #164	; 0xa4
 8004cbc:	18fb      	adds	r3, r7, r3
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	2380      	movs	r3, #128	; 0x80
 8004cc2:	035b      	lsls	r3, r3, #13
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	d010      	beq.n	8004cea <HAL_UART_IRQHandler+0x542>
 8004cc8:	239c      	movs	r3, #156	; 0x9c
 8004cca:	18fb      	adds	r3, r7, r3
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	2380      	movs	r3, #128	; 0x80
 8004cd0:	03db      	lsls	r3, r3, #15
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	d009      	beq.n	8004cea <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2280      	movs	r2, #128	; 0x80
 8004cdc:	0352      	lsls	r2, r2, #13
 8004cde:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	0018      	movs	r0, r3
 8004ce4:	f000 fc40 	bl	8005568 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ce8:	e02f      	b.n	8004d4a <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004cea:	23a4      	movs	r3, #164	; 0xa4
 8004cec:	18fb      	adds	r3, r7, r3
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2280      	movs	r2, #128	; 0x80
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	d00f      	beq.n	8004d16 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004cf6:	23a0      	movs	r3, #160	; 0xa0
 8004cf8:	18fb      	adds	r3, r7, r3
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2280      	movs	r2, #128	; 0x80
 8004cfe:	4013      	ands	r3, r2
 8004d00:	d009      	beq.n	8004d16 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d01e      	beq.n	8004d48 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	0010      	movs	r0, r2
 8004d12:	4798      	blx	r3
    }
    return;
 8004d14:	e018      	b.n	8004d48 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d16:	23a4      	movs	r3, #164	; 0xa4
 8004d18:	18fb      	adds	r3, r7, r3
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2240      	movs	r2, #64	; 0x40
 8004d1e:	4013      	ands	r3, r2
 8004d20:	d013      	beq.n	8004d4a <HAL_UART_IRQHandler+0x5a2>
 8004d22:	23a0      	movs	r3, #160	; 0xa0
 8004d24:	18fb      	adds	r3, r7, r3
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2240      	movs	r2, #64	; 0x40
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	d00d      	beq.n	8004d4a <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	0018      	movs	r0, r3
 8004d32:	f000 fbee 	bl	8005512 <UART_EndTransmit_IT>
    return;
 8004d36:	e008      	b.n	8004d4a <HAL_UART_IRQHandler+0x5a2>
      return;
 8004d38:	46c0      	nop			; (mov r8, r8)
 8004d3a:	e006      	b.n	8004d4a <HAL_UART_IRQHandler+0x5a2>
    return;
 8004d3c:	46c0      	nop			; (mov r8, r8)
 8004d3e:	e004      	b.n	8004d4a <HAL_UART_IRQHandler+0x5a2>
      return;
 8004d40:	46c0      	nop			; (mov r8, r8)
 8004d42:	e002      	b.n	8004d4a <HAL_UART_IRQHandler+0x5a2>
      return;
 8004d44:	46c0      	nop			; (mov r8, r8)
 8004d46:	e000      	b.n	8004d4a <HAL_UART_IRQHandler+0x5a2>
    return;
 8004d48:	46c0      	nop			; (mov r8, r8)
  }

}
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	b02b      	add	sp, #172	; 0xac
 8004d4e:	bd90      	pop	{r4, r7, pc}
 8004d50:	fffffeff 	.word	0xfffffeff
 8004d54:	fffffedf 	.word	0xfffffedf

08004d58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004d60:	46c0      	nop			; (mov r8, r8)
 8004d62:	46bd      	mov	sp, r7
 8004d64:	b002      	add	sp, #8
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004d70:	46c0      	nop			; (mov r8, r8)
 8004d72:	46bd      	mov	sp, r7
 8004d74:	b002      	add	sp, #8
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	000a      	movs	r2, r1
 8004d82:	1cbb      	adds	r3, r7, #2
 8004d84:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d86:	46c0      	nop			; (mov r8, r8)
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	b002      	add	sp, #8
 8004d8c:	bd80      	pop	{r7, pc}
	...

08004d90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b088      	sub	sp, #32
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d98:	231e      	movs	r3, #30
 8004d9a:	18fb      	adds	r3, r7, r3
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689a      	ldr	r2, [r3, #8]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	431a      	orrs	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	69db      	ldr	r3, [r3, #28]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4aaf      	ldr	r2, [pc, #700]	; (800507c <UART_SetConfig+0x2ec>)
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	0019      	movs	r1, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	4aaa      	ldr	r2, [pc, #680]	; (8005080 <UART_SetConfig+0x2f0>)
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	0019      	movs	r1, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a1b      	ldr	r3, [r3, #32]
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	4aa1      	ldr	r2, [pc, #644]	; (8005084 <UART_SetConfig+0x2f4>)
 8004dfe:	4013      	ands	r3, r2
 8004e00:	0019      	movs	r1, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a9d      	ldr	r2, [pc, #628]	; (8005088 <UART_SetConfig+0x2f8>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d127      	bne.n	8004e66 <UART_SetConfig+0xd6>
 8004e16:	4b9d      	ldr	r3, [pc, #628]	; (800508c <UART_SetConfig+0x2fc>)
 8004e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1a:	2203      	movs	r2, #3
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	2b03      	cmp	r3, #3
 8004e20:	d00d      	beq.n	8004e3e <UART_SetConfig+0xae>
 8004e22:	d81b      	bhi.n	8004e5c <UART_SetConfig+0xcc>
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d014      	beq.n	8004e52 <UART_SetConfig+0xc2>
 8004e28:	d818      	bhi.n	8004e5c <UART_SetConfig+0xcc>
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d002      	beq.n	8004e34 <UART_SetConfig+0xa4>
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d00a      	beq.n	8004e48 <UART_SetConfig+0xb8>
 8004e32:	e013      	b.n	8004e5c <UART_SetConfig+0xcc>
 8004e34:	231f      	movs	r3, #31
 8004e36:	18fb      	adds	r3, r7, r3
 8004e38:	2200      	movs	r2, #0
 8004e3a:	701a      	strb	r2, [r3, #0]
 8004e3c:	e065      	b.n	8004f0a <UART_SetConfig+0x17a>
 8004e3e:	231f      	movs	r3, #31
 8004e40:	18fb      	adds	r3, r7, r3
 8004e42:	2202      	movs	r2, #2
 8004e44:	701a      	strb	r2, [r3, #0]
 8004e46:	e060      	b.n	8004f0a <UART_SetConfig+0x17a>
 8004e48:	231f      	movs	r3, #31
 8004e4a:	18fb      	adds	r3, r7, r3
 8004e4c:	2204      	movs	r2, #4
 8004e4e:	701a      	strb	r2, [r3, #0]
 8004e50:	e05b      	b.n	8004f0a <UART_SetConfig+0x17a>
 8004e52:	231f      	movs	r3, #31
 8004e54:	18fb      	adds	r3, r7, r3
 8004e56:	2208      	movs	r2, #8
 8004e58:	701a      	strb	r2, [r3, #0]
 8004e5a:	e056      	b.n	8004f0a <UART_SetConfig+0x17a>
 8004e5c:	231f      	movs	r3, #31
 8004e5e:	18fb      	adds	r3, r7, r3
 8004e60:	2210      	movs	r2, #16
 8004e62:	701a      	strb	r2, [r3, #0]
 8004e64:	e051      	b.n	8004f0a <UART_SetConfig+0x17a>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a89      	ldr	r2, [pc, #548]	; (8005090 <UART_SetConfig+0x300>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d134      	bne.n	8004eda <UART_SetConfig+0x14a>
 8004e70:	4b86      	ldr	r3, [pc, #536]	; (800508c <UART_SetConfig+0x2fc>)
 8004e72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e74:	23c0      	movs	r3, #192	; 0xc0
 8004e76:	029b      	lsls	r3, r3, #10
 8004e78:	4013      	ands	r3, r2
 8004e7a:	22c0      	movs	r2, #192	; 0xc0
 8004e7c:	0292      	lsls	r2, r2, #10
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d017      	beq.n	8004eb2 <UART_SetConfig+0x122>
 8004e82:	22c0      	movs	r2, #192	; 0xc0
 8004e84:	0292      	lsls	r2, r2, #10
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d822      	bhi.n	8004ed0 <UART_SetConfig+0x140>
 8004e8a:	2280      	movs	r2, #128	; 0x80
 8004e8c:	0292      	lsls	r2, r2, #10
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d019      	beq.n	8004ec6 <UART_SetConfig+0x136>
 8004e92:	2280      	movs	r2, #128	; 0x80
 8004e94:	0292      	lsls	r2, r2, #10
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d81a      	bhi.n	8004ed0 <UART_SetConfig+0x140>
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d004      	beq.n	8004ea8 <UART_SetConfig+0x118>
 8004e9e:	2280      	movs	r2, #128	; 0x80
 8004ea0:	0252      	lsls	r2, r2, #9
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d00a      	beq.n	8004ebc <UART_SetConfig+0x12c>
 8004ea6:	e013      	b.n	8004ed0 <UART_SetConfig+0x140>
 8004ea8:	231f      	movs	r3, #31
 8004eaa:	18fb      	adds	r3, r7, r3
 8004eac:	2200      	movs	r2, #0
 8004eae:	701a      	strb	r2, [r3, #0]
 8004eb0:	e02b      	b.n	8004f0a <UART_SetConfig+0x17a>
 8004eb2:	231f      	movs	r3, #31
 8004eb4:	18fb      	adds	r3, r7, r3
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	701a      	strb	r2, [r3, #0]
 8004eba:	e026      	b.n	8004f0a <UART_SetConfig+0x17a>
 8004ebc:	231f      	movs	r3, #31
 8004ebe:	18fb      	adds	r3, r7, r3
 8004ec0:	2204      	movs	r2, #4
 8004ec2:	701a      	strb	r2, [r3, #0]
 8004ec4:	e021      	b.n	8004f0a <UART_SetConfig+0x17a>
 8004ec6:	231f      	movs	r3, #31
 8004ec8:	18fb      	adds	r3, r7, r3
 8004eca:	2208      	movs	r2, #8
 8004ecc:	701a      	strb	r2, [r3, #0]
 8004ece:	e01c      	b.n	8004f0a <UART_SetConfig+0x17a>
 8004ed0:	231f      	movs	r3, #31
 8004ed2:	18fb      	adds	r3, r7, r3
 8004ed4:	2210      	movs	r2, #16
 8004ed6:	701a      	strb	r2, [r3, #0]
 8004ed8:	e017      	b.n	8004f0a <UART_SetConfig+0x17a>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a6d      	ldr	r2, [pc, #436]	; (8005094 <UART_SetConfig+0x304>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d104      	bne.n	8004eee <UART_SetConfig+0x15e>
 8004ee4:	231f      	movs	r3, #31
 8004ee6:	18fb      	adds	r3, r7, r3
 8004ee8:	2200      	movs	r2, #0
 8004eea:	701a      	strb	r2, [r3, #0]
 8004eec:	e00d      	b.n	8004f0a <UART_SetConfig+0x17a>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a69      	ldr	r2, [pc, #420]	; (8005098 <UART_SetConfig+0x308>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d104      	bne.n	8004f02 <UART_SetConfig+0x172>
 8004ef8:	231f      	movs	r3, #31
 8004efa:	18fb      	adds	r3, r7, r3
 8004efc:	2200      	movs	r2, #0
 8004efe:	701a      	strb	r2, [r3, #0]
 8004f00:	e003      	b.n	8004f0a <UART_SetConfig+0x17a>
 8004f02:	231f      	movs	r3, #31
 8004f04:	18fb      	adds	r3, r7, r3
 8004f06:	2210      	movs	r2, #16
 8004f08:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	69da      	ldr	r2, [r3, #28]
 8004f0e:	2380      	movs	r3, #128	; 0x80
 8004f10:	021b      	lsls	r3, r3, #8
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d15d      	bne.n	8004fd2 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8004f16:	231f      	movs	r3, #31
 8004f18:	18fb      	adds	r3, r7, r3
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	2b08      	cmp	r3, #8
 8004f1e:	d015      	beq.n	8004f4c <UART_SetConfig+0x1bc>
 8004f20:	dc18      	bgt.n	8004f54 <UART_SetConfig+0x1c4>
 8004f22:	2b04      	cmp	r3, #4
 8004f24:	d00d      	beq.n	8004f42 <UART_SetConfig+0x1b2>
 8004f26:	dc15      	bgt.n	8004f54 <UART_SetConfig+0x1c4>
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d002      	beq.n	8004f32 <UART_SetConfig+0x1a2>
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d005      	beq.n	8004f3c <UART_SetConfig+0x1ac>
 8004f30:	e010      	b.n	8004f54 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f32:	f7ff fa27 	bl	8004384 <HAL_RCC_GetPCLK1Freq>
 8004f36:	0003      	movs	r3, r0
 8004f38:	61bb      	str	r3, [r7, #24]
        break;
 8004f3a:	e012      	b.n	8004f62 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f3c:	4b57      	ldr	r3, [pc, #348]	; (800509c <UART_SetConfig+0x30c>)
 8004f3e:	61bb      	str	r3, [r7, #24]
        break;
 8004f40:	e00f      	b.n	8004f62 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f42:	f7ff f995 	bl	8004270 <HAL_RCC_GetSysClockFreq>
 8004f46:	0003      	movs	r3, r0
 8004f48:	61bb      	str	r3, [r7, #24]
        break;
 8004f4a:	e00a      	b.n	8004f62 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f4c:	2380      	movs	r3, #128	; 0x80
 8004f4e:	021b      	lsls	r3, r3, #8
 8004f50:	61bb      	str	r3, [r7, #24]
        break;
 8004f52:	e006      	b.n	8004f62 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f58:	231e      	movs	r3, #30
 8004f5a:	18fb      	adds	r3, r7, r3
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	701a      	strb	r2, [r3, #0]
        break;
 8004f60:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d100      	bne.n	8004f6a <UART_SetConfig+0x1da>
 8004f68:	e07b      	b.n	8005062 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	005a      	lsls	r2, r3, #1
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	085b      	lsrs	r3, r3, #1
 8004f74:	18d2      	adds	r2, r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	0019      	movs	r1, r3
 8004f7c:	0010      	movs	r0, r2
 8004f7e:	f7fb f8df 	bl	8000140 <__udivsi3>
 8004f82:	0003      	movs	r3, r0
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	2b0f      	cmp	r3, #15
 8004f8c:	d91c      	bls.n	8004fc8 <UART_SetConfig+0x238>
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	2380      	movs	r3, #128	; 0x80
 8004f92:	025b      	lsls	r3, r3, #9
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d217      	bcs.n	8004fc8 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	200e      	movs	r0, #14
 8004f9e:	183b      	adds	r3, r7, r0
 8004fa0:	210f      	movs	r1, #15
 8004fa2:	438a      	bics	r2, r1
 8004fa4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	085b      	lsrs	r3, r3, #1
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	2207      	movs	r2, #7
 8004fae:	4013      	ands	r3, r2
 8004fb0:	b299      	uxth	r1, r3
 8004fb2:	183b      	adds	r3, r7, r0
 8004fb4:	183a      	adds	r2, r7, r0
 8004fb6:	8812      	ldrh	r2, [r2, #0]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	183a      	adds	r2, r7, r0
 8004fc2:	8812      	ldrh	r2, [r2, #0]
 8004fc4:	60da      	str	r2, [r3, #12]
 8004fc6:	e04c      	b.n	8005062 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8004fc8:	231e      	movs	r3, #30
 8004fca:	18fb      	adds	r3, r7, r3
 8004fcc:	2201      	movs	r2, #1
 8004fce:	701a      	strb	r2, [r3, #0]
 8004fd0:	e047      	b.n	8005062 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fd2:	231f      	movs	r3, #31
 8004fd4:	18fb      	adds	r3, r7, r3
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	2b08      	cmp	r3, #8
 8004fda:	d015      	beq.n	8005008 <UART_SetConfig+0x278>
 8004fdc:	dc18      	bgt.n	8005010 <UART_SetConfig+0x280>
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d00d      	beq.n	8004ffe <UART_SetConfig+0x26e>
 8004fe2:	dc15      	bgt.n	8005010 <UART_SetConfig+0x280>
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d002      	beq.n	8004fee <UART_SetConfig+0x25e>
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d005      	beq.n	8004ff8 <UART_SetConfig+0x268>
 8004fec:	e010      	b.n	8005010 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fee:	f7ff f9c9 	bl	8004384 <HAL_RCC_GetPCLK1Freq>
 8004ff2:	0003      	movs	r3, r0
 8004ff4:	61bb      	str	r3, [r7, #24]
        break;
 8004ff6:	e012      	b.n	800501e <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ff8:	4b28      	ldr	r3, [pc, #160]	; (800509c <UART_SetConfig+0x30c>)
 8004ffa:	61bb      	str	r3, [r7, #24]
        break;
 8004ffc:	e00f      	b.n	800501e <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ffe:	f7ff f937 	bl	8004270 <HAL_RCC_GetSysClockFreq>
 8005002:	0003      	movs	r3, r0
 8005004:	61bb      	str	r3, [r7, #24]
        break;
 8005006:	e00a      	b.n	800501e <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005008:	2380      	movs	r3, #128	; 0x80
 800500a:	021b      	lsls	r3, r3, #8
 800500c:	61bb      	str	r3, [r7, #24]
        break;
 800500e:	e006      	b.n	800501e <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8005010:	2300      	movs	r3, #0
 8005012:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005014:	231e      	movs	r3, #30
 8005016:	18fb      	adds	r3, r7, r3
 8005018:	2201      	movs	r2, #1
 800501a:	701a      	strb	r2, [r3, #0]
        break;
 800501c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d01e      	beq.n	8005062 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	085a      	lsrs	r2, r3, #1
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	18d2      	adds	r2, r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	0019      	movs	r1, r3
 8005034:	0010      	movs	r0, r2
 8005036:	f7fb f883 	bl	8000140 <__udivsi3>
 800503a:	0003      	movs	r3, r0
 800503c:	b29b      	uxth	r3, r3
 800503e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	2b0f      	cmp	r3, #15
 8005044:	d909      	bls.n	800505a <UART_SetConfig+0x2ca>
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	2380      	movs	r3, #128	; 0x80
 800504a:	025b      	lsls	r3, r3, #9
 800504c:	429a      	cmp	r2, r3
 800504e:	d204      	bcs.n	800505a <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	60da      	str	r2, [r3, #12]
 8005058:	e003      	b.n	8005062 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 800505a:	231e      	movs	r3, #30
 800505c:	18fb      	adds	r3, r7, r3
 800505e:	2201      	movs	r2, #1
 8005060:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800506e:	231e      	movs	r3, #30
 8005070:	18fb      	adds	r3, r7, r3
 8005072:	781b      	ldrb	r3, [r3, #0]
}
 8005074:	0018      	movs	r0, r3
 8005076:	46bd      	mov	sp, r7
 8005078:	b008      	add	sp, #32
 800507a:	bd80      	pop	{r7, pc}
 800507c:	efff69f3 	.word	0xefff69f3
 8005080:	ffffcfff 	.word	0xffffcfff
 8005084:	fffff4ff 	.word	0xfffff4ff
 8005088:	40013800 	.word	0x40013800
 800508c:	40021000 	.word	0x40021000
 8005090:	40004400 	.word	0x40004400
 8005094:	40004800 	.word	0x40004800
 8005098:	40004c00 	.word	0x40004c00
 800509c:	007a1200 	.word	0x007a1200

080050a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	2201      	movs	r2, #1
 80050ae:	4013      	ands	r3, r2
 80050b0:	d00b      	beq.n	80050ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	4a4a      	ldr	r2, [pc, #296]	; (80051e4 <UART_AdvFeatureConfig+0x144>)
 80050ba:	4013      	ands	r3, r2
 80050bc:	0019      	movs	r1, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	2202      	movs	r2, #2
 80050d0:	4013      	ands	r3, r2
 80050d2:	d00b      	beq.n	80050ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	4a43      	ldr	r2, [pc, #268]	; (80051e8 <UART_AdvFeatureConfig+0x148>)
 80050dc:	4013      	ands	r3, r2
 80050de:	0019      	movs	r1, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	2204      	movs	r2, #4
 80050f2:	4013      	ands	r3, r2
 80050f4:	d00b      	beq.n	800510e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	4a3b      	ldr	r2, [pc, #236]	; (80051ec <UART_AdvFeatureConfig+0x14c>)
 80050fe:	4013      	ands	r3, r2
 8005100:	0019      	movs	r1, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005112:	2208      	movs	r2, #8
 8005114:	4013      	ands	r3, r2
 8005116:	d00b      	beq.n	8005130 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	4a34      	ldr	r2, [pc, #208]	; (80051f0 <UART_AdvFeatureConfig+0x150>)
 8005120:	4013      	ands	r3, r2
 8005122:	0019      	movs	r1, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005134:	2210      	movs	r2, #16
 8005136:	4013      	ands	r3, r2
 8005138:	d00b      	beq.n	8005152 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	4a2c      	ldr	r2, [pc, #176]	; (80051f4 <UART_AdvFeatureConfig+0x154>)
 8005142:	4013      	ands	r3, r2
 8005144:	0019      	movs	r1, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	2220      	movs	r2, #32
 8005158:	4013      	ands	r3, r2
 800515a:	d00b      	beq.n	8005174 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	4a25      	ldr	r2, [pc, #148]	; (80051f8 <UART_AdvFeatureConfig+0x158>)
 8005164:	4013      	ands	r3, r2
 8005166:	0019      	movs	r1, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	430a      	orrs	r2, r1
 8005172:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005178:	2240      	movs	r2, #64	; 0x40
 800517a:	4013      	ands	r3, r2
 800517c:	d01d      	beq.n	80051ba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	4a1d      	ldr	r2, [pc, #116]	; (80051fc <UART_AdvFeatureConfig+0x15c>)
 8005186:	4013      	ands	r3, r2
 8005188:	0019      	movs	r1, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	430a      	orrs	r2, r1
 8005194:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800519a:	2380      	movs	r3, #128	; 0x80
 800519c:	035b      	lsls	r3, r3, #13
 800519e:	429a      	cmp	r2, r3
 80051a0:	d10b      	bne.n	80051ba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	4a15      	ldr	r2, [pc, #84]	; (8005200 <UART_AdvFeatureConfig+0x160>)
 80051aa:	4013      	ands	r3, r2
 80051ac:	0019      	movs	r1, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	2280      	movs	r2, #128	; 0x80
 80051c0:	4013      	ands	r3, r2
 80051c2:	d00b      	beq.n	80051dc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	4a0e      	ldr	r2, [pc, #56]	; (8005204 <UART_AdvFeatureConfig+0x164>)
 80051cc:	4013      	ands	r3, r2
 80051ce:	0019      	movs	r1, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	430a      	orrs	r2, r1
 80051da:	605a      	str	r2, [r3, #4]
  }
}
 80051dc:	46c0      	nop			; (mov r8, r8)
 80051de:	46bd      	mov	sp, r7
 80051e0:	b002      	add	sp, #8
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	fffdffff 	.word	0xfffdffff
 80051e8:	fffeffff 	.word	0xfffeffff
 80051ec:	fffbffff 	.word	0xfffbffff
 80051f0:	ffff7fff 	.word	0xffff7fff
 80051f4:	ffffefff 	.word	0xffffefff
 80051f8:	ffffdfff 	.word	0xffffdfff
 80051fc:	ffefffff 	.word	0xffefffff
 8005200:	ff9fffff 	.word	0xff9fffff
 8005204:	fff7ffff 	.word	0xfff7ffff

08005208 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af02      	add	r7, sp, #8
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2280      	movs	r2, #128	; 0x80
 8005214:	2100      	movs	r1, #0
 8005216:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005218:	f7fd fc10 	bl	8002a3c <HAL_GetTick>
 800521c:	0003      	movs	r3, r0
 800521e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2208      	movs	r2, #8
 8005228:	4013      	ands	r3, r2
 800522a:	2b08      	cmp	r3, #8
 800522c:	d10c      	bne.n	8005248 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2280      	movs	r2, #128	; 0x80
 8005232:	0391      	lsls	r1, r2, #14
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	4a17      	ldr	r2, [pc, #92]	; (8005294 <UART_CheckIdleState+0x8c>)
 8005238:	9200      	str	r2, [sp, #0]
 800523a:	2200      	movs	r2, #0
 800523c:	f000 f82c 	bl	8005298 <UART_WaitOnFlagUntilTimeout>
 8005240:	1e03      	subs	r3, r0, #0
 8005242:	d001      	beq.n	8005248 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e021      	b.n	800528c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2204      	movs	r2, #4
 8005250:	4013      	ands	r3, r2
 8005252:	2b04      	cmp	r3, #4
 8005254:	d10c      	bne.n	8005270 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2280      	movs	r2, #128	; 0x80
 800525a:	03d1      	lsls	r1, r2, #15
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	4a0d      	ldr	r2, [pc, #52]	; (8005294 <UART_CheckIdleState+0x8c>)
 8005260:	9200      	str	r2, [sp, #0]
 8005262:	2200      	movs	r2, #0
 8005264:	f000 f818 	bl	8005298 <UART_WaitOnFlagUntilTimeout>
 8005268:	1e03      	subs	r3, r0, #0
 800526a:	d001      	beq.n	8005270 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e00d      	b.n	800528c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2220      	movs	r2, #32
 8005274:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2220      	movs	r2, #32
 800527a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2274      	movs	r2, #116	; 0x74
 8005286:	2100      	movs	r1, #0
 8005288:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	0018      	movs	r0, r3
 800528e:	46bd      	mov	sp, r7
 8005290:	b004      	add	sp, #16
 8005292:	bd80      	pop	{r7, pc}
 8005294:	01ffffff 	.word	0x01ffffff

08005298 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b094      	sub	sp, #80	; 0x50
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	603b      	str	r3, [r7, #0]
 80052a4:	1dfb      	adds	r3, r7, #7
 80052a6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052a8:	e0a3      	b.n	80053f2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052ac:	3301      	adds	r3, #1
 80052ae:	d100      	bne.n	80052b2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80052b0:	e09f      	b.n	80053f2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052b2:	f7fd fbc3 	bl	8002a3c <HAL_GetTick>
 80052b6:	0002      	movs	r2, r0
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052be:	429a      	cmp	r2, r3
 80052c0:	d302      	bcc.n	80052c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80052c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d13d      	bne.n	8005344 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052c8:	f3ef 8310 	mrs	r3, PRIMASK
 80052cc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80052ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052d0:	647b      	str	r3, [r7, #68]	; 0x44
 80052d2:	2301      	movs	r3, #1
 80052d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d8:	f383 8810 	msr	PRIMASK, r3
}
 80052dc:	46c0      	nop			; (mov r8, r8)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	494c      	ldr	r1, [pc, #304]	; (800541c <UART_WaitOnFlagUntilTimeout+0x184>)
 80052ea:	400a      	ands	r2, r1
 80052ec:	601a      	str	r2, [r3, #0]
 80052ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052f0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f4:	f383 8810 	msr	PRIMASK, r3
}
 80052f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052fa:	f3ef 8310 	mrs	r3, PRIMASK
 80052fe:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005302:	643b      	str	r3, [r7, #64]	; 0x40
 8005304:	2301      	movs	r3, #1
 8005306:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530a:	f383 8810 	msr	PRIMASK, r3
}
 800530e:	46c0      	nop			; (mov r8, r8)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689a      	ldr	r2, [r3, #8]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2101      	movs	r1, #1
 800531c:	438a      	bics	r2, r1
 800531e:	609a      	str	r2, [r3, #8]
 8005320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005322:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005326:	f383 8810 	msr	PRIMASK, r3
}
 800532a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2220      	movs	r2, #32
 8005330:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2220      	movs	r2, #32
 8005336:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2274      	movs	r2, #116	; 0x74
 800533c:	2100      	movs	r1, #0
 800533e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e067      	b.n	8005414 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2204      	movs	r2, #4
 800534c:	4013      	ands	r3, r2
 800534e:	d050      	beq.n	80053f2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	69da      	ldr	r2, [r3, #28]
 8005356:	2380      	movs	r3, #128	; 0x80
 8005358:	011b      	lsls	r3, r3, #4
 800535a:	401a      	ands	r2, r3
 800535c:	2380      	movs	r3, #128	; 0x80
 800535e:	011b      	lsls	r3, r3, #4
 8005360:	429a      	cmp	r2, r3
 8005362:	d146      	bne.n	80053f2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2280      	movs	r2, #128	; 0x80
 800536a:	0112      	lsls	r2, r2, #4
 800536c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800536e:	f3ef 8310 	mrs	r3, PRIMASK
 8005372:	613b      	str	r3, [r7, #16]
  return(result);
 8005374:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005376:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005378:	2301      	movs	r3, #1
 800537a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f383 8810 	msr	PRIMASK, r3
}
 8005382:	46c0      	nop			; (mov r8, r8)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4923      	ldr	r1, [pc, #140]	; (800541c <UART_WaitOnFlagUntilTimeout+0x184>)
 8005390:	400a      	ands	r2, r1
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005396:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	f383 8810 	msr	PRIMASK, r3
}
 800539e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053a0:	f3ef 8310 	mrs	r3, PRIMASK
 80053a4:	61fb      	str	r3, [r7, #28]
  return(result);
 80053a6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80053aa:	2301      	movs	r3, #1
 80053ac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ae:	6a3b      	ldr	r3, [r7, #32]
 80053b0:	f383 8810 	msr	PRIMASK, r3
}
 80053b4:	46c0      	nop			; (mov r8, r8)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	689a      	ldr	r2, [r3, #8]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2101      	movs	r1, #1
 80053c2:	438a      	bics	r2, r1
 80053c4:	609a      	str	r2, [r3, #8]
 80053c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053c8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	f383 8810 	msr	PRIMASK, r3
}
 80053d0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2220      	movs	r2, #32
 80053d6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2220      	movs	r2, #32
 80053dc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2280      	movs	r2, #128	; 0x80
 80053e2:	2120      	movs	r1, #32
 80053e4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2274      	movs	r2, #116	; 0x74
 80053ea:	2100      	movs	r1, #0
 80053ec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e010      	b.n	8005414 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	69db      	ldr	r3, [r3, #28]
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	4013      	ands	r3, r2
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	425a      	negs	r2, r3
 8005402:	4153      	adcs	r3, r2
 8005404:	b2db      	uxtb	r3, r3
 8005406:	001a      	movs	r2, r3
 8005408:	1dfb      	adds	r3, r7, #7
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	429a      	cmp	r2, r3
 800540e:	d100      	bne.n	8005412 <UART_WaitOnFlagUntilTimeout+0x17a>
 8005410:	e74b      	b.n	80052aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	0018      	movs	r0, r3
 8005416:	46bd      	mov	sp, r7
 8005418:	b014      	add	sp, #80	; 0x50
 800541a:	bd80      	pop	{r7, pc}
 800541c:	fffffe5f 	.word	0xfffffe5f

08005420 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b08e      	sub	sp, #56	; 0x38
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005428:	f3ef 8310 	mrs	r3, PRIMASK
 800542c:	617b      	str	r3, [r7, #20]
  return(result);
 800542e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005430:	637b      	str	r3, [r7, #52]	; 0x34
 8005432:	2301      	movs	r3, #1
 8005434:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	f383 8810 	msr	PRIMASK, r3
}
 800543c:	46c0      	nop			; (mov r8, r8)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4925      	ldr	r1, [pc, #148]	; (80054e0 <UART_EndRxTransfer+0xc0>)
 800544a:	400a      	ands	r2, r1
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005450:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	f383 8810 	msr	PRIMASK, r3
}
 8005458:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800545a:	f3ef 8310 	mrs	r3, PRIMASK
 800545e:	623b      	str	r3, [r7, #32]
  return(result);
 8005460:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005462:	633b      	str	r3, [r7, #48]	; 0x30
 8005464:	2301      	movs	r3, #1
 8005466:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546a:	f383 8810 	msr	PRIMASK, r3
}
 800546e:	46c0      	nop			; (mov r8, r8)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689a      	ldr	r2, [r3, #8]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2101      	movs	r1, #1
 800547c:	438a      	bics	r2, r1
 800547e:	609a      	str	r2, [r3, #8]
 8005480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005482:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005486:	f383 8810 	msr	PRIMASK, r3
}
 800548a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005490:	2b01      	cmp	r3, #1
 8005492:	d118      	bne.n	80054c6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005494:	f3ef 8310 	mrs	r3, PRIMASK
 8005498:	60bb      	str	r3, [r7, #8]
  return(result);
 800549a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800549c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800549e:	2301      	movs	r3, #1
 80054a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f383 8810 	msr	PRIMASK, r3
}
 80054a8:	46c0      	nop			; (mov r8, r8)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2110      	movs	r1, #16
 80054b6:	438a      	bics	r2, r1
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	f383 8810 	msr	PRIMASK, r3
}
 80054c4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2220      	movs	r2, #32
 80054ca:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80054d8:	46c0      	nop			; (mov r8, r8)
 80054da:	46bd      	mov	sp, r7
 80054dc:	b00e      	add	sp, #56	; 0x38
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	fffffedf 	.word	0xfffffedf

080054e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	225a      	movs	r2, #90	; 0x5a
 80054f6:	2100      	movs	r1, #0
 80054f8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2252      	movs	r2, #82	; 0x52
 80054fe:	2100      	movs	r1, #0
 8005500:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	0018      	movs	r0, r3
 8005506:	f7ff fc2f 	bl	8004d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800550a:	46c0      	nop			; (mov r8, r8)
 800550c:	46bd      	mov	sp, r7
 800550e:	b004      	add	sp, #16
 8005510:	bd80      	pop	{r7, pc}

08005512 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b086      	sub	sp, #24
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800551a:	f3ef 8310 	mrs	r3, PRIMASK
 800551e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005520:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005522:	617b      	str	r3, [r7, #20]
 8005524:	2301      	movs	r3, #1
 8005526:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f383 8810 	msr	PRIMASK, r3
}
 800552e:	46c0      	nop			; (mov r8, r8)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2140      	movs	r1, #64	; 0x40
 800553c:	438a      	bics	r2, r1
 800553e:	601a      	str	r2, [r3, #0]
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	f383 8810 	msr	PRIMASK, r3
}
 800554a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2220      	movs	r2, #32
 8005550:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	0018      	movs	r0, r3
 800555c:	f7ff fbfc 	bl	8004d58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005560:	46c0      	nop			; (mov r8, r8)
 8005562:	46bd      	mov	sp, r7
 8005564:	b006      	add	sp, #24
 8005566:	bd80      	pop	{r7, pc}

08005568 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005570:	46c0      	nop			; (mov r8, r8)
 8005572:	46bd      	mov	sp, r7
 8005574:	b002      	add	sp, #8
 8005576:	bd80      	pop	{r7, pc}

08005578 <__errno>:
 8005578:	4b01      	ldr	r3, [pc, #4]	; (8005580 <__errno+0x8>)
 800557a:	6818      	ldr	r0, [r3, #0]
 800557c:	4770      	bx	lr
 800557e:	46c0      	nop			; (mov r8, r8)
 8005580:	2000000c 	.word	0x2000000c

08005584 <__libc_init_array>:
 8005584:	b570      	push	{r4, r5, r6, lr}
 8005586:	2600      	movs	r6, #0
 8005588:	4d0c      	ldr	r5, [pc, #48]	; (80055bc <__libc_init_array+0x38>)
 800558a:	4c0d      	ldr	r4, [pc, #52]	; (80055c0 <__libc_init_array+0x3c>)
 800558c:	1b64      	subs	r4, r4, r5
 800558e:	10a4      	asrs	r4, r4, #2
 8005590:	42a6      	cmp	r6, r4
 8005592:	d109      	bne.n	80055a8 <__libc_init_array+0x24>
 8005594:	2600      	movs	r6, #0
 8005596:	f004 fd47 	bl	800a028 <_init>
 800559a:	4d0a      	ldr	r5, [pc, #40]	; (80055c4 <__libc_init_array+0x40>)
 800559c:	4c0a      	ldr	r4, [pc, #40]	; (80055c8 <__libc_init_array+0x44>)
 800559e:	1b64      	subs	r4, r4, r5
 80055a0:	10a4      	asrs	r4, r4, #2
 80055a2:	42a6      	cmp	r6, r4
 80055a4:	d105      	bne.n	80055b2 <__libc_init_array+0x2e>
 80055a6:	bd70      	pop	{r4, r5, r6, pc}
 80055a8:	00b3      	lsls	r3, r6, #2
 80055aa:	58eb      	ldr	r3, [r5, r3]
 80055ac:	4798      	blx	r3
 80055ae:	3601      	adds	r6, #1
 80055b0:	e7ee      	b.n	8005590 <__libc_init_array+0xc>
 80055b2:	00b3      	lsls	r3, r6, #2
 80055b4:	58eb      	ldr	r3, [r5, r3]
 80055b6:	4798      	blx	r3
 80055b8:	3601      	adds	r6, #1
 80055ba:	e7f2      	b.n	80055a2 <__libc_init_array+0x1e>
 80055bc:	0800a5a4 	.word	0x0800a5a4
 80055c0:	0800a5a4 	.word	0x0800a5a4
 80055c4:	0800a5a4 	.word	0x0800a5a4
 80055c8:	0800a5a8 	.word	0x0800a5a8

080055cc <memset>:
 80055cc:	0003      	movs	r3, r0
 80055ce:	1882      	adds	r2, r0, r2
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d100      	bne.n	80055d6 <memset+0xa>
 80055d4:	4770      	bx	lr
 80055d6:	7019      	strb	r1, [r3, #0]
 80055d8:	3301      	adds	r3, #1
 80055da:	e7f9      	b.n	80055d0 <memset+0x4>

080055dc <__cvt>:
 80055dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055de:	001e      	movs	r6, r3
 80055e0:	2300      	movs	r3, #0
 80055e2:	0014      	movs	r4, r2
 80055e4:	b08b      	sub	sp, #44	; 0x2c
 80055e6:	429e      	cmp	r6, r3
 80055e8:	da04      	bge.n	80055f4 <__cvt+0x18>
 80055ea:	2180      	movs	r1, #128	; 0x80
 80055ec:	0609      	lsls	r1, r1, #24
 80055ee:	1873      	adds	r3, r6, r1
 80055f0:	001e      	movs	r6, r3
 80055f2:	232d      	movs	r3, #45	; 0x2d
 80055f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80055f6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80055f8:	7013      	strb	r3, [r2, #0]
 80055fa:	2320      	movs	r3, #32
 80055fc:	2203      	movs	r2, #3
 80055fe:	439f      	bics	r7, r3
 8005600:	2f46      	cmp	r7, #70	; 0x46
 8005602:	d007      	beq.n	8005614 <__cvt+0x38>
 8005604:	003b      	movs	r3, r7
 8005606:	3b45      	subs	r3, #69	; 0x45
 8005608:	4259      	negs	r1, r3
 800560a:	414b      	adcs	r3, r1
 800560c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800560e:	3a01      	subs	r2, #1
 8005610:	18cb      	adds	r3, r1, r3
 8005612:	9310      	str	r3, [sp, #64]	; 0x40
 8005614:	ab09      	add	r3, sp, #36	; 0x24
 8005616:	9304      	str	r3, [sp, #16]
 8005618:	ab08      	add	r3, sp, #32
 800561a:	9303      	str	r3, [sp, #12]
 800561c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800561e:	9200      	str	r2, [sp, #0]
 8005620:	9302      	str	r3, [sp, #8]
 8005622:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005624:	0022      	movs	r2, r4
 8005626:	9301      	str	r3, [sp, #4]
 8005628:	0033      	movs	r3, r6
 800562a:	f001 fdc3 	bl	80071b4 <_dtoa_r>
 800562e:	0005      	movs	r5, r0
 8005630:	2f47      	cmp	r7, #71	; 0x47
 8005632:	d102      	bne.n	800563a <__cvt+0x5e>
 8005634:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005636:	07db      	lsls	r3, r3, #31
 8005638:	d528      	bpl.n	800568c <__cvt+0xb0>
 800563a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800563c:	18eb      	adds	r3, r5, r3
 800563e:	9307      	str	r3, [sp, #28]
 8005640:	2f46      	cmp	r7, #70	; 0x46
 8005642:	d114      	bne.n	800566e <__cvt+0x92>
 8005644:	782b      	ldrb	r3, [r5, #0]
 8005646:	2b30      	cmp	r3, #48	; 0x30
 8005648:	d10c      	bne.n	8005664 <__cvt+0x88>
 800564a:	2200      	movs	r2, #0
 800564c:	2300      	movs	r3, #0
 800564e:	0020      	movs	r0, r4
 8005650:	0031      	movs	r1, r6
 8005652:	f7fa fefb 	bl	800044c <__aeabi_dcmpeq>
 8005656:	2800      	cmp	r0, #0
 8005658:	d104      	bne.n	8005664 <__cvt+0x88>
 800565a:	2301      	movs	r3, #1
 800565c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800565e:	1a9b      	subs	r3, r3, r2
 8005660:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005662:	6013      	str	r3, [r2, #0]
 8005664:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005666:	9a07      	ldr	r2, [sp, #28]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	18d3      	adds	r3, r2, r3
 800566c:	9307      	str	r3, [sp, #28]
 800566e:	2200      	movs	r2, #0
 8005670:	2300      	movs	r3, #0
 8005672:	0020      	movs	r0, r4
 8005674:	0031      	movs	r1, r6
 8005676:	f7fa fee9 	bl	800044c <__aeabi_dcmpeq>
 800567a:	2800      	cmp	r0, #0
 800567c:	d001      	beq.n	8005682 <__cvt+0xa6>
 800567e:	9b07      	ldr	r3, [sp, #28]
 8005680:	9309      	str	r3, [sp, #36]	; 0x24
 8005682:	2230      	movs	r2, #48	; 0x30
 8005684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005686:	9907      	ldr	r1, [sp, #28]
 8005688:	428b      	cmp	r3, r1
 800568a:	d306      	bcc.n	800569a <__cvt+0xbe>
 800568c:	0028      	movs	r0, r5
 800568e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005690:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005692:	1b5b      	subs	r3, r3, r5
 8005694:	6013      	str	r3, [r2, #0]
 8005696:	b00b      	add	sp, #44	; 0x2c
 8005698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800569a:	1c59      	adds	r1, r3, #1
 800569c:	9109      	str	r1, [sp, #36]	; 0x24
 800569e:	701a      	strb	r2, [r3, #0]
 80056a0:	e7f0      	b.n	8005684 <__cvt+0xa8>

080056a2 <__exponent>:
 80056a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056a4:	1c83      	adds	r3, r0, #2
 80056a6:	b087      	sub	sp, #28
 80056a8:	9303      	str	r3, [sp, #12]
 80056aa:	0005      	movs	r5, r0
 80056ac:	000c      	movs	r4, r1
 80056ae:	232b      	movs	r3, #43	; 0x2b
 80056b0:	7002      	strb	r2, [r0, #0]
 80056b2:	2900      	cmp	r1, #0
 80056b4:	da01      	bge.n	80056ba <__exponent+0x18>
 80056b6:	424c      	negs	r4, r1
 80056b8:	3302      	adds	r3, #2
 80056ba:	706b      	strb	r3, [r5, #1]
 80056bc:	2c09      	cmp	r4, #9
 80056be:	dd31      	ble.n	8005724 <__exponent+0x82>
 80056c0:	270a      	movs	r7, #10
 80056c2:	ab04      	add	r3, sp, #16
 80056c4:	1dde      	adds	r6, r3, #7
 80056c6:	0020      	movs	r0, r4
 80056c8:	0039      	movs	r1, r7
 80056ca:	9601      	str	r6, [sp, #4]
 80056cc:	f7fa fea8 	bl	8000420 <__aeabi_idivmod>
 80056d0:	3e01      	subs	r6, #1
 80056d2:	3130      	adds	r1, #48	; 0x30
 80056d4:	0020      	movs	r0, r4
 80056d6:	7031      	strb	r1, [r6, #0]
 80056d8:	0039      	movs	r1, r7
 80056da:	9402      	str	r4, [sp, #8]
 80056dc:	f7fa fdba 	bl	8000254 <__divsi3>
 80056e0:	9b02      	ldr	r3, [sp, #8]
 80056e2:	0004      	movs	r4, r0
 80056e4:	2b63      	cmp	r3, #99	; 0x63
 80056e6:	dcee      	bgt.n	80056c6 <__exponent+0x24>
 80056e8:	9b01      	ldr	r3, [sp, #4]
 80056ea:	3430      	adds	r4, #48	; 0x30
 80056ec:	1e9a      	subs	r2, r3, #2
 80056ee:	0013      	movs	r3, r2
 80056f0:	9903      	ldr	r1, [sp, #12]
 80056f2:	7014      	strb	r4, [r2, #0]
 80056f4:	a804      	add	r0, sp, #16
 80056f6:	3007      	adds	r0, #7
 80056f8:	4298      	cmp	r0, r3
 80056fa:	d80e      	bhi.n	800571a <__exponent+0x78>
 80056fc:	ab04      	add	r3, sp, #16
 80056fe:	3307      	adds	r3, #7
 8005700:	2000      	movs	r0, #0
 8005702:	429a      	cmp	r2, r3
 8005704:	d804      	bhi.n	8005710 <__exponent+0x6e>
 8005706:	ab04      	add	r3, sp, #16
 8005708:	3009      	adds	r0, #9
 800570a:	18c0      	adds	r0, r0, r3
 800570c:	9b01      	ldr	r3, [sp, #4]
 800570e:	1ac0      	subs	r0, r0, r3
 8005710:	9b03      	ldr	r3, [sp, #12]
 8005712:	1818      	adds	r0, r3, r0
 8005714:	1b40      	subs	r0, r0, r5
 8005716:	b007      	add	sp, #28
 8005718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800571a:	7818      	ldrb	r0, [r3, #0]
 800571c:	3301      	adds	r3, #1
 800571e:	7008      	strb	r0, [r1, #0]
 8005720:	3101      	adds	r1, #1
 8005722:	e7e7      	b.n	80056f4 <__exponent+0x52>
 8005724:	2330      	movs	r3, #48	; 0x30
 8005726:	18e4      	adds	r4, r4, r3
 8005728:	70ab      	strb	r3, [r5, #2]
 800572a:	1d28      	adds	r0, r5, #4
 800572c:	70ec      	strb	r4, [r5, #3]
 800572e:	e7f1      	b.n	8005714 <__exponent+0x72>

08005730 <_printf_float>:
 8005730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005732:	b095      	sub	sp, #84	; 0x54
 8005734:	000c      	movs	r4, r1
 8005736:	9209      	str	r2, [sp, #36]	; 0x24
 8005738:	001e      	movs	r6, r3
 800573a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800573c:	0007      	movs	r7, r0
 800573e:	f002 fec7 	bl	80084d0 <_localeconv_r>
 8005742:	6803      	ldr	r3, [r0, #0]
 8005744:	0018      	movs	r0, r3
 8005746:	930c      	str	r3, [sp, #48]	; 0x30
 8005748:	f7fa fcde 	bl	8000108 <strlen>
 800574c:	2300      	movs	r3, #0
 800574e:	9312      	str	r3, [sp, #72]	; 0x48
 8005750:	7e23      	ldrb	r3, [r4, #24]
 8005752:	2207      	movs	r2, #7
 8005754:	930a      	str	r3, [sp, #40]	; 0x28
 8005756:	6823      	ldr	r3, [r4, #0]
 8005758:	900e      	str	r0, [sp, #56]	; 0x38
 800575a:	930d      	str	r3, [sp, #52]	; 0x34
 800575c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800575e:	682b      	ldr	r3, [r5, #0]
 8005760:	05c9      	lsls	r1, r1, #23
 8005762:	d547      	bpl.n	80057f4 <_printf_float+0xc4>
 8005764:	189b      	adds	r3, r3, r2
 8005766:	4393      	bics	r3, r2
 8005768:	001a      	movs	r2, r3
 800576a:	3208      	adds	r2, #8
 800576c:	602a      	str	r2, [r5, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	64a2      	str	r2, [r4, #72]	; 0x48
 8005774:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005776:	2201      	movs	r2, #1
 8005778:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800577a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800577c:	930b      	str	r3, [sp, #44]	; 0x2c
 800577e:	006b      	lsls	r3, r5, #1
 8005780:	085b      	lsrs	r3, r3, #1
 8005782:	930f      	str	r3, [sp, #60]	; 0x3c
 8005784:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005786:	4ba7      	ldr	r3, [pc, #668]	; (8005a24 <_printf_float+0x2f4>)
 8005788:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800578a:	4252      	negs	r2, r2
 800578c:	f7fc fc38 	bl	8002000 <__aeabi_dcmpun>
 8005790:	2800      	cmp	r0, #0
 8005792:	d131      	bne.n	80057f8 <_printf_float+0xc8>
 8005794:	2201      	movs	r2, #1
 8005796:	4ba3      	ldr	r3, [pc, #652]	; (8005a24 <_printf_float+0x2f4>)
 8005798:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800579a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800579c:	4252      	negs	r2, r2
 800579e:	f7fa fe65 	bl	800046c <__aeabi_dcmple>
 80057a2:	2800      	cmp	r0, #0
 80057a4:	d128      	bne.n	80057f8 <_printf_float+0xc8>
 80057a6:	2200      	movs	r2, #0
 80057a8:	2300      	movs	r3, #0
 80057aa:	0029      	movs	r1, r5
 80057ac:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80057ae:	f7fa fe53 	bl	8000458 <__aeabi_dcmplt>
 80057b2:	2800      	cmp	r0, #0
 80057b4:	d003      	beq.n	80057be <_printf_float+0x8e>
 80057b6:	0023      	movs	r3, r4
 80057b8:	222d      	movs	r2, #45	; 0x2d
 80057ba:	3343      	adds	r3, #67	; 0x43
 80057bc:	701a      	strb	r2, [r3, #0]
 80057be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057c0:	4d99      	ldr	r5, [pc, #612]	; (8005a28 <_printf_float+0x2f8>)
 80057c2:	2b47      	cmp	r3, #71	; 0x47
 80057c4:	d900      	bls.n	80057c8 <_printf_float+0x98>
 80057c6:	4d99      	ldr	r5, [pc, #612]	; (8005a2c <_printf_float+0x2fc>)
 80057c8:	2303      	movs	r3, #3
 80057ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80057cc:	6123      	str	r3, [r4, #16]
 80057ce:	3301      	adds	r3, #1
 80057d0:	439a      	bics	r2, r3
 80057d2:	2300      	movs	r3, #0
 80057d4:	6022      	str	r2, [r4, #0]
 80057d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80057d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057da:	0021      	movs	r1, r4
 80057dc:	0038      	movs	r0, r7
 80057de:	9600      	str	r6, [sp, #0]
 80057e0:	aa13      	add	r2, sp, #76	; 0x4c
 80057e2:	f000 f9e7 	bl	8005bb4 <_printf_common>
 80057e6:	1c43      	adds	r3, r0, #1
 80057e8:	d000      	beq.n	80057ec <_printf_float+0xbc>
 80057ea:	e0a2      	b.n	8005932 <_printf_float+0x202>
 80057ec:	2001      	movs	r0, #1
 80057ee:	4240      	negs	r0, r0
 80057f0:	b015      	add	sp, #84	; 0x54
 80057f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057f4:	3307      	adds	r3, #7
 80057f6:	e7b6      	b.n	8005766 <_printf_float+0x36>
 80057f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80057fa:	002b      	movs	r3, r5
 80057fc:	0010      	movs	r0, r2
 80057fe:	0029      	movs	r1, r5
 8005800:	f7fc fbfe 	bl	8002000 <__aeabi_dcmpun>
 8005804:	2800      	cmp	r0, #0
 8005806:	d00b      	beq.n	8005820 <_printf_float+0xf0>
 8005808:	2d00      	cmp	r5, #0
 800580a:	da03      	bge.n	8005814 <_printf_float+0xe4>
 800580c:	0023      	movs	r3, r4
 800580e:	222d      	movs	r2, #45	; 0x2d
 8005810:	3343      	adds	r3, #67	; 0x43
 8005812:	701a      	strb	r2, [r3, #0]
 8005814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005816:	4d86      	ldr	r5, [pc, #536]	; (8005a30 <_printf_float+0x300>)
 8005818:	2b47      	cmp	r3, #71	; 0x47
 800581a:	d9d5      	bls.n	80057c8 <_printf_float+0x98>
 800581c:	4d85      	ldr	r5, [pc, #532]	; (8005a34 <_printf_float+0x304>)
 800581e:	e7d3      	b.n	80057c8 <_printf_float+0x98>
 8005820:	2220      	movs	r2, #32
 8005822:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005824:	6863      	ldr	r3, [r4, #4]
 8005826:	4391      	bics	r1, r2
 8005828:	910f      	str	r1, [sp, #60]	; 0x3c
 800582a:	1c5a      	adds	r2, r3, #1
 800582c:	d149      	bne.n	80058c2 <_printf_float+0x192>
 800582e:	3307      	adds	r3, #7
 8005830:	6063      	str	r3, [r4, #4]
 8005832:	2380      	movs	r3, #128	; 0x80
 8005834:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005836:	00db      	lsls	r3, r3, #3
 8005838:	4313      	orrs	r3, r2
 800583a:	2200      	movs	r2, #0
 800583c:	9206      	str	r2, [sp, #24]
 800583e:	aa12      	add	r2, sp, #72	; 0x48
 8005840:	9205      	str	r2, [sp, #20]
 8005842:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005844:	a908      	add	r1, sp, #32
 8005846:	9204      	str	r2, [sp, #16]
 8005848:	aa11      	add	r2, sp, #68	; 0x44
 800584a:	9203      	str	r2, [sp, #12]
 800584c:	2223      	movs	r2, #35	; 0x23
 800584e:	6023      	str	r3, [r4, #0]
 8005850:	9301      	str	r3, [sp, #4]
 8005852:	6863      	ldr	r3, [r4, #4]
 8005854:	1852      	adds	r2, r2, r1
 8005856:	9202      	str	r2, [sp, #8]
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	0038      	movs	r0, r7
 800585c:	002b      	movs	r3, r5
 800585e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005860:	f7ff febc 	bl	80055dc <__cvt>
 8005864:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005866:	0005      	movs	r5, r0
 8005868:	9911      	ldr	r1, [sp, #68]	; 0x44
 800586a:	2b47      	cmp	r3, #71	; 0x47
 800586c:	d108      	bne.n	8005880 <_printf_float+0x150>
 800586e:	1ccb      	adds	r3, r1, #3
 8005870:	db02      	blt.n	8005878 <_printf_float+0x148>
 8005872:	6863      	ldr	r3, [r4, #4]
 8005874:	4299      	cmp	r1, r3
 8005876:	dd48      	ble.n	800590a <_printf_float+0x1da>
 8005878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800587a:	3b02      	subs	r3, #2
 800587c:	b2db      	uxtb	r3, r3
 800587e:	930a      	str	r3, [sp, #40]	; 0x28
 8005880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005882:	2b65      	cmp	r3, #101	; 0x65
 8005884:	d824      	bhi.n	80058d0 <_printf_float+0x1a0>
 8005886:	0020      	movs	r0, r4
 8005888:	001a      	movs	r2, r3
 800588a:	3901      	subs	r1, #1
 800588c:	3050      	adds	r0, #80	; 0x50
 800588e:	9111      	str	r1, [sp, #68]	; 0x44
 8005890:	f7ff ff07 	bl	80056a2 <__exponent>
 8005894:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005896:	900b      	str	r0, [sp, #44]	; 0x2c
 8005898:	1813      	adds	r3, r2, r0
 800589a:	6123      	str	r3, [r4, #16]
 800589c:	2a01      	cmp	r2, #1
 800589e:	dc02      	bgt.n	80058a6 <_printf_float+0x176>
 80058a0:	6822      	ldr	r2, [r4, #0]
 80058a2:	07d2      	lsls	r2, r2, #31
 80058a4:	d501      	bpl.n	80058aa <_printf_float+0x17a>
 80058a6:	3301      	adds	r3, #1
 80058a8:	6123      	str	r3, [r4, #16]
 80058aa:	2323      	movs	r3, #35	; 0x23
 80058ac:	aa08      	add	r2, sp, #32
 80058ae:	189b      	adds	r3, r3, r2
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d100      	bne.n	80058b8 <_printf_float+0x188>
 80058b6:	e78f      	b.n	80057d8 <_printf_float+0xa8>
 80058b8:	0023      	movs	r3, r4
 80058ba:	222d      	movs	r2, #45	; 0x2d
 80058bc:	3343      	adds	r3, #67	; 0x43
 80058be:	701a      	strb	r2, [r3, #0]
 80058c0:	e78a      	b.n	80057d8 <_printf_float+0xa8>
 80058c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80058c4:	2a47      	cmp	r2, #71	; 0x47
 80058c6:	d1b4      	bne.n	8005832 <_printf_float+0x102>
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1b2      	bne.n	8005832 <_printf_float+0x102>
 80058cc:	3301      	adds	r3, #1
 80058ce:	e7af      	b.n	8005830 <_printf_float+0x100>
 80058d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058d2:	2b66      	cmp	r3, #102	; 0x66
 80058d4:	d11b      	bne.n	800590e <_printf_float+0x1de>
 80058d6:	6863      	ldr	r3, [r4, #4]
 80058d8:	2900      	cmp	r1, #0
 80058da:	dd0d      	ble.n	80058f8 <_printf_float+0x1c8>
 80058dc:	6121      	str	r1, [r4, #16]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d102      	bne.n	80058e8 <_printf_float+0x1b8>
 80058e2:	6822      	ldr	r2, [r4, #0]
 80058e4:	07d2      	lsls	r2, r2, #31
 80058e6:	d502      	bpl.n	80058ee <_printf_float+0x1be>
 80058e8:	3301      	adds	r3, #1
 80058ea:	1859      	adds	r1, r3, r1
 80058ec:	6121      	str	r1, [r4, #16]
 80058ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80058f0:	65a3      	str	r3, [r4, #88]	; 0x58
 80058f2:	2300      	movs	r3, #0
 80058f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80058f6:	e7d8      	b.n	80058aa <_printf_float+0x17a>
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d103      	bne.n	8005904 <_printf_float+0x1d4>
 80058fc:	2201      	movs	r2, #1
 80058fe:	6821      	ldr	r1, [r4, #0]
 8005900:	4211      	tst	r1, r2
 8005902:	d000      	beq.n	8005906 <_printf_float+0x1d6>
 8005904:	1c9a      	adds	r2, r3, #2
 8005906:	6122      	str	r2, [r4, #16]
 8005908:	e7f1      	b.n	80058ee <_printf_float+0x1be>
 800590a:	2367      	movs	r3, #103	; 0x67
 800590c:	930a      	str	r3, [sp, #40]	; 0x28
 800590e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005910:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005912:	4293      	cmp	r3, r2
 8005914:	db06      	blt.n	8005924 <_printf_float+0x1f4>
 8005916:	6822      	ldr	r2, [r4, #0]
 8005918:	6123      	str	r3, [r4, #16]
 800591a:	07d2      	lsls	r2, r2, #31
 800591c:	d5e7      	bpl.n	80058ee <_printf_float+0x1be>
 800591e:	3301      	adds	r3, #1
 8005920:	6123      	str	r3, [r4, #16]
 8005922:	e7e4      	b.n	80058ee <_printf_float+0x1be>
 8005924:	2101      	movs	r1, #1
 8005926:	2b00      	cmp	r3, #0
 8005928:	dc01      	bgt.n	800592e <_printf_float+0x1fe>
 800592a:	1849      	adds	r1, r1, r1
 800592c:	1ac9      	subs	r1, r1, r3
 800592e:	1852      	adds	r2, r2, r1
 8005930:	e7e9      	b.n	8005906 <_printf_float+0x1d6>
 8005932:	6822      	ldr	r2, [r4, #0]
 8005934:	0553      	lsls	r3, r2, #21
 8005936:	d407      	bmi.n	8005948 <_printf_float+0x218>
 8005938:	6923      	ldr	r3, [r4, #16]
 800593a:	002a      	movs	r2, r5
 800593c:	0038      	movs	r0, r7
 800593e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005940:	47b0      	blx	r6
 8005942:	1c43      	adds	r3, r0, #1
 8005944:	d128      	bne.n	8005998 <_printf_float+0x268>
 8005946:	e751      	b.n	80057ec <_printf_float+0xbc>
 8005948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800594a:	2b65      	cmp	r3, #101	; 0x65
 800594c:	d800      	bhi.n	8005950 <_printf_float+0x220>
 800594e:	e0e1      	b.n	8005b14 <_printf_float+0x3e4>
 8005950:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005952:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005954:	2200      	movs	r2, #0
 8005956:	2300      	movs	r3, #0
 8005958:	f7fa fd78 	bl	800044c <__aeabi_dcmpeq>
 800595c:	2800      	cmp	r0, #0
 800595e:	d031      	beq.n	80059c4 <_printf_float+0x294>
 8005960:	2301      	movs	r3, #1
 8005962:	0038      	movs	r0, r7
 8005964:	4a34      	ldr	r2, [pc, #208]	; (8005a38 <_printf_float+0x308>)
 8005966:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005968:	47b0      	blx	r6
 800596a:	1c43      	adds	r3, r0, #1
 800596c:	d100      	bne.n	8005970 <_printf_float+0x240>
 800596e:	e73d      	b.n	80057ec <_printf_float+0xbc>
 8005970:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005972:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005974:	4293      	cmp	r3, r2
 8005976:	db02      	blt.n	800597e <_printf_float+0x24e>
 8005978:	6823      	ldr	r3, [r4, #0]
 800597a:	07db      	lsls	r3, r3, #31
 800597c:	d50c      	bpl.n	8005998 <_printf_float+0x268>
 800597e:	0038      	movs	r0, r7
 8005980:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005982:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005984:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005986:	47b0      	blx	r6
 8005988:	2500      	movs	r5, #0
 800598a:	1c43      	adds	r3, r0, #1
 800598c:	d100      	bne.n	8005990 <_printf_float+0x260>
 800598e:	e72d      	b.n	80057ec <_printf_float+0xbc>
 8005990:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005992:	3b01      	subs	r3, #1
 8005994:	42ab      	cmp	r3, r5
 8005996:	dc0a      	bgt.n	80059ae <_printf_float+0x27e>
 8005998:	6823      	ldr	r3, [r4, #0]
 800599a:	079b      	lsls	r3, r3, #30
 800599c:	d500      	bpl.n	80059a0 <_printf_float+0x270>
 800599e:	e106      	b.n	8005bae <_printf_float+0x47e>
 80059a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80059a2:	68e0      	ldr	r0, [r4, #12]
 80059a4:	4298      	cmp	r0, r3
 80059a6:	db00      	blt.n	80059aa <_printf_float+0x27a>
 80059a8:	e722      	b.n	80057f0 <_printf_float+0xc0>
 80059aa:	0018      	movs	r0, r3
 80059ac:	e720      	b.n	80057f0 <_printf_float+0xc0>
 80059ae:	0022      	movs	r2, r4
 80059b0:	2301      	movs	r3, #1
 80059b2:	0038      	movs	r0, r7
 80059b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059b6:	321a      	adds	r2, #26
 80059b8:	47b0      	blx	r6
 80059ba:	1c43      	adds	r3, r0, #1
 80059bc:	d100      	bne.n	80059c0 <_printf_float+0x290>
 80059be:	e715      	b.n	80057ec <_printf_float+0xbc>
 80059c0:	3501      	adds	r5, #1
 80059c2:	e7e5      	b.n	8005990 <_printf_float+0x260>
 80059c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	dc38      	bgt.n	8005a3c <_printf_float+0x30c>
 80059ca:	2301      	movs	r3, #1
 80059cc:	0038      	movs	r0, r7
 80059ce:	4a1a      	ldr	r2, [pc, #104]	; (8005a38 <_printf_float+0x308>)
 80059d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059d2:	47b0      	blx	r6
 80059d4:	1c43      	adds	r3, r0, #1
 80059d6:	d100      	bne.n	80059da <_printf_float+0x2aa>
 80059d8:	e708      	b.n	80057ec <_printf_float+0xbc>
 80059da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80059dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80059de:	4313      	orrs	r3, r2
 80059e0:	d102      	bne.n	80059e8 <_printf_float+0x2b8>
 80059e2:	6823      	ldr	r3, [r4, #0]
 80059e4:	07db      	lsls	r3, r3, #31
 80059e6:	d5d7      	bpl.n	8005998 <_printf_float+0x268>
 80059e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059ea:	0038      	movs	r0, r7
 80059ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059f0:	47b0      	blx	r6
 80059f2:	1c43      	adds	r3, r0, #1
 80059f4:	d100      	bne.n	80059f8 <_printf_float+0x2c8>
 80059f6:	e6f9      	b.n	80057ec <_printf_float+0xbc>
 80059f8:	2300      	movs	r3, #0
 80059fa:	930a      	str	r3, [sp, #40]	; 0x28
 80059fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80059fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a00:	425b      	negs	r3, r3
 8005a02:	4293      	cmp	r3, r2
 8005a04:	dc01      	bgt.n	8005a0a <_printf_float+0x2da>
 8005a06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a08:	e797      	b.n	800593a <_printf_float+0x20a>
 8005a0a:	0022      	movs	r2, r4
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	0038      	movs	r0, r7
 8005a10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a12:	321a      	adds	r2, #26
 8005a14:	47b0      	blx	r6
 8005a16:	1c43      	adds	r3, r0, #1
 8005a18:	d100      	bne.n	8005a1c <_printf_float+0x2ec>
 8005a1a:	e6e7      	b.n	80057ec <_printf_float+0xbc>
 8005a1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a1e:	3301      	adds	r3, #1
 8005a20:	e7eb      	b.n	80059fa <_printf_float+0x2ca>
 8005a22:	46c0      	nop			; (mov r8, r8)
 8005a24:	7fefffff 	.word	0x7fefffff
 8005a28:	0800a104 	.word	0x0800a104
 8005a2c:	0800a108 	.word	0x0800a108
 8005a30:	0800a10c 	.word	0x0800a10c
 8005a34:	0800a110 	.word	0x0800a110
 8005a38:	0800a114 	.word	0x0800a114
 8005a3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005a3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a40:	920a      	str	r2, [sp, #40]	; 0x28
 8005a42:	429a      	cmp	r2, r3
 8005a44:	dd00      	ble.n	8005a48 <_printf_float+0x318>
 8005a46:	930a      	str	r3, [sp, #40]	; 0x28
 8005a48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	dc3c      	bgt.n	8005ac8 <_printf_float+0x398>
 8005a4e:	2300      	movs	r3, #0
 8005a50:	930d      	str	r3, [sp, #52]	; 0x34
 8005a52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a54:	43db      	mvns	r3, r3
 8005a56:	17db      	asrs	r3, r3, #31
 8005a58:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a5c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005a5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a62:	4013      	ands	r3, r2
 8005a64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	dc34      	bgt.n	8005ad8 <_printf_float+0x3a8>
 8005a6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005a70:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005a72:	4293      	cmp	r3, r2
 8005a74:	db3d      	blt.n	8005af2 <_printf_float+0x3c2>
 8005a76:	6823      	ldr	r3, [r4, #0]
 8005a78:	07db      	lsls	r3, r3, #31
 8005a7a:	d43a      	bmi.n	8005af2 <_printf_float+0x3c2>
 8005a7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005a7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a80:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	1a52      	subs	r2, r2, r1
 8005a86:	920a      	str	r2, [sp, #40]	; 0x28
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	dd00      	ble.n	8005a8e <_printf_float+0x35e>
 8005a8c:	930a      	str	r3, [sp, #40]	; 0x28
 8005a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	dc36      	bgt.n	8005b02 <_printf_float+0x3d2>
 8005a94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a96:	2500      	movs	r5, #0
 8005a98:	43db      	mvns	r3, r3
 8005a9a:	17db      	asrs	r3, r3, #31
 8005a9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005aa0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005aa2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005aa4:	1a9b      	subs	r3, r3, r2
 8005aa6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005aa8:	400a      	ands	r2, r1
 8005aaa:	1a9b      	subs	r3, r3, r2
 8005aac:	42ab      	cmp	r3, r5
 8005aae:	dc00      	bgt.n	8005ab2 <_printf_float+0x382>
 8005ab0:	e772      	b.n	8005998 <_printf_float+0x268>
 8005ab2:	0022      	movs	r2, r4
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	0038      	movs	r0, r7
 8005ab8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005aba:	321a      	adds	r2, #26
 8005abc:	47b0      	blx	r6
 8005abe:	1c43      	adds	r3, r0, #1
 8005ac0:	d100      	bne.n	8005ac4 <_printf_float+0x394>
 8005ac2:	e693      	b.n	80057ec <_printf_float+0xbc>
 8005ac4:	3501      	adds	r5, #1
 8005ac6:	e7ea      	b.n	8005a9e <_printf_float+0x36e>
 8005ac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aca:	002a      	movs	r2, r5
 8005acc:	0038      	movs	r0, r7
 8005ace:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ad0:	47b0      	blx	r6
 8005ad2:	1c43      	adds	r3, r0, #1
 8005ad4:	d1bb      	bne.n	8005a4e <_printf_float+0x31e>
 8005ad6:	e689      	b.n	80057ec <_printf_float+0xbc>
 8005ad8:	0022      	movs	r2, r4
 8005ada:	2301      	movs	r3, #1
 8005adc:	0038      	movs	r0, r7
 8005ade:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ae0:	321a      	adds	r2, #26
 8005ae2:	47b0      	blx	r6
 8005ae4:	1c43      	adds	r3, r0, #1
 8005ae6:	d100      	bne.n	8005aea <_printf_float+0x3ba>
 8005ae8:	e680      	b.n	80057ec <_printf_float+0xbc>
 8005aea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005aec:	3301      	adds	r3, #1
 8005aee:	930d      	str	r3, [sp, #52]	; 0x34
 8005af0:	e7b3      	b.n	8005a5a <_printf_float+0x32a>
 8005af2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005af4:	0038      	movs	r0, r7
 8005af6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005af8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005afa:	47b0      	blx	r6
 8005afc:	1c43      	adds	r3, r0, #1
 8005afe:	d1bd      	bne.n	8005a7c <_printf_float+0x34c>
 8005b00:	e674      	b.n	80057ec <_printf_float+0xbc>
 8005b02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b04:	0038      	movs	r0, r7
 8005b06:	18ea      	adds	r2, r5, r3
 8005b08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b0c:	47b0      	blx	r6
 8005b0e:	1c43      	adds	r3, r0, #1
 8005b10:	d1c0      	bne.n	8005a94 <_printf_float+0x364>
 8005b12:	e66b      	b.n	80057ec <_printf_float+0xbc>
 8005b14:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	dc02      	bgt.n	8005b20 <_printf_float+0x3f0>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	421a      	tst	r2, r3
 8005b1e:	d034      	beq.n	8005b8a <_printf_float+0x45a>
 8005b20:	2301      	movs	r3, #1
 8005b22:	002a      	movs	r2, r5
 8005b24:	0038      	movs	r0, r7
 8005b26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b28:	47b0      	blx	r6
 8005b2a:	1c43      	adds	r3, r0, #1
 8005b2c:	d100      	bne.n	8005b30 <_printf_float+0x400>
 8005b2e:	e65d      	b.n	80057ec <_printf_float+0xbc>
 8005b30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b32:	0038      	movs	r0, r7
 8005b34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b38:	47b0      	blx	r6
 8005b3a:	1c43      	adds	r3, r0, #1
 8005b3c:	d100      	bne.n	8005b40 <_printf_float+0x410>
 8005b3e:	e655      	b.n	80057ec <_printf_float+0xbc>
 8005b40:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005b42:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005b44:	2200      	movs	r2, #0
 8005b46:	2300      	movs	r3, #0
 8005b48:	f7fa fc80 	bl	800044c <__aeabi_dcmpeq>
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	d11a      	bne.n	8005b86 <_printf_float+0x456>
 8005b50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b52:	1c6a      	adds	r2, r5, #1
 8005b54:	3b01      	subs	r3, #1
 8005b56:	0038      	movs	r0, r7
 8005b58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b5a:	47b0      	blx	r6
 8005b5c:	1c43      	adds	r3, r0, #1
 8005b5e:	d10e      	bne.n	8005b7e <_printf_float+0x44e>
 8005b60:	e644      	b.n	80057ec <_printf_float+0xbc>
 8005b62:	0022      	movs	r2, r4
 8005b64:	2301      	movs	r3, #1
 8005b66:	0038      	movs	r0, r7
 8005b68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b6a:	321a      	adds	r2, #26
 8005b6c:	47b0      	blx	r6
 8005b6e:	1c43      	adds	r3, r0, #1
 8005b70:	d100      	bne.n	8005b74 <_printf_float+0x444>
 8005b72:	e63b      	b.n	80057ec <_printf_float+0xbc>
 8005b74:	3501      	adds	r5, #1
 8005b76:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	42ab      	cmp	r3, r5
 8005b7c:	dcf1      	bgt.n	8005b62 <_printf_float+0x432>
 8005b7e:	0022      	movs	r2, r4
 8005b80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b82:	3250      	adds	r2, #80	; 0x50
 8005b84:	e6da      	b.n	800593c <_printf_float+0x20c>
 8005b86:	2500      	movs	r5, #0
 8005b88:	e7f5      	b.n	8005b76 <_printf_float+0x446>
 8005b8a:	002a      	movs	r2, r5
 8005b8c:	e7e3      	b.n	8005b56 <_printf_float+0x426>
 8005b8e:	0022      	movs	r2, r4
 8005b90:	2301      	movs	r3, #1
 8005b92:	0038      	movs	r0, r7
 8005b94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b96:	3219      	adds	r2, #25
 8005b98:	47b0      	blx	r6
 8005b9a:	1c43      	adds	r3, r0, #1
 8005b9c:	d100      	bne.n	8005ba0 <_printf_float+0x470>
 8005b9e:	e625      	b.n	80057ec <_printf_float+0xbc>
 8005ba0:	3501      	adds	r5, #1
 8005ba2:	68e3      	ldr	r3, [r4, #12]
 8005ba4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005ba6:	1a9b      	subs	r3, r3, r2
 8005ba8:	42ab      	cmp	r3, r5
 8005baa:	dcf0      	bgt.n	8005b8e <_printf_float+0x45e>
 8005bac:	e6f8      	b.n	80059a0 <_printf_float+0x270>
 8005bae:	2500      	movs	r5, #0
 8005bb0:	e7f7      	b.n	8005ba2 <_printf_float+0x472>
 8005bb2:	46c0      	nop			; (mov r8, r8)

08005bb4 <_printf_common>:
 8005bb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bb6:	0015      	movs	r5, r2
 8005bb8:	9301      	str	r3, [sp, #4]
 8005bba:	688a      	ldr	r2, [r1, #8]
 8005bbc:	690b      	ldr	r3, [r1, #16]
 8005bbe:	000c      	movs	r4, r1
 8005bc0:	9000      	str	r0, [sp, #0]
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	da00      	bge.n	8005bc8 <_printf_common+0x14>
 8005bc6:	0013      	movs	r3, r2
 8005bc8:	0022      	movs	r2, r4
 8005bca:	602b      	str	r3, [r5, #0]
 8005bcc:	3243      	adds	r2, #67	; 0x43
 8005bce:	7812      	ldrb	r2, [r2, #0]
 8005bd0:	2a00      	cmp	r2, #0
 8005bd2:	d001      	beq.n	8005bd8 <_printf_common+0x24>
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	602b      	str	r3, [r5, #0]
 8005bd8:	6823      	ldr	r3, [r4, #0]
 8005bda:	069b      	lsls	r3, r3, #26
 8005bdc:	d502      	bpl.n	8005be4 <_printf_common+0x30>
 8005bde:	682b      	ldr	r3, [r5, #0]
 8005be0:	3302      	adds	r3, #2
 8005be2:	602b      	str	r3, [r5, #0]
 8005be4:	6822      	ldr	r2, [r4, #0]
 8005be6:	2306      	movs	r3, #6
 8005be8:	0017      	movs	r7, r2
 8005bea:	401f      	ands	r7, r3
 8005bec:	421a      	tst	r2, r3
 8005bee:	d027      	beq.n	8005c40 <_printf_common+0x8c>
 8005bf0:	0023      	movs	r3, r4
 8005bf2:	3343      	adds	r3, #67	; 0x43
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	1e5a      	subs	r2, r3, #1
 8005bf8:	4193      	sbcs	r3, r2
 8005bfa:	6822      	ldr	r2, [r4, #0]
 8005bfc:	0692      	lsls	r2, r2, #26
 8005bfe:	d430      	bmi.n	8005c62 <_printf_common+0xae>
 8005c00:	0022      	movs	r2, r4
 8005c02:	9901      	ldr	r1, [sp, #4]
 8005c04:	9800      	ldr	r0, [sp, #0]
 8005c06:	9e08      	ldr	r6, [sp, #32]
 8005c08:	3243      	adds	r2, #67	; 0x43
 8005c0a:	47b0      	blx	r6
 8005c0c:	1c43      	adds	r3, r0, #1
 8005c0e:	d025      	beq.n	8005c5c <_printf_common+0xa8>
 8005c10:	2306      	movs	r3, #6
 8005c12:	6820      	ldr	r0, [r4, #0]
 8005c14:	682a      	ldr	r2, [r5, #0]
 8005c16:	68e1      	ldr	r1, [r4, #12]
 8005c18:	2500      	movs	r5, #0
 8005c1a:	4003      	ands	r3, r0
 8005c1c:	2b04      	cmp	r3, #4
 8005c1e:	d103      	bne.n	8005c28 <_printf_common+0x74>
 8005c20:	1a8d      	subs	r5, r1, r2
 8005c22:	43eb      	mvns	r3, r5
 8005c24:	17db      	asrs	r3, r3, #31
 8005c26:	401d      	ands	r5, r3
 8005c28:	68a3      	ldr	r3, [r4, #8]
 8005c2a:	6922      	ldr	r2, [r4, #16]
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	dd01      	ble.n	8005c34 <_printf_common+0x80>
 8005c30:	1a9b      	subs	r3, r3, r2
 8005c32:	18ed      	adds	r5, r5, r3
 8005c34:	2700      	movs	r7, #0
 8005c36:	42bd      	cmp	r5, r7
 8005c38:	d120      	bne.n	8005c7c <_printf_common+0xc8>
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	e010      	b.n	8005c60 <_printf_common+0xac>
 8005c3e:	3701      	adds	r7, #1
 8005c40:	68e3      	ldr	r3, [r4, #12]
 8005c42:	682a      	ldr	r2, [r5, #0]
 8005c44:	1a9b      	subs	r3, r3, r2
 8005c46:	42bb      	cmp	r3, r7
 8005c48:	ddd2      	ble.n	8005bf0 <_printf_common+0x3c>
 8005c4a:	0022      	movs	r2, r4
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	9901      	ldr	r1, [sp, #4]
 8005c50:	9800      	ldr	r0, [sp, #0]
 8005c52:	9e08      	ldr	r6, [sp, #32]
 8005c54:	3219      	adds	r2, #25
 8005c56:	47b0      	blx	r6
 8005c58:	1c43      	adds	r3, r0, #1
 8005c5a:	d1f0      	bne.n	8005c3e <_printf_common+0x8a>
 8005c5c:	2001      	movs	r0, #1
 8005c5e:	4240      	negs	r0, r0
 8005c60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c62:	2030      	movs	r0, #48	; 0x30
 8005c64:	18e1      	adds	r1, r4, r3
 8005c66:	3143      	adds	r1, #67	; 0x43
 8005c68:	7008      	strb	r0, [r1, #0]
 8005c6a:	0021      	movs	r1, r4
 8005c6c:	1c5a      	adds	r2, r3, #1
 8005c6e:	3145      	adds	r1, #69	; 0x45
 8005c70:	7809      	ldrb	r1, [r1, #0]
 8005c72:	18a2      	adds	r2, r4, r2
 8005c74:	3243      	adds	r2, #67	; 0x43
 8005c76:	3302      	adds	r3, #2
 8005c78:	7011      	strb	r1, [r2, #0]
 8005c7a:	e7c1      	b.n	8005c00 <_printf_common+0x4c>
 8005c7c:	0022      	movs	r2, r4
 8005c7e:	2301      	movs	r3, #1
 8005c80:	9901      	ldr	r1, [sp, #4]
 8005c82:	9800      	ldr	r0, [sp, #0]
 8005c84:	9e08      	ldr	r6, [sp, #32]
 8005c86:	321a      	adds	r2, #26
 8005c88:	47b0      	blx	r6
 8005c8a:	1c43      	adds	r3, r0, #1
 8005c8c:	d0e6      	beq.n	8005c5c <_printf_common+0xa8>
 8005c8e:	3701      	adds	r7, #1
 8005c90:	e7d1      	b.n	8005c36 <_printf_common+0x82>
	...

08005c94 <_printf_i>:
 8005c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c96:	b08b      	sub	sp, #44	; 0x2c
 8005c98:	9206      	str	r2, [sp, #24]
 8005c9a:	000a      	movs	r2, r1
 8005c9c:	3243      	adds	r2, #67	; 0x43
 8005c9e:	9307      	str	r3, [sp, #28]
 8005ca0:	9005      	str	r0, [sp, #20]
 8005ca2:	9204      	str	r2, [sp, #16]
 8005ca4:	7e0a      	ldrb	r2, [r1, #24]
 8005ca6:	000c      	movs	r4, r1
 8005ca8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005caa:	2a78      	cmp	r2, #120	; 0x78
 8005cac:	d807      	bhi.n	8005cbe <_printf_i+0x2a>
 8005cae:	2a62      	cmp	r2, #98	; 0x62
 8005cb0:	d809      	bhi.n	8005cc6 <_printf_i+0x32>
 8005cb2:	2a00      	cmp	r2, #0
 8005cb4:	d100      	bne.n	8005cb8 <_printf_i+0x24>
 8005cb6:	e0c1      	b.n	8005e3c <_printf_i+0x1a8>
 8005cb8:	2a58      	cmp	r2, #88	; 0x58
 8005cba:	d100      	bne.n	8005cbe <_printf_i+0x2a>
 8005cbc:	e08c      	b.n	8005dd8 <_printf_i+0x144>
 8005cbe:	0026      	movs	r6, r4
 8005cc0:	3642      	adds	r6, #66	; 0x42
 8005cc2:	7032      	strb	r2, [r6, #0]
 8005cc4:	e022      	b.n	8005d0c <_printf_i+0x78>
 8005cc6:	0010      	movs	r0, r2
 8005cc8:	3863      	subs	r0, #99	; 0x63
 8005cca:	2815      	cmp	r0, #21
 8005ccc:	d8f7      	bhi.n	8005cbe <_printf_i+0x2a>
 8005cce:	f7fa fa2d 	bl	800012c <__gnu_thumb1_case_shi>
 8005cd2:	0016      	.short	0x0016
 8005cd4:	fff6001f 	.word	0xfff6001f
 8005cd8:	fff6fff6 	.word	0xfff6fff6
 8005cdc:	001ffff6 	.word	0x001ffff6
 8005ce0:	fff6fff6 	.word	0xfff6fff6
 8005ce4:	fff6fff6 	.word	0xfff6fff6
 8005ce8:	003600a8 	.word	0x003600a8
 8005cec:	fff6009a 	.word	0xfff6009a
 8005cf0:	00b9fff6 	.word	0x00b9fff6
 8005cf4:	0036fff6 	.word	0x0036fff6
 8005cf8:	fff6fff6 	.word	0xfff6fff6
 8005cfc:	009e      	.short	0x009e
 8005cfe:	0026      	movs	r6, r4
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	3642      	adds	r6, #66	; 0x42
 8005d04:	1d11      	adds	r1, r2, #4
 8005d06:	6019      	str	r1, [r3, #0]
 8005d08:	6813      	ldr	r3, [r2, #0]
 8005d0a:	7033      	strb	r3, [r6, #0]
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e0a7      	b.n	8005e60 <_printf_i+0x1cc>
 8005d10:	6808      	ldr	r0, [r1, #0]
 8005d12:	6819      	ldr	r1, [r3, #0]
 8005d14:	1d0a      	adds	r2, r1, #4
 8005d16:	0605      	lsls	r5, r0, #24
 8005d18:	d50b      	bpl.n	8005d32 <_printf_i+0x9e>
 8005d1a:	680d      	ldr	r5, [r1, #0]
 8005d1c:	601a      	str	r2, [r3, #0]
 8005d1e:	2d00      	cmp	r5, #0
 8005d20:	da03      	bge.n	8005d2a <_printf_i+0x96>
 8005d22:	232d      	movs	r3, #45	; 0x2d
 8005d24:	9a04      	ldr	r2, [sp, #16]
 8005d26:	426d      	negs	r5, r5
 8005d28:	7013      	strb	r3, [r2, #0]
 8005d2a:	4b61      	ldr	r3, [pc, #388]	; (8005eb0 <_printf_i+0x21c>)
 8005d2c:	270a      	movs	r7, #10
 8005d2e:	9303      	str	r3, [sp, #12]
 8005d30:	e01b      	b.n	8005d6a <_printf_i+0xd6>
 8005d32:	680d      	ldr	r5, [r1, #0]
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	0641      	lsls	r1, r0, #25
 8005d38:	d5f1      	bpl.n	8005d1e <_printf_i+0x8a>
 8005d3a:	b22d      	sxth	r5, r5
 8005d3c:	e7ef      	b.n	8005d1e <_printf_i+0x8a>
 8005d3e:	680d      	ldr	r5, [r1, #0]
 8005d40:	6819      	ldr	r1, [r3, #0]
 8005d42:	1d08      	adds	r0, r1, #4
 8005d44:	6018      	str	r0, [r3, #0]
 8005d46:	062e      	lsls	r6, r5, #24
 8005d48:	d501      	bpl.n	8005d4e <_printf_i+0xba>
 8005d4a:	680d      	ldr	r5, [r1, #0]
 8005d4c:	e003      	b.n	8005d56 <_printf_i+0xc2>
 8005d4e:	066d      	lsls	r5, r5, #25
 8005d50:	d5fb      	bpl.n	8005d4a <_printf_i+0xb6>
 8005d52:	680d      	ldr	r5, [r1, #0]
 8005d54:	b2ad      	uxth	r5, r5
 8005d56:	4b56      	ldr	r3, [pc, #344]	; (8005eb0 <_printf_i+0x21c>)
 8005d58:	2708      	movs	r7, #8
 8005d5a:	9303      	str	r3, [sp, #12]
 8005d5c:	2a6f      	cmp	r2, #111	; 0x6f
 8005d5e:	d000      	beq.n	8005d62 <_printf_i+0xce>
 8005d60:	3702      	adds	r7, #2
 8005d62:	0023      	movs	r3, r4
 8005d64:	2200      	movs	r2, #0
 8005d66:	3343      	adds	r3, #67	; 0x43
 8005d68:	701a      	strb	r2, [r3, #0]
 8005d6a:	6863      	ldr	r3, [r4, #4]
 8005d6c:	60a3      	str	r3, [r4, #8]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	db03      	blt.n	8005d7a <_printf_i+0xe6>
 8005d72:	2204      	movs	r2, #4
 8005d74:	6821      	ldr	r1, [r4, #0]
 8005d76:	4391      	bics	r1, r2
 8005d78:	6021      	str	r1, [r4, #0]
 8005d7a:	2d00      	cmp	r5, #0
 8005d7c:	d102      	bne.n	8005d84 <_printf_i+0xf0>
 8005d7e:	9e04      	ldr	r6, [sp, #16]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00c      	beq.n	8005d9e <_printf_i+0x10a>
 8005d84:	9e04      	ldr	r6, [sp, #16]
 8005d86:	0028      	movs	r0, r5
 8005d88:	0039      	movs	r1, r7
 8005d8a:	f7fa fa5f 	bl	800024c <__aeabi_uidivmod>
 8005d8e:	9b03      	ldr	r3, [sp, #12]
 8005d90:	3e01      	subs	r6, #1
 8005d92:	5c5b      	ldrb	r3, [r3, r1]
 8005d94:	7033      	strb	r3, [r6, #0]
 8005d96:	002b      	movs	r3, r5
 8005d98:	0005      	movs	r5, r0
 8005d9a:	429f      	cmp	r7, r3
 8005d9c:	d9f3      	bls.n	8005d86 <_printf_i+0xf2>
 8005d9e:	2f08      	cmp	r7, #8
 8005da0:	d109      	bne.n	8005db6 <_printf_i+0x122>
 8005da2:	6823      	ldr	r3, [r4, #0]
 8005da4:	07db      	lsls	r3, r3, #31
 8005da6:	d506      	bpl.n	8005db6 <_printf_i+0x122>
 8005da8:	6863      	ldr	r3, [r4, #4]
 8005daa:	6922      	ldr	r2, [r4, #16]
 8005dac:	4293      	cmp	r3, r2
 8005dae:	dc02      	bgt.n	8005db6 <_printf_i+0x122>
 8005db0:	2330      	movs	r3, #48	; 0x30
 8005db2:	3e01      	subs	r6, #1
 8005db4:	7033      	strb	r3, [r6, #0]
 8005db6:	9b04      	ldr	r3, [sp, #16]
 8005db8:	1b9b      	subs	r3, r3, r6
 8005dba:	6123      	str	r3, [r4, #16]
 8005dbc:	9b07      	ldr	r3, [sp, #28]
 8005dbe:	0021      	movs	r1, r4
 8005dc0:	9300      	str	r3, [sp, #0]
 8005dc2:	9805      	ldr	r0, [sp, #20]
 8005dc4:	9b06      	ldr	r3, [sp, #24]
 8005dc6:	aa09      	add	r2, sp, #36	; 0x24
 8005dc8:	f7ff fef4 	bl	8005bb4 <_printf_common>
 8005dcc:	1c43      	adds	r3, r0, #1
 8005dce:	d14c      	bne.n	8005e6a <_printf_i+0x1d6>
 8005dd0:	2001      	movs	r0, #1
 8005dd2:	4240      	negs	r0, r0
 8005dd4:	b00b      	add	sp, #44	; 0x2c
 8005dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dd8:	3145      	adds	r1, #69	; 0x45
 8005dda:	700a      	strb	r2, [r1, #0]
 8005ddc:	4a34      	ldr	r2, [pc, #208]	; (8005eb0 <_printf_i+0x21c>)
 8005dde:	9203      	str	r2, [sp, #12]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	6821      	ldr	r1, [r4, #0]
 8005de4:	ca20      	ldmia	r2!, {r5}
 8005de6:	601a      	str	r2, [r3, #0]
 8005de8:	0608      	lsls	r0, r1, #24
 8005dea:	d516      	bpl.n	8005e1a <_printf_i+0x186>
 8005dec:	07cb      	lsls	r3, r1, #31
 8005dee:	d502      	bpl.n	8005df6 <_printf_i+0x162>
 8005df0:	2320      	movs	r3, #32
 8005df2:	4319      	orrs	r1, r3
 8005df4:	6021      	str	r1, [r4, #0]
 8005df6:	2710      	movs	r7, #16
 8005df8:	2d00      	cmp	r5, #0
 8005dfa:	d1b2      	bne.n	8005d62 <_printf_i+0xce>
 8005dfc:	2320      	movs	r3, #32
 8005dfe:	6822      	ldr	r2, [r4, #0]
 8005e00:	439a      	bics	r2, r3
 8005e02:	6022      	str	r2, [r4, #0]
 8005e04:	e7ad      	b.n	8005d62 <_printf_i+0xce>
 8005e06:	2220      	movs	r2, #32
 8005e08:	6809      	ldr	r1, [r1, #0]
 8005e0a:	430a      	orrs	r2, r1
 8005e0c:	6022      	str	r2, [r4, #0]
 8005e0e:	0022      	movs	r2, r4
 8005e10:	2178      	movs	r1, #120	; 0x78
 8005e12:	3245      	adds	r2, #69	; 0x45
 8005e14:	7011      	strb	r1, [r2, #0]
 8005e16:	4a27      	ldr	r2, [pc, #156]	; (8005eb4 <_printf_i+0x220>)
 8005e18:	e7e1      	b.n	8005dde <_printf_i+0x14a>
 8005e1a:	0648      	lsls	r0, r1, #25
 8005e1c:	d5e6      	bpl.n	8005dec <_printf_i+0x158>
 8005e1e:	b2ad      	uxth	r5, r5
 8005e20:	e7e4      	b.n	8005dec <_printf_i+0x158>
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	680d      	ldr	r5, [r1, #0]
 8005e26:	1d10      	adds	r0, r2, #4
 8005e28:	6949      	ldr	r1, [r1, #20]
 8005e2a:	6018      	str	r0, [r3, #0]
 8005e2c:	6813      	ldr	r3, [r2, #0]
 8005e2e:	062e      	lsls	r6, r5, #24
 8005e30:	d501      	bpl.n	8005e36 <_printf_i+0x1a2>
 8005e32:	6019      	str	r1, [r3, #0]
 8005e34:	e002      	b.n	8005e3c <_printf_i+0x1a8>
 8005e36:	066d      	lsls	r5, r5, #25
 8005e38:	d5fb      	bpl.n	8005e32 <_printf_i+0x19e>
 8005e3a:	8019      	strh	r1, [r3, #0]
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	9e04      	ldr	r6, [sp, #16]
 8005e40:	6123      	str	r3, [r4, #16]
 8005e42:	e7bb      	b.n	8005dbc <_printf_i+0x128>
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	1d11      	adds	r1, r2, #4
 8005e48:	6019      	str	r1, [r3, #0]
 8005e4a:	6816      	ldr	r6, [r2, #0]
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	0030      	movs	r0, r6
 8005e50:	6862      	ldr	r2, [r4, #4]
 8005e52:	f002 fb5d 	bl	8008510 <memchr>
 8005e56:	2800      	cmp	r0, #0
 8005e58:	d001      	beq.n	8005e5e <_printf_i+0x1ca>
 8005e5a:	1b80      	subs	r0, r0, r6
 8005e5c:	6060      	str	r0, [r4, #4]
 8005e5e:	6863      	ldr	r3, [r4, #4]
 8005e60:	6123      	str	r3, [r4, #16]
 8005e62:	2300      	movs	r3, #0
 8005e64:	9a04      	ldr	r2, [sp, #16]
 8005e66:	7013      	strb	r3, [r2, #0]
 8005e68:	e7a8      	b.n	8005dbc <_printf_i+0x128>
 8005e6a:	6923      	ldr	r3, [r4, #16]
 8005e6c:	0032      	movs	r2, r6
 8005e6e:	9906      	ldr	r1, [sp, #24]
 8005e70:	9805      	ldr	r0, [sp, #20]
 8005e72:	9d07      	ldr	r5, [sp, #28]
 8005e74:	47a8      	blx	r5
 8005e76:	1c43      	adds	r3, r0, #1
 8005e78:	d0aa      	beq.n	8005dd0 <_printf_i+0x13c>
 8005e7a:	6823      	ldr	r3, [r4, #0]
 8005e7c:	079b      	lsls	r3, r3, #30
 8005e7e:	d415      	bmi.n	8005eac <_printf_i+0x218>
 8005e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e82:	68e0      	ldr	r0, [r4, #12]
 8005e84:	4298      	cmp	r0, r3
 8005e86:	daa5      	bge.n	8005dd4 <_printf_i+0x140>
 8005e88:	0018      	movs	r0, r3
 8005e8a:	e7a3      	b.n	8005dd4 <_printf_i+0x140>
 8005e8c:	0022      	movs	r2, r4
 8005e8e:	2301      	movs	r3, #1
 8005e90:	9906      	ldr	r1, [sp, #24]
 8005e92:	9805      	ldr	r0, [sp, #20]
 8005e94:	9e07      	ldr	r6, [sp, #28]
 8005e96:	3219      	adds	r2, #25
 8005e98:	47b0      	blx	r6
 8005e9a:	1c43      	adds	r3, r0, #1
 8005e9c:	d098      	beq.n	8005dd0 <_printf_i+0x13c>
 8005e9e:	3501      	adds	r5, #1
 8005ea0:	68e3      	ldr	r3, [r4, #12]
 8005ea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ea4:	1a9b      	subs	r3, r3, r2
 8005ea6:	42ab      	cmp	r3, r5
 8005ea8:	dcf0      	bgt.n	8005e8c <_printf_i+0x1f8>
 8005eaa:	e7e9      	b.n	8005e80 <_printf_i+0x1ec>
 8005eac:	2500      	movs	r5, #0
 8005eae:	e7f7      	b.n	8005ea0 <_printf_i+0x20c>
 8005eb0:	0800a116 	.word	0x0800a116
 8005eb4:	0800a127 	.word	0x0800a127

08005eb8 <_scanf_float>:
 8005eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eba:	b08b      	sub	sp, #44	; 0x2c
 8005ebc:	0015      	movs	r5, r2
 8005ebe:	9001      	str	r0, [sp, #4]
 8005ec0:	22ae      	movs	r2, #174	; 0xae
 8005ec2:	2000      	movs	r0, #0
 8005ec4:	9306      	str	r3, [sp, #24]
 8005ec6:	688b      	ldr	r3, [r1, #8]
 8005ec8:	000e      	movs	r6, r1
 8005eca:	1e59      	subs	r1, r3, #1
 8005ecc:	0052      	lsls	r2, r2, #1
 8005ece:	9005      	str	r0, [sp, #20]
 8005ed0:	4291      	cmp	r1, r2
 8005ed2:	d905      	bls.n	8005ee0 <_scanf_float+0x28>
 8005ed4:	3b5e      	subs	r3, #94	; 0x5e
 8005ed6:	3bff      	subs	r3, #255	; 0xff
 8005ed8:	9305      	str	r3, [sp, #20]
 8005eda:	235e      	movs	r3, #94	; 0x5e
 8005edc:	33ff      	adds	r3, #255	; 0xff
 8005ede:	60b3      	str	r3, [r6, #8]
 8005ee0:	23f0      	movs	r3, #240	; 0xf0
 8005ee2:	6832      	ldr	r2, [r6, #0]
 8005ee4:	00db      	lsls	r3, r3, #3
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	6033      	str	r3, [r6, #0]
 8005eea:	0033      	movs	r3, r6
 8005eec:	2400      	movs	r4, #0
 8005eee:	331c      	adds	r3, #28
 8005ef0:	001f      	movs	r7, r3
 8005ef2:	9303      	str	r3, [sp, #12]
 8005ef4:	9402      	str	r4, [sp, #8]
 8005ef6:	9408      	str	r4, [sp, #32]
 8005ef8:	9407      	str	r4, [sp, #28]
 8005efa:	9400      	str	r4, [sp, #0]
 8005efc:	9404      	str	r4, [sp, #16]
 8005efe:	68b2      	ldr	r2, [r6, #8]
 8005f00:	2a00      	cmp	r2, #0
 8005f02:	d00a      	beq.n	8005f1a <_scanf_float+0x62>
 8005f04:	682b      	ldr	r3, [r5, #0]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	2b4e      	cmp	r3, #78	; 0x4e
 8005f0a:	d844      	bhi.n	8005f96 <_scanf_float+0xde>
 8005f0c:	0018      	movs	r0, r3
 8005f0e:	2b40      	cmp	r3, #64	; 0x40
 8005f10:	d82c      	bhi.n	8005f6c <_scanf_float+0xb4>
 8005f12:	382b      	subs	r0, #43	; 0x2b
 8005f14:	b2c1      	uxtb	r1, r0
 8005f16:	290e      	cmp	r1, #14
 8005f18:	d92a      	bls.n	8005f70 <_scanf_float+0xb8>
 8005f1a:	9b00      	ldr	r3, [sp, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d003      	beq.n	8005f28 <_scanf_float+0x70>
 8005f20:	6832      	ldr	r2, [r6, #0]
 8005f22:	4ba4      	ldr	r3, [pc, #656]	; (80061b4 <_scanf_float+0x2fc>)
 8005f24:	4013      	ands	r3, r2
 8005f26:	6033      	str	r3, [r6, #0]
 8005f28:	9b02      	ldr	r3, [sp, #8]
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d900      	bls.n	8005f32 <_scanf_float+0x7a>
 8005f30:	e0f9      	b.n	8006126 <_scanf_float+0x26e>
 8005f32:	24be      	movs	r4, #190	; 0xbe
 8005f34:	0064      	lsls	r4, r4, #1
 8005f36:	9b03      	ldr	r3, [sp, #12]
 8005f38:	429f      	cmp	r7, r3
 8005f3a:	d900      	bls.n	8005f3e <_scanf_float+0x86>
 8005f3c:	e0e9      	b.n	8006112 <_scanf_float+0x25a>
 8005f3e:	2301      	movs	r3, #1
 8005f40:	9302      	str	r3, [sp, #8]
 8005f42:	e185      	b.n	8006250 <_scanf_float+0x398>
 8005f44:	0018      	movs	r0, r3
 8005f46:	3861      	subs	r0, #97	; 0x61
 8005f48:	280d      	cmp	r0, #13
 8005f4a:	d8e6      	bhi.n	8005f1a <_scanf_float+0x62>
 8005f4c:	f7fa f8ee 	bl	800012c <__gnu_thumb1_case_shi>
 8005f50:	ffe50083 	.word	0xffe50083
 8005f54:	ffe5ffe5 	.word	0xffe5ffe5
 8005f58:	00a200b6 	.word	0x00a200b6
 8005f5c:	ffe5ffe5 	.word	0xffe5ffe5
 8005f60:	ffe50089 	.word	0xffe50089
 8005f64:	ffe5ffe5 	.word	0xffe5ffe5
 8005f68:	0065ffe5 	.word	0x0065ffe5
 8005f6c:	3841      	subs	r0, #65	; 0x41
 8005f6e:	e7eb      	b.n	8005f48 <_scanf_float+0x90>
 8005f70:	280e      	cmp	r0, #14
 8005f72:	d8d2      	bhi.n	8005f1a <_scanf_float+0x62>
 8005f74:	f7fa f8da 	bl	800012c <__gnu_thumb1_case_shi>
 8005f78:	ffd1004b 	.word	0xffd1004b
 8005f7c:	0098004b 	.word	0x0098004b
 8005f80:	0020ffd1 	.word	0x0020ffd1
 8005f84:	00400040 	.word	0x00400040
 8005f88:	00400040 	.word	0x00400040
 8005f8c:	00400040 	.word	0x00400040
 8005f90:	00400040 	.word	0x00400040
 8005f94:	0040      	.short	0x0040
 8005f96:	2b6e      	cmp	r3, #110	; 0x6e
 8005f98:	d809      	bhi.n	8005fae <_scanf_float+0xf6>
 8005f9a:	2b60      	cmp	r3, #96	; 0x60
 8005f9c:	d8d2      	bhi.n	8005f44 <_scanf_float+0x8c>
 8005f9e:	2b54      	cmp	r3, #84	; 0x54
 8005fa0:	d07d      	beq.n	800609e <_scanf_float+0x1e6>
 8005fa2:	2b59      	cmp	r3, #89	; 0x59
 8005fa4:	d1b9      	bne.n	8005f1a <_scanf_float+0x62>
 8005fa6:	2c07      	cmp	r4, #7
 8005fa8:	d1b7      	bne.n	8005f1a <_scanf_float+0x62>
 8005faa:	2408      	movs	r4, #8
 8005fac:	e02c      	b.n	8006008 <_scanf_float+0x150>
 8005fae:	2b74      	cmp	r3, #116	; 0x74
 8005fb0:	d075      	beq.n	800609e <_scanf_float+0x1e6>
 8005fb2:	2b79      	cmp	r3, #121	; 0x79
 8005fb4:	d0f7      	beq.n	8005fa6 <_scanf_float+0xee>
 8005fb6:	e7b0      	b.n	8005f1a <_scanf_float+0x62>
 8005fb8:	6831      	ldr	r1, [r6, #0]
 8005fba:	05c8      	lsls	r0, r1, #23
 8005fbc:	d51c      	bpl.n	8005ff8 <_scanf_float+0x140>
 8005fbe:	2380      	movs	r3, #128	; 0x80
 8005fc0:	4399      	bics	r1, r3
 8005fc2:	9b00      	ldr	r3, [sp, #0]
 8005fc4:	6031      	str	r1, [r6, #0]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	9b05      	ldr	r3, [sp, #20]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d003      	beq.n	8005fd8 <_scanf_float+0x120>
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	3201      	adds	r2, #1
 8005fd4:	9305      	str	r3, [sp, #20]
 8005fd6:	60b2      	str	r2, [r6, #8]
 8005fd8:	68b3      	ldr	r3, [r6, #8]
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	60b3      	str	r3, [r6, #8]
 8005fde:	6933      	ldr	r3, [r6, #16]
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	6133      	str	r3, [r6, #16]
 8005fe4:	686b      	ldr	r3, [r5, #4]
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	606b      	str	r3, [r5, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	dc00      	bgt.n	8005ff0 <_scanf_float+0x138>
 8005fee:	e086      	b.n	80060fe <_scanf_float+0x246>
 8005ff0:	682b      	ldr	r3, [r5, #0]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	602b      	str	r3, [r5, #0]
 8005ff6:	e782      	b.n	8005efe <_scanf_float+0x46>
 8005ff8:	9a02      	ldr	r2, [sp, #8]
 8005ffa:	1912      	adds	r2, r2, r4
 8005ffc:	2a00      	cmp	r2, #0
 8005ffe:	d18c      	bne.n	8005f1a <_scanf_float+0x62>
 8006000:	4a6d      	ldr	r2, [pc, #436]	; (80061b8 <_scanf_float+0x300>)
 8006002:	6831      	ldr	r1, [r6, #0]
 8006004:	400a      	ands	r2, r1
 8006006:	6032      	str	r2, [r6, #0]
 8006008:	703b      	strb	r3, [r7, #0]
 800600a:	3701      	adds	r7, #1
 800600c:	e7e4      	b.n	8005fd8 <_scanf_float+0x120>
 800600e:	2180      	movs	r1, #128	; 0x80
 8006010:	6832      	ldr	r2, [r6, #0]
 8006012:	420a      	tst	r2, r1
 8006014:	d081      	beq.n	8005f1a <_scanf_float+0x62>
 8006016:	438a      	bics	r2, r1
 8006018:	e7f5      	b.n	8006006 <_scanf_float+0x14e>
 800601a:	9a02      	ldr	r2, [sp, #8]
 800601c:	2a00      	cmp	r2, #0
 800601e:	d10f      	bne.n	8006040 <_scanf_float+0x188>
 8006020:	9a00      	ldr	r2, [sp, #0]
 8006022:	2a00      	cmp	r2, #0
 8006024:	d10f      	bne.n	8006046 <_scanf_float+0x18e>
 8006026:	6832      	ldr	r2, [r6, #0]
 8006028:	21e0      	movs	r1, #224	; 0xe0
 800602a:	0010      	movs	r0, r2
 800602c:	00c9      	lsls	r1, r1, #3
 800602e:	4008      	ands	r0, r1
 8006030:	4288      	cmp	r0, r1
 8006032:	d108      	bne.n	8006046 <_scanf_float+0x18e>
 8006034:	4961      	ldr	r1, [pc, #388]	; (80061bc <_scanf_float+0x304>)
 8006036:	400a      	ands	r2, r1
 8006038:	6032      	str	r2, [r6, #0]
 800603a:	2201      	movs	r2, #1
 800603c:	9202      	str	r2, [sp, #8]
 800603e:	e7e3      	b.n	8006008 <_scanf_float+0x150>
 8006040:	9a02      	ldr	r2, [sp, #8]
 8006042:	2a02      	cmp	r2, #2
 8006044:	d059      	beq.n	80060fa <_scanf_float+0x242>
 8006046:	2c01      	cmp	r4, #1
 8006048:	d002      	beq.n	8006050 <_scanf_float+0x198>
 800604a:	2c04      	cmp	r4, #4
 800604c:	d000      	beq.n	8006050 <_scanf_float+0x198>
 800604e:	e764      	b.n	8005f1a <_scanf_float+0x62>
 8006050:	3401      	adds	r4, #1
 8006052:	b2e4      	uxtb	r4, r4
 8006054:	e7d8      	b.n	8006008 <_scanf_float+0x150>
 8006056:	9a02      	ldr	r2, [sp, #8]
 8006058:	2a01      	cmp	r2, #1
 800605a:	d000      	beq.n	800605e <_scanf_float+0x1a6>
 800605c:	e75d      	b.n	8005f1a <_scanf_float+0x62>
 800605e:	2202      	movs	r2, #2
 8006060:	e7ec      	b.n	800603c <_scanf_float+0x184>
 8006062:	2c00      	cmp	r4, #0
 8006064:	d110      	bne.n	8006088 <_scanf_float+0x1d0>
 8006066:	9a00      	ldr	r2, [sp, #0]
 8006068:	2a00      	cmp	r2, #0
 800606a:	d000      	beq.n	800606e <_scanf_float+0x1b6>
 800606c:	e758      	b.n	8005f20 <_scanf_float+0x68>
 800606e:	6832      	ldr	r2, [r6, #0]
 8006070:	21e0      	movs	r1, #224	; 0xe0
 8006072:	0010      	movs	r0, r2
 8006074:	00c9      	lsls	r1, r1, #3
 8006076:	4008      	ands	r0, r1
 8006078:	4288      	cmp	r0, r1
 800607a:	d000      	beq.n	800607e <_scanf_float+0x1c6>
 800607c:	e754      	b.n	8005f28 <_scanf_float+0x70>
 800607e:	494f      	ldr	r1, [pc, #316]	; (80061bc <_scanf_float+0x304>)
 8006080:	3401      	adds	r4, #1
 8006082:	400a      	ands	r2, r1
 8006084:	6032      	str	r2, [r6, #0]
 8006086:	e7bf      	b.n	8006008 <_scanf_float+0x150>
 8006088:	21fd      	movs	r1, #253	; 0xfd
 800608a:	1ee2      	subs	r2, r4, #3
 800608c:	420a      	tst	r2, r1
 800608e:	d000      	beq.n	8006092 <_scanf_float+0x1da>
 8006090:	e743      	b.n	8005f1a <_scanf_float+0x62>
 8006092:	e7dd      	b.n	8006050 <_scanf_float+0x198>
 8006094:	2c02      	cmp	r4, #2
 8006096:	d000      	beq.n	800609a <_scanf_float+0x1e2>
 8006098:	e73f      	b.n	8005f1a <_scanf_float+0x62>
 800609a:	2403      	movs	r4, #3
 800609c:	e7b4      	b.n	8006008 <_scanf_float+0x150>
 800609e:	2c06      	cmp	r4, #6
 80060a0:	d000      	beq.n	80060a4 <_scanf_float+0x1ec>
 80060a2:	e73a      	b.n	8005f1a <_scanf_float+0x62>
 80060a4:	2407      	movs	r4, #7
 80060a6:	e7af      	b.n	8006008 <_scanf_float+0x150>
 80060a8:	6832      	ldr	r2, [r6, #0]
 80060aa:	0591      	lsls	r1, r2, #22
 80060ac:	d400      	bmi.n	80060b0 <_scanf_float+0x1f8>
 80060ae:	e734      	b.n	8005f1a <_scanf_float+0x62>
 80060b0:	4943      	ldr	r1, [pc, #268]	; (80061c0 <_scanf_float+0x308>)
 80060b2:	400a      	ands	r2, r1
 80060b4:	6032      	str	r2, [r6, #0]
 80060b6:	9a00      	ldr	r2, [sp, #0]
 80060b8:	9204      	str	r2, [sp, #16]
 80060ba:	e7a5      	b.n	8006008 <_scanf_float+0x150>
 80060bc:	21a0      	movs	r1, #160	; 0xa0
 80060be:	2080      	movs	r0, #128	; 0x80
 80060c0:	6832      	ldr	r2, [r6, #0]
 80060c2:	00c9      	lsls	r1, r1, #3
 80060c4:	4011      	ands	r1, r2
 80060c6:	00c0      	lsls	r0, r0, #3
 80060c8:	4281      	cmp	r1, r0
 80060ca:	d006      	beq.n	80060da <_scanf_float+0x222>
 80060cc:	4202      	tst	r2, r0
 80060ce:	d100      	bne.n	80060d2 <_scanf_float+0x21a>
 80060d0:	e723      	b.n	8005f1a <_scanf_float+0x62>
 80060d2:	9900      	ldr	r1, [sp, #0]
 80060d4:	2900      	cmp	r1, #0
 80060d6:	d100      	bne.n	80060da <_scanf_float+0x222>
 80060d8:	e726      	b.n	8005f28 <_scanf_float+0x70>
 80060da:	0591      	lsls	r1, r2, #22
 80060dc:	d404      	bmi.n	80060e8 <_scanf_float+0x230>
 80060de:	9900      	ldr	r1, [sp, #0]
 80060e0:	9804      	ldr	r0, [sp, #16]
 80060e2:	9708      	str	r7, [sp, #32]
 80060e4:	1a09      	subs	r1, r1, r0
 80060e6:	9107      	str	r1, [sp, #28]
 80060e8:	4934      	ldr	r1, [pc, #208]	; (80061bc <_scanf_float+0x304>)
 80060ea:	400a      	ands	r2, r1
 80060ec:	21c0      	movs	r1, #192	; 0xc0
 80060ee:	0049      	lsls	r1, r1, #1
 80060f0:	430a      	orrs	r2, r1
 80060f2:	6032      	str	r2, [r6, #0]
 80060f4:	2200      	movs	r2, #0
 80060f6:	9200      	str	r2, [sp, #0]
 80060f8:	e786      	b.n	8006008 <_scanf_float+0x150>
 80060fa:	2203      	movs	r2, #3
 80060fc:	e79e      	b.n	800603c <_scanf_float+0x184>
 80060fe:	23c0      	movs	r3, #192	; 0xc0
 8006100:	005b      	lsls	r3, r3, #1
 8006102:	0029      	movs	r1, r5
 8006104:	58f3      	ldr	r3, [r6, r3]
 8006106:	9801      	ldr	r0, [sp, #4]
 8006108:	4798      	blx	r3
 800610a:	2800      	cmp	r0, #0
 800610c:	d100      	bne.n	8006110 <_scanf_float+0x258>
 800610e:	e6f6      	b.n	8005efe <_scanf_float+0x46>
 8006110:	e703      	b.n	8005f1a <_scanf_float+0x62>
 8006112:	3f01      	subs	r7, #1
 8006114:	5933      	ldr	r3, [r6, r4]
 8006116:	002a      	movs	r2, r5
 8006118:	7839      	ldrb	r1, [r7, #0]
 800611a:	9801      	ldr	r0, [sp, #4]
 800611c:	4798      	blx	r3
 800611e:	6933      	ldr	r3, [r6, #16]
 8006120:	3b01      	subs	r3, #1
 8006122:	6133      	str	r3, [r6, #16]
 8006124:	e707      	b.n	8005f36 <_scanf_float+0x7e>
 8006126:	1e63      	subs	r3, r4, #1
 8006128:	2b06      	cmp	r3, #6
 800612a:	d80e      	bhi.n	800614a <_scanf_float+0x292>
 800612c:	9702      	str	r7, [sp, #8]
 800612e:	2c02      	cmp	r4, #2
 8006130:	d920      	bls.n	8006174 <_scanf_float+0x2bc>
 8006132:	1be3      	subs	r3, r4, r7
 8006134:	b2db      	uxtb	r3, r3
 8006136:	9305      	str	r3, [sp, #20]
 8006138:	9b02      	ldr	r3, [sp, #8]
 800613a:	9a05      	ldr	r2, [sp, #20]
 800613c:	189b      	adds	r3, r3, r2
 800613e:	b2db      	uxtb	r3, r3
 8006140:	2b03      	cmp	r3, #3
 8006142:	d827      	bhi.n	8006194 <_scanf_float+0x2dc>
 8006144:	3c03      	subs	r4, #3
 8006146:	b2e4      	uxtb	r4, r4
 8006148:	1b3f      	subs	r7, r7, r4
 800614a:	6833      	ldr	r3, [r6, #0]
 800614c:	05da      	lsls	r2, r3, #23
 800614e:	d554      	bpl.n	80061fa <_scanf_float+0x342>
 8006150:	055b      	lsls	r3, r3, #21
 8006152:	d537      	bpl.n	80061c4 <_scanf_float+0x30c>
 8006154:	24be      	movs	r4, #190	; 0xbe
 8006156:	0064      	lsls	r4, r4, #1
 8006158:	9b03      	ldr	r3, [sp, #12]
 800615a:	429f      	cmp	r7, r3
 800615c:	d800      	bhi.n	8006160 <_scanf_float+0x2a8>
 800615e:	e6ee      	b.n	8005f3e <_scanf_float+0x86>
 8006160:	3f01      	subs	r7, #1
 8006162:	5933      	ldr	r3, [r6, r4]
 8006164:	002a      	movs	r2, r5
 8006166:	7839      	ldrb	r1, [r7, #0]
 8006168:	9801      	ldr	r0, [sp, #4]
 800616a:	4798      	blx	r3
 800616c:	6933      	ldr	r3, [r6, #16]
 800616e:	3b01      	subs	r3, #1
 8006170:	6133      	str	r3, [r6, #16]
 8006172:	e7f1      	b.n	8006158 <_scanf_float+0x2a0>
 8006174:	24be      	movs	r4, #190	; 0xbe
 8006176:	0064      	lsls	r4, r4, #1
 8006178:	9b03      	ldr	r3, [sp, #12]
 800617a:	429f      	cmp	r7, r3
 800617c:	d800      	bhi.n	8006180 <_scanf_float+0x2c8>
 800617e:	e6de      	b.n	8005f3e <_scanf_float+0x86>
 8006180:	3f01      	subs	r7, #1
 8006182:	5933      	ldr	r3, [r6, r4]
 8006184:	002a      	movs	r2, r5
 8006186:	7839      	ldrb	r1, [r7, #0]
 8006188:	9801      	ldr	r0, [sp, #4]
 800618a:	4798      	blx	r3
 800618c:	6933      	ldr	r3, [r6, #16]
 800618e:	3b01      	subs	r3, #1
 8006190:	6133      	str	r3, [r6, #16]
 8006192:	e7f1      	b.n	8006178 <_scanf_float+0x2c0>
 8006194:	9b02      	ldr	r3, [sp, #8]
 8006196:	002a      	movs	r2, r5
 8006198:	3b01      	subs	r3, #1
 800619a:	7819      	ldrb	r1, [r3, #0]
 800619c:	9302      	str	r3, [sp, #8]
 800619e:	23be      	movs	r3, #190	; 0xbe
 80061a0:	005b      	lsls	r3, r3, #1
 80061a2:	58f3      	ldr	r3, [r6, r3]
 80061a4:	9801      	ldr	r0, [sp, #4]
 80061a6:	9309      	str	r3, [sp, #36]	; 0x24
 80061a8:	4798      	blx	r3
 80061aa:	6933      	ldr	r3, [r6, #16]
 80061ac:	3b01      	subs	r3, #1
 80061ae:	6133      	str	r3, [r6, #16]
 80061b0:	e7c2      	b.n	8006138 <_scanf_float+0x280>
 80061b2:	46c0      	nop			; (mov r8, r8)
 80061b4:	fffffeff 	.word	0xfffffeff
 80061b8:	fffffe7f 	.word	0xfffffe7f
 80061bc:	fffff87f 	.word	0xfffff87f
 80061c0:	fffffd7f 	.word	0xfffffd7f
 80061c4:	6933      	ldr	r3, [r6, #16]
 80061c6:	1e7c      	subs	r4, r7, #1
 80061c8:	7821      	ldrb	r1, [r4, #0]
 80061ca:	3b01      	subs	r3, #1
 80061cc:	6133      	str	r3, [r6, #16]
 80061ce:	2965      	cmp	r1, #101	; 0x65
 80061d0:	d00c      	beq.n	80061ec <_scanf_float+0x334>
 80061d2:	2945      	cmp	r1, #69	; 0x45
 80061d4:	d00a      	beq.n	80061ec <_scanf_float+0x334>
 80061d6:	23be      	movs	r3, #190	; 0xbe
 80061d8:	005b      	lsls	r3, r3, #1
 80061da:	58f3      	ldr	r3, [r6, r3]
 80061dc:	002a      	movs	r2, r5
 80061de:	9801      	ldr	r0, [sp, #4]
 80061e0:	4798      	blx	r3
 80061e2:	6933      	ldr	r3, [r6, #16]
 80061e4:	1ebc      	subs	r4, r7, #2
 80061e6:	3b01      	subs	r3, #1
 80061e8:	7821      	ldrb	r1, [r4, #0]
 80061ea:	6133      	str	r3, [r6, #16]
 80061ec:	23be      	movs	r3, #190	; 0xbe
 80061ee:	005b      	lsls	r3, r3, #1
 80061f0:	002a      	movs	r2, r5
 80061f2:	58f3      	ldr	r3, [r6, r3]
 80061f4:	9801      	ldr	r0, [sp, #4]
 80061f6:	4798      	blx	r3
 80061f8:	0027      	movs	r7, r4
 80061fa:	6832      	ldr	r2, [r6, #0]
 80061fc:	2310      	movs	r3, #16
 80061fe:	0011      	movs	r1, r2
 8006200:	4019      	ands	r1, r3
 8006202:	9102      	str	r1, [sp, #8]
 8006204:	421a      	tst	r2, r3
 8006206:	d158      	bne.n	80062ba <_scanf_float+0x402>
 8006208:	23c0      	movs	r3, #192	; 0xc0
 800620a:	7039      	strb	r1, [r7, #0]
 800620c:	6832      	ldr	r2, [r6, #0]
 800620e:	00db      	lsls	r3, r3, #3
 8006210:	4013      	ands	r3, r2
 8006212:	2280      	movs	r2, #128	; 0x80
 8006214:	00d2      	lsls	r2, r2, #3
 8006216:	4293      	cmp	r3, r2
 8006218:	d11d      	bne.n	8006256 <_scanf_float+0x39e>
 800621a:	9b04      	ldr	r3, [sp, #16]
 800621c:	9a00      	ldr	r2, [sp, #0]
 800621e:	9900      	ldr	r1, [sp, #0]
 8006220:	1a9a      	subs	r2, r3, r2
 8006222:	428b      	cmp	r3, r1
 8006224:	d124      	bne.n	8006270 <_scanf_float+0x3b8>
 8006226:	2200      	movs	r2, #0
 8006228:	9903      	ldr	r1, [sp, #12]
 800622a:	9801      	ldr	r0, [sp, #4]
 800622c:	f000 fe9c 	bl	8006f68 <_strtod_r>
 8006230:	9b06      	ldr	r3, [sp, #24]
 8006232:	000d      	movs	r5, r1
 8006234:	6831      	ldr	r1, [r6, #0]
 8006236:	0004      	movs	r4, r0
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	078a      	lsls	r2, r1, #30
 800623c:	d525      	bpl.n	800628a <_scanf_float+0x3d2>
 800623e:	1d1a      	adds	r2, r3, #4
 8006240:	9906      	ldr	r1, [sp, #24]
 8006242:	600a      	str	r2, [r1, #0]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	601c      	str	r4, [r3, #0]
 8006248:	605d      	str	r5, [r3, #4]
 800624a:	68f3      	ldr	r3, [r6, #12]
 800624c:	3301      	adds	r3, #1
 800624e:	60f3      	str	r3, [r6, #12]
 8006250:	9802      	ldr	r0, [sp, #8]
 8006252:	b00b      	add	sp, #44	; 0x2c
 8006254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006256:	9b07      	ldr	r3, [sp, #28]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d0e4      	beq.n	8006226 <_scanf_float+0x36e>
 800625c:	9b08      	ldr	r3, [sp, #32]
 800625e:	9a02      	ldr	r2, [sp, #8]
 8006260:	1c59      	adds	r1, r3, #1
 8006262:	9801      	ldr	r0, [sp, #4]
 8006264:	230a      	movs	r3, #10
 8006266:	f000 ff15 	bl	8007094 <_strtol_r>
 800626a:	9b07      	ldr	r3, [sp, #28]
 800626c:	9f08      	ldr	r7, [sp, #32]
 800626e:	1ac2      	subs	r2, r0, r3
 8006270:	0033      	movs	r3, r6
 8006272:	3370      	adds	r3, #112	; 0x70
 8006274:	33ff      	adds	r3, #255	; 0xff
 8006276:	429f      	cmp	r7, r3
 8006278:	d302      	bcc.n	8006280 <_scanf_float+0x3c8>
 800627a:	0037      	movs	r7, r6
 800627c:	376f      	adds	r7, #111	; 0x6f
 800627e:	37ff      	adds	r7, #255	; 0xff
 8006280:	0038      	movs	r0, r7
 8006282:	490f      	ldr	r1, [pc, #60]	; (80062c0 <_scanf_float+0x408>)
 8006284:	f000 f824 	bl	80062d0 <siprintf>
 8006288:	e7cd      	b.n	8006226 <_scanf_float+0x36e>
 800628a:	1d1a      	adds	r2, r3, #4
 800628c:	0749      	lsls	r1, r1, #29
 800628e:	d4d7      	bmi.n	8006240 <_scanf_float+0x388>
 8006290:	9906      	ldr	r1, [sp, #24]
 8006292:	0020      	movs	r0, r4
 8006294:	600a      	str	r2, [r1, #0]
 8006296:	681f      	ldr	r7, [r3, #0]
 8006298:	0022      	movs	r2, r4
 800629a:	002b      	movs	r3, r5
 800629c:	0029      	movs	r1, r5
 800629e:	f7fb feaf 	bl	8002000 <__aeabi_dcmpun>
 80062a2:	2800      	cmp	r0, #0
 80062a4:	d004      	beq.n	80062b0 <_scanf_float+0x3f8>
 80062a6:	4807      	ldr	r0, [pc, #28]	; (80062c4 <_scanf_float+0x40c>)
 80062a8:	f000 f80e 	bl	80062c8 <nanf>
 80062ac:	6038      	str	r0, [r7, #0]
 80062ae:	e7cc      	b.n	800624a <_scanf_float+0x392>
 80062b0:	0020      	movs	r0, r4
 80062b2:	0029      	movs	r1, r5
 80062b4:	f7fb ff4e 	bl	8002154 <__aeabi_d2f>
 80062b8:	e7f8      	b.n	80062ac <_scanf_float+0x3f4>
 80062ba:	2300      	movs	r3, #0
 80062bc:	e640      	b.n	8005f40 <_scanf_float+0x88>
 80062be:	46c0      	nop			; (mov r8, r8)
 80062c0:	0800a138 	.word	0x0800a138
 80062c4:	0800a540 	.word	0x0800a540

080062c8 <nanf>:
 80062c8:	4800      	ldr	r0, [pc, #0]	; (80062cc <nanf+0x4>)
 80062ca:	4770      	bx	lr
 80062cc:	7fc00000 	.word	0x7fc00000

080062d0 <siprintf>:
 80062d0:	b40e      	push	{r1, r2, r3}
 80062d2:	b500      	push	{lr}
 80062d4:	490b      	ldr	r1, [pc, #44]	; (8006304 <siprintf+0x34>)
 80062d6:	b09c      	sub	sp, #112	; 0x70
 80062d8:	ab1d      	add	r3, sp, #116	; 0x74
 80062da:	9002      	str	r0, [sp, #8]
 80062dc:	9006      	str	r0, [sp, #24]
 80062de:	9107      	str	r1, [sp, #28]
 80062e0:	9104      	str	r1, [sp, #16]
 80062e2:	4809      	ldr	r0, [pc, #36]	; (8006308 <siprintf+0x38>)
 80062e4:	4909      	ldr	r1, [pc, #36]	; (800630c <siprintf+0x3c>)
 80062e6:	cb04      	ldmia	r3!, {r2}
 80062e8:	9105      	str	r1, [sp, #20]
 80062ea:	6800      	ldr	r0, [r0, #0]
 80062ec:	a902      	add	r1, sp, #8
 80062ee:	9301      	str	r3, [sp, #4]
 80062f0:	f002 ff5c 	bl	80091ac <_svfiprintf_r>
 80062f4:	2300      	movs	r3, #0
 80062f6:	9a02      	ldr	r2, [sp, #8]
 80062f8:	7013      	strb	r3, [r2, #0]
 80062fa:	b01c      	add	sp, #112	; 0x70
 80062fc:	bc08      	pop	{r3}
 80062fe:	b003      	add	sp, #12
 8006300:	4718      	bx	r3
 8006302:	46c0      	nop			; (mov r8, r8)
 8006304:	7fffffff 	.word	0x7fffffff
 8006308:	2000000c 	.word	0x2000000c
 800630c:	ffff0208 	.word	0xffff0208

08006310 <sulp>:
 8006310:	b570      	push	{r4, r5, r6, lr}
 8006312:	0016      	movs	r6, r2
 8006314:	000d      	movs	r5, r1
 8006316:	f002 fc93 	bl	8008c40 <__ulp>
 800631a:	2e00      	cmp	r6, #0
 800631c:	d00d      	beq.n	800633a <sulp+0x2a>
 800631e:	236b      	movs	r3, #107	; 0x6b
 8006320:	006a      	lsls	r2, r5, #1
 8006322:	0d52      	lsrs	r2, r2, #21
 8006324:	1a9b      	subs	r3, r3, r2
 8006326:	2b00      	cmp	r3, #0
 8006328:	dd07      	ble.n	800633a <sulp+0x2a>
 800632a:	2400      	movs	r4, #0
 800632c:	4a03      	ldr	r2, [pc, #12]	; (800633c <sulp+0x2c>)
 800632e:	051b      	lsls	r3, r3, #20
 8006330:	189d      	adds	r5, r3, r2
 8006332:	002b      	movs	r3, r5
 8006334:	0022      	movs	r2, r4
 8006336:	f7fb f865 	bl	8001404 <__aeabi_dmul>
 800633a:	bd70      	pop	{r4, r5, r6, pc}
 800633c:	3ff00000 	.word	0x3ff00000

08006340 <_strtod_l>:
 8006340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006342:	001d      	movs	r5, r3
 8006344:	2300      	movs	r3, #0
 8006346:	b0a5      	sub	sp, #148	; 0x94
 8006348:	9320      	str	r3, [sp, #128]	; 0x80
 800634a:	4bac      	ldr	r3, [pc, #688]	; (80065fc <_strtod_l+0x2bc>)
 800634c:	9005      	str	r0, [sp, #20]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	9108      	str	r1, [sp, #32]
 8006352:	0018      	movs	r0, r3
 8006354:	9307      	str	r3, [sp, #28]
 8006356:	921b      	str	r2, [sp, #108]	; 0x6c
 8006358:	f7f9 fed6 	bl	8000108 <strlen>
 800635c:	2600      	movs	r6, #0
 800635e:	0004      	movs	r4, r0
 8006360:	2700      	movs	r7, #0
 8006362:	9b08      	ldr	r3, [sp, #32]
 8006364:	931f      	str	r3, [sp, #124]	; 0x7c
 8006366:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006368:	7813      	ldrb	r3, [r2, #0]
 800636a:	2b2b      	cmp	r3, #43	; 0x2b
 800636c:	d058      	beq.n	8006420 <_strtod_l+0xe0>
 800636e:	d844      	bhi.n	80063fa <_strtod_l+0xba>
 8006370:	2b0d      	cmp	r3, #13
 8006372:	d83d      	bhi.n	80063f0 <_strtod_l+0xb0>
 8006374:	2b08      	cmp	r3, #8
 8006376:	d83d      	bhi.n	80063f4 <_strtod_l+0xb4>
 8006378:	2b00      	cmp	r3, #0
 800637a:	d047      	beq.n	800640c <_strtod_l+0xcc>
 800637c:	2300      	movs	r3, #0
 800637e:	930e      	str	r3, [sp, #56]	; 0x38
 8006380:	2200      	movs	r2, #0
 8006382:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006384:	920a      	str	r2, [sp, #40]	; 0x28
 8006386:	9306      	str	r3, [sp, #24]
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	2b30      	cmp	r3, #48	; 0x30
 800638c:	d000      	beq.n	8006390 <_strtod_l+0x50>
 800638e:	e07f      	b.n	8006490 <_strtod_l+0x150>
 8006390:	9b06      	ldr	r3, [sp, #24]
 8006392:	3220      	adds	r2, #32
 8006394:	785b      	ldrb	r3, [r3, #1]
 8006396:	4393      	bics	r3, r2
 8006398:	2b58      	cmp	r3, #88	; 0x58
 800639a:	d000      	beq.n	800639e <_strtod_l+0x5e>
 800639c:	e06e      	b.n	800647c <_strtod_l+0x13c>
 800639e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063a0:	9502      	str	r5, [sp, #8]
 80063a2:	9301      	str	r3, [sp, #4]
 80063a4:	ab20      	add	r3, sp, #128	; 0x80
 80063a6:	9300      	str	r3, [sp, #0]
 80063a8:	4a95      	ldr	r2, [pc, #596]	; (8006600 <_strtod_l+0x2c0>)
 80063aa:	ab21      	add	r3, sp, #132	; 0x84
 80063ac:	9805      	ldr	r0, [sp, #20]
 80063ae:	a91f      	add	r1, sp, #124	; 0x7c
 80063b0:	f001 fd84 	bl	8007ebc <__gethex>
 80063b4:	2307      	movs	r3, #7
 80063b6:	0005      	movs	r5, r0
 80063b8:	0004      	movs	r4, r0
 80063ba:	401d      	ands	r5, r3
 80063bc:	4218      	tst	r0, r3
 80063be:	d006      	beq.n	80063ce <_strtod_l+0x8e>
 80063c0:	2d06      	cmp	r5, #6
 80063c2:	d12f      	bne.n	8006424 <_strtod_l+0xe4>
 80063c4:	9b06      	ldr	r3, [sp, #24]
 80063c6:	3301      	adds	r3, #1
 80063c8:	931f      	str	r3, [sp, #124]	; 0x7c
 80063ca:	2300      	movs	r3, #0
 80063cc:	930e      	str	r3, [sp, #56]	; 0x38
 80063ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d002      	beq.n	80063da <_strtod_l+0x9a>
 80063d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80063d6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80063d8:	601a      	str	r2, [r3, #0]
 80063da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d01c      	beq.n	800641a <_strtod_l+0xda>
 80063e0:	2380      	movs	r3, #128	; 0x80
 80063e2:	0032      	movs	r2, r6
 80063e4:	061b      	lsls	r3, r3, #24
 80063e6:	18fb      	adds	r3, r7, r3
 80063e8:	0010      	movs	r0, r2
 80063ea:	0019      	movs	r1, r3
 80063ec:	b025      	add	sp, #148	; 0x94
 80063ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063f0:	2b20      	cmp	r3, #32
 80063f2:	d1c3      	bne.n	800637c <_strtod_l+0x3c>
 80063f4:	3201      	adds	r2, #1
 80063f6:	921f      	str	r2, [sp, #124]	; 0x7c
 80063f8:	e7b5      	b.n	8006366 <_strtod_l+0x26>
 80063fa:	2b2d      	cmp	r3, #45	; 0x2d
 80063fc:	d1be      	bne.n	800637c <_strtod_l+0x3c>
 80063fe:	3b2c      	subs	r3, #44	; 0x2c
 8006400:	930e      	str	r3, [sp, #56]	; 0x38
 8006402:	1c53      	adds	r3, r2, #1
 8006404:	931f      	str	r3, [sp, #124]	; 0x7c
 8006406:	7853      	ldrb	r3, [r2, #1]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1b9      	bne.n	8006380 <_strtod_l+0x40>
 800640c:	9b08      	ldr	r3, [sp, #32]
 800640e:	931f      	str	r3, [sp, #124]	; 0x7c
 8006410:	2300      	movs	r3, #0
 8006412:	930e      	str	r3, [sp, #56]	; 0x38
 8006414:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1dc      	bne.n	80063d4 <_strtod_l+0x94>
 800641a:	0032      	movs	r2, r6
 800641c:	003b      	movs	r3, r7
 800641e:	e7e3      	b.n	80063e8 <_strtod_l+0xa8>
 8006420:	2300      	movs	r3, #0
 8006422:	e7ed      	b.n	8006400 <_strtod_l+0xc0>
 8006424:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006426:	2a00      	cmp	r2, #0
 8006428:	d007      	beq.n	800643a <_strtod_l+0xfa>
 800642a:	2135      	movs	r1, #53	; 0x35
 800642c:	a822      	add	r0, sp, #136	; 0x88
 800642e:	f002 fd08 	bl	8008e42 <__copybits>
 8006432:	9920      	ldr	r1, [sp, #128]	; 0x80
 8006434:	9805      	ldr	r0, [sp, #20]
 8006436:	f002 f8c3 	bl	80085c0 <_Bfree>
 800643a:	1e68      	subs	r0, r5, #1
 800643c:	2804      	cmp	r0, #4
 800643e:	d806      	bhi.n	800644e <_strtod_l+0x10e>
 8006440:	f7f9 fe6a 	bl	8000118 <__gnu_thumb1_case_uqi>
 8006444:	1816030b 	.word	0x1816030b
 8006448:	0b          	.byte	0x0b
 8006449:	00          	.byte	0x00
 800644a:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800644c:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 800644e:	0723      	lsls	r3, r4, #28
 8006450:	d5bd      	bpl.n	80063ce <_strtod_l+0x8e>
 8006452:	2380      	movs	r3, #128	; 0x80
 8006454:	061b      	lsls	r3, r3, #24
 8006456:	431f      	orrs	r7, r3
 8006458:	e7b9      	b.n	80063ce <_strtod_l+0x8e>
 800645a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800645c:	4a69      	ldr	r2, [pc, #420]	; (8006604 <_strtod_l+0x2c4>)
 800645e:	496a      	ldr	r1, [pc, #424]	; (8006608 <_strtod_l+0x2c8>)
 8006460:	401a      	ands	r2, r3
 8006462:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006464:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8006466:	185b      	adds	r3, r3, r1
 8006468:	051b      	lsls	r3, r3, #20
 800646a:	431a      	orrs	r2, r3
 800646c:	0017      	movs	r7, r2
 800646e:	e7ee      	b.n	800644e <_strtod_l+0x10e>
 8006470:	4f66      	ldr	r7, [pc, #408]	; (800660c <_strtod_l+0x2cc>)
 8006472:	e7ec      	b.n	800644e <_strtod_l+0x10e>
 8006474:	2601      	movs	r6, #1
 8006476:	4f66      	ldr	r7, [pc, #408]	; (8006610 <_strtod_l+0x2d0>)
 8006478:	4276      	negs	r6, r6
 800647a:	e7e8      	b.n	800644e <_strtod_l+0x10e>
 800647c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800647e:	1c5a      	adds	r2, r3, #1
 8006480:	921f      	str	r2, [sp, #124]	; 0x7c
 8006482:	785b      	ldrb	r3, [r3, #1]
 8006484:	2b30      	cmp	r3, #48	; 0x30
 8006486:	d0f9      	beq.n	800647c <_strtod_l+0x13c>
 8006488:	2b00      	cmp	r3, #0
 800648a:	d0a0      	beq.n	80063ce <_strtod_l+0x8e>
 800648c:	2301      	movs	r3, #1
 800648e:	930a      	str	r3, [sp, #40]	; 0x28
 8006490:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006492:	220a      	movs	r2, #10
 8006494:	9310      	str	r3, [sp, #64]	; 0x40
 8006496:	2300      	movs	r3, #0
 8006498:	930f      	str	r3, [sp, #60]	; 0x3c
 800649a:	930b      	str	r3, [sp, #44]	; 0x2c
 800649c:	9309      	str	r3, [sp, #36]	; 0x24
 800649e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80064a0:	7805      	ldrb	r5, [r0, #0]
 80064a2:	002b      	movs	r3, r5
 80064a4:	3b30      	subs	r3, #48	; 0x30
 80064a6:	b2d9      	uxtb	r1, r3
 80064a8:	2909      	cmp	r1, #9
 80064aa:	d927      	bls.n	80064fc <_strtod_l+0x1bc>
 80064ac:	0022      	movs	r2, r4
 80064ae:	9907      	ldr	r1, [sp, #28]
 80064b0:	f002 ff94 	bl	80093dc <strncmp>
 80064b4:	2800      	cmp	r0, #0
 80064b6:	d033      	beq.n	8006520 <_strtod_l+0x1e0>
 80064b8:	2000      	movs	r0, #0
 80064ba:	002b      	movs	r3, r5
 80064bc:	4684      	mov	ip, r0
 80064be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064c0:	900c      	str	r0, [sp, #48]	; 0x30
 80064c2:	9206      	str	r2, [sp, #24]
 80064c4:	2220      	movs	r2, #32
 80064c6:	0019      	movs	r1, r3
 80064c8:	4391      	bics	r1, r2
 80064ca:	000a      	movs	r2, r1
 80064cc:	2100      	movs	r1, #0
 80064ce:	9107      	str	r1, [sp, #28]
 80064d0:	2a45      	cmp	r2, #69	; 0x45
 80064d2:	d000      	beq.n	80064d6 <_strtod_l+0x196>
 80064d4:	e0c5      	b.n	8006662 <_strtod_l+0x322>
 80064d6:	9b06      	ldr	r3, [sp, #24]
 80064d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064da:	4303      	orrs	r3, r0
 80064dc:	4313      	orrs	r3, r2
 80064de:	428b      	cmp	r3, r1
 80064e0:	d094      	beq.n	800640c <_strtod_l+0xcc>
 80064e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80064e4:	9308      	str	r3, [sp, #32]
 80064e6:	3301      	adds	r3, #1
 80064e8:	931f      	str	r3, [sp, #124]	; 0x7c
 80064ea:	9b08      	ldr	r3, [sp, #32]
 80064ec:	785b      	ldrb	r3, [r3, #1]
 80064ee:	2b2b      	cmp	r3, #43	; 0x2b
 80064f0:	d076      	beq.n	80065e0 <_strtod_l+0x2a0>
 80064f2:	000c      	movs	r4, r1
 80064f4:	2b2d      	cmp	r3, #45	; 0x2d
 80064f6:	d179      	bne.n	80065ec <_strtod_l+0x2ac>
 80064f8:	2401      	movs	r4, #1
 80064fa:	e072      	b.n	80065e2 <_strtod_l+0x2a2>
 80064fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80064fe:	2908      	cmp	r1, #8
 8006500:	dc09      	bgt.n	8006516 <_strtod_l+0x1d6>
 8006502:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006504:	4351      	muls	r1, r2
 8006506:	185b      	adds	r3, r3, r1
 8006508:	930b      	str	r3, [sp, #44]	; 0x2c
 800650a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800650c:	3001      	adds	r0, #1
 800650e:	3301      	adds	r3, #1
 8006510:	9309      	str	r3, [sp, #36]	; 0x24
 8006512:	901f      	str	r0, [sp, #124]	; 0x7c
 8006514:	e7c3      	b.n	800649e <_strtod_l+0x15e>
 8006516:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006518:	4351      	muls	r1, r2
 800651a:	185b      	adds	r3, r3, r1
 800651c:	930f      	str	r3, [sp, #60]	; 0x3c
 800651e:	e7f4      	b.n	800650a <_strtod_l+0x1ca>
 8006520:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006522:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006524:	191c      	adds	r4, r3, r4
 8006526:	941f      	str	r4, [sp, #124]	; 0x7c
 8006528:	7823      	ldrb	r3, [r4, #0]
 800652a:	2a00      	cmp	r2, #0
 800652c:	d039      	beq.n	80065a2 <_strtod_l+0x262>
 800652e:	900c      	str	r0, [sp, #48]	; 0x30
 8006530:	9206      	str	r2, [sp, #24]
 8006532:	001a      	movs	r2, r3
 8006534:	3a30      	subs	r2, #48	; 0x30
 8006536:	2a09      	cmp	r2, #9
 8006538:	d912      	bls.n	8006560 <_strtod_l+0x220>
 800653a:	2201      	movs	r2, #1
 800653c:	4694      	mov	ip, r2
 800653e:	e7c1      	b.n	80064c4 <_strtod_l+0x184>
 8006540:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006542:	3001      	adds	r0, #1
 8006544:	1c5a      	adds	r2, r3, #1
 8006546:	921f      	str	r2, [sp, #124]	; 0x7c
 8006548:	785b      	ldrb	r3, [r3, #1]
 800654a:	2b30      	cmp	r3, #48	; 0x30
 800654c:	d0f8      	beq.n	8006540 <_strtod_l+0x200>
 800654e:	001a      	movs	r2, r3
 8006550:	3a31      	subs	r2, #49	; 0x31
 8006552:	2a08      	cmp	r2, #8
 8006554:	d83f      	bhi.n	80065d6 <_strtod_l+0x296>
 8006556:	900c      	str	r0, [sp, #48]	; 0x30
 8006558:	2000      	movs	r0, #0
 800655a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800655c:	9006      	str	r0, [sp, #24]
 800655e:	9210      	str	r2, [sp, #64]	; 0x40
 8006560:	001a      	movs	r2, r3
 8006562:	1c41      	adds	r1, r0, #1
 8006564:	3a30      	subs	r2, #48	; 0x30
 8006566:	2b30      	cmp	r3, #48	; 0x30
 8006568:	d015      	beq.n	8006596 <_strtod_l+0x256>
 800656a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800656c:	185b      	adds	r3, r3, r1
 800656e:	210a      	movs	r1, #10
 8006570:	930c      	str	r3, [sp, #48]	; 0x30
 8006572:	9b06      	ldr	r3, [sp, #24]
 8006574:	18c4      	adds	r4, r0, r3
 8006576:	42a3      	cmp	r3, r4
 8006578:	d115      	bne.n	80065a6 <_strtod_l+0x266>
 800657a:	9906      	ldr	r1, [sp, #24]
 800657c:	9b06      	ldr	r3, [sp, #24]
 800657e:	3101      	adds	r1, #1
 8006580:	1809      	adds	r1, r1, r0
 8006582:	181b      	adds	r3, r3, r0
 8006584:	9106      	str	r1, [sp, #24]
 8006586:	2b08      	cmp	r3, #8
 8006588:	dc1b      	bgt.n	80065c2 <_strtod_l+0x282>
 800658a:	230a      	movs	r3, #10
 800658c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800658e:	434b      	muls	r3, r1
 8006590:	2100      	movs	r1, #0
 8006592:	18d3      	adds	r3, r2, r3
 8006594:	930b      	str	r3, [sp, #44]	; 0x2c
 8006596:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006598:	0008      	movs	r0, r1
 800659a:	1c5a      	adds	r2, r3, #1
 800659c:	921f      	str	r2, [sp, #124]	; 0x7c
 800659e:	785b      	ldrb	r3, [r3, #1]
 80065a0:	e7c7      	b.n	8006532 <_strtod_l+0x1f2>
 80065a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065a4:	e7d1      	b.n	800654a <_strtod_l+0x20a>
 80065a6:	2b08      	cmp	r3, #8
 80065a8:	dc04      	bgt.n	80065b4 <_strtod_l+0x274>
 80065aa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80065ac:	434d      	muls	r5, r1
 80065ae:	950b      	str	r5, [sp, #44]	; 0x2c
 80065b0:	3301      	adds	r3, #1
 80065b2:	e7e0      	b.n	8006576 <_strtod_l+0x236>
 80065b4:	1c5d      	adds	r5, r3, #1
 80065b6:	2d10      	cmp	r5, #16
 80065b8:	dcfa      	bgt.n	80065b0 <_strtod_l+0x270>
 80065ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80065bc:	434d      	muls	r5, r1
 80065be:	950f      	str	r5, [sp, #60]	; 0x3c
 80065c0:	e7f6      	b.n	80065b0 <_strtod_l+0x270>
 80065c2:	9b06      	ldr	r3, [sp, #24]
 80065c4:	2100      	movs	r1, #0
 80065c6:	2b10      	cmp	r3, #16
 80065c8:	dce5      	bgt.n	8006596 <_strtod_l+0x256>
 80065ca:	230a      	movs	r3, #10
 80065cc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80065ce:	4343      	muls	r3, r0
 80065d0:	18d3      	adds	r3, r2, r3
 80065d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80065d4:	e7df      	b.n	8006596 <_strtod_l+0x256>
 80065d6:	2200      	movs	r2, #0
 80065d8:	920c      	str	r2, [sp, #48]	; 0x30
 80065da:	9206      	str	r2, [sp, #24]
 80065dc:	3201      	adds	r2, #1
 80065de:	e7ad      	b.n	800653c <_strtod_l+0x1fc>
 80065e0:	2400      	movs	r4, #0
 80065e2:	9b08      	ldr	r3, [sp, #32]
 80065e4:	3302      	adds	r3, #2
 80065e6:	931f      	str	r3, [sp, #124]	; 0x7c
 80065e8:	9b08      	ldr	r3, [sp, #32]
 80065ea:	789b      	ldrb	r3, [r3, #2]
 80065ec:	001a      	movs	r2, r3
 80065ee:	3a30      	subs	r2, #48	; 0x30
 80065f0:	2a09      	cmp	r2, #9
 80065f2:	d913      	bls.n	800661c <_strtod_l+0x2dc>
 80065f4:	9a08      	ldr	r2, [sp, #32]
 80065f6:	921f      	str	r2, [sp, #124]	; 0x7c
 80065f8:	2200      	movs	r2, #0
 80065fa:	e031      	b.n	8006660 <_strtod_l+0x320>
 80065fc:	0800a388 	.word	0x0800a388
 8006600:	0800a140 	.word	0x0800a140
 8006604:	ffefffff 	.word	0xffefffff
 8006608:	00000433 	.word	0x00000433
 800660c:	7ff00000 	.word	0x7ff00000
 8006610:	7fffffff 	.word	0x7fffffff
 8006614:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006616:	1c5a      	adds	r2, r3, #1
 8006618:	921f      	str	r2, [sp, #124]	; 0x7c
 800661a:	785b      	ldrb	r3, [r3, #1]
 800661c:	2b30      	cmp	r3, #48	; 0x30
 800661e:	d0f9      	beq.n	8006614 <_strtod_l+0x2d4>
 8006620:	2200      	movs	r2, #0
 8006622:	9207      	str	r2, [sp, #28]
 8006624:	001a      	movs	r2, r3
 8006626:	3a31      	subs	r2, #49	; 0x31
 8006628:	2a08      	cmp	r2, #8
 800662a:	d81a      	bhi.n	8006662 <_strtod_l+0x322>
 800662c:	3b30      	subs	r3, #48	; 0x30
 800662e:	001a      	movs	r2, r3
 8006630:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006632:	9307      	str	r3, [sp, #28]
 8006634:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006636:	1c59      	adds	r1, r3, #1
 8006638:	911f      	str	r1, [sp, #124]	; 0x7c
 800663a:	785b      	ldrb	r3, [r3, #1]
 800663c:	001d      	movs	r5, r3
 800663e:	3d30      	subs	r5, #48	; 0x30
 8006640:	2d09      	cmp	r5, #9
 8006642:	d939      	bls.n	80066b8 <_strtod_l+0x378>
 8006644:	9d07      	ldr	r5, [sp, #28]
 8006646:	1b49      	subs	r1, r1, r5
 8006648:	4db0      	ldr	r5, [pc, #704]	; (800690c <_strtod_l+0x5cc>)
 800664a:	9507      	str	r5, [sp, #28]
 800664c:	2908      	cmp	r1, #8
 800664e:	dc03      	bgt.n	8006658 <_strtod_l+0x318>
 8006650:	9207      	str	r2, [sp, #28]
 8006652:	42aa      	cmp	r2, r5
 8006654:	dd00      	ble.n	8006658 <_strtod_l+0x318>
 8006656:	9507      	str	r5, [sp, #28]
 8006658:	2c00      	cmp	r4, #0
 800665a:	d002      	beq.n	8006662 <_strtod_l+0x322>
 800665c:	9a07      	ldr	r2, [sp, #28]
 800665e:	4252      	negs	r2, r2
 8006660:	9207      	str	r2, [sp, #28]
 8006662:	9a06      	ldr	r2, [sp, #24]
 8006664:	2a00      	cmp	r2, #0
 8006666:	d14b      	bne.n	8006700 <_strtod_l+0x3c0>
 8006668:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800666a:	4310      	orrs	r0, r2
 800666c:	d000      	beq.n	8006670 <_strtod_l+0x330>
 800666e:	e6ae      	b.n	80063ce <_strtod_l+0x8e>
 8006670:	4662      	mov	r2, ip
 8006672:	2a00      	cmp	r2, #0
 8006674:	d000      	beq.n	8006678 <_strtod_l+0x338>
 8006676:	e6c9      	b.n	800640c <_strtod_l+0xcc>
 8006678:	2b69      	cmp	r3, #105	; 0x69
 800667a:	d025      	beq.n	80066c8 <_strtod_l+0x388>
 800667c:	dc21      	bgt.n	80066c2 <_strtod_l+0x382>
 800667e:	2b49      	cmp	r3, #73	; 0x49
 8006680:	d022      	beq.n	80066c8 <_strtod_l+0x388>
 8006682:	2b4e      	cmp	r3, #78	; 0x4e
 8006684:	d000      	beq.n	8006688 <_strtod_l+0x348>
 8006686:	e6c1      	b.n	800640c <_strtod_l+0xcc>
 8006688:	49a1      	ldr	r1, [pc, #644]	; (8006910 <_strtod_l+0x5d0>)
 800668a:	a81f      	add	r0, sp, #124	; 0x7c
 800668c:	f001 fe64 	bl	8008358 <__match>
 8006690:	2800      	cmp	r0, #0
 8006692:	d100      	bne.n	8006696 <_strtod_l+0x356>
 8006694:	e6ba      	b.n	800640c <_strtod_l+0xcc>
 8006696:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	2b28      	cmp	r3, #40	; 0x28
 800669c:	d12a      	bne.n	80066f4 <_strtod_l+0x3b4>
 800669e:	499d      	ldr	r1, [pc, #628]	; (8006914 <_strtod_l+0x5d4>)
 80066a0:	aa22      	add	r2, sp, #136	; 0x88
 80066a2:	a81f      	add	r0, sp, #124	; 0x7c
 80066a4:	f001 fe6c 	bl	8008380 <__hexnan>
 80066a8:	2805      	cmp	r0, #5
 80066aa:	d123      	bne.n	80066f4 <_strtod_l+0x3b4>
 80066ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80066ae:	4a9a      	ldr	r2, [pc, #616]	; (8006918 <_strtod_l+0x5d8>)
 80066b0:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80066b2:	431a      	orrs	r2, r3
 80066b4:	0017      	movs	r7, r2
 80066b6:	e68a      	b.n	80063ce <_strtod_l+0x8e>
 80066b8:	210a      	movs	r1, #10
 80066ba:	434a      	muls	r2, r1
 80066bc:	18d2      	adds	r2, r2, r3
 80066be:	3a30      	subs	r2, #48	; 0x30
 80066c0:	e7b8      	b.n	8006634 <_strtod_l+0x2f4>
 80066c2:	2b6e      	cmp	r3, #110	; 0x6e
 80066c4:	d0e0      	beq.n	8006688 <_strtod_l+0x348>
 80066c6:	e6a1      	b.n	800640c <_strtod_l+0xcc>
 80066c8:	4994      	ldr	r1, [pc, #592]	; (800691c <_strtod_l+0x5dc>)
 80066ca:	a81f      	add	r0, sp, #124	; 0x7c
 80066cc:	f001 fe44 	bl	8008358 <__match>
 80066d0:	2800      	cmp	r0, #0
 80066d2:	d100      	bne.n	80066d6 <_strtod_l+0x396>
 80066d4:	e69a      	b.n	800640c <_strtod_l+0xcc>
 80066d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80066d8:	4991      	ldr	r1, [pc, #580]	; (8006920 <_strtod_l+0x5e0>)
 80066da:	3b01      	subs	r3, #1
 80066dc:	a81f      	add	r0, sp, #124	; 0x7c
 80066de:	931f      	str	r3, [sp, #124]	; 0x7c
 80066e0:	f001 fe3a 	bl	8008358 <__match>
 80066e4:	2800      	cmp	r0, #0
 80066e6:	d102      	bne.n	80066ee <_strtod_l+0x3ae>
 80066e8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80066ea:	3301      	adds	r3, #1
 80066ec:	931f      	str	r3, [sp, #124]	; 0x7c
 80066ee:	2600      	movs	r6, #0
 80066f0:	4f89      	ldr	r7, [pc, #548]	; (8006918 <_strtod_l+0x5d8>)
 80066f2:	e66c      	b.n	80063ce <_strtod_l+0x8e>
 80066f4:	488b      	ldr	r0, [pc, #556]	; (8006924 <_strtod_l+0x5e4>)
 80066f6:	f002 fe59 	bl	80093ac <nan>
 80066fa:	0006      	movs	r6, r0
 80066fc:	000f      	movs	r7, r1
 80066fe:	e666      	b.n	80063ce <_strtod_l+0x8e>
 8006700:	9b07      	ldr	r3, [sp, #28]
 8006702:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006704:	1a9b      	subs	r3, r3, r2
 8006706:	930a      	str	r3, [sp, #40]	; 0x28
 8006708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800670a:	2b00      	cmp	r3, #0
 800670c:	d101      	bne.n	8006712 <_strtod_l+0x3d2>
 800670e:	9b06      	ldr	r3, [sp, #24]
 8006710:	9309      	str	r3, [sp, #36]	; 0x24
 8006712:	9c06      	ldr	r4, [sp, #24]
 8006714:	2c10      	cmp	r4, #16
 8006716:	dd00      	ble.n	800671a <_strtod_l+0x3da>
 8006718:	2410      	movs	r4, #16
 800671a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800671c:	f7fb fcf4 	bl	8002108 <__aeabi_ui2d>
 8006720:	9b06      	ldr	r3, [sp, #24]
 8006722:	0006      	movs	r6, r0
 8006724:	000f      	movs	r7, r1
 8006726:	2b09      	cmp	r3, #9
 8006728:	dd15      	ble.n	8006756 <_strtod_l+0x416>
 800672a:	0022      	movs	r2, r4
 800672c:	4b7e      	ldr	r3, [pc, #504]	; (8006928 <_strtod_l+0x5e8>)
 800672e:	3a09      	subs	r2, #9
 8006730:	00d2      	lsls	r2, r2, #3
 8006732:	189b      	adds	r3, r3, r2
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	f7fa fe64 	bl	8001404 <__aeabi_dmul>
 800673c:	0006      	movs	r6, r0
 800673e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006740:	000f      	movs	r7, r1
 8006742:	f7fb fce1 	bl	8002108 <__aeabi_ui2d>
 8006746:	0002      	movs	r2, r0
 8006748:	000b      	movs	r3, r1
 800674a:	0030      	movs	r0, r6
 800674c:	0039      	movs	r1, r7
 800674e:	f7f9 ff1b 	bl	8000588 <__aeabi_dadd>
 8006752:	0006      	movs	r6, r0
 8006754:	000f      	movs	r7, r1
 8006756:	9b06      	ldr	r3, [sp, #24]
 8006758:	2b0f      	cmp	r3, #15
 800675a:	dc39      	bgt.n	80067d0 <_strtod_l+0x490>
 800675c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800675e:	2b00      	cmp	r3, #0
 8006760:	d100      	bne.n	8006764 <_strtod_l+0x424>
 8006762:	e634      	b.n	80063ce <_strtod_l+0x8e>
 8006764:	dd24      	ble.n	80067b0 <_strtod_l+0x470>
 8006766:	2b16      	cmp	r3, #22
 8006768:	dc09      	bgt.n	800677e <_strtod_l+0x43e>
 800676a:	496f      	ldr	r1, [pc, #444]	; (8006928 <_strtod_l+0x5e8>)
 800676c:	00db      	lsls	r3, r3, #3
 800676e:	18c9      	adds	r1, r1, r3
 8006770:	0032      	movs	r2, r6
 8006772:	6808      	ldr	r0, [r1, #0]
 8006774:	6849      	ldr	r1, [r1, #4]
 8006776:	003b      	movs	r3, r7
 8006778:	f7fa fe44 	bl	8001404 <__aeabi_dmul>
 800677c:	e7bd      	b.n	80066fa <_strtod_l+0x3ba>
 800677e:	2325      	movs	r3, #37	; 0x25
 8006780:	9a06      	ldr	r2, [sp, #24]
 8006782:	1a9b      	subs	r3, r3, r2
 8006784:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006786:	4293      	cmp	r3, r2
 8006788:	db22      	blt.n	80067d0 <_strtod_l+0x490>
 800678a:	240f      	movs	r4, #15
 800678c:	9b06      	ldr	r3, [sp, #24]
 800678e:	4d66      	ldr	r5, [pc, #408]	; (8006928 <_strtod_l+0x5e8>)
 8006790:	1ae4      	subs	r4, r4, r3
 8006792:	00e1      	lsls	r1, r4, #3
 8006794:	1869      	adds	r1, r5, r1
 8006796:	0032      	movs	r2, r6
 8006798:	6808      	ldr	r0, [r1, #0]
 800679a:	6849      	ldr	r1, [r1, #4]
 800679c:	003b      	movs	r3, r7
 800679e:	f7fa fe31 	bl	8001404 <__aeabi_dmul>
 80067a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067a4:	1b1c      	subs	r4, r3, r4
 80067a6:	00e4      	lsls	r4, r4, #3
 80067a8:	192c      	adds	r4, r5, r4
 80067aa:	6822      	ldr	r2, [r4, #0]
 80067ac:	6863      	ldr	r3, [r4, #4]
 80067ae:	e7e3      	b.n	8006778 <_strtod_l+0x438>
 80067b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067b2:	3316      	adds	r3, #22
 80067b4:	db0c      	blt.n	80067d0 <_strtod_l+0x490>
 80067b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067b8:	9a07      	ldr	r2, [sp, #28]
 80067ba:	0030      	movs	r0, r6
 80067bc:	1a9a      	subs	r2, r3, r2
 80067be:	4b5a      	ldr	r3, [pc, #360]	; (8006928 <_strtod_l+0x5e8>)
 80067c0:	00d2      	lsls	r2, r2, #3
 80067c2:	189b      	adds	r3, r3, r2
 80067c4:	0039      	movs	r1, r7
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	f7fa fa19 	bl	8000c00 <__aeabi_ddiv>
 80067ce:	e794      	b.n	80066fa <_strtod_l+0x3ba>
 80067d0:	9b06      	ldr	r3, [sp, #24]
 80067d2:	1b1c      	subs	r4, r3, r4
 80067d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067d6:	18e4      	adds	r4, r4, r3
 80067d8:	2c00      	cmp	r4, #0
 80067da:	dd72      	ble.n	80068c2 <_strtod_l+0x582>
 80067dc:	230f      	movs	r3, #15
 80067de:	0021      	movs	r1, r4
 80067e0:	4019      	ands	r1, r3
 80067e2:	421c      	tst	r4, r3
 80067e4:	d00a      	beq.n	80067fc <_strtod_l+0x4bc>
 80067e6:	00cb      	lsls	r3, r1, #3
 80067e8:	494f      	ldr	r1, [pc, #316]	; (8006928 <_strtod_l+0x5e8>)
 80067ea:	0032      	movs	r2, r6
 80067ec:	18c9      	adds	r1, r1, r3
 80067ee:	6808      	ldr	r0, [r1, #0]
 80067f0:	6849      	ldr	r1, [r1, #4]
 80067f2:	003b      	movs	r3, r7
 80067f4:	f7fa fe06 	bl	8001404 <__aeabi_dmul>
 80067f8:	0006      	movs	r6, r0
 80067fa:	000f      	movs	r7, r1
 80067fc:	230f      	movs	r3, #15
 80067fe:	439c      	bics	r4, r3
 8006800:	d04a      	beq.n	8006898 <_strtod_l+0x558>
 8006802:	3326      	adds	r3, #38	; 0x26
 8006804:	33ff      	adds	r3, #255	; 0xff
 8006806:	429c      	cmp	r4, r3
 8006808:	dd22      	ble.n	8006850 <_strtod_l+0x510>
 800680a:	2300      	movs	r3, #0
 800680c:	9306      	str	r3, [sp, #24]
 800680e:	9307      	str	r3, [sp, #28]
 8006810:	930b      	str	r3, [sp, #44]	; 0x2c
 8006812:	9309      	str	r3, [sp, #36]	; 0x24
 8006814:	2322      	movs	r3, #34	; 0x22
 8006816:	2600      	movs	r6, #0
 8006818:	9a05      	ldr	r2, [sp, #20]
 800681a:	4f3f      	ldr	r7, [pc, #252]	; (8006918 <_strtod_l+0x5d8>)
 800681c:	6013      	str	r3, [r2, #0]
 800681e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006820:	42b3      	cmp	r3, r6
 8006822:	d100      	bne.n	8006826 <_strtod_l+0x4e6>
 8006824:	e5d3      	b.n	80063ce <_strtod_l+0x8e>
 8006826:	9920      	ldr	r1, [sp, #128]	; 0x80
 8006828:	9805      	ldr	r0, [sp, #20]
 800682a:	f001 fec9 	bl	80085c0 <_Bfree>
 800682e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006830:	9805      	ldr	r0, [sp, #20]
 8006832:	f001 fec5 	bl	80085c0 <_Bfree>
 8006836:	9907      	ldr	r1, [sp, #28]
 8006838:	9805      	ldr	r0, [sp, #20]
 800683a:	f001 fec1 	bl	80085c0 <_Bfree>
 800683e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006840:	9805      	ldr	r0, [sp, #20]
 8006842:	f001 febd 	bl	80085c0 <_Bfree>
 8006846:	9906      	ldr	r1, [sp, #24]
 8006848:	9805      	ldr	r0, [sp, #20]
 800684a:	f001 feb9 	bl	80085c0 <_Bfree>
 800684e:	e5be      	b.n	80063ce <_strtod_l+0x8e>
 8006850:	2300      	movs	r3, #0
 8006852:	0030      	movs	r0, r6
 8006854:	0039      	movs	r1, r7
 8006856:	4d35      	ldr	r5, [pc, #212]	; (800692c <_strtod_l+0x5ec>)
 8006858:	1124      	asrs	r4, r4, #4
 800685a:	9308      	str	r3, [sp, #32]
 800685c:	2c01      	cmp	r4, #1
 800685e:	dc1e      	bgt.n	800689e <_strtod_l+0x55e>
 8006860:	2b00      	cmp	r3, #0
 8006862:	d001      	beq.n	8006868 <_strtod_l+0x528>
 8006864:	0006      	movs	r6, r0
 8006866:	000f      	movs	r7, r1
 8006868:	4b31      	ldr	r3, [pc, #196]	; (8006930 <_strtod_l+0x5f0>)
 800686a:	0032      	movs	r2, r6
 800686c:	18ff      	adds	r7, r7, r3
 800686e:	9b08      	ldr	r3, [sp, #32]
 8006870:	00dd      	lsls	r5, r3, #3
 8006872:	4b2e      	ldr	r3, [pc, #184]	; (800692c <_strtod_l+0x5ec>)
 8006874:	195d      	adds	r5, r3, r5
 8006876:	6828      	ldr	r0, [r5, #0]
 8006878:	6869      	ldr	r1, [r5, #4]
 800687a:	003b      	movs	r3, r7
 800687c:	f7fa fdc2 	bl	8001404 <__aeabi_dmul>
 8006880:	4b25      	ldr	r3, [pc, #148]	; (8006918 <_strtod_l+0x5d8>)
 8006882:	4a2c      	ldr	r2, [pc, #176]	; (8006934 <_strtod_l+0x5f4>)
 8006884:	0006      	movs	r6, r0
 8006886:	400b      	ands	r3, r1
 8006888:	4293      	cmp	r3, r2
 800688a:	d8be      	bhi.n	800680a <_strtod_l+0x4ca>
 800688c:	4a2a      	ldr	r2, [pc, #168]	; (8006938 <_strtod_l+0x5f8>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d913      	bls.n	80068ba <_strtod_l+0x57a>
 8006892:	2601      	movs	r6, #1
 8006894:	4f29      	ldr	r7, [pc, #164]	; (800693c <_strtod_l+0x5fc>)
 8006896:	4276      	negs	r6, r6
 8006898:	2300      	movs	r3, #0
 800689a:	9308      	str	r3, [sp, #32]
 800689c:	e087      	b.n	80069ae <_strtod_l+0x66e>
 800689e:	2201      	movs	r2, #1
 80068a0:	4214      	tst	r4, r2
 80068a2:	d004      	beq.n	80068ae <_strtod_l+0x56e>
 80068a4:	682a      	ldr	r2, [r5, #0]
 80068a6:	686b      	ldr	r3, [r5, #4]
 80068a8:	f7fa fdac 	bl	8001404 <__aeabi_dmul>
 80068ac:	2301      	movs	r3, #1
 80068ae:	9a08      	ldr	r2, [sp, #32]
 80068b0:	1064      	asrs	r4, r4, #1
 80068b2:	3201      	adds	r2, #1
 80068b4:	9208      	str	r2, [sp, #32]
 80068b6:	3508      	adds	r5, #8
 80068b8:	e7d0      	b.n	800685c <_strtod_l+0x51c>
 80068ba:	23d4      	movs	r3, #212	; 0xd4
 80068bc:	049b      	lsls	r3, r3, #18
 80068be:	18cf      	adds	r7, r1, r3
 80068c0:	e7ea      	b.n	8006898 <_strtod_l+0x558>
 80068c2:	2c00      	cmp	r4, #0
 80068c4:	d0e8      	beq.n	8006898 <_strtod_l+0x558>
 80068c6:	4264      	negs	r4, r4
 80068c8:	220f      	movs	r2, #15
 80068ca:	0023      	movs	r3, r4
 80068cc:	4013      	ands	r3, r2
 80068ce:	4214      	tst	r4, r2
 80068d0:	d00a      	beq.n	80068e8 <_strtod_l+0x5a8>
 80068d2:	00da      	lsls	r2, r3, #3
 80068d4:	4b14      	ldr	r3, [pc, #80]	; (8006928 <_strtod_l+0x5e8>)
 80068d6:	0030      	movs	r0, r6
 80068d8:	189b      	adds	r3, r3, r2
 80068da:	0039      	movs	r1, r7
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	f7fa f98e 	bl	8000c00 <__aeabi_ddiv>
 80068e4:	0006      	movs	r6, r0
 80068e6:	000f      	movs	r7, r1
 80068e8:	1124      	asrs	r4, r4, #4
 80068ea:	d0d5      	beq.n	8006898 <_strtod_l+0x558>
 80068ec:	2c1f      	cmp	r4, #31
 80068ee:	dd27      	ble.n	8006940 <_strtod_l+0x600>
 80068f0:	2300      	movs	r3, #0
 80068f2:	9306      	str	r3, [sp, #24]
 80068f4:	9307      	str	r3, [sp, #28]
 80068f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80068f8:	9309      	str	r3, [sp, #36]	; 0x24
 80068fa:	2322      	movs	r3, #34	; 0x22
 80068fc:	9a05      	ldr	r2, [sp, #20]
 80068fe:	2600      	movs	r6, #0
 8006900:	6013      	str	r3, [r2, #0]
 8006902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006904:	2700      	movs	r7, #0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d18d      	bne.n	8006826 <_strtod_l+0x4e6>
 800690a:	e560      	b.n	80063ce <_strtod_l+0x8e>
 800690c:	00004e1f 	.word	0x00004e1f
 8006910:	0800a111 	.word	0x0800a111
 8006914:	0800a154 	.word	0x0800a154
 8006918:	7ff00000 	.word	0x7ff00000
 800691c:	0800a109 	.word	0x0800a109
 8006920:	0800a294 	.word	0x0800a294
 8006924:	0800a540 	.word	0x0800a540
 8006928:	0800a420 	.word	0x0800a420
 800692c:	0800a3f8 	.word	0x0800a3f8
 8006930:	fcb00000 	.word	0xfcb00000
 8006934:	7ca00000 	.word	0x7ca00000
 8006938:	7c900000 	.word	0x7c900000
 800693c:	7fefffff 	.word	0x7fefffff
 8006940:	2310      	movs	r3, #16
 8006942:	0022      	movs	r2, r4
 8006944:	401a      	ands	r2, r3
 8006946:	9208      	str	r2, [sp, #32]
 8006948:	421c      	tst	r4, r3
 800694a:	d001      	beq.n	8006950 <_strtod_l+0x610>
 800694c:	335a      	adds	r3, #90	; 0x5a
 800694e:	9308      	str	r3, [sp, #32]
 8006950:	0030      	movs	r0, r6
 8006952:	0039      	movs	r1, r7
 8006954:	2300      	movs	r3, #0
 8006956:	4dc5      	ldr	r5, [pc, #788]	; (8006c6c <_strtod_l+0x92c>)
 8006958:	2201      	movs	r2, #1
 800695a:	4214      	tst	r4, r2
 800695c:	d004      	beq.n	8006968 <_strtod_l+0x628>
 800695e:	682a      	ldr	r2, [r5, #0]
 8006960:	686b      	ldr	r3, [r5, #4]
 8006962:	f7fa fd4f 	bl	8001404 <__aeabi_dmul>
 8006966:	2301      	movs	r3, #1
 8006968:	1064      	asrs	r4, r4, #1
 800696a:	3508      	adds	r5, #8
 800696c:	2c00      	cmp	r4, #0
 800696e:	d1f3      	bne.n	8006958 <_strtod_l+0x618>
 8006970:	2b00      	cmp	r3, #0
 8006972:	d001      	beq.n	8006978 <_strtod_l+0x638>
 8006974:	0006      	movs	r6, r0
 8006976:	000f      	movs	r7, r1
 8006978:	9b08      	ldr	r3, [sp, #32]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00f      	beq.n	800699e <_strtod_l+0x65e>
 800697e:	236b      	movs	r3, #107	; 0x6b
 8006980:	007a      	lsls	r2, r7, #1
 8006982:	0d52      	lsrs	r2, r2, #21
 8006984:	0039      	movs	r1, r7
 8006986:	1a9b      	subs	r3, r3, r2
 8006988:	2b00      	cmp	r3, #0
 800698a:	dd08      	ble.n	800699e <_strtod_l+0x65e>
 800698c:	2b1f      	cmp	r3, #31
 800698e:	dc00      	bgt.n	8006992 <_strtod_l+0x652>
 8006990:	e124      	b.n	8006bdc <_strtod_l+0x89c>
 8006992:	2600      	movs	r6, #0
 8006994:	2b34      	cmp	r3, #52	; 0x34
 8006996:	dc00      	bgt.n	800699a <_strtod_l+0x65a>
 8006998:	e119      	b.n	8006bce <_strtod_l+0x88e>
 800699a:	27dc      	movs	r7, #220	; 0xdc
 800699c:	04bf      	lsls	r7, r7, #18
 800699e:	2200      	movs	r2, #0
 80069a0:	2300      	movs	r3, #0
 80069a2:	0030      	movs	r0, r6
 80069a4:	0039      	movs	r1, r7
 80069a6:	f7f9 fd51 	bl	800044c <__aeabi_dcmpeq>
 80069aa:	2800      	cmp	r0, #0
 80069ac:	d1a0      	bne.n	80068f0 <_strtod_l+0x5b0>
 80069ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80069b6:	9b06      	ldr	r3, [sp, #24]
 80069b8:	9805      	ldr	r0, [sp, #20]
 80069ba:	f001 fe69 	bl	8008690 <__s2b>
 80069be:	900b      	str	r0, [sp, #44]	; 0x2c
 80069c0:	2800      	cmp	r0, #0
 80069c2:	d100      	bne.n	80069c6 <_strtod_l+0x686>
 80069c4:	e721      	b.n	800680a <_strtod_l+0x4ca>
 80069c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069c8:	9907      	ldr	r1, [sp, #28]
 80069ca:	17da      	asrs	r2, r3, #31
 80069cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069ce:	1a5b      	subs	r3, r3, r1
 80069d0:	401a      	ands	r2, r3
 80069d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069d4:	9215      	str	r2, [sp, #84]	; 0x54
 80069d6:	43db      	mvns	r3, r3
 80069d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069da:	17db      	asrs	r3, r3, #31
 80069dc:	401a      	ands	r2, r3
 80069de:	2300      	movs	r3, #0
 80069e0:	921a      	str	r2, [sp, #104]	; 0x68
 80069e2:	9306      	str	r3, [sp, #24]
 80069e4:	9307      	str	r3, [sp, #28]
 80069e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069e8:	9805      	ldr	r0, [sp, #20]
 80069ea:	6859      	ldr	r1, [r3, #4]
 80069ec:	f001 fda4 	bl	8008538 <_Balloc>
 80069f0:	9009      	str	r0, [sp, #36]	; 0x24
 80069f2:	2800      	cmp	r0, #0
 80069f4:	d100      	bne.n	80069f8 <_strtod_l+0x6b8>
 80069f6:	e70d      	b.n	8006814 <_strtod_l+0x4d4>
 80069f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	310c      	adds	r1, #12
 8006a00:	1c9a      	adds	r2, r3, #2
 8006a02:	0092      	lsls	r2, r2, #2
 8006a04:	300c      	adds	r0, #12
 8006a06:	930c      	str	r3, [sp, #48]	; 0x30
 8006a08:	f001 fd8d 	bl	8008526 <memcpy>
 8006a0c:	ab22      	add	r3, sp, #136	; 0x88
 8006a0e:	9301      	str	r3, [sp, #4]
 8006a10:	ab21      	add	r3, sp, #132	; 0x84
 8006a12:	9300      	str	r3, [sp, #0]
 8006a14:	0032      	movs	r2, r6
 8006a16:	003b      	movs	r3, r7
 8006a18:	9805      	ldr	r0, [sp, #20]
 8006a1a:	9612      	str	r6, [sp, #72]	; 0x48
 8006a1c:	9713      	str	r7, [sp, #76]	; 0x4c
 8006a1e:	f002 f983 	bl	8008d28 <__d2b>
 8006a22:	9020      	str	r0, [sp, #128]	; 0x80
 8006a24:	2800      	cmp	r0, #0
 8006a26:	d100      	bne.n	8006a2a <_strtod_l+0x6ea>
 8006a28:	e6f4      	b.n	8006814 <_strtod_l+0x4d4>
 8006a2a:	2101      	movs	r1, #1
 8006a2c:	9805      	ldr	r0, [sp, #20]
 8006a2e:	f001 fec3 	bl	80087b8 <__i2b>
 8006a32:	9007      	str	r0, [sp, #28]
 8006a34:	2800      	cmp	r0, #0
 8006a36:	d100      	bne.n	8006a3a <_strtod_l+0x6fa>
 8006a38:	e6ec      	b.n	8006814 <_strtod_l+0x4d4>
 8006a3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a3c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006a3e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8006a40:	1ad4      	subs	r4, r2, r3
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	db01      	blt.n	8006a4a <_strtod_l+0x70a>
 8006a46:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8006a48:	195d      	adds	r5, r3, r5
 8006a4a:	9908      	ldr	r1, [sp, #32]
 8006a4c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006a4e:	1a5b      	subs	r3, r3, r1
 8006a50:	2136      	movs	r1, #54	; 0x36
 8006a52:	189b      	adds	r3, r3, r2
 8006a54:	1a8a      	subs	r2, r1, r2
 8006a56:	4986      	ldr	r1, [pc, #536]	; (8006c70 <_strtod_l+0x930>)
 8006a58:	2001      	movs	r0, #1
 8006a5a:	468c      	mov	ip, r1
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	9110      	str	r1, [sp, #64]	; 0x40
 8006a62:	9014      	str	r0, [sp, #80]	; 0x50
 8006a64:	4563      	cmp	r3, ip
 8006a66:	da07      	bge.n	8006a78 <_strtod_l+0x738>
 8006a68:	4661      	mov	r1, ip
 8006a6a:	1ac9      	subs	r1, r1, r3
 8006a6c:	1a52      	subs	r2, r2, r1
 8006a6e:	291f      	cmp	r1, #31
 8006a70:	dd00      	ble.n	8006a74 <_strtod_l+0x734>
 8006a72:	e0b8      	b.n	8006be6 <_strtod_l+0x8a6>
 8006a74:	4088      	lsls	r0, r1
 8006a76:	9014      	str	r0, [sp, #80]	; 0x50
 8006a78:	18ab      	adds	r3, r5, r2
 8006a7a:	930c      	str	r3, [sp, #48]	; 0x30
 8006a7c:	18a4      	adds	r4, r4, r2
 8006a7e:	9b08      	ldr	r3, [sp, #32]
 8006a80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a82:	191c      	adds	r4, r3, r4
 8006a84:	002b      	movs	r3, r5
 8006a86:	4295      	cmp	r5, r2
 8006a88:	dd00      	ble.n	8006a8c <_strtod_l+0x74c>
 8006a8a:	0013      	movs	r3, r2
 8006a8c:	42a3      	cmp	r3, r4
 8006a8e:	dd00      	ble.n	8006a92 <_strtod_l+0x752>
 8006a90:	0023      	movs	r3, r4
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	dd04      	ble.n	8006aa0 <_strtod_l+0x760>
 8006a96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a98:	1ae4      	subs	r4, r4, r3
 8006a9a:	1ad2      	subs	r2, r2, r3
 8006a9c:	920c      	str	r2, [sp, #48]	; 0x30
 8006a9e:	1aed      	subs	r5, r5, r3
 8006aa0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	dd17      	ble.n	8006ad6 <_strtod_l+0x796>
 8006aa6:	001a      	movs	r2, r3
 8006aa8:	9907      	ldr	r1, [sp, #28]
 8006aaa:	9805      	ldr	r0, [sp, #20]
 8006aac:	f001 ff4a 	bl	8008944 <__pow5mult>
 8006ab0:	9007      	str	r0, [sp, #28]
 8006ab2:	2800      	cmp	r0, #0
 8006ab4:	d100      	bne.n	8006ab8 <_strtod_l+0x778>
 8006ab6:	e6ad      	b.n	8006814 <_strtod_l+0x4d4>
 8006ab8:	0001      	movs	r1, r0
 8006aba:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006abc:	9805      	ldr	r0, [sp, #20]
 8006abe:	f001 fe91 	bl	80087e4 <__multiply>
 8006ac2:	900f      	str	r0, [sp, #60]	; 0x3c
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	d100      	bne.n	8006aca <_strtod_l+0x78a>
 8006ac8:	e6a4      	b.n	8006814 <_strtod_l+0x4d4>
 8006aca:	9920      	ldr	r1, [sp, #128]	; 0x80
 8006acc:	9805      	ldr	r0, [sp, #20]
 8006ace:	f001 fd77 	bl	80085c0 <_Bfree>
 8006ad2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ad4:	9320      	str	r3, [sp, #128]	; 0x80
 8006ad6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	dd00      	ble.n	8006ade <_strtod_l+0x79e>
 8006adc:	e089      	b.n	8006bf2 <_strtod_l+0x8b2>
 8006ade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	dd08      	ble.n	8006af6 <_strtod_l+0x7b6>
 8006ae4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006ae6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ae8:	9805      	ldr	r0, [sp, #20]
 8006aea:	f001 ff2b 	bl	8008944 <__pow5mult>
 8006aee:	9009      	str	r0, [sp, #36]	; 0x24
 8006af0:	2800      	cmp	r0, #0
 8006af2:	d100      	bne.n	8006af6 <_strtod_l+0x7b6>
 8006af4:	e68e      	b.n	8006814 <_strtod_l+0x4d4>
 8006af6:	2c00      	cmp	r4, #0
 8006af8:	dd08      	ble.n	8006b0c <_strtod_l+0x7cc>
 8006afa:	0022      	movs	r2, r4
 8006afc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006afe:	9805      	ldr	r0, [sp, #20]
 8006b00:	f001 ff7c 	bl	80089fc <__lshift>
 8006b04:	9009      	str	r0, [sp, #36]	; 0x24
 8006b06:	2800      	cmp	r0, #0
 8006b08:	d100      	bne.n	8006b0c <_strtod_l+0x7cc>
 8006b0a:	e683      	b.n	8006814 <_strtod_l+0x4d4>
 8006b0c:	2d00      	cmp	r5, #0
 8006b0e:	dd08      	ble.n	8006b22 <_strtod_l+0x7e2>
 8006b10:	002a      	movs	r2, r5
 8006b12:	9907      	ldr	r1, [sp, #28]
 8006b14:	9805      	ldr	r0, [sp, #20]
 8006b16:	f001 ff71 	bl	80089fc <__lshift>
 8006b1a:	9007      	str	r0, [sp, #28]
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	d100      	bne.n	8006b22 <_strtod_l+0x7e2>
 8006b20:	e678      	b.n	8006814 <_strtod_l+0x4d4>
 8006b22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b24:	9920      	ldr	r1, [sp, #128]	; 0x80
 8006b26:	9805      	ldr	r0, [sp, #20]
 8006b28:	f001 fff2 	bl	8008b10 <__mdiff>
 8006b2c:	9006      	str	r0, [sp, #24]
 8006b2e:	2800      	cmp	r0, #0
 8006b30:	d100      	bne.n	8006b34 <_strtod_l+0x7f4>
 8006b32:	e66f      	b.n	8006814 <_strtod_l+0x4d4>
 8006b34:	2200      	movs	r2, #0
 8006b36:	68c3      	ldr	r3, [r0, #12]
 8006b38:	9907      	ldr	r1, [sp, #28]
 8006b3a:	60c2      	str	r2, [r0, #12]
 8006b3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b3e:	f001 ffcb 	bl	8008ad8 <__mcmp>
 8006b42:	2800      	cmp	r0, #0
 8006b44:	da5f      	bge.n	8006c06 <_strtod_l+0x8c6>
 8006b46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b48:	4333      	orrs	r3, r6
 8006b4a:	d000      	beq.n	8006b4e <_strtod_l+0x80e>
 8006b4c:	e08a      	b.n	8006c64 <_strtod_l+0x924>
 8006b4e:	033b      	lsls	r3, r7, #12
 8006b50:	d000      	beq.n	8006b54 <_strtod_l+0x814>
 8006b52:	e087      	b.n	8006c64 <_strtod_l+0x924>
 8006b54:	22d6      	movs	r2, #214	; 0xd6
 8006b56:	4b47      	ldr	r3, [pc, #284]	; (8006c74 <_strtod_l+0x934>)
 8006b58:	04d2      	lsls	r2, r2, #19
 8006b5a:	403b      	ands	r3, r7
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d800      	bhi.n	8006b62 <_strtod_l+0x822>
 8006b60:	e080      	b.n	8006c64 <_strtod_l+0x924>
 8006b62:	9b06      	ldr	r3, [sp, #24]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	930a      	str	r3, [sp, #40]	; 0x28
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d104      	bne.n	8006b76 <_strtod_l+0x836>
 8006b6c:	9b06      	ldr	r3, [sp, #24]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	930a      	str	r3, [sp, #40]	; 0x28
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	dd76      	ble.n	8006c64 <_strtod_l+0x924>
 8006b76:	9906      	ldr	r1, [sp, #24]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	9805      	ldr	r0, [sp, #20]
 8006b7c:	f001 ff3e 	bl	80089fc <__lshift>
 8006b80:	9907      	ldr	r1, [sp, #28]
 8006b82:	9006      	str	r0, [sp, #24]
 8006b84:	f001 ffa8 	bl	8008ad8 <__mcmp>
 8006b88:	2800      	cmp	r0, #0
 8006b8a:	dd6b      	ble.n	8006c64 <_strtod_l+0x924>
 8006b8c:	9908      	ldr	r1, [sp, #32]
 8006b8e:	003b      	movs	r3, r7
 8006b90:	4a38      	ldr	r2, [pc, #224]	; (8006c74 <_strtod_l+0x934>)
 8006b92:	2900      	cmp	r1, #0
 8006b94:	d100      	bne.n	8006b98 <_strtod_l+0x858>
 8006b96:	e092      	b.n	8006cbe <_strtod_l+0x97e>
 8006b98:	0011      	movs	r1, r2
 8006b9a:	20d6      	movs	r0, #214	; 0xd6
 8006b9c:	4039      	ands	r1, r7
 8006b9e:	04c0      	lsls	r0, r0, #19
 8006ba0:	4281      	cmp	r1, r0
 8006ba2:	dd00      	ble.n	8006ba6 <_strtod_l+0x866>
 8006ba4:	e08b      	b.n	8006cbe <_strtod_l+0x97e>
 8006ba6:	23dc      	movs	r3, #220	; 0xdc
 8006ba8:	049b      	lsls	r3, r3, #18
 8006baa:	4299      	cmp	r1, r3
 8006bac:	dc00      	bgt.n	8006bb0 <_strtod_l+0x870>
 8006bae:	e6a4      	b.n	80068fa <_strtod_l+0x5ba>
 8006bb0:	0030      	movs	r0, r6
 8006bb2:	0039      	movs	r1, r7
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	4b30      	ldr	r3, [pc, #192]	; (8006c78 <_strtod_l+0x938>)
 8006bb8:	f7fa fc24 	bl	8001404 <__aeabi_dmul>
 8006bbc:	0006      	movs	r6, r0
 8006bbe:	000f      	movs	r7, r1
 8006bc0:	4308      	orrs	r0, r1
 8006bc2:	d000      	beq.n	8006bc6 <_strtod_l+0x886>
 8006bc4:	e62f      	b.n	8006826 <_strtod_l+0x4e6>
 8006bc6:	2322      	movs	r3, #34	; 0x22
 8006bc8:	9a05      	ldr	r2, [sp, #20]
 8006bca:	6013      	str	r3, [r2, #0]
 8006bcc:	e62b      	b.n	8006826 <_strtod_l+0x4e6>
 8006bce:	234b      	movs	r3, #75	; 0x4b
 8006bd0:	1a9a      	subs	r2, r3, r2
 8006bd2:	3b4c      	subs	r3, #76	; 0x4c
 8006bd4:	4093      	lsls	r3, r2
 8006bd6:	4019      	ands	r1, r3
 8006bd8:	000f      	movs	r7, r1
 8006bda:	e6e0      	b.n	800699e <_strtod_l+0x65e>
 8006bdc:	2201      	movs	r2, #1
 8006bde:	4252      	negs	r2, r2
 8006be0:	409a      	lsls	r2, r3
 8006be2:	4016      	ands	r6, r2
 8006be4:	e6db      	b.n	800699e <_strtod_l+0x65e>
 8006be6:	4925      	ldr	r1, [pc, #148]	; (8006c7c <_strtod_l+0x93c>)
 8006be8:	1acb      	subs	r3, r1, r3
 8006bea:	0001      	movs	r1, r0
 8006bec:	4099      	lsls	r1, r3
 8006bee:	9110      	str	r1, [sp, #64]	; 0x40
 8006bf0:	e741      	b.n	8006a76 <_strtod_l+0x736>
 8006bf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bf4:	9920      	ldr	r1, [sp, #128]	; 0x80
 8006bf6:	9805      	ldr	r0, [sp, #20]
 8006bf8:	f001 ff00 	bl	80089fc <__lshift>
 8006bfc:	9020      	str	r0, [sp, #128]	; 0x80
 8006bfe:	2800      	cmp	r0, #0
 8006c00:	d000      	beq.n	8006c04 <_strtod_l+0x8c4>
 8006c02:	e76c      	b.n	8006ade <_strtod_l+0x79e>
 8006c04:	e606      	b.n	8006814 <_strtod_l+0x4d4>
 8006c06:	970c      	str	r7, [sp, #48]	; 0x30
 8006c08:	2800      	cmp	r0, #0
 8006c0a:	d176      	bne.n	8006cfa <_strtod_l+0x9ba>
 8006c0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c0e:	033b      	lsls	r3, r7, #12
 8006c10:	0b1b      	lsrs	r3, r3, #12
 8006c12:	2a00      	cmp	r2, #0
 8006c14:	d038      	beq.n	8006c88 <_strtod_l+0x948>
 8006c16:	4a1a      	ldr	r2, [pc, #104]	; (8006c80 <_strtod_l+0x940>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d138      	bne.n	8006c8e <_strtod_l+0x94e>
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	9b08      	ldr	r3, [sp, #32]
 8006c20:	4252      	negs	r2, r2
 8006c22:	0031      	movs	r1, r6
 8006c24:	0010      	movs	r0, r2
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00b      	beq.n	8006c42 <_strtod_l+0x902>
 8006c2a:	24d4      	movs	r4, #212	; 0xd4
 8006c2c:	4b11      	ldr	r3, [pc, #68]	; (8006c74 <_strtod_l+0x934>)
 8006c2e:	0010      	movs	r0, r2
 8006c30:	403b      	ands	r3, r7
 8006c32:	04e4      	lsls	r4, r4, #19
 8006c34:	42a3      	cmp	r3, r4
 8006c36:	d804      	bhi.n	8006c42 <_strtod_l+0x902>
 8006c38:	306c      	adds	r0, #108	; 0x6c
 8006c3a:	0d1b      	lsrs	r3, r3, #20
 8006c3c:	1ac3      	subs	r3, r0, r3
 8006c3e:	409a      	lsls	r2, r3
 8006c40:	0010      	movs	r0, r2
 8006c42:	4281      	cmp	r1, r0
 8006c44:	d123      	bne.n	8006c8e <_strtod_l+0x94e>
 8006c46:	4b0f      	ldr	r3, [pc, #60]	; (8006c84 <_strtod_l+0x944>)
 8006c48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d102      	bne.n	8006c54 <_strtod_l+0x914>
 8006c4e:	1c4b      	adds	r3, r1, #1
 8006c50:	d100      	bne.n	8006c54 <_strtod_l+0x914>
 8006c52:	e5df      	b.n	8006814 <_strtod_l+0x4d4>
 8006c54:	4b07      	ldr	r3, [pc, #28]	; (8006c74 <_strtod_l+0x934>)
 8006c56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c58:	2600      	movs	r6, #0
 8006c5a:	401a      	ands	r2, r3
 8006c5c:	0013      	movs	r3, r2
 8006c5e:	2280      	movs	r2, #128	; 0x80
 8006c60:	0352      	lsls	r2, r2, #13
 8006c62:	189f      	adds	r7, r3, r2
 8006c64:	9b08      	ldr	r3, [sp, #32]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1a2      	bne.n	8006bb0 <_strtod_l+0x870>
 8006c6a:	e5dc      	b.n	8006826 <_strtod_l+0x4e6>
 8006c6c:	0800a168 	.word	0x0800a168
 8006c70:	fffffc02 	.word	0xfffffc02
 8006c74:	7ff00000 	.word	0x7ff00000
 8006c78:	39500000 	.word	0x39500000
 8006c7c:	fffffbe2 	.word	0xfffffbe2
 8006c80:	000fffff 	.word	0x000fffff
 8006c84:	7fefffff 	.word	0x7fefffff
 8006c88:	4333      	orrs	r3, r6
 8006c8a:	d100      	bne.n	8006c8e <_strtod_l+0x94e>
 8006c8c:	e77e      	b.n	8006b8c <_strtod_l+0x84c>
 8006c8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d01d      	beq.n	8006cd0 <_strtod_l+0x990>
 8006c94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c96:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006c98:	4213      	tst	r3, r2
 8006c9a:	d0e3      	beq.n	8006c64 <_strtod_l+0x924>
 8006c9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c9e:	0030      	movs	r0, r6
 8006ca0:	0039      	movs	r1, r7
 8006ca2:	9a08      	ldr	r2, [sp, #32]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d017      	beq.n	8006cd8 <_strtod_l+0x998>
 8006ca8:	f7ff fb32 	bl	8006310 <sulp>
 8006cac:	0002      	movs	r2, r0
 8006cae:	000b      	movs	r3, r1
 8006cb0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006cb2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006cb4:	f7f9 fc68 	bl	8000588 <__aeabi_dadd>
 8006cb8:	0006      	movs	r6, r0
 8006cba:	000f      	movs	r7, r1
 8006cbc:	e7d2      	b.n	8006c64 <_strtod_l+0x924>
 8006cbe:	2601      	movs	r6, #1
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	4a99      	ldr	r2, [pc, #612]	; (8006f28 <_strtod_l+0xbe8>)
 8006cc4:	4276      	negs	r6, r6
 8006cc6:	189b      	adds	r3, r3, r2
 8006cc8:	4a98      	ldr	r2, [pc, #608]	; (8006f2c <_strtod_l+0xbec>)
 8006cca:	431a      	orrs	r2, r3
 8006ccc:	0017      	movs	r7, r2
 8006cce:	e7c9      	b.n	8006c64 <_strtod_l+0x924>
 8006cd0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006cd2:	4233      	tst	r3, r6
 8006cd4:	d0c6      	beq.n	8006c64 <_strtod_l+0x924>
 8006cd6:	e7e1      	b.n	8006c9c <_strtod_l+0x95c>
 8006cd8:	f7ff fb1a 	bl	8006310 <sulp>
 8006cdc:	0002      	movs	r2, r0
 8006cde:	000b      	movs	r3, r1
 8006ce0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006ce2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006ce4:	f7fa fdfa 	bl	80018dc <__aeabi_dsub>
 8006ce8:	2200      	movs	r2, #0
 8006cea:	2300      	movs	r3, #0
 8006cec:	0006      	movs	r6, r0
 8006cee:	000f      	movs	r7, r1
 8006cf0:	f7f9 fbac 	bl	800044c <__aeabi_dcmpeq>
 8006cf4:	2800      	cmp	r0, #0
 8006cf6:	d0b5      	beq.n	8006c64 <_strtod_l+0x924>
 8006cf8:	e5ff      	b.n	80068fa <_strtod_l+0x5ba>
 8006cfa:	9907      	ldr	r1, [sp, #28]
 8006cfc:	9806      	ldr	r0, [sp, #24]
 8006cfe:	f002 f877 	bl	8008df0 <__ratio>
 8006d02:	2380      	movs	r3, #128	; 0x80
 8006d04:	2200      	movs	r2, #0
 8006d06:	05db      	lsls	r3, r3, #23
 8006d08:	0004      	movs	r4, r0
 8006d0a:	000d      	movs	r5, r1
 8006d0c:	f7f9 fbae 	bl	800046c <__aeabi_dcmple>
 8006d10:	2800      	cmp	r0, #0
 8006d12:	d075      	beq.n	8006e00 <_strtod_l+0xac0>
 8006d14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d047      	beq.n	8006daa <_strtod_l+0xa6a>
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	4c84      	ldr	r4, [pc, #528]	; (8006f30 <_strtod_l+0xbf0>)
 8006d1e:	2500      	movs	r5, #0
 8006d20:	9310      	str	r3, [sp, #64]	; 0x40
 8006d22:	9411      	str	r4, [sp, #68]	; 0x44
 8006d24:	4c82      	ldr	r4, [pc, #520]	; (8006f30 <_strtod_l+0xbf0>)
 8006d26:	4a83      	ldr	r2, [pc, #524]	; (8006f34 <_strtod_l+0xbf4>)
 8006d28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	9314      	str	r3, [sp, #80]	; 0x50
 8006d2e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006d30:	4b81      	ldr	r3, [pc, #516]	; (8006f38 <_strtod_l+0xbf8>)
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d000      	beq.n	8006d38 <_strtod_l+0x9f8>
 8006d36:	e0ac      	b.n	8006e92 <_strtod_l+0xb52>
 8006d38:	4a80      	ldr	r2, [pc, #512]	; (8006f3c <_strtod_l+0xbfc>)
 8006d3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d3c:	4694      	mov	ip, r2
 8006d3e:	4463      	add	r3, ip
 8006d40:	001f      	movs	r7, r3
 8006d42:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006d44:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d46:	0030      	movs	r0, r6
 8006d48:	0039      	movs	r1, r7
 8006d4a:	920c      	str	r2, [sp, #48]	; 0x30
 8006d4c:	930d      	str	r3, [sp, #52]	; 0x34
 8006d4e:	f001 ff77 	bl	8008c40 <__ulp>
 8006d52:	0002      	movs	r2, r0
 8006d54:	000b      	movs	r3, r1
 8006d56:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006d58:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006d5a:	f7fa fb53 	bl	8001404 <__aeabi_dmul>
 8006d5e:	0032      	movs	r2, r6
 8006d60:	003b      	movs	r3, r7
 8006d62:	f7f9 fc11 	bl	8000588 <__aeabi_dadd>
 8006d66:	4a73      	ldr	r2, [pc, #460]	; (8006f34 <_strtod_l+0xbf4>)
 8006d68:	4b75      	ldr	r3, [pc, #468]	; (8006f40 <_strtod_l+0xc00>)
 8006d6a:	0006      	movs	r6, r0
 8006d6c:	400a      	ands	r2, r1
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d95e      	bls.n	8006e30 <_strtod_l+0xaf0>
 8006d72:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006d74:	4b73      	ldr	r3, [pc, #460]	; (8006f44 <_strtod_l+0xc04>)
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d103      	bne.n	8006d82 <_strtod_l+0xa42>
 8006d7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	d100      	bne.n	8006d82 <_strtod_l+0xa42>
 8006d80:	e548      	b.n	8006814 <_strtod_l+0x4d4>
 8006d82:	2601      	movs	r6, #1
 8006d84:	4f6f      	ldr	r7, [pc, #444]	; (8006f44 <_strtod_l+0xc04>)
 8006d86:	4276      	negs	r6, r6
 8006d88:	9920      	ldr	r1, [sp, #128]	; 0x80
 8006d8a:	9805      	ldr	r0, [sp, #20]
 8006d8c:	f001 fc18 	bl	80085c0 <_Bfree>
 8006d90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d92:	9805      	ldr	r0, [sp, #20]
 8006d94:	f001 fc14 	bl	80085c0 <_Bfree>
 8006d98:	9907      	ldr	r1, [sp, #28]
 8006d9a:	9805      	ldr	r0, [sp, #20]
 8006d9c:	f001 fc10 	bl	80085c0 <_Bfree>
 8006da0:	9906      	ldr	r1, [sp, #24]
 8006da2:	9805      	ldr	r0, [sp, #20]
 8006da4:	f001 fc0c 	bl	80085c0 <_Bfree>
 8006da8:	e61d      	b.n	80069e6 <_strtod_l+0x6a6>
 8006daa:	2e00      	cmp	r6, #0
 8006dac:	d11c      	bne.n	8006de8 <_strtod_l+0xaa8>
 8006dae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006db0:	031b      	lsls	r3, r3, #12
 8006db2:	d11f      	bne.n	8006df4 <_strtod_l+0xab4>
 8006db4:	2200      	movs	r2, #0
 8006db6:	0020      	movs	r0, r4
 8006db8:	0029      	movs	r1, r5
 8006dba:	4b5d      	ldr	r3, [pc, #372]	; (8006f30 <_strtod_l+0xbf0>)
 8006dbc:	f7f9 fb4c 	bl	8000458 <__aeabi_dcmplt>
 8006dc0:	2800      	cmp	r0, #0
 8006dc2:	d11a      	bne.n	8006dfa <_strtod_l+0xaba>
 8006dc4:	0020      	movs	r0, r4
 8006dc6:	0029      	movs	r1, r5
 8006dc8:	2200      	movs	r2, #0
 8006dca:	4b5f      	ldr	r3, [pc, #380]	; (8006f48 <_strtod_l+0xc08>)
 8006dcc:	f7fa fb1a 	bl	8001404 <__aeabi_dmul>
 8006dd0:	0005      	movs	r5, r0
 8006dd2:	000c      	movs	r4, r1
 8006dd4:	2380      	movs	r3, #128	; 0x80
 8006dd6:	061b      	lsls	r3, r3, #24
 8006dd8:	18e3      	adds	r3, r4, r3
 8006dda:	951c      	str	r5, [sp, #112]	; 0x70
 8006ddc:	931d      	str	r3, [sp, #116]	; 0x74
 8006dde:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006de0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006de2:	9210      	str	r2, [sp, #64]	; 0x40
 8006de4:	9311      	str	r3, [sp, #68]	; 0x44
 8006de6:	e79e      	b.n	8006d26 <_strtod_l+0x9e6>
 8006de8:	2e01      	cmp	r6, #1
 8006dea:	d103      	bne.n	8006df4 <_strtod_l+0xab4>
 8006dec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d100      	bne.n	8006df4 <_strtod_l+0xab4>
 8006df2:	e582      	b.n	80068fa <_strtod_l+0x5ba>
 8006df4:	2300      	movs	r3, #0
 8006df6:	4c55      	ldr	r4, [pc, #340]	; (8006f4c <_strtod_l+0xc0c>)
 8006df8:	e791      	b.n	8006d1e <_strtod_l+0x9de>
 8006dfa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006dfc:	4c52      	ldr	r4, [pc, #328]	; (8006f48 <_strtod_l+0xc08>)
 8006dfe:	e7e9      	b.n	8006dd4 <_strtod_l+0xa94>
 8006e00:	2200      	movs	r2, #0
 8006e02:	0020      	movs	r0, r4
 8006e04:	0029      	movs	r1, r5
 8006e06:	4b50      	ldr	r3, [pc, #320]	; (8006f48 <_strtod_l+0xc08>)
 8006e08:	f7fa fafc 	bl	8001404 <__aeabi_dmul>
 8006e0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006e0e:	0005      	movs	r5, r0
 8006e10:	000b      	movs	r3, r1
 8006e12:	000c      	movs	r4, r1
 8006e14:	2a00      	cmp	r2, #0
 8006e16:	d107      	bne.n	8006e28 <_strtod_l+0xae8>
 8006e18:	2280      	movs	r2, #128	; 0x80
 8006e1a:	0612      	lsls	r2, r2, #24
 8006e1c:	188b      	adds	r3, r1, r2
 8006e1e:	9016      	str	r0, [sp, #88]	; 0x58
 8006e20:	9317      	str	r3, [sp, #92]	; 0x5c
 8006e22:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006e24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e26:	e7dc      	b.n	8006de2 <_strtod_l+0xaa2>
 8006e28:	0002      	movs	r2, r0
 8006e2a:	9216      	str	r2, [sp, #88]	; 0x58
 8006e2c:	9317      	str	r3, [sp, #92]	; 0x5c
 8006e2e:	e7f8      	b.n	8006e22 <_strtod_l+0xae2>
 8006e30:	23d4      	movs	r3, #212	; 0xd4
 8006e32:	049b      	lsls	r3, r3, #18
 8006e34:	18cf      	adds	r7, r1, r3
 8006e36:	9b08      	ldr	r3, [sp, #32]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1a5      	bne.n	8006d88 <_strtod_l+0xa48>
 8006e3c:	4b3d      	ldr	r3, [pc, #244]	; (8006f34 <_strtod_l+0xbf4>)
 8006e3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006e40:	403b      	ands	r3, r7
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d1a0      	bne.n	8006d88 <_strtod_l+0xa48>
 8006e46:	0028      	movs	r0, r5
 8006e48:	0021      	movs	r1, r4
 8006e4a:	f7f9 fb4b 	bl	80004e4 <__aeabi_d2lz>
 8006e4e:	f7f9 fb85 	bl	800055c <__aeabi_l2d>
 8006e52:	0002      	movs	r2, r0
 8006e54:	000b      	movs	r3, r1
 8006e56:	0028      	movs	r0, r5
 8006e58:	0021      	movs	r1, r4
 8006e5a:	f7fa fd3f 	bl	80018dc <__aeabi_dsub>
 8006e5e:	033b      	lsls	r3, r7, #12
 8006e60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006e62:	0b1b      	lsrs	r3, r3, #12
 8006e64:	4333      	orrs	r3, r6
 8006e66:	4313      	orrs	r3, r2
 8006e68:	0004      	movs	r4, r0
 8006e6a:	000d      	movs	r5, r1
 8006e6c:	4a38      	ldr	r2, [pc, #224]	; (8006f50 <_strtod_l+0xc10>)
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d055      	beq.n	8006f1e <_strtod_l+0xbde>
 8006e72:	4b38      	ldr	r3, [pc, #224]	; (8006f54 <_strtod_l+0xc14>)
 8006e74:	f7f9 faf0 	bl	8000458 <__aeabi_dcmplt>
 8006e78:	2800      	cmp	r0, #0
 8006e7a:	d000      	beq.n	8006e7e <_strtod_l+0xb3e>
 8006e7c:	e4d3      	b.n	8006826 <_strtod_l+0x4e6>
 8006e7e:	0020      	movs	r0, r4
 8006e80:	0029      	movs	r1, r5
 8006e82:	4a35      	ldr	r2, [pc, #212]	; (8006f58 <_strtod_l+0xc18>)
 8006e84:	4b30      	ldr	r3, [pc, #192]	; (8006f48 <_strtod_l+0xc08>)
 8006e86:	f7f9 fafb 	bl	8000480 <__aeabi_dcmpgt>
 8006e8a:	2800      	cmp	r0, #0
 8006e8c:	d100      	bne.n	8006e90 <_strtod_l+0xb50>
 8006e8e:	e77b      	b.n	8006d88 <_strtod_l+0xa48>
 8006e90:	e4c9      	b.n	8006826 <_strtod_l+0x4e6>
 8006e92:	9b08      	ldr	r3, [sp, #32]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d02b      	beq.n	8006ef0 <_strtod_l+0xbb0>
 8006e98:	23d4      	movs	r3, #212	; 0xd4
 8006e9a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006e9c:	04db      	lsls	r3, r3, #19
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d826      	bhi.n	8006ef0 <_strtod_l+0xbb0>
 8006ea2:	0028      	movs	r0, r5
 8006ea4:	0021      	movs	r1, r4
 8006ea6:	4a2d      	ldr	r2, [pc, #180]	; (8006f5c <_strtod_l+0xc1c>)
 8006ea8:	4b2d      	ldr	r3, [pc, #180]	; (8006f60 <_strtod_l+0xc20>)
 8006eaa:	f7f9 fadf 	bl	800046c <__aeabi_dcmple>
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	d017      	beq.n	8006ee2 <_strtod_l+0xba2>
 8006eb2:	0028      	movs	r0, r5
 8006eb4:	0021      	movs	r1, r4
 8006eb6:	f7f9 faf7 	bl	80004a8 <__aeabi_d2uiz>
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	d100      	bne.n	8006ec0 <_strtod_l+0xb80>
 8006ebe:	3001      	adds	r0, #1
 8006ec0:	f7fb f922 	bl	8002108 <__aeabi_ui2d>
 8006ec4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006ec6:	0005      	movs	r5, r0
 8006ec8:	000b      	movs	r3, r1
 8006eca:	000c      	movs	r4, r1
 8006ecc:	2a00      	cmp	r2, #0
 8006ece:	d122      	bne.n	8006f16 <_strtod_l+0xbd6>
 8006ed0:	2280      	movs	r2, #128	; 0x80
 8006ed2:	0612      	lsls	r2, r2, #24
 8006ed4:	188b      	adds	r3, r1, r2
 8006ed6:	9018      	str	r0, [sp, #96]	; 0x60
 8006ed8:	9319      	str	r3, [sp, #100]	; 0x64
 8006eda:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006edc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ede:	9210      	str	r2, [sp, #64]	; 0x40
 8006ee0:	9311      	str	r3, [sp, #68]	; 0x44
 8006ee2:	22d6      	movs	r2, #214	; 0xd6
 8006ee4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ee6:	04d2      	lsls	r2, r2, #19
 8006ee8:	189b      	adds	r3, r3, r2
 8006eea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006eec:	1a9b      	subs	r3, r3, r2
 8006eee:	9311      	str	r3, [sp, #68]	; 0x44
 8006ef0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006ef2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006ef4:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8006ef6:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8006ef8:	f001 fea2 	bl	8008c40 <__ulp>
 8006efc:	0002      	movs	r2, r0
 8006efe:	000b      	movs	r3, r1
 8006f00:	0030      	movs	r0, r6
 8006f02:	0039      	movs	r1, r7
 8006f04:	f7fa fa7e 	bl	8001404 <__aeabi_dmul>
 8006f08:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006f0a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f0c:	f7f9 fb3c 	bl	8000588 <__aeabi_dadd>
 8006f10:	0006      	movs	r6, r0
 8006f12:	000f      	movs	r7, r1
 8006f14:	e78f      	b.n	8006e36 <_strtod_l+0xaf6>
 8006f16:	0002      	movs	r2, r0
 8006f18:	9218      	str	r2, [sp, #96]	; 0x60
 8006f1a:	9319      	str	r3, [sp, #100]	; 0x64
 8006f1c:	e7dd      	b.n	8006eda <_strtod_l+0xb9a>
 8006f1e:	4b11      	ldr	r3, [pc, #68]	; (8006f64 <_strtod_l+0xc24>)
 8006f20:	f7f9 fa9a 	bl	8000458 <__aeabi_dcmplt>
 8006f24:	e7b1      	b.n	8006e8a <_strtod_l+0xb4a>
 8006f26:	46c0      	nop			; (mov r8, r8)
 8006f28:	fff00000 	.word	0xfff00000
 8006f2c:	000fffff 	.word	0x000fffff
 8006f30:	3ff00000 	.word	0x3ff00000
 8006f34:	7ff00000 	.word	0x7ff00000
 8006f38:	7fe00000 	.word	0x7fe00000
 8006f3c:	fcb00000 	.word	0xfcb00000
 8006f40:	7c9fffff 	.word	0x7c9fffff
 8006f44:	7fefffff 	.word	0x7fefffff
 8006f48:	3fe00000 	.word	0x3fe00000
 8006f4c:	bff00000 	.word	0xbff00000
 8006f50:	94a03595 	.word	0x94a03595
 8006f54:	3fdfffff 	.word	0x3fdfffff
 8006f58:	35afe535 	.word	0x35afe535
 8006f5c:	ffc00000 	.word	0xffc00000
 8006f60:	41dfffff 	.word	0x41dfffff
 8006f64:	3fcfffff 	.word	0x3fcfffff

08006f68 <_strtod_r>:
 8006f68:	b510      	push	{r4, lr}
 8006f6a:	4b02      	ldr	r3, [pc, #8]	; (8006f74 <_strtod_r+0xc>)
 8006f6c:	f7ff f9e8 	bl	8006340 <_strtod_l>
 8006f70:	bd10      	pop	{r4, pc}
 8006f72:	46c0      	nop			; (mov r8, r8)
 8006f74:	20000074 	.word	0x20000074

08006f78 <_strtol_l.constprop.0>:
 8006f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f7a:	b087      	sub	sp, #28
 8006f7c:	001e      	movs	r6, r3
 8006f7e:	9005      	str	r0, [sp, #20]
 8006f80:	9101      	str	r1, [sp, #4]
 8006f82:	9202      	str	r2, [sp, #8]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d045      	beq.n	8007014 <_strtol_l.constprop.0+0x9c>
 8006f88:	000b      	movs	r3, r1
 8006f8a:	2e24      	cmp	r6, #36	; 0x24
 8006f8c:	d842      	bhi.n	8007014 <_strtol_l.constprop.0+0x9c>
 8006f8e:	4a3f      	ldr	r2, [pc, #252]	; (800708c <_strtol_l.constprop.0+0x114>)
 8006f90:	2108      	movs	r1, #8
 8006f92:	4694      	mov	ip, r2
 8006f94:	001a      	movs	r2, r3
 8006f96:	4660      	mov	r0, ip
 8006f98:	7814      	ldrb	r4, [r2, #0]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	5d00      	ldrb	r0, [r0, r4]
 8006f9e:	001d      	movs	r5, r3
 8006fa0:	0007      	movs	r7, r0
 8006fa2:	400f      	ands	r7, r1
 8006fa4:	4208      	tst	r0, r1
 8006fa6:	d1f5      	bne.n	8006f94 <_strtol_l.constprop.0+0x1c>
 8006fa8:	2c2d      	cmp	r4, #45	; 0x2d
 8006faa:	d13a      	bne.n	8007022 <_strtol_l.constprop.0+0xaa>
 8006fac:	2701      	movs	r7, #1
 8006fae:	781c      	ldrb	r4, [r3, #0]
 8006fb0:	1c95      	adds	r5, r2, #2
 8006fb2:	2e00      	cmp	r6, #0
 8006fb4:	d065      	beq.n	8007082 <_strtol_l.constprop.0+0x10a>
 8006fb6:	2e10      	cmp	r6, #16
 8006fb8:	d109      	bne.n	8006fce <_strtol_l.constprop.0+0x56>
 8006fba:	2c30      	cmp	r4, #48	; 0x30
 8006fbc:	d107      	bne.n	8006fce <_strtol_l.constprop.0+0x56>
 8006fbe:	2220      	movs	r2, #32
 8006fc0:	782b      	ldrb	r3, [r5, #0]
 8006fc2:	4393      	bics	r3, r2
 8006fc4:	2b58      	cmp	r3, #88	; 0x58
 8006fc6:	d157      	bne.n	8007078 <_strtol_l.constprop.0+0x100>
 8006fc8:	2610      	movs	r6, #16
 8006fca:	786c      	ldrb	r4, [r5, #1]
 8006fcc:	3502      	adds	r5, #2
 8006fce:	4b30      	ldr	r3, [pc, #192]	; (8007090 <_strtol_l.constprop.0+0x118>)
 8006fd0:	0031      	movs	r1, r6
 8006fd2:	18fb      	adds	r3, r7, r3
 8006fd4:	0018      	movs	r0, r3
 8006fd6:	9303      	str	r3, [sp, #12]
 8006fd8:	f7f9 f938 	bl	800024c <__aeabi_uidivmod>
 8006fdc:	2300      	movs	r3, #0
 8006fde:	2201      	movs	r2, #1
 8006fe0:	4684      	mov	ip, r0
 8006fe2:	0018      	movs	r0, r3
 8006fe4:	9104      	str	r1, [sp, #16]
 8006fe6:	4252      	negs	r2, r2
 8006fe8:	0021      	movs	r1, r4
 8006fea:	3930      	subs	r1, #48	; 0x30
 8006fec:	2909      	cmp	r1, #9
 8006fee:	d81d      	bhi.n	800702c <_strtol_l.constprop.0+0xb4>
 8006ff0:	000c      	movs	r4, r1
 8006ff2:	42a6      	cmp	r6, r4
 8006ff4:	dd28      	ble.n	8007048 <_strtol_l.constprop.0+0xd0>
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	db24      	blt.n	8007044 <_strtol_l.constprop.0+0xcc>
 8006ffa:	0013      	movs	r3, r2
 8006ffc:	4584      	cmp	ip, r0
 8006ffe:	d306      	bcc.n	800700e <_strtol_l.constprop.0+0x96>
 8007000:	d102      	bne.n	8007008 <_strtol_l.constprop.0+0x90>
 8007002:	9904      	ldr	r1, [sp, #16]
 8007004:	42a1      	cmp	r1, r4
 8007006:	db02      	blt.n	800700e <_strtol_l.constprop.0+0x96>
 8007008:	2301      	movs	r3, #1
 800700a:	4370      	muls	r0, r6
 800700c:	1820      	adds	r0, r4, r0
 800700e:	782c      	ldrb	r4, [r5, #0]
 8007010:	3501      	adds	r5, #1
 8007012:	e7e9      	b.n	8006fe8 <_strtol_l.constprop.0+0x70>
 8007014:	f7fe fab0 	bl	8005578 <__errno>
 8007018:	2316      	movs	r3, #22
 800701a:	6003      	str	r3, [r0, #0]
 800701c:	2000      	movs	r0, #0
 800701e:	b007      	add	sp, #28
 8007020:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007022:	2c2b      	cmp	r4, #43	; 0x2b
 8007024:	d1c5      	bne.n	8006fb2 <_strtol_l.constprop.0+0x3a>
 8007026:	781c      	ldrb	r4, [r3, #0]
 8007028:	1c95      	adds	r5, r2, #2
 800702a:	e7c2      	b.n	8006fb2 <_strtol_l.constprop.0+0x3a>
 800702c:	0021      	movs	r1, r4
 800702e:	3941      	subs	r1, #65	; 0x41
 8007030:	2919      	cmp	r1, #25
 8007032:	d801      	bhi.n	8007038 <_strtol_l.constprop.0+0xc0>
 8007034:	3c37      	subs	r4, #55	; 0x37
 8007036:	e7dc      	b.n	8006ff2 <_strtol_l.constprop.0+0x7a>
 8007038:	0021      	movs	r1, r4
 800703a:	3961      	subs	r1, #97	; 0x61
 800703c:	2919      	cmp	r1, #25
 800703e:	d803      	bhi.n	8007048 <_strtol_l.constprop.0+0xd0>
 8007040:	3c57      	subs	r4, #87	; 0x57
 8007042:	e7d6      	b.n	8006ff2 <_strtol_l.constprop.0+0x7a>
 8007044:	0013      	movs	r3, r2
 8007046:	e7e2      	b.n	800700e <_strtol_l.constprop.0+0x96>
 8007048:	2b00      	cmp	r3, #0
 800704a:	da09      	bge.n	8007060 <_strtol_l.constprop.0+0xe8>
 800704c:	2322      	movs	r3, #34	; 0x22
 800704e:	9a05      	ldr	r2, [sp, #20]
 8007050:	9803      	ldr	r0, [sp, #12]
 8007052:	6013      	str	r3, [r2, #0]
 8007054:	9b02      	ldr	r3, [sp, #8]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d0e1      	beq.n	800701e <_strtol_l.constprop.0+0xa6>
 800705a:	1e6b      	subs	r3, r5, #1
 800705c:	9301      	str	r3, [sp, #4]
 800705e:	e007      	b.n	8007070 <_strtol_l.constprop.0+0xf8>
 8007060:	2f00      	cmp	r7, #0
 8007062:	d000      	beq.n	8007066 <_strtol_l.constprop.0+0xee>
 8007064:	4240      	negs	r0, r0
 8007066:	9a02      	ldr	r2, [sp, #8]
 8007068:	2a00      	cmp	r2, #0
 800706a:	d0d8      	beq.n	800701e <_strtol_l.constprop.0+0xa6>
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1f4      	bne.n	800705a <_strtol_l.constprop.0+0xe2>
 8007070:	9b02      	ldr	r3, [sp, #8]
 8007072:	9a01      	ldr	r2, [sp, #4]
 8007074:	601a      	str	r2, [r3, #0]
 8007076:	e7d2      	b.n	800701e <_strtol_l.constprop.0+0xa6>
 8007078:	2430      	movs	r4, #48	; 0x30
 800707a:	2e00      	cmp	r6, #0
 800707c:	d1a7      	bne.n	8006fce <_strtol_l.constprop.0+0x56>
 800707e:	3608      	adds	r6, #8
 8007080:	e7a5      	b.n	8006fce <_strtol_l.constprop.0+0x56>
 8007082:	2c30      	cmp	r4, #48	; 0x30
 8007084:	d09b      	beq.n	8006fbe <_strtol_l.constprop.0+0x46>
 8007086:	260a      	movs	r6, #10
 8007088:	e7a1      	b.n	8006fce <_strtol_l.constprop.0+0x56>
 800708a:	46c0      	nop			; (mov r8, r8)
 800708c:	0800a191 	.word	0x0800a191
 8007090:	7fffffff 	.word	0x7fffffff

08007094 <_strtol_r>:
 8007094:	b510      	push	{r4, lr}
 8007096:	f7ff ff6f 	bl	8006f78 <_strtol_l.constprop.0>
 800709a:	bd10      	pop	{r4, pc}

0800709c <quorem>:
 800709c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800709e:	0006      	movs	r6, r0
 80070a0:	690b      	ldr	r3, [r1, #16]
 80070a2:	6932      	ldr	r2, [r6, #16]
 80070a4:	b087      	sub	sp, #28
 80070a6:	2000      	movs	r0, #0
 80070a8:	9103      	str	r1, [sp, #12]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	db65      	blt.n	800717a <quorem+0xde>
 80070ae:	3b01      	subs	r3, #1
 80070b0:	009c      	lsls	r4, r3, #2
 80070b2:	9300      	str	r3, [sp, #0]
 80070b4:	000b      	movs	r3, r1
 80070b6:	3314      	adds	r3, #20
 80070b8:	9305      	str	r3, [sp, #20]
 80070ba:	191b      	adds	r3, r3, r4
 80070bc:	9304      	str	r3, [sp, #16]
 80070be:	0033      	movs	r3, r6
 80070c0:	3314      	adds	r3, #20
 80070c2:	9302      	str	r3, [sp, #8]
 80070c4:	191c      	adds	r4, r3, r4
 80070c6:	9b04      	ldr	r3, [sp, #16]
 80070c8:	6827      	ldr	r7, [r4, #0]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	0038      	movs	r0, r7
 80070ce:	1c5d      	adds	r5, r3, #1
 80070d0:	0029      	movs	r1, r5
 80070d2:	9301      	str	r3, [sp, #4]
 80070d4:	f7f9 f834 	bl	8000140 <__udivsi3>
 80070d8:	9001      	str	r0, [sp, #4]
 80070da:	42af      	cmp	r7, r5
 80070dc:	d324      	bcc.n	8007128 <quorem+0x8c>
 80070de:	2500      	movs	r5, #0
 80070e0:	46ac      	mov	ip, r5
 80070e2:	9802      	ldr	r0, [sp, #8]
 80070e4:	9f05      	ldr	r7, [sp, #20]
 80070e6:	cf08      	ldmia	r7!, {r3}
 80070e8:	9a01      	ldr	r2, [sp, #4]
 80070ea:	b299      	uxth	r1, r3
 80070ec:	4351      	muls	r1, r2
 80070ee:	0c1b      	lsrs	r3, r3, #16
 80070f0:	4353      	muls	r3, r2
 80070f2:	1949      	adds	r1, r1, r5
 80070f4:	0c0a      	lsrs	r2, r1, #16
 80070f6:	189b      	adds	r3, r3, r2
 80070f8:	6802      	ldr	r2, [r0, #0]
 80070fa:	b289      	uxth	r1, r1
 80070fc:	b292      	uxth	r2, r2
 80070fe:	4462      	add	r2, ip
 8007100:	1a52      	subs	r2, r2, r1
 8007102:	6801      	ldr	r1, [r0, #0]
 8007104:	0c1d      	lsrs	r5, r3, #16
 8007106:	0c09      	lsrs	r1, r1, #16
 8007108:	b29b      	uxth	r3, r3
 800710a:	1acb      	subs	r3, r1, r3
 800710c:	1411      	asrs	r1, r2, #16
 800710e:	185b      	adds	r3, r3, r1
 8007110:	1419      	asrs	r1, r3, #16
 8007112:	b292      	uxth	r2, r2
 8007114:	041b      	lsls	r3, r3, #16
 8007116:	431a      	orrs	r2, r3
 8007118:	9b04      	ldr	r3, [sp, #16]
 800711a:	468c      	mov	ip, r1
 800711c:	c004      	stmia	r0!, {r2}
 800711e:	42bb      	cmp	r3, r7
 8007120:	d2e1      	bcs.n	80070e6 <quorem+0x4a>
 8007122:	6823      	ldr	r3, [r4, #0]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d030      	beq.n	800718a <quorem+0xee>
 8007128:	0030      	movs	r0, r6
 800712a:	9903      	ldr	r1, [sp, #12]
 800712c:	f001 fcd4 	bl	8008ad8 <__mcmp>
 8007130:	2800      	cmp	r0, #0
 8007132:	db21      	blt.n	8007178 <quorem+0xdc>
 8007134:	0030      	movs	r0, r6
 8007136:	2400      	movs	r4, #0
 8007138:	9b01      	ldr	r3, [sp, #4]
 800713a:	9903      	ldr	r1, [sp, #12]
 800713c:	3301      	adds	r3, #1
 800713e:	9301      	str	r3, [sp, #4]
 8007140:	3014      	adds	r0, #20
 8007142:	3114      	adds	r1, #20
 8007144:	6803      	ldr	r3, [r0, #0]
 8007146:	c920      	ldmia	r1!, {r5}
 8007148:	b29a      	uxth	r2, r3
 800714a:	1914      	adds	r4, r2, r4
 800714c:	b2aa      	uxth	r2, r5
 800714e:	1aa2      	subs	r2, r4, r2
 8007150:	0c1b      	lsrs	r3, r3, #16
 8007152:	0c2d      	lsrs	r5, r5, #16
 8007154:	1414      	asrs	r4, r2, #16
 8007156:	1b5b      	subs	r3, r3, r5
 8007158:	191b      	adds	r3, r3, r4
 800715a:	141c      	asrs	r4, r3, #16
 800715c:	b292      	uxth	r2, r2
 800715e:	041b      	lsls	r3, r3, #16
 8007160:	4313      	orrs	r3, r2
 8007162:	c008      	stmia	r0!, {r3}
 8007164:	9b04      	ldr	r3, [sp, #16]
 8007166:	428b      	cmp	r3, r1
 8007168:	d2ec      	bcs.n	8007144 <quorem+0xa8>
 800716a:	9b00      	ldr	r3, [sp, #0]
 800716c:	9a02      	ldr	r2, [sp, #8]
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	18d3      	adds	r3, r2, r3
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	2a00      	cmp	r2, #0
 8007176:	d015      	beq.n	80071a4 <quorem+0x108>
 8007178:	9801      	ldr	r0, [sp, #4]
 800717a:	b007      	add	sp, #28
 800717c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800717e:	6823      	ldr	r3, [r4, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d106      	bne.n	8007192 <quorem+0xf6>
 8007184:	9b00      	ldr	r3, [sp, #0]
 8007186:	3b01      	subs	r3, #1
 8007188:	9300      	str	r3, [sp, #0]
 800718a:	9b02      	ldr	r3, [sp, #8]
 800718c:	3c04      	subs	r4, #4
 800718e:	42a3      	cmp	r3, r4
 8007190:	d3f5      	bcc.n	800717e <quorem+0xe2>
 8007192:	9b00      	ldr	r3, [sp, #0]
 8007194:	6133      	str	r3, [r6, #16]
 8007196:	e7c7      	b.n	8007128 <quorem+0x8c>
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	2a00      	cmp	r2, #0
 800719c:	d106      	bne.n	80071ac <quorem+0x110>
 800719e:	9a00      	ldr	r2, [sp, #0]
 80071a0:	3a01      	subs	r2, #1
 80071a2:	9200      	str	r2, [sp, #0]
 80071a4:	9a02      	ldr	r2, [sp, #8]
 80071a6:	3b04      	subs	r3, #4
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d3f5      	bcc.n	8007198 <quorem+0xfc>
 80071ac:	9b00      	ldr	r3, [sp, #0]
 80071ae:	6133      	str	r3, [r6, #16]
 80071b0:	e7e2      	b.n	8007178 <quorem+0xdc>
	...

080071b4 <_dtoa_r>:
 80071b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071b6:	b09d      	sub	sp, #116	; 0x74
 80071b8:	9202      	str	r2, [sp, #8]
 80071ba:	9303      	str	r3, [sp, #12]
 80071bc:	9b02      	ldr	r3, [sp, #8]
 80071be:	9c03      	ldr	r4, [sp, #12]
 80071c0:	9308      	str	r3, [sp, #32]
 80071c2:	9409      	str	r4, [sp, #36]	; 0x24
 80071c4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80071c6:	0007      	movs	r7, r0
 80071c8:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80071ca:	2c00      	cmp	r4, #0
 80071cc:	d10e      	bne.n	80071ec <_dtoa_r+0x38>
 80071ce:	2010      	movs	r0, #16
 80071d0:	f001 f982 	bl	80084d8 <malloc>
 80071d4:	1e02      	subs	r2, r0, #0
 80071d6:	6278      	str	r0, [r7, #36]	; 0x24
 80071d8:	d104      	bne.n	80071e4 <_dtoa_r+0x30>
 80071da:	21ea      	movs	r1, #234	; 0xea
 80071dc:	4bc7      	ldr	r3, [pc, #796]	; (80074fc <_dtoa_r+0x348>)
 80071de:	48c8      	ldr	r0, [pc, #800]	; (8007500 <_dtoa_r+0x34c>)
 80071e0:	f002 f91c 	bl	800941c <__assert_func>
 80071e4:	6044      	str	r4, [r0, #4]
 80071e6:	6084      	str	r4, [r0, #8]
 80071e8:	6004      	str	r4, [r0, #0]
 80071ea:	60c4      	str	r4, [r0, #12]
 80071ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ee:	6819      	ldr	r1, [r3, #0]
 80071f0:	2900      	cmp	r1, #0
 80071f2:	d00a      	beq.n	800720a <_dtoa_r+0x56>
 80071f4:	685a      	ldr	r2, [r3, #4]
 80071f6:	2301      	movs	r3, #1
 80071f8:	4093      	lsls	r3, r2
 80071fa:	604a      	str	r2, [r1, #4]
 80071fc:	608b      	str	r3, [r1, #8]
 80071fe:	0038      	movs	r0, r7
 8007200:	f001 f9de 	bl	80085c0 <_Bfree>
 8007204:	2200      	movs	r2, #0
 8007206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007208:	601a      	str	r2, [r3, #0]
 800720a:	9b03      	ldr	r3, [sp, #12]
 800720c:	2b00      	cmp	r3, #0
 800720e:	da20      	bge.n	8007252 <_dtoa_r+0x9e>
 8007210:	2301      	movs	r3, #1
 8007212:	602b      	str	r3, [r5, #0]
 8007214:	9b03      	ldr	r3, [sp, #12]
 8007216:	005b      	lsls	r3, r3, #1
 8007218:	085b      	lsrs	r3, r3, #1
 800721a:	9309      	str	r3, [sp, #36]	; 0x24
 800721c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800721e:	4bb9      	ldr	r3, [pc, #740]	; (8007504 <_dtoa_r+0x350>)
 8007220:	4ab8      	ldr	r2, [pc, #736]	; (8007504 <_dtoa_r+0x350>)
 8007222:	402b      	ands	r3, r5
 8007224:	4293      	cmp	r3, r2
 8007226:	d117      	bne.n	8007258 <_dtoa_r+0xa4>
 8007228:	4bb7      	ldr	r3, [pc, #732]	; (8007508 <_dtoa_r+0x354>)
 800722a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800722c:	0328      	lsls	r0, r5, #12
 800722e:	6013      	str	r3, [r2, #0]
 8007230:	9b02      	ldr	r3, [sp, #8]
 8007232:	0b00      	lsrs	r0, r0, #12
 8007234:	4318      	orrs	r0, r3
 8007236:	d101      	bne.n	800723c <_dtoa_r+0x88>
 8007238:	f000 fdbf 	bl	8007dba <_dtoa_r+0xc06>
 800723c:	48b3      	ldr	r0, [pc, #716]	; (800750c <_dtoa_r+0x358>)
 800723e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007240:	9006      	str	r0, [sp, #24]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d002      	beq.n	800724c <_dtoa_r+0x98>
 8007246:	4bb2      	ldr	r3, [pc, #712]	; (8007510 <_dtoa_r+0x35c>)
 8007248:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800724a:	6013      	str	r3, [r2, #0]
 800724c:	9806      	ldr	r0, [sp, #24]
 800724e:	b01d      	add	sp, #116	; 0x74
 8007250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007252:	2300      	movs	r3, #0
 8007254:	602b      	str	r3, [r5, #0]
 8007256:	e7e1      	b.n	800721c <_dtoa_r+0x68>
 8007258:	9b08      	ldr	r3, [sp, #32]
 800725a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800725c:	9312      	str	r3, [sp, #72]	; 0x48
 800725e:	9413      	str	r4, [sp, #76]	; 0x4c
 8007260:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007262:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007264:	2200      	movs	r2, #0
 8007266:	2300      	movs	r3, #0
 8007268:	f7f9 f8f0 	bl	800044c <__aeabi_dcmpeq>
 800726c:	1e04      	subs	r4, r0, #0
 800726e:	d009      	beq.n	8007284 <_dtoa_r+0xd0>
 8007270:	2301      	movs	r3, #1
 8007272:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007274:	6013      	str	r3, [r2, #0]
 8007276:	4ba7      	ldr	r3, [pc, #668]	; (8007514 <_dtoa_r+0x360>)
 8007278:	9306      	str	r3, [sp, #24]
 800727a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800727c:	2b00      	cmp	r3, #0
 800727e:	d0e5      	beq.n	800724c <_dtoa_r+0x98>
 8007280:	4ba5      	ldr	r3, [pc, #660]	; (8007518 <_dtoa_r+0x364>)
 8007282:	e7e1      	b.n	8007248 <_dtoa_r+0x94>
 8007284:	ab1a      	add	r3, sp, #104	; 0x68
 8007286:	9301      	str	r3, [sp, #4]
 8007288:	ab1b      	add	r3, sp, #108	; 0x6c
 800728a:	9300      	str	r3, [sp, #0]
 800728c:	0038      	movs	r0, r7
 800728e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007290:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007292:	f001 fd49 	bl	8008d28 <__d2b>
 8007296:	006e      	lsls	r6, r5, #1
 8007298:	9005      	str	r0, [sp, #20]
 800729a:	0d76      	lsrs	r6, r6, #21
 800729c:	d100      	bne.n	80072a0 <_dtoa_r+0xec>
 800729e:	e07c      	b.n	800739a <_dtoa_r+0x1e6>
 80072a0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80072a2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80072a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80072a6:	4a9d      	ldr	r2, [pc, #628]	; (800751c <_dtoa_r+0x368>)
 80072a8:	031b      	lsls	r3, r3, #12
 80072aa:	0b1b      	lsrs	r3, r3, #12
 80072ac:	431a      	orrs	r2, r3
 80072ae:	0011      	movs	r1, r2
 80072b0:	4b9b      	ldr	r3, [pc, #620]	; (8007520 <_dtoa_r+0x36c>)
 80072b2:	9418      	str	r4, [sp, #96]	; 0x60
 80072b4:	18f6      	adds	r6, r6, r3
 80072b6:	2200      	movs	r2, #0
 80072b8:	4b9a      	ldr	r3, [pc, #616]	; (8007524 <_dtoa_r+0x370>)
 80072ba:	f7fa fb0f 	bl	80018dc <__aeabi_dsub>
 80072be:	4a9a      	ldr	r2, [pc, #616]	; (8007528 <_dtoa_r+0x374>)
 80072c0:	4b9a      	ldr	r3, [pc, #616]	; (800752c <_dtoa_r+0x378>)
 80072c2:	f7fa f89f 	bl	8001404 <__aeabi_dmul>
 80072c6:	4a9a      	ldr	r2, [pc, #616]	; (8007530 <_dtoa_r+0x37c>)
 80072c8:	4b9a      	ldr	r3, [pc, #616]	; (8007534 <_dtoa_r+0x380>)
 80072ca:	f7f9 f95d 	bl	8000588 <__aeabi_dadd>
 80072ce:	0004      	movs	r4, r0
 80072d0:	0030      	movs	r0, r6
 80072d2:	000d      	movs	r5, r1
 80072d4:	f7fa fee8 	bl	80020a8 <__aeabi_i2d>
 80072d8:	4a97      	ldr	r2, [pc, #604]	; (8007538 <_dtoa_r+0x384>)
 80072da:	4b98      	ldr	r3, [pc, #608]	; (800753c <_dtoa_r+0x388>)
 80072dc:	f7fa f892 	bl	8001404 <__aeabi_dmul>
 80072e0:	0002      	movs	r2, r0
 80072e2:	000b      	movs	r3, r1
 80072e4:	0020      	movs	r0, r4
 80072e6:	0029      	movs	r1, r5
 80072e8:	f7f9 f94e 	bl	8000588 <__aeabi_dadd>
 80072ec:	0004      	movs	r4, r0
 80072ee:	000d      	movs	r5, r1
 80072f0:	f7fa fea4 	bl	800203c <__aeabi_d2iz>
 80072f4:	2200      	movs	r2, #0
 80072f6:	9002      	str	r0, [sp, #8]
 80072f8:	2300      	movs	r3, #0
 80072fa:	0020      	movs	r0, r4
 80072fc:	0029      	movs	r1, r5
 80072fe:	f7f9 f8ab 	bl	8000458 <__aeabi_dcmplt>
 8007302:	2800      	cmp	r0, #0
 8007304:	d00b      	beq.n	800731e <_dtoa_r+0x16a>
 8007306:	9802      	ldr	r0, [sp, #8]
 8007308:	f7fa fece 	bl	80020a8 <__aeabi_i2d>
 800730c:	002b      	movs	r3, r5
 800730e:	0022      	movs	r2, r4
 8007310:	f7f9 f89c 	bl	800044c <__aeabi_dcmpeq>
 8007314:	4243      	negs	r3, r0
 8007316:	4158      	adcs	r0, r3
 8007318:	9b02      	ldr	r3, [sp, #8]
 800731a:	1a1b      	subs	r3, r3, r0
 800731c:	9302      	str	r3, [sp, #8]
 800731e:	2301      	movs	r3, #1
 8007320:	9316      	str	r3, [sp, #88]	; 0x58
 8007322:	9b02      	ldr	r3, [sp, #8]
 8007324:	2b16      	cmp	r3, #22
 8007326:	d80f      	bhi.n	8007348 <_dtoa_r+0x194>
 8007328:	9812      	ldr	r0, [sp, #72]	; 0x48
 800732a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800732c:	00da      	lsls	r2, r3, #3
 800732e:	4b84      	ldr	r3, [pc, #528]	; (8007540 <_dtoa_r+0x38c>)
 8007330:	189b      	adds	r3, r3, r2
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	f7f9 f88f 	bl	8000458 <__aeabi_dcmplt>
 800733a:	2800      	cmp	r0, #0
 800733c:	d049      	beq.n	80073d2 <_dtoa_r+0x21e>
 800733e:	9b02      	ldr	r3, [sp, #8]
 8007340:	3b01      	subs	r3, #1
 8007342:	9302      	str	r3, [sp, #8]
 8007344:	2300      	movs	r3, #0
 8007346:	9316      	str	r3, [sp, #88]	; 0x58
 8007348:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800734a:	1b9e      	subs	r6, r3, r6
 800734c:	2300      	movs	r3, #0
 800734e:	930a      	str	r3, [sp, #40]	; 0x28
 8007350:	0033      	movs	r3, r6
 8007352:	3b01      	subs	r3, #1
 8007354:	930d      	str	r3, [sp, #52]	; 0x34
 8007356:	d504      	bpl.n	8007362 <_dtoa_r+0x1ae>
 8007358:	2301      	movs	r3, #1
 800735a:	1b9b      	subs	r3, r3, r6
 800735c:	930a      	str	r3, [sp, #40]	; 0x28
 800735e:	2300      	movs	r3, #0
 8007360:	930d      	str	r3, [sp, #52]	; 0x34
 8007362:	9b02      	ldr	r3, [sp, #8]
 8007364:	2b00      	cmp	r3, #0
 8007366:	db36      	blt.n	80073d6 <_dtoa_r+0x222>
 8007368:	9a02      	ldr	r2, [sp, #8]
 800736a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800736c:	4694      	mov	ip, r2
 800736e:	4463      	add	r3, ip
 8007370:	930d      	str	r3, [sp, #52]	; 0x34
 8007372:	2300      	movs	r3, #0
 8007374:	9215      	str	r2, [sp, #84]	; 0x54
 8007376:	930e      	str	r3, [sp, #56]	; 0x38
 8007378:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800737a:	2401      	movs	r4, #1
 800737c:	2b09      	cmp	r3, #9
 800737e:	d864      	bhi.n	800744a <_dtoa_r+0x296>
 8007380:	2b05      	cmp	r3, #5
 8007382:	dd02      	ble.n	800738a <_dtoa_r+0x1d6>
 8007384:	2400      	movs	r4, #0
 8007386:	3b04      	subs	r3, #4
 8007388:	9322      	str	r3, [sp, #136]	; 0x88
 800738a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800738c:	1e98      	subs	r0, r3, #2
 800738e:	2803      	cmp	r0, #3
 8007390:	d864      	bhi.n	800745c <_dtoa_r+0x2a8>
 8007392:	f7f8 fec1 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007396:	3829      	.short	0x3829
 8007398:	5836      	.short	0x5836
 800739a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800739c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800739e:	189e      	adds	r6, r3, r2
 80073a0:	4b68      	ldr	r3, [pc, #416]	; (8007544 <_dtoa_r+0x390>)
 80073a2:	18f2      	adds	r2, r6, r3
 80073a4:	2a20      	cmp	r2, #32
 80073a6:	dd0f      	ble.n	80073c8 <_dtoa_r+0x214>
 80073a8:	2340      	movs	r3, #64	; 0x40
 80073aa:	1a9b      	subs	r3, r3, r2
 80073ac:	409d      	lsls	r5, r3
 80073ae:	4b66      	ldr	r3, [pc, #408]	; (8007548 <_dtoa_r+0x394>)
 80073b0:	9802      	ldr	r0, [sp, #8]
 80073b2:	18f3      	adds	r3, r6, r3
 80073b4:	40d8      	lsrs	r0, r3
 80073b6:	4328      	orrs	r0, r5
 80073b8:	f7fa fea6 	bl	8002108 <__aeabi_ui2d>
 80073bc:	2301      	movs	r3, #1
 80073be:	4c63      	ldr	r4, [pc, #396]	; (800754c <_dtoa_r+0x398>)
 80073c0:	3e01      	subs	r6, #1
 80073c2:	1909      	adds	r1, r1, r4
 80073c4:	9318      	str	r3, [sp, #96]	; 0x60
 80073c6:	e776      	b.n	80072b6 <_dtoa_r+0x102>
 80073c8:	2320      	movs	r3, #32
 80073ca:	9802      	ldr	r0, [sp, #8]
 80073cc:	1a9b      	subs	r3, r3, r2
 80073ce:	4098      	lsls	r0, r3
 80073d0:	e7f2      	b.n	80073b8 <_dtoa_r+0x204>
 80073d2:	9016      	str	r0, [sp, #88]	; 0x58
 80073d4:	e7b8      	b.n	8007348 <_dtoa_r+0x194>
 80073d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073d8:	9a02      	ldr	r2, [sp, #8]
 80073da:	1a9b      	subs	r3, r3, r2
 80073dc:	930a      	str	r3, [sp, #40]	; 0x28
 80073de:	4253      	negs	r3, r2
 80073e0:	930e      	str	r3, [sp, #56]	; 0x38
 80073e2:	2300      	movs	r3, #0
 80073e4:	9315      	str	r3, [sp, #84]	; 0x54
 80073e6:	e7c7      	b.n	8007378 <_dtoa_r+0x1c4>
 80073e8:	2300      	movs	r3, #0
 80073ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80073ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80073ee:	930c      	str	r3, [sp, #48]	; 0x30
 80073f0:	9307      	str	r3, [sp, #28]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	dc13      	bgt.n	800741e <_dtoa_r+0x26a>
 80073f6:	2301      	movs	r3, #1
 80073f8:	001a      	movs	r2, r3
 80073fa:	930c      	str	r3, [sp, #48]	; 0x30
 80073fc:	9307      	str	r3, [sp, #28]
 80073fe:	9223      	str	r2, [sp, #140]	; 0x8c
 8007400:	e00d      	b.n	800741e <_dtoa_r+0x26a>
 8007402:	2301      	movs	r3, #1
 8007404:	e7f1      	b.n	80073ea <_dtoa_r+0x236>
 8007406:	2300      	movs	r3, #0
 8007408:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800740a:	930f      	str	r3, [sp, #60]	; 0x3c
 800740c:	4694      	mov	ip, r2
 800740e:	9b02      	ldr	r3, [sp, #8]
 8007410:	4463      	add	r3, ip
 8007412:	930c      	str	r3, [sp, #48]	; 0x30
 8007414:	3301      	adds	r3, #1
 8007416:	9307      	str	r3, [sp, #28]
 8007418:	2b00      	cmp	r3, #0
 800741a:	dc00      	bgt.n	800741e <_dtoa_r+0x26a>
 800741c:	2301      	movs	r3, #1
 800741e:	2200      	movs	r2, #0
 8007420:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007422:	6042      	str	r2, [r0, #4]
 8007424:	3204      	adds	r2, #4
 8007426:	0015      	movs	r5, r2
 8007428:	3514      	adds	r5, #20
 800742a:	6841      	ldr	r1, [r0, #4]
 800742c:	429d      	cmp	r5, r3
 800742e:	d919      	bls.n	8007464 <_dtoa_r+0x2b0>
 8007430:	0038      	movs	r0, r7
 8007432:	f001 f881 	bl	8008538 <_Balloc>
 8007436:	9006      	str	r0, [sp, #24]
 8007438:	2800      	cmp	r0, #0
 800743a:	d117      	bne.n	800746c <_dtoa_r+0x2b8>
 800743c:	21d5      	movs	r1, #213	; 0xd5
 800743e:	0002      	movs	r2, r0
 8007440:	4b43      	ldr	r3, [pc, #268]	; (8007550 <_dtoa_r+0x39c>)
 8007442:	0049      	lsls	r1, r1, #1
 8007444:	e6cb      	b.n	80071de <_dtoa_r+0x2a>
 8007446:	2301      	movs	r3, #1
 8007448:	e7de      	b.n	8007408 <_dtoa_r+0x254>
 800744a:	2300      	movs	r3, #0
 800744c:	940f      	str	r4, [sp, #60]	; 0x3c
 800744e:	9322      	str	r3, [sp, #136]	; 0x88
 8007450:	3b01      	subs	r3, #1
 8007452:	930c      	str	r3, [sp, #48]	; 0x30
 8007454:	9307      	str	r3, [sp, #28]
 8007456:	2200      	movs	r2, #0
 8007458:	3313      	adds	r3, #19
 800745a:	e7d0      	b.n	80073fe <_dtoa_r+0x24a>
 800745c:	2301      	movs	r3, #1
 800745e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007460:	3b02      	subs	r3, #2
 8007462:	e7f6      	b.n	8007452 <_dtoa_r+0x29e>
 8007464:	3101      	adds	r1, #1
 8007466:	6041      	str	r1, [r0, #4]
 8007468:	0052      	lsls	r2, r2, #1
 800746a:	e7dc      	b.n	8007426 <_dtoa_r+0x272>
 800746c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746e:	9a06      	ldr	r2, [sp, #24]
 8007470:	601a      	str	r2, [r3, #0]
 8007472:	9b07      	ldr	r3, [sp, #28]
 8007474:	2b0e      	cmp	r3, #14
 8007476:	d900      	bls.n	800747a <_dtoa_r+0x2c6>
 8007478:	e0eb      	b.n	8007652 <_dtoa_r+0x49e>
 800747a:	2c00      	cmp	r4, #0
 800747c:	d100      	bne.n	8007480 <_dtoa_r+0x2cc>
 800747e:	e0e8      	b.n	8007652 <_dtoa_r+0x49e>
 8007480:	9b02      	ldr	r3, [sp, #8]
 8007482:	2b00      	cmp	r3, #0
 8007484:	dd68      	ble.n	8007558 <_dtoa_r+0x3a4>
 8007486:	001a      	movs	r2, r3
 8007488:	210f      	movs	r1, #15
 800748a:	4b2d      	ldr	r3, [pc, #180]	; (8007540 <_dtoa_r+0x38c>)
 800748c:	400a      	ands	r2, r1
 800748e:	00d2      	lsls	r2, r2, #3
 8007490:	189b      	adds	r3, r3, r2
 8007492:	681d      	ldr	r5, [r3, #0]
 8007494:	685e      	ldr	r6, [r3, #4]
 8007496:	9b02      	ldr	r3, [sp, #8]
 8007498:	111c      	asrs	r4, r3, #4
 800749a:	2302      	movs	r3, #2
 800749c:	9310      	str	r3, [sp, #64]	; 0x40
 800749e:	9b02      	ldr	r3, [sp, #8]
 80074a0:	05db      	lsls	r3, r3, #23
 80074a2:	d50b      	bpl.n	80074bc <_dtoa_r+0x308>
 80074a4:	4b2b      	ldr	r3, [pc, #172]	; (8007554 <_dtoa_r+0x3a0>)
 80074a6:	400c      	ands	r4, r1
 80074a8:	6a1a      	ldr	r2, [r3, #32]
 80074aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ac:	9812      	ldr	r0, [sp, #72]	; 0x48
 80074ae:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80074b0:	f7f9 fba6 	bl	8000c00 <__aeabi_ddiv>
 80074b4:	2303      	movs	r3, #3
 80074b6:	9008      	str	r0, [sp, #32]
 80074b8:	9109      	str	r1, [sp, #36]	; 0x24
 80074ba:	9310      	str	r3, [sp, #64]	; 0x40
 80074bc:	4b25      	ldr	r3, [pc, #148]	; (8007554 <_dtoa_r+0x3a0>)
 80074be:	9314      	str	r3, [sp, #80]	; 0x50
 80074c0:	2c00      	cmp	r4, #0
 80074c2:	d108      	bne.n	80074d6 <_dtoa_r+0x322>
 80074c4:	9808      	ldr	r0, [sp, #32]
 80074c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074c8:	002a      	movs	r2, r5
 80074ca:	0033      	movs	r3, r6
 80074cc:	f7f9 fb98 	bl	8000c00 <__aeabi_ddiv>
 80074d0:	9008      	str	r0, [sp, #32]
 80074d2:	9109      	str	r1, [sp, #36]	; 0x24
 80074d4:	e05c      	b.n	8007590 <_dtoa_r+0x3dc>
 80074d6:	2301      	movs	r3, #1
 80074d8:	421c      	tst	r4, r3
 80074da:	d00b      	beq.n	80074f4 <_dtoa_r+0x340>
 80074dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80074de:	0028      	movs	r0, r5
 80074e0:	3301      	adds	r3, #1
 80074e2:	9310      	str	r3, [sp, #64]	; 0x40
 80074e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80074e6:	0031      	movs	r1, r6
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	f7f9 ff8a 	bl	8001404 <__aeabi_dmul>
 80074f0:	0005      	movs	r5, r0
 80074f2:	000e      	movs	r6, r1
 80074f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80074f6:	1064      	asrs	r4, r4, #1
 80074f8:	3308      	adds	r3, #8
 80074fa:	e7e0      	b.n	80074be <_dtoa_r+0x30a>
 80074fc:	0800a29e 	.word	0x0800a29e
 8007500:	0800a2b5 	.word	0x0800a2b5
 8007504:	7ff00000 	.word	0x7ff00000
 8007508:	0000270f 	.word	0x0000270f
 800750c:	0800a29a 	.word	0x0800a29a
 8007510:	0800a29d 	.word	0x0800a29d
 8007514:	0800a114 	.word	0x0800a114
 8007518:	0800a115 	.word	0x0800a115
 800751c:	3ff00000 	.word	0x3ff00000
 8007520:	fffffc01 	.word	0xfffffc01
 8007524:	3ff80000 	.word	0x3ff80000
 8007528:	636f4361 	.word	0x636f4361
 800752c:	3fd287a7 	.word	0x3fd287a7
 8007530:	8b60c8b3 	.word	0x8b60c8b3
 8007534:	3fc68a28 	.word	0x3fc68a28
 8007538:	509f79fb 	.word	0x509f79fb
 800753c:	3fd34413 	.word	0x3fd34413
 8007540:	0800a420 	.word	0x0800a420
 8007544:	00000432 	.word	0x00000432
 8007548:	00000412 	.word	0x00000412
 800754c:	fe100000 	.word	0xfe100000
 8007550:	0800a310 	.word	0x0800a310
 8007554:	0800a3f8 	.word	0x0800a3f8
 8007558:	2302      	movs	r3, #2
 800755a:	9310      	str	r3, [sp, #64]	; 0x40
 800755c:	9b02      	ldr	r3, [sp, #8]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d016      	beq.n	8007590 <_dtoa_r+0x3dc>
 8007562:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007564:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007566:	425c      	negs	r4, r3
 8007568:	230f      	movs	r3, #15
 800756a:	4ab6      	ldr	r2, [pc, #728]	; (8007844 <_dtoa_r+0x690>)
 800756c:	4023      	ands	r3, r4
 800756e:	00db      	lsls	r3, r3, #3
 8007570:	18d3      	adds	r3, r2, r3
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	f7f9 ff45 	bl	8001404 <__aeabi_dmul>
 800757a:	2601      	movs	r6, #1
 800757c:	2300      	movs	r3, #0
 800757e:	9008      	str	r0, [sp, #32]
 8007580:	9109      	str	r1, [sp, #36]	; 0x24
 8007582:	4db1      	ldr	r5, [pc, #708]	; (8007848 <_dtoa_r+0x694>)
 8007584:	1124      	asrs	r4, r4, #4
 8007586:	2c00      	cmp	r4, #0
 8007588:	d000      	beq.n	800758c <_dtoa_r+0x3d8>
 800758a:	e094      	b.n	80076b6 <_dtoa_r+0x502>
 800758c:	2b00      	cmp	r3, #0
 800758e:	d19f      	bne.n	80074d0 <_dtoa_r+0x31c>
 8007590:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007592:	2b00      	cmp	r3, #0
 8007594:	d100      	bne.n	8007598 <_dtoa_r+0x3e4>
 8007596:	e09b      	b.n	80076d0 <_dtoa_r+0x51c>
 8007598:	9c08      	ldr	r4, [sp, #32]
 800759a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800759c:	2200      	movs	r2, #0
 800759e:	0020      	movs	r0, r4
 80075a0:	0029      	movs	r1, r5
 80075a2:	4baa      	ldr	r3, [pc, #680]	; (800784c <_dtoa_r+0x698>)
 80075a4:	f7f8 ff58 	bl	8000458 <__aeabi_dcmplt>
 80075a8:	2800      	cmp	r0, #0
 80075aa:	d100      	bne.n	80075ae <_dtoa_r+0x3fa>
 80075ac:	e090      	b.n	80076d0 <_dtoa_r+0x51c>
 80075ae:	9b07      	ldr	r3, [sp, #28]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d100      	bne.n	80075b6 <_dtoa_r+0x402>
 80075b4:	e08c      	b.n	80076d0 <_dtoa_r+0x51c>
 80075b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	dd46      	ble.n	800764a <_dtoa_r+0x496>
 80075bc:	9b02      	ldr	r3, [sp, #8]
 80075be:	2200      	movs	r2, #0
 80075c0:	0020      	movs	r0, r4
 80075c2:	0029      	movs	r1, r5
 80075c4:	1e5e      	subs	r6, r3, #1
 80075c6:	4ba2      	ldr	r3, [pc, #648]	; (8007850 <_dtoa_r+0x69c>)
 80075c8:	f7f9 ff1c 	bl	8001404 <__aeabi_dmul>
 80075cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80075ce:	9008      	str	r0, [sp, #32]
 80075d0:	9109      	str	r1, [sp, #36]	; 0x24
 80075d2:	3301      	adds	r3, #1
 80075d4:	9310      	str	r3, [sp, #64]	; 0x40
 80075d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075d8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80075da:	9c08      	ldr	r4, [sp, #32]
 80075dc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80075de:	9314      	str	r3, [sp, #80]	; 0x50
 80075e0:	f7fa fd62 	bl	80020a8 <__aeabi_i2d>
 80075e4:	0022      	movs	r2, r4
 80075e6:	002b      	movs	r3, r5
 80075e8:	f7f9 ff0c 	bl	8001404 <__aeabi_dmul>
 80075ec:	2200      	movs	r2, #0
 80075ee:	4b99      	ldr	r3, [pc, #612]	; (8007854 <_dtoa_r+0x6a0>)
 80075f0:	f7f8 ffca 	bl	8000588 <__aeabi_dadd>
 80075f4:	9010      	str	r0, [sp, #64]	; 0x40
 80075f6:	9111      	str	r1, [sp, #68]	; 0x44
 80075f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80075fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075fc:	9208      	str	r2, [sp, #32]
 80075fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007600:	4a95      	ldr	r2, [pc, #596]	; (8007858 <_dtoa_r+0x6a4>)
 8007602:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007604:	4694      	mov	ip, r2
 8007606:	4463      	add	r3, ip
 8007608:	9317      	str	r3, [sp, #92]	; 0x5c
 800760a:	9309      	str	r3, [sp, #36]	; 0x24
 800760c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800760e:	2b00      	cmp	r3, #0
 8007610:	d161      	bne.n	80076d6 <_dtoa_r+0x522>
 8007612:	2200      	movs	r2, #0
 8007614:	0020      	movs	r0, r4
 8007616:	0029      	movs	r1, r5
 8007618:	4b90      	ldr	r3, [pc, #576]	; (800785c <_dtoa_r+0x6a8>)
 800761a:	f7fa f95f 	bl	80018dc <__aeabi_dsub>
 800761e:	9a08      	ldr	r2, [sp, #32]
 8007620:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007622:	0004      	movs	r4, r0
 8007624:	000d      	movs	r5, r1
 8007626:	f7f8 ff2b 	bl	8000480 <__aeabi_dcmpgt>
 800762a:	2800      	cmp	r0, #0
 800762c:	d000      	beq.n	8007630 <_dtoa_r+0x47c>
 800762e:	e2af      	b.n	8007b90 <_dtoa_r+0x9dc>
 8007630:	488b      	ldr	r0, [pc, #556]	; (8007860 <_dtoa_r+0x6ac>)
 8007632:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007634:	4684      	mov	ip, r0
 8007636:	4461      	add	r1, ip
 8007638:	000b      	movs	r3, r1
 800763a:	0020      	movs	r0, r4
 800763c:	0029      	movs	r1, r5
 800763e:	9a08      	ldr	r2, [sp, #32]
 8007640:	f7f8 ff0a 	bl	8000458 <__aeabi_dcmplt>
 8007644:	2800      	cmp	r0, #0
 8007646:	d000      	beq.n	800764a <_dtoa_r+0x496>
 8007648:	e29f      	b.n	8007b8a <_dtoa_r+0x9d6>
 800764a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800764c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800764e:	9308      	str	r3, [sp, #32]
 8007650:	9409      	str	r4, [sp, #36]	; 0x24
 8007652:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007654:	2b00      	cmp	r3, #0
 8007656:	da00      	bge.n	800765a <_dtoa_r+0x4a6>
 8007658:	e172      	b.n	8007940 <_dtoa_r+0x78c>
 800765a:	9a02      	ldr	r2, [sp, #8]
 800765c:	2a0e      	cmp	r2, #14
 800765e:	dd00      	ble.n	8007662 <_dtoa_r+0x4ae>
 8007660:	e16e      	b.n	8007940 <_dtoa_r+0x78c>
 8007662:	4b78      	ldr	r3, [pc, #480]	; (8007844 <_dtoa_r+0x690>)
 8007664:	00d2      	lsls	r2, r2, #3
 8007666:	189b      	adds	r3, r3, r2
 8007668:	685c      	ldr	r4, [r3, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	930a      	str	r3, [sp, #40]	; 0x28
 800766e:	940b      	str	r4, [sp, #44]	; 0x2c
 8007670:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007672:	2b00      	cmp	r3, #0
 8007674:	db00      	blt.n	8007678 <_dtoa_r+0x4c4>
 8007676:	e0f7      	b.n	8007868 <_dtoa_r+0x6b4>
 8007678:	9b07      	ldr	r3, [sp, #28]
 800767a:	2b00      	cmp	r3, #0
 800767c:	dd00      	ble.n	8007680 <_dtoa_r+0x4cc>
 800767e:	e0f3      	b.n	8007868 <_dtoa_r+0x6b4>
 8007680:	d000      	beq.n	8007684 <_dtoa_r+0x4d0>
 8007682:	e282      	b.n	8007b8a <_dtoa_r+0x9d6>
 8007684:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007686:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007688:	2200      	movs	r2, #0
 800768a:	4b74      	ldr	r3, [pc, #464]	; (800785c <_dtoa_r+0x6a8>)
 800768c:	f7f9 feba 	bl	8001404 <__aeabi_dmul>
 8007690:	9a08      	ldr	r2, [sp, #32]
 8007692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007694:	f7f8 fefe 	bl	8000494 <__aeabi_dcmpge>
 8007698:	9e07      	ldr	r6, [sp, #28]
 800769a:	0035      	movs	r5, r6
 800769c:	2800      	cmp	r0, #0
 800769e:	d000      	beq.n	80076a2 <_dtoa_r+0x4ee>
 80076a0:	e259      	b.n	8007b56 <_dtoa_r+0x9a2>
 80076a2:	9b06      	ldr	r3, [sp, #24]
 80076a4:	9a06      	ldr	r2, [sp, #24]
 80076a6:	3301      	adds	r3, #1
 80076a8:	9308      	str	r3, [sp, #32]
 80076aa:	2331      	movs	r3, #49	; 0x31
 80076ac:	7013      	strb	r3, [r2, #0]
 80076ae:	9b02      	ldr	r3, [sp, #8]
 80076b0:	3301      	adds	r3, #1
 80076b2:	9302      	str	r3, [sp, #8]
 80076b4:	e254      	b.n	8007b60 <_dtoa_r+0x9ac>
 80076b6:	4234      	tst	r4, r6
 80076b8:	d007      	beq.n	80076ca <_dtoa_r+0x516>
 80076ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80076bc:	3301      	adds	r3, #1
 80076be:	9310      	str	r3, [sp, #64]	; 0x40
 80076c0:	682a      	ldr	r2, [r5, #0]
 80076c2:	686b      	ldr	r3, [r5, #4]
 80076c4:	f7f9 fe9e 	bl	8001404 <__aeabi_dmul>
 80076c8:	0033      	movs	r3, r6
 80076ca:	1064      	asrs	r4, r4, #1
 80076cc:	3508      	adds	r5, #8
 80076ce:	e75a      	b.n	8007586 <_dtoa_r+0x3d2>
 80076d0:	9e02      	ldr	r6, [sp, #8]
 80076d2:	9b07      	ldr	r3, [sp, #28]
 80076d4:	e780      	b.n	80075d8 <_dtoa_r+0x424>
 80076d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80076d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80076da:	1e5a      	subs	r2, r3, #1
 80076dc:	4b59      	ldr	r3, [pc, #356]	; (8007844 <_dtoa_r+0x690>)
 80076de:	00d2      	lsls	r2, r2, #3
 80076e0:	189b      	adds	r3, r3, r2
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	2900      	cmp	r1, #0
 80076e8:	d051      	beq.n	800778e <_dtoa_r+0x5da>
 80076ea:	2000      	movs	r0, #0
 80076ec:	495d      	ldr	r1, [pc, #372]	; (8007864 <_dtoa_r+0x6b0>)
 80076ee:	f7f9 fa87 	bl	8000c00 <__aeabi_ddiv>
 80076f2:	9a08      	ldr	r2, [sp, #32]
 80076f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076f6:	f7fa f8f1 	bl	80018dc <__aeabi_dsub>
 80076fa:	9a06      	ldr	r2, [sp, #24]
 80076fc:	9b06      	ldr	r3, [sp, #24]
 80076fe:	4694      	mov	ip, r2
 8007700:	9317      	str	r3, [sp, #92]	; 0x5c
 8007702:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007704:	9010      	str	r0, [sp, #64]	; 0x40
 8007706:	9111      	str	r1, [sp, #68]	; 0x44
 8007708:	4463      	add	r3, ip
 800770a:	9319      	str	r3, [sp, #100]	; 0x64
 800770c:	0029      	movs	r1, r5
 800770e:	0020      	movs	r0, r4
 8007710:	f7fa fc94 	bl	800203c <__aeabi_d2iz>
 8007714:	9014      	str	r0, [sp, #80]	; 0x50
 8007716:	f7fa fcc7 	bl	80020a8 <__aeabi_i2d>
 800771a:	0002      	movs	r2, r0
 800771c:	000b      	movs	r3, r1
 800771e:	0020      	movs	r0, r4
 8007720:	0029      	movs	r1, r5
 8007722:	f7fa f8db 	bl	80018dc <__aeabi_dsub>
 8007726:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007728:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800772a:	3301      	adds	r3, #1
 800772c:	9308      	str	r3, [sp, #32]
 800772e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007730:	0004      	movs	r4, r0
 8007732:	3330      	adds	r3, #48	; 0x30
 8007734:	7013      	strb	r3, [r2, #0]
 8007736:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007738:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800773a:	000d      	movs	r5, r1
 800773c:	f7f8 fe8c 	bl	8000458 <__aeabi_dcmplt>
 8007740:	2800      	cmp	r0, #0
 8007742:	d175      	bne.n	8007830 <_dtoa_r+0x67c>
 8007744:	0022      	movs	r2, r4
 8007746:	002b      	movs	r3, r5
 8007748:	2000      	movs	r0, #0
 800774a:	4940      	ldr	r1, [pc, #256]	; (800784c <_dtoa_r+0x698>)
 800774c:	f7fa f8c6 	bl	80018dc <__aeabi_dsub>
 8007750:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007752:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007754:	f7f8 fe80 	bl	8000458 <__aeabi_dcmplt>
 8007758:	2800      	cmp	r0, #0
 800775a:	d000      	beq.n	800775e <_dtoa_r+0x5aa>
 800775c:	e0d2      	b.n	8007904 <_dtoa_r+0x750>
 800775e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007760:	9a08      	ldr	r2, [sp, #32]
 8007762:	4293      	cmp	r3, r2
 8007764:	d100      	bne.n	8007768 <_dtoa_r+0x5b4>
 8007766:	e770      	b.n	800764a <_dtoa_r+0x496>
 8007768:	9810      	ldr	r0, [sp, #64]	; 0x40
 800776a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800776c:	2200      	movs	r2, #0
 800776e:	4b38      	ldr	r3, [pc, #224]	; (8007850 <_dtoa_r+0x69c>)
 8007770:	f7f9 fe48 	bl	8001404 <__aeabi_dmul>
 8007774:	4b36      	ldr	r3, [pc, #216]	; (8007850 <_dtoa_r+0x69c>)
 8007776:	9010      	str	r0, [sp, #64]	; 0x40
 8007778:	9111      	str	r1, [sp, #68]	; 0x44
 800777a:	2200      	movs	r2, #0
 800777c:	0020      	movs	r0, r4
 800777e:	0029      	movs	r1, r5
 8007780:	f7f9 fe40 	bl	8001404 <__aeabi_dmul>
 8007784:	9b08      	ldr	r3, [sp, #32]
 8007786:	0004      	movs	r4, r0
 8007788:	000d      	movs	r5, r1
 800778a:	9317      	str	r3, [sp, #92]	; 0x5c
 800778c:	e7be      	b.n	800770c <_dtoa_r+0x558>
 800778e:	9808      	ldr	r0, [sp, #32]
 8007790:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007792:	f7f9 fe37 	bl	8001404 <__aeabi_dmul>
 8007796:	9a06      	ldr	r2, [sp, #24]
 8007798:	9b06      	ldr	r3, [sp, #24]
 800779a:	4694      	mov	ip, r2
 800779c:	9308      	str	r3, [sp, #32]
 800779e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80077a0:	9010      	str	r0, [sp, #64]	; 0x40
 80077a2:	9111      	str	r1, [sp, #68]	; 0x44
 80077a4:	4463      	add	r3, ip
 80077a6:	9319      	str	r3, [sp, #100]	; 0x64
 80077a8:	0029      	movs	r1, r5
 80077aa:	0020      	movs	r0, r4
 80077ac:	f7fa fc46 	bl	800203c <__aeabi_d2iz>
 80077b0:	9017      	str	r0, [sp, #92]	; 0x5c
 80077b2:	f7fa fc79 	bl	80020a8 <__aeabi_i2d>
 80077b6:	0002      	movs	r2, r0
 80077b8:	000b      	movs	r3, r1
 80077ba:	0020      	movs	r0, r4
 80077bc:	0029      	movs	r1, r5
 80077be:	f7fa f88d 	bl	80018dc <__aeabi_dsub>
 80077c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077c4:	9a08      	ldr	r2, [sp, #32]
 80077c6:	3330      	adds	r3, #48	; 0x30
 80077c8:	7013      	strb	r3, [r2, #0]
 80077ca:	0013      	movs	r3, r2
 80077cc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80077ce:	3301      	adds	r3, #1
 80077d0:	0004      	movs	r4, r0
 80077d2:	000d      	movs	r5, r1
 80077d4:	9308      	str	r3, [sp, #32]
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d12c      	bne.n	8007834 <_dtoa_r+0x680>
 80077da:	9810      	ldr	r0, [sp, #64]	; 0x40
 80077dc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80077de:	9a06      	ldr	r2, [sp, #24]
 80077e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80077e2:	4694      	mov	ip, r2
 80077e4:	4463      	add	r3, ip
 80077e6:	2200      	movs	r2, #0
 80077e8:	9308      	str	r3, [sp, #32]
 80077ea:	4b1e      	ldr	r3, [pc, #120]	; (8007864 <_dtoa_r+0x6b0>)
 80077ec:	f7f8 fecc 	bl	8000588 <__aeabi_dadd>
 80077f0:	0002      	movs	r2, r0
 80077f2:	000b      	movs	r3, r1
 80077f4:	0020      	movs	r0, r4
 80077f6:	0029      	movs	r1, r5
 80077f8:	f7f8 fe42 	bl	8000480 <__aeabi_dcmpgt>
 80077fc:	2800      	cmp	r0, #0
 80077fe:	d000      	beq.n	8007802 <_dtoa_r+0x64e>
 8007800:	e080      	b.n	8007904 <_dtoa_r+0x750>
 8007802:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007804:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007806:	2000      	movs	r0, #0
 8007808:	4916      	ldr	r1, [pc, #88]	; (8007864 <_dtoa_r+0x6b0>)
 800780a:	f7fa f867 	bl	80018dc <__aeabi_dsub>
 800780e:	0002      	movs	r2, r0
 8007810:	000b      	movs	r3, r1
 8007812:	0020      	movs	r0, r4
 8007814:	0029      	movs	r1, r5
 8007816:	f7f8 fe1f 	bl	8000458 <__aeabi_dcmplt>
 800781a:	2800      	cmp	r0, #0
 800781c:	d100      	bne.n	8007820 <_dtoa_r+0x66c>
 800781e:	e714      	b.n	800764a <_dtoa_r+0x496>
 8007820:	9b08      	ldr	r3, [sp, #32]
 8007822:	001a      	movs	r2, r3
 8007824:	3a01      	subs	r2, #1
 8007826:	9208      	str	r2, [sp, #32]
 8007828:	7812      	ldrb	r2, [r2, #0]
 800782a:	2a30      	cmp	r2, #48	; 0x30
 800782c:	d0f8      	beq.n	8007820 <_dtoa_r+0x66c>
 800782e:	9308      	str	r3, [sp, #32]
 8007830:	9602      	str	r6, [sp, #8]
 8007832:	e055      	b.n	80078e0 <_dtoa_r+0x72c>
 8007834:	2200      	movs	r2, #0
 8007836:	4b06      	ldr	r3, [pc, #24]	; (8007850 <_dtoa_r+0x69c>)
 8007838:	f7f9 fde4 	bl	8001404 <__aeabi_dmul>
 800783c:	0004      	movs	r4, r0
 800783e:	000d      	movs	r5, r1
 8007840:	e7b2      	b.n	80077a8 <_dtoa_r+0x5f4>
 8007842:	46c0      	nop			; (mov r8, r8)
 8007844:	0800a420 	.word	0x0800a420
 8007848:	0800a3f8 	.word	0x0800a3f8
 800784c:	3ff00000 	.word	0x3ff00000
 8007850:	40240000 	.word	0x40240000
 8007854:	401c0000 	.word	0x401c0000
 8007858:	fcc00000 	.word	0xfcc00000
 800785c:	40140000 	.word	0x40140000
 8007860:	7cc00000 	.word	0x7cc00000
 8007864:	3fe00000 	.word	0x3fe00000
 8007868:	9b07      	ldr	r3, [sp, #28]
 800786a:	9e06      	ldr	r6, [sp, #24]
 800786c:	3b01      	subs	r3, #1
 800786e:	199b      	adds	r3, r3, r6
 8007870:	930c      	str	r3, [sp, #48]	; 0x30
 8007872:	9c08      	ldr	r4, [sp, #32]
 8007874:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007876:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800787a:	0020      	movs	r0, r4
 800787c:	0029      	movs	r1, r5
 800787e:	f7f9 f9bf 	bl	8000c00 <__aeabi_ddiv>
 8007882:	f7fa fbdb 	bl	800203c <__aeabi_d2iz>
 8007886:	9007      	str	r0, [sp, #28]
 8007888:	f7fa fc0e 	bl	80020a8 <__aeabi_i2d>
 800788c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800788e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007890:	f7f9 fdb8 	bl	8001404 <__aeabi_dmul>
 8007894:	0002      	movs	r2, r0
 8007896:	000b      	movs	r3, r1
 8007898:	0020      	movs	r0, r4
 800789a:	0029      	movs	r1, r5
 800789c:	f7fa f81e 	bl	80018dc <__aeabi_dsub>
 80078a0:	0033      	movs	r3, r6
 80078a2:	9a07      	ldr	r2, [sp, #28]
 80078a4:	3601      	adds	r6, #1
 80078a6:	3230      	adds	r2, #48	; 0x30
 80078a8:	701a      	strb	r2, [r3, #0]
 80078aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078ac:	9608      	str	r6, [sp, #32]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d139      	bne.n	8007926 <_dtoa_r+0x772>
 80078b2:	0002      	movs	r2, r0
 80078b4:	000b      	movs	r3, r1
 80078b6:	f7f8 fe67 	bl	8000588 <__aeabi_dadd>
 80078ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078be:	0004      	movs	r4, r0
 80078c0:	000d      	movs	r5, r1
 80078c2:	f7f8 fddd 	bl	8000480 <__aeabi_dcmpgt>
 80078c6:	2800      	cmp	r0, #0
 80078c8:	d11b      	bne.n	8007902 <_dtoa_r+0x74e>
 80078ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078ce:	0020      	movs	r0, r4
 80078d0:	0029      	movs	r1, r5
 80078d2:	f7f8 fdbb 	bl	800044c <__aeabi_dcmpeq>
 80078d6:	2800      	cmp	r0, #0
 80078d8:	d002      	beq.n	80078e0 <_dtoa_r+0x72c>
 80078da:	9b07      	ldr	r3, [sp, #28]
 80078dc:	07db      	lsls	r3, r3, #31
 80078de:	d410      	bmi.n	8007902 <_dtoa_r+0x74e>
 80078e0:	0038      	movs	r0, r7
 80078e2:	9905      	ldr	r1, [sp, #20]
 80078e4:	f000 fe6c 	bl	80085c0 <_Bfree>
 80078e8:	2300      	movs	r3, #0
 80078ea:	9a08      	ldr	r2, [sp, #32]
 80078ec:	9802      	ldr	r0, [sp, #8]
 80078ee:	7013      	strb	r3, [r2, #0]
 80078f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80078f2:	3001      	adds	r0, #1
 80078f4:	6018      	str	r0, [r3, #0]
 80078f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d100      	bne.n	80078fe <_dtoa_r+0x74a>
 80078fc:	e4a6      	b.n	800724c <_dtoa_r+0x98>
 80078fe:	601a      	str	r2, [r3, #0]
 8007900:	e4a4      	b.n	800724c <_dtoa_r+0x98>
 8007902:	9e02      	ldr	r6, [sp, #8]
 8007904:	9b08      	ldr	r3, [sp, #32]
 8007906:	9308      	str	r3, [sp, #32]
 8007908:	3b01      	subs	r3, #1
 800790a:	781a      	ldrb	r2, [r3, #0]
 800790c:	2a39      	cmp	r2, #57	; 0x39
 800790e:	d106      	bne.n	800791e <_dtoa_r+0x76a>
 8007910:	9a06      	ldr	r2, [sp, #24]
 8007912:	429a      	cmp	r2, r3
 8007914:	d1f7      	bne.n	8007906 <_dtoa_r+0x752>
 8007916:	2230      	movs	r2, #48	; 0x30
 8007918:	9906      	ldr	r1, [sp, #24]
 800791a:	3601      	adds	r6, #1
 800791c:	700a      	strb	r2, [r1, #0]
 800791e:	781a      	ldrb	r2, [r3, #0]
 8007920:	3201      	adds	r2, #1
 8007922:	701a      	strb	r2, [r3, #0]
 8007924:	e784      	b.n	8007830 <_dtoa_r+0x67c>
 8007926:	2200      	movs	r2, #0
 8007928:	4baa      	ldr	r3, [pc, #680]	; (8007bd4 <_dtoa_r+0xa20>)
 800792a:	f7f9 fd6b 	bl	8001404 <__aeabi_dmul>
 800792e:	2200      	movs	r2, #0
 8007930:	2300      	movs	r3, #0
 8007932:	0004      	movs	r4, r0
 8007934:	000d      	movs	r5, r1
 8007936:	f7f8 fd89 	bl	800044c <__aeabi_dcmpeq>
 800793a:	2800      	cmp	r0, #0
 800793c:	d09b      	beq.n	8007876 <_dtoa_r+0x6c2>
 800793e:	e7cf      	b.n	80078e0 <_dtoa_r+0x72c>
 8007940:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007942:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007944:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007946:	2d00      	cmp	r5, #0
 8007948:	d012      	beq.n	8007970 <_dtoa_r+0x7bc>
 800794a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800794c:	2a01      	cmp	r2, #1
 800794e:	dc66      	bgt.n	8007a1e <_dtoa_r+0x86a>
 8007950:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007952:	2a00      	cmp	r2, #0
 8007954:	d05d      	beq.n	8007a12 <_dtoa_r+0x85e>
 8007956:	4aa0      	ldr	r2, [pc, #640]	; (8007bd8 <_dtoa_r+0xa24>)
 8007958:	189b      	adds	r3, r3, r2
 800795a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800795c:	2101      	movs	r1, #1
 800795e:	18d2      	adds	r2, r2, r3
 8007960:	920a      	str	r2, [sp, #40]	; 0x28
 8007962:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007964:	0038      	movs	r0, r7
 8007966:	18d3      	adds	r3, r2, r3
 8007968:	930d      	str	r3, [sp, #52]	; 0x34
 800796a:	f000 ff25 	bl	80087b8 <__i2b>
 800796e:	0005      	movs	r5, r0
 8007970:	2c00      	cmp	r4, #0
 8007972:	dd0e      	ble.n	8007992 <_dtoa_r+0x7de>
 8007974:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007976:	2b00      	cmp	r3, #0
 8007978:	dd0b      	ble.n	8007992 <_dtoa_r+0x7de>
 800797a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800797c:	0023      	movs	r3, r4
 800797e:	4294      	cmp	r4, r2
 8007980:	dd00      	ble.n	8007984 <_dtoa_r+0x7d0>
 8007982:	0013      	movs	r3, r2
 8007984:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007986:	1ae4      	subs	r4, r4, r3
 8007988:	1ad2      	subs	r2, r2, r3
 800798a:	920a      	str	r2, [sp, #40]	; 0x28
 800798c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800798e:	1ad3      	subs	r3, r2, r3
 8007990:	930d      	str	r3, [sp, #52]	; 0x34
 8007992:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007994:	2b00      	cmp	r3, #0
 8007996:	d01f      	beq.n	80079d8 <_dtoa_r+0x824>
 8007998:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800799a:	2b00      	cmp	r3, #0
 800799c:	d054      	beq.n	8007a48 <_dtoa_r+0x894>
 800799e:	2e00      	cmp	r6, #0
 80079a0:	dd11      	ble.n	80079c6 <_dtoa_r+0x812>
 80079a2:	0029      	movs	r1, r5
 80079a4:	0032      	movs	r2, r6
 80079a6:	0038      	movs	r0, r7
 80079a8:	f000 ffcc 	bl	8008944 <__pow5mult>
 80079ac:	9a05      	ldr	r2, [sp, #20]
 80079ae:	0001      	movs	r1, r0
 80079b0:	0005      	movs	r5, r0
 80079b2:	0038      	movs	r0, r7
 80079b4:	f000 ff16 	bl	80087e4 <__multiply>
 80079b8:	9905      	ldr	r1, [sp, #20]
 80079ba:	9014      	str	r0, [sp, #80]	; 0x50
 80079bc:	0038      	movs	r0, r7
 80079be:	f000 fdff 	bl	80085c0 <_Bfree>
 80079c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80079c4:	9305      	str	r3, [sp, #20]
 80079c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079c8:	1b9a      	subs	r2, r3, r6
 80079ca:	42b3      	cmp	r3, r6
 80079cc:	d004      	beq.n	80079d8 <_dtoa_r+0x824>
 80079ce:	0038      	movs	r0, r7
 80079d0:	9905      	ldr	r1, [sp, #20]
 80079d2:	f000 ffb7 	bl	8008944 <__pow5mult>
 80079d6:	9005      	str	r0, [sp, #20]
 80079d8:	2101      	movs	r1, #1
 80079da:	0038      	movs	r0, r7
 80079dc:	f000 feec 	bl	80087b8 <__i2b>
 80079e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80079e2:	0006      	movs	r6, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	dd31      	ble.n	8007a4c <_dtoa_r+0x898>
 80079e8:	001a      	movs	r2, r3
 80079ea:	0001      	movs	r1, r0
 80079ec:	0038      	movs	r0, r7
 80079ee:	f000 ffa9 	bl	8008944 <__pow5mult>
 80079f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079f4:	0006      	movs	r6, r0
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	dd2d      	ble.n	8007a56 <_dtoa_r+0x8a2>
 80079fa:	2300      	movs	r3, #0
 80079fc:	930e      	str	r3, [sp, #56]	; 0x38
 80079fe:	6933      	ldr	r3, [r6, #16]
 8007a00:	3303      	adds	r3, #3
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	18f3      	adds	r3, r6, r3
 8007a06:	6858      	ldr	r0, [r3, #4]
 8007a08:	f000 fe8e 	bl	8008728 <__hi0bits>
 8007a0c:	2320      	movs	r3, #32
 8007a0e:	1a18      	subs	r0, r3, r0
 8007a10:	e039      	b.n	8007a86 <_dtoa_r+0x8d2>
 8007a12:	2336      	movs	r3, #54	; 0x36
 8007a14:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007a16:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007a18:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007a1a:	1a9b      	subs	r3, r3, r2
 8007a1c:	e79d      	b.n	800795a <_dtoa_r+0x7a6>
 8007a1e:	9b07      	ldr	r3, [sp, #28]
 8007a20:	1e5e      	subs	r6, r3, #1
 8007a22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a24:	42b3      	cmp	r3, r6
 8007a26:	db07      	blt.n	8007a38 <_dtoa_r+0x884>
 8007a28:	1b9e      	subs	r6, r3, r6
 8007a2a:	9b07      	ldr	r3, [sp, #28]
 8007a2c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	da93      	bge.n	800795a <_dtoa_r+0x7a6>
 8007a32:	1ae4      	subs	r4, r4, r3
 8007a34:	2300      	movs	r3, #0
 8007a36:	e790      	b.n	800795a <_dtoa_r+0x7a6>
 8007a38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a3a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007a3c:	1af3      	subs	r3, r6, r3
 8007a3e:	18d3      	adds	r3, r2, r3
 8007a40:	960e      	str	r6, [sp, #56]	; 0x38
 8007a42:	9315      	str	r3, [sp, #84]	; 0x54
 8007a44:	2600      	movs	r6, #0
 8007a46:	e7f0      	b.n	8007a2a <_dtoa_r+0x876>
 8007a48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a4a:	e7c0      	b.n	80079ce <_dtoa_r+0x81a>
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	930e      	str	r3, [sp, #56]	; 0x38
 8007a50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	dc13      	bgt.n	8007a7e <_dtoa_r+0x8ca>
 8007a56:	2300      	movs	r3, #0
 8007a58:	930e      	str	r3, [sp, #56]	; 0x38
 8007a5a:	9b08      	ldr	r3, [sp, #32]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d10e      	bne.n	8007a7e <_dtoa_r+0x8ca>
 8007a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a62:	031b      	lsls	r3, r3, #12
 8007a64:	d10b      	bne.n	8007a7e <_dtoa_r+0x8ca>
 8007a66:	4b5d      	ldr	r3, [pc, #372]	; (8007bdc <_dtoa_r+0xa28>)
 8007a68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a6a:	4213      	tst	r3, r2
 8007a6c:	d007      	beq.n	8007a7e <_dtoa_r+0x8ca>
 8007a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a70:	3301      	adds	r3, #1
 8007a72:	930a      	str	r3, [sp, #40]	; 0x28
 8007a74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a76:	3301      	adds	r3, #1
 8007a78:	930d      	str	r3, [sp, #52]	; 0x34
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	930e      	str	r3, [sp, #56]	; 0x38
 8007a7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a80:	2001      	movs	r0, #1
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1bb      	bne.n	80079fe <_dtoa_r+0x84a>
 8007a86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a88:	221f      	movs	r2, #31
 8007a8a:	1818      	adds	r0, r3, r0
 8007a8c:	0003      	movs	r3, r0
 8007a8e:	4013      	ands	r3, r2
 8007a90:	4210      	tst	r0, r2
 8007a92:	d046      	beq.n	8007b22 <_dtoa_r+0x96e>
 8007a94:	3201      	adds	r2, #1
 8007a96:	1ad2      	subs	r2, r2, r3
 8007a98:	2a04      	cmp	r2, #4
 8007a9a:	dd3f      	ble.n	8007b1c <_dtoa_r+0x968>
 8007a9c:	221c      	movs	r2, #28
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007aa2:	18e4      	adds	r4, r4, r3
 8007aa4:	18d2      	adds	r2, r2, r3
 8007aa6:	920a      	str	r2, [sp, #40]	; 0x28
 8007aa8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007aaa:	18d3      	adds	r3, r2, r3
 8007aac:	930d      	str	r3, [sp, #52]	; 0x34
 8007aae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	dd05      	ble.n	8007ac0 <_dtoa_r+0x90c>
 8007ab4:	001a      	movs	r2, r3
 8007ab6:	0038      	movs	r0, r7
 8007ab8:	9905      	ldr	r1, [sp, #20]
 8007aba:	f000 ff9f 	bl	80089fc <__lshift>
 8007abe:	9005      	str	r0, [sp, #20]
 8007ac0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	dd05      	ble.n	8007ad2 <_dtoa_r+0x91e>
 8007ac6:	0031      	movs	r1, r6
 8007ac8:	001a      	movs	r2, r3
 8007aca:	0038      	movs	r0, r7
 8007acc:	f000 ff96 	bl	80089fc <__lshift>
 8007ad0:	0006      	movs	r6, r0
 8007ad2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d026      	beq.n	8007b26 <_dtoa_r+0x972>
 8007ad8:	0031      	movs	r1, r6
 8007ada:	9805      	ldr	r0, [sp, #20]
 8007adc:	f000 fffc 	bl	8008ad8 <__mcmp>
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	da20      	bge.n	8007b26 <_dtoa_r+0x972>
 8007ae4:	9b02      	ldr	r3, [sp, #8]
 8007ae6:	220a      	movs	r2, #10
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	9302      	str	r3, [sp, #8]
 8007aec:	0038      	movs	r0, r7
 8007aee:	2300      	movs	r3, #0
 8007af0:	9905      	ldr	r1, [sp, #20]
 8007af2:	f000 fd89 	bl	8008608 <__multadd>
 8007af6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007af8:	9005      	str	r0, [sp, #20]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d100      	bne.n	8007b00 <_dtoa_r+0x94c>
 8007afe:	e166      	b.n	8007dce <_dtoa_r+0xc1a>
 8007b00:	2300      	movs	r3, #0
 8007b02:	0029      	movs	r1, r5
 8007b04:	220a      	movs	r2, #10
 8007b06:	0038      	movs	r0, r7
 8007b08:	f000 fd7e 	bl	8008608 <__multadd>
 8007b0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b0e:	0005      	movs	r5, r0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	dc47      	bgt.n	8007ba4 <_dtoa_r+0x9f0>
 8007b14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b16:	2b02      	cmp	r3, #2
 8007b18:	dc0d      	bgt.n	8007b36 <_dtoa_r+0x982>
 8007b1a:	e043      	b.n	8007ba4 <_dtoa_r+0x9f0>
 8007b1c:	2a04      	cmp	r2, #4
 8007b1e:	d0c6      	beq.n	8007aae <_dtoa_r+0x8fa>
 8007b20:	0013      	movs	r3, r2
 8007b22:	331c      	adds	r3, #28
 8007b24:	e7bc      	b.n	8007aa0 <_dtoa_r+0x8ec>
 8007b26:	9b07      	ldr	r3, [sp, #28]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	dc35      	bgt.n	8007b98 <_dtoa_r+0x9e4>
 8007b2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	dd32      	ble.n	8007b98 <_dtoa_r+0x9e4>
 8007b32:	9b07      	ldr	r3, [sp, #28]
 8007b34:	930c      	str	r3, [sp, #48]	; 0x30
 8007b36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10c      	bne.n	8007b56 <_dtoa_r+0x9a2>
 8007b3c:	0031      	movs	r1, r6
 8007b3e:	2205      	movs	r2, #5
 8007b40:	0038      	movs	r0, r7
 8007b42:	f000 fd61 	bl	8008608 <__multadd>
 8007b46:	0006      	movs	r6, r0
 8007b48:	0001      	movs	r1, r0
 8007b4a:	9805      	ldr	r0, [sp, #20]
 8007b4c:	f000 ffc4 	bl	8008ad8 <__mcmp>
 8007b50:	2800      	cmp	r0, #0
 8007b52:	dd00      	ble.n	8007b56 <_dtoa_r+0x9a2>
 8007b54:	e5a5      	b.n	80076a2 <_dtoa_r+0x4ee>
 8007b56:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007b58:	43db      	mvns	r3, r3
 8007b5a:	9302      	str	r3, [sp, #8]
 8007b5c:	9b06      	ldr	r3, [sp, #24]
 8007b5e:	9308      	str	r3, [sp, #32]
 8007b60:	2400      	movs	r4, #0
 8007b62:	0031      	movs	r1, r6
 8007b64:	0038      	movs	r0, r7
 8007b66:	f000 fd2b 	bl	80085c0 <_Bfree>
 8007b6a:	2d00      	cmp	r5, #0
 8007b6c:	d100      	bne.n	8007b70 <_dtoa_r+0x9bc>
 8007b6e:	e6b7      	b.n	80078e0 <_dtoa_r+0x72c>
 8007b70:	2c00      	cmp	r4, #0
 8007b72:	d005      	beq.n	8007b80 <_dtoa_r+0x9cc>
 8007b74:	42ac      	cmp	r4, r5
 8007b76:	d003      	beq.n	8007b80 <_dtoa_r+0x9cc>
 8007b78:	0021      	movs	r1, r4
 8007b7a:	0038      	movs	r0, r7
 8007b7c:	f000 fd20 	bl	80085c0 <_Bfree>
 8007b80:	0029      	movs	r1, r5
 8007b82:	0038      	movs	r0, r7
 8007b84:	f000 fd1c 	bl	80085c0 <_Bfree>
 8007b88:	e6aa      	b.n	80078e0 <_dtoa_r+0x72c>
 8007b8a:	2600      	movs	r6, #0
 8007b8c:	0035      	movs	r5, r6
 8007b8e:	e7e2      	b.n	8007b56 <_dtoa_r+0x9a2>
 8007b90:	9602      	str	r6, [sp, #8]
 8007b92:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8007b94:	0035      	movs	r5, r6
 8007b96:	e584      	b.n	80076a2 <_dtoa_r+0x4ee>
 8007b98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d100      	bne.n	8007ba0 <_dtoa_r+0x9ec>
 8007b9e:	e0ce      	b.n	8007d3e <_dtoa_r+0xb8a>
 8007ba0:	9b07      	ldr	r3, [sp, #28]
 8007ba2:	930c      	str	r3, [sp, #48]	; 0x30
 8007ba4:	2c00      	cmp	r4, #0
 8007ba6:	dd05      	ble.n	8007bb4 <_dtoa_r+0xa00>
 8007ba8:	0029      	movs	r1, r5
 8007baa:	0022      	movs	r2, r4
 8007bac:	0038      	movs	r0, r7
 8007bae:	f000 ff25 	bl	80089fc <__lshift>
 8007bb2:	0005      	movs	r5, r0
 8007bb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bb6:	0028      	movs	r0, r5
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d022      	beq.n	8007c02 <_dtoa_r+0xa4e>
 8007bbc:	0038      	movs	r0, r7
 8007bbe:	6869      	ldr	r1, [r5, #4]
 8007bc0:	f000 fcba 	bl	8008538 <_Balloc>
 8007bc4:	1e04      	subs	r4, r0, #0
 8007bc6:	d10f      	bne.n	8007be8 <_dtoa_r+0xa34>
 8007bc8:	0002      	movs	r2, r0
 8007bca:	4b05      	ldr	r3, [pc, #20]	; (8007be0 <_dtoa_r+0xa2c>)
 8007bcc:	4905      	ldr	r1, [pc, #20]	; (8007be4 <_dtoa_r+0xa30>)
 8007bce:	f7ff fb06 	bl	80071de <_dtoa_r+0x2a>
 8007bd2:	46c0      	nop			; (mov r8, r8)
 8007bd4:	40240000 	.word	0x40240000
 8007bd8:	00000433 	.word	0x00000433
 8007bdc:	7ff00000 	.word	0x7ff00000
 8007be0:	0800a310 	.word	0x0800a310
 8007be4:	000002ea 	.word	0x000002ea
 8007be8:	0029      	movs	r1, r5
 8007bea:	692b      	ldr	r3, [r5, #16]
 8007bec:	310c      	adds	r1, #12
 8007bee:	1c9a      	adds	r2, r3, #2
 8007bf0:	0092      	lsls	r2, r2, #2
 8007bf2:	300c      	adds	r0, #12
 8007bf4:	f000 fc97 	bl	8008526 <memcpy>
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	0021      	movs	r1, r4
 8007bfc:	0038      	movs	r0, r7
 8007bfe:	f000 fefd 	bl	80089fc <__lshift>
 8007c02:	9b06      	ldr	r3, [sp, #24]
 8007c04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c06:	930a      	str	r3, [sp, #40]	; 0x28
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	189b      	adds	r3, r3, r2
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	002c      	movs	r4, r5
 8007c10:	0005      	movs	r5, r0
 8007c12:	9314      	str	r3, [sp, #80]	; 0x50
 8007c14:	9b08      	ldr	r3, [sp, #32]
 8007c16:	4013      	ands	r3, r2
 8007c18:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c1a:	0031      	movs	r1, r6
 8007c1c:	9805      	ldr	r0, [sp, #20]
 8007c1e:	f7ff fa3d 	bl	800709c <quorem>
 8007c22:	0003      	movs	r3, r0
 8007c24:	0021      	movs	r1, r4
 8007c26:	3330      	adds	r3, #48	; 0x30
 8007c28:	900d      	str	r0, [sp, #52]	; 0x34
 8007c2a:	9805      	ldr	r0, [sp, #20]
 8007c2c:	9307      	str	r3, [sp, #28]
 8007c2e:	f000 ff53 	bl	8008ad8 <__mcmp>
 8007c32:	002a      	movs	r2, r5
 8007c34:	900e      	str	r0, [sp, #56]	; 0x38
 8007c36:	0031      	movs	r1, r6
 8007c38:	0038      	movs	r0, r7
 8007c3a:	f000 ff69 	bl	8008b10 <__mdiff>
 8007c3e:	68c3      	ldr	r3, [r0, #12]
 8007c40:	9008      	str	r0, [sp, #32]
 8007c42:	9310      	str	r3, [sp, #64]	; 0x40
 8007c44:	2301      	movs	r3, #1
 8007c46:	930c      	str	r3, [sp, #48]	; 0x30
 8007c48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d104      	bne.n	8007c58 <_dtoa_r+0xaa4>
 8007c4e:	0001      	movs	r1, r0
 8007c50:	9805      	ldr	r0, [sp, #20]
 8007c52:	f000 ff41 	bl	8008ad8 <__mcmp>
 8007c56:	900c      	str	r0, [sp, #48]	; 0x30
 8007c58:	0038      	movs	r0, r7
 8007c5a:	9908      	ldr	r1, [sp, #32]
 8007c5c:	f000 fcb0 	bl	80085c0 <_Bfree>
 8007c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c64:	3301      	adds	r3, #1
 8007c66:	9308      	str	r3, [sp, #32]
 8007c68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	d10c      	bne.n	8007c8c <_dtoa_r+0xad8>
 8007c72:	9b07      	ldr	r3, [sp, #28]
 8007c74:	2b39      	cmp	r3, #57	; 0x39
 8007c76:	d026      	beq.n	8007cc6 <_dtoa_r+0xb12>
 8007c78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	dd02      	ble.n	8007c84 <_dtoa_r+0xad0>
 8007c7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c80:	3331      	adds	r3, #49	; 0x31
 8007c82:	9307      	str	r3, [sp, #28]
 8007c84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c86:	9a07      	ldr	r2, [sp, #28]
 8007c88:	701a      	strb	r2, [r3, #0]
 8007c8a:	e76a      	b.n	8007b62 <_dtoa_r+0x9ae>
 8007c8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	db04      	blt.n	8007c9c <_dtoa_r+0xae8>
 8007c92:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007c94:	4313      	orrs	r3, r2
 8007c96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	d11f      	bne.n	8007cdc <_dtoa_r+0xb28>
 8007c9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	ddf0      	ble.n	8007c84 <_dtoa_r+0xad0>
 8007ca2:	9905      	ldr	r1, [sp, #20]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	0038      	movs	r0, r7
 8007ca8:	f000 fea8 	bl	80089fc <__lshift>
 8007cac:	0031      	movs	r1, r6
 8007cae:	9005      	str	r0, [sp, #20]
 8007cb0:	f000 ff12 	bl	8008ad8 <__mcmp>
 8007cb4:	2800      	cmp	r0, #0
 8007cb6:	dc03      	bgt.n	8007cc0 <_dtoa_r+0xb0c>
 8007cb8:	d1e4      	bne.n	8007c84 <_dtoa_r+0xad0>
 8007cba:	9b07      	ldr	r3, [sp, #28]
 8007cbc:	07db      	lsls	r3, r3, #31
 8007cbe:	d5e1      	bpl.n	8007c84 <_dtoa_r+0xad0>
 8007cc0:	9b07      	ldr	r3, [sp, #28]
 8007cc2:	2b39      	cmp	r3, #57	; 0x39
 8007cc4:	d1db      	bne.n	8007c7e <_dtoa_r+0xaca>
 8007cc6:	2339      	movs	r3, #57	; 0x39
 8007cc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cca:	7013      	strb	r3, [r2, #0]
 8007ccc:	9b08      	ldr	r3, [sp, #32]
 8007cce:	9308      	str	r3, [sp, #32]
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	781a      	ldrb	r2, [r3, #0]
 8007cd4:	2a39      	cmp	r2, #57	; 0x39
 8007cd6:	d068      	beq.n	8007daa <_dtoa_r+0xbf6>
 8007cd8:	3201      	adds	r2, #1
 8007cda:	e7d5      	b.n	8007c88 <_dtoa_r+0xad4>
 8007cdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	dd07      	ble.n	8007cf2 <_dtoa_r+0xb3e>
 8007ce2:	9b07      	ldr	r3, [sp, #28]
 8007ce4:	2b39      	cmp	r3, #57	; 0x39
 8007ce6:	d0ee      	beq.n	8007cc6 <_dtoa_r+0xb12>
 8007ce8:	9b07      	ldr	r3, [sp, #28]
 8007cea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cec:	3301      	adds	r3, #1
 8007cee:	7013      	strb	r3, [r2, #0]
 8007cf0:	e737      	b.n	8007b62 <_dtoa_r+0x9ae>
 8007cf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cf4:	9a07      	ldr	r2, [sp, #28]
 8007cf6:	701a      	strb	r2, [r3, #0]
 8007cf8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007cfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d03e      	beq.n	8007d7e <_dtoa_r+0xbca>
 8007d00:	2300      	movs	r3, #0
 8007d02:	220a      	movs	r2, #10
 8007d04:	9905      	ldr	r1, [sp, #20]
 8007d06:	0038      	movs	r0, r7
 8007d08:	f000 fc7e 	bl	8008608 <__multadd>
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	9005      	str	r0, [sp, #20]
 8007d10:	220a      	movs	r2, #10
 8007d12:	0021      	movs	r1, r4
 8007d14:	0038      	movs	r0, r7
 8007d16:	42ac      	cmp	r4, r5
 8007d18:	d106      	bne.n	8007d28 <_dtoa_r+0xb74>
 8007d1a:	f000 fc75 	bl	8008608 <__multadd>
 8007d1e:	0004      	movs	r4, r0
 8007d20:	0005      	movs	r5, r0
 8007d22:	9b08      	ldr	r3, [sp, #32]
 8007d24:	930a      	str	r3, [sp, #40]	; 0x28
 8007d26:	e778      	b.n	8007c1a <_dtoa_r+0xa66>
 8007d28:	f000 fc6e 	bl	8008608 <__multadd>
 8007d2c:	0029      	movs	r1, r5
 8007d2e:	0004      	movs	r4, r0
 8007d30:	2300      	movs	r3, #0
 8007d32:	220a      	movs	r2, #10
 8007d34:	0038      	movs	r0, r7
 8007d36:	f000 fc67 	bl	8008608 <__multadd>
 8007d3a:	0005      	movs	r5, r0
 8007d3c:	e7f1      	b.n	8007d22 <_dtoa_r+0xb6e>
 8007d3e:	9b07      	ldr	r3, [sp, #28]
 8007d40:	930c      	str	r3, [sp, #48]	; 0x30
 8007d42:	2400      	movs	r4, #0
 8007d44:	0031      	movs	r1, r6
 8007d46:	9805      	ldr	r0, [sp, #20]
 8007d48:	f7ff f9a8 	bl	800709c <quorem>
 8007d4c:	9b06      	ldr	r3, [sp, #24]
 8007d4e:	3030      	adds	r0, #48	; 0x30
 8007d50:	5518      	strb	r0, [r3, r4]
 8007d52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d54:	3401      	adds	r4, #1
 8007d56:	9007      	str	r0, [sp, #28]
 8007d58:	42a3      	cmp	r3, r4
 8007d5a:	dd07      	ble.n	8007d6c <_dtoa_r+0xbb8>
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	220a      	movs	r2, #10
 8007d60:	0038      	movs	r0, r7
 8007d62:	9905      	ldr	r1, [sp, #20]
 8007d64:	f000 fc50 	bl	8008608 <__multadd>
 8007d68:	9005      	str	r0, [sp, #20]
 8007d6a:	e7eb      	b.n	8007d44 <_dtoa_r+0xb90>
 8007d6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d6e:	2001      	movs	r0, #1
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	dd00      	ble.n	8007d76 <_dtoa_r+0xbc2>
 8007d74:	0018      	movs	r0, r3
 8007d76:	2400      	movs	r4, #0
 8007d78:	9b06      	ldr	r3, [sp, #24]
 8007d7a:	181b      	adds	r3, r3, r0
 8007d7c:	9308      	str	r3, [sp, #32]
 8007d7e:	9905      	ldr	r1, [sp, #20]
 8007d80:	2201      	movs	r2, #1
 8007d82:	0038      	movs	r0, r7
 8007d84:	f000 fe3a 	bl	80089fc <__lshift>
 8007d88:	0031      	movs	r1, r6
 8007d8a:	9005      	str	r0, [sp, #20]
 8007d8c:	f000 fea4 	bl	8008ad8 <__mcmp>
 8007d90:	2800      	cmp	r0, #0
 8007d92:	dc9b      	bgt.n	8007ccc <_dtoa_r+0xb18>
 8007d94:	d102      	bne.n	8007d9c <_dtoa_r+0xbe8>
 8007d96:	9b07      	ldr	r3, [sp, #28]
 8007d98:	07db      	lsls	r3, r3, #31
 8007d9a:	d497      	bmi.n	8007ccc <_dtoa_r+0xb18>
 8007d9c:	9b08      	ldr	r3, [sp, #32]
 8007d9e:	9308      	str	r3, [sp, #32]
 8007da0:	3b01      	subs	r3, #1
 8007da2:	781a      	ldrb	r2, [r3, #0]
 8007da4:	2a30      	cmp	r2, #48	; 0x30
 8007da6:	d0fa      	beq.n	8007d9e <_dtoa_r+0xbea>
 8007da8:	e6db      	b.n	8007b62 <_dtoa_r+0x9ae>
 8007daa:	9a06      	ldr	r2, [sp, #24]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d18e      	bne.n	8007cce <_dtoa_r+0xb1a>
 8007db0:	9b02      	ldr	r3, [sp, #8]
 8007db2:	3301      	adds	r3, #1
 8007db4:	9302      	str	r3, [sp, #8]
 8007db6:	2331      	movs	r3, #49	; 0x31
 8007db8:	e799      	b.n	8007cee <_dtoa_r+0xb3a>
 8007dba:	4b09      	ldr	r3, [pc, #36]	; (8007de0 <_dtoa_r+0xc2c>)
 8007dbc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007dbe:	9306      	str	r3, [sp, #24]
 8007dc0:	4b08      	ldr	r3, [pc, #32]	; (8007de4 <_dtoa_r+0xc30>)
 8007dc2:	2a00      	cmp	r2, #0
 8007dc4:	d001      	beq.n	8007dca <_dtoa_r+0xc16>
 8007dc6:	f7ff fa3f 	bl	8007248 <_dtoa_r+0x94>
 8007dca:	f7ff fa3f 	bl	800724c <_dtoa_r+0x98>
 8007dce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	dcb6      	bgt.n	8007d42 <_dtoa_r+0xb8e>
 8007dd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	dd00      	ble.n	8007ddc <_dtoa_r+0xc28>
 8007dda:	e6ac      	b.n	8007b36 <_dtoa_r+0x982>
 8007ddc:	e7b1      	b.n	8007d42 <_dtoa_r+0xb8e>
 8007dde:	46c0      	nop			; (mov r8, r8)
 8007de0:	0800a291 	.word	0x0800a291
 8007de4:	0800a299 	.word	0x0800a299

08007de8 <rshift>:
 8007de8:	0002      	movs	r2, r0
 8007dea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dec:	6904      	ldr	r4, [r0, #16]
 8007dee:	3214      	adds	r2, #20
 8007df0:	0013      	movs	r3, r2
 8007df2:	b085      	sub	sp, #20
 8007df4:	114f      	asrs	r7, r1, #5
 8007df6:	42bc      	cmp	r4, r7
 8007df8:	dd31      	ble.n	8007e5e <rshift+0x76>
 8007dfa:	00bb      	lsls	r3, r7, #2
 8007dfc:	18d3      	adds	r3, r2, r3
 8007dfe:	261f      	movs	r6, #31
 8007e00:	9301      	str	r3, [sp, #4]
 8007e02:	000b      	movs	r3, r1
 8007e04:	00a5      	lsls	r5, r4, #2
 8007e06:	4033      	ands	r3, r6
 8007e08:	1955      	adds	r5, r2, r5
 8007e0a:	9302      	str	r3, [sp, #8]
 8007e0c:	4231      	tst	r1, r6
 8007e0e:	d10c      	bne.n	8007e2a <rshift+0x42>
 8007e10:	0016      	movs	r6, r2
 8007e12:	9901      	ldr	r1, [sp, #4]
 8007e14:	428d      	cmp	r5, r1
 8007e16:	d838      	bhi.n	8007e8a <rshift+0xa2>
 8007e18:	9901      	ldr	r1, [sp, #4]
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	3903      	subs	r1, #3
 8007e1e:	428d      	cmp	r5, r1
 8007e20:	d301      	bcc.n	8007e26 <rshift+0x3e>
 8007e22:	1be3      	subs	r3, r4, r7
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	18d3      	adds	r3, r2, r3
 8007e28:	e019      	b.n	8007e5e <rshift+0x76>
 8007e2a:	2120      	movs	r1, #32
 8007e2c:	9b02      	ldr	r3, [sp, #8]
 8007e2e:	9e01      	ldr	r6, [sp, #4]
 8007e30:	1acb      	subs	r3, r1, r3
 8007e32:	9303      	str	r3, [sp, #12]
 8007e34:	ce02      	ldmia	r6!, {r1}
 8007e36:	9b02      	ldr	r3, [sp, #8]
 8007e38:	4694      	mov	ip, r2
 8007e3a:	40d9      	lsrs	r1, r3
 8007e3c:	9100      	str	r1, [sp, #0]
 8007e3e:	42b5      	cmp	r5, r6
 8007e40:	d816      	bhi.n	8007e70 <rshift+0x88>
 8007e42:	9e01      	ldr	r6, [sp, #4]
 8007e44:	2300      	movs	r3, #0
 8007e46:	3601      	adds	r6, #1
 8007e48:	42b5      	cmp	r5, r6
 8007e4a:	d302      	bcc.n	8007e52 <rshift+0x6a>
 8007e4c:	1be3      	subs	r3, r4, r7
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	3b04      	subs	r3, #4
 8007e52:	9900      	ldr	r1, [sp, #0]
 8007e54:	18d3      	adds	r3, r2, r3
 8007e56:	6019      	str	r1, [r3, #0]
 8007e58:	2900      	cmp	r1, #0
 8007e5a:	d000      	beq.n	8007e5e <rshift+0x76>
 8007e5c:	3304      	adds	r3, #4
 8007e5e:	1a99      	subs	r1, r3, r2
 8007e60:	1089      	asrs	r1, r1, #2
 8007e62:	6101      	str	r1, [r0, #16]
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d101      	bne.n	8007e6c <rshift+0x84>
 8007e68:	2300      	movs	r3, #0
 8007e6a:	6143      	str	r3, [r0, #20]
 8007e6c:	b005      	add	sp, #20
 8007e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e70:	6833      	ldr	r3, [r6, #0]
 8007e72:	9903      	ldr	r1, [sp, #12]
 8007e74:	408b      	lsls	r3, r1
 8007e76:	9900      	ldr	r1, [sp, #0]
 8007e78:	4319      	orrs	r1, r3
 8007e7a:	4663      	mov	r3, ip
 8007e7c:	c302      	stmia	r3!, {r1}
 8007e7e:	469c      	mov	ip, r3
 8007e80:	ce02      	ldmia	r6!, {r1}
 8007e82:	9b02      	ldr	r3, [sp, #8]
 8007e84:	40d9      	lsrs	r1, r3
 8007e86:	9100      	str	r1, [sp, #0]
 8007e88:	e7d9      	b.n	8007e3e <rshift+0x56>
 8007e8a:	c908      	ldmia	r1!, {r3}
 8007e8c:	c608      	stmia	r6!, {r3}
 8007e8e:	e7c1      	b.n	8007e14 <rshift+0x2c>

08007e90 <__hexdig_fun>:
 8007e90:	0002      	movs	r2, r0
 8007e92:	3a30      	subs	r2, #48	; 0x30
 8007e94:	0003      	movs	r3, r0
 8007e96:	2a09      	cmp	r2, #9
 8007e98:	d802      	bhi.n	8007ea0 <__hexdig_fun+0x10>
 8007e9a:	3b20      	subs	r3, #32
 8007e9c:	b2d8      	uxtb	r0, r3
 8007e9e:	4770      	bx	lr
 8007ea0:	0002      	movs	r2, r0
 8007ea2:	3a61      	subs	r2, #97	; 0x61
 8007ea4:	2a05      	cmp	r2, #5
 8007ea6:	d801      	bhi.n	8007eac <__hexdig_fun+0x1c>
 8007ea8:	3b47      	subs	r3, #71	; 0x47
 8007eaa:	e7f7      	b.n	8007e9c <__hexdig_fun+0xc>
 8007eac:	001a      	movs	r2, r3
 8007eae:	3a41      	subs	r2, #65	; 0x41
 8007eb0:	2000      	movs	r0, #0
 8007eb2:	2a05      	cmp	r2, #5
 8007eb4:	d8f3      	bhi.n	8007e9e <__hexdig_fun+0xe>
 8007eb6:	3b27      	subs	r3, #39	; 0x27
 8007eb8:	e7f0      	b.n	8007e9c <__hexdig_fun+0xc>
	...

08007ebc <__gethex>:
 8007ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ebe:	b08d      	sub	sp, #52	; 0x34
 8007ec0:	930a      	str	r3, [sp, #40]	; 0x28
 8007ec2:	4bbf      	ldr	r3, [pc, #764]	; (80081c0 <__gethex+0x304>)
 8007ec4:	9005      	str	r0, [sp, #20]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	9109      	str	r1, [sp, #36]	; 0x24
 8007eca:	0018      	movs	r0, r3
 8007ecc:	9202      	str	r2, [sp, #8]
 8007ece:	9307      	str	r3, [sp, #28]
 8007ed0:	f7f8 f91a 	bl	8000108 <strlen>
 8007ed4:	2202      	movs	r2, #2
 8007ed6:	9b07      	ldr	r3, [sp, #28]
 8007ed8:	4252      	negs	r2, r2
 8007eda:	181b      	adds	r3, r3, r0
 8007edc:	3b01      	subs	r3, #1
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	9003      	str	r0, [sp, #12]
 8007ee2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ee6:	6819      	ldr	r1, [r3, #0]
 8007ee8:	1c8b      	adds	r3, r1, #2
 8007eea:	1a52      	subs	r2, r2, r1
 8007eec:	18d1      	adds	r1, r2, r3
 8007eee:	9301      	str	r3, [sp, #4]
 8007ef0:	9108      	str	r1, [sp, #32]
 8007ef2:	9901      	ldr	r1, [sp, #4]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	7808      	ldrb	r0, [r1, #0]
 8007ef8:	2830      	cmp	r0, #48	; 0x30
 8007efa:	d0f7      	beq.n	8007eec <__gethex+0x30>
 8007efc:	f7ff ffc8 	bl	8007e90 <__hexdig_fun>
 8007f00:	2300      	movs	r3, #0
 8007f02:	001c      	movs	r4, r3
 8007f04:	9304      	str	r3, [sp, #16]
 8007f06:	4298      	cmp	r0, r3
 8007f08:	d11f      	bne.n	8007f4a <__gethex+0x8e>
 8007f0a:	9a03      	ldr	r2, [sp, #12]
 8007f0c:	9907      	ldr	r1, [sp, #28]
 8007f0e:	9801      	ldr	r0, [sp, #4]
 8007f10:	f001 fa64 	bl	80093dc <strncmp>
 8007f14:	0007      	movs	r7, r0
 8007f16:	42a0      	cmp	r0, r4
 8007f18:	d000      	beq.n	8007f1c <__gethex+0x60>
 8007f1a:	e06b      	b.n	8007ff4 <__gethex+0x138>
 8007f1c:	9b01      	ldr	r3, [sp, #4]
 8007f1e:	9a03      	ldr	r2, [sp, #12]
 8007f20:	5c98      	ldrb	r0, [r3, r2]
 8007f22:	189d      	adds	r5, r3, r2
 8007f24:	f7ff ffb4 	bl	8007e90 <__hexdig_fun>
 8007f28:	2301      	movs	r3, #1
 8007f2a:	9304      	str	r3, [sp, #16]
 8007f2c:	42a0      	cmp	r0, r4
 8007f2e:	d030      	beq.n	8007f92 <__gethex+0xd6>
 8007f30:	9501      	str	r5, [sp, #4]
 8007f32:	9b01      	ldr	r3, [sp, #4]
 8007f34:	7818      	ldrb	r0, [r3, #0]
 8007f36:	2830      	cmp	r0, #48	; 0x30
 8007f38:	d009      	beq.n	8007f4e <__gethex+0x92>
 8007f3a:	f7ff ffa9 	bl	8007e90 <__hexdig_fun>
 8007f3e:	4242      	negs	r2, r0
 8007f40:	4142      	adcs	r2, r0
 8007f42:	2301      	movs	r3, #1
 8007f44:	002c      	movs	r4, r5
 8007f46:	9204      	str	r2, [sp, #16]
 8007f48:	9308      	str	r3, [sp, #32]
 8007f4a:	9d01      	ldr	r5, [sp, #4]
 8007f4c:	e004      	b.n	8007f58 <__gethex+0x9c>
 8007f4e:	9b01      	ldr	r3, [sp, #4]
 8007f50:	3301      	adds	r3, #1
 8007f52:	9301      	str	r3, [sp, #4]
 8007f54:	e7ed      	b.n	8007f32 <__gethex+0x76>
 8007f56:	3501      	adds	r5, #1
 8007f58:	7828      	ldrb	r0, [r5, #0]
 8007f5a:	f7ff ff99 	bl	8007e90 <__hexdig_fun>
 8007f5e:	1e07      	subs	r7, r0, #0
 8007f60:	d1f9      	bne.n	8007f56 <__gethex+0x9a>
 8007f62:	0028      	movs	r0, r5
 8007f64:	9a03      	ldr	r2, [sp, #12]
 8007f66:	9907      	ldr	r1, [sp, #28]
 8007f68:	f001 fa38 	bl	80093dc <strncmp>
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	d10e      	bne.n	8007f8e <__gethex+0xd2>
 8007f70:	2c00      	cmp	r4, #0
 8007f72:	d107      	bne.n	8007f84 <__gethex+0xc8>
 8007f74:	9b03      	ldr	r3, [sp, #12]
 8007f76:	18ed      	adds	r5, r5, r3
 8007f78:	002c      	movs	r4, r5
 8007f7a:	7828      	ldrb	r0, [r5, #0]
 8007f7c:	f7ff ff88 	bl	8007e90 <__hexdig_fun>
 8007f80:	2800      	cmp	r0, #0
 8007f82:	d102      	bne.n	8007f8a <__gethex+0xce>
 8007f84:	1b64      	subs	r4, r4, r5
 8007f86:	00a7      	lsls	r7, r4, #2
 8007f88:	e003      	b.n	8007f92 <__gethex+0xd6>
 8007f8a:	3501      	adds	r5, #1
 8007f8c:	e7f5      	b.n	8007f7a <__gethex+0xbe>
 8007f8e:	2c00      	cmp	r4, #0
 8007f90:	d1f8      	bne.n	8007f84 <__gethex+0xc8>
 8007f92:	2220      	movs	r2, #32
 8007f94:	782b      	ldrb	r3, [r5, #0]
 8007f96:	002e      	movs	r6, r5
 8007f98:	4393      	bics	r3, r2
 8007f9a:	2b50      	cmp	r3, #80	; 0x50
 8007f9c:	d11d      	bne.n	8007fda <__gethex+0x11e>
 8007f9e:	786b      	ldrb	r3, [r5, #1]
 8007fa0:	2b2b      	cmp	r3, #43	; 0x2b
 8007fa2:	d02c      	beq.n	8007ffe <__gethex+0x142>
 8007fa4:	2b2d      	cmp	r3, #45	; 0x2d
 8007fa6:	d02e      	beq.n	8008006 <__gethex+0x14a>
 8007fa8:	2300      	movs	r3, #0
 8007faa:	1c6e      	adds	r6, r5, #1
 8007fac:	9306      	str	r3, [sp, #24]
 8007fae:	7830      	ldrb	r0, [r6, #0]
 8007fb0:	f7ff ff6e 	bl	8007e90 <__hexdig_fun>
 8007fb4:	1e43      	subs	r3, r0, #1
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	2b18      	cmp	r3, #24
 8007fba:	d82b      	bhi.n	8008014 <__gethex+0x158>
 8007fbc:	3810      	subs	r0, #16
 8007fbe:	0004      	movs	r4, r0
 8007fc0:	7870      	ldrb	r0, [r6, #1]
 8007fc2:	f7ff ff65 	bl	8007e90 <__hexdig_fun>
 8007fc6:	1e43      	subs	r3, r0, #1
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	3601      	adds	r6, #1
 8007fcc:	2b18      	cmp	r3, #24
 8007fce:	d91c      	bls.n	800800a <__gethex+0x14e>
 8007fd0:	9b06      	ldr	r3, [sp, #24]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d000      	beq.n	8007fd8 <__gethex+0x11c>
 8007fd6:	4264      	negs	r4, r4
 8007fd8:	193f      	adds	r7, r7, r4
 8007fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fdc:	601e      	str	r6, [r3, #0]
 8007fde:	9b04      	ldr	r3, [sp, #16]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d019      	beq.n	8008018 <__gethex+0x15c>
 8007fe4:	2600      	movs	r6, #0
 8007fe6:	9b08      	ldr	r3, [sp, #32]
 8007fe8:	42b3      	cmp	r3, r6
 8007fea:	d100      	bne.n	8007fee <__gethex+0x132>
 8007fec:	3606      	adds	r6, #6
 8007fee:	0030      	movs	r0, r6
 8007ff0:	b00d      	add	sp, #52	; 0x34
 8007ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	2700      	movs	r7, #0
 8007ff8:	9d01      	ldr	r5, [sp, #4]
 8007ffa:	9304      	str	r3, [sp, #16]
 8007ffc:	e7c9      	b.n	8007f92 <__gethex+0xd6>
 8007ffe:	2300      	movs	r3, #0
 8008000:	9306      	str	r3, [sp, #24]
 8008002:	1cae      	adds	r6, r5, #2
 8008004:	e7d3      	b.n	8007fae <__gethex+0xf2>
 8008006:	2301      	movs	r3, #1
 8008008:	e7fa      	b.n	8008000 <__gethex+0x144>
 800800a:	230a      	movs	r3, #10
 800800c:	435c      	muls	r4, r3
 800800e:	1824      	adds	r4, r4, r0
 8008010:	3c10      	subs	r4, #16
 8008012:	e7d5      	b.n	8007fc0 <__gethex+0x104>
 8008014:	002e      	movs	r6, r5
 8008016:	e7e0      	b.n	8007fda <__gethex+0x11e>
 8008018:	9b01      	ldr	r3, [sp, #4]
 800801a:	9904      	ldr	r1, [sp, #16]
 800801c:	1aeb      	subs	r3, r5, r3
 800801e:	3b01      	subs	r3, #1
 8008020:	2b07      	cmp	r3, #7
 8008022:	dc0a      	bgt.n	800803a <__gethex+0x17e>
 8008024:	9805      	ldr	r0, [sp, #20]
 8008026:	f000 fa87 	bl	8008538 <_Balloc>
 800802a:	1e04      	subs	r4, r0, #0
 800802c:	d108      	bne.n	8008040 <__gethex+0x184>
 800802e:	0002      	movs	r2, r0
 8008030:	21de      	movs	r1, #222	; 0xde
 8008032:	4b64      	ldr	r3, [pc, #400]	; (80081c4 <__gethex+0x308>)
 8008034:	4864      	ldr	r0, [pc, #400]	; (80081c8 <__gethex+0x30c>)
 8008036:	f001 f9f1 	bl	800941c <__assert_func>
 800803a:	3101      	adds	r1, #1
 800803c:	105b      	asrs	r3, r3, #1
 800803e:	e7ef      	b.n	8008020 <__gethex+0x164>
 8008040:	0003      	movs	r3, r0
 8008042:	3314      	adds	r3, #20
 8008044:	9304      	str	r3, [sp, #16]
 8008046:	9309      	str	r3, [sp, #36]	; 0x24
 8008048:	2300      	movs	r3, #0
 800804a:	001e      	movs	r6, r3
 800804c:	9306      	str	r3, [sp, #24]
 800804e:	9b01      	ldr	r3, [sp, #4]
 8008050:	42ab      	cmp	r3, r5
 8008052:	d340      	bcc.n	80080d6 <__gethex+0x21a>
 8008054:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008056:	9b04      	ldr	r3, [sp, #16]
 8008058:	c540      	stmia	r5!, {r6}
 800805a:	1aed      	subs	r5, r5, r3
 800805c:	10ad      	asrs	r5, r5, #2
 800805e:	0030      	movs	r0, r6
 8008060:	6125      	str	r5, [r4, #16]
 8008062:	f000 fb61 	bl	8008728 <__hi0bits>
 8008066:	9b02      	ldr	r3, [sp, #8]
 8008068:	016d      	lsls	r5, r5, #5
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	1a2e      	subs	r6, r5, r0
 800806e:	9301      	str	r3, [sp, #4]
 8008070:	429e      	cmp	r6, r3
 8008072:	dd5a      	ble.n	800812a <__gethex+0x26e>
 8008074:	1af6      	subs	r6, r6, r3
 8008076:	0031      	movs	r1, r6
 8008078:	0020      	movs	r0, r4
 800807a:	f000 ff03 	bl	8008e84 <__any_on>
 800807e:	1e05      	subs	r5, r0, #0
 8008080:	d016      	beq.n	80080b0 <__gethex+0x1f4>
 8008082:	2501      	movs	r5, #1
 8008084:	211f      	movs	r1, #31
 8008086:	0028      	movs	r0, r5
 8008088:	1e73      	subs	r3, r6, #1
 800808a:	4019      	ands	r1, r3
 800808c:	4088      	lsls	r0, r1
 800808e:	0001      	movs	r1, r0
 8008090:	115a      	asrs	r2, r3, #5
 8008092:	9804      	ldr	r0, [sp, #16]
 8008094:	0092      	lsls	r2, r2, #2
 8008096:	5812      	ldr	r2, [r2, r0]
 8008098:	420a      	tst	r2, r1
 800809a:	d009      	beq.n	80080b0 <__gethex+0x1f4>
 800809c:	42ab      	cmp	r3, r5
 800809e:	dd06      	ble.n	80080ae <__gethex+0x1f2>
 80080a0:	0020      	movs	r0, r4
 80080a2:	1eb1      	subs	r1, r6, #2
 80080a4:	f000 feee 	bl	8008e84 <__any_on>
 80080a8:	3502      	adds	r5, #2
 80080aa:	2800      	cmp	r0, #0
 80080ac:	d100      	bne.n	80080b0 <__gethex+0x1f4>
 80080ae:	2502      	movs	r5, #2
 80080b0:	0031      	movs	r1, r6
 80080b2:	0020      	movs	r0, r4
 80080b4:	f7ff fe98 	bl	8007de8 <rshift>
 80080b8:	19bf      	adds	r7, r7, r6
 80080ba:	9b02      	ldr	r3, [sp, #8]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	9303      	str	r3, [sp, #12]
 80080c0:	42bb      	cmp	r3, r7
 80080c2:	da42      	bge.n	800814a <__gethex+0x28e>
 80080c4:	0021      	movs	r1, r4
 80080c6:	9805      	ldr	r0, [sp, #20]
 80080c8:	f000 fa7a 	bl	80085c0 <_Bfree>
 80080cc:	2300      	movs	r3, #0
 80080ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80080d0:	26a3      	movs	r6, #163	; 0xa3
 80080d2:	6013      	str	r3, [r2, #0]
 80080d4:	e78b      	b.n	8007fee <__gethex+0x132>
 80080d6:	1e6b      	subs	r3, r5, #1
 80080d8:	9308      	str	r3, [sp, #32]
 80080da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	4293      	cmp	r3, r2
 80080e0:	d014      	beq.n	800810c <__gethex+0x250>
 80080e2:	9b06      	ldr	r3, [sp, #24]
 80080e4:	2b20      	cmp	r3, #32
 80080e6:	d104      	bne.n	80080f2 <__gethex+0x236>
 80080e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ea:	c340      	stmia	r3!, {r6}
 80080ec:	2600      	movs	r6, #0
 80080ee:	9309      	str	r3, [sp, #36]	; 0x24
 80080f0:	9606      	str	r6, [sp, #24]
 80080f2:	9b08      	ldr	r3, [sp, #32]
 80080f4:	7818      	ldrb	r0, [r3, #0]
 80080f6:	f7ff fecb 	bl	8007e90 <__hexdig_fun>
 80080fa:	230f      	movs	r3, #15
 80080fc:	4018      	ands	r0, r3
 80080fe:	9b06      	ldr	r3, [sp, #24]
 8008100:	9d08      	ldr	r5, [sp, #32]
 8008102:	4098      	lsls	r0, r3
 8008104:	3304      	adds	r3, #4
 8008106:	4306      	orrs	r6, r0
 8008108:	9306      	str	r3, [sp, #24]
 800810a:	e7a0      	b.n	800804e <__gethex+0x192>
 800810c:	2301      	movs	r3, #1
 800810e:	9a03      	ldr	r2, [sp, #12]
 8008110:	1a9d      	subs	r5, r3, r2
 8008112:	9b08      	ldr	r3, [sp, #32]
 8008114:	195d      	adds	r5, r3, r5
 8008116:	9b01      	ldr	r3, [sp, #4]
 8008118:	429d      	cmp	r5, r3
 800811a:	d3e2      	bcc.n	80080e2 <__gethex+0x226>
 800811c:	0028      	movs	r0, r5
 800811e:	9907      	ldr	r1, [sp, #28]
 8008120:	f001 f95c 	bl	80093dc <strncmp>
 8008124:	2800      	cmp	r0, #0
 8008126:	d1dc      	bne.n	80080e2 <__gethex+0x226>
 8008128:	e791      	b.n	800804e <__gethex+0x192>
 800812a:	9b01      	ldr	r3, [sp, #4]
 800812c:	2500      	movs	r5, #0
 800812e:	429e      	cmp	r6, r3
 8008130:	dac3      	bge.n	80080ba <__gethex+0x1fe>
 8008132:	1b9e      	subs	r6, r3, r6
 8008134:	0021      	movs	r1, r4
 8008136:	0032      	movs	r2, r6
 8008138:	9805      	ldr	r0, [sp, #20]
 800813a:	f000 fc5f 	bl	80089fc <__lshift>
 800813e:	0003      	movs	r3, r0
 8008140:	3314      	adds	r3, #20
 8008142:	0004      	movs	r4, r0
 8008144:	1bbf      	subs	r7, r7, r6
 8008146:	9304      	str	r3, [sp, #16]
 8008148:	e7b7      	b.n	80080ba <__gethex+0x1fe>
 800814a:	9b02      	ldr	r3, [sp, #8]
 800814c:	685e      	ldr	r6, [r3, #4]
 800814e:	42be      	cmp	r6, r7
 8008150:	dd71      	ble.n	8008236 <__gethex+0x37a>
 8008152:	9b01      	ldr	r3, [sp, #4]
 8008154:	1bf6      	subs	r6, r6, r7
 8008156:	42b3      	cmp	r3, r6
 8008158:	dc38      	bgt.n	80081cc <__gethex+0x310>
 800815a:	9b02      	ldr	r3, [sp, #8]
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	2b02      	cmp	r3, #2
 8008160:	d026      	beq.n	80081b0 <__gethex+0x2f4>
 8008162:	2b03      	cmp	r3, #3
 8008164:	d028      	beq.n	80081b8 <__gethex+0x2fc>
 8008166:	2b01      	cmp	r3, #1
 8008168:	d119      	bne.n	800819e <__gethex+0x2e2>
 800816a:	9b01      	ldr	r3, [sp, #4]
 800816c:	42b3      	cmp	r3, r6
 800816e:	d116      	bne.n	800819e <__gethex+0x2e2>
 8008170:	2b01      	cmp	r3, #1
 8008172:	d10d      	bne.n	8008190 <__gethex+0x2d4>
 8008174:	9b02      	ldr	r3, [sp, #8]
 8008176:	2662      	movs	r6, #98	; 0x62
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	9301      	str	r3, [sp, #4]
 800817c:	9a01      	ldr	r2, [sp, #4]
 800817e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008180:	601a      	str	r2, [r3, #0]
 8008182:	2301      	movs	r3, #1
 8008184:	9a04      	ldr	r2, [sp, #16]
 8008186:	6123      	str	r3, [r4, #16]
 8008188:	6013      	str	r3, [r2, #0]
 800818a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800818c:	601c      	str	r4, [r3, #0]
 800818e:	e72e      	b.n	8007fee <__gethex+0x132>
 8008190:	9901      	ldr	r1, [sp, #4]
 8008192:	0020      	movs	r0, r4
 8008194:	3901      	subs	r1, #1
 8008196:	f000 fe75 	bl	8008e84 <__any_on>
 800819a:	2800      	cmp	r0, #0
 800819c:	d1ea      	bne.n	8008174 <__gethex+0x2b8>
 800819e:	0021      	movs	r1, r4
 80081a0:	9805      	ldr	r0, [sp, #20]
 80081a2:	f000 fa0d 	bl	80085c0 <_Bfree>
 80081a6:	2300      	movs	r3, #0
 80081a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80081aa:	2650      	movs	r6, #80	; 0x50
 80081ac:	6013      	str	r3, [r2, #0]
 80081ae:	e71e      	b.n	8007fee <__gethex+0x132>
 80081b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d1f3      	bne.n	800819e <__gethex+0x2e2>
 80081b6:	e7dd      	b.n	8008174 <__gethex+0x2b8>
 80081b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d1da      	bne.n	8008174 <__gethex+0x2b8>
 80081be:	e7ee      	b.n	800819e <__gethex+0x2e2>
 80081c0:	0800a388 	.word	0x0800a388
 80081c4:	0800a310 	.word	0x0800a310
 80081c8:	0800a321 	.word	0x0800a321
 80081cc:	1e77      	subs	r7, r6, #1
 80081ce:	2d00      	cmp	r5, #0
 80081d0:	d12f      	bne.n	8008232 <__gethex+0x376>
 80081d2:	2f00      	cmp	r7, #0
 80081d4:	d004      	beq.n	80081e0 <__gethex+0x324>
 80081d6:	0039      	movs	r1, r7
 80081d8:	0020      	movs	r0, r4
 80081da:	f000 fe53 	bl	8008e84 <__any_on>
 80081de:	0005      	movs	r5, r0
 80081e0:	231f      	movs	r3, #31
 80081e2:	117a      	asrs	r2, r7, #5
 80081e4:	401f      	ands	r7, r3
 80081e6:	3b1e      	subs	r3, #30
 80081e8:	40bb      	lsls	r3, r7
 80081ea:	9904      	ldr	r1, [sp, #16]
 80081ec:	0092      	lsls	r2, r2, #2
 80081ee:	5852      	ldr	r2, [r2, r1]
 80081f0:	421a      	tst	r2, r3
 80081f2:	d001      	beq.n	80081f8 <__gethex+0x33c>
 80081f4:	2302      	movs	r3, #2
 80081f6:	431d      	orrs	r5, r3
 80081f8:	9b01      	ldr	r3, [sp, #4]
 80081fa:	0031      	movs	r1, r6
 80081fc:	1b9b      	subs	r3, r3, r6
 80081fe:	2602      	movs	r6, #2
 8008200:	0020      	movs	r0, r4
 8008202:	9301      	str	r3, [sp, #4]
 8008204:	f7ff fdf0 	bl	8007de8 <rshift>
 8008208:	9b02      	ldr	r3, [sp, #8]
 800820a:	685f      	ldr	r7, [r3, #4]
 800820c:	2d00      	cmp	r5, #0
 800820e:	d041      	beq.n	8008294 <__gethex+0x3d8>
 8008210:	9b02      	ldr	r3, [sp, #8]
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	2b02      	cmp	r3, #2
 8008216:	d010      	beq.n	800823a <__gethex+0x37e>
 8008218:	2b03      	cmp	r3, #3
 800821a:	d012      	beq.n	8008242 <__gethex+0x386>
 800821c:	2b01      	cmp	r3, #1
 800821e:	d106      	bne.n	800822e <__gethex+0x372>
 8008220:	07aa      	lsls	r2, r5, #30
 8008222:	d504      	bpl.n	800822e <__gethex+0x372>
 8008224:	9a04      	ldr	r2, [sp, #16]
 8008226:	6810      	ldr	r0, [r2, #0]
 8008228:	4305      	orrs	r5, r0
 800822a:	421d      	tst	r5, r3
 800822c:	d10c      	bne.n	8008248 <__gethex+0x38c>
 800822e:	2310      	movs	r3, #16
 8008230:	e02f      	b.n	8008292 <__gethex+0x3d6>
 8008232:	2501      	movs	r5, #1
 8008234:	e7d4      	b.n	80081e0 <__gethex+0x324>
 8008236:	2601      	movs	r6, #1
 8008238:	e7e8      	b.n	800820c <__gethex+0x350>
 800823a:	2301      	movs	r3, #1
 800823c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800823e:	1a9b      	subs	r3, r3, r2
 8008240:	9313      	str	r3, [sp, #76]	; 0x4c
 8008242:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008244:	2b00      	cmp	r3, #0
 8008246:	d0f2      	beq.n	800822e <__gethex+0x372>
 8008248:	6923      	ldr	r3, [r4, #16]
 800824a:	2000      	movs	r0, #0
 800824c:	9303      	str	r3, [sp, #12]
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	9304      	str	r3, [sp, #16]
 8008252:	0023      	movs	r3, r4
 8008254:	9a04      	ldr	r2, [sp, #16]
 8008256:	3314      	adds	r3, #20
 8008258:	1899      	adds	r1, r3, r2
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	1c55      	adds	r5, r2, #1
 800825e:	d01e      	beq.n	800829e <__gethex+0x3e2>
 8008260:	3201      	adds	r2, #1
 8008262:	601a      	str	r2, [r3, #0]
 8008264:	0023      	movs	r3, r4
 8008266:	3314      	adds	r3, #20
 8008268:	2e02      	cmp	r6, #2
 800826a:	d140      	bne.n	80082ee <__gethex+0x432>
 800826c:	9a02      	ldr	r2, [sp, #8]
 800826e:	9901      	ldr	r1, [sp, #4]
 8008270:	6812      	ldr	r2, [r2, #0]
 8008272:	3a01      	subs	r2, #1
 8008274:	428a      	cmp	r2, r1
 8008276:	d10b      	bne.n	8008290 <__gethex+0x3d4>
 8008278:	114a      	asrs	r2, r1, #5
 800827a:	211f      	movs	r1, #31
 800827c:	9801      	ldr	r0, [sp, #4]
 800827e:	0092      	lsls	r2, r2, #2
 8008280:	4001      	ands	r1, r0
 8008282:	2001      	movs	r0, #1
 8008284:	0005      	movs	r5, r0
 8008286:	408d      	lsls	r5, r1
 8008288:	58d3      	ldr	r3, [r2, r3]
 800828a:	422b      	tst	r3, r5
 800828c:	d000      	beq.n	8008290 <__gethex+0x3d4>
 800828e:	2601      	movs	r6, #1
 8008290:	2320      	movs	r3, #32
 8008292:	431e      	orrs	r6, r3
 8008294:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008296:	601c      	str	r4, [r3, #0]
 8008298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800829a:	601f      	str	r7, [r3, #0]
 800829c:	e6a7      	b.n	8007fee <__gethex+0x132>
 800829e:	c301      	stmia	r3!, {r0}
 80082a0:	4299      	cmp	r1, r3
 80082a2:	d8da      	bhi.n	800825a <__gethex+0x39e>
 80082a4:	9b03      	ldr	r3, [sp, #12]
 80082a6:	68a2      	ldr	r2, [r4, #8]
 80082a8:	4293      	cmp	r3, r2
 80082aa:	db17      	blt.n	80082dc <__gethex+0x420>
 80082ac:	6863      	ldr	r3, [r4, #4]
 80082ae:	9805      	ldr	r0, [sp, #20]
 80082b0:	1c59      	adds	r1, r3, #1
 80082b2:	f000 f941 	bl	8008538 <_Balloc>
 80082b6:	1e05      	subs	r5, r0, #0
 80082b8:	d103      	bne.n	80082c2 <__gethex+0x406>
 80082ba:	0002      	movs	r2, r0
 80082bc:	2184      	movs	r1, #132	; 0x84
 80082be:	4b1c      	ldr	r3, [pc, #112]	; (8008330 <__gethex+0x474>)
 80082c0:	e6b8      	b.n	8008034 <__gethex+0x178>
 80082c2:	0021      	movs	r1, r4
 80082c4:	6923      	ldr	r3, [r4, #16]
 80082c6:	310c      	adds	r1, #12
 80082c8:	1c9a      	adds	r2, r3, #2
 80082ca:	0092      	lsls	r2, r2, #2
 80082cc:	300c      	adds	r0, #12
 80082ce:	f000 f92a 	bl	8008526 <memcpy>
 80082d2:	0021      	movs	r1, r4
 80082d4:	9805      	ldr	r0, [sp, #20]
 80082d6:	f000 f973 	bl	80085c0 <_Bfree>
 80082da:	002c      	movs	r4, r5
 80082dc:	6923      	ldr	r3, [r4, #16]
 80082de:	1c5a      	adds	r2, r3, #1
 80082e0:	6122      	str	r2, [r4, #16]
 80082e2:	2201      	movs	r2, #1
 80082e4:	3304      	adds	r3, #4
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	18e3      	adds	r3, r4, r3
 80082ea:	605a      	str	r2, [r3, #4]
 80082ec:	e7ba      	b.n	8008264 <__gethex+0x3a8>
 80082ee:	6922      	ldr	r2, [r4, #16]
 80082f0:	9903      	ldr	r1, [sp, #12]
 80082f2:	428a      	cmp	r2, r1
 80082f4:	dd09      	ble.n	800830a <__gethex+0x44e>
 80082f6:	2101      	movs	r1, #1
 80082f8:	0020      	movs	r0, r4
 80082fa:	f7ff fd75 	bl	8007de8 <rshift>
 80082fe:	9b02      	ldr	r3, [sp, #8]
 8008300:	3701      	adds	r7, #1
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	42bb      	cmp	r3, r7
 8008306:	dac2      	bge.n	800828e <__gethex+0x3d2>
 8008308:	e6dc      	b.n	80080c4 <__gethex+0x208>
 800830a:	221f      	movs	r2, #31
 800830c:	9d01      	ldr	r5, [sp, #4]
 800830e:	9901      	ldr	r1, [sp, #4]
 8008310:	2601      	movs	r6, #1
 8008312:	4015      	ands	r5, r2
 8008314:	4211      	tst	r1, r2
 8008316:	d0bb      	beq.n	8008290 <__gethex+0x3d4>
 8008318:	9a04      	ldr	r2, [sp, #16]
 800831a:	189b      	adds	r3, r3, r2
 800831c:	3b04      	subs	r3, #4
 800831e:	6818      	ldr	r0, [r3, #0]
 8008320:	f000 fa02 	bl	8008728 <__hi0bits>
 8008324:	2320      	movs	r3, #32
 8008326:	1b5d      	subs	r5, r3, r5
 8008328:	42a8      	cmp	r0, r5
 800832a:	dbe4      	blt.n	80082f6 <__gethex+0x43a>
 800832c:	e7b0      	b.n	8008290 <__gethex+0x3d4>
 800832e:	46c0      	nop			; (mov r8, r8)
 8008330:	0800a310 	.word	0x0800a310

08008334 <L_shift>:
 8008334:	2308      	movs	r3, #8
 8008336:	b570      	push	{r4, r5, r6, lr}
 8008338:	2520      	movs	r5, #32
 800833a:	1a9a      	subs	r2, r3, r2
 800833c:	0092      	lsls	r2, r2, #2
 800833e:	1aad      	subs	r5, r5, r2
 8008340:	6843      	ldr	r3, [r0, #4]
 8008342:	6806      	ldr	r6, [r0, #0]
 8008344:	001c      	movs	r4, r3
 8008346:	40ac      	lsls	r4, r5
 8008348:	40d3      	lsrs	r3, r2
 800834a:	4334      	orrs	r4, r6
 800834c:	6004      	str	r4, [r0, #0]
 800834e:	6043      	str	r3, [r0, #4]
 8008350:	3004      	adds	r0, #4
 8008352:	4288      	cmp	r0, r1
 8008354:	d3f4      	bcc.n	8008340 <L_shift+0xc>
 8008356:	bd70      	pop	{r4, r5, r6, pc}

08008358 <__match>:
 8008358:	b530      	push	{r4, r5, lr}
 800835a:	6803      	ldr	r3, [r0, #0]
 800835c:	780c      	ldrb	r4, [r1, #0]
 800835e:	3301      	adds	r3, #1
 8008360:	2c00      	cmp	r4, #0
 8008362:	d102      	bne.n	800836a <__match+0x12>
 8008364:	6003      	str	r3, [r0, #0]
 8008366:	2001      	movs	r0, #1
 8008368:	bd30      	pop	{r4, r5, pc}
 800836a:	781a      	ldrb	r2, [r3, #0]
 800836c:	0015      	movs	r5, r2
 800836e:	3d41      	subs	r5, #65	; 0x41
 8008370:	2d19      	cmp	r5, #25
 8008372:	d800      	bhi.n	8008376 <__match+0x1e>
 8008374:	3220      	adds	r2, #32
 8008376:	3101      	adds	r1, #1
 8008378:	42a2      	cmp	r2, r4
 800837a:	d0ef      	beq.n	800835c <__match+0x4>
 800837c:	2000      	movs	r0, #0
 800837e:	e7f3      	b.n	8008368 <__match+0x10>

08008380 <__hexnan>:
 8008380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008382:	680b      	ldr	r3, [r1, #0]
 8008384:	b08b      	sub	sp, #44	; 0x2c
 8008386:	9201      	str	r2, [sp, #4]
 8008388:	9901      	ldr	r1, [sp, #4]
 800838a:	115a      	asrs	r2, r3, #5
 800838c:	0092      	lsls	r2, r2, #2
 800838e:	188a      	adds	r2, r1, r2
 8008390:	9202      	str	r2, [sp, #8]
 8008392:	0019      	movs	r1, r3
 8008394:	221f      	movs	r2, #31
 8008396:	4011      	ands	r1, r2
 8008398:	9008      	str	r0, [sp, #32]
 800839a:	9106      	str	r1, [sp, #24]
 800839c:	4213      	tst	r3, r2
 800839e:	d002      	beq.n	80083a6 <__hexnan+0x26>
 80083a0:	9b02      	ldr	r3, [sp, #8]
 80083a2:	3304      	adds	r3, #4
 80083a4:	9302      	str	r3, [sp, #8]
 80083a6:	9b02      	ldr	r3, [sp, #8]
 80083a8:	2500      	movs	r5, #0
 80083aa:	1f1e      	subs	r6, r3, #4
 80083ac:	0037      	movs	r7, r6
 80083ae:	0034      	movs	r4, r6
 80083b0:	9b08      	ldr	r3, [sp, #32]
 80083b2:	6035      	str	r5, [r6, #0]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	9507      	str	r5, [sp, #28]
 80083b8:	9305      	str	r3, [sp, #20]
 80083ba:	9503      	str	r5, [sp, #12]
 80083bc:	9b05      	ldr	r3, [sp, #20]
 80083be:	3301      	adds	r3, #1
 80083c0:	9309      	str	r3, [sp, #36]	; 0x24
 80083c2:	9b05      	ldr	r3, [sp, #20]
 80083c4:	785b      	ldrb	r3, [r3, #1]
 80083c6:	9304      	str	r3, [sp, #16]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d028      	beq.n	800841e <__hexnan+0x9e>
 80083cc:	9804      	ldr	r0, [sp, #16]
 80083ce:	f7ff fd5f 	bl	8007e90 <__hexdig_fun>
 80083d2:	2800      	cmp	r0, #0
 80083d4:	d154      	bne.n	8008480 <__hexnan+0x100>
 80083d6:	9b04      	ldr	r3, [sp, #16]
 80083d8:	2b20      	cmp	r3, #32
 80083da:	d819      	bhi.n	8008410 <__hexnan+0x90>
 80083dc:	9b03      	ldr	r3, [sp, #12]
 80083de:	9a07      	ldr	r2, [sp, #28]
 80083e0:	4293      	cmp	r3, r2
 80083e2:	dd12      	ble.n	800840a <__hexnan+0x8a>
 80083e4:	42bc      	cmp	r4, r7
 80083e6:	d206      	bcs.n	80083f6 <__hexnan+0x76>
 80083e8:	2d07      	cmp	r5, #7
 80083ea:	dc04      	bgt.n	80083f6 <__hexnan+0x76>
 80083ec:	002a      	movs	r2, r5
 80083ee:	0039      	movs	r1, r7
 80083f0:	0020      	movs	r0, r4
 80083f2:	f7ff ff9f 	bl	8008334 <L_shift>
 80083f6:	9b01      	ldr	r3, [sp, #4]
 80083f8:	2508      	movs	r5, #8
 80083fa:	429c      	cmp	r4, r3
 80083fc:	d905      	bls.n	800840a <__hexnan+0x8a>
 80083fe:	1f27      	subs	r7, r4, #4
 8008400:	2500      	movs	r5, #0
 8008402:	003c      	movs	r4, r7
 8008404:	9b03      	ldr	r3, [sp, #12]
 8008406:	603d      	str	r5, [r7, #0]
 8008408:	9307      	str	r3, [sp, #28]
 800840a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800840c:	9305      	str	r3, [sp, #20]
 800840e:	e7d5      	b.n	80083bc <__hexnan+0x3c>
 8008410:	9b04      	ldr	r3, [sp, #16]
 8008412:	2b29      	cmp	r3, #41	; 0x29
 8008414:	d159      	bne.n	80084ca <__hexnan+0x14a>
 8008416:	9b05      	ldr	r3, [sp, #20]
 8008418:	9a08      	ldr	r2, [sp, #32]
 800841a:	3302      	adds	r3, #2
 800841c:	6013      	str	r3, [r2, #0]
 800841e:	9b03      	ldr	r3, [sp, #12]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d052      	beq.n	80084ca <__hexnan+0x14a>
 8008424:	42bc      	cmp	r4, r7
 8008426:	d206      	bcs.n	8008436 <__hexnan+0xb6>
 8008428:	2d07      	cmp	r5, #7
 800842a:	dc04      	bgt.n	8008436 <__hexnan+0xb6>
 800842c:	002a      	movs	r2, r5
 800842e:	0039      	movs	r1, r7
 8008430:	0020      	movs	r0, r4
 8008432:	f7ff ff7f 	bl	8008334 <L_shift>
 8008436:	9b01      	ldr	r3, [sp, #4]
 8008438:	429c      	cmp	r4, r3
 800843a:	d935      	bls.n	80084a8 <__hexnan+0x128>
 800843c:	001a      	movs	r2, r3
 800843e:	0023      	movs	r3, r4
 8008440:	cb02      	ldmia	r3!, {r1}
 8008442:	c202      	stmia	r2!, {r1}
 8008444:	429e      	cmp	r6, r3
 8008446:	d2fb      	bcs.n	8008440 <__hexnan+0xc0>
 8008448:	9b02      	ldr	r3, [sp, #8]
 800844a:	1c61      	adds	r1, r4, #1
 800844c:	1eda      	subs	r2, r3, #3
 800844e:	2304      	movs	r3, #4
 8008450:	4291      	cmp	r1, r2
 8008452:	d805      	bhi.n	8008460 <__hexnan+0xe0>
 8008454:	9b02      	ldr	r3, [sp, #8]
 8008456:	3b04      	subs	r3, #4
 8008458:	1b1b      	subs	r3, r3, r4
 800845a:	089b      	lsrs	r3, r3, #2
 800845c:	3301      	adds	r3, #1
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	9a01      	ldr	r2, [sp, #4]
 8008462:	18d3      	adds	r3, r2, r3
 8008464:	2200      	movs	r2, #0
 8008466:	c304      	stmia	r3!, {r2}
 8008468:	429e      	cmp	r6, r3
 800846a:	d2fc      	bcs.n	8008466 <__hexnan+0xe6>
 800846c:	6833      	ldr	r3, [r6, #0]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d104      	bne.n	800847c <__hexnan+0xfc>
 8008472:	9b01      	ldr	r3, [sp, #4]
 8008474:	429e      	cmp	r6, r3
 8008476:	d126      	bne.n	80084c6 <__hexnan+0x146>
 8008478:	2301      	movs	r3, #1
 800847a:	6033      	str	r3, [r6, #0]
 800847c:	2005      	movs	r0, #5
 800847e:	e025      	b.n	80084cc <__hexnan+0x14c>
 8008480:	9b03      	ldr	r3, [sp, #12]
 8008482:	3501      	adds	r5, #1
 8008484:	3301      	adds	r3, #1
 8008486:	9303      	str	r3, [sp, #12]
 8008488:	2d08      	cmp	r5, #8
 800848a:	dd06      	ble.n	800849a <__hexnan+0x11a>
 800848c:	9b01      	ldr	r3, [sp, #4]
 800848e:	429c      	cmp	r4, r3
 8008490:	d9bb      	bls.n	800840a <__hexnan+0x8a>
 8008492:	2300      	movs	r3, #0
 8008494:	2501      	movs	r5, #1
 8008496:	3c04      	subs	r4, #4
 8008498:	6023      	str	r3, [r4, #0]
 800849a:	220f      	movs	r2, #15
 800849c:	6823      	ldr	r3, [r4, #0]
 800849e:	4010      	ands	r0, r2
 80084a0:	011b      	lsls	r3, r3, #4
 80084a2:	4318      	orrs	r0, r3
 80084a4:	6020      	str	r0, [r4, #0]
 80084a6:	e7b0      	b.n	800840a <__hexnan+0x8a>
 80084a8:	9b06      	ldr	r3, [sp, #24]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d0de      	beq.n	800846c <__hexnan+0xec>
 80084ae:	2120      	movs	r1, #32
 80084b0:	9a06      	ldr	r2, [sp, #24]
 80084b2:	9b02      	ldr	r3, [sp, #8]
 80084b4:	1a89      	subs	r1, r1, r2
 80084b6:	2201      	movs	r2, #1
 80084b8:	4252      	negs	r2, r2
 80084ba:	40ca      	lsrs	r2, r1
 80084bc:	3b04      	subs	r3, #4
 80084be:	6819      	ldr	r1, [r3, #0]
 80084c0:	400a      	ands	r2, r1
 80084c2:	601a      	str	r2, [r3, #0]
 80084c4:	e7d2      	b.n	800846c <__hexnan+0xec>
 80084c6:	3e04      	subs	r6, #4
 80084c8:	e7d0      	b.n	800846c <__hexnan+0xec>
 80084ca:	2004      	movs	r0, #4
 80084cc:	b00b      	add	sp, #44	; 0x2c
 80084ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080084d0 <_localeconv_r>:
 80084d0:	4800      	ldr	r0, [pc, #0]	; (80084d4 <_localeconv_r+0x4>)
 80084d2:	4770      	bx	lr
 80084d4:	20000164 	.word	0x20000164

080084d8 <malloc>:
 80084d8:	b510      	push	{r4, lr}
 80084da:	4b03      	ldr	r3, [pc, #12]	; (80084e8 <malloc+0x10>)
 80084dc:	0001      	movs	r1, r0
 80084de:	6818      	ldr	r0, [r3, #0]
 80084e0:	f000 fd8c 	bl	8008ffc <_malloc_r>
 80084e4:	bd10      	pop	{r4, pc}
 80084e6:	46c0      	nop			; (mov r8, r8)
 80084e8:	2000000c 	.word	0x2000000c

080084ec <__ascii_mbtowc>:
 80084ec:	b082      	sub	sp, #8
 80084ee:	2900      	cmp	r1, #0
 80084f0:	d100      	bne.n	80084f4 <__ascii_mbtowc+0x8>
 80084f2:	a901      	add	r1, sp, #4
 80084f4:	1e10      	subs	r0, r2, #0
 80084f6:	d006      	beq.n	8008506 <__ascii_mbtowc+0x1a>
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d006      	beq.n	800850a <__ascii_mbtowc+0x1e>
 80084fc:	7813      	ldrb	r3, [r2, #0]
 80084fe:	600b      	str	r3, [r1, #0]
 8008500:	7810      	ldrb	r0, [r2, #0]
 8008502:	1e43      	subs	r3, r0, #1
 8008504:	4198      	sbcs	r0, r3
 8008506:	b002      	add	sp, #8
 8008508:	4770      	bx	lr
 800850a:	2002      	movs	r0, #2
 800850c:	4240      	negs	r0, r0
 800850e:	e7fa      	b.n	8008506 <__ascii_mbtowc+0x1a>

08008510 <memchr>:
 8008510:	b2c9      	uxtb	r1, r1
 8008512:	1882      	adds	r2, r0, r2
 8008514:	4290      	cmp	r0, r2
 8008516:	d101      	bne.n	800851c <memchr+0xc>
 8008518:	2000      	movs	r0, #0
 800851a:	4770      	bx	lr
 800851c:	7803      	ldrb	r3, [r0, #0]
 800851e:	428b      	cmp	r3, r1
 8008520:	d0fb      	beq.n	800851a <memchr+0xa>
 8008522:	3001      	adds	r0, #1
 8008524:	e7f6      	b.n	8008514 <memchr+0x4>

08008526 <memcpy>:
 8008526:	2300      	movs	r3, #0
 8008528:	b510      	push	{r4, lr}
 800852a:	429a      	cmp	r2, r3
 800852c:	d100      	bne.n	8008530 <memcpy+0xa>
 800852e:	bd10      	pop	{r4, pc}
 8008530:	5ccc      	ldrb	r4, [r1, r3]
 8008532:	54c4      	strb	r4, [r0, r3]
 8008534:	3301      	adds	r3, #1
 8008536:	e7f8      	b.n	800852a <memcpy+0x4>

08008538 <_Balloc>:
 8008538:	b570      	push	{r4, r5, r6, lr}
 800853a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800853c:	0006      	movs	r6, r0
 800853e:	000c      	movs	r4, r1
 8008540:	2d00      	cmp	r5, #0
 8008542:	d10e      	bne.n	8008562 <_Balloc+0x2a>
 8008544:	2010      	movs	r0, #16
 8008546:	f7ff ffc7 	bl	80084d8 <malloc>
 800854a:	1e02      	subs	r2, r0, #0
 800854c:	6270      	str	r0, [r6, #36]	; 0x24
 800854e:	d104      	bne.n	800855a <_Balloc+0x22>
 8008550:	2166      	movs	r1, #102	; 0x66
 8008552:	4b19      	ldr	r3, [pc, #100]	; (80085b8 <_Balloc+0x80>)
 8008554:	4819      	ldr	r0, [pc, #100]	; (80085bc <_Balloc+0x84>)
 8008556:	f000 ff61 	bl	800941c <__assert_func>
 800855a:	6045      	str	r5, [r0, #4]
 800855c:	6085      	str	r5, [r0, #8]
 800855e:	6005      	str	r5, [r0, #0]
 8008560:	60c5      	str	r5, [r0, #12]
 8008562:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8008564:	68eb      	ldr	r3, [r5, #12]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d013      	beq.n	8008592 <_Balloc+0x5a>
 800856a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800856c:	00a2      	lsls	r2, r4, #2
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	189b      	adds	r3, r3, r2
 8008572:	6818      	ldr	r0, [r3, #0]
 8008574:	2800      	cmp	r0, #0
 8008576:	d118      	bne.n	80085aa <_Balloc+0x72>
 8008578:	2101      	movs	r1, #1
 800857a:	000d      	movs	r5, r1
 800857c:	40a5      	lsls	r5, r4
 800857e:	1d6a      	adds	r2, r5, #5
 8008580:	0030      	movs	r0, r6
 8008582:	0092      	lsls	r2, r2, #2
 8008584:	f000 fca1 	bl	8008eca <_calloc_r>
 8008588:	2800      	cmp	r0, #0
 800858a:	d00c      	beq.n	80085a6 <_Balloc+0x6e>
 800858c:	6044      	str	r4, [r0, #4]
 800858e:	6085      	str	r5, [r0, #8]
 8008590:	e00d      	b.n	80085ae <_Balloc+0x76>
 8008592:	2221      	movs	r2, #33	; 0x21
 8008594:	2104      	movs	r1, #4
 8008596:	0030      	movs	r0, r6
 8008598:	f000 fc97 	bl	8008eca <_calloc_r>
 800859c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800859e:	60e8      	str	r0, [r5, #12]
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1e1      	bne.n	800856a <_Balloc+0x32>
 80085a6:	2000      	movs	r0, #0
 80085a8:	bd70      	pop	{r4, r5, r6, pc}
 80085aa:	6802      	ldr	r2, [r0, #0]
 80085ac:	601a      	str	r2, [r3, #0]
 80085ae:	2300      	movs	r3, #0
 80085b0:	6103      	str	r3, [r0, #16]
 80085b2:	60c3      	str	r3, [r0, #12]
 80085b4:	e7f8      	b.n	80085a8 <_Balloc+0x70>
 80085b6:	46c0      	nop			; (mov r8, r8)
 80085b8:	0800a29e 	.word	0x0800a29e
 80085bc:	0800a39c 	.word	0x0800a39c

080085c0 <_Bfree>:
 80085c0:	b570      	push	{r4, r5, r6, lr}
 80085c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80085c4:	0005      	movs	r5, r0
 80085c6:	000c      	movs	r4, r1
 80085c8:	2e00      	cmp	r6, #0
 80085ca:	d10e      	bne.n	80085ea <_Bfree+0x2a>
 80085cc:	2010      	movs	r0, #16
 80085ce:	f7ff ff83 	bl	80084d8 <malloc>
 80085d2:	1e02      	subs	r2, r0, #0
 80085d4:	6268      	str	r0, [r5, #36]	; 0x24
 80085d6:	d104      	bne.n	80085e2 <_Bfree+0x22>
 80085d8:	218a      	movs	r1, #138	; 0x8a
 80085da:	4b09      	ldr	r3, [pc, #36]	; (8008600 <_Bfree+0x40>)
 80085dc:	4809      	ldr	r0, [pc, #36]	; (8008604 <_Bfree+0x44>)
 80085de:	f000 ff1d 	bl	800941c <__assert_func>
 80085e2:	6046      	str	r6, [r0, #4]
 80085e4:	6086      	str	r6, [r0, #8]
 80085e6:	6006      	str	r6, [r0, #0]
 80085e8:	60c6      	str	r6, [r0, #12]
 80085ea:	2c00      	cmp	r4, #0
 80085ec:	d007      	beq.n	80085fe <_Bfree+0x3e>
 80085ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80085f0:	6862      	ldr	r2, [r4, #4]
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	0092      	lsls	r2, r2, #2
 80085f6:	189b      	adds	r3, r3, r2
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	6022      	str	r2, [r4, #0]
 80085fc:	601c      	str	r4, [r3, #0]
 80085fe:	bd70      	pop	{r4, r5, r6, pc}
 8008600:	0800a29e 	.word	0x0800a29e
 8008604:	0800a39c 	.word	0x0800a39c

08008608 <__multadd>:
 8008608:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800860a:	000e      	movs	r6, r1
 800860c:	9001      	str	r0, [sp, #4]
 800860e:	000c      	movs	r4, r1
 8008610:	001d      	movs	r5, r3
 8008612:	2000      	movs	r0, #0
 8008614:	690f      	ldr	r7, [r1, #16]
 8008616:	3614      	adds	r6, #20
 8008618:	6833      	ldr	r3, [r6, #0]
 800861a:	3001      	adds	r0, #1
 800861c:	b299      	uxth	r1, r3
 800861e:	4351      	muls	r1, r2
 8008620:	0c1b      	lsrs	r3, r3, #16
 8008622:	4353      	muls	r3, r2
 8008624:	1949      	adds	r1, r1, r5
 8008626:	0c0d      	lsrs	r5, r1, #16
 8008628:	195b      	adds	r3, r3, r5
 800862a:	0c1d      	lsrs	r5, r3, #16
 800862c:	b289      	uxth	r1, r1
 800862e:	041b      	lsls	r3, r3, #16
 8008630:	185b      	adds	r3, r3, r1
 8008632:	c608      	stmia	r6!, {r3}
 8008634:	4287      	cmp	r7, r0
 8008636:	dcef      	bgt.n	8008618 <__multadd+0x10>
 8008638:	2d00      	cmp	r5, #0
 800863a:	d022      	beq.n	8008682 <__multadd+0x7a>
 800863c:	68a3      	ldr	r3, [r4, #8]
 800863e:	42bb      	cmp	r3, r7
 8008640:	dc19      	bgt.n	8008676 <__multadd+0x6e>
 8008642:	6863      	ldr	r3, [r4, #4]
 8008644:	9801      	ldr	r0, [sp, #4]
 8008646:	1c59      	adds	r1, r3, #1
 8008648:	f7ff ff76 	bl	8008538 <_Balloc>
 800864c:	1e06      	subs	r6, r0, #0
 800864e:	d105      	bne.n	800865c <__multadd+0x54>
 8008650:	0002      	movs	r2, r0
 8008652:	21b5      	movs	r1, #181	; 0xb5
 8008654:	4b0c      	ldr	r3, [pc, #48]	; (8008688 <__multadd+0x80>)
 8008656:	480d      	ldr	r0, [pc, #52]	; (800868c <__multadd+0x84>)
 8008658:	f000 fee0 	bl	800941c <__assert_func>
 800865c:	0021      	movs	r1, r4
 800865e:	6923      	ldr	r3, [r4, #16]
 8008660:	310c      	adds	r1, #12
 8008662:	1c9a      	adds	r2, r3, #2
 8008664:	0092      	lsls	r2, r2, #2
 8008666:	300c      	adds	r0, #12
 8008668:	f7ff ff5d 	bl	8008526 <memcpy>
 800866c:	0021      	movs	r1, r4
 800866e:	9801      	ldr	r0, [sp, #4]
 8008670:	f7ff ffa6 	bl	80085c0 <_Bfree>
 8008674:	0034      	movs	r4, r6
 8008676:	1d3b      	adds	r3, r7, #4
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	18e3      	adds	r3, r4, r3
 800867c:	605d      	str	r5, [r3, #4]
 800867e:	1c7b      	adds	r3, r7, #1
 8008680:	6123      	str	r3, [r4, #16]
 8008682:	0020      	movs	r0, r4
 8008684:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008686:	46c0      	nop			; (mov r8, r8)
 8008688:	0800a310 	.word	0x0800a310
 800868c:	0800a39c 	.word	0x0800a39c

08008690 <__s2b>:
 8008690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008692:	0006      	movs	r6, r0
 8008694:	0018      	movs	r0, r3
 8008696:	000c      	movs	r4, r1
 8008698:	3008      	adds	r0, #8
 800869a:	2109      	movs	r1, #9
 800869c:	9301      	str	r3, [sp, #4]
 800869e:	0015      	movs	r5, r2
 80086a0:	f7f7 fdd8 	bl	8000254 <__divsi3>
 80086a4:	2301      	movs	r3, #1
 80086a6:	2100      	movs	r1, #0
 80086a8:	4283      	cmp	r3, r0
 80086aa:	db0a      	blt.n	80086c2 <__s2b+0x32>
 80086ac:	0030      	movs	r0, r6
 80086ae:	f7ff ff43 	bl	8008538 <_Balloc>
 80086b2:	1e01      	subs	r1, r0, #0
 80086b4:	d108      	bne.n	80086c8 <__s2b+0x38>
 80086b6:	0002      	movs	r2, r0
 80086b8:	4b19      	ldr	r3, [pc, #100]	; (8008720 <__s2b+0x90>)
 80086ba:	481a      	ldr	r0, [pc, #104]	; (8008724 <__s2b+0x94>)
 80086bc:	31ce      	adds	r1, #206	; 0xce
 80086be:	f000 fead 	bl	800941c <__assert_func>
 80086c2:	005b      	lsls	r3, r3, #1
 80086c4:	3101      	adds	r1, #1
 80086c6:	e7ef      	b.n	80086a8 <__s2b+0x18>
 80086c8:	9b08      	ldr	r3, [sp, #32]
 80086ca:	6143      	str	r3, [r0, #20]
 80086cc:	2301      	movs	r3, #1
 80086ce:	6103      	str	r3, [r0, #16]
 80086d0:	2d09      	cmp	r5, #9
 80086d2:	dd18      	ble.n	8008706 <__s2b+0x76>
 80086d4:	0023      	movs	r3, r4
 80086d6:	3309      	adds	r3, #9
 80086d8:	001f      	movs	r7, r3
 80086da:	9300      	str	r3, [sp, #0]
 80086dc:	1964      	adds	r4, r4, r5
 80086de:	783b      	ldrb	r3, [r7, #0]
 80086e0:	220a      	movs	r2, #10
 80086e2:	0030      	movs	r0, r6
 80086e4:	3b30      	subs	r3, #48	; 0x30
 80086e6:	f7ff ff8f 	bl	8008608 <__multadd>
 80086ea:	3701      	adds	r7, #1
 80086ec:	0001      	movs	r1, r0
 80086ee:	42a7      	cmp	r7, r4
 80086f0:	d1f5      	bne.n	80086de <__s2b+0x4e>
 80086f2:	002c      	movs	r4, r5
 80086f4:	9b00      	ldr	r3, [sp, #0]
 80086f6:	3c08      	subs	r4, #8
 80086f8:	191c      	adds	r4, r3, r4
 80086fa:	002f      	movs	r7, r5
 80086fc:	9b01      	ldr	r3, [sp, #4]
 80086fe:	429f      	cmp	r7, r3
 8008700:	db04      	blt.n	800870c <__s2b+0x7c>
 8008702:	0008      	movs	r0, r1
 8008704:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008706:	2509      	movs	r5, #9
 8008708:	340a      	adds	r4, #10
 800870a:	e7f6      	b.n	80086fa <__s2b+0x6a>
 800870c:	1b63      	subs	r3, r4, r5
 800870e:	5ddb      	ldrb	r3, [r3, r7]
 8008710:	220a      	movs	r2, #10
 8008712:	0030      	movs	r0, r6
 8008714:	3b30      	subs	r3, #48	; 0x30
 8008716:	f7ff ff77 	bl	8008608 <__multadd>
 800871a:	3701      	adds	r7, #1
 800871c:	0001      	movs	r1, r0
 800871e:	e7ed      	b.n	80086fc <__s2b+0x6c>
 8008720:	0800a310 	.word	0x0800a310
 8008724:	0800a39c 	.word	0x0800a39c

08008728 <__hi0bits>:
 8008728:	0003      	movs	r3, r0
 800872a:	0c02      	lsrs	r2, r0, #16
 800872c:	2000      	movs	r0, #0
 800872e:	4282      	cmp	r2, r0
 8008730:	d101      	bne.n	8008736 <__hi0bits+0xe>
 8008732:	041b      	lsls	r3, r3, #16
 8008734:	3010      	adds	r0, #16
 8008736:	0e1a      	lsrs	r2, r3, #24
 8008738:	d101      	bne.n	800873e <__hi0bits+0x16>
 800873a:	3008      	adds	r0, #8
 800873c:	021b      	lsls	r3, r3, #8
 800873e:	0f1a      	lsrs	r2, r3, #28
 8008740:	d101      	bne.n	8008746 <__hi0bits+0x1e>
 8008742:	3004      	adds	r0, #4
 8008744:	011b      	lsls	r3, r3, #4
 8008746:	0f9a      	lsrs	r2, r3, #30
 8008748:	d101      	bne.n	800874e <__hi0bits+0x26>
 800874a:	3002      	adds	r0, #2
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	2b00      	cmp	r3, #0
 8008750:	db03      	blt.n	800875a <__hi0bits+0x32>
 8008752:	3001      	adds	r0, #1
 8008754:	005b      	lsls	r3, r3, #1
 8008756:	d400      	bmi.n	800875a <__hi0bits+0x32>
 8008758:	2020      	movs	r0, #32
 800875a:	4770      	bx	lr

0800875c <__lo0bits>:
 800875c:	6803      	ldr	r3, [r0, #0]
 800875e:	0002      	movs	r2, r0
 8008760:	2107      	movs	r1, #7
 8008762:	0018      	movs	r0, r3
 8008764:	4008      	ands	r0, r1
 8008766:	420b      	tst	r3, r1
 8008768:	d00d      	beq.n	8008786 <__lo0bits+0x2a>
 800876a:	3906      	subs	r1, #6
 800876c:	2000      	movs	r0, #0
 800876e:	420b      	tst	r3, r1
 8008770:	d105      	bne.n	800877e <__lo0bits+0x22>
 8008772:	3002      	adds	r0, #2
 8008774:	4203      	tst	r3, r0
 8008776:	d003      	beq.n	8008780 <__lo0bits+0x24>
 8008778:	40cb      	lsrs	r3, r1
 800877a:	0008      	movs	r0, r1
 800877c:	6013      	str	r3, [r2, #0]
 800877e:	4770      	bx	lr
 8008780:	089b      	lsrs	r3, r3, #2
 8008782:	6013      	str	r3, [r2, #0]
 8008784:	e7fb      	b.n	800877e <__lo0bits+0x22>
 8008786:	b299      	uxth	r1, r3
 8008788:	2900      	cmp	r1, #0
 800878a:	d101      	bne.n	8008790 <__lo0bits+0x34>
 800878c:	2010      	movs	r0, #16
 800878e:	0c1b      	lsrs	r3, r3, #16
 8008790:	b2d9      	uxtb	r1, r3
 8008792:	2900      	cmp	r1, #0
 8008794:	d101      	bne.n	800879a <__lo0bits+0x3e>
 8008796:	3008      	adds	r0, #8
 8008798:	0a1b      	lsrs	r3, r3, #8
 800879a:	0719      	lsls	r1, r3, #28
 800879c:	d101      	bne.n	80087a2 <__lo0bits+0x46>
 800879e:	3004      	adds	r0, #4
 80087a0:	091b      	lsrs	r3, r3, #4
 80087a2:	0799      	lsls	r1, r3, #30
 80087a4:	d101      	bne.n	80087aa <__lo0bits+0x4e>
 80087a6:	3002      	adds	r0, #2
 80087a8:	089b      	lsrs	r3, r3, #2
 80087aa:	07d9      	lsls	r1, r3, #31
 80087ac:	d4e9      	bmi.n	8008782 <__lo0bits+0x26>
 80087ae:	3001      	adds	r0, #1
 80087b0:	085b      	lsrs	r3, r3, #1
 80087b2:	d1e6      	bne.n	8008782 <__lo0bits+0x26>
 80087b4:	2020      	movs	r0, #32
 80087b6:	e7e2      	b.n	800877e <__lo0bits+0x22>

080087b8 <__i2b>:
 80087b8:	b510      	push	{r4, lr}
 80087ba:	000c      	movs	r4, r1
 80087bc:	2101      	movs	r1, #1
 80087be:	f7ff febb 	bl	8008538 <_Balloc>
 80087c2:	2800      	cmp	r0, #0
 80087c4:	d106      	bne.n	80087d4 <__i2b+0x1c>
 80087c6:	21a0      	movs	r1, #160	; 0xa0
 80087c8:	0002      	movs	r2, r0
 80087ca:	4b04      	ldr	r3, [pc, #16]	; (80087dc <__i2b+0x24>)
 80087cc:	4804      	ldr	r0, [pc, #16]	; (80087e0 <__i2b+0x28>)
 80087ce:	0049      	lsls	r1, r1, #1
 80087d0:	f000 fe24 	bl	800941c <__assert_func>
 80087d4:	2301      	movs	r3, #1
 80087d6:	6144      	str	r4, [r0, #20]
 80087d8:	6103      	str	r3, [r0, #16]
 80087da:	bd10      	pop	{r4, pc}
 80087dc:	0800a310 	.word	0x0800a310
 80087e0:	0800a39c 	.word	0x0800a39c

080087e4 <__multiply>:
 80087e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087e6:	690b      	ldr	r3, [r1, #16]
 80087e8:	0014      	movs	r4, r2
 80087ea:	6912      	ldr	r2, [r2, #16]
 80087ec:	000d      	movs	r5, r1
 80087ee:	b089      	sub	sp, #36	; 0x24
 80087f0:	4293      	cmp	r3, r2
 80087f2:	da01      	bge.n	80087f8 <__multiply+0x14>
 80087f4:	0025      	movs	r5, r4
 80087f6:	000c      	movs	r4, r1
 80087f8:	692f      	ldr	r7, [r5, #16]
 80087fa:	6926      	ldr	r6, [r4, #16]
 80087fc:	6869      	ldr	r1, [r5, #4]
 80087fe:	19bb      	adds	r3, r7, r6
 8008800:	9302      	str	r3, [sp, #8]
 8008802:	68ab      	ldr	r3, [r5, #8]
 8008804:	19ba      	adds	r2, r7, r6
 8008806:	4293      	cmp	r3, r2
 8008808:	da00      	bge.n	800880c <__multiply+0x28>
 800880a:	3101      	adds	r1, #1
 800880c:	f7ff fe94 	bl	8008538 <_Balloc>
 8008810:	9001      	str	r0, [sp, #4]
 8008812:	2800      	cmp	r0, #0
 8008814:	d106      	bne.n	8008824 <__multiply+0x40>
 8008816:	215e      	movs	r1, #94	; 0x5e
 8008818:	0002      	movs	r2, r0
 800881a:	4b48      	ldr	r3, [pc, #288]	; (800893c <__multiply+0x158>)
 800881c:	4848      	ldr	r0, [pc, #288]	; (8008940 <__multiply+0x15c>)
 800881e:	31ff      	adds	r1, #255	; 0xff
 8008820:	f000 fdfc 	bl	800941c <__assert_func>
 8008824:	9b01      	ldr	r3, [sp, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	3314      	adds	r3, #20
 800882a:	469c      	mov	ip, r3
 800882c:	19bb      	adds	r3, r7, r6
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	4463      	add	r3, ip
 8008832:	9303      	str	r3, [sp, #12]
 8008834:	4663      	mov	r3, ip
 8008836:	9903      	ldr	r1, [sp, #12]
 8008838:	428b      	cmp	r3, r1
 800883a:	d32c      	bcc.n	8008896 <__multiply+0xb2>
 800883c:	002b      	movs	r3, r5
 800883e:	0022      	movs	r2, r4
 8008840:	3314      	adds	r3, #20
 8008842:	00bf      	lsls	r7, r7, #2
 8008844:	3214      	adds	r2, #20
 8008846:	9306      	str	r3, [sp, #24]
 8008848:	00b6      	lsls	r6, r6, #2
 800884a:	19db      	adds	r3, r3, r7
 800884c:	9304      	str	r3, [sp, #16]
 800884e:	1993      	adds	r3, r2, r6
 8008850:	9307      	str	r3, [sp, #28]
 8008852:	2304      	movs	r3, #4
 8008854:	9305      	str	r3, [sp, #20]
 8008856:	002b      	movs	r3, r5
 8008858:	9904      	ldr	r1, [sp, #16]
 800885a:	3315      	adds	r3, #21
 800885c:	9200      	str	r2, [sp, #0]
 800885e:	4299      	cmp	r1, r3
 8008860:	d305      	bcc.n	800886e <__multiply+0x8a>
 8008862:	1b4b      	subs	r3, r1, r5
 8008864:	3b15      	subs	r3, #21
 8008866:	089b      	lsrs	r3, r3, #2
 8008868:	3301      	adds	r3, #1
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	9305      	str	r3, [sp, #20]
 800886e:	9b07      	ldr	r3, [sp, #28]
 8008870:	9a00      	ldr	r2, [sp, #0]
 8008872:	429a      	cmp	r2, r3
 8008874:	d311      	bcc.n	800889a <__multiply+0xb6>
 8008876:	9b02      	ldr	r3, [sp, #8]
 8008878:	2b00      	cmp	r3, #0
 800887a:	dd06      	ble.n	800888a <__multiply+0xa6>
 800887c:	9b03      	ldr	r3, [sp, #12]
 800887e:	3b04      	subs	r3, #4
 8008880:	9303      	str	r3, [sp, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	9300      	str	r3, [sp, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d053      	beq.n	8008932 <__multiply+0x14e>
 800888a:	9b01      	ldr	r3, [sp, #4]
 800888c:	9a02      	ldr	r2, [sp, #8]
 800888e:	0018      	movs	r0, r3
 8008890:	611a      	str	r2, [r3, #16]
 8008892:	b009      	add	sp, #36	; 0x24
 8008894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008896:	c304      	stmia	r3!, {r2}
 8008898:	e7cd      	b.n	8008836 <__multiply+0x52>
 800889a:	9b00      	ldr	r3, [sp, #0]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	b298      	uxth	r0, r3
 80088a0:	2800      	cmp	r0, #0
 80088a2:	d01b      	beq.n	80088dc <__multiply+0xf8>
 80088a4:	4667      	mov	r7, ip
 80088a6:	2400      	movs	r4, #0
 80088a8:	9e06      	ldr	r6, [sp, #24]
 80088aa:	ce02      	ldmia	r6!, {r1}
 80088ac:	683a      	ldr	r2, [r7, #0]
 80088ae:	b28b      	uxth	r3, r1
 80088b0:	4343      	muls	r3, r0
 80088b2:	b292      	uxth	r2, r2
 80088b4:	189b      	adds	r3, r3, r2
 80088b6:	191b      	adds	r3, r3, r4
 80088b8:	0c0c      	lsrs	r4, r1, #16
 80088ba:	4344      	muls	r4, r0
 80088bc:	683a      	ldr	r2, [r7, #0]
 80088be:	0c11      	lsrs	r1, r2, #16
 80088c0:	1861      	adds	r1, r4, r1
 80088c2:	0c1c      	lsrs	r4, r3, #16
 80088c4:	1909      	adds	r1, r1, r4
 80088c6:	0c0c      	lsrs	r4, r1, #16
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	0409      	lsls	r1, r1, #16
 80088cc:	430b      	orrs	r3, r1
 80088ce:	c708      	stmia	r7!, {r3}
 80088d0:	9b04      	ldr	r3, [sp, #16]
 80088d2:	42b3      	cmp	r3, r6
 80088d4:	d8e9      	bhi.n	80088aa <__multiply+0xc6>
 80088d6:	4663      	mov	r3, ip
 80088d8:	9a05      	ldr	r2, [sp, #20]
 80088da:	509c      	str	r4, [r3, r2]
 80088dc:	9b00      	ldr	r3, [sp, #0]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	0c1e      	lsrs	r6, r3, #16
 80088e2:	d020      	beq.n	8008926 <__multiply+0x142>
 80088e4:	4663      	mov	r3, ip
 80088e6:	002c      	movs	r4, r5
 80088e8:	4660      	mov	r0, ip
 80088ea:	2700      	movs	r7, #0
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	3414      	adds	r4, #20
 80088f0:	6822      	ldr	r2, [r4, #0]
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	b291      	uxth	r1, r2
 80088f6:	4371      	muls	r1, r6
 80088f8:	6802      	ldr	r2, [r0, #0]
 80088fa:	0c12      	lsrs	r2, r2, #16
 80088fc:	1889      	adds	r1, r1, r2
 80088fe:	19cf      	adds	r7, r1, r7
 8008900:	0439      	lsls	r1, r7, #16
 8008902:	430b      	orrs	r3, r1
 8008904:	6003      	str	r3, [r0, #0]
 8008906:	cc02      	ldmia	r4!, {r1}
 8008908:	6843      	ldr	r3, [r0, #4]
 800890a:	0c09      	lsrs	r1, r1, #16
 800890c:	4371      	muls	r1, r6
 800890e:	b29b      	uxth	r3, r3
 8008910:	0c3f      	lsrs	r7, r7, #16
 8008912:	18cb      	adds	r3, r1, r3
 8008914:	9a04      	ldr	r2, [sp, #16]
 8008916:	19db      	adds	r3, r3, r7
 8008918:	0c1f      	lsrs	r7, r3, #16
 800891a:	3004      	adds	r0, #4
 800891c:	42a2      	cmp	r2, r4
 800891e:	d8e7      	bhi.n	80088f0 <__multiply+0x10c>
 8008920:	4662      	mov	r2, ip
 8008922:	9905      	ldr	r1, [sp, #20]
 8008924:	5053      	str	r3, [r2, r1]
 8008926:	9b00      	ldr	r3, [sp, #0]
 8008928:	3304      	adds	r3, #4
 800892a:	9300      	str	r3, [sp, #0]
 800892c:	2304      	movs	r3, #4
 800892e:	449c      	add	ip, r3
 8008930:	e79d      	b.n	800886e <__multiply+0x8a>
 8008932:	9b02      	ldr	r3, [sp, #8]
 8008934:	3b01      	subs	r3, #1
 8008936:	9302      	str	r3, [sp, #8]
 8008938:	e79d      	b.n	8008876 <__multiply+0x92>
 800893a:	46c0      	nop			; (mov r8, r8)
 800893c:	0800a310 	.word	0x0800a310
 8008940:	0800a39c 	.word	0x0800a39c

08008944 <__pow5mult>:
 8008944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008946:	2303      	movs	r3, #3
 8008948:	0015      	movs	r5, r2
 800894a:	0007      	movs	r7, r0
 800894c:	000e      	movs	r6, r1
 800894e:	401a      	ands	r2, r3
 8008950:	421d      	tst	r5, r3
 8008952:	d008      	beq.n	8008966 <__pow5mult+0x22>
 8008954:	4925      	ldr	r1, [pc, #148]	; (80089ec <__pow5mult+0xa8>)
 8008956:	3a01      	subs	r2, #1
 8008958:	0092      	lsls	r2, r2, #2
 800895a:	5852      	ldr	r2, [r2, r1]
 800895c:	2300      	movs	r3, #0
 800895e:	0031      	movs	r1, r6
 8008960:	f7ff fe52 	bl	8008608 <__multadd>
 8008964:	0006      	movs	r6, r0
 8008966:	10ad      	asrs	r5, r5, #2
 8008968:	d03d      	beq.n	80089e6 <__pow5mult+0xa2>
 800896a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800896c:	2c00      	cmp	r4, #0
 800896e:	d10f      	bne.n	8008990 <__pow5mult+0x4c>
 8008970:	2010      	movs	r0, #16
 8008972:	f7ff fdb1 	bl	80084d8 <malloc>
 8008976:	1e02      	subs	r2, r0, #0
 8008978:	6278      	str	r0, [r7, #36]	; 0x24
 800897a:	d105      	bne.n	8008988 <__pow5mult+0x44>
 800897c:	21d7      	movs	r1, #215	; 0xd7
 800897e:	4b1c      	ldr	r3, [pc, #112]	; (80089f0 <__pow5mult+0xac>)
 8008980:	481c      	ldr	r0, [pc, #112]	; (80089f4 <__pow5mult+0xb0>)
 8008982:	0049      	lsls	r1, r1, #1
 8008984:	f000 fd4a 	bl	800941c <__assert_func>
 8008988:	6044      	str	r4, [r0, #4]
 800898a:	6084      	str	r4, [r0, #8]
 800898c:	6004      	str	r4, [r0, #0]
 800898e:	60c4      	str	r4, [r0, #12]
 8008990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008992:	689c      	ldr	r4, [r3, #8]
 8008994:	9301      	str	r3, [sp, #4]
 8008996:	2c00      	cmp	r4, #0
 8008998:	d108      	bne.n	80089ac <__pow5mult+0x68>
 800899a:	0038      	movs	r0, r7
 800899c:	4916      	ldr	r1, [pc, #88]	; (80089f8 <__pow5mult+0xb4>)
 800899e:	f7ff ff0b 	bl	80087b8 <__i2b>
 80089a2:	9b01      	ldr	r3, [sp, #4]
 80089a4:	0004      	movs	r4, r0
 80089a6:	6098      	str	r0, [r3, #8]
 80089a8:	2300      	movs	r3, #0
 80089aa:	6003      	str	r3, [r0, #0]
 80089ac:	2301      	movs	r3, #1
 80089ae:	421d      	tst	r5, r3
 80089b0:	d00a      	beq.n	80089c8 <__pow5mult+0x84>
 80089b2:	0031      	movs	r1, r6
 80089b4:	0022      	movs	r2, r4
 80089b6:	0038      	movs	r0, r7
 80089b8:	f7ff ff14 	bl	80087e4 <__multiply>
 80089bc:	0031      	movs	r1, r6
 80089be:	9001      	str	r0, [sp, #4]
 80089c0:	0038      	movs	r0, r7
 80089c2:	f7ff fdfd 	bl	80085c0 <_Bfree>
 80089c6:	9e01      	ldr	r6, [sp, #4]
 80089c8:	106d      	asrs	r5, r5, #1
 80089ca:	d00c      	beq.n	80089e6 <__pow5mult+0xa2>
 80089cc:	6820      	ldr	r0, [r4, #0]
 80089ce:	2800      	cmp	r0, #0
 80089d0:	d107      	bne.n	80089e2 <__pow5mult+0x9e>
 80089d2:	0022      	movs	r2, r4
 80089d4:	0021      	movs	r1, r4
 80089d6:	0038      	movs	r0, r7
 80089d8:	f7ff ff04 	bl	80087e4 <__multiply>
 80089dc:	2300      	movs	r3, #0
 80089de:	6020      	str	r0, [r4, #0]
 80089e0:	6003      	str	r3, [r0, #0]
 80089e2:	0004      	movs	r4, r0
 80089e4:	e7e2      	b.n	80089ac <__pow5mult+0x68>
 80089e6:	0030      	movs	r0, r6
 80089e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80089ea:	46c0      	nop			; (mov r8, r8)
 80089ec:	0800a4e8 	.word	0x0800a4e8
 80089f0:	0800a29e 	.word	0x0800a29e
 80089f4:	0800a39c 	.word	0x0800a39c
 80089f8:	00000271 	.word	0x00000271

080089fc <__lshift>:
 80089fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089fe:	000c      	movs	r4, r1
 8008a00:	0017      	movs	r7, r2
 8008a02:	6923      	ldr	r3, [r4, #16]
 8008a04:	1155      	asrs	r5, r2, #5
 8008a06:	b087      	sub	sp, #28
 8008a08:	18eb      	adds	r3, r5, r3
 8008a0a:	9302      	str	r3, [sp, #8]
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	9301      	str	r3, [sp, #4]
 8008a10:	6849      	ldr	r1, [r1, #4]
 8008a12:	68a3      	ldr	r3, [r4, #8]
 8008a14:	9004      	str	r0, [sp, #16]
 8008a16:	9a01      	ldr	r2, [sp, #4]
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	db10      	blt.n	8008a3e <__lshift+0x42>
 8008a1c:	9804      	ldr	r0, [sp, #16]
 8008a1e:	f7ff fd8b 	bl	8008538 <_Balloc>
 8008a22:	2300      	movs	r3, #0
 8008a24:	0002      	movs	r2, r0
 8008a26:	0006      	movs	r6, r0
 8008a28:	0019      	movs	r1, r3
 8008a2a:	3214      	adds	r2, #20
 8008a2c:	4298      	cmp	r0, r3
 8008a2e:	d10c      	bne.n	8008a4a <__lshift+0x4e>
 8008a30:	21da      	movs	r1, #218	; 0xda
 8008a32:	0002      	movs	r2, r0
 8008a34:	4b26      	ldr	r3, [pc, #152]	; (8008ad0 <__lshift+0xd4>)
 8008a36:	4827      	ldr	r0, [pc, #156]	; (8008ad4 <__lshift+0xd8>)
 8008a38:	31ff      	adds	r1, #255	; 0xff
 8008a3a:	f000 fcef 	bl	800941c <__assert_func>
 8008a3e:	3101      	adds	r1, #1
 8008a40:	005b      	lsls	r3, r3, #1
 8008a42:	e7e8      	b.n	8008a16 <__lshift+0x1a>
 8008a44:	0098      	lsls	r0, r3, #2
 8008a46:	5011      	str	r1, [r2, r0]
 8008a48:	3301      	adds	r3, #1
 8008a4a:	42ab      	cmp	r3, r5
 8008a4c:	dbfa      	blt.n	8008a44 <__lshift+0x48>
 8008a4e:	43eb      	mvns	r3, r5
 8008a50:	17db      	asrs	r3, r3, #31
 8008a52:	401d      	ands	r5, r3
 8008a54:	211f      	movs	r1, #31
 8008a56:	0023      	movs	r3, r4
 8008a58:	0038      	movs	r0, r7
 8008a5a:	00ad      	lsls	r5, r5, #2
 8008a5c:	1955      	adds	r5, r2, r5
 8008a5e:	6922      	ldr	r2, [r4, #16]
 8008a60:	3314      	adds	r3, #20
 8008a62:	0092      	lsls	r2, r2, #2
 8008a64:	4008      	ands	r0, r1
 8008a66:	4684      	mov	ip, r0
 8008a68:	189a      	adds	r2, r3, r2
 8008a6a:	420f      	tst	r7, r1
 8008a6c:	d02a      	beq.n	8008ac4 <__lshift+0xc8>
 8008a6e:	3101      	adds	r1, #1
 8008a70:	1a09      	subs	r1, r1, r0
 8008a72:	9105      	str	r1, [sp, #20]
 8008a74:	2100      	movs	r1, #0
 8008a76:	9503      	str	r5, [sp, #12]
 8008a78:	4667      	mov	r7, ip
 8008a7a:	6818      	ldr	r0, [r3, #0]
 8008a7c:	40b8      	lsls	r0, r7
 8008a7e:	4301      	orrs	r1, r0
 8008a80:	9803      	ldr	r0, [sp, #12]
 8008a82:	c002      	stmia	r0!, {r1}
 8008a84:	cb02      	ldmia	r3!, {r1}
 8008a86:	9003      	str	r0, [sp, #12]
 8008a88:	9805      	ldr	r0, [sp, #20]
 8008a8a:	40c1      	lsrs	r1, r0
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d8f3      	bhi.n	8008a78 <__lshift+0x7c>
 8008a90:	0020      	movs	r0, r4
 8008a92:	3015      	adds	r0, #21
 8008a94:	2304      	movs	r3, #4
 8008a96:	4282      	cmp	r2, r0
 8008a98:	d304      	bcc.n	8008aa4 <__lshift+0xa8>
 8008a9a:	1b13      	subs	r3, r2, r4
 8008a9c:	3b15      	subs	r3, #21
 8008a9e:	089b      	lsrs	r3, r3, #2
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	50e9      	str	r1, [r5, r3]
 8008aa6:	2900      	cmp	r1, #0
 8008aa8:	d002      	beq.n	8008ab0 <__lshift+0xb4>
 8008aaa:	9b02      	ldr	r3, [sp, #8]
 8008aac:	3302      	adds	r3, #2
 8008aae:	9301      	str	r3, [sp, #4]
 8008ab0:	9b01      	ldr	r3, [sp, #4]
 8008ab2:	9804      	ldr	r0, [sp, #16]
 8008ab4:	3b01      	subs	r3, #1
 8008ab6:	0021      	movs	r1, r4
 8008ab8:	6133      	str	r3, [r6, #16]
 8008aba:	f7ff fd81 	bl	80085c0 <_Bfree>
 8008abe:	0030      	movs	r0, r6
 8008ac0:	b007      	add	sp, #28
 8008ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ac4:	cb02      	ldmia	r3!, {r1}
 8008ac6:	c502      	stmia	r5!, {r1}
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d8fb      	bhi.n	8008ac4 <__lshift+0xc8>
 8008acc:	e7f0      	b.n	8008ab0 <__lshift+0xb4>
 8008ace:	46c0      	nop			; (mov r8, r8)
 8008ad0:	0800a310 	.word	0x0800a310
 8008ad4:	0800a39c 	.word	0x0800a39c

08008ad8 <__mcmp>:
 8008ad8:	6902      	ldr	r2, [r0, #16]
 8008ada:	690b      	ldr	r3, [r1, #16]
 8008adc:	b530      	push	{r4, r5, lr}
 8008ade:	0004      	movs	r4, r0
 8008ae0:	1ad0      	subs	r0, r2, r3
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d10d      	bne.n	8008b02 <__mcmp+0x2a>
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	3414      	adds	r4, #20
 8008aea:	3114      	adds	r1, #20
 8008aec:	18e2      	adds	r2, r4, r3
 8008aee:	18c9      	adds	r1, r1, r3
 8008af0:	3a04      	subs	r2, #4
 8008af2:	3904      	subs	r1, #4
 8008af4:	6815      	ldr	r5, [r2, #0]
 8008af6:	680b      	ldr	r3, [r1, #0]
 8008af8:	429d      	cmp	r5, r3
 8008afa:	d003      	beq.n	8008b04 <__mcmp+0x2c>
 8008afc:	2001      	movs	r0, #1
 8008afe:	429d      	cmp	r5, r3
 8008b00:	d303      	bcc.n	8008b0a <__mcmp+0x32>
 8008b02:	bd30      	pop	{r4, r5, pc}
 8008b04:	4294      	cmp	r4, r2
 8008b06:	d3f3      	bcc.n	8008af0 <__mcmp+0x18>
 8008b08:	e7fb      	b.n	8008b02 <__mcmp+0x2a>
 8008b0a:	4240      	negs	r0, r0
 8008b0c:	e7f9      	b.n	8008b02 <__mcmp+0x2a>
	...

08008b10 <__mdiff>:
 8008b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b12:	000e      	movs	r6, r1
 8008b14:	0007      	movs	r7, r0
 8008b16:	0011      	movs	r1, r2
 8008b18:	0030      	movs	r0, r6
 8008b1a:	b087      	sub	sp, #28
 8008b1c:	0014      	movs	r4, r2
 8008b1e:	f7ff ffdb 	bl	8008ad8 <__mcmp>
 8008b22:	1e05      	subs	r5, r0, #0
 8008b24:	d110      	bne.n	8008b48 <__mdiff+0x38>
 8008b26:	0001      	movs	r1, r0
 8008b28:	0038      	movs	r0, r7
 8008b2a:	f7ff fd05 	bl	8008538 <_Balloc>
 8008b2e:	1e02      	subs	r2, r0, #0
 8008b30:	d104      	bne.n	8008b3c <__mdiff+0x2c>
 8008b32:	4b40      	ldr	r3, [pc, #256]	; (8008c34 <__mdiff+0x124>)
 8008b34:	4940      	ldr	r1, [pc, #256]	; (8008c38 <__mdiff+0x128>)
 8008b36:	4841      	ldr	r0, [pc, #260]	; (8008c3c <__mdiff+0x12c>)
 8008b38:	f000 fc70 	bl	800941c <__assert_func>
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	6145      	str	r5, [r0, #20]
 8008b40:	6103      	str	r3, [r0, #16]
 8008b42:	0010      	movs	r0, r2
 8008b44:	b007      	add	sp, #28
 8008b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b48:	2301      	movs	r3, #1
 8008b4a:	9301      	str	r3, [sp, #4]
 8008b4c:	2800      	cmp	r0, #0
 8008b4e:	db04      	blt.n	8008b5a <__mdiff+0x4a>
 8008b50:	0023      	movs	r3, r4
 8008b52:	0034      	movs	r4, r6
 8008b54:	001e      	movs	r6, r3
 8008b56:	2300      	movs	r3, #0
 8008b58:	9301      	str	r3, [sp, #4]
 8008b5a:	0038      	movs	r0, r7
 8008b5c:	6861      	ldr	r1, [r4, #4]
 8008b5e:	f7ff fceb 	bl	8008538 <_Balloc>
 8008b62:	1e02      	subs	r2, r0, #0
 8008b64:	d103      	bne.n	8008b6e <__mdiff+0x5e>
 8008b66:	2190      	movs	r1, #144	; 0x90
 8008b68:	4b32      	ldr	r3, [pc, #200]	; (8008c34 <__mdiff+0x124>)
 8008b6a:	0089      	lsls	r1, r1, #2
 8008b6c:	e7e3      	b.n	8008b36 <__mdiff+0x26>
 8008b6e:	9b01      	ldr	r3, [sp, #4]
 8008b70:	2700      	movs	r7, #0
 8008b72:	60c3      	str	r3, [r0, #12]
 8008b74:	6920      	ldr	r0, [r4, #16]
 8008b76:	3414      	adds	r4, #20
 8008b78:	9401      	str	r4, [sp, #4]
 8008b7a:	9b01      	ldr	r3, [sp, #4]
 8008b7c:	0084      	lsls	r4, r0, #2
 8008b7e:	191b      	adds	r3, r3, r4
 8008b80:	0034      	movs	r4, r6
 8008b82:	9302      	str	r3, [sp, #8]
 8008b84:	6933      	ldr	r3, [r6, #16]
 8008b86:	3414      	adds	r4, #20
 8008b88:	0099      	lsls	r1, r3, #2
 8008b8a:	1863      	adds	r3, r4, r1
 8008b8c:	9303      	str	r3, [sp, #12]
 8008b8e:	0013      	movs	r3, r2
 8008b90:	3314      	adds	r3, #20
 8008b92:	469c      	mov	ip, r3
 8008b94:	9305      	str	r3, [sp, #20]
 8008b96:	9b01      	ldr	r3, [sp, #4]
 8008b98:	9304      	str	r3, [sp, #16]
 8008b9a:	9b04      	ldr	r3, [sp, #16]
 8008b9c:	cc02      	ldmia	r4!, {r1}
 8008b9e:	cb20      	ldmia	r3!, {r5}
 8008ba0:	9304      	str	r3, [sp, #16]
 8008ba2:	b2ab      	uxth	r3, r5
 8008ba4:	19df      	adds	r7, r3, r7
 8008ba6:	b28b      	uxth	r3, r1
 8008ba8:	1afb      	subs	r3, r7, r3
 8008baa:	0c09      	lsrs	r1, r1, #16
 8008bac:	0c2d      	lsrs	r5, r5, #16
 8008bae:	1a6d      	subs	r5, r5, r1
 8008bb0:	1419      	asrs	r1, r3, #16
 8008bb2:	186d      	adds	r5, r5, r1
 8008bb4:	4661      	mov	r1, ip
 8008bb6:	142f      	asrs	r7, r5, #16
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	042d      	lsls	r5, r5, #16
 8008bbc:	432b      	orrs	r3, r5
 8008bbe:	c108      	stmia	r1!, {r3}
 8008bc0:	9b03      	ldr	r3, [sp, #12]
 8008bc2:	468c      	mov	ip, r1
 8008bc4:	42a3      	cmp	r3, r4
 8008bc6:	d8e8      	bhi.n	8008b9a <__mdiff+0x8a>
 8008bc8:	0031      	movs	r1, r6
 8008bca:	9c03      	ldr	r4, [sp, #12]
 8008bcc:	3115      	adds	r1, #21
 8008bce:	2304      	movs	r3, #4
 8008bd0:	428c      	cmp	r4, r1
 8008bd2:	d304      	bcc.n	8008bde <__mdiff+0xce>
 8008bd4:	1ba3      	subs	r3, r4, r6
 8008bd6:	3b15      	subs	r3, #21
 8008bd8:	089b      	lsrs	r3, r3, #2
 8008bda:	3301      	adds	r3, #1
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	9901      	ldr	r1, [sp, #4]
 8008be0:	18cc      	adds	r4, r1, r3
 8008be2:	9905      	ldr	r1, [sp, #20]
 8008be4:	0026      	movs	r6, r4
 8008be6:	18cb      	adds	r3, r1, r3
 8008be8:	469c      	mov	ip, r3
 8008bea:	9902      	ldr	r1, [sp, #8]
 8008bec:	428e      	cmp	r6, r1
 8008bee:	d310      	bcc.n	8008c12 <__mdiff+0x102>
 8008bf0:	9e02      	ldr	r6, [sp, #8]
 8008bf2:	1ee1      	subs	r1, r4, #3
 8008bf4:	2500      	movs	r5, #0
 8008bf6:	428e      	cmp	r6, r1
 8008bf8:	d304      	bcc.n	8008c04 <__mdiff+0xf4>
 8008bfa:	0031      	movs	r1, r6
 8008bfc:	3103      	adds	r1, #3
 8008bfe:	1b0c      	subs	r4, r1, r4
 8008c00:	08a4      	lsrs	r4, r4, #2
 8008c02:	00a5      	lsls	r5, r4, #2
 8008c04:	195b      	adds	r3, r3, r5
 8008c06:	3b04      	subs	r3, #4
 8008c08:	6819      	ldr	r1, [r3, #0]
 8008c0a:	2900      	cmp	r1, #0
 8008c0c:	d00f      	beq.n	8008c2e <__mdiff+0x11e>
 8008c0e:	6110      	str	r0, [r2, #16]
 8008c10:	e797      	b.n	8008b42 <__mdiff+0x32>
 8008c12:	ce02      	ldmia	r6!, {r1}
 8008c14:	b28d      	uxth	r5, r1
 8008c16:	19ed      	adds	r5, r5, r7
 8008c18:	0c0f      	lsrs	r7, r1, #16
 8008c1a:	1429      	asrs	r1, r5, #16
 8008c1c:	1879      	adds	r1, r7, r1
 8008c1e:	140f      	asrs	r7, r1, #16
 8008c20:	b2ad      	uxth	r5, r5
 8008c22:	0409      	lsls	r1, r1, #16
 8008c24:	430d      	orrs	r5, r1
 8008c26:	4661      	mov	r1, ip
 8008c28:	c120      	stmia	r1!, {r5}
 8008c2a:	468c      	mov	ip, r1
 8008c2c:	e7dd      	b.n	8008bea <__mdiff+0xda>
 8008c2e:	3801      	subs	r0, #1
 8008c30:	e7e9      	b.n	8008c06 <__mdiff+0xf6>
 8008c32:	46c0      	nop			; (mov r8, r8)
 8008c34:	0800a310 	.word	0x0800a310
 8008c38:	00000232 	.word	0x00000232
 8008c3c:	0800a39c 	.word	0x0800a39c

08008c40 <__ulp>:
 8008c40:	4b0f      	ldr	r3, [pc, #60]	; (8008c80 <__ulp+0x40>)
 8008c42:	4019      	ands	r1, r3
 8008c44:	4b0f      	ldr	r3, [pc, #60]	; (8008c84 <__ulp+0x44>)
 8008c46:	18c9      	adds	r1, r1, r3
 8008c48:	2900      	cmp	r1, #0
 8008c4a:	dd04      	ble.n	8008c56 <__ulp+0x16>
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	000b      	movs	r3, r1
 8008c50:	0010      	movs	r0, r2
 8008c52:	0019      	movs	r1, r3
 8008c54:	4770      	bx	lr
 8008c56:	4249      	negs	r1, r1
 8008c58:	2200      	movs	r2, #0
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	1509      	asrs	r1, r1, #20
 8008c5e:	2913      	cmp	r1, #19
 8008c60:	dc04      	bgt.n	8008c6c <__ulp+0x2c>
 8008c62:	2080      	movs	r0, #128	; 0x80
 8008c64:	0300      	lsls	r0, r0, #12
 8008c66:	4108      	asrs	r0, r1
 8008c68:	0003      	movs	r3, r0
 8008c6a:	e7f1      	b.n	8008c50 <__ulp+0x10>
 8008c6c:	3914      	subs	r1, #20
 8008c6e:	2001      	movs	r0, #1
 8008c70:	291e      	cmp	r1, #30
 8008c72:	dc02      	bgt.n	8008c7a <__ulp+0x3a>
 8008c74:	2080      	movs	r0, #128	; 0x80
 8008c76:	0600      	lsls	r0, r0, #24
 8008c78:	40c8      	lsrs	r0, r1
 8008c7a:	0002      	movs	r2, r0
 8008c7c:	e7e8      	b.n	8008c50 <__ulp+0x10>
 8008c7e:	46c0      	nop			; (mov r8, r8)
 8008c80:	7ff00000 	.word	0x7ff00000
 8008c84:	fcc00000 	.word	0xfcc00000

08008c88 <__b2d>:
 8008c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c8a:	0006      	movs	r6, r0
 8008c8c:	6903      	ldr	r3, [r0, #16]
 8008c8e:	3614      	adds	r6, #20
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	18f3      	adds	r3, r6, r3
 8008c94:	1f1d      	subs	r5, r3, #4
 8008c96:	682c      	ldr	r4, [r5, #0]
 8008c98:	000f      	movs	r7, r1
 8008c9a:	0020      	movs	r0, r4
 8008c9c:	9301      	str	r3, [sp, #4]
 8008c9e:	f7ff fd43 	bl	8008728 <__hi0bits>
 8008ca2:	2320      	movs	r3, #32
 8008ca4:	1a1b      	subs	r3, r3, r0
 8008ca6:	491f      	ldr	r1, [pc, #124]	; (8008d24 <__b2d+0x9c>)
 8008ca8:	603b      	str	r3, [r7, #0]
 8008caa:	280a      	cmp	r0, #10
 8008cac:	dc16      	bgt.n	8008cdc <__b2d+0x54>
 8008cae:	230b      	movs	r3, #11
 8008cb0:	0027      	movs	r7, r4
 8008cb2:	1a1b      	subs	r3, r3, r0
 8008cb4:	40df      	lsrs	r7, r3
 8008cb6:	4339      	orrs	r1, r7
 8008cb8:	469c      	mov	ip, r3
 8008cba:	000b      	movs	r3, r1
 8008cbc:	2100      	movs	r1, #0
 8008cbe:	42ae      	cmp	r6, r5
 8008cc0:	d202      	bcs.n	8008cc8 <__b2d+0x40>
 8008cc2:	9901      	ldr	r1, [sp, #4]
 8008cc4:	3908      	subs	r1, #8
 8008cc6:	6809      	ldr	r1, [r1, #0]
 8008cc8:	3015      	adds	r0, #21
 8008cca:	4084      	lsls	r4, r0
 8008ccc:	4660      	mov	r0, ip
 8008cce:	40c1      	lsrs	r1, r0
 8008cd0:	430c      	orrs	r4, r1
 8008cd2:	0022      	movs	r2, r4
 8008cd4:	0010      	movs	r0, r2
 8008cd6:	0019      	movs	r1, r3
 8008cd8:	b003      	add	sp, #12
 8008cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cdc:	2700      	movs	r7, #0
 8008cde:	42ae      	cmp	r6, r5
 8008ce0:	d202      	bcs.n	8008ce8 <__b2d+0x60>
 8008ce2:	9d01      	ldr	r5, [sp, #4]
 8008ce4:	3d08      	subs	r5, #8
 8008ce6:	682f      	ldr	r7, [r5, #0]
 8008ce8:	230b      	movs	r3, #11
 8008cea:	425b      	negs	r3, r3
 8008cec:	469c      	mov	ip, r3
 8008cee:	4484      	add	ip, r0
 8008cf0:	280b      	cmp	r0, #11
 8008cf2:	d013      	beq.n	8008d1c <__b2d+0x94>
 8008cf4:	4663      	mov	r3, ip
 8008cf6:	2020      	movs	r0, #32
 8008cf8:	409c      	lsls	r4, r3
 8008cfa:	1ac0      	subs	r0, r0, r3
 8008cfc:	003b      	movs	r3, r7
 8008cfe:	40c3      	lsrs	r3, r0
 8008d00:	431c      	orrs	r4, r3
 8008d02:	4321      	orrs	r1, r4
 8008d04:	000b      	movs	r3, r1
 8008d06:	2100      	movs	r1, #0
 8008d08:	42b5      	cmp	r5, r6
 8008d0a:	d901      	bls.n	8008d10 <__b2d+0x88>
 8008d0c:	3d04      	subs	r5, #4
 8008d0e:	6829      	ldr	r1, [r5, #0]
 8008d10:	4664      	mov	r4, ip
 8008d12:	40c1      	lsrs	r1, r0
 8008d14:	40a7      	lsls	r7, r4
 8008d16:	430f      	orrs	r7, r1
 8008d18:	003a      	movs	r2, r7
 8008d1a:	e7db      	b.n	8008cd4 <__b2d+0x4c>
 8008d1c:	4321      	orrs	r1, r4
 8008d1e:	000b      	movs	r3, r1
 8008d20:	e7fa      	b.n	8008d18 <__b2d+0x90>
 8008d22:	46c0      	nop			; (mov r8, r8)
 8008d24:	3ff00000 	.word	0x3ff00000

08008d28 <__d2b>:
 8008d28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d2a:	2101      	movs	r1, #1
 8008d2c:	0014      	movs	r4, r2
 8008d2e:	001e      	movs	r6, r3
 8008d30:	9f08      	ldr	r7, [sp, #32]
 8008d32:	f7ff fc01 	bl	8008538 <_Balloc>
 8008d36:	1e05      	subs	r5, r0, #0
 8008d38:	d105      	bne.n	8008d46 <__d2b+0x1e>
 8008d3a:	0002      	movs	r2, r0
 8008d3c:	4b26      	ldr	r3, [pc, #152]	; (8008dd8 <__d2b+0xb0>)
 8008d3e:	4927      	ldr	r1, [pc, #156]	; (8008ddc <__d2b+0xb4>)
 8008d40:	4827      	ldr	r0, [pc, #156]	; (8008de0 <__d2b+0xb8>)
 8008d42:	f000 fb6b 	bl	800941c <__assert_func>
 8008d46:	0333      	lsls	r3, r6, #12
 8008d48:	0076      	lsls	r6, r6, #1
 8008d4a:	0b1b      	lsrs	r3, r3, #12
 8008d4c:	0d76      	lsrs	r6, r6, #21
 8008d4e:	d124      	bne.n	8008d9a <__d2b+0x72>
 8008d50:	9301      	str	r3, [sp, #4]
 8008d52:	2c00      	cmp	r4, #0
 8008d54:	d027      	beq.n	8008da6 <__d2b+0x7e>
 8008d56:	4668      	mov	r0, sp
 8008d58:	9400      	str	r4, [sp, #0]
 8008d5a:	f7ff fcff 	bl	800875c <__lo0bits>
 8008d5e:	9c00      	ldr	r4, [sp, #0]
 8008d60:	2800      	cmp	r0, #0
 8008d62:	d01e      	beq.n	8008da2 <__d2b+0x7a>
 8008d64:	9b01      	ldr	r3, [sp, #4]
 8008d66:	2120      	movs	r1, #32
 8008d68:	001a      	movs	r2, r3
 8008d6a:	1a09      	subs	r1, r1, r0
 8008d6c:	408a      	lsls	r2, r1
 8008d6e:	40c3      	lsrs	r3, r0
 8008d70:	4322      	orrs	r2, r4
 8008d72:	616a      	str	r2, [r5, #20]
 8008d74:	9301      	str	r3, [sp, #4]
 8008d76:	9c01      	ldr	r4, [sp, #4]
 8008d78:	61ac      	str	r4, [r5, #24]
 8008d7a:	1e63      	subs	r3, r4, #1
 8008d7c:	419c      	sbcs	r4, r3
 8008d7e:	3401      	adds	r4, #1
 8008d80:	612c      	str	r4, [r5, #16]
 8008d82:	2e00      	cmp	r6, #0
 8008d84:	d018      	beq.n	8008db8 <__d2b+0x90>
 8008d86:	4b17      	ldr	r3, [pc, #92]	; (8008de4 <__d2b+0xbc>)
 8008d88:	18f6      	adds	r6, r6, r3
 8008d8a:	2335      	movs	r3, #53	; 0x35
 8008d8c:	1836      	adds	r6, r6, r0
 8008d8e:	1a18      	subs	r0, r3, r0
 8008d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d92:	603e      	str	r6, [r7, #0]
 8008d94:	6018      	str	r0, [r3, #0]
 8008d96:	0028      	movs	r0, r5
 8008d98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008d9a:	2280      	movs	r2, #128	; 0x80
 8008d9c:	0352      	lsls	r2, r2, #13
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	e7d6      	b.n	8008d50 <__d2b+0x28>
 8008da2:	616c      	str	r4, [r5, #20]
 8008da4:	e7e7      	b.n	8008d76 <__d2b+0x4e>
 8008da6:	a801      	add	r0, sp, #4
 8008da8:	f7ff fcd8 	bl	800875c <__lo0bits>
 8008dac:	2401      	movs	r4, #1
 8008dae:	9b01      	ldr	r3, [sp, #4]
 8008db0:	612c      	str	r4, [r5, #16]
 8008db2:	616b      	str	r3, [r5, #20]
 8008db4:	3020      	adds	r0, #32
 8008db6:	e7e4      	b.n	8008d82 <__d2b+0x5a>
 8008db8:	4b0b      	ldr	r3, [pc, #44]	; (8008de8 <__d2b+0xc0>)
 8008dba:	18c0      	adds	r0, r0, r3
 8008dbc:	4b0b      	ldr	r3, [pc, #44]	; (8008dec <__d2b+0xc4>)
 8008dbe:	6038      	str	r0, [r7, #0]
 8008dc0:	18e3      	adds	r3, r4, r3
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	18eb      	adds	r3, r5, r3
 8008dc6:	6958      	ldr	r0, [r3, #20]
 8008dc8:	f7ff fcae 	bl	8008728 <__hi0bits>
 8008dcc:	0164      	lsls	r4, r4, #5
 8008dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dd0:	1a24      	subs	r4, r4, r0
 8008dd2:	601c      	str	r4, [r3, #0]
 8008dd4:	e7df      	b.n	8008d96 <__d2b+0x6e>
 8008dd6:	46c0      	nop			; (mov r8, r8)
 8008dd8:	0800a310 	.word	0x0800a310
 8008ddc:	0000030a 	.word	0x0000030a
 8008de0:	0800a39c 	.word	0x0800a39c
 8008de4:	fffffbcd 	.word	0xfffffbcd
 8008de8:	fffffbce 	.word	0xfffffbce
 8008dec:	3fffffff 	.word	0x3fffffff

08008df0 <__ratio>:
 8008df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008df2:	b087      	sub	sp, #28
 8008df4:	000f      	movs	r7, r1
 8008df6:	a904      	add	r1, sp, #16
 8008df8:	0006      	movs	r6, r0
 8008dfa:	f7ff ff45 	bl	8008c88 <__b2d>
 8008dfe:	9000      	str	r0, [sp, #0]
 8008e00:	9101      	str	r1, [sp, #4]
 8008e02:	9c00      	ldr	r4, [sp, #0]
 8008e04:	9d01      	ldr	r5, [sp, #4]
 8008e06:	0038      	movs	r0, r7
 8008e08:	a905      	add	r1, sp, #20
 8008e0a:	f7ff ff3d 	bl	8008c88 <__b2d>
 8008e0e:	9002      	str	r0, [sp, #8]
 8008e10:	9103      	str	r1, [sp, #12]
 8008e12:	9a02      	ldr	r2, [sp, #8]
 8008e14:	9b03      	ldr	r3, [sp, #12]
 8008e16:	6931      	ldr	r1, [r6, #16]
 8008e18:	6938      	ldr	r0, [r7, #16]
 8008e1a:	9e05      	ldr	r6, [sp, #20]
 8008e1c:	1a08      	subs	r0, r1, r0
 8008e1e:	9904      	ldr	r1, [sp, #16]
 8008e20:	0140      	lsls	r0, r0, #5
 8008e22:	1b89      	subs	r1, r1, r6
 8008e24:	1841      	adds	r1, r0, r1
 8008e26:	0508      	lsls	r0, r1, #20
 8008e28:	2900      	cmp	r1, #0
 8008e2a:	dd07      	ble.n	8008e3c <__ratio+0x4c>
 8008e2c:	9901      	ldr	r1, [sp, #4]
 8008e2e:	1845      	adds	r5, r0, r1
 8008e30:	0020      	movs	r0, r4
 8008e32:	0029      	movs	r1, r5
 8008e34:	f7f7 fee4 	bl	8000c00 <__aeabi_ddiv>
 8008e38:	b007      	add	sp, #28
 8008e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e3c:	9903      	ldr	r1, [sp, #12]
 8008e3e:	1a0b      	subs	r3, r1, r0
 8008e40:	e7f6      	b.n	8008e30 <__ratio+0x40>

08008e42 <__copybits>:
 8008e42:	b570      	push	{r4, r5, r6, lr}
 8008e44:	0014      	movs	r4, r2
 8008e46:	0005      	movs	r5, r0
 8008e48:	3901      	subs	r1, #1
 8008e4a:	6913      	ldr	r3, [r2, #16]
 8008e4c:	1149      	asrs	r1, r1, #5
 8008e4e:	3101      	adds	r1, #1
 8008e50:	0089      	lsls	r1, r1, #2
 8008e52:	3414      	adds	r4, #20
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	1841      	adds	r1, r0, r1
 8008e58:	18e3      	adds	r3, r4, r3
 8008e5a:	42a3      	cmp	r3, r4
 8008e5c:	d80d      	bhi.n	8008e7a <__copybits+0x38>
 8008e5e:	0014      	movs	r4, r2
 8008e60:	3411      	adds	r4, #17
 8008e62:	2500      	movs	r5, #0
 8008e64:	429c      	cmp	r4, r3
 8008e66:	d803      	bhi.n	8008e70 <__copybits+0x2e>
 8008e68:	1a9b      	subs	r3, r3, r2
 8008e6a:	3b11      	subs	r3, #17
 8008e6c:	089b      	lsrs	r3, r3, #2
 8008e6e:	009d      	lsls	r5, r3, #2
 8008e70:	2300      	movs	r3, #0
 8008e72:	1940      	adds	r0, r0, r5
 8008e74:	4281      	cmp	r1, r0
 8008e76:	d803      	bhi.n	8008e80 <__copybits+0x3e>
 8008e78:	bd70      	pop	{r4, r5, r6, pc}
 8008e7a:	cc40      	ldmia	r4!, {r6}
 8008e7c:	c540      	stmia	r5!, {r6}
 8008e7e:	e7ec      	b.n	8008e5a <__copybits+0x18>
 8008e80:	c008      	stmia	r0!, {r3}
 8008e82:	e7f7      	b.n	8008e74 <__copybits+0x32>

08008e84 <__any_on>:
 8008e84:	0002      	movs	r2, r0
 8008e86:	6900      	ldr	r0, [r0, #16]
 8008e88:	b510      	push	{r4, lr}
 8008e8a:	3214      	adds	r2, #20
 8008e8c:	114b      	asrs	r3, r1, #5
 8008e8e:	4298      	cmp	r0, r3
 8008e90:	db13      	blt.n	8008eba <__any_on+0x36>
 8008e92:	dd0c      	ble.n	8008eae <__any_on+0x2a>
 8008e94:	241f      	movs	r4, #31
 8008e96:	0008      	movs	r0, r1
 8008e98:	4020      	ands	r0, r4
 8008e9a:	4221      	tst	r1, r4
 8008e9c:	d007      	beq.n	8008eae <__any_on+0x2a>
 8008e9e:	0099      	lsls	r1, r3, #2
 8008ea0:	588c      	ldr	r4, [r1, r2]
 8008ea2:	0021      	movs	r1, r4
 8008ea4:	40c1      	lsrs	r1, r0
 8008ea6:	4081      	lsls	r1, r0
 8008ea8:	2001      	movs	r0, #1
 8008eaa:	428c      	cmp	r4, r1
 8008eac:	d104      	bne.n	8008eb8 <__any_on+0x34>
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	18d3      	adds	r3, r2, r3
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d803      	bhi.n	8008ebe <__any_on+0x3a>
 8008eb6:	2000      	movs	r0, #0
 8008eb8:	bd10      	pop	{r4, pc}
 8008eba:	0003      	movs	r3, r0
 8008ebc:	e7f7      	b.n	8008eae <__any_on+0x2a>
 8008ebe:	3b04      	subs	r3, #4
 8008ec0:	6819      	ldr	r1, [r3, #0]
 8008ec2:	2900      	cmp	r1, #0
 8008ec4:	d0f5      	beq.n	8008eb2 <__any_on+0x2e>
 8008ec6:	2001      	movs	r0, #1
 8008ec8:	e7f6      	b.n	8008eb8 <__any_on+0x34>

08008eca <_calloc_r>:
 8008eca:	b570      	push	{r4, r5, r6, lr}
 8008ecc:	0c13      	lsrs	r3, r2, #16
 8008ece:	0c0d      	lsrs	r5, r1, #16
 8008ed0:	d11e      	bne.n	8008f10 <_calloc_r+0x46>
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d10c      	bne.n	8008ef0 <_calloc_r+0x26>
 8008ed6:	b289      	uxth	r1, r1
 8008ed8:	b294      	uxth	r4, r2
 8008eda:	434c      	muls	r4, r1
 8008edc:	0021      	movs	r1, r4
 8008ede:	f000 f88d 	bl	8008ffc <_malloc_r>
 8008ee2:	1e05      	subs	r5, r0, #0
 8008ee4:	d01b      	beq.n	8008f1e <_calloc_r+0x54>
 8008ee6:	0022      	movs	r2, r4
 8008ee8:	2100      	movs	r1, #0
 8008eea:	f7fc fb6f 	bl	80055cc <memset>
 8008eee:	e016      	b.n	8008f1e <_calloc_r+0x54>
 8008ef0:	1c1d      	adds	r5, r3, #0
 8008ef2:	1c0b      	adds	r3, r1, #0
 8008ef4:	b292      	uxth	r2, r2
 8008ef6:	b289      	uxth	r1, r1
 8008ef8:	b29c      	uxth	r4, r3
 8008efa:	4351      	muls	r1, r2
 8008efc:	b2ab      	uxth	r3, r5
 8008efe:	4363      	muls	r3, r4
 8008f00:	0c0c      	lsrs	r4, r1, #16
 8008f02:	191c      	adds	r4, r3, r4
 8008f04:	0c22      	lsrs	r2, r4, #16
 8008f06:	d107      	bne.n	8008f18 <_calloc_r+0x4e>
 8008f08:	0424      	lsls	r4, r4, #16
 8008f0a:	b289      	uxth	r1, r1
 8008f0c:	430c      	orrs	r4, r1
 8008f0e:	e7e5      	b.n	8008edc <_calloc_r+0x12>
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d101      	bne.n	8008f18 <_calloc_r+0x4e>
 8008f14:	1c13      	adds	r3, r2, #0
 8008f16:	e7ed      	b.n	8008ef4 <_calloc_r+0x2a>
 8008f18:	230c      	movs	r3, #12
 8008f1a:	2500      	movs	r5, #0
 8008f1c:	6003      	str	r3, [r0, #0]
 8008f1e:	0028      	movs	r0, r5
 8008f20:	bd70      	pop	{r4, r5, r6, pc}
	...

08008f24 <_free_r>:
 8008f24:	b570      	push	{r4, r5, r6, lr}
 8008f26:	0005      	movs	r5, r0
 8008f28:	2900      	cmp	r1, #0
 8008f2a:	d010      	beq.n	8008f4e <_free_r+0x2a>
 8008f2c:	1f0c      	subs	r4, r1, #4
 8008f2e:	6823      	ldr	r3, [r4, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	da00      	bge.n	8008f36 <_free_r+0x12>
 8008f34:	18e4      	adds	r4, r4, r3
 8008f36:	0028      	movs	r0, r5
 8008f38:	f000 fab2 	bl	80094a0 <__malloc_lock>
 8008f3c:	4a1d      	ldr	r2, [pc, #116]	; (8008fb4 <_free_r+0x90>)
 8008f3e:	6813      	ldr	r3, [r2, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d105      	bne.n	8008f50 <_free_r+0x2c>
 8008f44:	6063      	str	r3, [r4, #4]
 8008f46:	6014      	str	r4, [r2, #0]
 8008f48:	0028      	movs	r0, r5
 8008f4a:	f000 fab1 	bl	80094b0 <__malloc_unlock>
 8008f4e:	bd70      	pop	{r4, r5, r6, pc}
 8008f50:	42a3      	cmp	r3, r4
 8008f52:	d908      	bls.n	8008f66 <_free_r+0x42>
 8008f54:	6821      	ldr	r1, [r4, #0]
 8008f56:	1860      	adds	r0, r4, r1
 8008f58:	4283      	cmp	r3, r0
 8008f5a:	d1f3      	bne.n	8008f44 <_free_r+0x20>
 8008f5c:	6818      	ldr	r0, [r3, #0]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	1841      	adds	r1, r0, r1
 8008f62:	6021      	str	r1, [r4, #0]
 8008f64:	e7ee      	b.n	8008f44 <_free_r+0x20>
 8008f66:	001a      	movs	r2, r3
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d001      	beq.n	8008f72 <_free_r+0x4e>
 8008f6e:	42a3      	cmp	r3, r4
 8008f70:	d9f9      	bls.n	8008f66 <_free_r+0x42>
 8008f72:	6811      	ldr	r1, [r2, #0]
 8008f74:	1850      	adds	r0, r2, r1
 8008f76:	42a0      	cmp	r0, r4
 8008f78:	d10b      	bne.n	8008f92 <_free_r+0x6e>
 8008f7a:	6820      	ldr	r0, [r4, #0]
 8008f7c:	1809      	adds	r1, r1, r0
 8008f7e:	1850      	adds	r0, r2, r1
 8008f80:	6011      	str	r1, [r2, #0]
 8008f82:	4283      	cmp	r3, r0
 8008f84:	d1e0      	bne.n	8008f48 <_free_r+0x24>
 8008f86:	6818      	ldr	r0, [r3, #0]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	1841      	adds	r1, r0, r1
 8008f8c:	6011      	str	r1, [r2, #0]
 8008f8e:	6053      	str	r3, [r2, #4]
 8008f90:	e7da      	b.n	8008f48 <_free_r+0x24>
 8008f92:	42a0      	cmp	r0, r4
 8008f94:	d902      	bls.n	8008f9c <_free_r+0x78>
 8008f96:	230c      	movs	r3, #12
 8008f98:	602b      	str	r3, [r5, #0]
 8008f9a:	e7d5      	b.n	8008f48 <_free_r+0x24>
 8008f9c:	6821      	ldr	r1, [r4, #0]
 8008f9e:	1860      	adds	r0, r4, r1
 8008fa0:	4283      	cmp	r3, r0
 8008fa2:	d103      	bne.n	8008fac <_free_r+0x88>
 8008fa4:	6818      	ldr	r0, [r3, #0]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	1841      	adds	r1, r0, r1
 8008faa:	6021      	str	r1, [r4, #0]
 8008fac:	6063      	str	r3, [r4, #4]
 8008fae:	6054      	str	r4, [r2, #4]
 8008fb0:	e7ca      	b.n	8008f48 <_free_r+0x24>
 8008fb2:	46c0      	nop			; (mov r8, r8)
 8008fb4:	200002c8 	.word	0x200002c8

08008fb8 <sbrk_aligned>:
 8008fb8:	b570      	push	{r4, r5, r6, lr}
 8008fba:	4e0f      	ldr	r6, [pc, #60]	; (8008ff8 <sbrk_aligned+0x40>)
 8008fbc:	000d      	movs	r5, r1
 8008fbe:	6831      	ldr	r1, [r6, #0]
 8008fc0:	0004      	movs	r4, r0
 8008fc2:	2900      	cmp	r1, #0
 8008fc4:	d102      	bne.n	8008fcc <sbrk_aligned+0x14>
 8008fc6:	f000 f9f7 	bl	80093b8 <_sbrk_r>
 8008fca:	6030      	str	r0, [r6, #0]
 8008fcc:	0029      	movs	r1, r5
 8008fce:	0020      	movs	r0, r4
 8008fd0:	f000 f9f2 	bl	80093b8 <_sbrk_r>
 8008fd4:	1c43      	adds	r3, r0, #1
 8008fd6:	d00a      	beq.n	8008fee <sbrk_aligned+0x36>
 8008fd8:	2303      	movs	r3, #3
 8008fda:	1cc5      	adds	r5, r0, #3
 8008fdc:	439d      	bics	r5, r3
 8008fde:	42a8      	cmp	r0, r5
 8008fe0:	d007      	beq.n	8008ff2 <sbrk_aligned+0x3a>
 8008fe2:	1a29      	subs	r1, r5, r0
 8008fe4:	0020      	movs	r0, r4
 8008fe6:	f000 f9e7 	bl	80093b8 <_sbrk_r>
 8008fea:	1c43      	adds	r3, r0, #1
 8008fec:	d101      	bne.n	8008ff2 <sbrk_aligned+0x3a>
 8008fee:	2501      	movs	r5, #1
 8008ff0:	426d      	negs	r5, r5
 8008ff2:	0028      	movs	r0, r5
 8008ff4:	bd70      	pop	{r4, r5, r6, pc}
 8008ff6:	46c0      	nop			; (mov r8, r8)
 8008ff8:	200002cc 	.word	0x200002cc

08008ffc <_malloc_r>:
 8008ffc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ffe:	2203      	movs	r2, #3
 8009000:	1ccb      	adds	r3, r1, #3
 8009002:	4393      	bics	r3, r2
 8009004:	3308      	adds	r3, #8
 8009006:	0006      	movs	r6, r0
 8009008:	001f      	movs	r7, r3
 800900a:	2b0c      	cmp	r3, #12
 800900c:	d232      	bcs.n	8009074 <_malloc_r+0x78>
 800900e:	270c      	movs	r7, #12
 8009010:	42b9      	cmp	r1, r7
 8009012:	d831      	bhi.n	8009078 <_malloc_r+0x7c>
 8009014:	0030      	movs	r0, r6
 8009016:	f000 fa43 	bl	80094a0 <__malloc_lock>
 800901a:	4d32      	ldr	r5, [pc, #200]	; (80090e4 <_malloc_r+0xe8>)
 800901c:	682b      	ldr	r3, [r5, #0]
 800901e:	001c      	movs	r4, r3
 8009020:	2c00      	cmp	r4, #0
 8009022:	d12e      	bne.n	8009082 <_malloc_r+0x86>
 8009024:	0039      	movs	r1, r7
 8009026:	0030      	movs	r0, r6
 8009028:	f7ff ffc6 	bl	8008fb8 <sbrk_aligned>
 800902c:	0004      	movs	r4, r0
 800902e:	1c43      	adds	r3, r0, #1
 8009030:	d11e      	bne.n	8009070 <_malloc_r+0x74>
 8009032:	682c      	ldr	r4, [r5, #0]
 8009034:	0025      	movs	r5, r4
 8009036:	2d00      	cmp	r5, #0
 8009038:	d14a      	bne.n	80090d0 <_malloc_r+0xd4>
 800903a:	6823      	ldr	r3, [r4, #0]
 800903c:	0029      	movs	r1, r5
 800903e:	18e3      	adds	r3, r4, r3
 8009040:	0030      	movs	r0, r6
 8009042:	9301      	str	r3, [sp, #4]
 8009044:	f000 f9b8 	bl	80093b8 <_sbrk_r>
 8009048:	9b01      	ldr	r3, [sp, #4]
 800904a:	4283      	cmp	r3, r0
 800904c:	d143      	bne.n	80090d6 <_malloc_r+0xda>
 800904e:	6823      	ldr	r3, [r4, #0]
 8009050:	3703      	adds	r7, #3
 8009052:	1aff      	subs	r7, r7, r3
 8009054:	2303      	movs	r3, #3
 8009056:	439f      	bics	r7, r3
 8009058:	3708      	adds	r7, #8
 800905a:	2f0c      	cmp	r7, #12
 800905c:	d200      	bcs.n	8009060 <_malloc_r+0x64>
 800905e:	270c      	movs	r7, #12
 8009060:	0039      	movs	r1, r7
 8009062:	0030      	movs	r0, r6
 8009064:	f7ff ffa8 	bl	8008fb8 <sbrk_aligned>
 8009068:	1c43      	adds	r3, r0, #1
 800906a:	d034      	beq.n	80090d6 <_malloc_r+0xda>
 800906c:	6823      	ldr	r3, [r4, #0]
 800906e:	19df      	adds	r7, r3, r7
 8009070:	6027      	str	r7, [r4, #0]
 8009072:	e013      	b.n	800909c <_malloc_r+0xa0>
 8009074:	2b00      	cmp	r3, #0
 8009076:	dacb      	bge.n	8009010 <_malloc_r+0x14>
 8009078:	230c      	movs	r3, #12
 800907a:	2500      	movs	r5, #0
 800907c:	6033      	str	r3, [r6, #0]
 800907e:	0028      	movs	r0, r5
 8009080:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009082:	6822      	ldr	r2, [r4, #0]
 8009084:	1bd1      	subs	r1, r2, r7
 8009086:	d420      	bmi.n	80090ca <_malloc_r+0xce>
 8009088:	290b      	cmp	r1, #11
 800908a:	d917      	bls.n	80090bc <_malloc_r+0xc0>
 800908c:	19e2      	adds	r2, r4, r7
 800908e:	6027      	str	r7, [r4, #0]
 8009090:	42a3      	cmp	r3, r4
 8009092:	d111      	bne.n	80090b8 <_malloc_r+0xbc>
 8009094:	602a      	str	r2, [r5, #0]
 8009096:	6863      	ldr	r3, [r4, #4]
 8009098:	6011      	str	r1, [r2, #0]
 800909a:	6053      	str	r3, [r2, #4]
 800909c:	0030      	movs	r0, r6
 800909e:	0025      	movs	r5, r4
 80090a0:	f000 fa06 	bl	80094b0 <__malloc_unlock>
 80090a4:	2207      	movs	r2, #7
 80090a6:	350b      	adds	r5, #11
 80090a8:	1d23      	adds	r3, r4, #4
 80090aa:	4395      	bics	r5, r2
 80090ac:	1aea      	subs	r2, r5, r3
 80090ae:	429d      	cmp	r5, r3
 80090b0:	d0e5      	beq.n	800907e <_malloc_r+0x82>
 80090b2:	1b5b      	subs	r3, r3, r5
 80090b4:	50a3      	str	r3, [r4, r2]
 80090b6:	e7e2      	b.n	800907e <_malloc_r+0x82>
 80090b8:	605a      	str	r2, [r3, #4]
 80090ba:	e7ec      	b.n	8009096 <_malloc_r+0x9a>
 80090bc:	6862      	ldr	r2, [r4, #4]
 80090be:	42a3      	cmp	r3, r4
 80090c0:	d101      	bne.n	80090c6 <_malloc_r+0xca>
 80090c2:	602a      	str	r2, [r5, #0]
 80090c4:	e7ea      	b.n	800909c <_malloc_r+0xa0>
 80090c6:	605a      	str	r2, [r3, #4]
 80090c8:	e7e8      	b.n	800909c <_malloc_r+0xa0>
 80090ca:	0023      	movs	r3, r4
 80090cc:	6864      	ldr	r4, [r4, #4]
 80090ce:	e7a7      	b.n	8009020 <_malloc_r+0x24>
 80090d0:	002c      	movs	r4, r5
 80090d2:	686d      	ldr	r5, [r5, #4]
 80090d4:	e7af      	b.n	8009036 <_malloc_r+0x3a>
 80090d6:	230c      	movs	r3, #12
 80090d8:	0030      	movs	r0, r6
 80090da:	6033      	str	r3, [r6, #0]
 80090dc:	f000 f9e8 	bl	80094b0 <__malloc_unlock>
 80090e0:	e7cd      	b.n	800907e <_malloc_r+0x82>
 80090e2:	46c0      	nop			; (mov r8, r8)
 80090e4:	200002c8 	.word	0x200002c8

080090e8 <__ssputs_r>:
 80090e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090ea:	688e      	ldr	r6, [r1, #8]
 80090ec:	b085      	sub	sp, #20
 80090ee:	0007      	movs	r7, r0
 80090f0:	000c      	movs	r4, r1
 80090f2:	9203      	str	r2, [sp, #12]
 80090f4:	9301      	str	r3, [sp, #4]
 80090f6:	429e      	cmp	r6, r3
 80090f8:	d83c      	bhi.n	8009174 <__ssputs_r+0x8c>
 80090fa:	2390      	movs	r3, #144	; 0x90
 80090fc:	898a      	ldrh	r2, [r1, #12]
 80090fe:	00db      	lsls	r3, r3, #3
 8009100:	421a      	tst	r2, r3
 8009102:	d034      	beq.n	800916e <__ssputs_r+0x86>
 8009104:	6909      	ldr	r1, [r1, #16]
 8009106:	6823      	ldr	r3, [r4, #0]
 8009108:	6960      	ldr	r0, [r4, #20]
 800910a:	1a5b      	subs	r3, r3, r1
 800910c:	9302      	str	r3, [sp, #8]
 800910e:	2303      	movs	r3, #3
 8009110:	4343      	muls	r3, r0
 8009112:	0fdd      	lsrs	r5, r3, #31
 8009114:	18ed      	adds	r5, r5, r3
 8009116:	9b01      	ldr	r3, [sp, #4]
 8009118:	9802      	ldr	r0, [sp, #8]
 800911a:	3301      	adds	r3, #1
 800911c:	181b      	adds	r3, r3, r0
 800911e:	106d      	asrs	r5, r5, #1
 8009120:	42ab      	cmp	r3, r5
 8009122:	d900      	bls.n	8009126 <__ssputs_r+0x3e>
 8009124:	001d      	movs	r5, r3
 8009126:	0553      	lsls	r3, r2, #21
 8009128:	d532      	bpl.n	8009190 <__ssputs_r+0xa8>
 800912a:	0029      	movs	r1, r5
 800912c:	0038      	movs	r0, r7
 800912e:	f7ff ff65 	bl	8008ffc <_malloc_r>
 8009132:	1e06      	subs	r6, r0, #0
 8009134:	d109      	bne.n	800914a <__ssputs_r+0x62>
 8009136:	230c      	movs	r3, #12
 8009138:	603b      	str	r3, [r7, #0]
 800913a:	2340      	movs	r3, #64	; 0x40
 800913c:	2001      	movs	r0, #1
 800913e:	89a2      	ldrh	r2, [r4, #12]
 8009140:	4240      	negs	r0, r0
 8009142:	4313      	orrs	r3, r2
 8009144:	81a3      	strh	r3, [r4, #12]
 8009146:	b005      	add	sp, #20
 8009148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800914a:	9a02      	ldr	r2, [sp, #8]
 800914c:	6921      	ldr	r1, [r4, #16]
 800914e:	f7ff f9ea 	bl	8008526 <memcpy>
 8009152:	89a3      	ldrh	r3, [r4, #12]
 8009154:	4a14      	ldr	r2, [pc, #80]	; (80091a8 <__ssputs_r+0xc0>)
 8009156:	401a      	ands	r2, r3
 8009158:	2380      	movs	r3, #128	; 0x80
 800915a:	4313      	orrs	r3, r2
 800915c:	81a3      	strh	r3, [r4, #12]
 800915e:	9b02      	ldr	r3, [sp, #8]
 8009160:	6126      	str	r6, [r4, #16]
 8009162:	18f6      	adds	r6, r6, r3
 8009164:	6026      	str	r6, [r4, #0]
 8009166:	6165      	str	r5, [r4, #20]
 8009168:	9e01      	ldr	r6, [sp, #4]
 800916a:	1aed      	subs	r5, r5, r3
 800916c:	60a5      	str	r5, [r4, #8]
 800916e:	9b01      	ldr	r3, [sp, #4]
 8009170:	429e      	cmp	r6, r3
 8009172:	d900      	bls.n	8009176 <__ssputs_r+0x8e>
 8009174:	9e01      	ldr	r6, [sp, #4]
 8009176:	0032      	movs	r2, r6
 8009178:	9903      	ldr	r1, [sp, #12]
 800917a:	6820      	ldr	r0, [r4, #0]
 800917c:	f000 f97c 	bl	8009478 <memmove>
 8009180:	68a3      	ldr	r3, [r4, #8]
 8009182:	2000      	movs	r0, #0
 8009184:	1b9b      	subs	r3, r3, r6
 8009186:	60a3      	str	r3, [r4, #8]
 8009188:	6823      	ldr	r3, [r4, #0]
 800918a:	199e      	adds	r6, r3, r6
 800918c:	6026      	str	r6, [r4, #0]
 800918e:	e7da      	b.n	8009146 <__ssputs_r+0x5e>
 8009190:	002a      	movs	r2, r5
 8009192:	0038      	movs	r0, r7
 8009194:	f000 f994 	bl	80094c0 <_realloc_r>
 8009198:	1e06      	subs	r6, r0, #0
 800919a:	d1e0      	bne.n	800915e <__ssputs_r+0x76>
 800919c:	0038      	movs	r0, r7
 800919e:	6921      	ldr	r1, [r4, #16]
 80091a0:	f7ff fec0 	bl	8008f24 <_free_r>
 80091a4:	e7c7      	b.n	8009136 <__ssputs_r+0x4e>
 80091a6:	46c0      	nop			; (mov r8, r8)
 80091a8:	fffffb7f 	.word	0xfffffb7f

080091ac <_svfiprintf_r>:
 80091ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091ae:	b0a1      	sub	sp, #132	; 0x84
 80091b0:	9003      	str	r0, [sp, #12]
 80091b2:	001d      	movs	r5, r3
 80091b4:	898b      	ldrh	r3, [r1, #12]
 80091b6:	000f      	movs	r7, r1
 80091b8:	0016      	movs	r6, r2
 80091ba:	061b      	lsls	r3, r3, #24
 80091bc:	d511      	bpl.n	80091e2 <_svfiprintf_r+0x36>
 80091be:	690b      	ldr	r3, [r1, #16]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d10e      	bne.n	80091e2 <_svfiprintf_r+0x36>
 80091c4:	2140      	movs	r1, #64	; 0x40
 80091c6:	f7ff ff19 	bl	8008ffc <_malloc_r>
 80091ca:	6038      	str	r0, [r7, #0]
 80091cc:	6138      	str	r0, [r7, #16]
 80091ce:	2800      	cmp	r0, #0
 80091d0:	d105      	bne.n	80091de <_svfiprintf_r+0x32>
 80091d2:	230c      	movs	r3, #12
 80091d4:	9a03      	ldr	r2, [sp, #12]
 80091d6:	3801      	subs	r0, #1
 80091d8:	6013      	str	r3, [r2, #0]
 80091da:	b021      	add	sp, #132	; 0x84
 80091dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091de:	2340      	movs	r3, #64	; 0x40
 80091e0:	617b      	str	r3, [r7, #20]
 80091e2:	2300      	movs	r3, #0
 80091e4:	ac08      	add	r4, sp, #32
 80091e6:	6163      	str	r3, [r4, #20]
 80091e8:	3320      	adds	r3, #32
 80091ea:	7663      	strb	r3, [r4, #25]
 80091ec:	3310      	adds	r3, #16
 80091ee:	76a3      	strb	r3, [r4, #26]
 80091f0:	9507      	str	r5, [sp, #28]
 80091f2:	0035      	movs	r5, r6
 80091f4:	782b      	ldrb	r3, [r5, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d001      	beq.n	80091fe <_svfiprintf_r+0x52>
 80091fa:	2b25      	cmp	r3, #37	; 0x25
 80091fc:	d147      	bne.n	800928e <_svfiprintf_r+0xe2>
 80091fe:	1bab      	subs	r3, r5, r6
 8009200:	9305      	str	r3, [sp, #20]
 8009202:	42b5      	cmp	r5, r6
 8009204:	d00c      	beq.n	8009220 <_svfiprintf_r+0x74>
 8009206:	0032      	movs	r2, r6
 8009208:	0039      	movs	r1, r7
 800920a:	9803      	ldr	r0, [sp, #12]
 800920c:	f7ff ff6c 	bl	80090e8 <__ssputs_r>
 8009210:	1c43      	adds	r3, r0, #1
 8009212:	d100      	bne.n	8009216 <_svfiprintf_r+0x6a>
 8009214:	e0ae      	b.n	8009374 <_svfiprintf_r+0x1c8>
 8009216:	6962      	ldr	r2, [r4, #20]
 8009218:	9b05      	ldr	r3, [sp, #20]
 800921a:	4694      	mov	ip, r2
 800921c:	4463      	add	r3, ip
 800921e:	6163      	str	r3, [r4, #20]
 8009220:	782b      	ldrb	r3, [r5, #0]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d100      	bne.n	8009228 <_svfiprintf_r+0x7c>
 8009226:	e0a5      	b.n	8009374 <_svfiprintf_r+0x1c8>
 8009228:	2201      	movs	r2, #1
 800922a:	2300      	movs	r3, #0
 800922c:	4252      	negs	r2, r2
 800922e:	6062      	str	r2, [r4, #4]
 8009230:	a904      	add	r1, sp, #16
 8009232:	3254      	adds	r2, #84	; 0x54
 8009234:	1852      	adds	r2, r2, r1
 8009236:	1c6e      	adds	r6, r5, #1
 8009238:	6023      	str	r3, [r4, #0]
 800923a:	60e3      	str	r3, [r4, #12]
 800923c:	60a3      	str	r3, [r4, #8]
 800923e:	7013      	strb	r3, [r2, #0]
 8009240:	65a3      	str	r3, [r4, #88]	; 0x58
 8009242:	2205      	movs	r2, #5
 8009244:	7831      	ldrb	r1, [r6, #0]
 8009246:	4854      	ldr	r0, [pc, #336]	; (8009398 <_svfiprintf_r+0x1ec>)
 8009248:	f7ff f962 	bl	8008510 <memchr>
 800924c:	1c75      	adds	r5, r6, #1
 800924e:	2800      	cmp	r0, #0
 8009250:	d11f      	bne.n	8009292 <_svfiprintf_r+0xe6>
 8009252:	6822      	ldr	r2, [r4, #0]
 8009254:	06d3      	lsls	r3, r2, #27
 8009256:	d504      	bpl.n	8009262 <_svfiprintf_r+0xb6>
 8009258:	2353      	movs	r3, #83	; 0x53
 800925a:	a904      	add	r1, sp, #16
 800925c:	185b      	adds	r3, r3, r1
 800925e:	2120      	movs	r1, #32
 8009260:	7019      	strb	r1, [r3, #0]
 8009262:	0713      	lsls	r3, r2, #28
 8009264:	d504      	bpl.n	8009270 <_svfiprintf_r+0xc4>
 8009266:	2353      	movs	r3, #83	; 0x53
 8009268:	a904      	add	r1, sp, #16
 800926a:	185b      	adds	r3, r3, r1
 800926c:	212b      	movs	r1, #43	; 0x2b
 800926e:	7019      	strb	r1, [r3, #0]
 8009270:	7833      	ldrb	r3, [r6, #0]
 8009272:	2b2a      	cmp	r3, #42	; 0x2a
 8009274:	d016      	beq.n	80092a4 <_svfiprintf_r+0xf8>
 8009276:	0035      	movs	r5, r6
 8009278:	2100      	movs	r1, #0
 800927a:	200a      	movs	r0, #10
 800927c:	68e3      	ldr	r3, [r4, #12]
 800927e:	782a      	ldrb	r2, [r5, #0]
 8009280:	1c6e      	adds	r6, r5, #1
 8009282:	3a30      	subs	r2, #48	; 0x30
 8009284:	2a09      	cmp	r2, #9
 8009286:	d94e      	bls.n	8009326 <_svfiprintf_r+0x17a>
 8009288:	2900      	cmp	r1, #0
 800928a:	d111      	bne.n	80092b0 <_svfiprintf_r+0x104>
 800928c:	e017      	b.n	80092be <_svfiprintf_r+0x112>
 800928e:	3501      	adds	r5, #1
 8009290:	e7b0      	b.n	80091f4 <_svfiprintf_r+0x48>
 8009292:	4b41      	ldr	r3, [pc, #260]	; (8009398 <_svfiprintf_r+0x1ec>)
 8009294:	6822      	ldr	r2, [r4, #0]
 8009296:	1ac0      	subs	r0, r0, r3
 8009298:	2301      	movs	r3, #1
 800929a:	4083      	lsls	r3, r0
 800929c:	4313      	orrs	r3, r2
 800929e:	002e      	movs	r6, r5
 80092a0:	6023      	str	r3, [r4, #0]
 80092a2:	e7ce      	b.n	8009242 <_svfiprintf_r+0x96>
 80092a4:	9b07      	ldr	r3, [sp, #28]
 80092a6:	1d19      	adds	r1, r3, #4
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	9107      	str	r1, [sp, #28]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	db01      	blt.n	80092b4 <_svfiprintf_r+0x108>
 80092b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80092b2:	e004      	b.n	80092be <_svfiprintf_r+0x112>
 80092b4:	425b      	negs	r3, r3
 80092b6:	60e3      	str	r3, [r4, #12]
 80092b8:	2302      	movs	r3, #2
 80092ba:	4313      	orrs	r3, r2
 80092bc:	6023      	str	r3, [r4, #0]
 80092be:	782b      	ldrb	r3, [r5, #0]
 80092c0:	2b2e      	cmp	r3, #46	; 0x2e
 80092c2:	d10a      	bne.n	80092da <_svfiprintf_r+0x12e>
 80092c4:	786b      	ldrb	r3, [r5, #1]
 80092c6:	2b2a      	cmp	r3, #42	; 0x2a
 80092c8:	d135      	bne.n	8009336 <_svfiprintf_r+0x18a>
 80092ca:	9b07      	ldr	r3, [sp, #28]
 80092cc:	3502      	adds	r5, #2
 80092ce:	1d1a      	adds	r2, r3, #4
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	9207      	str	r2, [sp, #28]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	db2b      	blt.n	8009330 <_svfiprintf_r+0x184>
 80092d8:	9309      	str	r3, [sp, #36]	; 0x24
 80092da:	4e30      	ldr	r6, [pc, #192]	; (800939c <_svfiprintf_r+0x1f0>)
 80092dc:	2203      	movs	r2, #3
 80092de:	0030      	movs	r0, r6
 80092e0:	7829      	ldrb	r1, [r5, #0]
 80092e2:	f7ff f915 	bl	8008510 <memchr>
 80092e6:	2800      	cmp	r0, #0
 80092e8:	d006      	beq.n	80092f8 <_svfiprintf_r+0x14c>
 80092ea:	2340      	movs	r3, #64	; 0x40
 80092ec:	1b80      	subs	r0, r0, r6
 80092ee:	4083      	lsls	r3, r0
 80092f0:	6822      	ldr	r2, [r4, #0]
 80092f2:	3501      	adds	r5, #1
 80092f4:	4313      	orrs	r3, r2
 80092f6:	6023      	str	r3, [r4, #0]
 80092f8:	7829      	ldrb	r1, [r5, #0]
 80092fa:	2206      	movs	r2, #6
 80092fc:	4828      	ldr	r0, [pc, #160]	; (80093a0 <_svfiprintf_r+0x1f4>)
 80092fe:	1c6e      	adds	r6, r5, #1
 8009300:	7621      	strb	r1, [r4, #24]
 8009302:	f7ff f905 	bl	8008510 <memchr>
 8009306:	2800      	cmp	r0, #0
 8009308:	d03c      	beq.n	8009384 <_svfiprintf_r+0x1d8>
 800930a:	4b26      	ldr	r3, [pc, #152]	; (80093a4 <_svfiprintf_r+0x1f8>)
 800930c:	2b00      	cmp	r3, #0
 800930e:	d125      	bne.n	800935c <_svfiprintf_r+0x1b0>
 8009310:	2207      	movs	r2, #7
 8009312:	9b07      	ldr	r3, [sp, #28]
 8009314:	3307      	adds	r3, #7
 8009316:	4393      	bics	r3, r2
 8009318:	3308      	adds	r3, #8
 800931a:	9307      	str	r3, [sp, #28]
 800931c:	6963      	ldr	r3, [r4, #20]
 800931e:	9a04      	ldr	r2, [sp, #16]
 8009320:	189b      	adds	r3, r3, r2
 8009322:	6163      	str	r3, [r4, #20]
 8009324:	e765      	b.n	80091f2 <_svfiprintf_r+0x46>
 8009326:	4343      	muls	r3, r0
 8009328:	0035      	movs	r5, r6
 800932a:	2101      	movs	r1, #1
 800932c:	189b      	adds	r3, r3, r2
 800932e:	e7a6      	b.n	800927e <_svfiprintf_r+0xd2>
 8009330:	2301      	movs	r3, #1
 8009332:	425b      	negs	r3, r3
 8009334:	e7d0      	b.n	80092d8 <_svfiprintf_r+0x12c>
 8009336:	2300      	movs	r3, #0
 8009338:	200a      	movs	r0, #10
 800933a:	001a      	movs	r2, r3
 800933c:	3501      	adds	r5, #1
 800933e:	6063      	str	r3, [r4, #4]
 8009340:	7829      	ldrb	r1, [r5, #0]
 8009342:	1c6e      	adds	r6, r5, #1
 8009344:	3930      	subs	r1, #48	; 0x30
 8009346:	2909      	cmp	r1, #9
 8009348:	d903      	bls.n	8009352 <_svfiprintf_r+0x1a6>
 800934a:	2b00      	cmp	r3, #0
 800934c:	d0c5      	beq.n	80092da <_svfiprintf_r+0x12e>
 800934e:	9209      	str	r2, [sp, #36]	; 0x24
 8009350:	e7c3      	b.n	80092da <_svfiprintf_r+0x12e>
 8009352:	4342      	muls	r2, r0
 8009354:	0035      	movs	r5, r6
 8009356:	2301      	movs	r3, #1
 8009358:	1852      	adds	r2, r2, r1
 800935a:	e7f1      	b.n	8009340 <_svfiprintf_r+0x194>
 800935c:	ab07      	add	r3, sp, #28
 800935e:	9300      	str	r3, [sp, #0]
 8009360:	003a      	movs	r2, r7
 8009362:	0021      	movs	r1, r4
 8009364:	4b10      	ldr	r3, [pc, #64]	; (80093a8 <_svfiprintf_r+0x1fc>)
 8009366:	9803      	ldr	r0, [sp, #12]
 8009368:	f7fc f9e2 	bl	8005730 <_printf_float>
 800936c:	9004      	str	r0, [sp, #16]
 800936e:	9b04      	ldr	r3, [sp, #16]
 8009370:	3301      	adds	r3, #1
 8009372:	d1d3      	bne.n	800931c <_svfiprintf_r+0x170>
 8009374:	89bb      	ldrh	r3, [r7, #12]
 8009376:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009378:	065b      	lsls	r3, r3, #25
 800937a:	d400      	bmi.n	800937e <_svfiprintf_r+0x1d2>
 800937c:	e72d      	b.n	80091da <_svfiprintf_r+0x2e>
 800937e:	2001      	movs	r0, #1
 8009380:	4240      	negs	r0, r0
 8009382:	e72a      	b.n	80091da <_svfiprintf_r+0x2e>
 8009384:	ab07      	add	r3, sp, #28
 8009386:	9300      	str	r3, [sp, #0]
 8009388:	003a      	movs	r2, r7
 800938a:	0021      	movs	r1, r4
 800938c:	4b06      	ldr	r3, [pc, #24]	; (80093a8 <_svfiprintf_r+0x1fc>)
 800938e:	9803      	ldr	r0, [sp, #12]
 8009390:	f7fc fc80 	bl	8005c94 <_printf_i>
 8009394:	e7ea      	b.n	800936c <_svfiprintf_r+0x1c0>
 8009396:	46c0      	nop			; (mov r8, r8)
 8009398:	0800a4f4 	.word	0x0800a4f4
 800939c:	0800a4fa 	.word	0x0800a4fa
 80093a0:	0800a4fe 	.word	0x0800a4fe
 80093a4:	08005731 	.word	0x08005731
 80093a8:	080090e9 	.word	0x080090e9

080093ac <nan>:
 80093ac:	2000      	movs	r0, #0
 80093ae:	4901      	ldr	r1, [pc, #4]	; (80093b4 <nan+0x8>)
 80093b0:	4770      	bx	lr
 80093b2:	46c0      	nop			; (mov r8, r8)
 80093b4:	7ff80000 	.word	0x7ff80000

080093b8 <_sbrk_r>:
 80093b8:	2300      	movs	r3, #0
 80093ba:	b570      	push	{r4, r5, r6, lr}
 80093bc:	4d06      	ldr	r5, [pc, #24]	; (80093d8 <_sbrk_r+0x20>)
 80093be:	0004      	movs	r4, r0
 80093c0:	0008      	movs	r0, r1
 80093c2:	602b      	str	r3, [r5, #0]
 80093c4:	f7f9 fa7a 	bl	80028bc <_sbrk>
 80093c8:	1c43      	adds	r3, r0, #1
 80093ca:	d103      	bne.n	80093d4 <_sbrk_r+0x1c>
 80093cc:	682b      	ldr	r3, [r5, #0]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d000      	beq.n	80093d4 <_sbrk_r+0x1c>
 80093d2:	6023      	str	r3, [r4, #0]
 80093d4:	bd70      	pop	{r4, r5, r6, pc}
 80093d6:	46c0      	nop			; (mov r8, r8)
 80093d8:	200002d0 	.word	0x200002d0

080093dc <strncmp>:
 80093dc:	b530      	push	{r4, r5, lr}
 80093de:	0005      	movs	r5, r0
 80093e0:	1e10      	subs	r0, r2, #0
 80093e2:	d008      	beq.n	80093f6 <strncmp+0x1a>
 80093e4:	2400      	movs	r4, #0
 80093e6:	3a01      	subs	r2, #1
 80093e8:	5d2b      	ldrb	r3, [r5, r4]
 80093ea:	5d08      	ldrb	r0, [r1, r4]
 80093ec:	4283      	cmp	r3, r0
 80093ee:	d101      	bne.n	80093f4 <strncmp+0x18>
 80093f0:	4294      	cmp	r4, r2
 80093f2:	d101      	bne.n	80093f8 <strncmp+0x1c>
 80093f4:	1a18      	subs	r0, r3, r0
 80093f6:	bd30      	pop	{r4, r5, pc}
 80093f8:	3401      	adds	r4, #1
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d1f4      	bne.n	80093e8 <strncmp+0xc>
 80093fe:	e7f9      	b.n	80093f4 <strncmp+0x18>

08009400 <__ascii_wctomb>:
 8009400:	0003      	movs	r3, r0
 8009402:	1e08      	subs	r0, r1, #0
 8009404:	d005      	beq.n	8009412 <__ascii_wctomb+0x12>
 8009406:	2aff      	cmp	r2, #255	; 0xff
 8009408:	d904      	bls.n	8009414 <__ascii_wctomb+0x14>
 800940a:	228a      	movs	r2, #138	; 0x8a
 800940c:	2001      	movs	r0, #1
 800940e:	601a      	str	r2, [r3, #0]
 8009410:	4240      	negs	r0, r0
 8009412:	4770      	bx	lr
 8009414:	2001      	movs	r0, #1
 8009416:	700a      	strb	r2, [r1, #0]
 8009418:	e7fb      	b.n	8009412 <__ascii_wctomb+0x12>
	...

0800941c <__assert_func>:
 800941c:	b530      	push	{r4, r5, lr}
 800941e:	0014      	movs	r4, r2
 8009420:	001a      	movs	r2, r3
 8009422:	4b09      	ldr	r3, [pc, #36]	; (8009448 <__assert_func+0x2c>)
 8009424:	0005      	movs	r5, r0
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	b085      	sub	sp, #20
 800942a:	68d8      	ldr	r0, [r3, #12]
 800942c:	4b07      	ldr	r3, [pc, #28]	; (800944c <__assert_func+0x30>)
 800942e:	2c00      	cmp	r4, #0
 8009430:	d101      	bne.n	8009436 <__assert_func+0x1a>
 8009432:	4b07      	ldr	r3, [pc, #28]	; (8009450 <__assert_func+0x34>)
 8009434:	001c      	movs	r4, r3
 8009436:	9301      	str	r3, [sp, #4]
 8009438:	9100      	str	r1, [sp, #0]
 800943a:	002b      	movs	r3, r5
 800943c:	4905      	ldr	r1, [pc, #20]	; (8009454 <__assert_func+0x38>)
 800943e:	9402      	str	r4, [sp, #8]
 8009440:	f000 f80a 	bl	8009458 <fiprintf>
 8009444:	f000 fa9a 	bl	800997c <abort>
 8009448:	2000000c 	.word	0x2000000c
 800944c:	0800a505 	.word	0x0800a505
 8009450:	0800a540 	.word	0x0800a540
 8009454:	0800a512 	.word	0x0800a512

08009458 <fiprintf>:
 8009458:	b40e      	push	{r1, r2, r3}
 800945a:	b503      	push	{r0, r1, lr}
 800945c:	0001      	movs	r1, r0
 800945e:	ab03      	add	r3, sp, #12
 8009460:	4804      	ldr	r0, [pc, #16]	; (8009474 <fiprintf+0x1c>)
 8009462:	cb04      	ldmia	r3!, {r2}
 8009464:	6800      	ldr	r0, [r0, #0]
 8009466:	9301      	str	r3, [sp, #4]
 8009468:	f000 f880 	bl	800956c <_vfiprintf_r>
 800946c:	b002      	add	sp, #8
 800946e:	bc08      	pop	{r3}
 8009470:	b003      	add	sp, #12
 8009472:	4718      	bx	r3
 8009474:	2000000c 	.word	0x2000000c

08009478 <memmove>:
 8009478:	b510      	push	{r4, lr}
 800947a:	4288      	cmp	r0, r1
 800947c:	d902      	bls.n	8009484 <memmove+0xc>
 800947e:	188b      	adds	r3, r1, r2
 8009480:	4298      	cmp	r0, r3
 8009482:	d303      	bcc.n	800948c <memmove+0x14>
 8009484:	2300      	movs	r3, #0
 8009486:	e007      	b.n	8009498 <memmove+0x20>
 8009488:	5c8b      	ldrb	r3, [r1, r2]
 800948a:	5483      	strb	r3, [r0, r2]
 800948c:	3a01      	subs	r2, #1
 800948e:	d2fb      	bcs.n	8009488 <memmove+0x10>
 8009490:	bd10      	pop	{r4, pc}
 8009492:	5ccc      	ldrb	r4, [r1, r3]
 8009494:	54c4      	strb	r4, [r0, r3]
 8009496:	3301      	adds	r3, #1
 8009498:	429a      	cmp	r2, r3
 800949a:	d1fa      	bne.n	8009492 <memmove+0x1a>
 800949c:	e7f8      	b.n	8009490 <memmove+0x18>
	...

080094a0 <__malloc_lock>:
 80094a0:	b510      	push	{r4, lr}
 80094a2:	4802      	ldr	r0, [pc, #8]	; (80094ac <__malloc_lock+0xc>)
 80094a4:	f000 fc41 	bl	8009d2a <__retarget_lock_acquire_recursive>
 80094a8:	bd10      	pop	{r4, pc}
 80094aa:	46c0      	nop			; (mov r8, r8)
 80094ac:	200002d4 	.word	0x200002d4

080094b0 <__malloc_unlock>:
 80094b0:	b510      	push	{r4, lr}
 80094b2:	4802      	ldr	r0, [pc, #8]	; (80094bc <__malloc_unlock+0xc>)
 80094b4:	f000 fc3a 	bl	8009d2c <__retarget_lock_release_recursive>
 80094b8:	bd10      	pop	{r4, pc}
 80094ba:	46c0      	nop			; (mov r8, r8)
 80094bc:	200002d4 	.word	0x200002d4

080094c0 <_realloc_r>:
 80094c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094c2:	0007      	movs	r7, r0
 80094c4:	000e      	movs	r6, r1
 80094c6:	0014      	movs	r4, r2
 80094c8:	2900      	cmp	r1, #0
 80094ca:	d105      	bne.n	80094d8 <_realloc_r+0x18>
 80094cc:	0011      	movs	r1, r2
 80094ce:	f7ff fd95 	bl	8008ffc <_malloc_r>
 80094d2:	0005      	movs	r5, r0
 80094d4:	0028      	movs	r0, r5
 80094d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80094d8:	2a00      	cmp	r2, #0
 80094da:	d103      	bne.n	80094e4 <_realloc_r+0x24>
 80094dc:	f7ff fd22 	bl	8008f24 <_free_r>
 80094e0:	0025      	movs	r5, r4
 80094e2:	e7f7      	b.n	80094d4 <_realloc_r+0x14>
 80094e4:	f000 fc90 	bl	8009e08 <_malloc_usable_size_r>
 80094e8:	9001      	str	r0, [sp, #4]
 80094ea:	4284      	cmp	r4, r0
 80094ec:	d803      	bhi.n	80094f6 <_realloc_r+0x36>
 80094ee:	0035      	movs	r5, r6
 80094f0:	0843      	lsrs	r3, r0, #1
 80094f2:	42a3      	cmp	r3, r4
 80094f4:	d3ee      	bcc.n	80094d4 <_realloc_r+0x14>
 80094f6:	0021      	movs	r1, r4
 80094f8:	0038      	movs	r0, r7
 80094fa:	f7ff fd7f 	bl	8008ffc <_malloc_r>
 80094fe:	1e05      	subs	r5, r0, #0
 8009500:	d0e8      	beq.n	80094d4 <_realloc_r+0x14>
 8009502:	9b01      	ldr	r3, [sp, #4]
 8009504:	0022      	movs	r2, r4
 8009506:	429c      	cmp	r4, r3
 8009508:	d900      	bls.n	800950c <_realloc_r+0x4c>
 800950a:	001a      	movs	r2, r3
 800950c:	0031      	movs	r1, r6
 800950e:	0028      	movs	r0, r5
 8009510:	f7ff f809 	bl	8008526 <memcpy>
 8009514:	0031      	movs	r1, r6
 8009516:	0038      	movs	r0, r7
 8009518:	f7ff fd04 	bl	8008f24 <_free_r>
 800951c:	e7da      	b.n	80094d4 <_realloc_r+0x14>

0800951e <__sfputc_r>:
 800951e:	6893      	ldr	r3, [r2, #8]
 8009520:	b510      	push	{r4, lr}
 8009522:	3b01      	subs	r3, #1
 8009524:	6093      	str	r3, [r2, #8]
 8009526:	2b00      	cmp	r3, #0
 8009528:	da04      	bge.n	8009534 <__sfputc_r+0x16>
 800952a:	6994      	ldr	r4, [r2, #24]
 800952c:	42a3      	cmp	r3, r4
 800952e:	db07      	blt.n	8009540 <__sfputc_r+0x22>
 8009530:	290a      	cmp	r1, #10
 8009532:	d005      	beq.n	8009540 <__sfputc_r+0x22>
 8009534:	6813      	ldr	r3, [r2, #0]
 8009536:	1c58      	adds	r0, r3, #1
 8009538:	6010      	str	r0, [r2, #0]
 800953a:	7019      	strb	r1, [r3, #0]
 800953c:	0008      	movs	r0, r1
 800953e:	bd10      	pop	{r4, pc}
 8009540:	f000 f94e 	bl	80097e0 <__swbuf_r>
 8009544:	0001      	movs	r1, r0
 8009546:	e7f9      	b.n	800953c <__sfputc_r+0x1e>

08009548 <__sfputs_r>:
 8009548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800954a:	0006      	movs	r6, r0
 800954c:	000f      	movs	r7, r1
 800954e:	0014      	movs	r4, r2
 8009550:	18d5      	adds	r5, r2, r3
 8009552:	42ac      	cmp	r4, r5
 8009554:	d101      	bne.n	800955a <__sfputs_r+0x12>
 8009556:	2000      	movs	r0, #0
 8009558:	e007      	b.n	800956a <__sfputs_r+0x22>
 800955a:	7821      	ldrb	r1, [r4, #0]
 800955c:	003a      	movs	r2, r7
 800955e:	0030      	movs	r0, r6
 8009560:	f7ff ffdd 	bl	800951e <__sfputc_r>
 8009564:	3401      	adds	r4, #1
 8009566:	1c43      	adds	r3, r0, #1
 8009568:	d1f3      	bne.n	8009552 <__sfputs_r+0xa>
 800956a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800956c <_vfiprintf_r>:
 800956c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800956e:	b0a1      	sub	sp, #132	; 0x84
 8009570:	0006      	movs	r6, r0
 8009572:	000c      	movs	r4, r1
 8009574:	001f      	movs	r7, r3
 8009576:	9203      	str	r2, [sp, #12]
 8009578:	2800      	cmp	r0, #0
 800957a:	d004      	beq.n	8009586 <_vfiprintf_r+0x1a>
 800957c:	6983      	ldr	r3, [r0, #24]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d101      	bne.n	8009586 <_vfiprintf_r+0x1a>
 8009582:	f000 fb31 	bl	8009be8 <__sinit>
 8009586:	4b8e      	ldr	r3, [pc, #568]	; (80097c0 <_vfiprintf_r+0x254>)
 8009588:	429c      	cmp	r4, r3
 800958a:	d11c      	bne.n	80095c6 <_vfiprintf_r+0x5a>
 800958c:	6874      	ldr	r4, [r6, #4]
 800958e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009590:	07db      	lsls	r3, r3, #31
 8009592:	d405      	bmi.n	80095a0 <_vfiprintf_r+0x34>
 8009594:	89a3      	ldrh	r3, [r4, #12]
 8009596:	059b      	lsls	r3, r3, #22
 8009598:	d402      	bmi.n	80095a0 <_vfiprintf_r+0x34>
 800959a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800959c:	f000 fbc5 	bl	8009d2a <__retarget_lock_acquire_recursive>
 80095a0:	89a3      	ldrh	r3, [r4, #12]
 80095a2:	071b      	lsls	r3, r3, #28
 80095a4:	d502      	bpl.n	80095ac <_vfiprintf_r+0x40>
 80095a6:	6923      	ldr	r3, [r4, #16]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d11d      	bne.n	80095e8 <_vfiprintf_r+0x7c>
 80095ac:	0021      	movs	r1, r4
 80095ae:	0030      	movs	r0, r6
 80095b0:	f000 f96c 	bl	800988c <__swsetup_r>
 80095b4:	2800      	cmp	r0, #0
 80095b6:	d017      	beq.n	80095e8 <_vfiprintf_r+0x7c>
 80095b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095ba:	07db      	lsls	r3, r3, #31
 80095bc:	d50d      	bpl.n	80095da <_vfiprintf_r+0x6e>
 80095be:	2001      	movs	r0, #1
 80095c0:	4240      	negs	r0, r0
 80095c2:	b021      	add	sp, #132	; 0x84
 80095c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095c6:	4b7f      	ldr	r3, [pc, #508]	; (80097c4 <_vfiprintf_r+0x258>)
 80095c8:	429c      	cmp	r4, r3
 80095ca:	d101      	bne.n	80095d0 <_vfiprintf_r+0x64>
 80095cc:	68b4      	ldr	r4, [r6, #8]
 80095ce:	e7de      	b.n	800958e <_vfiprintf_r+0x22>
 80095d0:	4b7d      	ldr	r3, [pc, #500]	; (80097c8 <_vfiprintf_r+0x25c>)
 80095d2:	429c      	cmp	r4, r3
 80095d4:	d1db      	bne.n	800958e <_vfiprintf_r+0x22>
 80095d6:	68f4      	ldr	r4, [r6, #12]
 80095d8:	e7d9      	b.n	800958e <_vfiprintf_r+0x22>
 80095da:	89a3      	ldrh	r3, [r4, #12]
 80095dc:	059b      	lsls	r3, r3, #22
 80095de:	d4ee      	bmi.n	80095be <_vfiprintf_r+0x52>
 80095e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095e2:	f000 fba3 	bl	8009d2c <__retarget_lock_release_recursive>
 80095e6:	e7ea      	b.n	80095be <_vfiprintf_r+0x52>
 80095e8:	2300      	movs	r3, #0
 80095ea:	ad08      	add	r5, sp, #32
 80095ec:	616b      	str	r3, [r5, #20]
 80095ee:	3320      	adds	r3, #32
 80095f0:	766b      	strb	r3, [r5, #25]
 80095f2:	3310      	adds	r3, #16
 80095f4:	76ab      	strb	r3, [r5, #26]
 80095f6:	9707      	str	r7, [sp, #28]
 80095f8:	9f03      	ldr	r7, [sp, #12]
 80095fa:	783b      	ldrb	r3, [r7, #0]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d001      	beq.n	8009604 <_vfiprintf_r+0x98>
 8009600:	2b25      	cmp	r3, #37	; 0x25
 8009602:	d14e      	bne.n	80096a2 <_vfiprintf_r+0x136>
 8009604:	9b03      	ldr	r3, [sp, #12]
 8009606:	1afb      	subs	r3, r7, r3
 8009608:	9305      	str	r3, [sp, #20]
 800960a:	9b03      	ldr	r3, [sp, #12]
 800960c:	429f      	cmp	r7, r3
 800960e:	d00d      	beq.n	800962c <_vfiprintf_r+0xc0>
 8009610:	9b05      	ldr	r3, [sp, #20]
 8009612:	0021      	movs	r1, r4
 8009614:	0030      	movs	r0, r6
 8009616:	9a03      	ldr	r2, [sp, #12]
 8009618:	f7ff ff96 	bl	8009548 <__sfputs_r>
 800961c:	1c43      	adds	r3, r0, #1
 800961e:	d100      	bne.n	8009622 <_vfiprintf_r+0xb6>
 8009620:	e0b5      	b.n	800978e <_vfiprintf_r+0x222>
 8009622:	696a      	ldr	r2, [r5, #20]
 8009624:	9b05      	ldr	r3, [sp, #20]
 8009626:	4694      	mov	ip, r2
 8009628:	4463      	add	r3, ip
 800962a:	616b      	str	r3, [r5, #20]
 800962c:	783b      	ldrb	r3, [r7, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d100      	bne.n	8009634 <_vfiprintf_r+0xc8>
 8009632:	e0ac      	b.n	800978e <_vfiprintf_r+0x222>
 8009634:	2201      	movs	r2, #1
 8009636:	1c7b      	adds	r3, r7, #1
 8009638:	9303      	str	r3, [sp, #12]
 800963a:	2300      	movs	r3, #0
 800963c:	4252      	negs	r2, r2
 800963e:	606a      	str	r2, [r5, #4]
 8009640:	a904      	add	r1, sp, #16
 8009642:	3254      	adds	r2, #84	; 0x54
 8009644:	1852      	adds	r2, r2, r1
 8009646:	602b      	str	r3, [r5, #0]
 8009648:	60eb      	str	r3, [r5, #12]
 800964a:	60ab      	str	r3, [r5, #8]
 800964c:	7013      	strb	r3, [r2, #0]
 800964e:	65ab      	str	r3, [r5, #88]	; 0x58
 8009650:	9b03      	ldr	r3, [sp, #12]
 8009652:	2205      	movs	r2, #5
 8009654:	7819      	ldrb	r1, [r3, #0]
 8009656:	485d      	ldr	r0, [pc, #372]	; (80097cc <_vfiprintf_r+0x260>)
 8009658:	f7fe ff5a 	bl	8008510 <memchr>
 800965c:	9b03      	ldr	r3, [sp, #12]
 800965e:	1c5f      	adds	r7, r3, #1
 8009660:	2800      	cmp	r0, #0
 8009662:	d120      	bne.n	80096a6 <_vfiprintf_r+0x13a>
 8009664:	682a      	ldr	r2, [r5, #0]
 8009666:	06d3      	lsls	r3, r2, #27
 8009668:	d504      	bpl.n	8009674 <_vfiprintf_r+0x108>
 800966a:	2353      	movs	r3, #83	; 0x53
 800966c:	a904      	add	r1, sp, #16
 800966e:	185b      	adds	r3, r3, r1
 8009670:	2120      	movs	r1, #32
 8009672:	7019      	strb	r1, [r3, #0]
 8009674:	0713      	lsls	r3, r2, #28
 8009676:	d504      	bpl.n	8009682 <_vfiprintf_r+0x116>
 8009678:	2353      	movs	r3, #83	; 0x53
 800967a:	a904      	add	r1, sp, #16
 800967c:	185b      	adds	r3, r3, r1
 800967e:	212b      	movs	r1, #43	; 0x2b
 8009680:	7019      	strb	r1, [r3, #0]
 8009682:	9b03      	ldr	r3, [sp, #12]
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	2b2a      	cmp	r3, #42	; 0x2a
 8009688:	d016      	beq.n	80096b8 <_vfiprintf_r+0x14c>
 800968a:	2100      	movs	r1, #0
 800968c:	68eb      	ldr	r3, [r5, #12]
 800968e:	9f03      	ldr	r7, [sp, #12]
 8009690:	783a      	ldrb	r2, [r7, #0]
 8009692:	1c78      	adds	r0, r7, #1
 8009694:	3a30      	subs	r2, #48	; 0x30
 8009696:	4684      	mov	ip, r0
 8009698:	2a09      	cmp	r2, #9
 800969a:	d94f      	bls.n	800973c <_vfiprintf_r+0x1d0>
 800969c:	2900      	cmp	r1, #0
 800969e:	d111      	bne.n	80096c4 <_vfiprintf_r+0x158>
 80096a0:	e017      	b.n	80096d2 <_vfiprintf_r+0x166>
 80096a2:	3701      	adds	r7, #1
 80096a4:	e7a9      	b.n	80095fa <_vfiprintf_r+0x8e>
 80096a6:	4b49      	ldr	r3, [pc, #292]	; (80097cc <_vfiprintf_r+0x260>)
 80096a8:	682a      	ldr	r2, [r5, #0]
 80096aa:	1ac0      	subs	r0, r0, r3
 80096ac:	2301      	movs	r3, #1
 80096ae:	4083      	lsls	r3, r0
 80096b0:	4313      	orrs	r3, r2
 80096b2:	602b      	str	r3, [r5, #0]
 80096b4:	9703      	str	r7, [sp, #12]
 80096b6:	e7cb      	b.n	8009650 <_vfiprintf_r+0xe4>
 80096b8:	9b07      	ldr	r3, [sp, #28]
 80096ba:	1d19      	adds	r1, r3, #4
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	9107      	str	r1, [sp, #28]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	db01      	blt.n	80096c8 <_vfiprintf_r+0x15c>
 80096c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80096c6:	e004      	b.n	80096d2 <_vfiprintf_r+0x166>
 80096c8:	425b      	negs	r3, r3
 80096ca:	60eb      	str	r3, [r5, #12]
 80096cc:	2302      	movs	r3, #2
 80096ce:	4313      	orrs	r3, r2
 80096d0:	602b      	str	r3, [r5, #0]
 80096d2:	783b      	ldrb	r3, [r7, #0]
 80096d4:	2b2e      	cmp	r3, #46	; 0x2e
 80096d6:	d10a      	bne.n	80096ee <_vfiprintf_r+0x182>
 80096d8:	787b      	ldrb	r3, [r7, #1]
 80096da:	2b2a      	cmp	r3, #42	; 0x2a
 80096dc:	d137      	bne.n	800974e <_vfiprintf_r+0x1e2>
 80096de:	9b07      	ldr	r3, [sp, #28]
 80096e0:	3702      	adds	r7, #2
 80096e2:	1d1a      	adds	r2, r3, #4
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	9207      	str	r2, [sp, #28]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	db2d      	blt.n	8009748 <_vfiprintf_r+0x1dc>
 80096ec:	9309      	str	r3, [sp, #36]	; 0x24
 80096ee:	2203      	movs	r2, #3
 80096f0:	7839      	ldrb	r1, [r7, #0]
 80096f2:	4837      	ldr	r0, [pc, #220]	; (80097d0 <_vfiprintf_r+0x264>)
 80096f4:	f7fe ff0c 	bl	8008510 <memchr>
 80096f8:	2800      	cmp	r0, #0
 80096fa:	d007      	beq.n	800970c <_vfiprintf_r+0x1a0>
 80096fc:	4b34      	ldr	r3, [pc, #208]	; (80097d0 <_vfiprintf_r+0x264>)
 80096fe:	682a      	ldr	r2, [r5, #0]
 8009700:	1ac0      	subs	r0, r0, r3
 8009702:	2340      	movs	r3, #64	; 0x40
 8009704:	4083      	lsls	r3, r0
 8009706:	4313      	orrs	r3, r2
 8009708:	3701      	adds	r7, #1
 800970a:	602b      	str	r3, [r5, #0]
 800970c:	7839      	ldrb	r1, [r7, #0]
 800970e:	1c7b      	adds	r3, r7, #1
 8009710:	2206      	movs	r2, #6
 8009712:	4830      	ldr	r0, [pc, #192]	; (80097d4 <_vfiprintf_r+0x268>)
 8009714:	9303      	str	r3, [sp, #12]
 8009716:	7629      	strb	r1, [r5, #24]
 8009718:	f7fe fefa 	bl	8008510 <memchr>
 800971c:	2800      	cmp	r0, #0
 800971e:	d045      	beq.n	80097ac <_vfiprintf_r+0x240>
 8009720:	4b2d      	ldr	r3, [pc, #180]	; (80097d8 <_vfiprintf_r+0x26c>)
 8009722:	2b00      	cmp	r3, #0
 8009724:	d127      	bne.n	8009776 <_vfiprintf_r+0x20a>
 8009726:	2207      	movs	r2, #7
 8009728:	9b07      	ldr	r3, [sp, #28]
 800972a:	3307      	adds	r3, #7
 800972c:	4393      	bics	r3, r2
 800972e:	3308      	adds	r3, #8
 8009730:	9307      	str	r3, [sp, #28]
 8009732:	696b      	ldr	r3, [r5, #20]
 8009734:	9a04      	ldr	r2, [sp, #16]
 8009736:	189b      	adds	r3, r3, r2
 8009738:	616b      	str	r3, [r5, #20]
 800973a:	e75d      	b.n	80095f8 <_vfiprintf_r+0x8c>
 800973c:	210a      	movs	r1, #10
 800973e:	434b      	muls	r3, r1
 8009740:	4667      	mov	r7, ip
 8009742:	189b      	adds	r3, r3, r2
 8009744:	3909      	subs	r1, #9
 8009746:	e7a3      	b.n	8009690 <_vfiprintf_r+0x124>
 8009748:	2301      	movs	r3, #1
 800974a:	425b      	negs	r3, r3
 800974c:	e7ce      	b.n	80096ec <_vfiprintf_r+0x180>
 800974e:	2300      	movs	r3, #0
 8009750:	001a      	movs	r2, r3
 8009752:	3701      	adds	r7, #1
 8009754:	606b      	str	r3, [r5, #4]
 8009756:	7839      	ldrb	r1, [r7, #0]
 8009758:	1c78      	adds	r0, r7, #1
 800975a:	3930      	subs	r1, #48	; 0x30
 800975c:	4684      	mov	ip, r0
 800975e:	2909      	cmp	r1, #9
 8009760:	d903      	bls.n	800976a <_vfiprintf_r+0x1fe>
 8009762:	2b00      	cmp	r3, #0
 8009764:	d0c3      	beq.n	80096ee <_vfiprintf_r+0x182>
 8009766:	9209      	str	r2, [sp, #36]	; 0x24
 8009768:	e7c1      	b.n	80096ee <_vfiprintf_r+0x182>
 800976a:	230a      	movs	r3, #10
 800976c:	435a      	muls	r2, r3
 800976e:	4667      	mov	r7, ip
 8009770:	1852      	adds	r2, r2, r1
 8009772:	3b09      	subs	r3, #9
 8009774:	e7ef      	b.n	8009756 <_vfiprintf_r+0x1ea>
 8009776:	ab07      	add	r3, sp, #28
 8009778:	9300      	str	r3, [sp, #0]
 800977a:	0022      	movs	r2, r4
 800977c:	0029      	movs	r1, r5
 800977e:	0030      	movs	r0, r6
 8009780:	4b16      	ldr	r3, [pc, #88]	; (80097dc <_vfiprintf_r+0x270>)
 8009782:	f7fb ffd5 	bl	8005730 <_printf_float>
 8009786:	9004      	str	r0, [sp, #16]
 8009788:	9b04      	ldr	r3, [sp, #16]
 800978a:	3301      	adds	r3, #1
 800978c:	d1d1      	bne.n	8009732 <_vfiprintf_r+0x1c6>
 800978e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009790:	07db      	lsls	r3, r3, #31
 8009792:	d405      	bmi.n	80097a0 <_vfiprintf_r+0x234>
 8009794:	89a3      	ldrh	r3, [r4, #12]
 8009796:	059b      	lsls	r3, r3, #22
 8009798:	d402      	bmi.n	80097a0 <_vfiprintf_r+0x234>
 800979a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800979c:	f000 fac6 	bl	8009d2c <__retarget_lock_release_recursive>
 80097a0:	89a3      	ldrh	r3, [r4, #12]
 80097a2:	065b      	lsls	r3, r3, #25
 80097a4:	d500      	bpl.n	80097a8 <_vfiprintf_r+0x23c>
 80097a6:	e70a      	b.n	80095be <_vfiprintf_r+0x52>
 80097a8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80097aa:	e70a      	b.n	80095c2 <_vfiprintf_r+0x56>
 80097ac:	ab07      	add	r3, sp, #28
 80097ae:	9300      	str	r3, [sp, #0]
 80097b0:	0022      	movs	r2, r4
 80097b2:	0029      	movs	r1, r5
 80097b4:	0030      	movs	r0, r6
 80097b6:	4b09      	ldr	r3, [pc, #36]	; (80097dc <_vfiprintf_r+0x270>)
 80097b8:	f7fc fa6c 	bl	8005c94 <_printf_i>
 80097bc:	e7e3      	b.n	8009786 <_vfiprintf_r+0x21a>
 80097be:	46c0      	nop			; (mov r8, r8)
 80097c0:	0800a564 	.word	0x0800a564
 80097c4:	0800a584 	.word	0x0800a584
 80097c8:	0800a544 	.word	0x0800a544
 80097cc:	0800a4f4 	.word	0x0800a4f4
 80097d0:	0800a4fa 	.word	0x0800a4fa
 80097d4:	0800a4fe 	.word	0x0800a4fe
 80097d8:	08005731 	.word	0x08005731
 80097dc:	08009549 	.word	0x08009549

080097e0 <__swbuf_r>:
 80097e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097e2:	0005      	movs	r5, r0
 80097e4:	000e      	movs	r6, r1
 80097e6:	0014      	movs	r4, r2
 80097e8:	2800      	cmp	r0, #0
 80097ea:	d004      	beq.n	80097f6 <__swbuf_r+0x16>
 80097ec:	6983      	ldr	r3, [r0, #24]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d101      	bne.n	80097f6 <__swbuf_r+0x16>
 80097f2:	f000 f9f9 	bl	8009be8 <__sinit>
 80097f6:	4b22      	ldr	r3, [pc, #136]	; (8009880 <__swbuf_r+0xa0>)
 80097f8:	429c      	cmp	r4, r3
 80097fa:	d12e      	bne.n	800985a <__swbuf_r+0x7a>
 80097fc:	686c      	ldr	r4, [r5, #4]
 80097fe:	69a3      	ldr	r3, [r4, #24]
 8009800:	60a3      	str	r3, [r4, #8]
 8009802:	89a3      	ldrh	r3, [r4, #12]
 8009804:	071b      	lsls	r3, r3, #28
 8009806:	d532      	bpl.n	800986e <__swbuf_r+0x8e>
 8009808:	6923      	ldr	r3, [r4, #16]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d02f      	beq.n	800986e <__swbuf_r+0x8e>
 800980e:	6823      	ldr	r3, [r4, #0]
 8009810:	6922      	ldr	r2, [r4, #16]
 8009812:	b2f7      	uxtb	r7, r6
 8009814:	1a98      	subs	r0, r3, r2
 8009816:	6963      	ldr	r3, [r4, #20]
 8009818:	b2f6      	uxtb	r6, r6
 800981a:	4283      	cmp	r3, r0
 800981c:	dc05      	bgt.n	800982a <__swbuf_r+0x4a>
 800981e:	0021      	movs	r1, r4
 8009820:	0028      	movs	r0, r5
 8009822:	f000 f93f 	bl	8009aa4 <_fflush_r>
 8009826:	2800      	cmp	r0, #0
 8009828:	d127      	bne.n	800987a <__swbuf_r+0x9a>
 800982a:	68a3      	ldr	r3, [r4, #8]
 800982c:	3001      	adds	r0, #1
 800982e:	3b01      	subs	r3, #1
 8009830:	60a3      	str	r3, [r4, #8]
 8009832:	6823      	ldr	r3, [r4, #0]
 8009834:	1c5a      	adds	r2, r3, #1
 8009836:	6022      	str	r2, [r4, #0]
 8009838:	701f      	strb	r7, [r3, #0]
 800983a:	6963      	ldr	r3, [r4, #20]
 800983c:	4283      	cmp	r3, r0
 800983e:	d004      	beq.n	800984a <__swbuf_r+0x6a>
 8009840:	89a3      	ldrh	r3, [r4, #12]
 8009842:	07db      	lsls	r3, r3, #31
 8009844:	d507      	bpl.n	8009856 <__swbuf_r+0x76>
 8009846:	2e0a      	cmp	r6, #10
 8009848:	d105      	bne.n	8009856 <__swbuf_r+0x76>
 800984a:	0021      	movs	r1, r4
 800984c:	0028      	movs	r0, r5
 800984e:	f000 f929 	bl	8009aa4 <_fflush_r>
 8009852:	2800      	cmp	r0, #0
 8009854:	d111      	bne.n	800987a <__swbuf_r+0x9a>
 8009856:	0030      	movs	r0, r6
 8009858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800985a:	4b0a      	ldr	r3, [pc, #40]	; (8009884 <__swbuf_r+0xa4>)
 800985c:	429c      	cmp	r4, r3
 800985e:	d101      	bne.n	8009864 <__swbuf_r+0x84>
 8009860:	68ac      	ldr	r4, [r5, #8]
 8009862:	e7cc      	b.n	80097fe <__swbuf_r+0x1e>
 8009864:	4b08      	ldr	r3, [pc, #32]	; (8009888 <__swbuf_r+0xa8>)
 8009866:	429c      	cmp	r4, r3
 8009868:	d1c9      	bne.n	80097fe <__swbuf_r+0x1e>
 800986a:	68ec      	ldr	r4, [r5, #12]
 800986c:	e7c7      	b.n	80097fe <__swbuf_r+0x1e>
 800986e:	0021      	movs	r1, r4
 8009870:	0028      	movs	r0, r5
 8009872:	f000 f80b 	bl	800988c <__swsetup_r>
 8009876:	2800      	cmp	r0, #0
 8009878:	d0c9      	beq.n	800980e <__swbuf_r+0x2e>
 800987a:	2601      	movs	r6, #1
 800987c:	4276      	negs	r6, r6
 800987e:	e7ea      	b.n	8009856 <__swbuf_r+0x76>
 8009880:	0800a564 	.word	0x0800a564
 8009884:	0800a584 	.word	0x0800a584
 8009888:	0800a544 	.word	0x0800a544

0800988c <__swsetup_r>:
 800988c:	4b37      	ldr	r3, [pc, #220]	; (800996c <__swsetup_r+0xe0>)
 800988e:	b570      	push	{r4, r5, r6, lr}
 8009890:	681d      	ldr	r5, [r3, #0]
 8009892:	0006      	movs	r6, r0
 8009894:	000c      	movs	r4, r1
 8009896:	2d00      	cmp	r5, #0
 8009898:	d005      	beq.n	80098a6 <__swsetup_r+0x1a>
 800989a:	69ab      	ldr	r3, [r5, #24]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d102      	bne.n	80098a6 <__swsetup_r+0x1a>
 80098a0:	0028      	movs	r0, r5
 80098a2:	f000 f9a1 	bl	8009be8 <__sinit>
 80098a6:	4b32      	ldr	r3, [pc, #200]	; (8009970 <__swsetup_r+0xe4>)
 80098a8:	429c      	cmp	r4, r3
 80098aa:	d10f      	bne.n	80098cc <__swsetup_r+0x40>
 80098ac:	686c      	ldr	r4, [r5, #4]
 80098ae:	230c      	movs	r3, #12
 80098b0:	5ee2      	ldrsh	r2, [r4, r3]
 80098b2:	b293      	uxth	r3, r2
 80098b4:	0711      	lsls	r1, r2, #28
 80098b6:	d42d      	bmi.n	8009914 <__swsetup_r+0x88>
 80098b8:	06d9      	lsls	r1, r3, #27
 80098ba:	d411      	bmi.n	80098e0 <__swsetup_r+0x54>
 80098bc:	2309      	movs	r3, #9
 80098be:	2001      	movs	r0, #1
 80098c0:	6033      	str	r3, [r6, #0]
 80098c2:	3337      	adds	r3, #55	; 0x37
 80098c4:	4313      	orrs	r3, r2
 80098c6:	81a3      	strh	r3, [r4, #12]
 80098c8:	4240      	negs	r0, r0
 80098ca:	bd70      	pop	{r4, r5, r6, pc}
 80098cc:	4b29      	ldr	r3, [pc, #164]	; (8009974 <__swsetup_r+0xe8>)
 80098ce:	429c      	cmp	r4, r3
 80098d0:	d101      	bne.n	80098d6 <__swsetup_r+0x4a>
 80098d2:	68ac      	ldr	r4, [r5, #8]
 80098d4:	e7eb      	b.n	80098ae <__swsetup_r+0x22>
 80098d6:	4b28      	ldr	r3, [pc, #160]	; (8009978 <__swsetup_r+0xec>)
 80098d8:	429c      	cmp	r4, r3
 80098da:	d1e8      	bne.n	80098ae <__swsetup_r+0x22>
 80098dc:	68ec      	ldr	r4, [r5, #12]
 80098de:	e7e6      	b.n	80098ae <__swsetup_r+0x22>
 80098e0:	075b      	lsls	r3, r3, #29
 80098e2:	d513      	bpl.n	800990c <__swsetup_r+0x80>
 80098e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098e6:	2900      	cmp	r1, #0
 80098e8:	d008      	beq.n	80098fc <__swsetup_r+0x70>
 80098ea:	0023      	movs	r3, r4
 80098ec:	3344      	adds	r3, #68	; 0x44
 80098ee:	4299      	cmp	r1, r3
 80098f0:	d002      	beq.n	80098f8 <__swsetup_r+0x6c>
 80098f2:	0030      	movs	r0, r6
 80098f4:	f7ff fb16 	bl	8008f24 <_free_r>
 80098f8:	2300      	movs	r3, #0
 80098fa:	6363      	str	r3, [r4, #52]	; 0x34
 80098fc:	2224      	movs	r2, #36	; 0x24
 80098fe:	89a3      	ldrh	r3, [r4, #12]
 8009900:	4393      	bics	r3, r2
 8009902:	81a3      	strh	r3, [r4, #12]
 8009904:	2300      	movs	r3, #0
 8009906:	6063      	str	r3, [r4, #4]
 8009908:	6923      	ldr	r3, [r4, #16]
 800990a:	6023      	str	r3, [r4, #0]
 800990c:	2308      	movs	r3, #8
 800990e:	89a2      	ldrh	r2, [r4, #12]
 8009910:	4313      	orrs	r3, r2
 8009912:	81a3      	strh	r3, [r4, #12]
 8009914:	6923      	ldr	r3, [r4, #16]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d10b      	bne.n	8009932 <__swsetup_r+0xa6>
 800991a:	21a0      	movs	r1, #160	; 0xa0
 800991c:	2280      	movs	r2, #128	; 0x80
 800991e:	89a3      	ldrh	r3, [r4, #12]
 8009920:	0089      	lsls	r1, r1, #2
 8009922:	0092      	lsls	r2, r2, #2
 8009924:	400b      	ands	r3, r1
 8009926:	4293      	cmp	r3, r2
 8009928:	d003      	beq.n	8009932 <__swsetup_r+0xa6>
 800992a:	0021      	movs	r1, r4
 800992c:	0030      	movs	r0, r6
 800992e:	f000 fa27 	bl	8009d80 <__smakebuf_r>
 8009932:	220c      	movs	r2, #12
 8009934:	5ea3      	ldrsh	r3, [r4, r2]
 8009936:	2001      	movs	r0, #1
 8009938:	001a      	movs	r2, r3
 800993a:	b299      	uxth	r1, r3
 800993c:	4002      	ands	r2, r0
 800993e:	4203      	tst	r3, r0
 8009940:	d00f      	beq.n	8009962 <__swsetup_r+0xd6>
 8009942:	2200      	movs	r2, #0
 8009944:	60a2      	str	r2, [r4, #8]
 8009946:	6962      	ldr	r2, [r4, #20]
 8009948:	4252      	negs	r2, r2
 800994a:	61a2      	str	r2, [r4, #24]
 800994c:	2000      	movs	r0, #0
 800994e:	6922      	ldr	r2, [r4, #16]
 8009950:	4282      	cmp	r2, r0
 8009952:	d1ba      	bne.n	80098ca <__swsetup_r+0x3e>
 8009954:	060a      	lsls	r2, r1, #24
 8009956:	d5b8      	bpl.n	80098ca <__swsetup_r+0x3e>
 8009958:	2240      	movs	r2, #64	; 0x40
 800995a:	4313      	orrs	r3, r2
 800995c:	81a3      	strh	r3, [r4, #12]
 800995e:	3801      	subs	r0, #1
 8009960:	e7b3      	b.n	80098ca <__swsetup_r+0x3e>
 8009962:	0788      	lsls	r0, r1, #30
 8009964:	d400      	bmi.n	8009968 <__swsetup_r+0xdc>
 8009966:	6962      	ldr	r2, [r4, #20]
 8009968:	60a2      	str	r2, [r4, #8]
 800996a:	e7ef      	b.n	800994c <__swsetup_r+0xc0>
 800996c:	2000000c 	.word	0x2000000c
 8009970:	0800a564 	.word	0x0800a564
 8009974:	0800a584 	.word	0x0800a584
 8009978:	0800a544 	.word	0x0800a544

0800997c <abort>:
 800997c:	2006      	movs	r0, #6
 800997e:	b510      	push	{r4, lr}
 8009980:	f000 fa74 	bl	8009e6c <raise>
 8009984:	2001      	movs	r0, #1
 8009986:	f7f8 ff27 	bl	80027d8 <_exit>
	...

0800998c <__sflush_r>:
 800998c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800998e:	898b      	ldrh	r3, [r1, #12]
 8009990:	0005      	movs	r5, r0
 8009992:	000c      	movs	r4, r1
 8009994:	071a      	lsls	r2, r3, #28
 8009996:	d45f      	bmi.n	8009a58 <__sflush_r+0xcc>
 8009998:	684a      	ldr	r2, [r1, #4]
 800999a:	2a00      	cmp	r2, #0
 800999c:	dc04      	bgt.n	80099a8 <__sflush_r+0x1c>
 800999e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80099a0:	2a00      	cmp	r2, #0
 80099a2:	dc01      	bgt.n	80099a8 <__sflush_r+0x1c>
 80099a4:	2000      	movs	r0, #0
 80099a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80099a8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80099aa:	2f00      	cmp	r7, #0
 80099ac:	d0fa      	beq.n	80099a4 <__sflush_r+0x18>
 80099ae:	2200      	movs	r2, #0
 80099b0:	2180      	movs	r1, #128	; 0x80
 80099b2:	682e      	ldr	r6, [r5, #0]
 80099b4:	602a      	str	r2, [r5, #0]
 80099b6:	001a      	movs	r2, r3
 80099b8:	0149      	lsls	r1, r1, #5
 80099ba:	400a      	ands	r2, r1
 80099bc:	420b      	tst	r3, r1
 80099be:	d034      	beq.n	8009a2a <__sflush_r+0x9e>
 80099c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80099c2:	89a3      	ldrh	r3, [r4, #12]
 80099c4:	075b      	lsls	r3, r3, #29
 80099c6:	d506      	bpl.n	80099d6 <__sflush_r+0x4a>
 80099c8:	6863      	ldr	r3, [r4, #4]
 80099ca:	1ac0      	subs	r0, r0, r3
 80099cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d001      	beq.n	80099d6 <__sflush_r+0x4a>
 80099d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099d4:	1ac0      	subs	r0, r0, r3
 80099d6:	0002      	movs	r2, r0
 80099d8:	6a21      	ldr	r1, [r4, #32]
 80099da:	2300      	movs	r3, #0
 80099dc:	0028      	movs	r0, r5
 80099de:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80099e0:	47b8      	blx	r7
 80099e2:	89a1      	ldrh	r1, [r4, #12]
 80099e4:	1c43      	adds	r3, r0, #1
 80099e6:	d106      	bne.n	80099f6 <__sflush_r+0x6a>
 80099e8:	682b      	ldr	r3, [r5, #0]
 80099ea:	2b1d      	cmp	r3, #29
 80099ec:	d831      	bhi.n	8009a52 <__sflush_r+0xc6>
 80099ee:	4a2c      	ldr	r2, [pc, #176]	; (8009aa0 <__sflush_r+0x114>)
 80099f0:	40da      	lsrs	r2, r3
 80099f2:	07d3      	lsls	r3, r2, #31
 80099f4:	d52d      	bpl.n	8009a52 <__sflush_r+0xc6>
 80099f6:	2300      	movs	r3, #0
 80099f8:	6063      	str	r3, [r4, #4]
 80099fa:	6923      	ldr	r3, [r4, #16]
 80099fc:	6023      	str	r3, [r4, #0]
 80099fe:	04cb      	lsls	r3, r1, #19
 8009a00:	d505      	bpl.n	8009a0e <__sflush_r+0x82>
 8009a02:	1c43      	adds	r3, r0, #1
 8009a04:	d102      	bne.n	8009a0c <__sflush_r+0x80>
 8009a06:	682b      	ldr	r3, [r5, #0]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d100      	bne.n	8009a0e <__sflush_r+0x82>
 8009a0c:	6560      	str	r0, [r4, #84]	; 0x54
 8009a0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a10:	602e      	str	r6, [r5, #0]
 8009a12:	2900      	cmp	r1, #0
 8009a14:	d0c6      	beq.n	80099a4 <__sflush_r+0x18>
 8009a16:	0023      	movs	r3, r4
 8009a18:	3344      	adds	r3, #68	; 0x44
 8009a1a:	4299      	cmp	r1, r3
 8009a1c:	d002      	beq.n	8009a24 <__sflush_r+0x98>
 8009a1e:	0028      	movs	r0, r5
 8009a20:	f7ff fa80 	bl	8008f24 <_free_r>
 8009a24:	2000      	movs	r0, #0
 8009a26:	6360      	str	r0, [r4, #52]	; 0x34
 8009a28:	e7bd      	b.n	80099a6 <__sflush_r+0x1a>
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	0028      	movs	r0, r5
 8009a2e:	6a21      	ldr	r1, [r4, #32]
 8009a30:	47b8      	blx	r7
 8009a32:	1c43      	adds	r3, r0, #1
 8009a34:	d1c5      	bne.n	80099c2 <__sflush_r+0x36>
 8009a36:	682b      	ldr	r3, [r5, #0]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d0c2      	beq.n	80099c2 <__sflush_r+0x36>
 8009a3c:	2b1d      	cmp	r3, #29
 8009a3e:	d001      	beq.n	8009a44 <__sflush_r+0xb8>
 8009a40:	2b16      	cmp	r3, #22
 8009a42:	d101      	bne.n	8009a48 <__sflush_r+0xbc>
 8009a44:	602e      	str	r6, [r5, #0]
 8009a46:	e7ad      	b.n	80099a4 <__sflush_r+0x18>
 8009a48:	2340      	movs	r3, #64	; 0x40
 8009a4a:	89a2      	ldrh	r2, [r4, #12]
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	81a3      	strh	r3, [r4, #12]
 8009a50:	e7a9      	b.n	80099a6 <__sflush_r+0x1a>
 8009a52:	2340      	movs	r3, #64	; 0x40
 8009a54:	430b      	orrs	r3, r1
 8009a56:	e7fa      	b.n	8009a4e <__sflush_r+0xc2>
 8009a58:	690f      	ldr	r7, [r1, #16]
 8009a5a:	2f00      	cmp	r7, #0
 8009a5c:	d0a2      	beq.n	80099a4 <__sflush_r+0x18>
 8009a5e:	680a      	ldr	r2, [r1, #0]
 8009a60:	600f      	str	r7, [r1, #0]
 8009a62:	1bd2      	subs	r2, r2, r7
 8009a64:	9201      	str	r2, [sp, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	079b      	lsls	r3, r3, #30
 8009a6a:	d100      	bne.n	8009a6e <__sflush_r+0xe2>
 8009a6c:	694a      	ldr	r2, [r1, #20]
 8009a6e:	60a2      	str	r2, [r4, #8]
 8009a70:	9b01      	ldr	r3, [sp, #4]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	dc00      	bgt.n	8009a78 <__sflush_r+0xec>
 8009a76:	e795      	b.n	80099a4 <__sflush_r+0x18>
 8009a78:	003a      	movs	r2, r7
 8009a7a:	0028      	movs	r0, r5
 8009a7c:	9b01      	ldr	r3, [sp, #4]
 8009a7e:	6a21      	ldr	r1, [r4, #32]
 8009a80:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009a82:	47b0      	blx	r6
 8009a84:	2800      	cmp	r0, #0
 8009a86:	dc06      	bgt.n	8009a96 <__sflush_r+0x10a>
 8009a88:	2340      	movs	r3, #64	; 0x40
 8009a8a:	2001      	movs	r0, #1
 8009a8c:	89a2      	ldrh	r2, [r4, #12]
 8009a8e:	4240      	negs	r0, r0
 8009a90:	4313      	orrs	r3, r2
 8009a92:	81a3      	strh	r3, [r4, #12]
 8009a94:	e787      	b.n	80099a6 <__sflush_r+0x1a>
 8009a96:	9b01      	ldr	r3, [sp, #4]
 8009a98:	183f      	adds	r7, r7, r0
 8009a9a:	1a1b      	subs	r3, r3, r0
 8009a9c:	9301      	str	r3, [sp, #4]
 8009a9e:	e7e7      	b.n	8009a70 <__sflush_r+0xe4>
 8009aa0:	20400001 	.word	0x20400001

08009aa4 <_fflush_r>:
 8009aa4:	690b      	ldr	r3, [r1, #16]
 8009aa6:	b570      	push	{r4, r5, r6, lr}
 8009aa8:	0005      	movs	r5, r0
 8009aaa:	000c      	movs	r4, r1
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d102      	bne.n	8009ab6 <_fflush_r+0x12>
 8009ab0:	2500      	movs	r5, #0
 8009ab2:	0028      	movs	r0, r5
 8009ab4:	bd70      	pop	{r4, r5, r6, pc}
 8009ab6:	2800      	cmp	r0, #0
 8009ab8:	d004      	beq.n	8009ac4 <_fflush_r+0x20>
 8009aba:	6983      	ldr	r3, [r0, #24]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d101      	bne.n	8009ac4 <_fflush_r+0x20>
 8009ac0:	f000 f892 	bl	8009be8 <__sinit>
 8009ac4:	4b14      	ldr	r3, [pc, #80]	; (8009b18 <_fflush_r+0x74>)
 8009ac6:	429c      	cmp	r4, r3
 8009ac8:	d11b      	bne.n	8009b02 <_fflush_r+0x5e>
 8009aca:	686c      	ldr	r4, [r5, #4]
 8009acc:	220c      	movs	r2, #12
 8009ace:	5ea3      	ldrsh	r3, [r4, r2]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d0ed      	beq.n	8009ab0 <_fflush_r+0xc>
 8009ad4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ad6:	07d2      	lsls	r2, r2, #31
 8009ad8:	d404      	bmi.n	8009ae4 <_fflush_r+0x40>
 8009ada:	059b      	lsls	r3, r3, #22
 8009adc:	d402      	bmi.n	8009ae4 <_fflush_r+0x40>
 8009ade:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ae0:	f000 f923 	bl	8009d2a <__retarget_lock_acquire_recursive>
 8009ae4:	0028      	movs	r0, r5
 8009ae6:	0021      	movs	r1, r4
 8009ae8:	f7ff ff50 	bl	800998c <__sflush_r>
 8009aec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009aee:	0005      	movs	r5, r0
 8009af0:	07db      	lsls	r3, r3, #31
 8009af2:	d4de      	bmi.n	8009ab2 <_fflush_r+0xe>
 8009af4:	89a3      	ldrh	r3, [r4, #12]
 8009af6:	059b      	lsls	r3, r3, #22
 8009af8:	d4db      	bmi.n	8009ab2 <_fflush_r+0xe>
 8009afa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009afc:	f000 f916 	bl	8009d2c <__retarget_lock_release_recursive>
 8009b00:	e7d7      	b.n	8009ab2 <_fflush_r+0xe>
 8009b02:	4b06      	ldr	r3, [pc, #24]	; (8009b1c <_fflush_r+0x78>)
 8009b04:	429c      	cmp	r4, r3
 8009b06:	d101      	bne.n	8009b0c <_fflush_r+0x68>
 8009b08:	68ac      	ldr	r4, [r5, #8]
 8009b0a:	e7df      	b.n	8009acc <_fflush_r+0x28>
 8009b0c:	4b04      	ldr	r3, [pc, #16]	; (8009b20 <_fflush_r+0x7c>)
 8009b0e:	429c      	cmp	r4, r3
 8009b10:	d1dc      	bne.n	8009acc <_fflush_r+0x28>
 8009b12:	68ec      	ldr	r4, [r5, #12]
 8009b14:	e7da      	b.n	8009acc <_fflush_r+0x28>
 8009b16:	46c0      	nop			; (mov r8, r8)
 8009b18:	0800a564 	.word	0x0800a564
 8009b1c:	0800a584 	.word	0x0800a584
 8009b20:	0800a544 	.word	0x0800a544

08009b24 <std>:
 8009b24:	2300      	movs	r3, #0
 8009b26:	b510      	push	{r4, lr}
 8009b28:	0004      	movs	r4, r0
 8009b2a:	6003      	str	r3, [r0, #0]
 8009b2c:	6043      	str	r3, [r0, #4]
 8009b2e:	6083      	str	r3, [r0, #8]
 8009b30:	8181      	strh	r1, [r0, #12]
 8009b32:	6643      	str	r3, [r0, #100]	; 0x64
 8009b34:	0019      	movs	r1, r3
 8009b36:	81c2      	strh	r2, [r0, #14]
 8009b38:	6103      	str	r3, [r0, #16]
 8009b3a:	6143      	str	r3, [r0, #20]
 8009b3c:	6183      	str	r3, [r0, #24]
 8009b3e:	2208      	movs	r2, #8
 8009b40:	305c      	adds	r0, #92	; 0x5c
 8009b42:	f7fb fd43 	bl	80055cc <memset>
 8009b46:	4b05      	ldr	r3, [pc, #20]	; (8009b5c <std+0x38>)
 8009b48:	6224      	str	r4, [r4, #32]
 8009b4a:	6263      	str	r3, [r4, #36]	; 0x24
 8009b4c:	4b04      	ldr	r3, [pc, #16]	; (8009b60 <std+0x3c>)
 8009b4e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b50:	4b04      	ldr	r3, [pc, #16]	; (8009b64 <std+0x40>)
 8009b52:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b54:	4b04      	ldr	r3, [pc, #16]	; (8009b68 <std+0x44>)
 8009b56:	6323      	str	r3, [r4, #48]	; 0x30
 8009b58:	bd10      	pop	{r4, pc}
 8009b5a:	46c0      	nop			; (mov r8, r8)
 8009b5c:	08009ead 	.word	0x08009ead
 8009b60:	08009ed5 	.word	0x08009ed5
 8009b64:	08009f0d 	.word	0x08009f0d
 8009b68:	08009f39 	.word	0x08009f39

08009b6c <_cleanup_r>:
 8009b6c:	b510      	push	{r4, lr}
 8009b6e:	4902      	ldr	r1, [pc, #8]	; (8009b78 <_cleanup_r+0xc>)
 8009b70:	f000 f8ba 	bl	8009ce8 <_fwalk_reent>
 8009b74:	bd10      	pop	{r4, pc}
 8009b76:	46c0      	nop			; (mov r8, r8)
 8009b78:	08009aa5 	.word	0x08009aa5

08009b7c <__sfmoreglue>:
 8009b7c:	b570      	push	{r4, r5, r6, lr}
 8009b7e:	2568      	movs	r5, #104	; 0x68
 8009b80:	1e4a      	subs	r2, r1, #1
 8009b82:	4355      	muls	r5, r2
 8009b84:	000e      	movs	r6, r1
 8009b86:	0029      	movs	r1, r5
 8009b88:	3174      	adds	r1, #116	; 0x74
 8009b8a:	f7ff fa37 	bl	8008ffc <_malloc_r>
 8009b8e:	1e04      	subs	r4, r0, #0
 8009b90:	d008      	beq.n	8009ba4 <__sfmoreglue+0x28>
 8009b92:	2100      	movs	r1, #0
 8009b94:	002a      	movs	r2, r5
 8009b96:	6001      	str	r1, [r0, #0]
 8009b98:	6046      	str	r6, [r0, #4]
 8009b9a:	300c      	adds	r0, #12
 8009b9c:	60a0      	str	r0, [r4, #8]
 8009b9e:	3268      	adds	r2, #104	; 0x68
 8009ba0:	f7fb fd14 	bl	80055cc <memset>
 8009ba4:	0020      	movs	r0, r4
 8009ba6:	bd70      	pop	{r4, r5, r6, pc}

08009ba8 <__sfp_lock_acquire>:
 8009ba8:	b510      	push	{r4, lr}
 8009baa:	4802      	ldr	r0, [pc, #8]	; (8009bb4 <__sfp_lock_acquire+0xc>)
 8009bac:	f000 f8bd 	bl	8009d2a <__retarget_lock_acquire_recursive>
 8009bb0:	bd10      	pop	{r4, pc}
 8009bb2:	46c0      	nop			; (mov r8, r8)
 8009bb4:	200002d5 	.word	0x200002d5

08009bb8 <__sfp_lock_release>:
 8009bb8:	b510      	push	{r4, lr}
 8009bba:	4802      	ldr	r0, [pc, #8]	; (8009bc4 <__sfp_lock_release+0xc>)
 8009bbc:	f000 f8b6 	bl	8009d2c <__retarget_lock_release_recursive>
 8009bc0:	bd10      	pop	{r4, pc}
 8009bc2:	46c0      	nop			; (mov r8, r8)
 8009bc4:	200002d5 	.word	0x200002d5

08009bc8 <__sinit_lock_acquire>:
 8009bc8:	b510      	push	{r4, lr}
 8009bca:	4802      	ldr	r0, [pc, #8]	; (8009bd4 <__sinit_lock_acquire+0xc>)
 8009bcc:	f000 f8ad 	bl	8009d2a <__retarget_lock_acquire_recursive>
 8009bd0:	bd10      	pop	{r4, pc}
 8009bd2:	46c0      	nop			; (mov r8, r8)
 8009bd4:	200002d6 	.word	0x200002d6

08009bd8 <__sinit_lock_release>:
 8009bd8:	b510      	push	{r4, lr}
 8009bda:	4802      	ldr	r0, [pc, #8]	; (8009be4 <__sinit_lock_release+0xc>)
 8009bdc:	f000 f8a6 	bl	8009d2c <__retarget_lock_release_recursive>
 8009be0:	bd10      	pop	{r4, pc}
 8009be2:	46c0      	nop			; (mov r8, r8)
 8009be4:	200002d6 	.word	0x200002d6

08009be8 <__sinit>:
 8009be8:	b513      	push	{r0, r1, r4, lr}
 8009bea:	0004      	movs	r4, r0
 8009bec:	f7ff ffec 	bl	8009bc8 <__sinit_lock_acquire>
 8009bf0:	69a3      	ldr	r3, [r4, #24]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d002      	beq.n	8009bfc <__sinit+0x14>
 8009bf6:	f7ff ffef 	bl	8009bd8 <__sinit_lock_release>
 8009bfa:	bd13      	pop	{r0, r1, r4, pc}
 8009bfc:	64a3      	str	r3, [r4, #72]	; 0x48
 8009bfe:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009c00:	6523      	str	r3, [r4, #80]	; 0x50
 8009c02:	4b13      	ldr	r3, [pc, #76]	; (8009c50 <__sinit+0x68>)
 8009c04:	4a13      	ldr	r2, [pc, #76]	; (8009c54 <__sinit+0x6c>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c0a:	9301      	str	r3, [sp, #4]
 8009c0c:	42a3      	cmp	r3, r4
 8009c0e:	d101      	bne.n	8009c14 <__sinit+0x2c>
 8009c10:	2301      	movs	r3, #1
 8009c12:	61a3      	str	r3, [r4, #24]
 8009c14:	0020      	movs	r0, r4
 8009c16:	f000 f81f 	bl	8009c58 <__sfp>
 8009c1a:	6060      	str	r0, [r4, #4]
 8009c1c:	0020      	movs	r0, r4
 8009c1e:	f000 f81b 	bl	8009c58 <__sfp>
 8009c22:	60a0      	str	r0, [r4, #8]
 8009c24:	0020      	movs	r0, r4
 8009c26:	f000 f817 	bl	8009c58 <__sfp>
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	2104      	movs	r1, #4
 8009c2e:	60e0      	str	r0, [r4, #12]
 8009c30:	6860      	ldr	r0, [r4, #4]
 8009c32:	f7ff ff77 	bl	8009b24 <std>
 8009c36:	2201      	movs	r2, #1
 8009c38:	2109      	movs	r1, #9
 8009c3a:	68a0      	ldr	r0, [r4, #8]
 8009c3c:	f7ff ff72 	bl	8009b24 <std>
 8009c40:	2202      	movs	r2, #2
 8009c42:	2112      	movs	r1, #18
 8009c44:	68e0      	ldr	r0, [r4, #12]
 8009c46:	f7ff ff6d 	bl	8009b24 <std>
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	61a3      	str	r3, [r4, #24]
 8009c4e:	e7d2      	b.n	8009bf6 <__sinit+0xe>
 8009c50:	0800a100 	.word	0x0800a100
 8009c54:	08009b6d 	.word	0x08009b6d

08009c58 <__sfp>:
 8009c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c5a:	0007      	movs	r7, r0
 8009c5c:	f7ff ffa4 	bl	8009ba8 <__sfp_lock_acquire>
 8009c60:	4b1f      	ldr	r3, [pc, #124]	; (8009ce0 <__sfp+0x88>)
 8009c62:	681e      	ldr	r6, [r3, #0]
 8009c64:	69b3      	ldr	r3, [r6, #24]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d102      	bne.n	8009c70 <__sfp+0x18>
 8009c6a:	0030      	movs	r0, r6
 8009c6c:	f7ff ffbc 	bl	8009be8 <__sinit>
 8009c70:	3648      	adds	r6, #72	; 0x48
 8009c72:	68b4      	ldr	r4, [r6, #8]
 8009c74:	6873      	ldr	r3, [r6, #4]
 8009c76:	3b01      	subs	r3, #1
 8009c78:	d504      	bpl.n	8009c84 <__sfp+0x2c>
 8009c7a:	6833      	ldr	r3, [r6, #0]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d022      	beq.n	8009cc6 <__sfp+0x6e>
 8009c80:	6836      	ldr	r6, [r6, #0]
 8009c82:	e7f6      	b.n	8009c72 <__sfp+0x1a>
 8009c84:	220c      	movs	r2, #12
 8009c86:	5ea5      	ldrsh	r5, [r4, r2]
 8009c88:	2d00      	cmp	r5, #0
 8009c8a:	d11a      	bne.n	8009cc2 <__sfp+0x6a>
 8009c8c:	0020      	movs	r0, r4
 8009c8e:	4b15      	ldr	r3, [pc, #84]	; (8009ce4 <__sfp+0x8c>)
 8009c90:	3058      	adds	r0, #88	; 0x58
 8009c92:	60e3      	str	r3, [r4, #12]
 8009c94:	6665      	str	r5, [r4, #100]	; 0x64
 8009c96:	f000 f847 	bl	8009d28 <__retarget_lock_init_recursive>
 8009c9a:	f7ff ff8d 	bl	8009bb8 <__sfp_lock_release>
 8009c9e:	0020      	movs	r0, r4
 8009ca0:	2208      	movs	r2, #8
 8009ca2:	0029      	movs	r1, r5
 8009ca4:	6025      	str	r5, [r4, #0]
 8009ca6:	60a5      	str	r5, [r4, #8]
 8009ca8:	6065      	str	r5, [r4, #4]
 8009caa:	6125      	str	r5, [r4, #16]
 8009cac:	6165      	str	r5, [r4, #20]
 8009cae:	61a5      	str	r5, [r4, #24]
 8009cb0:	305c      	adds	r0, #92	; 0x5c
 8009cb2:	f7fb fc8b 	bl	80055cc <memset>
 8009cb6:	6365      	str	r5, [r4, #52]	; 0x34
 8009cb8:	63a5      	str	r5, [r4, #56]	; 0x38
 8009cba:	64a5      	str	r5, [r4, #72]	; 0x48
 8009cbc:	64e5      	str	r5, [r4, #76]	; 0x4c
 8009cbe:	0020      	movs	r0, r4
 8009cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cc2:	3468      	adds	r4, #104	; 0x68
 8009cc4:	e7d7      	b.n	8009c76 <__sfp+0x1e>
 8009cc6:	2104      	movs	r1, #4
 8009cc8:	0038      	movs	r0, r7
 8009cca:	f7ff ff57 	bl	8009b7c <__sfmoreglue>
 8009cce:	1e04      	subs	r4, r0, #0
 8009cd0:	6030      	str	r0, [r6, #0]
 8009cd2:	d1d5      	bne.n	8009c80 <__sfp+0x28>
 8009cd4:	f7ff ff70 	bl	8009bb8 <__sfp_lock_release>
 8009cd8:	230c      	movs	r3, #12
 8009cda:	603b      	str	r3, [r7, #0]
 8009cdc:	e7ef      	b.n	8009cbe <__sfp+0x66>
 8009cde:	46c0      	nop			; (mov r8, r8)
 8009ce0:	0800a100 	.word	0x0800a100
 8009ce4:	ffff0001 	.word	0xffff0001

08009ce8 <_fwalk_reent>:
 8009ce8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009cea:	0004      	movs	r4, r0
 8009cec:	0006      	movs	r6, r0
 8009cee:	2700      	movs	r7, #0
 8009cf0:	9101      	str	r1, [sp, #4]
 8009cf2:	3448      	adds	r4, #72	; 0x48
 8009cf4:	6863      	ldr	r3, [r4, #4]
 8009cf6:	68a5      	ldr	r5, [r4, #8]
 8009cf8:	9300      	str	r3, [sp, #0]
 8009cfa:	9b00      	ldr	r3, [sp, #0]
 8009cfc:	3b01      	subs	r3, #1
 8009cfe:	9300      	str	r3, [sp, #0]
 8009d00:	d504      	bpl.n	8009d0c <_fwalk_reent+0x24>
 8009d02:	6824      	ldr	r4, [r4, #0]
 8009d04:	2c00      	cmp	r4, #0
 8009d06:	d1f5      	bne.n	8009cf4 <_fwalk_reent+0xc>
 8009d08:	0038      	movs	r0, r7
 8009d0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009d0c:	89ab      	ldrh	r3, [r5, #12]
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d908      	bls.n	8009d24 <_fwalk_reent+0x3c>
 8009d12:	220e      	movs	r2, #14
 8009d14:	5eab      	ldrsh	r3, [r5, r2]
 8009d16:	3301      	adds	r3, #1
 8009d18:	d004      	beq.n	8009d24 <_fwalk_reent+0x3c>
 8009d1a:	0029      	movs	r1, r5
 8009d1c:	0030      	movs	r0, r6
 8009d1e:	9b01      	ldr	r3, [sp, #4]
 8009d20:	4798      	blx	r3
 8009d22:	4307      	orrs	r7, r0
 8009d24:	3568      	adds	r5, #104	; 0x68
 8009d26:	e7e8      	b.n	8009cfa <_fwalk_reent+0x12>

08009d28 <__retarget_lock_init_recursive>:
 8009d28:	4770      	bx	lr

08009d2a <__retarget_lock_acquire_recursive>:
 8009d2a:	4770      	bx	lr

08009d2c <__retarget_lock_release_recursive>:
 8009d2c:	4770      	bx	lr
	...

08009d30 <__swhatbuf_r>:
 8009d30:	b570      	push	{r4, r5, r6, lr}
 8009d32:	000e      	movs	r6, r1
 8009d34:	001d      	movs	r5, r3
 8009d36:	230e      	movs	r3, #14
 8009d38:	5ec9      	ldrsh	r1, [r1, r3]
 8009d3a:	0014      	movs	r4, r2
 8009d3c:	b096      	sub	sp, #88	; 0x58
 8009d3e:	2900      	cmp	r1, #0
 8009d40:	da08      	bge.n	8009d54 <__swhatbuf_r+0x24>
 8009d42:	220c      	movs	r2, #12
 8009d44:	5eb3      	ldrsh	r3, [r6, r2]
 8009d46:	2200      	movs	r2, #0
 8009d48:	602a      	str	r2, [r5, #0]
 8009d4a:	061b      	lsls	r3, r3, #24
 8009d4c:	d411      	bmi.n	8009d72 <__swhatbuf_r+0x42>
 8009d4e:	2380      	movs	r3, #128	; 0x80
 8009d50:	00db      	lsls	r3, r3, #3
 8009d52:	e00f      	b.n	8009d74 <__swhatbuf_r+0x44>
 8009d54:	466a      	mov	r2, sp
 8009d56:	f000 f91b 	bl	8009f90 <_fstat_r>
 8009d5a:	2800      	cmp	r0, #0
 8009d5c:	dbf1      	blt.n	8009d42 <__swhatbuf_r+0x12>
 8009d5e:	23f0      	movs	r3, #240	; 0xf0
 8009d60:	9901      	ldr	r1, [sp, #4]
 8009d62:	021b      	lsls	r3, r3, #8
 8009d64:	4019      	ands	r1, r3
 8009d66:	4b05      	ldr	r3, [pc, #20]	; (8009d7c <__swhatbuf_r+0x4c>)
 8009d68:	18c9      	adds	r1, r1, r3
 8009d6a:	424b      	negs	r3, r1
 8009d6c:	4159      	adcs	r1, r3
 8009d6e:	6029      	str	r1, [r5, #0]
 8009d70:	e7ed      	b.n	8009d4e <__swhatbuf_r+0x1e>
 8009d72:	2340      	movs	r3, #64	; 0x40
 8009d74:	2000      	movs	r0, #0
 8009d76:	6023      	str	r3, [r4, #0]
 8009d78:	b016      	add	sp, #88	; 0x58
 8009d7a:	bd70      	pop	{r4, r5, r6, pc}
 8009d7c:	ffffe000 	.word	0xffffe000

08009d80 <__smakebuf_r>:
 8009d80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d82:	2602      	movs	r6, #2
 8009d84:	898b      	ldrh	r3, [r1, #12]
 8009d86:	0005      	movs	r5, r0
 8009d88:	000c      	movs	r4, r1
 8009d8a:	4233      	tst	r3, r6
 8009d8c:	d006      	beq.n	8009d9c <__smakebuf_r+0x1c>
 8009d8e:	0023      	movs	r3, r4
 8009d90:	3347      	adds	r3, #71	; 0x47
 8009d92:	6023      	str	r3, [r4, #0]
 8009d94:	6123      	str	r3, [r4, #16]
 8009d96:	2301      	movs	r3, #1
 8009d98:	6163      	str	r3, [r4, #20]
 8009d9a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009d9c:	466a      	mov	r2, sp
 8009d9e:	ab01      	add	r3, sp, #4
 8009da0:	f7ff ffc6 	bl	8009d30 <__swhatbuf_r>
 8009da4:	9900      	ldr	r1, [sp, #0]
 8009da6:	0007      	movs	r7, r0
 8009da8:	0028      	movs	r0, r5
 8009daa:	f7ff f927 	bl	8008ffc <_malloc_r>
 8009dae:	2800      	cmp	r0, #0
 8009db0:	d108      	bne.n	8009dc4 <__smakebuf_r+0x44>
 8009db2:	220c      	movs	r2, #12
 8009db4:	5ea3      	ldrsh	r3, [r4, r2]
 8009db6:	059a      	lsls	r2, r3, #22
 8009db8:	d4ef      	bmi.n	8009d9a <__smakebuf_r+0x1a>
 8009dba:	2203      	movs	r2, #3
 8009dbc:	4393      	bics	r3, r2
 8009dbe:	431e      	orrs	r6, r3
 8009dc0:	81a6      	strh	r6, [r4, #12]
 8009dc2:	e7e4      	b.n	8009d8e <__smakebuf_r+0xe>
 8009dc4:	4b0f      	ldr	r3, [pc, #60]	; (8009e04 <__smakebuf_r+0x84>)
 8009dc6:	62ab      	str	r3, [r5, #40]	; 0x28
 8009dc8:	2380      	movs	r3, #128	; 0x80
 8009dca:	89a2      	ldrh	r2, [r4, #12]
 8009dcc:	6020      	str	r0, [r4, #0]
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	81a3      	strh	r3, [r4, #12]
 8009dd2:	9b00      	ldr	r3, [sp, #0]
 8009dd4:	6120      	str	r0, [r4, #16]
 8009dd6:	6163      	str	r3, [r4, #20]
 8009dd8:	9b01      	ldr	r3, [sp, #4]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d00d      	beq.n	8009dfa <__smakebuf_r+0x7a>
 8009dde:	0028      	movs	r0, r5
 8009de0:	230e      	movs	r3, #14
 8009de2:	5ee1      	ldrsh	r1, [r4, r3]
 8009de4:	f000 f8e6 	bl	8009fb4 <_isatty_r>
 8009de8:	2800      	cmp	r0, #0
 8009dea:	d006      	beq.n	8009dfa <__smakebuf_r+0x7a>
 8009dec:	2203      	movs	r2, #3
 8009dee:	89a3      	ldrh	r3, [r4, #12]
 8009df0:	4393      	bics	r3, r2
 8009df2:	001a      	movs	r2, r3
 8009df4:	2301      	movs	r3, #1
 8009df6:	4313      	orrs	r3, r2
 8009df8:	81a3      	strh	r3, [r4, #12]
 8009dfa:	89a0      	ldrh	r0, [r4, #12]
 8009dfc:	4307      	orrs	r7, r0
 8009dfe:	81a7      	strh	r7, [r4, #12]
 8009e00:	e7cb      	b.n	8009d9a <__smakebuf_r+0x1a>
 8009e02:	46c0      	nop			; (mov r8, r8)
 8009e04:	08009b6d 	.word	0x08009b6d

08009e08 <_malloc_usable_size_r>:
 8009e08:	1f0b      	subs	r3, r1, #4
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	1f18      	subs	r0, r3, #4
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	da01      	bge.n	8009e16 <_malloc_usable_size_r+0xe>
 8009e12:	580b      	ldr	r3, [r1, r0]
 8009e14:	18c0      	adds	r0, r0, r3
 8009e16:	4770      	bx	lr

08009e18 <_raise_r>:
 8009e18:	b570      	push	{r4, r5, r6, lr}
 8009e1a:	0004      	movs	r4, r0
 8009e1c:	000d      	movs	r5, r1
 8009e1e:	291f      	cmp	r1, #31
 8009e20:	d904      	bls.n	8009e2c <_raise_r+0x14>
 8009e22:	2316      	movs	r3, #22
 8009e24:	6003      	str	r3, [r0, #0]
 8009e26:	2001      	movs	r0, #1
 8009e28:	4240      	negs	r0, r0
 8009e2a:	bd70      	pop	{r4, r5, r6, pc}
 8009e2c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d004      	beq.n	8009e3c <_raise_r+0x24>
 8009e32:	008a      	lsls	r2, r1, #2
 8009e34:	189b      	adds	r3, r3, r2
 8009e36:	681a      	ldr	r2, [r3, #0]
 8009e38:	2a00      	cmp	r2, #0
 8009e3a:	d108      	bne.n	8009e4e <_raise_r+0x36>
 8009e3c:	0020      	movs	r0, r4
 8009e3e:	f000 f831 	bl	8009ea4 <_getpid_r>
 8009e42:	002a      	movs	r2, r5
 8009e44:	0001      	movs	r1, r0
 8009e46:	0020      	movs	r0, r4
 8009e48:	f000 f81a 	bl	8009e80 <_kill_r>
 8009e4c:	e7ed      	b.n	8009e2a <_raise_r+0x12>
 8009e4e:	2000      	movs	r0, #0
 8009e50:	2a01      	cmp	r2, #1
 8009e52:	d0ea      	beq.n	8009e2a <_raise_r+0x12>
 8009e54:	1c51      	adds	r1, r2, #1
 8009e56:	d103      	bne.n	8009e60 <_raise_r+0x48>
 8009e58:	2316      	movs	r3, #22
 8009e5a:	3001      	adds	r0, #1
 8009e5c:	6023      	str	r3, [r4, #0]
 8009e5e:	e7e4      	b.n	8009e2a <_raise_r+0x12>
 8009e60:	2400      	movs	r4, #0
 8009e62:	0028      	movs	r0, r5
 8009e64:	601c      	str	r4, [r3, #0]
 8009e66:	4790      	blx	r2
 8009e68:	0020      	movs	r0, r4
 8009e6a:	e7de      	b.n	8009e2a <_raise_r+0x12>

08009e6c <raise>:
 8009e6c:	b510      	push	{r4, lr}
 8009e6e:	4b03      	ldr	r3, [pc, #12]	; (8009e7c <raise+0x10>)
 8009e70:	0001      	movs	r1, r0
 8009e72:	6818      	ldr	r0, [r3, #0]
 8009e74:	f7ff ffd0 	bl	8009e18 <_raise_r>
 8009e78:	bd10      	pop	{r4, pc}
 8009e7a:	46c0      	nop			; (mov r8, r8)
 8009e7c:	2000000c 	.word	0x2000000c

08009e80 <_kill_r>:
 8009e80:	2300      	movs	r3, #0
 8009e82:	b570      	push	{r4, r5, r6, lr}
 8009e84:	4d06      	ldr	r5, [pc, #24]	; (8009ea0 <_kill_r+0x20>)
 8009e86:	0004      	movs	r4, r0
 8009e88:	0008      	movs	r0, r1
 8009e8a:	0011      	movs	r1, r2
 8009e8c:	602b      	str	r3, [r5, #0]
 8009e8e:	f7f8 fc93 	bl	80027b8 <_kill>
 8009e92:	1c43      	adds	r3, r0, #1
 8009e94:	d103      	bne.n	8009e9e <_kill_r+0x1e>
 8009e96:	682b      	ldr	r3, [r5, #0]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d000      	beq.n	8009e9e <_kill_r+0x1e>
 8009e9c:	6023      	str	r3, [r4, #0]
 8009e9e:	bd70      	pop	{r4, r5, r6, pc}
 8009ea0:	200002d0 	.word	0x200002d0

08009ea4 <_getpid_r>:
 8009ea4:	b510      	push	{r4, lr}
 8009ea6:	f7f8 fc81 	bl	80027ac <_getpid>
 8009eaa:	bd10      	pop	{r4, pc}

08009eac <__sread>:
 8009eac:	b570      	push	{r4, r5, r6, lr}
 8009eae:	000c      	movs	r4, r1
 8009eb0:	250e      	movs	r5, #14
 8009eb2:	5f49      	ldrsh	r1, [r1, r5]
 8009eb4:	f000 f8a4 	bl	800a000 <_read_r>
 8009eb8:	2800      	cmp	r0, #0
 8009eba:	db03      	blt.n	8009ec4 <__sread+0x18>
 8009ebc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009ebe:	181b      	adds	r3, r3, r0
 8009ec0:	6563      	str	r3, [r4, #84]	; 0x54
 8009ec2:	bd70      	pop	{r4, r5, r6, pc}
 8009ec4:	89a3      	ldrh	r3, [r4, #12]
 8009ec6:	4a02      	ldr	r2, [pc, #8]	; (8009ed0 <__sread+0x24>)
 8009ec8:	4013      	ands	r3, r2
 8009eca:	81a3      	strh	r3, [r4, #12]
 8009ecc:	e7f9      	b.n	8009ec2 <__sread+0x16>
 8009ece:	46c0      	nop			; (mov r8, r8)
 8009ed0:	ffffefff 	.word	0xffffefff

08009ed4 <__swrite>:
 8009ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ed6:	001f      	movs	r7, r3
 8009ed8:	898b      	ldrh	r3, [r1, #12]
 8009eda:	0005      	movs	r5, r0
 8009edc:	000c      	movs	r4, r1
 8009ede:	0016      	movs	r6, r2
 8009ee0:	05db      	lsls	r3, r3, #23
 8009ee2:	d505      	bpl.n	8009ef0 <__swrite+0x1c>
 8009ee4:	230e      	movs	r3, #14
 8009ee6:	5ec9      	ldrsh	r1, [r1, r3]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	2302      	movs	r3, #2
 8009eec:	f000 f874 	bl	8009fd8 <_lseek_r>
 8009ef0:	89a3      	ldrh	r3, [r4, #12]
 8009ef2:	4a05      	ldr	r2, [pc, #20]	; (8009f08 <__swrite+0x34>)
 8009ef4:	0028      	movs	r0, r5
 8009ef6:	4013      	ands	r3, r2
 8009ef8:	81a3      	strh	r3, [r4, #12]
 8009efa:	0032      	movs	r2, r6
 8009efc:	230e      	movs	r3, #14
 8009efe:	5ee1      	ldrsh	r1, [r4, r3]
 8009f00:	003b      	movs	r3, r7
 8009f02:	f000 f81f 	bl	8009f44 <_write_r>
 8009f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f08:	ffffefff 	.word	0xffffefff

08009f0c <__sseek>:
 8009f0c:	b570      	push	{r4, r5, r6, lr}
 8009f0e:	000c      	movs	r4, r1
 8009f10:	250e      	movs	r5, #14
 8009f12:	5f49      	ldrsh	r1, [r1, r5]
 8009f14:	f000 f860 	bl	8009fd8 <_lseek_r>
 8009f18:	89a3      	ldrh	r3, [r4, #12]
 8009f1a:	1c42      	adds	r2, r0, #1
 8009f1c:	d103      	bne.n	8009f26 <__sseek+0x1a>
 8009f1e:	4a05      	ldr	r2, [pc, #20]	; (8009f34 <__sseek+0x28>)
 8009f20:	4013      	ands	r3, r2
 8009f22:	81a3      	strh	r3, [r4, #12]
 8009f24:	bd70      	pop	{r4, r5, r6, pc}
 8009f26:	2280      	movs	r2, #128	; 0x80
 8009f28:	0152      	lsls	r2, r2, #5
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	81a3      	strh	r3, [r4, #12]
 8009f2e:	6560      	str	r0, [r4, #84]	; 0x54
 8009f30:	e7f8      	b.n	8009f24 <__sseek+0x18>
 8009f32:	46c0      	nop			; (mov r8, r8)
 8009f34:	ffffefff 	.word	0xffffefff

08009f38 <__sclose>:
 8009f38:	b510      	push	{r4, lr}
 8009f3a:	230e      	movs	r3, #14
 8009f3c:	5ec9      	ldrsh	r1, [r1, r3]
 8009f3e:	f000 f815 	bl	8009f6c <_close_r>
 8009f42:	bd10      	pop	{r4, pc}

08009f44 <_write_r>:
 8009f44:	b570      	push	{r4, r5, r6, lr}
 8009f46:	0004      	movs	r4, r0
 8009f48:	0008      	movs	r0, r1
 8009f4a:	0011      	movs	r1, r2
 8009f4c:	001a      	movs	r2, r3
 8009f4e:	2300      	movs	r3, #0
 8009f50:	4d05      	ldr	r5, [pc, #20]	; (8009f68 <_write_r+0x24>)
 8009f52:	602b      	str	r3, [r5, #0]
 8009f54:	f7f8 fc69 	bl	800282a <_write>
 8009f58:	1c43      	adds	r3, r0, #1
 8009f5a:	d103      	bne.n	8009f64 <_write_r+0x20>
 8009f5c:	682b      	ldr	r3, [r5, #0]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d000      	beq.n	8009f64 <_write_r+0x20>
 8009f62:	6023      	str	r3, [r4, #0]
 8009f64:	bd70      	pop	{r4, r5, r6, pc}
 8009f66:	46c0      	nop			; (mov r8, r8)
 8009f68:	200002d0 	.word	0x200002d0

08009f6c <_close_r>:
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	b570      	push	{r4, r5, r6, lr}
 8009f70:	4d06      	ldr	r5, [pc, #24]	; (8009f8c <_close_r+0x20>)
 8009f72:	0004      	movs	r4, r0
 8009f74:	0008      	movs	r0, r1
 8009f76:	602b      	str	r3, [r5, #0]
 8009f78:	f7f8 fc73 	bl	8002862 <_close>
 8009f7c:	1c43      	adds	r3, r0, #1
 8009f7e:	d103      	bne.n	8009f88 <_close_r+0x1c>
 8009f80:	682b      	ldr	r3, [r5, #0]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d000      	beq.n	8009f88 <_close_r+0x1c>
 8009f86:	6023      	str	r3, [r4, #0]
 8009f88:	bd70      	pop	{r4, r5, r6, pc}
 8009f8a:	46c0      	nop			; (mov r8, r8)
 8009f8c:	200002d0 	.word	0x200002d0

08009f90 <_fstat_r>:
 8009f90:	2300      	movs	r3, #0
 8009f92:	b570      	push	{r4, r5, r6, lr}
 8009f94:	4d06      	ldr	r5, [pc, #24]	; (8009fb0 <_fstat_r+0x20>)
 8009f96:	0004      	movs	r4, r0
 8009f98:	0008      	movs	r0, r1
 8009f9a:	0011      	movs	r1, r2
 8009f9c:	602b      	str	r3, [r5, #0]
 8009f9e:	f7f8 fc6a 	bl	8002876 <_fstat>
 8009fa2:	1c43      	adds	r3, r0, #1
 8009fa4:	d103      	bne.n	8009fae <_fstat_r+0x1e>
 8009fa6:	682b      	ldr	r3, [r5, #0]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d000      	beq.n	8009fae <_fstat_r+0x1e>
 8009fac:	6023      	str	r3, [r4, #0]
 8009fae:	bd70      	pop	{r4, r5, r6, pc}
 8009fb0:	200002d0 	.word	0x200002d0

08009fb4 <_isatty_r>:
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	b570      	push	{r4, r5, r6, lr}
 8009fb8:	4d06      	ldr	r5, [pc, #24]	; (8009fd4 <_isatty_r+0x20>)
 8009fba:	0004      	movs	r4, r0
 8009fbc:	0008      	movs	r0, r1
 8009fbe:	602b      	str	r3, [r5, #0]
 8009fc0:	f7f8 fc67 	bl	8002892 <_isatty>
 8009fc4:	1c43      	adds	r3, r0, #1
 8009fc6:	d103      	bne.n	8009fd0 <_isatty_r+0x1c>
 8009fc8:	682b      	ldr	r3, [r5, #0]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d000      	beq.n	8009fd0 <_isatty_r+0x1c>
 8009fce:	6023      	str	r3, [r4, #0]
 8009fd0:	bd70      	pop	{r4, r5, r6, pc}
 8009fd2:	46c0      	nop			; (mov r8, r8)
 8009fd4:	200002d0 	.word	0x200002d0

08009fd8 <_lseek_r>:
 8009fd8:	b570      	push	{r4, r5, r6, lr}
 8009fda:	0004      	movs	r4, r0
 8009fdc:	0008      	movs	r0, r1
 8009fde:	0011      	movs	r1, r2
 8009fe0:	001a      	movs	r2, r3
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	4d05      	ldr	r5, [pc, #20]	; (8009ffc <_lseek_r+0x24>)
 8009fe6:	602b      	str	r3, [r5, #0]
 8009fe8:	f7f8 fc5c 	bl	80028a4 <_lseek>
 8009fec:	1c43      	adds	r3, r0, #1
 8009fee:	d103      	bne.n	8009ff8 <_lseek_r+0x20>
 8009ff0:	682b      	ldr	r3, [r5, #0]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d000      	beq.n	8009ff8 <_lseek_r+0x20>
 8009ff6:	6023      	str	r3, [r4, #0]
 8009ff8:	bd70      	pop	{r4, r5, r6, pc}
 8009ffa:	46c0      	nop			; (mov r8, r8)
 8009ffc:	200002d0 	.word	0x200002d0

0800a000 <_read_r>:
 800a000:	b570      	push	{r4, r5, r6, lr}
 800a002:	0004      	movs	r4, r0
 800a004:	0008      	movs	r0, r1
 800a006:	0011      	movs	r1, r2
 800a008:	001a      	movs	r2, r3
 800a00a:	2300      	movs	r3, #0
 800a00c:	4d05      	ldr	r5, [pc, #20]	; (800a024 <_read_r+0x24>)
 800a00e:	602b      	str	r3, [r5, #0]
 800a010:	f7f8 fbee 	bl	80027f0 <_read>
 800a014:	1c43      	adds	r3, r0, #1
 800a016:	d103      	bne.n	800a020 <_read_r+0x20>
 800a018:	682b      	ldr	r3, [r5, #0]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d000      	beq.n	800a020 <_read_r+0x20>
 800a01e:	6023      	str	r3, [r4, #0]
 800a020:	bd70      	pop	{r4, r5, r6, pc}
 800a022:	46c0      	nop			; (mov r8, r8)
 800a024:	200002d0 	.word	0x200002d0

0800a028 <_init>:
 800a028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a02a:	46c0      	nop			; (mov r8, r8)
 800a02c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a02e:	bc08      	pop	{r3}
 800a030:	469e      	mov	lr, r3
 800a032:	4770      	bx	lr

0800a034 <_fini>:
 800a034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a036:	46c0      	nop			; (mov r8, r8)
 800a038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a03a:	bc08      	pop	{r3}
 800a03c:	469e      	mov	lr, r3
 800a03e:	4770      	bx	lr
