
Project_18_Protocol_Serial_Comunication_and_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a95c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005dc  0800aa20  0800aa20  0001aa20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800affc  0800affc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800affc  0800affc  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800affc  0800affc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800affc  0800affc  0001affc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b000  0800b000  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001120  200001e4  0800b1e8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001304  0800b1e8  00021304  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb34  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026f8  00000000  00000000  0002fd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00032438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc8  00000000  00000000  00033118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c26e  00000000  00000000  00033ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f998  00000000  00000000  0004ff4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009db2e  00000000  00000000  0005f8e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fd414  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000413c  00000000  00000000  000fd464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e4 	.word	0x200001e4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800aa04 	.word	0x0800aa04

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e8 	.word	0x200001e8
 8000104:	0800aa04 	.word	0x0800aa04

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ff7d 	bl	800133c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fecd 	bl	80011ec <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff6f 	bl	800133c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff65 	bl	800133c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fef5 	bl	8001270 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 feeb 	bl	8001270 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_d2uiz>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	2200      	movs	r2, #0
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004ae:	0004      	movs	r4, r0
 80004b0:	000d      	movs	r5, r1
 80004b2:	f7ff ffef 	bl	8000494 <__aeabi_dcmpge>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d104      	bne.n	80004c4 <__aeabi_d2uiz+0x1c>
 80004ba:	0020      	movs	r0, r4
 80004bc:	0029      	movs	r1, r5
 80004be:	f001 fdbd 	bl	800203c <__aeabi_d2iz>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	0020      	movs	r0, r4
 80004ca:	0029      	movs	r1, r5
 80004cc:	f001 fa06 	bl	80018dc <__aeabi_dsub>
 80004d0:	f001 fdb4 	bl	800203c <__aeabi_d2iz>
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	061b      	lsls	r3, r3, #24
 80004d8:	469c      	mov	ip, r3
 80004da:	4460      	add	r0, ip
 80004dc:	e7f1      	b.n	80004c2 <__aeabi_d2uiz+0x1a>
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	41e00000 	.word	0x41e00000

080004e4 <__aeabi_d2lz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	0005      	movs	r5, r0
 80004e8:	000c      	movs	r4, r1
 80004ea:	2200      	movs	r2, #0
 80004ec:	2300      	movs	r3, #0
 80004ee:	0028      	movs	r0, r5
 80004f0:	0021      	movs	r1, r4
 80004f2:	f7ff ffb1 	bl	8000458 <__aeabi_dcmplt>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	d108      	bne.n	800050c <__aeabi_d2lz+0x28>
 80004fa:	0028      	movs	r0, r5
 80004fc:	0021      	movs	r1, r4
 80004fe:	f000 f80f 	bl	8000520 <__aeabi_d2ulz>
 8000502:	0002      	movs	r2, r0
 8000504:	000b      	movs	r3, r1
 8000506:	0010      	movs	r0, r2
 8000508:	0019      	movs	r1, r3
 800050a:	bd70      	pop	{r4, r5, r6, pc}
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	061b      	lsls	r3, r3, #24
 8000510:	18e1      	adds	r1, r4, r3
 8000512:	0028      	movs	r0, r5
 8000514:	f000 f804 	bl	8000520 <__aeabi_d2ulz>
 8000518:	2300      	movs	r3, #0
 800051a:	4242      	negs	r2, r0
 800051c:	418b      	sbcs	r3, r1
 800051e:	e7f2      	b.n	8000506 <__aeabi_d2lz+0x22>

08000520 <__aeabi_d2ulz>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	2200      	movs	r2, #0
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <__aeabi_d2ulz+0x34>)
 8000526:	000d      	movs	r5, r1
 8000528:	0004      	movs	r4, r0
 800052a:	f000 ff6b 	bl	8001404 <__aeabi_dmul>
 800052e:	f7ff ffbb 	bl	80004a8 <__aeabi_d2uiz>
 8000532:	0006      	movs	r6, r0
 8000534:	f001 fde8 	bl	8002108 <__aeabi_ui2d>
 8000538:	2200      	movs	r2, #0
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <__aeabi_d2ulz+0x38>)
 800053c:	f000 ff62 	bl	8001404 <__aeabi_dmul>
 8000540:	0002      	movs	r2, r0
 8000542:	000b      	movs	r3, r1
 8000544:	0020      	movs	r0, r4
 8000546:	0029      	movs	r1, r5
 8000548:	f001 f9c8 	bl	80018dc <__aeabi_dsub>
 800054c:	f7ff ffac 	bl	80004a8 <__aeabi_d2uiz>
 8000550:	0031      	movs	r1, r6
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	3df00000 	.word	0x3df00000
 8000558:	41f00000 	.word	0x41f00000

0800055c <__aeabi_l2d>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	0006      	movs	r6, r0
 8000560:	0008      	movs	r0, r1
 8000562:	f001 fda1 	bl	80020a8 <__aeabi_i2d>
 8000566:	2200      	movs	r2, #0
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <__aeabi_l2d+0x28>)
 800056a:	f000 ff4b 	bl	8001404 <__aeabi_dmul>
 800056e:	000d      	movs	r5, r1
 8000570:	0004      	movs	r4, r0
 8000572:	0030      	movs	r0, r6
 8000574:	f001 fdc8 	bl	8002108 <__aeabi_ui2d>
 8000578:	002b      	movs	r3, r5
 800057a:	0022      	movs	r2, r4
 800057c:	f000 f804 	bl	8000588 <__aeabi_dadd>
 8000580:	bd70      	pop	{r4, r5, r6, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	41f00000 	.word	0x41f00000

08000588 <__aeabi_dadd>:
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058a:	464f      	mov	r7, r9
 800058c:	4646      	mov	r6, r8
 800058e:	46d6      	mov	lr, sl
 8000590:	000d      	movs	r5, r1
 8000592:	0004      	movs	r4, r0
 8000594:	b5c0      	push	{r6, r7, lr}
 8000596:	001f      	movs	r7, r3
 8000598:	0011      	movs	r1, r2
 800059a:	0328      	lsls	r0, r5, #12
 800059c:	0f62      	lsrs	r2, r4, #29
 800059e:	0a40      	lsrs	r0, r0, #9
 80005a0:	4310      	orrs	r0, r2
 80005a2:	007a      	lsls	r2, r7, #1
 80005a4:	0d52      	lsrs	r2, r2, #21
 80005a6:	00e3      	lsls	r3, r4, #3
 80005a8:	033c      	lsls	r4, r7, #12
 80005aa:	4691      	mov	r9, r2
 80005ac:	0a64      	lsrs	r4, r4, #9
 80005ae:	0ffa      	lsrs	r2, r7, #31
 80005b0:	0f4f      	lsrs	r7, r1, #29
 80005b2:	006e      	lsls	r6, r5, #1
 80005b4:	4327      	orrs	r7, r4
 80005b6:	4692      	mov	sl, r2
 80005b8:	46b8      	mov	r8, r7
 80005ba:	0d76      	lsrs	r6, r6, #21
 80005bc:	0fed      	lsrs	r5, r5, #31
 80005be:	00c9      	lsls	r1, r1, #3
 80005c0:	4295      	cmp	r5, r2
 80005c2:	d100      	bne.n	80005c6 <__aeabi_dadd+0x3e>
 80005c4:	e099      	b.n	80006fa <__aeabi_dadd+0x172>
 80005c6:	464c      	mov	r4, r9
 80005c8:	1b34      	subs	r4, r6, r4
 80005ca:	46a4      	mov	ip, r4
 80005cc:	2c00      	cmp	r4, #0
 80005ce:	dc00      	bgt.n	80005d2 <__aeabi_dadd+0x4a>
 80005d0:	e07c      	b.n	80006cc <__aeabi_dadd+0x144>
 80005d2:	464a      	mov	r2, r9
 80005d4:	2a00      	cmp	r2, #0
 80005d6:	d100      	bne.n	80005da <__aeabi_dadd+0x52>
 80005d8:	e0b8      	b.n	800074c <__aeabi_dadd+0x1c4>
 80005da:	4ac5      	ldr	r2, [pc, #788]	; (80008f0 <__aeabi_dadd+0x368>)
 80005dc:	4296      	cmp	r6, r2
 80005de:	d100      	bne.n	80005e2 <__aeabi_dadd+0x5a>
 80005e0:	e11c      	b.n	800081c <__aeabi_dadd+0x294>
 80005e2:	2280      	movs	r2, #128	; 0x80
 80005e4:	003c      	movs	r4, r7
 80005e6:	0412      	lsls	r2, r2, #16
 80005e8:	4314      	orrs	r4, r2
 80005ea:	46a0      	mov	r8, r4
 80005ec:	4662      	mov	r2, ip
 80005ee:	2a38      	cmp	r2, #56	; 0x38
 80005f0:	dd00      	ble.n	80005f4 <__aeabi_dadd+0x6c>
 80005f2:	e161      	b.n	80008b8 <__aeabi_dadd+0x330>
 80005f4:	2a1f      	cmp	r2, #31
 80005f6:	dd00      	ble.n	80005fa <__aeabi_dadd+0x72>
 80005f8:	e1cc      	b.n	8000994 <__aeabi_dadd+0x40c>
 80005fa:	4664      	mov	r4, ip
 80005fc:	2220      	movs	r2, #32
 80005fe:	1b12      	subs	r2, r2, r4
 8000600:	4644      	mov	r4, r8
 8000602:	4094      	lsls	r4, r2
 8000604:	000f      	movs	r7, r1
 8000606:	46a1      	mov	r9, r4
 8000608:	4664      	mov	r4, ip
 800060a:	4091      	lsls	r1, r2
 800060c:	40e7      	lsrs	r7, r4
 800060e:	464c      	mov	r4, r9
 8000610:	1e4a      	subs	r2, r1, #1
 8000612:	4191      	sbcs	r1, r2
 8000614:	433c      	orrs	r4, r7
 8000616:	4642      	mov	r2, r8
 8000618:	4321      	orrs	r1, r4
 800061a:	4664      	mov	r4, ip
 800061c:	40e2      	lsrs	r2, r4
 800061e:	1a80      	subs	r0, r0, r2
 8000620:	1a5c      	subs	r4, r3, r1
 8000622:	42a3      	cmp	r3, r4
 8000624:	419b      	sbcs	r3, r3
 8000626:	425f      	negs	r7, r3
 8000628:	1bc7      	subs	r7, r0, r7
 800062a:	023b      	lsls	r3, r7, #8
 800062c:	d400      	bmi.n	8000630 <__aeabi_dadd+0xa8>
 800062e:	e0d0      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000630:	027f      	lsls	r7, r7, #9
 8000632:	0a7f      	lsrs	r7, r7, #9
 8000634:	2f00      	cmp	r7, #0
 8000636:	d100      	bne.n	800063a <__aeabi_dadd+0xb2>
 8000638:	e0ff      	b.n	800083a <__aeabi_dadd+0x2b2>
 800063a:	0038      	movs	r0, r7
 800063c:	f001 fe12 	bl	8002264 <__clzsi2>
 8000640:	0001      	movs	r1, r0
 8000642:	3908      	subs	r1, #8
 8000644:	2320      	movs	r3, #32
 8000646:	0022      	movs	r2, r4
 8000648:	1a5b      	subs	r3, r3, r1
 800064a:	408f      	lsls	r7, r1
 800064c:	40da      	lsrs	r2, r3
 800064e:	408c      	lsls	r4, r1
 8000650:	4317      	orrs	r7, r2
 8000652:	42b1      	cmp	r1, r6
 8000654:	da00      	bge.n	8000658 <__aeabi_dadd+0xd0>
 8000656:	e0ff      	b.n	8000858 <__aeabi_dadd+0x2d0>
 8000658:	1b89      	subs	r1, r1, r6
 800065a:	1c4b      	adds	r3, r1, #1
 800065c:	2b1f      	cmp	r3, #31
 800065e:	dd00      	ble.n	8000662 <__aeabi_dadd+0xda>
 8000660:	e0a8      	b.n	80007b4 <__aeabi_dadd+0x22c>
 8000662:	2220      	movs	r2, #32
 8000664:	0039      	movs	r1, r7
 8000666:	1ad2      	subs	r2, r2, r3
 8000668:	0020      	movs	r0, r4
 800066a:	4094      	lsls	r4, r2
 800066c:	4091      	lsls	r1, r2
 800066e:	40d8      	lsrs	r0, r3
 8000670:	1e62      	subs	r2, r4, #1
 8000672:	4194      	sbcs	r4, r2
 8000674:	40df      	lsrs	r7, r3
 8000676:	2600      	movs	r6, #0
 8000678:	4301      	orrs	r1, r0
 800067a:	430c      	orrs	r4, r1
 800067c:	0763      	lsls	r3, r4, #29
 800067e:	d009      	beq.n	8000694 <__aeabi_dadd+0x10c>
 8000680:	230f      	movs	r3, #15
 8000682:	4023      	ands	r3, r4
 8000684:	2b04      	cmp	r3, #4
 8000686:	d005      	beq.n	8000694 <__aeabi_dadd+0x10c>
 8000688:	1d23      	adds	r3, r4, #4
 800068a:	42a3      	cmp	r3, r4
 800068c:	41a4      	sbcs	r4, r4
 800068e:	4264      	negs	r4, r4
 8000690:	193f      	adds	r7, r7, r4
 8000692:	001c      	movs	r4, r3
 8000694:	023b      	lsls	r3, r7, #8
 8000696:	d400      	bmi.n	800069a <__aeabi_dadd+0x112>
 8000698:	e09e      	b.n	80007d8 <__aeabi_dadd+0x250>
 800069a:	4b95      	ldr	r3, [pc, #596]	; (80008f0 <__aeabi_dadd+0x368>)
 800069c:	3601      	adds	r6, #1
 800069e:	429e      	cmp	r6, r3
 80006a0:	d100      	bne.n	80006a4 <__aeabi_dadd+0x11c>
 80006a2:	e0b7      	b.n	8000814 <__aeabi_dadd+0x28c>
 80006a4:	4a93      	ldr	r2, [pc, #588]	; (80008f4 <__aeabi_dadd+0x36c>)
 80006a6:	08e4      	lsrs	r4, r4, #3
 80006a8:	4017      	ands	r7, r2
 80006aa:	077b      	lsls	r3, r7, #29
 80006ac:	0571      	lsls	r1, r6, #21
 80006ae:	027f      	lsls	r7, r7, #9
 80006b0:	4323      	orrs	r3, r4
 80006b2:	0b3f      	lsrs	r7, r7, #12
 80006b4:	0d4a      	lsrs	r2, r1, #21
 80006b6:	0512      	lsls	r2, r2, #20
 80006b8:	433a      	orrs	r2, r7
 80006ba:	07ed      	lsls	r5, r5, #31
 80006bc:	432a      	orrs	r2, r5
 80006be:	0018      	movs	r0, r3
 80006c0:	0011      	movs	r1, r2
 80006c2:	bce0      	pop	{r5, r6, r7}
 80006c4:	46ba      	mov	sl, r7
 80006c6:	46b1      	mov	r9, r6
 80006c8:	46a8      	mov	r8, r5
 80006ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006cc:	2c00      	cmp	r4, #0
 80006ce:	d04b      	beq.n	8000768 <__aeabi_dadd+0x1e0>
 80006d0:	464c      	mov	r4, r9
 80006d2:	1ba4      	subs	r4, r4, r6
 80006d4:	46a4      	mov	ip, r4
 80006d6:	2e00      	cmp	r6, #0
 80006d8:	d000      	beq.n	80006dc <__aeabi_dadd+0x154>
 80006da:	e123      	b.n	8000924 <__aeabi_dadd+0x39c>
 80006dc:	0004      	movs	r4, r0
 80006de:	431c      	orrs	r4, r3
 80006e0:	d100      	bne.n	80006e4 <__aeabi_dadd+0x15c>
 80006e2:	e1af      	b.n	8000a44 <__aeabi_dadd+0x4bc>
 80006e4:	4662      	mov	r2, ip
 80006e6:	1e54      	subs	r4, r2, #1
 80006e8:	2a01      	cmp	r2, #1
 80006ea:	d100      	bne.n	80006ee <__aeabi_dadd+0x166>
 80006ec:	e215      	b.n	8000b1a <__aeabi_dadd+0x592>
 80006ee:	4d80      	ldr	r5, [pc, #512]	; (80008f0 <__aeabi_dadd+0x368>)
 80006f0:	45ac      	cmp	ip, r5
 80006f2:	d100      	bne.n	80006f6 <__aeabi_dadd+0x16e>
 80006f4:	e1c8      	b.n	8000a88 <__aeabi_dadd+0x500>
 80006f6:	46a4      	mov	ip, r4
 80006f8:	e11b      	b.n	8000932 <__aeabi_dadd+0x3aa>
 80006fa:	464a      	mov	r2, r9
 80006fc:	1ab2      	subs	r2, r6, r2
 80006fe:	4694      	mov	ip, r2
 8000700:	2a00      	cmp	r2, #0
 8000702:	dc00      	bgt.n	8000706 <__aeabi_dadd+0x17e>
 8000704:	e0ac      	b.n	8000860 <__aeabi_dadd+0x2d8>
 8000706:	464a      	mov	r2, r9
 8000708:	2a00      	cmp	r2, #0
 800070a:	d043      	beq.n	8000794 <__aeabi_dadd+0x20c>
 800070c:	4a78      	ldr	r2, [pc, #480]	; (80008f0 <__aeabi_dadd+0x368>)
 800070e:	4296      	cmp	r6, r2
 8000710:	d100      	bne.n	8000714 <__aeabi_dadd+0x18c>
 8000712:	e1af      	b.n	8000a74 <__aeabi_dadd+0x4ec>
 8000714:	2280      	movs	r2, #128	; 0x80
 8000716:	003c      	movs	r4, r7
 8000718:	0412      	lsls	r2, r2, #16
 800071a:	4314      	orrs	r4, r2
 800071c:	46a0      	mov	r8, r4
 800071e:	4662      	mov	r2, ip
 8000720:	2a38      	cmp	r2, #56	; 0x38
 8000722:	dc67      	bgt.n	80007f4 <__aeabi_dadd+0x26c>
 8000724:	2a1f      	cmp	r2, #31
 8000726:	dc00      	bgt.n	800072a <__aeabi_dadd+0x1a2>
 8000728:	e15f      	b.n	80009ea <__aeabi_dadd+0x462>
 800072a:	4647      	mov	r7, r8
 800072c:	3a20      	subs	r2, #32
 800072e:	40d7      	lsrs	r7, r2
 8000730:	4662      	mov	r2, ip
 8000732:	2a20      	cmp	r2, #32
 8000734:	d005      	beq.n	8000742 <__aeabi_dadd+0x1ba>
 8000736:	4664      	mov	r4, ip
 8000738:	2240      	movs	r2, #64	; 0x40
 800073a:	1b12      	subs	r2, r2, r4
 800073c:	4644      	mov	r4, r8
 800073e:	4094      	lsls	r4, r2
 8000740:	4321      	orrs	r1, r4
 8000742:	1e4a      	subs	r2, r1, #1
 8000744:	4191      	sbcs	r1, r2
 8000746:	000c      	movs	r4, r1
 8000748:	433c      	orrs	r4, r7
 800074a:	e057      	b.n	80007fc <__aeabi_dadd+0x274>
 800074c:	003a      	movs	r2, r7
 800074e:	430a      	orrs	r2, r1
 8000750:	d100      	bne.n	8000754 <__aeabi_dadd+0x1cc>
 8000752:	e105      	b.n	8000960 <__aeabi_dadd+0x3d8>
 8000754:	0022      	movs	r2, r4
 8000756:	3a01      	subs	r2, #1
 8000758:	2c01      	cmp	r4, #1
 800075a:	d100      	bne.n	800075e <__aeabi_dadd+0x1d6>
 800075c:	e182      	b.n	8000a64 <__aeabi_dadd+0x4dc>
 800075e:	4c64      	ldr	r4, [pc, #400]	; (80008f0 <__aeabi_dadd+0x368>)
 8000760:	45a4      	cmp	ip, r4
 8000762:	d05b      	beq.n	800081c <__aeabi_dadd+0x294>
 8000764:	4694      	mov	ip, r2
 8000766:	e741      	b.n	80005ec <__aeabi_dadd+0x64>
 8000768:	4c63      	ldr	r4, [pc, #396]	; (80008f8 <__aeabi_dadd+0x370>)
 800076a:	1c77      	adds	r7, r6, #1
 800076c:	4227      	tst	r7, r4
 800076e:	d000      	beq.n	8000772 <__aeabi_dadd+0x1ea>
 8000770:	e0c4      	b.n	80008fc <__aeabi_dadd+0x374>
 8000772:	0004      	movs	r4, r0
 8000774:	431c      	orrs	r4, r3
 8000776:	2e00      	cmp	r6, #0
 8000778:	d000      	beq.n	800077c <__aeabi_dadd+0x1f4>
 800077a:	e169      	b.n	8000a50 <__aeabi_dadd+0x4c8>
 800077c:	2c00      	cmp	r4, #0
 800077e:	d100      	bne.n	8000782 <__aeabi_dadd+0x1fa>
 8000780:	e1bf      	b.n	8000b02 <__aeabi_dadd+0x57a>
 8000782:	4644      	mov	r4, r8
 8000784:	430c      	orrs	r4, r1
 8000786:	d000      	beq.n	800078a <__aeabi_dadd+0x202>
 8000788:	e1d0      	b.n	8000b2c <__aeabi_dadd+0x5a4>
 800078a:	0742      	lsls	r2, r0, #29
 800078c:	08db      	lsrs	r3, r3, #3
 800078e:	4313      	orrs	r3, r2
 8000790:	08c0      	lsrs	r0, r0, #3
 8000792:	e029      	b.n	80007e8 <__aeabi_dadd+0x260>
 8000794:	003a      	movs	r2, r7
 8000796:	430a      	orrs	r2, r1
 8000798:	d100      	bne.n	800079c <__aeabi_dadd+0x214>
 800079a:	e170      	b.n	8000a7e <__aeabi_dadd+0x4f6>
 800079c:	4662      	mov	r2, ip
 800079e:	4664      	mov	r4, ip
 80007a0:	3a01      	subs	r2, #1
 80007a2:	2c01      	cmp	r4, #1
 80007a4:	d100      	bne.n	80007a8 <__aeabi_dadd+0x220>
 80007a6:	e0e0      	b.n	800096a <__aeabi_dadd+0x3e2>
 80007a8:	4c51      	ldr	r4, [pc, #324]	; (80008f0 <__aeabi_dadd+0x368>)
 80007aa:	45a4      	cmp	ip, r4
 80007ac:	d100      	bne.n	80007b0 <__aeabi_dadd+0x228>
 80007ae:	e161      	b.n	8000a74 <__aeabi_dadd+0x4ec>
 80007b0:	4694      	mov	ip, r2
 80007b2:	e7b4      	b.n	800071e <__aeabi_dadd+0x196>
 80007b4:	003a      	movs	r2, r7
 80007b6:	391f      	subs	r1, #31
 80007b8:	40ca      	lsrs	r2, r1
 80007ba:	0011      	movs	r1, r2
 80007bc:	2b20      	cmp	r3, #32
 80007be:	d003      	beq.n	80007c8 <__aeabi_dadd+0x240>
 80007c0:	2240      	movs	r2, #64	; 0x40
 80007c2:	1ad3      	subs	r3, r2, r3
 80007c4:	409f      	lsls	r7, r3
 80007c6:	433c      	orrs	r4, r7
 80007c8:	1e63      	subs	r3, r4, #1
 80007ca:	419c      	sbcs	r4, r3
 80007cc:	2700      	movs	r7, #0
 80007ce:	2600      	movs	r6, #0
 80007d0:	430c      	orrs	r4, r1
 80007d2:	0763      	lsls	r3, r4, #29
 80007d4:	d000      	beq.n	80007d8 <__aeabi_dadd+0x250>
 80007d6:	e753      	b.n	8000680 <__aeabi_dadd+0xf8>
 80007d8:	46b4      	mov	ip, r6
 80007da:	08e4      	lsrs	r4, r4, #3
 80007dc:	077b      	lsls	r3, r7, #29
 80007de:	4323      	orrs	r3, r4
 80007e0:	08f8      	lsrs	r0, r7, #3
 80007e2:	4a43      	ldr	r2, [pc, #268]	; (80008f0 <__aeabi_dadd+0x368>)
 80007e4:	4594      	cmp	ip, r2
 80007e6:	d01d      	beq.n	8000824 <__aeabi_dadd+0x29c>
 80007e8:	4662      	mov	r2, ip
 80007ea:	0307      	lsls	r7, r0, #12
 80007ec:	0552      	lsls	r2, r2, #21
 80007ee:	0b3f      	lsrs	r7, r7, #12
 80007f0:	0d52      	lsrs	r2, r2, #21
 80007f2:	e760      	b.n	80006b6 <__aeabi_dadd+0x12e>
 80007f4:	4644      	mov	r4, r8
 80007f6:	430c      	orrs	r4, r1
 80007f8:	1e62      	subs	r2, r4, #1
 80007fa:	4194      	sbcs	r4, r2
 80007fc:	18e4      	adds	r4, r4, r3
 80007fe:	429c      	cmp	r4, r3
 8000800:	419b      	sbcs	r3, r3
 8000802:	425f      	negs	r7, r3
 8000804:	183f      	adds	r7, r7, r0
 8000806:	023b      	lsls	r3, r7, #8
 8000808:	d5e3      	bpl.n	80007d2 <__aeabi_dadd+0x24a>
 800080a:	4b39      	ldr	r3, [pc, #228]	; (80008f0 <__aeabi_dadd+0x368>)
 800080c:	3601      	adds	r6, #1
 800080e:	429e      	cmp	r6, r3
 8000810:	d000      	beq.n	8000814 <__aeabi_dadd+0x28c>
 8000812:	e0b5      	b.n	8000980 <__aeabi_dadd+0x3f8>
 8000814:	0032      	movs	r2, r6
 8000816:	2700      	movs	r7, #0
 8000818:	2300      	movs	r3, #0
 800081a:	e74c      	b.n	80006b6 <__aeabi_dadd+0x12e>
 800081c:	0742      	lsls	r2, r0, #29
 800081e:	08db      	lsrs	r3, r3, #3
 8000820:	4313      	orrs	r3, r2
 8000822:	08c0      	lsrs	r0, r0, #3
 8000824:	001a      	movs	r2, r3
 8000826:	4302      	orrs	r2, r0
 8000828:	d100      	bne.n	800082c <__aeabi_dadd+0x2a4>
 800082a:	e1e1      	b.n	8000bf0 <__aeabi_dadd+0x668>
 800082c:	2780      	movs	r7, #128	; 0x80
 800082e:	033f      	lsls	r7, r7, #12
 8000830:	4307      	orrs	r7, r0
 8000832:	033f      	lsls	r7, r7, #12
 8000834:	4a2e      	ldr	r2, [pc, #184]	; (80008f0 <__aeabi_dadd+0x368>)
 8000836:	0b3f      	lsrs	r7, r7, #12
 8000838:	e73d      	b.n	80006b6 <__aeabi_dadd+0x12e>
 800083a:	0020      	movs	r0, r4
 800083c:	f001 fd12 	bl	8002264 <__clzsi2>
 8000840:	0001      	movs	r1, r0
 8000842:	3118      	adds	r1, #24
 8000844:	291f      	cmp	r1, #31
 8000846:	dc00      	bgt.n	800084a <__aeabi_dadd+0x2c2>
 8000848:	e6fc      	b.n	8000644 <__aeabi_dadd+0xbc>
 800084a:	3808      	subs	r0, #8
 800084c:	4084      	lsls	r4, r0
 800084e:	0027      	movs	r7, r4
 8000850:	2400      	movs	r4, #0
 8000852:	42b1      	cmp	r1, r6
 8000854:	db00      	blt.n	8000858 <__aeabi_dadd+0x2d0>
 8000856:	e6ff      	b.n	8000658 <__aeabi_dadd+0xd0>
 8000858:	4a26      	ldr	r2, [pc, #152]	; (80008f4 <__aeabi_dadd+0x36c>)
 800085a:	1a76      	subs	r6, r6, r1
 800085c:	4017      	ands	r7, r2
 800085e:	e70d      	b.n	800067c <__aeabi_dadd+0xf4>
 8000860:	2a00      	cmp	r2, #0
 8000862:	d02f      	beq.n	80008c4 <__aeabi_dadd+0x33c>
 8000864:	464a      	mov	r2, r9
 8000866:	1b92      	subs	r2, r2, r6
 8000868:	4694      	mov	ip, r2
 800086a:	2e00      	cmp	r6, #0
 800086c:	d100      	bne.n	8000870 <__aeabi_dadd+0x2e8>
 800086e:	e0ad      	b.n	80009cc <__aeabi_dadd+0x444>
 8000870:	4a1f      	ldr	r2, [pc, #124]	; (80008f0 <__aeabi_dadd+0x368>)
 8000872:	4591      	cmp	r9, r2
 8000874:	d100      	bne.n	8000878 <__aeabi_dadd+0x2f0>
 8000876:	e10f      	b.n	8000a98 <__aeabi_dadd+0x510>
 8000878:	2280      	movs	r2, #128	; 0x80
 800087a:	0412      	lsls	r2, r2, #16
 800087c:	4310      	orrs	r0, r2
 800087e:	4662      	mov	r2, ip
 8000880:	2a38      	cmp	r2, #56	; 0x38
 8000882:	dd00      	ble.n	8000886 <__aeabi_dadd+0x2fe>
 8000884:	e10f      	b.n	8000aa6 <__aeabi_dadd+0x51e>
 8000886:	2a1f      	cmp	r2, #31
 8000888:	dd00      	ble.n	800088c <__aeabi_dadd+0x304>
 800088a:	e180      	b.n	8000b8e <__aeabi_dadd+0x606>
 800088c:	4664      	mov	r4, ip
 800088e:	2220      	movs	r2, #32
 8000890:	001e      	movs	r6, r3
 8000892:	1b12      	subs	r2, r2, r4
 8000894:	4667      	mov	r7, ip
 8000896:	0004      	movs	r4, r0
 8000898:	4093      	lsls	r3, r2
 800089a:	4094      	lsls	r4, r2
 800089c:	40fe      	lsrs	r6, r7
 800089e:	1e5a      	subs	r2, r3, #1
 80008a0:	4193      	sbcs	r3, r2
 80008a2:	40f8      	lsrs	r0, r7
 80008a4:	4334      	orrs	r4, r6
 80008a6:	431c      	orrs	r4, r3
 80008a8:	4480      	add	r8, r0
 80008aa:	1864      	adds	r4, r4, r1
 80008ac:	428c      	cmp	r4, r1
 80008ae:	41bf      	sbcs	r7, r7
 80008b0:	427f      	negs	r7, r7
 80008b2:	464e      	mov	r6, r9
 80008b4:	4447      	add	r7, r8
 80008b6:	e7a6      	b.n	8000806 <__aeabi_dadd+0x27e>
 80008b8:	4642      	mov	r2, r8
 80008ba:	430a      	orrs	r2, r1
 80008bc:	0011      	movs	r1, r2
 80008be:	1e4a      	subs	r2, r1, #1
 80008c0:	4191      	sbcs	r1, r2
 80008c2:	e6ad      	b.n	8000620 <__aeabi_dadd+0x98>
 80008c4:	4c0c      	ldr	r4, [pc, #48]	; (80008f8 <__aeabi_dadd+0x370>)
 80008c6:	1c72      	adds	r2, r6, #1
 80008c8:	4222      	tst	r2, r4
 80008ca:	d000      	beq.n	80008ce <__aeabi_dadd+0x346>
 80008cc:	e0a1      	b.n	8000a12 <__aeabi_dadd+0x48a>
 80008ce:	0002      	movs	r2, r0
 80008d0:	431a      	orrs	r2, r3
 80008d2:	2e00      	cmp	r6, #0
 80008d4:	d000      	beq.n	80008d8 <__aeabi_dadd+0x350>
 80008d6:	e0fa      	b.n	8000ace <__aeabi_dadd+0x546>
 80008d8:	2a00      	cmp	r2, #0
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x356>
 80008dc:	e145      	b.n	8000b6a <__aeabi_dadd+0x5e2>
 80008de:	003a      	movs	r2, r7
 80008e0:	430a      	orrs	r2, r1
 80008e2:	d000      	beq.n	80008e6 <__aeabi_dadd+0x35e>
 80008e4:	e146      	b.n	8000b74 <__aeabi_dadd+0x5ec>
 80008e6:	0742      	lsls	r2, r0, #29
 80008e8:	08db      	lsrs	r3, r3, #3
 80008ea:	4313      	orrs	r3, r2
 80008ec:	08c0      	lsrs	r0, r0, #3
 80008ee:	e77b      	b.n	80007e8 <__aeabi_dadd+0x260>
 80008f0:	000007ff 	.word	0x000007ff
 80008f4:	ff7fffff 	.word	0xff7fffff
 80008f8:	000007fe 	.word	0x000007fe
 80008fc:	4647      	mov	r7, r8
 80008fe:	1a5c      	subs	r4, r3, r1
 8000900:	1bc2      	subs	r2, r0, r7
 8000902:	42a3      	cmp	r3, r4
 8000904:	41bf      	sbcs	r7, r7
 8000906:	427f      	negs	r7, r7
 8000908:	46b9      	mov	r9, r7
 800090a:	0017      	movs	r7, r2
 800090c:	464a      	mov	r2, r9
 800090e:	1abf      	subs	r7, r7, r2
 8000910:	023a      	lsls	r2, r7, #8
 8000912:	d500      	bpl.n	8000916 <__aeabi_dadd+0x38e>
 8000914:	e08d      	b.n	8000a32 <__aeabi_dadd+0x4aa>
 8000916:	0023      	movs	r3, r4
 8000918:	433b      	orrs	r3, r7
 800091a:	d000      	beq.n	800091e <__aeabi_dadd+0x396>
 800091c:	e68a      	b.n	8000634 <__aeabi_dadd+0xac>
 800091e:	2000      	movs	r0, #0
 8000920:	2500      	movs	r5, #0
 8000922:	e761      	b.n	80007e8 <__aeabi_dadd+0x260>
 8000924:	4cb4      	ldr	r4, [pc, #720]	; (8000bf8 <__aeabi_dadd+0x670>)
 8000926:	45a1      	cmp	r9, r4
 8000928:	d100      	bne.n	800092c <__aeabi_dadd+0x3a4>
 800092a:	e0ad      	b.n	8000a88 <__aeabi_dadd+0x500>
 800092c:	2480      	movs	r4, #128	; 0x80
 800092e:	0424      	lsls	r4, r4, #16
 8000930:	4320      	orrs	r0, r4
 8000932:	4664      	mov	r4, ip
 8000934:	2c38      	cmp	r4, #56	; 0x38
 8000936:	dc3d      	bgt.n	80009b4 <__aeabi_dadd+0x42c>
 8000938:	4662      	mov	r2, ip
 800093a:	2c1f      	cmp	r4, #31
 800093c:	dd00      	ble.n	8000940 <__aeabi_dadd+0x3b8>
 800093e:	e0b7      	b.n	8000ab0 <__aeabi_dadd+0x528>
 8000940:	2520      	movs	r5, #32
 8000942:	001e      	movs	r6, r3
 8000944:	1b2d      	subs	r5, r5, r4
 8000946:	0004      	movs	r4, r0
 8000948:	40ab      	lsls	r3, r5
 800094a:	40ac      	lsls	r4, r5
 800094c:	40d6      	lsrs	r6, r2
 800094e:	40d0      	lsrs	r0, r2
 8000950:	4642      	mov	r2, r8
 8000952:	1e5d      	subs	r5, r3, #1
 8000954:	41ab      	sbcs	r3, r5
 8000956:	4334      	orrs	r4, r6
 8000958:	1a12      	subs	r2, r2, r0
 800095a:	4690      	mov	r8, r2
 800095c:	4323      	orrs	r3, r4
 800095e:	e02c      	b.n	80009ba <__aeabi_dadd+0x432>
 8000960:	0742      	lsls	r2, r0, #29
 8000962:	08db      	lsrs	r3, r3, #3
 8000964:	4313      	orrs	r3, r2
 8000966:	08c0      	lsrs	r0, r0, #3
 8000968:	e73b      	b.n	80007e2 <__aeabi_dadd+0x25a>
 800096a:	185c      	adds	r4, r3, r1
 800096c:	429c      	cmp	r4, r3
 800096e:	419b      	sbcs	r3, r3
 8000970:	4440      	add	r0, r8
 8000972:	425b      	negs	r3, r3
 8000974:	18c7      	adds	r7, r0, r3
 8000976:	2601      	movs	r6, #1
 8000978:	023b      	lsls	r3, r7, #8
 800097a:	d400      	bmi.n	800097e <__aeabi_dadd+0x3f6>
 800097c:	e729      	b.n	80007d2 <__aeabi_dadd+0x24a>
 800097e:	2602      	movs	r6, #2
 8000980:	4a9e      	ldr	r2, [pc, #632]	; (8000bfc <__aeabi_dadd+0x674>)
 8000982:	0863      	lsrs	r3, r4, #1
 8000984:	4017      	ands	r7, r2
 8000986:	2201      	movs	r2, #1
 8000988:	4014      	ands	r4, r2
 800098a:	431c      	orrs	r4, r3
 800098c:	07fb      	lsls	r3, r7, #31
 800098e:	431c      	orrs	r4, r3
 8000990:	087f      	lsrs	r7, r7, #1
 8000992:	e673      	b.n	800067c <__aeabi_dadd+0xf4>
 8000994:	4644      	mov	r4, r8
 8000996:	3a20      	subs	r2, #32
 8000998:	40d4      	lsrs	r4, r2
 800099a:	4662      	mov	r2, ip
 800099c:	2a20      	cmp	r2, #32
 800099e:	d005      	beq.n	80009ac <__aeabi_dadd+0x424>
 80009a0:	4667      	mov	r7, ip
 80009a2:	2240      	movs	r2, #64	; 0x40
 80009a4:	1bd2      	subs	r2, r2, r7
 80009a6:	4647      	mov	r7, r8
 80009a8:	4097      	lsls	r7, r2
 80009aa:	4339      	orrs	r1, r7
 80009ac:	1e4a      	subs	r2, r1, #1
 80009ae:	4191      	sbcs	r1, r2
 80009b0:	4321      	orrs	r1, r4
 80009b2:	e635      	b.n	8000620 <__aeabi_dadd+0x98>
 80009b4:	4303      	orrs	r3, r0
 80009b6:	1e58      	subs	r0, r3, #1
 80009b8:	4183      	sbcs	r3, r0
 80009ba:	1acc      	subs	r4, r1, r3
 80009bc:	42a1      	cmp	r1, r4
 80009be:	41bf      	sbcs	r7, r7
 80009c0:	4643      	mov	r3, r8
 80009c2:	427f      	negs	r7, r7
 80009c4:	4655      	mov	r5, sl
 80009c6:	464e      	mov	r6, r9
 80009c8:	1bdf      	subs	r7, r3, r7
 80009ca:	e62e      	b.n	800062a <__aeabi_dadd+0xa2>
 80009cc:	0002      	movs	r2, r0
 80009ce:	431a      	orrs	r2, r3
 80009d0:	d100      	bne.n	80009d4 <__aeabi_dadd+0x44c>
 80009d2:	e0bd      	b.n	8000b50 <__aeabi_dadd+0x5c8>
 80009d4:	4662      	mov	r2, ip
 80009d6:	4664      	mov	r4, ip
 80009d8:	3a01      	subs	r2, #1
 80009da:	2c01      	cmp	r4, #1
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x458>
 80009de:	e0e5      	b.n	8000bac <__aeabi_dadd+0x624>
 80009e0:	4c85      	ldr	r4, [pc, #532]	; (8000bf8 <__aeabi_dadd+0x670>)
 80009e2:	45a4      	cmp	ip, r4
 80009e4:	d058      	beq.n	8000a98 <__aeabi_dadd+0x510>
 80009e6:	4694      	mov	ip, r2
 80009e8:	e749      	b.n	800087e <__aeabi_dadd+0x2f6>
 80009ea:	4664      	mov	r4, ip
 80009ec:	2220      	movs	r2, #32
 80009ee:	1b12      	subs	r2, r2, r4
 80009f0:	4644      	mov	r4, r8
 80009f2:	4094      	lsls	r4, r2
 80009f4:	000f      	movs	r7, r1
 80009f6:	46a1      	mov	r9, r4
 80009f8:	4664      	mov	r4, ip
 80009fa:	4091      	lsls	r1, r2
 80009fc:	40e7      	lsrs	r7, r4
 80009fe:	464c      	mov	r4, r9
 8000a00:	1e4a      	subs	r2, r1, #1
 8000a02:	4191      	sbcs	r1, r2
 8000a04:	433c      	orrs	r4, r7
 8000a06:	4642      	mov	r2, r8
 8000a08:	430c      	orrs	r4, r1
 8000a0a:	4661      	mov	r1, ip
 8000a0c:	40ca      	lsrs	r2, r1
 8000a0e:	1880      	adds	r0, r0, r2
 8000a10:	e6f4      	b.n	80007fc <__aeabi_dadd+0x274>
 8000a12:	4c79      	ldr	r4, [pc, #484]	; (8000bf8 <__aeabi_dadd+0x670>)
 8000a14:	42a2      	cmp	r2, r4
 8000a16:	d100      	bne.n	8000a1a <__aeabi_dadd+0x492>
 8000a18:	e6fd      	b.n	8000816 <__aeabi_dadd+0x28e>
 8000a1a:	1859      	adds	r1, r3, r1
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	419b      	sbcs	r3, r3
 8000a20:	4440      	add	r0, r8
 8000a22:	425f      	negs	r7, r3
 8000a24:	19c7      	adds	r7, r0, r7
 8000a26:	07fc      	lsls	r4, r7, #31
 8000a28:	0849      	lsrs	r1, r1, #1
 8000a2a:	0016      	movs	r6, r2
 8000a2c:	430c      	orrs	r4, r1
 8000a2e:	087f      	lsrs	r7, r7, #1
 8000a30:	e6cf      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000a32:	1acc      	subs	r4, r1, r3
 8000a34:	42a1      	cmp	r1, r4
 8000a36:	41bf      	sbcs	r7, r7
 8000a38:	4643      	mov	r3, r8
 8000a3a:	427f      	negs	r7, r7
 8000a3c:	1a18      	subs	r0, r3, r0
 8000a3e:	4655      	mov	r5, sl
 8000a40:	1bc7      	subs	r7, r0, r7
 8000a42:	e5f7      	b.n	8000634 <__aeabi_dadd+0xac>
 8000a44:	08c9      	lsrs	r1, r1, #3
 8000a46:	077b      	lsls	r3, r7, #29
 8000a48:	4655      	mov	r5, sl
 8000a4a:	430b      	orrs	r3, r1
 8000a4c:	08f8      	lsrs	r0, r7, #3
 8000a4e:	e6c8      	b.n	80007e2 <__aeabi_dadd+0x25a>
 8000a50:	2c00      	cmp	r4, #0
 8000a52:	d000      	beq.n	8000a56 <__aeabi_dadd+0x4ce>
 8000a54:	e081      	b.n	8000b5a <__aeabi_dadd+0x5d2>
 8000a56:	4643      	mov	r3, r8
 8000a58:	430b      	orrs	r3, r1
 8000a5a:	d115      	bne.n	8000a88 <__aeabi_dadd+0x500>
 8000a5c:	2080      	movs	r0, #128	; 0x80
 8000a5e:	2500      	movs	r5, #0
 8000a60:	0300      	lsls	r0, r0, #12
 8000a62:	e6e3      	b.n	800082c <__aeabi_dadd+0x2a4>
 8000a64:	1a5c      	subs	r4, r3, r1
 8000a66:	42a3      	cmp	r3, r4
 8000a68:	419b      	sbcs	r3, r3
 8000a6a:	1bc7      	subs	r7, r0, r7
 8000a6c:	425b      	negs	r3, r3
 8000a6e:	2601      	movs	r6, #1
 8000a70:	1aff      	subs	r7, r7, r3
 8000a72:	e5da      	b.n	800062a <__aeabi_dadd+0xa2>
 8000a74:	0742      	lsls	r2, r0, #29
 8000a76:	08db      	lsrs	r3, r3, #3
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	08c0      	lsrs	r0, r0, #3
 8000a7c:	e6d2      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000a7e:	0742      	lsls	r2, r0, #29
 8000a80:	08db      	lsrs	r3, r3, #3
 8000a82:	4313      	orrs	r3, r2
 8000a84:	08c0      	lsrs	r0, r0, #3
 8000a86:	e6ac      	b.n	80007e2 <__aeabi_dadd+0x25a>
 8000a88:	4643      	mov	r3, r8
 8000a8a:	4642      	mov	r2, r8
 8000a8c:	08c9      	lsrs	r1, r1, #3
 8000a8e:	075b      	lsls	r3, r3, #29
 8000a90:	4655      	mov	r5, sl
 8000a92:	430b      	orrs	r3, r1
 8000a94:	08d0      	lsrs	r0, r2, #3
 8000a96:	e6c5      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000a98:	4643      	mov	r3, r8
 8000a9a:	4642      	mov	r2, r8
 8000a9c:	075b      	lsls	r3, r3, #29
 8000a9e:	08c9      	lsrs	r1, r1, #3
 8000aa0:	430b      	orrs	r3, r1
 8000aa2:	08d0      	lsrs	r0, r2, #3
 8000aa4:	e6be      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000aa6:	4303      	orrs	r3, r0
 8000aa8:	001c      	movs	r4, r3
 8000aaa:	1e63      	subs	r3, r4, #1
 8000aac:	419c      	sbcs	r4, r3
 8000aae:	e6fc      	b.n	80008aa <__aeabi_dadd+0x322>
 8000ab0:	0002      	movs	r2, r0
 8000ab2:	3c20      	subs	r4, #32
 8000ab4:	40e2      	lsrs	r2, r4
 8000ab6:	0014      	movs	r4, r2
 8000ab8:	4662      	mov	r2, ip
 8000aba:	2a20      	cmp	r2, #32
 8000abc:	d003      	beq.n	8000ac6 <__aeabi_dadd+0x53e>
 8000abe:	2540      	movs	r5, #64	; 0x40
 8000ac0:	1aad      	subs	r5, r5, r2
 8000ac2:	40a8      	lsls	r0, r5
 8000ac4:	4303      	orrs	r3, r0
 8000ac6:	1e58      	subs	r0, r3, #1
 8000ac8:	4183      	sbcs	r3, r0
 8000aca:	4323      	orrs	r3, r4
 8000acc:	e775      	b.n	80009ba <__aeabi_dadd+0x432>
 8000ace:	2a00      	cmp	r2, #0
 8000ad0:	d0e2      	beq.n	8000a98 <__aeabi_dadd+0x510>
 8000ad2:	003a      	movs	r2, r7
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	d0cd      	beq.n	8000a74 <__aeabi_dadd+0x4ec>
 8000ad8:	0742      	lsls	r2, r0, #29
 8000ada:	08db      	lsrs	r3, r3, #3
 8000adc:	4313      	orrs	r3, r2
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	08c0      	lsrs	r0, r0, #3
 8000ae2:	0312      	lsls	r2, r2, #12
 8000ae4:	4210      	tst	r0, r2
 8000ae6:	d006      	beq.n	8000af6 <__aeabi_dadd+0x56e>
 8000ae8:	08fc      	lsrs	r4, r7, #3
 8000aea:	4214      	tst	r4, r2
 8000aec:	d103      	bne.n	8000af6 <__aeabi_dadd+0x56e>
 8000aee:	0020      	movs	r0, r4
 8000af0:	08cb      	lsrs	r3, r1, #3
 8000af2:	077a      	lsls	r2, r7, #29
 8000af4:	4313      	orrs	r3, r2
 8000af6:	0f5a      	lsrs	r2, r3, #29
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	0752      	lsls	r2, r2, #29
 8000afc:	08db      	lsrs	r3, r3, #3
 8000afe:	4313      	orrs	r3, r2
 8000b00:	e690      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000b02:	4643      	mov	r3, r8
 8000b04:	430b      	orrs	r3, r1
 8000b06:	d100      	bne.n	8000b0a <__aeabi_dadd+0x582>
 8000b08:	e709      	b.n	800091e <__aeabi_dadd+0x396>
 8000b0a:	4643      	mov	r3, r8
 8000b0c:	4642      	mov	r2, r8
 8000b0e:	08c9      	lsrs	r1, r1, #3
 8000b10:	075b      	lsls	r3, r3, #29
 8000b12:	4655      	mov	r5, sl
 8000b14:	430b      	orrs	r3, r1
 8000b16:	08d0      	lsrs	r0, r2, #3
 8000b18:	e666      	b.n	80007e8 <__aeabi_dadd+0x260>
 8000b1a:	1acc      	subs	r4, r1, r3
 8000b1c:	42a1      	cmp	r1, r4
 8000b1e:	4189      	sbcs	r1, r1
 8000b20:	1a3f      	subs	r7, r7, r0
 8000b22:	4249      	negs	r1, r1
 8000b24:	4655      	mov	r5, sl
 8000b26:	2601      	movs	r6, #1
 8000b28:	1a7f      	subs	r7, r7, r1
 8000b2a:	e57e      	b.n	800062a <__aeabi_dadd+0xa2>
 8000b2c:	4642      	mov	r2, r8
 8000b2e:	1a5c      	subs	r4, r3, r1
 8000b30:	1a87      	subs	r7, r0, r2
 8000b32:	42a3      	cmp	r3, r4
 8000b34:	4192      	sbcs	r2, r2
 8000b36:	4252      	negs	r2, r2
 8000b38:	1abf      	subs	r7, r7, r2
 8000b3a:	023a      	lsls	r2, r7, #8
 8000b3c:	d53d      	bpl.n	8000bba <__aeabi_dadd+0x632>
 8000b3e:	1acc      	subs	r4, r1, r3
 8000b40:	42a1      	cmp	r1, r4
 8000b42:	4189      	sbcs	r1, r1
 8000b44:	4643      	mov	r3, r8
 8000b46:	4249      	negs	r1, r1
 8000b48:	1a1f      	subs	r7, r3, r0
 8000b4a:	4655      	mov	r5, sl
 8000b4c:	1a7f      	subs	r7, r7, r1
 8000b4e:	e595      	b.n	800067c <__aeabi_dadd+0xf4>
 8000b50:	077b      	lsls	r3, r7, #29
 8000b52:	08c9      	lsrs	r1, r1, #3
 8000b54:	430b      	orrs	r3, r1
 8000b56:	08f8      	lsrs	r0, r7, #3
 8000b58:	e643      	b.n	80007e2 <__aeabi_dadd+0x25a>
 8000b5a:	4644      	mov	r4, r8
 8000b5c:	08db      	lsrs	r3, r3, #3
 8000b5e:	430c      	orrs	r4, r1
 8000b60:	d130      	bne.n	8000bc4 <__aeabi_dadd+0x63c>
 8000b62:	0742      	lsls	r2, r0, #29
 8000b64:	4313      	orrs	r3, r2
 8000b66:	08c0      	lsrs	r0, r0, #3
 8000b68:	e65c      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000b6a:	077b      	lsls	r3, r7, #29
 8000b6c:	08c9      	lsrs	r1, r1, #3
 8000b6e:	430b      	orrs	r3, r1
 8000b70:	08f8      	lsrs	r0, r7, #3
 8000b72:	e639      	b.n	80007e8 <__aeabi_dadd+0x260>
 8000b74:	185c      	adds	r4, r3, r1
 8000b76:	429c      	cmp	r4, r3
 8000b78:	419b      	sbcs	r3, r3
 8000b7a:	4440      	add	r0, r8
 8000b7c:	425b      	negs	r3, r3
 8000b7e:	18c7      	adds	r7, r0, r3
 8000b80:	023b      	lsls	r3, r7, #8
 8000b82:	d400      	bmi.n	8000b86 <__aeabi_dadd+0x5fe>
 8000b84:	e625      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000b86:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <__aeabi_dadd+0x674>)
 8000b88:	2601      	movs	r6, #1
 8000b8a:	401f      	ands	r7, r3
 8000b8c:	e621      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000b8e:	0004      	movs	r4, r0
 8000b90:	3a20      	subs	r2, #32
 8000b92:	40d4      	lsrs	r4, r2
 8000b94:	4662      	mov	r2, ip
 8000b96:	2a20      	cmp	r2, #32
 8000b98:	d004      	beq.n	8000ba4 <__aeabi_dadd+0x61c>
 8000b9a:	2240      	movs	r2, #64	; 0x40
 8000b9c:	4666      	mov	r6, ip
 8000b9e:	1b92      	subs	r2, r2, r6
 8000ba0:	4090      	lsls	r0, r2
 8000ba2:	4303      	orrs	r3, r0
 8000ba4:	1e5a      	subs	r2, r3, #1
 8000ba6:	4193      	sbcs	r3, r2
 8000ba8:	431c      	orrs	r4, r3
 8000baa:	e67e      	b.n	80008aa <__aeabi_dadd+0x322>
 8000bac:	185c      	adds	r4, r3, r1
 8000bae:	428c      	cmp	r4, r1
 8000bb0:	4189      	sbcs	r1, r1
 8000bb2:	4440      	add	r0, r8
 8000bb4:	4249      	negs	r1, r1
 8000bb6:	1847      	adds	r7, r0, r1
 8000bb8:	e6dd      	b.n	8000976 <__aeabi_dadd+0x3ee>
 8000bba:	0023      	movs	r3, r4
 8000bbc:	433b      	orrs	r3, r7
 8000bbe:	d100      	bne.n	8000bc2 <__aeabi_dadd+0x63a>
 8000bc0:	e6ad      	b.n	800091e <__aeabi_dadd+0x396>
 8000bc2:	e606      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000bc4:	0744      	lsls	r4, r0, #29
 8000bc6:	4323      	orrs	r3, r4
 8000bc8:	2480      	movs	r4, #128	; 0x80
 8000bca:	08c0      	lsrs	r0, r0, #3
 8000bcc:	0324      	lsls	r4, r4, #12
 8000bce:	4220      	tst	r0, r4
 8000bd0:	d008      	beq.n	8000be4 <__aeabi_dadd+0x65c>
 8000bd2:	4642      	mov	r2, r8
 8000bd4:	08d6      	lsrs	r6, r2, #3
 8000bd6:	4226      	tst	r6, r4
 8000bd8:	d104      	bne.n	8000be4 <__aeabi_dadd+0x65c>
 8000bda:	4655      	mov	r5, sl
 8000bdc:	0030      	movs	r0, r6
 8000bde:	08cb      	lsrs	r3, r1, #3
 8000be0:	0751      	lsls	r1, r2, #29
 8000be2:	430b      	orrs	r3, r1
 8000be4:	0f5a      	lsrs	r2, r3, #29
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	08db      	lsrs	r3, r3, #3
 8000bea:	0752      	lsls	r2, r2, #29
 8000bec:	4313      	orrs	r3, r2
 8000bee:	e619      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	4a01      	ldr	r2, [pc, #4]	; (8000bf8 <__aeabi_dadd+0x670>)
 8000bf4:	001f      	movs	r7, r3
 8000bf6:	e55e      	b.n	80006b6 <__aeabi_dadd+0x12e>
 8000bf8:	000007ff 	.word	0x000007ff
 8000bfc:	ff7fffff 	.word	0xff7fffff

08000c00 <__aeabi_ddiv>:
 8000c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c02:	4657      	mov	r7, sl
 8000c04:	464e      	mov	r6, r9
 8000c06:	4645      	mov	r5, r8
 8000c08:	46de      	mov	lr, fp
 8000c0a:	b5e0      	push	{r5, r6, r7, lr}
 8000c0c:	4681      	mov	r9, r0
 8000c0e:	0005      	movs	r5, r0
 8000c10:	030c      	lsls	r4, r1, #12
 8000c12:	0048      	lsls	r0, r1, #1
 8000c14:	4692      	mov	sl, r2
 8000c16:	001f      	movs	r7, r3
 8000c18:	b085      	sub	sp, #20
 8000c1a:	0b24      	lsrs	r4, r4, #12
 8000c1c:	0d40      	lsrs	r0, r0, #21
 8000c1e:	0fce      	lsrs	r6, r1, #31
 8000c20:	2800      	cmp	r0, #0
 8000c22:	d100      	bne.n	8000c26 <__aeabi_ddiv+0x26>
 8000c24:	e156      	b.n	8000ed4 <__aeabi_ddiv+0x2d4>
 8000c26:	4bd4      	ldr	r3, [pc, #848]	; (8000f78 <__aeabi_ddiv+0x378>)
 8000c28:	4298      	cmp	r0, r3
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_ddiv+0x2e>
 8000c2c:	e172      	b.n	8000f14 <__aeabi_ddiv+0x314>
 8000c2e:	0f6b      	lsrs	r3, r5, #29
 8000c30:	00e4      	lsls	r4, r4, #3
 8000c32:	431c      	orrs	r4, r3
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	041b      	lsls	r3, r3, #16
 8000c38:	4323      	orrs	r3, r4
 8000c3a:	4698      	mov	r8, r3
 8000c3c:	4bcf      	ldr	r3, [pc, #828]	; (8000f7c <__aeabi_ddiv+0x37c>)
 8000c3e:	00ed      	lsls	r5, r5, #3
 8000c40:	469b      	mov	fp, r3
 8000c42:	2300      	movs	r3, #0
 8000c44:	4699      	mov	r9, r3
 8000c46:	4483      	add	fp, r0
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	033c      	lsls	r4, r7, #12
 8000c4c:	007b      	lsls	r3, r7, #1
 8000c4e:	4650      	mov	r0, sl
 8000c50:	0b24      	lsrs	r4, r4, #12
 8000c52:	0d5b      	lsrs	r3, r3, #21
 8000c54:	0fff      	lsrs	r7, r7, #31
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d100      	bne.n	8000c5c <__aeabi_ddiv+0x5c>
 8000c5a:	e11f      	b.n	8000e9c <__aeabi_ddiv+0x29c>
 8000c5c:	4ac6      	ldr	r2, [pc, #792]	; (8000f78 <__aeabi_ddiv+0x378>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d100      	bne.n	8000c64 <__aeabi_ddiv+0x64>
 8000c62:	e162      	b.n	8000f2a <__aeabi_ddiv+0x32a>
 8000c64:	49c5      	ldr	r1, [pc, #788]	; (8000f7c <__aeabi_ddiv+0x37c>)
 8000c66:	0f42      	lsrs	r2, r0, #29
 8000c68:	468c      	mov	ip, r1
 8000c6a:	00e4      	lsls	r4, r4, #3
 8000c6c:	4659      	mov	r1, fp
 8000c6e:	4314      	orrs	r4, r2
 8000c70:	2280      	movs	r2, #128	; 0x80
 8000c72:	4463      	add	r3, ip
 8000c74:	0412      	lsls	r2, r2, #16
 8000c76:	1acb      	subs	r3, r1, r3
 8000c78:	4314      	orrs	r4, r2
 8000c7a:	469b      	mov	fp, r3
 8000c7c:	00c2      	lsls	r2, r0, #3
 8000c7e:	2000      	movs	r0, #0
 8000c80:	0033      	movs	r3, r6
 8000c82:	407b      	eors	r3, r7
 8000c84:	469a      	mov	sl, r3
 8000c86:	464b      	mov	r3, r9
 8000c88:	2b0f      	cmp	r3, #15
 8000c8a:	d827      	bhi.n	8000cdc <__aeabi_ddiv+0xdc>
 8000c8c:	49bc      	ldr	r1, [pc, #752]	; (8000f80 <__aeabi_ddiv+0x380>)
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	58cb      	ldr	r3, [r1, r3]
 8000c92:	469f      	mov	pc, r3
 8000c94:	46b2      	mov	sl, r6
 8000c96:	9b00      	ldr	r3, [sp, #0]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d016      	beq.n	8000cca <__aeabi_ddiv+0xca>
 8000c9c:	2b03      	cmp	r3, #3
 8000c9e:	d100      	bne.n	8000ca2 <__aeabi_ddiv+0xa2>
 8000ca0:	e28e      	b.n	80011c0 <__aeabi_ddiv+0x5c0>
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d000      	beq.n	8000ca8 <__aeabi_ddiv+0xa8>
 8000ca6:	e0d9      	b.n	8000e5c <__aeabi_ddiv+0x25c>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	2400      	movs	r4, #0
 8000cac:	2500      	movs	r5, #0
 8000cae:	4652      	mov	r2, sl
 8000cb0:	051b      	lsls	r3, r3, #20
 8000cb2:	4323      	orrs	r3, r4
 8000cb4:	07d2      	lsls	r2, r2, #31
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	0028      	movs	r0, r5
 8000cba:	0019      	movs	r1, r3
 8000cbc:	b005      	add	sp, #20
 8000cbe:	bcf0      	pop	{r4, r5, r6, r7}
 8000cc0:	46bb      	mov	fp, r7
 8000cc2:	46b2      	mov	sl, r6
 8000cc4:	46a9      	mov	r9, r5
 8000cc6:	46a0      	mov	r8, r4
 8000cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cca:	2400      	movs	r4, #0
 8000ccc:	2500      	movs	r5, #0
 8000cce:	4baa      	ldr	r3, [pc, #680]	; (8000f78 <__aeabi_ddiv+0x378>)
 8000cd0:	e7ed      	b.n	8000cae <__aeabi_ddiv+0xae>
 8000cd2:	46ba      	mov	sl, r7
 8000cd4:	46a0      	mov	r8, r4
 8000cd6:	0015      	movs	r5, r2
 8000cd8:	9000      	str	r0, [sp, #0]
 8000cda:	e7dc      	b.n	8000c96 <__aeabi_ddiv+0x96>
 8000cdc:	4544      	cmp	r4, r8
 8000cde:	d200      	bcs.n	8000ce2 <__aeabi_ddiv+0xe2>
 8000ce0:	e1c7      	b.n	8001072 <__aeabi_ddiv+0x472>
 8000ce2:	d100      	bne.n	8000ce6 <__aeabi_ddiv+0xe6>
 8000ce4:	e1c2      	b.n	800106c <__aeabi_ddiv+0x46c>
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	425b      	negs	r3, r3
 8000cea:	469c      	mov	ip, r3
 8000cec:	002e      	movs	r6, r5
 8000cee:	4640      	mov	r0, r8
 8000cf0:	2500      	movs	r5, #0
 8000cf2:	44e3      	add	fp, ip
 8000cf4:	0223      	lsls	r3, r4, #8
 8000cf6:	0e14      	lsrs	r4, r2, #24
 8000cf8:	431c      	orrs	r4, r3
 8000cfa:	0c1b      	lsrs	r3, r3, #16
 8000cfc:	4699      	mov	r9, r3
 8000cfe:	0423      	lsls	r3, r4, #16
 8000d00:	0c1f      	lsrs	r7, r3, #16
 8000d02:	0212      	lsls	r2, r2, #8
 8000d04:	4649      	mov	r1, r9
 8000d06:	9200      	str	r2, [sp, #0]
 8000d08:	9701      	str	r7, [sp, #4]
 8000d0a:	f7ff fa9f 	bl	800024c <__aeabi_uidivmod>
 8000d0e:	0002      	movs	r2, r0
 8000d10:	437a      	muls	r2, r7
 8000d12:	040b      	lsls	r3, r1, #16
 8000d14:	0c31      	lsrs	r1, r6, #16
 8000d16:	4680      	mov	r8, r0
 8000d18:	4319      	orrs	r1, r3
 8000d1a:	428a      	cmp	r2, r1
 8000d1c:	d907      	bls.n	8000d2e <__aeabi_ddiv+0x12e>
 8000d1e:	2301      	movs	r3, #1
 8000d20:	425b      	negs	r3, r3
 8000d22:	469c      	mov	ip, r3
 8000d24:	1909      	adds	r1, r1, r4
 8000d26:	44e0      	add	r8, ip
 8000d28:	428c      	cmp	r4, r1
 8000d2a:	d800      	bhi.n	8000d2e <__aeabi_ddiv+0x12e>
 8000d2c:	e207      	b.n	800113e <__aeabi_ddiv+0x53e>
 8000d2e:	1a88      	subs	r0, r1, r2
 8000d30:	4649      	mov	r1, r9
 8000d32:	f7ff fa8b 	bl	800024c <__aeabi_uidivmod>
 8000d36:	0409      	lsls	r1, r1, #16
 8000d38:	468c      	mov	ip, r1
 8000d3a:	0431      	lsls	r1, r6, #16
 8000d3c:	4666      	mov	r6, ip
 8000d3e:	9a01      	ldr	r2, [sp, #4]
 8000d40:	0c09      	lsrs	r1, r1, #16
 8000d42:	4342      	muls	r2, r0
 8000d44:	0003      	movs	r3, r0
 8000d46:	4331      	orrs	r1, r6
 8000d48:	428a      	cmp	r2, r1
 8000d4a:	d904      	bls.n	8000d56 <__aeabi_ddiv+0x156>
 8000d4c:	1909      	adds	r1, r1, r4
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	428c      	cmp	r4, r1
 8000d52:	d800      	bhi.n	8000d56 <__aeabi_ddiv+0x156>
 8000d54:	e1ed      	b.n	8001132 <__aeabi_ddiv+0x532>
 8000d56:	1a88      	subs	r0, r1, r2
 8000d58:	4642      	mov	r2, r8
 8000d5a:	0412      	lsls	r2, r2, #16
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	4690      	mov	r8, r2
 8000d60:	4641      	mov	r1, r8
 8000d62:	9b00      	ldr	r3, [sp, #0]
 8000d64:	040e      	lsls	r6, r1, #16
 8000d66:	0c1b      	lsrs	r3, r3, #16
 8000d68:	001f      	movs	r7, r3
 8000d6a:	9302      	str	r3, [sp, #8]
 8000d6c:	9b00      	ldr	r3, [sp, #0]
 8000d6e:	0c36      	lsrs	r6, r6, #16
 8000d70:	041b      	lsls	r3, r3, #16
 8000d72:	0c19      	lsrs	r1, r3, #16
 8000d74:	000b      	movs	r3, r1
 8000d76:	4373      	muls	r3, r6
 8000d78:	0c12      	lsrs	r2, r2, #16
 8000d7a:	437e      	muls	r6, r7
 8000d7c:	9103      	str	r1, [sp, #12]
 8000d7e:	4351      	muls	r1, r2
 8000d80:	437a      	muls	r2, r7
 8000d82:	0c1f      	lsrs	r7, r3, #16
 8000d84:	46bc      	mov	ip, r7
 8000d86:	1876      	adds	r6, r6, r1
 8000d88:	4466      	add	r6, ip
 8000d8a:	42b1      	cmp	r1, r6
 8000d8c:	d903      	bls.n	8000d96 <__aeabi_ddiv+0x196>
 8000d8e:	2180      	movs	r1, #128	; 0x80
 8000d90:	0249      	lsls	r1, r1, #9
 8000d92:	468c      	mov	ip, r1
 8000d94:	4462      	add	r2, ip
 8000d96:	0c31      	lsrs	r1, r6, #16
 8000d98:	188a      	adds	r2, r1, r2
 8000d9a:	0431      	lsls	r1, r6, #16
 8000d9c:	041e      	lsls	r6, r3, #16
 8000d9e:	0c36      	lsrs	r6, r6, #16
 8000da0:	198e      	adds	r6, r1, r6
 8000da2:	4290      	cmp	r0, r2
 8000da4:	d302      	bcc.n	8000dac <__aeabi_ddiv+0x1ac>
 8000da6:	d112      	bne.n	8000dce <__aeabi_ddiv+0x1ce>
 8000da8:	42b5      	cmp	r5, r6
 8000daa:	d210      	bcs.n	8000dce <__aeabi_ddiv+0x1ce>
 8000dac:	4643      	mov	r3, r8
 8000dae:	1e59      	subs	r1, r3, #1
 8000db0:	9b00      	ldr	r3, [sp, #0]
 8000db2:	469c      	mov	ip, r3
 8000db4:	4465      	add	r5, ip
 8000db6:	001f      	movs	r7, r3
 8000db8:	429d      	cmp	r5, r3
 8000dba:	419b      	sbcs	r3, r3
 8000dbc:	425b      	negs	r3, r3
 8000dbe:	191b      	adds	r3, r3, r4
 8000dc0:	18c0      	adds	r0, r0, r3
 8000dc2:	4284      	cmp	r4, r0
 8000dc4:	d200      	bcs.n	8000dc8 <__aeabi_ddiv+0x1c8>
 8000dc6:	e1a0      	b.n	800110a <__aeabi_ddiv+0x50a>
 8000dc8:	d100      	bne.n	8000dcc <__aeabi_ddiv+0x1cc>
 8000dca:	e19b      	b.n	8001104 <__aeabi_ddiv+0x504>
 8000dcc:	4688      	mov	r8, r1
 8000dce:	1bae      	subs	r6, r5, r6
 8000dd0:	42b5      	cmp	r5, r6
 8000dd2:	41ad      	sbcs	r5, r5
 8000dd4:	1a80      	subs	r0, r0, r2
 8000dd6:	426d      	negs	r5, r5
 8000dd8:	1b40      	subs	r0, r0, r5
 8000dda:	4284      	cmp	r4, r0
 8000ddc:	d100      	bne.n	8000de0 <__aeabi_ddiv+0x1e0>
 8000dde:	e1d5      	b.n	800118c <__aeabi_ddiv+0x58c>
 8000de0:	4649      	mov	r1, r9
 8000de2:	f7ff fa33 	bl	800024c <__aeabi_uidivmod>
 8000de6:	9a01      	ldr	r2, [sp, #4]
 8000de8:	040b      	lsls	r3, r1, #16
 8000dea:	4342      	muls	r2, r0
 8000dec:	0c31      	lsrs	r1, r6, #16
 8000dee:	0005      	movs	r5, r0
 8000df0:	4319      	orrs	r1, r3
 8000df2:	428a      	cmp	r2, r1
 8000df4:	d900      	bls.n	8000df8 <__aeabi_ddiv+0x1f8>
 8000df6:	e16c      	b.n	80010d2 <__aeabi_ddiv+0x4d2>
 8000df8:	1a88      	subs	r0, r1, r2
 8000dfa:	4649      	mov	r1, r9
 8000dfc:	f7ff fa26 	bl	800024c <__aeabi_uidivmod>
 8000e00:	9a01      	ldr	r2, [sp, #4]
 8000e02:	0436      	lsls	r6, r6, #16
 8000e04:	4342      	muls	r2, r0
 8000e06:	0409      	lsls	r1, r1, #16
 8000e08:	0c36      	lsrs	r6, r6, #16
 8000e0a:	0003      	movs	r3, r0
 8000e0c:	430e      	orrs	r6, r1
 8000e0e:	42b2      	cmp	r2, r6
 8000e10:	d900      	bls.n	8000e14 <__aeabi_ddiv+0x214>
 8000e12:	e153      	b.n	80010bc <__aeabi_ddiv+0x4bc>
 8000e14:	9803      	ldr	r0, [sp, #12]
 8000e16:	1ab6      	subs	r6, r6, r2
 8000e18:	0002      	movs	r2, r0
 8000e1a:	042d      	lsls	r5, r5, #16
 8000e1c:	431d      	orrs	r5, r3
 8000e1e:	9f02      	ldr	r7, [sp, #8]
 8000e20:	042b      	lsls	r3, r5, #16
 8000e22:	0c1b      	lsrs	r3, r3, #16
 8000e24:	435a      	muls	r2, r3
 8000e26:	437b      	muls	r3, r7
 8000e28:	469c      	mov	ip, r3
 8000e2a:	0c29      	lsrs	r1, r5, #16
 8000e2c:	4348      	muls	r0, r1
 8000e2e:	0c13      	lsrs	r3, r2, #16
 8000e30:	4484      	add	ip, r0
 8000e32:	4463      	add	r3, ip
 8000e34:	4379      	muls	r1, r7
 8000e36:	4298      	cmp	r0, r3
 8000e38:	d903      	bls.n	8000e42 <__aeabi_ddiv+0x242>
 8000e3a:	2080      	movs	r0, #128	; 0x80
 8000e3c:	0240      	lsls	r0, r0, #9
 8000e3e:	4684      	mov	ip, r0
 8000e40:	4461      	add	r1, ip
 8000e42:	0c18      	lsrs	r0, r3, #16
 8000e44:	0412      	lsls	r2, r2, #16
 8000e46:	041b      	lsls	r3, r3, #16
 8000e48:	0c12      	lsrs	r2, r2, #16
 8000e4a:	1841      	adds	r1, r0, r1
 8000e4c:	189b      	adds	r3, r3, r2
 8000e4e:	428e      	cmp	r6, r1
 8000e50:	d200      	bcs.n	8000e54 <__aeabi_ddiv+0x254>
 8000e52:	e0ff      	b.n	8001054 <__aeabi_ddiv+0x454>
 8000e54:	d100      	bne.n	8000e58 <__aeabi_ddiv+0x258>
 8000e56:	e0fa      	b.n	800104e <__aeabi_ddiv+0x44e>
 8000e58:	2301      	movs	r3, #1
 8000e5a:	431d      	orrs	r5, r3
 8000e5c:	4a49      	ldr	r2, [pc, #292]	; (8000f84 <__aeabi_ddiv+0x384>)
 8000e5e:	445a      	add	r2, fp
 8000e60:	2a00      	cmp	r2, #0
 8000e62:	dc00      	bgt.n	8000e66 <__aeabi_ddiv+0x266>
 8000e64:	e0aa      	b.n	8000fbc <__aeabi_ddiv+0x3bc>
 8000e66:	076b      	lsls	r3, r5, #29
 8000e68:	d000      	beq.n	8000e6c <__aeabi_ddiv+0x26c>
 8000e6a:	e13d      	b.n	80010e8 <__aeabi_ddiv+0x4e8>
 8000e6c:	08ed      	lsrs	r5, r5, #3
 8000e6e:	4643      	mov	r3, r8
 8000e70:	01db      	lsls	r3, r3, #7
 8000e72:	d506      	bpl.n	8000e82 <__aeabi_ddiv+0x282>
 8000e74:	4642      	mov	r2, r8
 8000e76:	4b44      	ldr	r3, [pc, #272]	; (8000f88 <__aeabi_ddiv+0x388>)
 8000e78:	401a      	ands	r2, r3
 8000e7a:	4690      	mov	r8, r2
 8000e7c:	2280      	movs	r2, #128	; 0x80
 8000e7e:	00d2      	lsls	r2, r2, #3
 8000e80:	445a      	add	r2, fp
 8000e82:	4b42      	ldr	r3, [pc, #264]	; (8000f8c <__aeabi_ddiv+0x38c>)
 8000e84:	429a      	cmp	r2, r3
 8000e86:	dd00      	ble.n	8000e8a <__aeabi_ddiv+0x28a>
 8000e88:	e71f      	b.n	8000cca <__aeabi_ddiv+0xca>
 8000e8a:	4643      	mov	r3, r8
 8000e8c:	075b      	lsls	r3, r3, #29
 8000e8e:	431d      	orrs	r5, r3
 8000e90:	4643      	mov	r3, r8
 8000e92:	0552      	lsls	r2, r2, #21
 8000e94:	025c      	lsls	r4, r3, #9
 8000e96:	0b24      	lsrs	r4, r4, #12
 8000e98:	0d53      	lsrs	r3, r2, #21
 8000e9a:	e708      	b.n	8000cae <__aeabi_ddiv+0xae>
 8000e9c:	4652      	mov	r2, sl
 8000e9e:	4322      	orrs	r2, r4
 8000ea0:	d100      	bne.n	8000ea4 <__aeabi_ddiv+0x2a4>
 8000ea2:	e07b      	b.n	8000f9c <__aeabi_ddiv+0x39c>
 8000ea4:	2c00      	cmp	r4, #0
 8000ea6:	d100      	bne.n	8000eaa <__aeabi_ddiv+0x2aa>
 8000ea8:	e0fa      	b.n	80010a0 <__aeabi_ddiv+0x4a0>
 8000eaa:	0020      	movs	r0, r4
 8000eac:	f001 f9da 	bl	8002264 <__clzsi2>
 8000eb0:	0002      	movs	r2, r0
 8000eb2:	3a0b      	subs	r2, #11
 8000eb4:	231d      	movs	r3, #29
 8000eb6:	0001      	movs	r1, r0
 8000eb8:	1a9b      	subs	r3, r3, r2
 8000eba:	4652      	mov	r2, sl
 8000ebc:	3908      	subs	r1, #8
 8000ebe:	40da      	lsrs	r2, r3
 8000ec0:	408c      	lsls	r4, r1
 8000ec2:	4314      	orrs	r4, r2
 8000ec4:	4652      	mov	r2, sl
 8000ec6:	408a      	lsls	r2, r1
 8000ec8:	4b31      	ldr	r3, [pc, #196]	; (8000f90 <__aeabi_ddiv+0x390>)
 8000eca:	4458      	add	r0, fp
 8000ecc:	469b      	mov	fp, r3
 8000ece:	4483      	add	fp, r0
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	e6d5      	b.n	8000c80 <__aeabi_ddiv+0x80>
 8000ed4:	464b      	mov	r3, r9
 8000ed6:	4323      	orrs	r3, r4
 8000ed8:	4698      	mov	r8, r3
 8000eda:	d044      	beq.n	8000f66 <__aeabi_ddiv+0x366>
 8000edc:	2c00      	cmp	r4, #0
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_ddiv+0x2e2>
 8000ee0:	e0ce      	b.n	8001080 <__aeabi_ddiv+0x480>
 8000ee2:	0020      	movs	r0, r4
 8000ee4:	f001 f9be 	bl	8002264 <__clzsi2>
 8000ee8:	0001      	movs	r1, r0
 8000eea:	0002      	movs	r2, r0
 8000eec:	390b      	subs	r1, #11
 8000eee:	231d      	movs	r3, #29
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	0010      	movs	r0, r2
 8000ef6:	40d9      	lsrs	r1, r3
 8000ef8:	3808      	subs	r0, #8
 8000efa:	4084      	lsls	r4, r0
 8000efc:	000b      	movs	r3, r1
 8000efe:	464d      	mov	r5, r9
 8000f00:	4323      	orrs	r3, r4
 8000f02:	4698      	mov	r8, r3
 8000f04:	4085      	lsls	r5, r0
 8000f06:	4823      	ldr	r0, [pc, #140]	; (8000f94 <__aeabi_ddiv+0x394>)
 8000f08:	1a83      	subs	r3, r0, r2
 8000f0a:	469b      	mov	fp, r3
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	4699      	mov	r9, r3
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	e69a      	b.n	8000c4a <__aeabi_ddiv+0x4a>
 8000f14:	464b      	mov	r3, r9
 8000f16:	4323      	orrs	r3, r4
 8000f18:	4698      	mov	r8, r3
 8000f1a:	d11d      	bne.n	8000f58 <__aeabi_ddiv+0x358>
 8000f1c:	2308      	movs	r3, #8
 8000f1e:	4699      	mov	r9, r3
 8000f20:	3b06      	subs	r3, #6
 8000f22:	2500      	movs	r5, #0
 8000f24:	4683      	mov	fp, r0
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	e68f      	b.n	8000c4a <__aeabi_ddiv+0x4a>
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	4322      	orrs	r2, r4
 8000f2e:	d109      	bne.n	8000f44 <__aeabi_ddiv+0x344>
 8000f30:	2302      	movs	r3, #2
 8000f32:	4649      	mov	r1, r9
 8000f34:	4319      	orrs	r1, r3
 8000f36:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <__aeabi_ddiv+0x398>)
 8000f38:	4689      	mov	r9, r1
 8000f3a:	469c      	mov	ip, r3
 8000f3c:	2400      	movs	r4, #0
 8000f3e:	2002      	movs	r0, #2
 8000f40:	44e3      	add	fp, ip
 8000f42:	e69d      	b.n	8000c80 <__aeabi_ddiv+0x80>
 8000f44:	2303      	movs	r3, #3
 8000f46:	464a      	mov	r2, r9
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <__aeabi_ddiv+0x398>)
 8000f4c:	4691      	mov	r9, r2
 8000f4e:	469c      	mov	ip, r3
 8000f50:	4652      	mov	r2, sl
 8000f52:	2003      	movs	r0, #3
 8000f54:	44e3      	add	fp, ip
 8000f56:	e693      	b.n	8000c80 <__aeabi_ddiv+0x80>
 8000f58:	230c      	movs	r3, #12
 8000f5a:	4699      	mov	r9, r3
 8000f5c:	3b09      	subs	r3, #9
 8000f5e:	46a0      	mov	r8, r4
 8000f60:	4683      	mov	fp, r0
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	e671      	b.n	8000c4a <__aeabi_ddiv+0x4a>
 8000f66:	2304      	movs	r3, #4
 8000f68:	4699      	mov	r9, r3
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	469b      	mov	fp, r3
 8000f6e:	3301      	adds	r3, #1
 8000f70:	2500      	movs	r5, #0
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	e669      	b.n	8000c4a <__aeabi_ddiv+0x4a>
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	000007ff 	.word	0x000007ff
 8000f7c:	fffffc01 	.word	0xfffffc01
 8000f80:	0800aabc 	.word	0x0800aabc
 8000f84:	000003ff 	.word	0x000003ff
 8000f88:	feffffff 	.word	0xfeffffff
 8000f8c:	000007fe 	.word	0x000007fe
 8000f90:	000003f3 	.word	0x000003f3
 8000f94:	fffffc0d 	.word	0xfffffc0d
 8000f98:	fffff801 	.word	0xfffff801
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	4319      	orrs	r1, r3
 8000fa2:	4689      	mov	r9, r1
 8000fa4:	2400      	movs	r4, #0
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	e66a      	b.n	8000c80 <__aeabi_ddiv+0x80>
 8000faa:	2300      	movs	r3, #0
 8000fac:	2480      	movs	r4, #128	; 0x80
 8000fae:	469a      	mov	sl, r3
 8000fb0:	2500      	movs	r5, #0
 8000fb2:	4b8a      	ldr	r3, [pc, #552]	; (80011dc <__aeabi_ddiv+0x5dc>)
 8000fb4:	0324      	lsls	r4, r4, #12
 8000fb6:	e67a      	b.n	8000cae <__aeabi_ddiv+0xae>
 8000fb8:	2501      	movs	r5, #1
 8000fba:	426d      	negs	r5, r5
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	1a9b      	subs	r3, r3, r2
 8000fc0:	2b38      	cmp	r3, #56	; 0x38
 8000fc2:	dd00      	ble.n	8000fc6 <__aeabi_ddiv+0x3c6>
 8000fc4:	e670      	b.n	8000ca8 <__aeabi_ddiv+0xa8>
 8000fc6:	2b1f      	cmp	r3, #31
 8000fc8:	dc00      	bgt.n	8000fcc <__aeabi_ddiv+0x3cc>
 8000fca:	e0bf      	b.n	800114c <__aeabi_ddiv+0x54c>
 8000fcc:	211f      	movs	r1, #31
 8000fce:	4249      	negs	r1, r1
 8000fd0:	1a8a      	subs	r2, r1, r2
 8000fd2:	4641      	mov	r1, r8
 8000fd4:	40d1      	lsrs	r1, r2
 8000fd6:	000a      	movs	r2, r1
 8000fd8:	2b20      	cmp	r3, #32
 8000fda:	d004      	beq.n	8000fe6 <__aeabi_ddiv+0x3e6>
 8000fdc:	4641      	mov	r1, r8
 8000fde:	4b80      	ldr	r3, [pc, #512]	; (80011e0 <__aeabi_ddiv+0x5e0>)
 8000fe0:	445b      	add	r3, fp
 8000fe2:	4099      	lsls	r1, r3
 8000fe4:	430d      	orrs	r5, r1
 8000fe6:	1e6b      	subs	r3, r5, #1
 8000fe8:	419d      	sbcs	r5, r3
 8000fea:	2307      	movs	r3, #7
 8000fec:	432a      	orrs	r2, r5
 8000fee:	001d      	movs	r5, r3
 8000ff0:	2400      	movs	r4, #0
 8000ff2:	4015      	ands	r5, r2
 8000ff4:	4213      	tst	r3, r2
 8000ff6:	d100      	bne.n	8000ffa <__aeabi_ddiv+0x3fa>
 8000ff8:	e0d4      	b.n	80011a4 <__aeabi_ddiv+0x5a4>
 8000ffa:	210f      	movs	r1, #15
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	4011      	ands	r1, r2
 8001000:	2904      	cmp	r1, #4
 8001002:	d100      	bne.n	8001006 <__aeabi_ddiv+0x406>
 8001004:	e0cb      	b.n	800119e <__aeabi_ddiv+0x59e>
 8001006:	1d11      	adds	r1, r2, #4
 8001008:	4291      	cmp	r1, r2
 800100a:	4192      	sbcs	r2, r2
 800100c:	4252      	negs	r2, r2
 800100e:	189b      	adds	r3, r3, r2
 8001010:	000a      	movs	r2, r1
 8001012:	0219      	lsls	r1, r3, #8
 8001014:	d400      	bmi.n	8001018 <__aeabi_ddiv+0x418>
 8001016:	e0c2      	b.n	800119e <__aeabi_ddiv+0x59e>
 8001018:	2301      	movs	r3, #1
 800101a:	2400      	movs	r4, #0
 800101c:	2500      	movs	r5, #0
 800101e:	e646      	b.n	8000cae <__aeabi_ddiv+0xae>
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	4641      	mov	r1, r8
 8001024:	031b      	lsls	r3, r3, #12
 8001026:	4219      	tst	r1, r3
 8001028:	d008      	beq.n	800103c <__aeabi_ddiv+0x43c>
 800102a:	421c      	tst	r4, r3
 800102c:	d106      	bne.n	800103c <__aeabi_ddiv+0x43c>
 800102e:	431c      	orrs	r4, r3
 8001030:	0324      	lsls	r4, r4, #12
 8001032:	46ba      	mov	sl, r7
 8001034:	0015      	movs	r5, r2
 8001036:	4b69      	ldr	r3, [pc, #420]	; (80011dc <__aeabi_ddiv+0x5dc>)
 8001038:	0b24      	lsrs	r4, r4, #12
 800103a:	e638      	b.n	8000cae <__aeabi_ddiv+0xae>
 800103c:	2480      	movs	r4, #128	; 0x80
 800103e:	4643      	mov	r3, r8
 8001040:	0324      	lsls	r4, r4, #12
 8001042:	431c      	orrs	r4, r3
 8001044:	0324      	lsls	r4, r4, #12
 8001046:	46b2      	mov	sl, r6
 8001048:	4b64      	ldr	r3, [pc, #400]	; (80011dc <__aeabi_ddiv+0x5dc>)
 800104a:	0b24      	lsrs	r4, r4, #12
 800104c:	e62f      	b.n	8000cae <__aeabi_ddiv+0xae>
 800104e:	2b00      	cmp	r3, #0
 8001050:	d100      	bne.n	8001054 <__aeabi_ddiv+0x454>
 8001052:	e703      	b.n	8000e5c <__aeabi_ddiv+0x25c>
 8001054:	19a6      	adds	r6, r4, r6
 8001056:	1e68      	subs	r0, r5, #1
 8001058:	42a6      	cmp	r6, r4
 800105a:	d200      	bcs.n	800105e <__aeabi_ddiv+0x45e>
 800105c:	e08d      	b.n	800117a <__aeabi_ddiv+0x57a>
 800105e:	428e      	cmp	r6, r1
 8001060:	d200      	bcs.n	8001064 <__aeabi_ddiv+0x464>
 8001062:	e0a3      	b.n	80011ac <__aeabi_ddiv+0x5ac>
 8001064:	d100      	bne.n	8001068 <__aeabi_ddiv+0x468>
 8001066:	e0b3      	b.n	80011d0 <__aeabi_ddiv+0x5d0>
 8001068:	0005      	movs	r5, r0
 800106a:	e6f5      	b.n	8000e58 <__aeabi_ddiv+0x258>
 800106c:	42aa      	cmp	r2, r5
 800106e:	d900      	bls.n	8001072 <__aeabi_ddiv+0x472>
 8001070:	e639      	b.n	8000ce6 <__aeabi_ddiv+0xe6>
 8001072:	4643      	mov	r3, r8
 8001074:	07de      	lsls	r6, r3, #31
 8001076:	0858      	lsrs	r0, r3, #1
 8001078:	086b      	lsrs	r3, r5, #1
 800107a:	431e      	orrs	r6, r3
 800107c:	07ed      	lsls	r5, r5, #31
 800107e:	e639      	b.n	8000cf4 <__aeabi_ddiv+0xf4>
 8001080:	4648      	mov	r0, r9
 8001082:	f001 f8ef 	bl	8002264 <__clzsi2>
 8001086:	0001      	movs	r1, r0
 8001088:	0002      	movs	r2, r0
 800108a:	3115      	adds	r1, #21
 800108c:	3220      	adds	r2, #32
 800108e:	291c      	cmp	r1, #28
 8001090:	dc00      	bgt.n	8001094 <__aeabi_ddiv+0x494>
 8001092:	e72c      	b.n	8000eee <__aeabi_ddiv+0x2ee>
 8001094:	464b      	mov	r3, r9
 8001096:	3808      	subs	r0, #8
 8001098:	4083      	lsls	r3, r0
 800109a:	2500      	movs	r5, #0
 800109c:	4698      	mov	r8, r3
 800109e:	e732      	b.n	8000f06 <__aeabi_ddiv+0x306>
 80010a0:	f001 f8e0 	bl	8002264 <__clzsi2>
 80010a4:	0003      	movs	r3, r0
 80010a6:	001a      	movs	r2, r3
 80010a8:	3215      	adds	r2, #21
 80010aa:	3020      	adds	r0, #32
 80010ac:	2a1c      	cmp	r2, #28
 80010ae:	dc00      	bgt.n	80010b2 <__aeabi_ddiv+0x4b2>
 80010b0:	e700      	b.n	8000eb4 <__aeabi_ddiv+0x2b4>
 80010b2:	4654      	mov	r4, sl
 80010b4:	3b08      	subs	r3, #8
 80010b6:	2200      	movs	r2, #0
 80010b8:	409c      	lsls	r4, r3
 80010ba:	e705      	b.n	8000ec8 <__aeabi_ddiv+0x2c8>
 80010bc:	1936      	adds	r6, r6, r4
 80010be:	3b01      	subs	r3, #1
 80010c0:	42b4      	cmp	r4, r6
 80010c2:	d900      	bls.n	80010c6 <__aeabi_ddiv+0x4c6>
 80010c4:	e6a6      	b.n	8000e14 <__aeabi_ddiv+0x214>
 80010c6:	42b2      	cmp	r2, r6
 80010c8:	d800      	bhi.n	80010cc <__aeabi_ddiv+0x4cc>
 80010ca:	e6a3      	b.n	8000e14 <__aeabi_ddiv+0x214>
 80010cc:	1e83      	subs	r3, r0, #2
 80010ce:	1936      	adds	r6, r6, r4
 80010d0:	e6a0      	b.n	8000e14 <__aeabi_ddiv+0x214>
 80010d2:	1909      	adds	r1, r1, r4
 80010d4:	3d01      	subs	r5, #1
 80010d6:	428c      	cmp	r4, r1
 80010d8:	d900      	bls.n	80010dc <__aeabi_ddiv+0x4dc>
 80010da:	e68d      	b.n	8000df8 <__aeabi_ddiv+0x1f8>
 80010dc:	428a      	cmp	r2, r1
 80010de:	d800      	bhi.n	80010e2 <__aeabi_ddiv+0x4e2>
 80010e0:	e68a      	b.n	8000df8 <__aeabi_ddiv+0x1f8>
 80010e2:	1e85      	subs	r5, r0, #2
 80010e4:	1909      	adds	r1, r1, r4
 80010e6:	e687      	b.n	8000df8 <__aeabi_ddiv+0x1f8>
 80010e8:	230f      	movs	r3, #15
 80010ea:	402b      	ands	r3, r5
 80010ec:	2b04      	cmp	r3, #4
 80010ee:	d100      	bne.n	80010f2 <__aeabi_ddiv+0x4f2>
 80010f0:	e6bc      	b.n	8000e6c <__aeabi_ddiv+0x26c>
 80010f2:	2305      	movs	r3, #5
 80010f4:	425b      	negs	r3, r3
 80010f6:	42ab      	cmp	r3, r5
 80010f8:	419b      	sbcs	r3, r3
 80010fa:	3504      	adds	r5, #4
 80010fc:	425b      	negs	r3, r3
 80010fe:	08ed      	lsrs	r5, r5, #3
 8001100:	4498      	add	r8, r3
 8001102:	e6b4      	b.n	8000e6e <__aeabi_ddiv+0x26e>
 8001104:	42af      	cmp	r7, r5
 8001106:	d900      	bls.n	800110a <__aeabi_ddiv+0x50a>
 8001108:	e660      	b.n	8000dcc <__aeabi_ddiv+0x1cc>
 800110a:	4282      	cmp	r2, r0
 800110c:	d804      	bhi.n	8001118 <__aeabi_ddiv+0x518>
 800110e:	d000      	beq.n	8001112 <__aeabi_ddiv+0x512>
 8001110:	e65c      	b.n	8000dcc <__aeabi_ddiv+0x1cc>
 8001112:	42ae      	cmp	r6, r5
 8001114:	d800      	bhi.n	8001118 <__aeabi_ddiv+0x518>
 8001116:	e659      	b.n	8000dcc <__aeabi_ddiv+0x1cc>
 8001118:	2302      	movs	r3, #2
 800111a:	425b      	negs	r3, r3
 800111c:	469c      	mov	ip, r3
 800111e:	9b00      	ldr	r3, [sp, #0]
 8001120:	44e0      	add	r8, ip
 8001122:	469c      	mov	ip, r3
 8001124:	4465      	add	r5, ip
 8001126:	429d      	cmp	r5, r3
 8001128:	419b      	sbcs	r3, r3
 800112a:	425b      	negs	r3, r3
 800112c:	191b      	adds	r3, r3, r4
 800112e:	18c0      	adds	r0, r0, r3
 8001130:	e64d      	b.n	8000dce <__aeabi_ddiv+0x1ce>
 8001132:	428a      	cmp	r2, r1
 8001134:	d800      	bhi.n	8001138 <__aeabi_ddiv+0x538>
 8001136:	e60e      	b.n	8000d56 <__aeabi_ddiv+0x156>
 8001138:	1e83      	subs	r3, r0, #2
 800113a:	1909      	adds	r1, r1, r4
 800113c:	e60b      	b.n	8000d56 <__aeabi_ddiv+0x156>
 800113e:	428a      	cmp	r2, r1
 8001140:	d800      	bhi.n	8001144 <__aeabi_ddiv+0x544>
 8001142:	e5f4      	b.n	8000d2e <__aeabi_ddiv+0x12e>
 8001144:	1e83      	subs	r3, r0, #2
 8001146:	4698      	mov	r8, r3
 8001148:	1909      	adds	r1, r1, r4
 800114a:	e5f0      	b.n	8000d2e <__aeabi_ddiv+0x12e>
 800114c:	4925      	ldr	r1, [pc, #148]	; (80011e4 <__aeabi_ddiv+0x5e4>)
 800114e:	0028      	movs	r0, r5
 8001150:	4459      	add	r1, fp
 8001152:	408d      	lsls	r5, r1
 8001154:	4642      	mov	r2, r8
 8001156:	408a      	lsls	r2, r1
 8001158:	1e69      	subs	r1, r5, #1
 800115a:	418d      	sbcs	r5, r1
 800115c:	4641      	mov	r1, r8
 800115e:	40d8      	lsrs	r0, r3
 8001160:	40d9      	lsrs	r1, r3
 8001162:	4302      	orrs	r2, r0
 8001164:	432a      	orrs	r2, r5
 8001166:	000b      	movs	r3, r1
 8001168:	0751      	lsls	r1, r2, #29
 800116a:	d100      	bne.n	800116e <__aeabi_ddiv+0x56e>
 800116c:	e751      	b.n	8001012 <__aeabi_ddiv+0x412>
 800116e:	210f      	movs	r1, #15
 8001170:	4011      	ands	r1, r2
 8001172:	2904      	cmp	r1, #4
 8001174:	d000      	beq.n	8001178 <__aeabi_ddiv+0x578>
 8001176:	e746      	b.n	8001006 <__aeabi_ddiv+0x406>
 8001178:	e74b      	b.n	8001012 <__aeabi_ddiv+0x412>
 800117a:	0005      	movs	r5, r0
 800117c:	428e      	cmp	r6, r1
 800117e:	d000      	beq.n	8001182 <__aeabi_ddiv+0x582>
 8001180:	e66a      	b.n	8000e58 <__aeabi_ddiv+0x258>
 8001182:	9a00      	ldr	r2, [sp, #0]
 8001184:	4293      	cmp	r3, r2
 8001186:	d000      	beq.n	800118a <__aeabi_ddiv+0x58a>
 8001188:	e666      	b.n	8000e58 <__aeabi_ddiv+0x258>
 800118a:	e667      	b.n	8000e5c <__aeabi_ddiv+0x25c>
 800118c:	4a16      	ldr	r2, [pc, #88]	; (80011e8 <__aeabi_ddiv+0x5e8>)
 800118e:	445a      	add	r2, fp
 8001190:	2a00      	cmp	r2, #0
 8001192:	dc00      	bgt.n	8001196 <__aeabi_ddiv+0x596>
 8001194:	e710      	b.n	8000fb8 <__aeabi_ddiv+0x3b8>
 8001196:	2301      	movs	r3, #1
 8001198:	2500      	movs	r5, #0
 800119a:	4498      	add	r8, r3
 800119c:	e667      	b.n	8000e6e <__aeabi_ddiv+0x26e>
 800119e:	075d      	lsls	r5, r3, #29
 80011a0:	025b      	lsls	r3, r3, #9
 80011a2:	0b1c      	lsrs	r4, r3, #12
 80011a4:	08d2      	lsrs	r2, r2, #3
 80011a6:	2300      	movs	r3, #0
 80011a8:	4315      	orrs	r5, r2
 80011aa:	e580      	b.n	8000cae <__aeabi_ddiv+0xae>
 80011ac:	9800      	ldr	r0, [sp, #0]
 80011ae:	3d02      	subs	r5, #2
 80011b0:	0042      	lsls	r2, r0, #1
 80011b2:	4282      	cmp	r2, r0
 80011b4:	41bf      	sbcs	r7, r7
 80011b6:	427f      	negs	r7, r7
 80011b8:	193c      	adds	r4, r7, r4
 80011ba:	1936      	adds	r6, r6, r4
 80011bc:	9200      	str	r2, [sp, #0]
 80011be:	e7dd      	b.n	800117c <__aeabi_ddiv+0x57c>
 80011c0:	2480      	movs	r4, #128	; 0x80
 80011c2:	4643      	mov	r3, r8
 80011c4:	0324      	lsls	r4, r4, #12
 80011c6:	431c      	orrs	r4, r3
 80011c8:	0324      	lsls	r4, r4, #12
 80011ca:	4b04      	ldr	r3, [pc, #16]	; (80011dc <__aeabi_ddiv+0x5dc>)
 80011cc:	0b24      	lsrs	r4, r4, #12
 80011ce:	e56e      	b.n	8000cae <__aeabi_ddiv+0xae>
 80011d0:	9a00      	ldr	r2, [sp, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d3ea      	bcc.n	80011ac <__aeabi_ddiv+0x5ac>
 80011d6:	0005      	movs	r5, r0
 80011d8:	e7d3      	b.n	8001182 <__aeabi_ddiv+0x582>
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	000007ff 	.word	0x000007ff
 80011e0:	0000043e 	.word	0x0000043e
 80011e4:	0000041e 	.word	0x0000041e
 80011e8:	000003ff 	.word	0x000003ff

080011ec <__eqdf2>:
 80011ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ee:	464e      	mov	r6, r9
 80011f0:	4645      	mov	r5, r8
 80011f2:	46de      	mov	lr, fp
 80011f4:	4657      	mov	r7, sl
 80011f6:	4690      	mov	r8, r2
 80011f8:	b5e0      	push	{r5, r6, r7, lr}
 80011fa:	0017      	movs	r7, r2
 80011fc:	031a      	lsls	r2, r3, #12
 80011fe:	0b12      	lsrs	r2, r2, #12
 8001200:	0005      	movs	r5, r0
 8001202:	4684      	mov	ip, r0
 8001204:	4819      	ldr	r0, [pc, #100]	; (800126c <__eqdf2+0x80>)
 8001206:	030e      	lsls	r6, r1, #12
 8001208:	004c      	lsls	r4, r1, #1
 800120a:	4691      	mov	r9, r2
 800120c:	005a      	lsls	r2, r3, #1
 800120e:	0fdb      	lsrs	r3, r3, #31
 8001210:	469b      	mov	fp, r3
 8001212:	0b36      	lsrs	r6, r6, #12
 8001214:	0d64      	lsrs	r4, r4, #21
 8001216:	0fc9      	lsrs	r1, r1, #31
 8001218:	0d52      	lsrs	r2, r2, #21
 800121a:	4284      	cmp	r4, r0
 800121c:	d019      	beq.n	8001252 <__eqdf2+0x66>
 800121e:	4282      	cmp	r2, r0
 8001220:	d010      	beq.n	8001244 <__eqdf2+0x58>
 8001222:	2001      	movs	r0, #1
 8001224:	4294      	cmp	r4, r2
 8001226:	d10e      	bne.n	8001246 <__eqdf2+0x5a>
 8001228:	454e      	cmp	r6, r9
 800122a:	d10c      	bne.n	8001246 <__eqdf2+0x5a>
 800122c:	2001      	movs	r0, #1
 800122e:	45c4      	cmp	ip, r8
 8001230:	d109      	bne.n	8001246 <__eqdf2+0x5a>
 8001232:	4559      	cmp	r1, fp
 8001234:	d017      	beq.n	8001266 <__eqdf2+0x7a>
 8001236:	2c00      	cmp	r4, #0
 8001238:	d105      	bne.n	8001246 <__eqdf2+0x5a>
 800123a:	0030      	movs	r0, r6
 800123c:	4328      	orrs	r0, r5
 800123e:	1e43      	subs	r3, r0, #1
 8001240:	4198      	sbcs	r0, r3
 8001242:	e000      	b.n	8001246 <__eqdf2+0x5a>
 8001244:	2001      	movs	r0, #1
 8001246:	bcf0      	pop	{r4, r5, r6, r7}
 8001248:	46bb      	mov	fp, r7
 800124a:	46b2      	mov	sl, r6
 800124c:	46a9      	mov	r9, r5
 800124e:	46a0      	mov	r8, r4
 8001250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001252:	0033      	movs	r3, r6
 8001254:	2001      	movs	r0, #1
 8001256:	432b      	orrs	r3, r5
 8001258:	d1f5      	bne.n	8001246 <__eqdf2+0x5a>
 800125a:	42a2      	cmp	r2, r4
 800125c:	d1f3      	bne.n	8001246 <__eqdf2+0x5a>
 800125e:	464b      	mov	r3, r9
 8001260:	433b      	orrs	r3, r7
 8001262:	d1f0      	bne.n	8001246 <__eqdf2+0x5a>
 8001264:	e7e2      	b.n	800122c <__eqdf2+0x40>
 8001266:	2000      	movs	r0, #0
 8001268:	e7ed      	b.n	8001246 <__eqdf2+0x5a>
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	000007ff 	.word	0x000007ff

08001270 <__gedf2>:
 8001270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001272:	4647      	mov	r7, r8
 8001274:	46ce      	mov	lr, r9
 8001276:	0004      	movs	r4, r0
 8001278:	0018      	movs	r0, r3
 800127a:	0016      	movs	r6, r2
 800127c:	031b      	lsls	r3, r3, #12
 800127e:	0b1b      	lsrs	r3, r3, #12
 8001280:	4d2d      	ldr	r5, [pc, #180]	; (8001338 <__gedf2+0xc8>)
 8001282:	004a      	lsls	r2, r1, #1
 8001284:	4699      	mov	r9, r3
 8001286:	b580      	push	{r7, lr}
 8001288:	0043      	lsls	r3, r0, #1
 800128a:	030f      	lsls	r7, r1, #12
 800128c:	46a4      	mov	ip, r4
 800128e:	46b0      	mov	r8, r6
 8001290:	0b3f      	lsrs	r7, r7, #12
 8001292:	0d52      	lsrs	r2, r2, #21
 8001294:	0fc9      	lsrs	r1, r1, #31
 8001296:	0d5b      	lsrs	r3, r3, #21
 8001298:	0fc0      	lsrs	r0, r0, #31
 800129a:	42aa      	cmp	r2, r5
 800129c:	d021      	beq.n	80012e2 <__gedf2+0x72>
 800129e:	42ab      	cmp	r3, r5
 80012a0:	d013      	beq.n	80012ca <__gedf2+0x5a>
 80012a2:	2a00      	cmp	r2, #0
 80012a4:	d122      	bne.n	80012ec <__gedf2+0x7c>
 80012a6:	433c      	orrs	r4, r7
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d102      	bne.n	80012b2 <__gedf2+0x42>
 80012ac:	464d      	mov	r5, r9
 80012ae:	432e      	orrs	r6, r5
 80012b0:	d022      	beq.n	80012f8 <__gedf2+0x88>
 80012b2:	2c00      	cmp	r4, #0
 80012b4:	d010      	beq.n	80012d8 <__gedf2+0x68>
 80012b6:	4281      	cmp	r1, r0
 80012b8:	d022      	beq.n	8001300 <__gedf2+0x90>
 80012ba:	2002      	movs	r0, #2
 80012bc:	3901      	subs	r1, #1
 80012be:	4008      	ands	r0, r1
 80012c0:	3801      	subs	r0, #1
 80012c2:	bcc0      	pop	{r6, r7}
 80012c4:	46b9      	mov	r9, r7
 80012c6:	46b0      	mov	r8, r6
 80012c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ca:	464d      	mov	r5, r9
 80012cc:	432e      	orrs	r6, r5
 80012ce:	d129      	bne.n	8001324 <__gedf2+0xb4>
 80012d0:	2a00      	cmp	r2, #0
 80012d2:	d1f0      	bne.n	80012b6 <__gedf2+0x46>
 80012d4:	433c      	orrs	r4, r7
 80012d6:	d1ee      	bne.n	80012b6 <__gedf2+0x46>
 80012d8:	2800      	cmp	r0, #0
 80012da:	d1f2      	bne.n	80012c2 <__gedf2+0x52>
 80012dc:	2001      	movs	r0, #1
 80012de:	4240      	negs	r0, r0
 80012e0:	e7ef      	b.n	80012c2 <__gedf2+0x52>
 80012e2:	003d      	movs	r5, r7
 80012e4:	4325      	orrs	r5, r4
 80012e6:	d11d      	bne.n	8001324 <__gedf2+0xb4>
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d0ee      	beq.n	80012ca <__gedf2+0x5a>
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1e2      	bne.n	80012b6 <__gedf2+0x46>
 80012f0:	464c      	mov	r4, r9
 80012f2:	4326      	orrs	r6, r4
 80012f4:	d1df      	bne.n	80012b6 <__gedf2+0x46>
 80012f6:	e7e0      	b.n	80012ba <__gedf2+0x4a>
 80012f8:	2000      	movs	r0, #0
 80012fa:	2c00      	cmp	r4, #0
 80012fc:	d0e1      	beq.n	80012c2 <__gedf2+0x52>
 80012fe:	e7dc      	b.n	80012ba <__gedf2+0x4a>
 8001300:	429a      	cmp	r2, r3
 8001302:	dc0a      	bgt.n	800131a <__gedf2+0xaa>
 8001304:	dbe8      	blt.n	80012d8 <__gedf2+0x68>
 8001306:	454f      	cmp	r7, r9
 8001308:	d8d7      	bhi.n	80012ba <__gedf2+0x4a>
 800130a:	d00e      	beq.n	800132a <__gedf2+0xba>
 800130c:	2000      	movs	r0, #0
 800130e:	454f      	cmp	r7, r9
 8001310:	d2d7      	bcs.n	80012c2 <__gedf2+0x52>
 8001312:	2900      	cmp	r1, #0
 8001314:	d0e2      	beq.n	80012dc <__gedf2+0x6c>
 8001316:	0008      	movs	r0, r1
 8001318:	e7d3      	b.n	80012c2 <__gedf2+0x52>
 800131a:	4243      	negs	r3, r0
 800131c:	4158      	adcs	r0, r3
 800131e:	0040      	lsls	r0, r0, #1
 8001320:	3801      	subs	r0, #1
 8001322:	e7ce      	b.n	80012c2 <__gedf2+0x52>
 8001324:	2002      	movs	r0, #2
 8001326:	4240      	negs	r0, r0
 8001328:	e7cb      	b.n	80012c2 <__gedf2+0x52>
 800132a:	45c4      	cmp	ip, r8
 800132c:	d8c5      	bhi.n	80012ba <__gedf2+0x4a>
 800132e:	2000      	movs	r0, #0
 8001330:	45c4      	cmp	ip, r8
 8001332:	d2c6      	bcs.n	80012c2 <__gedf2+0x52>
 8001334:	e7ed      	b.n	8001312 <__gedf2+0xa2>
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	000007ff 	.word	0x000007ff

0800133c <__ledf2>:
 800133c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133e:	4647      	mov	r7, r8
 8001340:	46ce      	mov	lr, r9
 8001342:	0004      	movs	r4, r0
 8001344:	0018      	movs	r0, r3
 8001346:	0016      	movs	r6, r2
 8001348:	031b      	lsls	r3, r3, #12
 800134a:	0b1b      	lsrs	r3, r3, #12
 800134c:	4d2c      	ldr	r5, [pc, #176]	; (8001400 <__ledf2+0xc4>)
 800134e:	004a      	lsls	r2, r1, #1
 8001350:	4699      	mov	r9, r3
 8001352:	b580      	push	{r7, lr}
 8001354:	0043      	lsls	r3, r0, #1
 8001356:	030f      	lsls	r7, r1, #12
 8001358:	46a4      	mov	ip, r4
 800135a:	46b0      	mov	r8, r6
 800135c:	0b3f      	lsrs	r7, r7, #12
 800135e:	0d52      	lsrs	r2, r2, #21
 8001360:	0fc9      	lsrs	r1, r1, #31
 8001362:	0d5b      	lsrs	r3, r3, #21
 8001364:	0fc0      	lsrs	r0, r0, #31
 8001366:	42aa      	cmp	r2, r5
 8001368:	d00d      	beq.n	8001386 <__ledf2+0x4a>
 800136a:	42ab      	cmp	r3, r5
 800136c:	d010      	beq.n	8001390 <__ledf2+0x54>
 800136e:	2a00      	cmp	r2, #0
 8001370:	d127      	bne.n	80013c2 <__ledf2+0x86>
 8001372:	433c      	orrs	r4, r7
 8001374:	2b00      	cmp	r3, #0
 8001376:	d111      	bne.n	800139c <__ledf2+0x60>
 8001378:	464d      	mov	r5, r9
 800137a:	432e      	orrs	r6, r5
 800137c:	d10e      	bne.n	800139c <__ledf2+0x60>
 800137e:	2000      	movs	r0, #0
 8001380:	2c00      	cmp	r4, #0
 8001382:	d015      	beq.n	80013b0 <__ledf2+0x74>
 8001384:	e00e      	b.n	80013a4 <__ledf2+0x68>
 8001386:	003d      	movs	r5, r7
 8001388:	4325      	orrs	r5, r4
 800138a:	d110      	bne.n	80013ae <__ledf2+0x72>
 800138c:	4293      	cmp	r3, r2
 800138e:	d118      	bne.n	80013c2 <__ledf2+0x86>
 8001390:	464d      	mov	r5, r9
 8001392:	432e      	orrs	r6, r5
 8001394:	d10b      	bne.n	80013ae <__ledf2+0x72>
 8001396:	2a00      	cmp	r2, #0
 8001398:	d102      	bne.n	80013a0 <__ledf2+0x64>
 800139a:	433c      	orrs	r4, r7
 800139c:	2c00      	cmp	r4, #0
 800139e:	d00b      	beq.n	80013b8 <__ledf2+0x7c>
 80013a0:	4281      	cmp	r1, r0
 80013a2:	d014      	beq.n	80013ce <__ledf2+0x92>
 80013a4:	2002      	movs	r0, #2
 80013a6:	3901      	subs	r1, #1
 80013a8:	4008      	ands	r0, r1
 80013aa:	3801      	subs	r0, #1
 80013ac:	e000      	b.n	80013b0 <__ledf2+0x74>
 80013ae:	2002      	movs	r0, #2
 80013b0:	bcc0      	pop	{r6, r7}
 80013b2:	46b9      	mov	r9, r7
 80013b4:	46b0      	mov	r8, r6
 80013b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013b8:	2800      	cmp	r0, #0
 80013ba:	d1f9      	bne.n	80013b0 <__ledf2+0x74>
 80013bc:	2001      	movs	r0, #1
 80013be:	4240      	negs	r0, r0
 80013c0:	e7f6      	b.n	80013b0 <__ledf2+0x74>
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1ec      	bne.n	80013a0 <__ledf2+0x64>
 80013c6:	464c      	mov	r4, r9
 80013c8:	4326      	orrs	r6, r4
 80013ca:	d1e9      	bne.n	80013a0 <__ledf2+0x64>
 80013cc:	e7ea      	b.n	80013a4 <__ledf2+0x68>
 80013ce:	429a      	cmp	r2, r3
 80013d0:	dd04      	ble.n	80013dc <__ledf2+0xa0>
 80013d2:	4243      	negs	r3, r0
 80013d4:	4158      	adcs	r0, r3
 80013d6:	0040      	lsls	r0, r0, #1
 80013d8:	3801      	subs	r0, #1
 80013da:	e7e9      	b.n	80013b0 <__ledf2+0x74>
 80013dc:	429a      	cmp	r2, r3
 80013de:	dbeb      	blt.n	80013b8 <__ledf2+0x7c>
 80013e0:	454f      	cmp	r7, r9
 80013e2:	d8df      	bhi.n	80013a4 <__ledf2+0x68>
 80013e4:	d006      	beq.n	80013f4 <__ledf2+0xb8>
 80013e6:	2000      	movs	r0, #0
 80013e8:	454f      	cmp	r7, r9
 80013ea:	d2e1      	bcs.n	80013b0 <__ledf2+0x74>
 80013ec:	2900      	cmp	r1, #0
 80013ee:	d0e5      	beq.n	80013bc <__ledf2+0x80>
 80013f0:	0008      	movs	r0, r1
 80013f2:	e7dd      	b.n	80013b0 <__ledf2+0x74>
 80013f4:	45c4      	cmp	ip, r8
 80013f6:	d8d5      	bhi.n	80013a4 <__ledf2+0x68>
 80013f8:	2000      	movs	r0, #0
 80013fa:	45c4      	cmp	ip, r8
 80013fc:	d2d8      	bcs.n	80013b0 <__ledf2+0x74>
 80013fe:	e7f5      	b.n	80013ec <__ledf2+0xb0>
 8001400:	000007ff 	.word	0x000007ff

08001404 <__aeabi_dmul>:
 8001404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001406:	4657      	mov	r7, sl
 8001408:	464e      	mov	r6, r9
 800140a:	4645      	mov	r5, r8
 800140c:	46de      	mov	lr, fp
 800140e:	b5e0      	push	{r5, r6, r7, lr}
 8001410:	4698      	mov	r8, r3
 8001412:	030c      	lsls	r4, r1, #12
 8001414:	004b      	lsls	r3, r1, #1
 8001416:	0006      	movs	r6, r0
 8001418:	4692      	mov	sl, r2
 800141a:	b087      	sub	sp, #28
 800141c:	0b24      	lsrs	r4, r4, #12
 800141e:	0d5b      	lsrs	r3, r3, #21
 8001420:	0fcf      	lsrs	r7, r1, #31
 8001422:	2b00      	cmp	r3, #0
 8001424:	d100      	bne.n	8001428 <__aeabi_dmul+0x24>
 8001426:	e15c      	b.n	80016e2 <__aeabi_dmul+0x2de>
 8001428:	4ad9      	ldr	r2, [pc, #868]	; (8001790 <__aeabi_dmul+0x38c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d100      	bne.n	8001430 <__aeabi_dmul+0x2c>
 800142e:	e175      	b.n	800171c <__aeabi_dmul+0x318>
 8001430:	0f42      	lsrs	r2, r0, #29
 8001432:	00e4      	lsls	r4, r4, #3
 8001434:	4314      	orrs	r4, r2
 8001436:	2280      	movs	r2, #128	; 0x80
 8001438:	0412      	lsls	r2, r2, #16
 800143a:	4314      	orrs	r4, r2
 800143c:	4ad5      	ldr	r2, [pc, #852]	; (8001794 <__aeabi_dmul+0x390>)
 800143e:	00c5      	lsls	r5, r0, #3
 8001440:	4694      	mov	ip, r2
 8001442:	4463      	add	r3, ip
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2300      	movs	r3, #0
 8001448:	4699      	mov	r9, r3
 800144a:	469b      	mov	fp, r3
 800144c:	4643      	mov	r3, r8
 800144e:	4642      	mov	r2, r8
 8001450:	031e      	lsls	r6, r3, #12
 8001452:	0fd2      	lsrs	r2, r2, #31
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	4650      	mov	r0, sl
 8001458:	4690      	mov	r8, r2
 800145a:	0b36      	lsrs	r6, r6, #12
 800145c:	0d5b      	lsrs	r3, r3, #21
 800145e:	d100      	bne.n	8001462 <__aeabi_dmul+0x5e>
 8001460:	e120      	b.n	80016a4 <__aeabi_dmul+0x2a0>
 8001462:	4acb      	ldr	r2, [pc, #812]	; (8001790 <__aeabi_dmul+0x38c>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d100      	bne.n	800146a <__aeabi_dmul+0x66>
 8001468:	e162      	b.n	8001730 <__aeabi_dmul+0x32c>
 800146a:	49ca      	ldr	r1, [pc, #808]	; (8001794 <__aeabi_dmul+0x390>)
 800146c:	0f42      	lsrs	r2, r0, #29
 800146e:	468c      	mov	ip, r1
 8001470:	9900      	ldr	r1, [sp, #0]
 8001472:	4463      	add	r3, ip
 8001474:	00f6      	lsls	r6, r6, #3
 8001476:	468c      	mov	ip, r1
 8001478:	4316      	orrs	r6, r2
 800147a:	2280      	movs	r2, #128	; 0x80
 800147c:	449c      	add	ip, r3
 800147e:	0412      	lsls	r2, r2, #16
 8001480:	4663      	mov	r3, ip
 8001482:	4316      	orrs	r6, r2
 8001484:	00c2      	lsls	r2, r0, #3
 8001486:	2000      	movs	r0, #0
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	9900      	ldr	r1, [sp, #0]
 800148c:	4643      	mov	r3, r8
 800148e:	3101      	adds	r1, #1
 8001490:	468c      	mov	ip, r1
 8001492:	4649      	mov	r1, r9
 8001494:	407b      	eors	r3, r7
 8001496:	9301      	str	r3, [sp, #4]
 8001498:	290f      	cmp	r1, #15
 800149a:	d826      	bhi.n	80014ea <__aeabi_dmul+0xe6>
 800149c:	4bbe      	ldr	r3, [pc, #760]	; (8001798 <__aeabi_dmul+0x394>)
 800149e:	0089      	lsls	r1, r1, #2
 80014a0:	5859      	ldr	r1, [r3, r1]
 80014a2:	468f      	mov	pc, r1
 80014a4:	4643      	mov	r3, r8
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	0034      	movs	r4, r6
 80014aa:	0015      	movs	r5, r2
 80014ac:	4683      	mov	fp, r0
 80014ae:	465b      	mov	r3, fp
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d016      	beq.n	80014e2 <__aeabi_dmul+0xde>
 80014b4:	2b03      	cmp	r3, #3
 80014b6:	d100      	bne.n	80014ba <__aeabi_dmul+0xb6>
 80014b8:	e203      	b.n	80018c2 <__aeabi_dmul+0x4be>
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d000      	beq.n	80014c0 <__aeabi_dmul+0xbc>
 80014be:	e0cd      	b.n	800165c <__aeabi_dmul+0x258>
 80014c0:	2200      	movs	r2, #0
 80014c2:	2400      	movs	r4, #0
 80014c4:	2500      	movs	r5, #0
 80014c6:	9b01      	ldr	r3, [sp, #4]
 80014c8:	0512      	lsls	r2, r2, #20
 80014ca:	4322      	orrs	r2, r4
 80014cc:	07db      	lsls	r3, r3, #31
 80014ce:	431a      	orrs	r2, r3
 80014d0:	0028      	movs	r0, r5
 80014d2:	0011      	movs	r1, r2
 80014d4:	b007      	add	sp, #28
 80014d6:	bcf0      	pop	{r4, r5, r6, r7}
 80014d8:	46bb      	mov	fp, r7
 80014da:	46b2      	mov	sl, r6
 80014dc:	46a9      	mov	r9, r5
 80014de:	46a0      	mov	r8, r4
 80014e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e2:	2400      	movs	r4, #0
 80014e4:	2500      	movs	r5, #0
 80014e6:	4aaa      	ldr	r2, [pc, #680]	; (8001790 <__aeabi_dmul+0x38c>)
 80014e8:	e7ed      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80014ea:	0c28      	lsrs	r0, r5, #16
 80014ec:	042d      	lsls	r5, r5, #16
 80014ee:	0c2d      	lsrs	r5, r5, #16
 80014f0:	002b      	movs	r3, r5
 80014f2:	0c11      	lsrs	r1, r2, #16
 80014f4:	0412      	lsls	r2, r2, #16
 80014f6:	0c12      	lsrs	r2, r2, #16
 80014f8:	4353      	muls	r3, r2
 80014fa:	4698      	mov	r8, r3
 80014fc:	0013      	movs	r3, r2
 80014fe:	002f      	movs	r7, r5
 8001500:	4343      	muls	r3, r0
 8001502:	4699      	mov	r9, r3
 8001504:	434f      	muls	r7, r1
 8001506:	444f      	add	r7, r9
 8001508:	46bb      	mov	fp, r7
 800150a:	4647      	mov	r7, r8
 800150c:	000b      	movs	r3, r1
 800150e:	0c3f      	lsrs	r7, r7, #16
 8001510:	46ba      	mov	sl, r7
 8001512:	4343      	muls	r3, r0
 8001514:	44da      	add	sl, fp
 8001516:	9302      	str	r3, [sp, #8]
 8001518:	45d1      	cmp	r9, sl
 800151a:	d904      	bls.n	8001526 <__aeabi_dmul+0x122>
 800151c:	2780      	movs	r7, #128	; 0x80
 800151e:	027f      	lsls	r7, r7, #9
 8001520:	46b9      	mov	r9, r7
 8001522:	444b      	add	r3, r9
 8001524:	9302      	str	r3, [sp, #8]
 8001526:	4653      	mov	r3, sl
 8001528:	0c1b      	lsrs	r3, r3, #16
 800152a:	469b      	mov	fp, r3
 800152c:	4653      	mov	r3, sl
 800152e:	041f      	lsls	r7, r3, #16
 8001530:	4643      	mov	r3, r8
 8001532:	041b      	lsls	r3, r3, #16
 8001534:	0c1b      	lsrs	r3, r3, #16
 8001536:	4698      	mov	r8, r3
 8001538:	003b      	movs	r3, r7
 800153a:	4443      	add	r3, r8
 800153c:	9304      	str	r3, [sp, #16]
 800153e:	0c33      	lsrs	r3, r6, #16
 8001540:	0436      	lsls	r6, r6, #16
 8001542:	0c36      	lsrs	r6, r6, #16
 8001544:	4698      	mov	r8, r3
 8001546:	0033      	movs	r3, r6
 8001548:	4343      	muls	r3, r0
 800154a:	4699      	mov	r9, r3
 800154c:	4643      	mov	r3, r8
 800154e:	4343      	muls	r3, r0
 8001550:	002f      	movs	r7, r5
 8001552:	469a      	mov	sl, r3
 8001554:	4643      	mov	r3, r8
 8001556:	4377      	muls	r7, r6
 8001558:	435d      	muls	r5, r3
 800155a:	0c38      	lsrs	r0, r7, #16
 800155c:	444d      	add	r5, r9
 800155e:	1945      	adds	r5, r0, r5
 8001560:	45a9      	cmp	r9, r5
 8001562:	d903      	bls.n	800156c <__aeabi_dmul+0x168>
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	025b      	lsls	r3, r3, #9
 8001568:	4699      	mov	r9, r3
 800156a:	44ca      	add	sl, r9
 800156c:	043f      	lsls	r7, r7, #16
 800156e:	0c28      	lsrs	r0, r5, #16
 8001570:	0c3f      	lsrs	r7, r7, #16
 8001572:	042d      	lsls	r5, r5, #16
 8001574:	19ed      	adds	r5, r5, r7
 8001576:	0c27      	lsrs	r7, r4, #16
 8001578:	0424      	lsls	r4, r4, #16
 800157a:	0c24      	lsrs	r4, r4, #16
 800157c:	0003      	movs	r3, r0
 800157e:	0020      	movs	r0, r4
 8001580:	4350      	muls	r0, r2
 8001582:	437a      	muls	r2, r7
 8001584:	4691      	mov	r9, r2
 8001586:	003a      	movs	r2, r7
 8001588:	4453      	add	r3, sl
 800158a:	9305      	str	r3, [sp, #20]
 800158c:	0c03      	lsrs	r3, r0, #16
 800158e:	469a      	mov	sl, r3
 8001590:	434a      	muls	r2, r1
 8001592:	4361      	muls	r1, r4
 8001594:	4449      	add	r1, r9
 8001596:	4451      	add	r1, sl
 8001598:	44ab      	add	fp, r5
 800159a:	4589      	cmp	r9, r1
 800159c:	d903      	bls.n	80015a6 <__aeabi_dmul+0x1a2>
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	025b      	lsls	r3, r3, #9
 80015a2:	4699      	mov	r9, r3
 80015a4:	444a      	add	r2, r9
 80015a6:	0400      	lsls	r0, r0, #16
 80015a8:	0c0b      	lsrs	r3, r1, #16
 80015aa:	0c00      	lsrs	r0, r0, #16
 80015ac:	0409      	lsls	r1, r1, #16
 80015ae:	1809      	adds	r1, r1, r0
 80015b0:	0020      	movs	r0, r4
 80015b2:	4699      	mov	r9, r3
 80015b4:	4643      	mov	r3, r8
 80015b6:	4370      	muls	r0, r6
 80015b8:	435c      	muls	r4, r3
 80015ba:	437e      	muls	r6, r7
 80015bc:	435f      	muls	r7, r3
 80015be:	0c03      	lsrs	r3, r0, #16
 80015c0:	4698      	mov	r8, r3
 80015c2:	19a4      	adds	r4, r4, r6
 80015c4:	4444      	add	r4, r8
 80015c6:	444a      	add	r2, r9
 80015c8:	9703      	str	r7, [sp, #12]
 80015ca:	42a6      	cmp	r6, r4
 80015cc:	d904      	bls.n	80015d8 <__aeabi_dmul+0x1d4>
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	025b      	lsls	r3, r3, #9
 80015d2:	4698      	mov	r8, r3
 80015d4:	4447      	add	r7, r8
 80015d6:	9703      	str	r7, [sp, #12]
 80015d8:	0423      	lsls	r3, r4, #16
 80015da:	9e02      	ldr	r6, [sp, #8]
 80015dc:	469a      	mov	sl, r3
 80015de:	9b05      	ldr	r3, [sp, #20]
 80015e0:	445e      	add	r6, fp
 80015e2:	4698      	mov	r8, r3
 80015e4:	42ae      	cmp	r6, r5
 80015e6:	41ad      	sbcs	r5, r5
 80015e8:	1876      	adds	r6, r6, r1
 80015ea:	428e      	cmp	r6, r1
 80015ec:	4189      	sbcs	r1, r1
 80015ee:	0400      	lsls	r0, r0, #16
 80015f0:	0c00      	lsrs	r0, r0, #16
 80015f2:	4450      	add	r0, sl
 80015f4:	4440      	add	r0, r8
 80015f6:	426d      	negs	r5, r5
 80015f8:	1947      	adds	r7, r0, r5
 80015fa:	46b8      	mov	r8, r7
 80015fc:	4693      	mov	fp, r2
 80015fe:	4249      	negs	r1, r1
 8001600:	4689      	mov	r9, r1
 8001602:	44c3      	add	fp, r8
 8001604:	44d9      	add	r9, fp
 8001606:	4298      	cmp	r0, r3
 8001608:	4180      	sbcs	r0, r0
 800160a:	45a8      	cmp	r8, r5
 800160c:	41ad      	sbcs	r5, r5
 800160e:	4593      	cmp	fp, r2
 8001610:	4192      	sbcs	r2, r2
 8001612:	4589      	cmp	r9, r1
 8001614:	4189      	sbcs	r1, r1
 8001616:	426d      	negs	r5, r5
 8001618:	4240      	negs	r0, r0
 800161a:	4328      	orrs	r0, r5
 800161c:	0c24      	lsrs	r4, r4, #16
 800161e:	4252      	negs	r2, r2
 8001620:	4249      	negs	r1, r1
 8001622:	430a      	orrs	r2, r1
 8001624:	9b03      	ldr	r3, [sp, #12]
 8001626:	1900      	adds	r0, r0, r4
 8001628:	1880      	adds	r0, r0, r2
 800162a:	18c7      	adds	r7, r0, r3
 800162c:	464b      	mov	r3, r9
 800162e:	0ddc      	lsrs	r4, r3, #23
 8001630:	9b04      	ldr	r3, [sp, #16]
 8001632:	0275      	lsls	r5, r6, #9
 8001634:	431d      	orrs	r5, r3
 8001636:	1e6a      	subs	r2, r5, #1
 8001638:	4195      	sbcs	r5, r2
 800163a:	464b      	mov	r3, r9
 800163c:	0df6      	lsrs	r6, r6, #23
 800163e:	027f      	lsls	r7, r7, #9
 8001640:	4335      	orrs	r5, r6
 8001642:	025a      	lsls	r2, r3, #9
 8001644:	433c      	orrs	r4, r7
 8001646:	4315      	orrs	r5, r2
 8001648:	01fb      	lsls	r3, r7, #7
 800164a:	d400      	bmi.n	800164e <__aeabi_dmul+0x24a>
 800164c:	e11c      	b.n	8001888 <__aeabi_dmul+0x484>
 800164e:	2101      	movs	r1, #1
 8001650:	086a      	lsrs	r2, r5, #1
 8001652:	400d      	ands	r5, r1
 8001654:	4315      	orrs	r5, r2
 8001656:	07e2      	lsls	r2, r4, #31
 8001658:	4315      	orrs	r5, r2
 800165a:	0864      	lsrs	r4, r4, #1
 800165c:	494f      	ldr	r1, [pc, #316]	; (800179c <__aeabi_dmul+0x398>)
 800165e:	4461      	add	r1, ip
 8001660:	2900      	cmp	r1, #0
 8001662:	dc00      	bgt.n	8001666 <__aeabi_dmul+0x262>
 8001664:	e0b0      	b.n	80017c8 <__aeabi_dmul+0x3c4>
 8001666:	076b      	lsls	r3, r5, #29
 8001668:	d009      	beq.n	800167e <__aeabi_dmul+0x27a>
 800166a:	220f      	movs	r2, #15
 800166c:	402a      	ands	r2, r5
 800166e:	2a04      	cmp	r2, #4
 8001670:	d005      	beq.n	800167e <__aeabi_dmul+0x27a>
 8001672:	1d2a      	adds	r2, r5, #4
 8001674:	42aa      	cmp	r2, r5
 8001676:	41ad      	sbcs	r5, r5
 8001678:	426d      	negs	r5, r5
 800167a:	1964      	adds	r4, r4, r5
 800167c:	0015      	movs	r5, r2
 800167e:	01e3      	lsls	r3, r4, #7
 8001680:	d504      	bpl.n	800168c <__aeabi_dmul+0x288>
 8001682:	2180      	movs	r1, #128	; 0x80
 8001684:	4a46      	ldr	r2, [pc, #280]	; (80017a0 <__aeabi_dmul+0x39c>)
 8001686:	00c9      	lsls	r1, r1, #3
 8001688:	4014      	ands	r4, r2
 800168a:	4461      	add	r1, ip
 800168c:	4a45      	ldr	r2, [pc, #276]	; (80017a4 <__aeabi_dmul+0x3a0>)
 800168e:	4291      	cmp	r1, r2
 8001690:	dd00      	ble.n	8001694 <__aeabi_dmul+0x290>
 8001692:	e726      	b.n	80014e2 <__aeabi_dmul+0xde>
 8001694:	0762      	lsls	r2, r4, #29
 8001696:	08ed      	lsrs	r5, r5, #3
 8001698:	0264      	lsls	r4, r4, #9
 800169a:	0549      	lsls	r1, r1, #21
 800169c:	4315      	orrs	r5, r2
 800169e:	0b24      	lsrs	r4, r4, #12
 80016a0:	0d4a      	lsrs	r2, r1, #21
 80016a2:	e710      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80016a4:	4652      	mov	r2, sl
 80016a6:	4332      	orrs	r2, r6
 80016a8:	d100      	bne.n	80016ac <__aeabi_dmul+0x2a8>
 80016aa:	e07f      	b.n	80017ac <__aeabi_dmul+0x3a8>
 80016ac:	2e00      	cmp	r6, #0
 80016ae:	d100      	bne.n	80016b2 <__aeabi_dmul+0x2ae>
 80016b0:	e0dc      	b.n	800186c <__aeabi_dmul+0x468>
 80016b2:	0030      	movs	r0, r6
 80016b4:	f000 fdd6 	bl	8002264 <__clzsi2>
 80016b8:	0002      	movs	r2, r0
 80016ba:	3a0b      	subs	r2, #11
 80016bc:	231d      	movs	r3, #29
 80016be:	0001      	movs	r1, r0
 80016c0:	1a9b      	subs	r3, r3, r2
 80016c2:	4652      	mov	r2, sl
 80016c4:	3908      	subs	r1, #8
 80016c6:	40da      	lsrs	r2, r3
 80016c8:	408e      	lsls	r6, r1
 80016ca:	4316      	orrs	r6, r2
 80016cc:	4652      	mov	r2, sl
 80016ce:	408a      	lsls	r2, r1
 80016d0:	9b00      	ldr	r3, [sp, #0]
 80016d2:	4935      	ldr	r1, [pc, #212]	; (80017a8 <__aeabi_dmul+0x3a4>)
 80016d4:	1a18      	subs	r0, r3, r0
 80016d6:	0003      	movs	r3, r0
 80016d8:	468c      	mov	ip, r1
 80016da:	4463      	add	r3, ip
 80016dc:	2000      	movs	r0, #0
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	e6d3      	b.n	800148a <__aeabi_dmul+0x86>
 80016e2:	0025      	movs	r5, r4
 80016e4:	4305      	orrs	r5, r0
 80016e6:	d04a      	beq.n	800177e <__aeabi_dmul+0x37a>
 80016e8:	2c00      	cmp	r4, #0
 80016ea:	d100      	bne.n	80016ee <__aeabi_dmul+0x2ea>
 80016ec:	e0b0      	b.n	8001850 <__aeabi_dmul+0x44c>
 80016ee:	0020      	movs	r0, r4
 80016f0:	f000 fdb8 	bl	8002264 <__clzsi2>
 80016f4:	0001      	movs	r1, r0
 80016f6:	0002      	movs	r2, r0
 80016f8:	390b      	subs	r1, #11
 80016fa:	231d      	movs	r3, #29
 80016fc:	0010      	movs	r0, r2
 80016fe:	1a5b      	subs	r3, r3, r1
 8001700:	0031      	movs	r1, r6
 8001702:	0035      	movs	r5, r6
 8001704:	3808      	subs	r0, #8
 8001706:	4084      	lsls	r4, r0
 8001708:	40d9      	lsrs	r1, r3
 800170a:	4085      	lsls	r5, r0
 800170c:	430c      	orrs	r4, r1
 800170e:	4826      	ldr	r0, [pc, #152]	; (80017a8 <__aeabi_dmul+0x3a4>)
 8001710:	1a83      	subs	r3, r0, r2
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	2300      	movs	r3, #0
 8001716:	4699      	mov	r9, r3
 8001718:	469b      	mov	fp, r3
 800171a:	e697      	b.n	800144c <__aeabi_dmul+0x48>
 800171c:	0005      	movs	r5, r0
 800171e:	4325      	orrs	r5, r4
 8001720:	d126      	bne.n	8001770 <__aeabi_dmul+0x36c>
 8001722:	2208      	movs	r2, #8
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	2302      	movs	r3, #2
 8001728:	2400      	movs	r4, #0
 800172a:	4691      	mov	r9, r2
 800172c:	469b      	mov	fp, r3
 800172e:	e68d      	b.n	800144c <__aeabi_dmul+0x48>
 8001730:	4652      	mov	r2, sl
 8001732:	9b00      	ldr	r3, [sp, #0]
 8001734:	4332      	orrs	r2, r6
 8001736:	d110      	bne.n	800175a <__aeabi_dmul+0x356>
 8001738:	4915      	ldr	r1, [pc, #84]	; (8001790 <__aeabi_dmul+0x38c>)
 800173a:	2600      	movs	r6, #0
 800173c:	468c      	mov	ip, r1
 800173e:	4463      	add	r3, ip
 8001740:	4649      	mov	r1, r9
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	2302      	movs	r3, #2
 8001746:	4319      	orrs	r1, r3
 8001748:	4689      	mov	r9, r1
 800174a:	2002      	movs	r0, #2
 800174c:	e69d      	b.n	800148a <__aeabi_dmul+0x86>
 800174e:	465b      	mov	r3, fp
 8001750:	9701      	str	r7, [sp, #4]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d000      	beq.n	8001758 <__aeabi_dmul+0x354>
 8001756:	e6ad      	b.n	80014b4 <__aeabi_dmul+0xb0>
 8001758:	e6c3      	b.n	80014e2 <__aeabi_dmul+0xde>
 800175a:	4a0d      	ldr	r2, [pc, #52]	; (8001790 <__aeabi_dmul+0x38c>)
 800175c:	2003      	movs	r0, #3
 800175e:	4694      	mov	ip, r2
 8001760:	4463      	add	r3, ip
 8001762:	464a      	mov	r2, r9
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	2303      	movs	r3, #3
 8001768:	431a      	orrs	r2, r3
 800176a:	4691      	mov	r9, r2
 800176c:	4652      	mov	r2, sl
 800176e:	e68c      	b.n	800148a <__aeabi_dmul+0x86>
 8001770:	220c      	movs	r2, #12
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	2303      	movs	r3, #3
 8001776:	0005      	movs	r5, r0
 8001778:	4691      	mov	r9, r2
 800177a:	469b      	mov	fp, r3
 800177c:	e666      	b.n	800144c <__aeabi_dmul+0x48>
 800177e:	2304      	movs	r3, #4
 8001780:	4699      	mov	r9, r3
 8001782:	2300      	movs	r3, #0
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	3301      	adds	r3, #1
 8001788:	2400      	movs	r4, #0
 800178a:	469b      	mov	fp, r3
 800178c:	e65e      	b.n	800144c <__aeabi_dmul+0x48>
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	000007ff 	.word	0x000007ff
 8001794:	fffffc01 	.word	0xfffffc01
 8001798:	0800aafc 	.word	0x0800aafc
 800179c:	000003ff 	.word	0x000003ff
 80017a0:	feffffff 	.word	0xfeffffff
 80017a4:	000007fe 	.word	0x000007fe
 80017a8:	fffffc0d 	.word	0xfffffc0d
 80017ac:	4649      	mov	r1, r9
 80017ae:	2301      	movs	r3, #1
 80017b0:	4319      	orrs	r1, r3
 80017b2:	4689      	mov	r9, r1
 80017b4:	2600      	movs	r6, #0
 80017b6:	2001      	movs	r0, #1
 80017b8:	e667      	b.n	800148a <__aeabi_dmul+0x86>
 80017ba:	2300      	movs	r3, #0
 80017bc:	2480      	movs	r4, #128	; 0x80
 80017be:	2500      	movs	r5, #0
 80017c0:	4a43      	ldr	r2, [pc, #268]	; (80018d0 <__aeabi_dmul+0x4cc>)
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	0324      	lsls	r4, r4, #12
 80017c6:	e67e      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80017c8:	2001      	movs	r0, #1
 80017ca:	1a40      	subs	r0, r0, r1
 80017cc:	2838      	cmp	r0, #56	; 0x38
 80017ce:	dd00      	ble.n	80017d2 <__aeabi_dmul+0x3ce>
 80017d0:	e676      	b.n	80014c0 <__aeabi_dmul+0xbc>
 80017d2:	281f      	cmp	r0, #31
 80017d4:	dd5b      	ble.n	800188e <__aeabi_dmul+0x48a>
 80017d6:	221f      	movs	r2, #31
 80017d8:	0023      	movs	r3, r4
 80017da:	4252      	negs	r2, r2
 80017dc:	1a51      	subs	r1, r2, r1
 80017de:	40cb      	lsrs	r3, r1
 80017e0:	0019      	movs	r1, r3
 80017e2:	2820      	cmp	r0, #32
 80017e4:	d003      	beq.n	80017ee <__aeabi_dmul+0x3ea>
 80017e6:	4a3b      	ldr	r2, [pc, #236]	; (80018d4 <__aeabi_dmul+0x4d0>)
 80017e8:	4462      	add	r2, ip
 80017ea:	4094      	lsls	r4, r2
 80017ec:	4325      	orrs	r5, r4
 80017ee:	1e6a      	subs	r2, r5, #1
 80017f0:	4195      	sbcs	r5, r2
 80017f2:	002a      	movs	r2, r5
 80017f4:	430a      	orrs	r2, r1
 80017f6:	2107      	movs	r1, #7
 80017f8:	000d      	movs	r5, r1
 80017fa:	2400      	movs	r4, #0
 80017fc:	4015      	ands	r5, r2
 80017fe:	4211      	tst	r1, r2
 8001800:	d05b      	beq.n	80018ba <__aeabi_dmul+0x4b6>
 8001802:	210f      	movs	r1, #15
 8001804:	2400      	movs	r4, #0
 8001806:	4011      	ands	r1, r2
 8001808:	2904      	cmp	r1, #4
 800180a:	d053      	beq.n	80018b4 <__aeabi_dmul+0x4b0>
 800180c:	1d11      	adds	r1, r2, #4
 800180e:	4291      	cmp	r1, r2
 8001810:	4192      	sbcs	r2, r2
 8001812:	4252      	negs	r2, r2
 8001814:	18a4      	adds	r4, r4, r2
 8001816:	000a      	movs	r2, r1
 8001818:	0223      	lsls	r3, r4, #8
 800181a:	d54b      	bpl.n	80018b4 <__aeabi_dmul+0x4b0>
 800181c:	2201      	movs	r2, #1
 800181e:	2400      	movs	r4, #0
 8001820:	2500      	movs	r5, #0
 8001822:	e650      	b.n	80014c6 <__aeabi_dmul+0xc2>
 8001824:	2380      	movs	r3, #128	; 0x80
 8001826:	031b      	lsls	r3, r3, #12
 8001828:	421c      	tst	r4, r3
 800182a:	d009      	beq.n	8001840 <__aeabi_dmul+0x43c>
 800182c:	421e      	tst	r6, r3
 800182e:	d107      	bne.n	8001840 <__aeabi_dmul+0x43c>
 8001830:	4333      	orrs	r3, r6
 8001832:	031c      	lsls	r4, r3, #12
 8001834:	4643      	mov	r3, r8
 8001836:	0015      	movs	r5, r2
 8001838:	0b24      	lsrs	r4, r4, #12
 800183a:	4a25      	ldr	r2, [pc, #148]	; (80018d0 <__aeabi_dmul+0x4cc>)
 800183c:	9301      	str	r3, [sp, #4]
 800183e:	e642      	b.n	80014c6 <__aeabi_dmul+0xc2>
 8001840:	2280      	movs	r2, #128	; 0x80
 8001842:	0312      	lsls	r2, r2, #12
 8001844:	4314      	orrs	r4, r2
 8001846:	0324      	lsls	r4, r4, #12
 8001848:	4a21      	ldr	r2, [pc, #132]	; (80018d0 <__aeabi_dmul+0x4cc>)
 800184a:	0b24      	lsrs	r4, r4, #12
 800184c:	9701      	str	r7, [sp, #4]
 800184e:	e63a      	b.n	80014c6 <__aeabi_dmul+0xc2>
 8001850:	f000 fd08 	bl	8002264 <__clzsi2>
 8001854:	0001      	movs	r1, r0
 8001856:	0002      	movs	r2, r0
 8001858:	3115      	adds	r1, #21
 800185a:	3220      	adds	r2, #32
 800185c:	291c      	cmp	r1, #28
 800185e:	dc00      	bgt.n	8001862 <__aeabi_dmul+0x45e>
 8001860:	e74b      	b.n	80016fa <__aeabi_dmul+0x2f6>
 8001862:	0034      	movs	r4, r6
 8001864:	3808      	subs	r0, #8
 8001866:	2500      	movs	r5, #0
 8001868:	4084      	lsls	r4, r0
 800186a:	e750      	b.n	800170e <__aeabi_dmul+0x30a>
 800186c:	f000 fcfa 	bl	8002264 <__clzsi2>
 8001870:	0003      	movs	r3, r0
 8001872:	001a      	movs	r2, r3
 8001874:	3215      	adds	r2, #21
 8001876:	3020      	adds	r0, #32
 8001878:	2a1c      	cmp	r2, #28
 800187a:	dc00      	bgt.n	800187e <__aeabi_dmul+0x47a>
 800187c:	e71e      	b.n	80016bc <__aeabi_dmul+0x2b8>
 800187e:	4656      	mov	r6, sl
 8001880:	3b08      	subs	r3, #8
 8001882:	2200      	movs	r2, #0
 8001884:	409e      	lsls	r6, r3
 8001886:	e723      	b.n	80016d0 <__aeabi_dmul+0x2cc>
 8001888:	9b00      	ldr	r3, [sp, #0]
 800188a:	469c      	mov	ip, r3
 800188c:	e6e6      	b.n	800165c <__aeabi_dmul+0x258>
 800188e:	4912      	ldr	r1, [pc, #72]	; (80018d8 <__aeabi_dmul+0x4d4>)
 8001890:	0022      	movs	r2, r4
 8001892:	4461      	add	r1, ip
 8001894:	002e      	movs	r6, r5
 8001896:	408d      	lsls	r5, r1
 8001898:	408a      	lsls	r2, r1
 800189a:	40c6      	lsrs	r6, r0
 800189c:	1e69      	subs	r1, r5, #1
 800189e:	418d      	sbcs	r5, r1
 80018a0:	4332      	orrs	r2, r6
 80018a2:	432a      	orrs	r2, r5
 80018a4:	40c4      	lsrs	r4, r0
 80018a6:	0753      	lsls	r3, r2, #29
 80018a8:	d0b6      	beq.n	8001818 <__aeabi_dmul+0x414>
 80018aa:	210f      	movs	r1, #15
 80018ac:	4011      	ands	r1, r2
 80018ae:	2904      	cmp	r1, #4
 80018b0:	d1ac      	bne.n	800180c <__aeabi_dmul+0x408>
 80018b2:	e7b1      	b.n	8001818 <__aeabi_dmul+0x414>
 80018b4:	0765      	lsls	r5, r4, #29
 80018b6:	0264      	lsls	r4, r4, #9
 80018b8:	0b24      	lsrs	r4, r4, #12
 80018ba:	08d2      	lsrs	r2, r2, #3
 80018bc:	4315      	orrs	r5, r2
 80018be:	2200      	movs	r2, #0
 80018c0:	e601      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80018c2:	2280      	movs	r2, #128	; 0x80
 80018c4:	0312      	lsls	r2, r2, #12
 80018c6:	4314      	orrs	r4, r2
 80018c8:	0324      	lsls	r4, r4, #12
 80018ca:	4a01      	ldr	r2, [pc, #4]	; (80018d0 <__aeabi_dmul+0x4cc>)
 80018cc:	0b24      	lsrs	r4, r4, #12
 80018ce:	e5fa      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80018d0:	000007ff 	.word	0x000007ff
 80018d4:	0000043e 	.word	0x0000043e
 80018d8:	0000041e 	.word	0x0000041e

080018dc <__aeabi_dsub>:
 80018dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018de:	4657      	mov	r7, sl
 80018e0:	464e      	mov	r6, r9
 80018e2:	4645      	mov	r5, r8
 80018e4:	46de      	mov	lr, fp
 80018e6:	b5e0      	push	{r5, r6, r7, lr}
 80018e8:	001e      	movs	r6, r3
 80018ea:	0017      	movs	r7, r2
 80018ec:	004a      	lsls	r2, r1, #1
 80018ee:	030b      	lsls	r3, r1, #12
 80018f0:	0d52      	lsrs	r2, r2, #21
 80018f2:	0a5b      	lsrs	r3, r3, #9
 80018f4:	4690      	mov	r8, r2
 80018f6:	0f42      	lsrs	r2, r0, #29
 80018f8:	431a      	orrs	r2, r3
 80018fa:	0fcd      	lsrs	r5, r1, #31
 80018fc:	4ccd      	ldr	r4, [pc, #820]	; (8001c34 <__aeabi_dsub+0x358>)
 80018fe:	0331      	lsls	r1, r6, #12
 8001900:	00c3      	lsls	r3, r0, #3
 8001902:	4694      	mov	ip, r2
 8001904:	0070      	lsls	r0, r6, #1
 8001906:	0f7a      	lsrs	r2, r7, #29
 8001908:	0a49      	lsrs	r1, r1, #9
 800190a:	00ff      	lsls	r7, r7, #3
 800190c:	469a      	mov	sl, r3
 800190e:	46b9      	mov	r9, r7
 8001910:	0d40      	lsrs	r0, r0, #21
 8001912:	0ff6      	lsrs	r6, r6, #31
 8001914:	4311      	orrs	r1, r2
 8001916:	42a0      	cmp	r0, r4
 8001918:	d100      	bne.n	800191c <__aeabi_dsub+0x40>
 800191a:	e0b1      	b.n	8001a80 <__aeabi_dsub+0x1a4>
 800191c:	2201      	movs	r2, #1
 800191e:	4056      	eors	r6, r2
 8001920:	46b3      	mov	fp, r6
 8001922:	42b5      	cmp	r5, r6
 8001924:	d100      	bne.n	8001928 <__aeabi_dsub+0x4c>
 8001926:	e088      	b.n	8001a3a <__aeabi_dsub+0x15e>
 8001928:	4642      	mov	r2, r8
 800192a:	1a12      	subs	r2, r2, r0
 800192c:	2a00      	cmp	r2, #0
 800192e:	dc00      	bgt.n	8001932 <__aeabi_dsub+0x56>
 8001930:	e0ae      	b.n	8001a90 <__aeabi_dsub+0x1b4>
 8001932:	2800      	cmp	r0, #0
 8001934:	d100      	bne.n	8001938 <__aeabi_dsub+0x5c>
 8001936:	e0c1      	b.n	8001abc <__aeabi_dsub+0x1e0>
 8001938:	48be      	ldr	r0, [pc, #760]	; (8001c34 <__aeabi_dsub+0x358>)
 800193a:	4580      	cmp	r8, r0
 800193c:	d100      	bne.n	8001940 <__aeabi_dsub+0x64>
 800193e:	e151      	b.n	8001be4 <__aeabi_dsub+0x308>
 8001940:	2080      	movs	r0, #128	; 0x80
 8001942:	0400      	lsls	r0, r0, #16
 8001944:	4301      	orrs	r1, r0
 8001946:	2a38      	cmp	r2, #56	; 0x38
 8001948:	dd00      	ble.n	800194c <__aeabi_dsub+0x70>
 800194a:	e17b      	b.n	8001c44 <__aeabi_dsub+0x368>
 800194c:	2a1f      	cmp	r2, #31
 800194e:	dd00      	ble.n	8001952 <__aeabi_dsub+0x76>
 8001950:	e1ee      	b.n	8001d30 <__aeabi_dsub+0x454>
 8001952:	2020      	movs	r0, #32
 8001954:	003e      	movs	r6, r7
 8001956:	1a80      	subs	r0, r0, r2
 8001958:	000c      	movs	r4, r1
 800195a:	40d6      	lsrs	r6, r2
 800195c:	40d1      	lsrs	r1, r2
 800195e:	4087      	lsls	r7, r0
 8001960:	4662      	mov	r2, ip
 8001962:	4084      	lsls	r4, r0
 8001964:	1a52      	subs	r2, r2, r1
 8001966:	1e78      	subs	r0, r7, #1
 8001968:	4187      	sbcs	r7, r0
 800196a:	4694      	mov	ip, r2
 800196c:	4334      	orrs	r4, r6
 800196e:	4327      	orrs	r7, r4
 8001970:	1bdc      	subs	r4, r3, r7
 8001972:	42a3      	cmp	r3, r4
 8001974:	419b      	sbcs	r3, r3
 8001976:	4662      	mov	r2, ip
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	4699      	mov	r9, r3
 800197e:	464b      	mov	r3, r9
 8001980:	021b      	lsls	r3, r3, #8
 8001982:	d400      	bmi.n	8001986 <__aeabi_dsub+0xaa>
 8001984:	e118      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001986:	464b      	mov	r3, r9
 8001988:	0258      	lsls	r0, r3, #9
 800198a:	0a43      	lsrs	r3, r0, #9
 800198c:	4699      	mov	r9, r3
 800198e:	464b      	mov	r3, r9
 8001990:	2b00      	cmp	r3, #0
 8001992:	d100      	bne.n	8001996 <__aeabi_dsub+0xba>
 8001994:	e137      	b.n	8001c06 <__aeabi_dsub+0x32a>
 8001996:	4648      	mov	r0, r9
 8001998:	f000 fc64 	bl	8002264 <__clzsi2>
 800199c:	0001      	movs	r1, r0
 800199e:	3908      	subs	r1, #8
 80019a0:	2320      	movs	r3, #32
 80019a2:	0022      	movs	r2, r4
 80019a4:	4648      	mov	r0, r9
 80019a6:	1a5b      	subs	r3, r3, r1
 80019a8:	40da      	lsrs	r2, r3
 80019aa:	4088      	lsls	r0, r1
 80019ac:	408c      	lsls	r4, r1
 80019ae:	4643      	mov	r3, r8
 80019b0:	4310      	orrs	r0, r2
 80019b2:	4588      	cmp	r8, r1
 80019b4:	dd00      	ble.n	80019b8 <__aeabi_dsub+0xdc>
 80019b6:	e136      	b.n	8001c26 <__aeabi_dsub+0x34a>
 80019b8:	1ac9      	subs	r1, r1, r3
 80019ba:	1c4b      	adds	r3, r1, #1
 80019bc:	2b1f      	cmp	r3, #31
 80019be:	dd00      	ble.n	80019c2 <__aeabi_dsub+0xe6>
 80019c0:	e0ea      	b.n	8001b98 <__aeabi_dsub+0x2bc>
 80019c2:	2220      	movs	r2, #32
 80019c4:	0026      	movs	r6, r4
 80019c6:	1ad2      	subs	r2, r2, r3
 80019c8:	0001      	movs	r1, r0
 80019ca:	4094      	lsls	r4, r2
 80019cc:	40de      	lsrs	r6, r3
 80019ce:	40d8      	lsrs	r0, r3
 80019d0:	2300      	movs	r3, #0
 80019d2:	4091      	lsls	r1, r2
 80019d4:	1e62      	subs	r2, r4, #1
 80019d6:	4194      	sbcs	r4, r2
 80019d8:	4681      	mov	r9, r0
 80019da:	4698      	mov	r8, r3
 80019dc:	4331      	orrs	r1, r6
 80019de:	430c      	orrs	r4, r1
 80019e0:	0763      	lsls	r3, r4, #29
 80019e2:	d009      	beq.n	80019f8 <__aeabi_dsub+0x11c>
 80019e4:	230f      	movs	r3, #15
 80019e6:	4023      	ands	r3, r4
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d005      	beq.n	80019f8 <__aeabi_dsub+0x11c>
 80019ec:	1d23      	adds	r3, r4, #4
 80019ee:	42a3      	cmp	r3, r4
 80019f0:	41a4      	sbcs	r4, r4
 80019f2:	4264      	negs	r4, r4
 80019f4:	44a1      	add	r9, r4
 80019f6:	001c      	movs	r4, r3
 80019f8:	464b      	mov	r3, r9
 80019fa:	021b      	lsls	r3, r3, #8
 80019fc:	d400      	bmi.n	8001a00 <__aeabi_dsub+0x124>
 80019fe:	e0de      	b.n	8001bbe <__aeabi_dsub+0x2e2>
 8001a00:	4641      	mov	r1, r8
 8001a02:	4b8c      	ldr	r3, [pc, #560]	; (8001c34 <__aeabi_dsub+0x358>)
 8001a04:	3101      	adds	r1, #1
 8001a06:	4299      	cmp	r1, r3
 8001a08:	d100      	bne.n	8001a0c <__aeabi_dsub+0x130>
 8001a0a:	e0e7      	b.n	8001bdc <__aeabi_dsub+0x300>
 8001a0c:	464b      	mov	r3, r9
 8001a0e:	488a      	ldr	r0, [pc, #552]	; (8001c38 <__aeabi_dsub+0x35c>)
 8001a10:	08e4      	lsrs	r4, r4, #3
 8001a12:	4003      	ands	r3, r0
 8001a14:	0018      	movs	r0, r3
 8001a16:	0549      	lsls	r1, r1, #21
 8001a18:	075b      	lsls	r3, r3, #29
 8001a1a:	0240      	lsls	r0, r0, #9
 8001a1c:	4323      	orrs	r3, r4
 8001a1e:	0d4a      	lsrs	r2, r1, #21
 8001a20:	0b04      	lsrs	r4, r0, #12
 8001a22:	0512      	lsls	r2, r2, #20
 8001a24:	07ed      	lsls	r5, r5, #31
 8001a26:	4322      	orrs	r2, r4
 8001a28:	432a      	orrs	r2, r5
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	0011      	movs	r1, r2
 8001a2e:	bcf0      	pop	{r4, r5, r6, r7}
 8001a30:	46bb      	mov	fp, r7
 8001a32:	46b2      	mov	sl, r6
 8001a34:	46a9      	mov	r9, r5
 8001a36:	46a0      	mov	r8, r4
 8001a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a3a:	4642      	mov	r2, r8
 8001a3c:	1a12      	subs	r2, r2, r0
 8001a3e:	2a00      	cmp	r2, #0
 8001a40:	dd52      	ble.n	8001ae8 <__aeabi_dsub+0x20c>
 8001a42:	2800      	cmp	r0, #0
 8001a44:	d100      	bne.n	8001a48 <__aeabi_dsub+0x16c>
 8001a46:	e09c      	b.n	8001b82 <__aeabi_dsub+0x2a6>
 8001a48:	45a0      	cmp	r8, r4
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dsub+0x172>
 8001a4c:	e0ca      	b.n	8001be4 <__aeabi_dsub+0x308>
 8001a4e:	2080      	movs	r0, #128	; 0x80
 8001a50:	0400      	lsls	r0, r0, #16
 8001a52:	4301      	orrs	r1, r0
 8001a54:	2a38      	cmp	r2, #56	; 0x38
 8001a56:	dd00      	ble.n	8001a5a <__aeabi_dsub+0x17e>
 8001a58:	e149      	b.n	8001cee <__aeabi_dsub+0x412>
 8001a5a:	2a1f      	cmp	r2, #31
 8001a5c:	dc00      	bgt.n	8001a60 <__aeabi_dsub+0x184>
 8001a5e:	e197      	b.n	8001d90 <__aeabi_dsub+0x4b4>
 8001a60:	0010      	movs	r0, r2
 8001a62:	000e      	movs	r6, r1
 8001a64:	3820      	subs	r0, #32
 8001a66:	40c6      	lsrs	r6, r0
 8001a68:	2a20      	cmp	r2, #32
 8001a6a:	d004      	beq.n	8001a76 <__aeabi_dsub+0x19a>
 8001a6c:	2040      	movs	r0, #64	; 0x40
 8001a6e:	1a82      	subs	r2, r0, r2
 8001a70:	4091      	lsls	r1, r2
 8001a72:	430f      	orrs	r7, r1
 8001a74:	46b9      	mov	r9, r7
 8001a76:	464c      	mov	r4, r9
 8001a78:	1e62      	subs	r2, r4, #1
 8001a7a:	4194      	sbcs	r4, r2
 8001a7c:	4334      	orrs	r4, r6
 8001a7e:	e13a      	b.n	8001cf6 <__aeabi_dsub+0x41a>
 8001a80:	000a      	movs	r2, r1
 8001a82:	433a      	orrs	r2, r7
 8001a84:	d028      	beq.n	8001ad8 <__aeabi_dsub+0x1fc>
 8001a86:	46b3      	mov	fp, r6
 8001a88:	42b5      	cmp	r5, r6
 8001a8a:	d02b      	beq.n	8001ae4 <__aeabi_dsub+0x208>
 8001a8c:	4a6b      	ldr	r2, [pc, #428]	; (8001c3c <__aeabi_dsub+0x360>)
 8001a8e:	4442      	add	r2, r8
 8001a90:	2a00      	cmp	r2, #0
 8001a92:	d05d      	beq.n	8001b50 <__aeabi_dsub+0x274>
 8001a94:	4642      	mov	r2, r8
 8001a96:	4644      	mov	r4, r8
 8001a98:	1a82      	subs	r2, r0, r2
 8001a9a:	2c00      	cmp	r4, #0
 8001a9c:	d000      	beq.n	8001aa0 <__aeabi_dsub+0x1c4>
 8001a9e:	e0f5      	b.n	8001c8c <__aeabi_dsub+0x3b0>
 8001aa0:	4665      	mov	r5, ip
 8001aa2:	431d      	orrs	r5, r3
 8001aa4:	d100      	bne.n	8001aa8 <__aeabi_dsub+0x1cc>
 8001aa6:	e19c      	b.n	8001de2 <__aeabi_dsub+0x506>
 8001aa8:	1e55      	subs	r5, r2, #1
 8001aaa:	2a01      	cmp	r2, #1
 8001aac:	d100      	bne.n	8001ab0 <__aeabi_dsub+0x1d4>
 8001aae:	e1fb      	b.n	8001ea8 <__aeabi_dsub+0x5cc>
 8001ab0:	4c60      	ldr	r4, [pc, #384]	; (8001c34 <__aeabi_dsub+0x358>)
 8001ab2:	42a2      	cmp	r2, r4
 8001ab4:	d100      	bne.n	8001ab8 <__aeabi_dsub+0x1dc>
 8001ab6:	e1bd      	b.n	8001e34 <__aeabi_dsub+0x558>
 8001ab8:	002a      	movs	r2, r5
 8001aba:	e0f0      	b.n	8001c9e <__aeabi_dsub+0x3c2>
 8001abc:	0008      	movs	r0, r1
 8001abe:	4338      	orrs	r0, r7
 8001ac0:	d100      	bne.n	8001ac4 <__aeabi_dsub+0x1e8>
 8001ac2:	e0c3      	b.n	8001c4c <__aeabi_dsub+0x370>
 8001ac4:	1e50      	subs	r0, r2, #1
 8001ac6:	2a01      	cmp	r2, #1
 8001ac8:	d100      	bne.n	8001acc <__aeabi_dsub+0x1f0>
 8001aca:	e1a8      	b.n	8001e1e <__aeabi_dsub+0x542>
 8001acc:	4c59      	ldr	r4, [pc, #356]	; (8001c34 <__aeabi_dsub+0x358>)
 8001ace:	42a2      	cmp	r2, r4
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dsub+0x1f8>
 8001ad2:	e087      	b.n	8001be4 <__aeabi_dsub+0x308>
 8001ad4:	0002      	movs	r2, r0
 8001ad6:	e736      	b.n	8001946 <__aeabi_dsub+0x6a>
 8001ad8:	2201      	movs	r2, #1
 8001ada:	4056      	eors	r6, r2
 8001adc:	46b3      	mov	fp, r6
 8001ade:	42b5      	cmp	r5, r6
 8001ae0:	d000      	beq.n	8001ae4 <__aeabi_dsub+0x208>
 8001ae2:	e721      	b.n	8001928 <__aeabi_dsub+0x4c>
 8001ae4:	4a55      	ldr	r2, [pc, #340]	; (8001c3c <__aeabi_dsub+0x360>)
 8001ae6:	4442      	add	r2, r8
 8001ae8:	2a00      	cmp	r2, #0
 8001aea:	d100      	bne.n	8001aee <__aeabi_dsub+0x212>
 8001aec:	e0b5      	b.n	8001c5a <__aeabi_dsub+0x37e>
 8001aee:	4642      	mov	r2, r8
 8001af0:	4644      	mov	r4, r8
 8001af2:	1a82      	subs	r2, r0, r2
 8001af4:	2c00      	cmp	r4, #0
 8001af6:	d100      	bne.n	8001afa <__aeabi_dsub+0x21e>
 8001af8:	e138      	b.n	8001d6c <__aeabi_dsub+0x490>
 8001afa:	4e4e      	ldr	r6, [pc, #312]	; (8001c34 <__aeabi_dsub+0x358>)
 8001afc:	42b0      	cmp	r0, r6
 8001afe:	d100      	bne.n	8001b02 <__aeabi_dsub+0x226>
 8001b00:	e1de      	b.n	8001ec0 <__aeabi_dsub+0x5e4>
 8001b02:	2680      	movs	r6, #128	; 0x80
 8001b04:	4664      	mov	r4, ip
 8001b06:	0436      	lsls	r6, r6, #16
 8001b08:	4334      	orrs	r4, r6
 8001b0a:	46a4      	mov	ip, r4
 8001b0c:	2a38      	cmp	r2, #56	; 0x38
 8001b0e:	dd00      	ble.n	8001b12 <__aeabi_dsub+0x236>
 8001b10:	e196      	b.n	8001e40 <__aeabi_dsub+0x564>
 8001b12:	2a1f      	cmp	r2, #31
 8001b14:	dd00      	ble.n	8001b18 <__aeabi_dsub+0x23c>
 8001b16:	e224      	b.n	8001f62 <__aeabi_dsub+0x686>
 8001b18:	2620      	movs	r6, #32
 8001b1a:	1ab4      	subs	r4, r6, r2
 8001b1c:	46a2      	mov	sl, r4
 8001b1e:	4664      	mov	r4, ip
 8001b20:	4656      	mov	r6, sl
 8001b22:	40b4      	lsls	r4, r6
 8001b24:	46a1      	mov	r9, r4
 8001b26:	001c      	movs	r4, r3
 8001b28:	464e      	mov	r6, r9
 8001b2a:	40d4      	lsrs	r4, r2
 8001b2c:	4326      	orrs	r6, r4
 8001b2e:	0034      	movs	r4, r6
 8001b30:	4656      	mov	r6, sl
 8001b32:	40b3      	lsls	r3, r6
 8001b34:	1e5e      	subs	r6, r3, #1
 8001b36:	41b3      	sbcs	r3, r6
 8001b38:	431c      	orrs	r4, r3
 8001b3a:	4663      	mov	r3, ip
 8001b3c:	40d3      	lsrs	r3, r2
 8001b3e:	18c9      	adds	r1, r1, r3
 8001b40:	19e4      	adds	r4, r4, r7
 8001b42:	42bc      	cmp	r4, r7
 8001b44:	41bf      	sbcs	r7, r7
 8001b46:	427f      	negs	r7, r7
 8001b48:	46b9      	mov	r9, r7
 8001b4a:	4680      	mov	r8, r0
 8001b4c:	4489      	add	r9, r1
 8001b4e:	e0d8      	b.n	8001d02 <__aeabi_dsub+0x426>
 8001b50:	4640      	mov	r0, r8
 8001b52:	4c3b      	ldr	r4, [pc, #236]	; (8001c40 <__aeabi_dsub+0x364>)
 8001b54:	3001      	adds	r0, #1
 8001b56:	4220      	tst	r0, r4
 8001b58:	d000      	beq.n	8001b5c <__aeabi_dsub+0x280>
 8001b5a:	e0b4      	b.n	8001cc6 <__aeabi_dsub+0x3ea>
 8001b5c:	4640      	mov	r0, r8
 8001b5e:	2800      	cmp	r0, #0
 8001b60:	d000      	beq.n	8001b64 <__aeabi_dsub+0x288>
 8001b62:	e144      	b.n	8001dee <__aeabi_dsub+0x512>
 8001b64:	4660      	mov	r0, ip
 8001b66:	4318      	orrs	r0, r3
 8001b68:	d100      	bne.n	8001b6c <__aeabi_dsub+0x290>
 8001b6a:	e190      	b.n	8001e8e <__aeabi_dsub+0x5b2>
 8001b6c:	0008      	movs	r0, r1
 8001b6e:	4338      	orrs	r0, r7
 8001b70:	d000      	beq.n	8001b74 <__aeabi_dsub+0x298>
 8001b72:	e1aa      	b.n	8001eca <__aeabi_dsub+0x5ee>
 8001b74:	4661      	mov	r1, ip
 8001b76:	08db      	lsrs	r3, r3, #3
 8001b78:	0749      	lsls	r1, r1, #29
 8001b7a:	430b      	orrs	r3, r1
 8001b7c:	4661      	mov	r1, ip
 8001b7e:	08cc      	lsrs	r4, r1, #3
 8001b80:	e027      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001b82:	0008      	movs	r0, r1
 8001b84:	4338      	orrs	r0, r7
 8001b86:	d061      	beq.n	8001c4c <__aeabi_dsub+0x370>
 8001b88:	1e50      	subs	r0, r2, #1
 8001b8a:	2a01      	cmp	r2, #1
 8001b8c:	d100      	bne.n	8001b90 <__aeabi_dsub+0x2b4>
 8001b8e:	e139      	b.n	8001e04 <__aeabi_dsub+0x528>
 8001b90:	42a2      	cmp	r2, r4
 8001b92:	d027      	beq.n	8001be4 <__aeabi_dsub+0x308>
 8001b94:	0002      	movs	r2, r0
 8001b96:	e75d      	b.n	8001a54 <__aeabi_dsub+0x178>
 8001b98:	0002      	movs	r2, r0
 8001b9a:	391f      	subs	r1, #31
 8001b9c:	40ca      	lsrs	r2, r1
 8001b9e:	0011      	movs	r1, r2
 8001ba0:	2b20      	cmp	r3, #32
 8001ba2:	d003      	beq.n	8001bac <__aeabi_dsub+0x2d0>
 8001ba4:	2240      	movs	r2, #64	; 0x40
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	4098      	lsls	r0, r3
 8001baa:	4304      	orrs	r4, r0
 8001bac:	1e63      	subs	r3, r4, #1
 8001bae:	419c      	sbcs	r4, r3
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	4699      	mov	r9, r3
 8001bb4:	4698      	mov	r8, r3
 8001bb6:	430c      	orrs	r4, r1
 8001bb8:	0763      	lsls	r3, r4, #29
 8001bba:	d000      	beq.n	8001bbe <__aeabi_dsub+0x2e2>
 8001bbc:	e712      	b.n	80019e4 <__aeabi_dsub+0x108>
 8001bbe:	464b      	mov	r3, r9
 8001bc0:	464a      	mov	r2, r9
 8001bc2:	08e4      	lsrs	r4, r4, #3
 8001bc4:	075b      	lsls	r3, r3, #29
 8001bc6:	4323      	orrs	r3, r4
 8001bc8:	08d4      	lsrs	r4, r2, #3
 8001bca:	4642      	mov	r2, r8
 8001bcc:	4919      	ldr	r1, [pc, #100]	; (8001c34 <__aeabi_dsub+0x358>)
 8001bce:	428a      	cmp	r2, r1
 8001bd0:	d00e      	beq.n	8001bf0 <__aeabi_dsub+0x314>
 8001bd2:	0324      	lsls	r4, r4, #12
 8001bd4:	0552      	lsls	r2, r2, #21
 8001bd6:	0b24      	lsrs	r4, r4, #12
 8001bd8:	0d52      	lsrs	r2, r2, #21
 8001bda:	e722      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001bdc:	000a      	movs	r2, r1
 8001bde:	2400      	movs	r4, #0
 8001be0:	2300      	movs	r3, #0
 8001be2:	e71e      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001be4:	08db      	lsrs	r3, r3, #3
 8001be6:	4662      	mov	r2, ip
 8001be8:	0752      	lsls	r2, r2, #29
 8001bea:	4313      	orrs	r3, r2
 8001bec:	4662      	mov	r2, ip
 8001bee:	08d4      	lsrs	r4, r2, #3
 8001bf0:	001a      	movs	r2, r3
 8001bf2:	4322      	orrs	r2, r4
 8001bf4:	d100      	bne.n	8001bf8 <__aeabi_dsub+0x31c>
 8001bf6:	e1fc      	b.n	8001ff2 <__aeabi_dsub+0x716>
 8001bf8:	2280      	movs	r2, #128	; 0x80
 8001bfa:	0312      	lsls	r2, r2, #12
 8001bfc:	4314      	orrs	r4, r2
 8001bfe:	0324      	lsls	r4, r4, #12
 8001c00:	4a0c      	ldr	r2, [pc, #48]	; (8001c34 <__aeabi_dsub+0x358>)
 8001c02:	0b24      	lsrs	r4, r4, #12
 8001c04:	e70d      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001c06:	0020      	movs	r0, r4
 8001c08:	f000 fb2c 	bl	8002264 <__clzsi2>
 8001c0c:	0001      	movs	r1, r0
 8001c0e:	3118      	adds	r1, #24
 8001c10:	291f      	cmp	r1, #31
 8001c12:	dc00      	bgt.n	8001c16 <__aeabi_dsub+0x33a>
 8001c14:	e6c4      	b.n	80019a0 <__aeabi_dsub+0xc4>
 8001c16:	3808      	subs	r0, #8
 8001c18:	4084      	lsls	r4, r0
 8001c1a:	4643      	mov	r3, r8
 8001c1c:	0020      	movs	r0, r4
 8001c1e:	2400      	movs	r4, #0
 8001c20:	4588      	cmp	r8, r1
 8001c22:	dc00      	bgt.n	8001c26 <__aeabi_dsub+0x34a>
 8001c24:	e6c8      	b.n	80019b8 <__aeabi_dsub+0xdc>
 8001c26:	4a04      	ldr	r2, [pc, #16]	; (8001c38 <__aeabi_dsub+0x35c>)
 8001c28:	1a5b      	subs	r3, r3, r1
 8001c2a:	4010      	ands	r0, r2
 8001c2c:	4698      	mov	r8, r3
 8001c2e:	4681      	mov	r9, r0
 8001c30:	e6d6      	b.n	80019e0 <__aeabi_dsub+0x104>
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	000007ff 	.word	0x000007ff
 8001c38:	ff7fffff 	.word	0xff7fffff
 8001c3c:	fffff801 	.word	0xfffff801
 8001c40:	000007fe 	.word	0x000007fe
 8001c44:	430f      	orrs	r7, r1
 8001c46:	1e7a      	subs	r2, r7, #1
 8001c48:	4197      	sbcs	r7, r2
 8001c4a:	e691      	b.n	8001970 <__aeabi_dsub+0x94>
 8001c4c:	4661      	mov	r1, ip
 8001c4e:	08db      	lsrs	r3, r3, #3
 8001c50:	0749      	lsls	r1, r1, #29
 8001c52:	430b      	orrs	r3, r1
 8001c54:	4661      	mov	r1, ip
 8001c56:	08cc      	lsrs	r4, r1, #3
 8001c58:	e7b8      	b.n	8001bcc <__aeabi_dsub+0x2f0>
 8001c5a:	4640      	mov	r0, r8
 8001c5c:	4cd3      	ldr	r4, [pc, #844]	; (8001fac <__aeabi_dsub+0x6d0>)
 8001c5e:	3001      	adds	r0, #1
 8001c60:	4220      	tst	r0, r4
 8001c62:	d000      	beq.n	8001c66 <__aeabi_dsub+0x38a>
 8001c64:	e0a2      	b.n	8001dac <__aeabi_dsub+0x4d0>
 8001c66:	4640      	mov	r0, r8
 8001c68:	2800      	cmp	r0, #0
 8001c6a:	d000      	beq.n	8001c6e <__aeabi_dsub+0x392>
 8001c6c:	e101      	b.n	8001e72 <__aeabi_dsub+0x596>
 8001c6e:	4660      	mov	r0, ip
 8001c70:	4318      	orrs	r0, r3
 8001c72:	d100      	bne.n	8001c76 <__aeabi_dsub+0x39a>
 8001c74:	e15e      	b.n	8001f34 <__aeabi_dsub+0x658>
 8001c76:	0008      	movs	r0, r1
 8001c78:	4338      	orrs	r0, r7
 8001c7a:	d000      	beq.n	8001c7e <__aeabi_dsub+0x3a2>
 8001c7c:	e15f      	b.n	8001f3e <__aeabi_dsub+0x662>
 8001c7e:	4661      	mov	r1, ip
 8001c80:	08db      	lsrs	r3, r3, #3
 8001c82:	0749      	lsls	r1, r1, #29
 8001c84:	430b      	orrs	r3, r1
 8001c86:	4661      	mov	r1, ip
 8001c88:	08cc      	lsrs	r4, r1, #3
 8001c8a:	e7a2      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001c8c:	4dc8      	ldr	r5, [pc, #800]	; (8001fb0 <__aeabi_dsub+0x6d4>)
 8001c8e:	42a8      	cmp	r0, r5
 8001c90:	d100      	bne.n	8001c94 <__aeabi_dsub+0x3b8>
 8001c92:	e0cf      	b.n	8001e34 <__aeabi_dsub+0x558>
 8001c94:	2580      	movs	r5, #128	; 0x80
 8001c96:	4664      	mov	r4, ip
 8001c98:	042d      	lsls	r5, r5, #16
 8001c9a:	432c      	orrs	r4, r5
 8001c9c:	46a4      	mov	ip, r4
 8001c9e:	2a38      	cmp	r2, #56	; 0x38
 8001ca0:	dc56      	bgt.n	8001d50 <__aeabi_dsub+0x474>
 8001ca2:	2a1f      	cmp	r2, #31
 8001ca4:	dd00      	ble.n	8001ca8 <__aeabi_dsub+0x3cc>
 8001ca6:	e0d1      	b.n	8001e4c <__aeabi_dsub+0x570>
 8001ca8:	2520      	movs	r5, #32
 8001caa:	001e      	movs	r6, r3
 8001cac:	1aad      	subs	r5, r5, r2
 8001cae:	4664      	mov	r4, ip
 8001cb0:	40ab      	lsls	r3, r5
 8001cb2:	40ac      	lsls	r4, r5
 8001cb4:	40d6      	lsrs	r6, r2
 8001cb6:	1e5d      	subs	r5, r3, #1
 8001cb8:	41ab      	sbcs	r3, r5
 8001cba:	4334      	orrs	r4, r6
 8001cbc:	4323      	orrs	r3, r4
 8001cbe:	4664      	mov	r4, ip
 8001cc0:	40d4      	lsrs	r4, r2
 8001cc2:	1b09      	subs	r1, r1, r4
 8001cc4:	e049      	b.n	8001d5a <__aeabi_dsub+0x47e>
 8001cc6:	4660      	mov	r0, ip
 8001cc8:	1bdc      	subs	r4, r3, r7
 8001cca:	1a46      	subs	r6, r0, r1
 8001ccc:	42a3      	cmp	r3, r4
 8001cce:	4180      	sbcs	r0, r0
 8001cd0:	4240      	negs	r0, r0
 8001cd2:	4681      	mov	r9, r0
 8001cd4:	0030      	movs	r0, r6
 8001cd6:	464e      	mov	r6, r9
 8001cd8:	1b80      	subs	r0, r0, r6
 8001cda:	4681      	mov	r9, r0
 8001cdc:	0200      	lsls	r0, r0, #8
 8001cde:	d476      	bmi.n	8001dce <__aeabi_dsub+0x4f2>
 8001ce0:	464b      	mov	r3, r9
 8001ce2:	4323      	orrs	r3, r4
 8001ce4:	d000      	beq.n	8001ce8 <__aeabi_dsub+0x40c>
 8001ce6:	e652      	b.n	800198e <__aeabi_dsub+0xb2>
 8001ce8:	2400      	movs	r4, #0
 8001cea:	2500      	movs	r5, #0
 8001cec:	e771      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001cee:	4339      	orrs	r1, r7
 8001cf0:	000c      	movs	r4, r1
 8001cf2:	1e62      	subs	r2, r4, #1
 8001cf4:	4194      	sbcs	r4, r2
 8001cf6:	18e4      	adds	r4, r4, r3
 8001cf8:	429c      	cmp	r4, r3
 8001cfa:	419b      	sbcs	r3, r3
 8001cfc:	425b      	negs	r3, r3
 8001cfe:	4463      	add	r3, ip
 8001d00:	4699      	mov	r9, r3
 8001d02:	464b      	mov	r3, r9
 8001d04:	021b      	lsls	r3, r3, #8
 8001d06:	d400      	bmi.n	8001d0a <__aeabi_dsub+0x42e>
 8001d08:	e756      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	469c      	mov	ip, r3
 8001d0e:	4ba8      	ldr	r3, [pc, #672]	; (8001fb0 <__aeabi_dsub+0x6d4>)
 8001d10:	44e0      	add	r8, ip
 8001d12:	4598      	cmp	r8, r3
 8001d14:	d038      	beq.n	8001d88 <__aeabi_dsub+0x4ac>
 8001d16:	464b      	mov	r3, r9
 8001d18:	48a6      	ldr	r0, [pc, #664]	; (8001fb4 <__aeabi_dsub+0x6d8>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	4003      	ands	r3, r0
 8001d1e:	0018      	movs	r0, r3
 8001d20:	0863      	lsrs	r3, r4, #1
 8001d22:	4014      	ands	r4, r2
 8001d24:	431c      	orrs	r4, r3
 8001d26:	07c3      	lsls	r3, r0, #31
 8001d28:	431c      	orrs	r4, r3
 8001d2a:	0843      	lsrs	r3, r0, #1
 8001d2c:	4699      	mov	r9, r3
 8001d2e:	e657      	b.n	80019e0 <__aeabi_dsub+0x104>
 8001d30:	0010      	movs	r0, r2
 8001d32:	000e      	movs	r6, r1
 8001d34:	3820      	subs	r0, #32
 8001d36:	40c6      	lsrs	r6, r0
 8001d38:	2a20      	cmp	r2, #32
 8001d3a:	d004      	beq.n	8001d46 <__aeabi_dsub+0x46a>
 8001d3c:	2040      	movs	r0, #64	; 0x40
 8001d3e:	1a82      	subs	r2, r0, r2
 8001d40:	4091      	lsls	r1, r2
 8001d42:	430f      	orrs	r7, r1
 8001d44:	46b9      	mov	r9, r7
 8001d46:	464f      	mov	r7, r9
 8001d48:	1e7a      	subs	r2, r7, #1
 8001d4a:	4197      	sbcs	r7, r2
 8001d4c:	4337      	orrs	r7, r6
 8001d4e:	e60f      	b.n	8001970 <__aeabi_dsub+0x94>
 8001d50:	4662      	mov	r2, ip
 8001d52:	431a      	orrs	r2, r3
 8001d54:	0013      	movs	r3, r2
 8001d56:	1e5a      	subs	r2, r3, #1
 8001d58:	4193      	sbcs	r3, r2
 8001d5a:	1afc      	subs	r4, r7, r3
 8001d5c:	42a7      	cmp	r7, r4
 8001d5e:	41bf      	sbcs	r7, r7
 8001d60:	427f      	negs	r7, r7
 8001d62:	1bcb      	subs	r3, r1, r7
 8001d64:	4699      	mov	r9, r3
 8001d66:	465d      	mov	r5, fp
 8001d68:	4680      	mov	r8, r0
 8001d6a:	e608      	b.n	800197e <__aeabi_dsub+0xa2>
 8001d6c:	4666      	mov	r6, ip
 8001d6e:	431e      	orrs	r6, r3
 8001d70:	d100      	bne.n	8001d74 <__aeabi_dsub+0x498>
 8001d72:	e0be      	b.n	8001ef2 <__aeabi_dsub+0x616>
 8001d74:	1e56      	subs	r6, r2, #1
 8001d76:	2a01      	cmp	r2, #1
 8001d78:	d100      	bne.n	8001d7c <__aeabi_dsub+0x4a0>
 8001d7a:	e109      	b.n	8001f90 <__aeabi_dsub+0x6b4>
 8001d7c:	4c8c      	ldr	r4, [pc, #560]	; (8001fb0 <__aeabi_dsub+0x6d4>)
 8001d7e:	42a2      	cmp	r2, r4
 8001d80:	d100      	bne.n	8001d84 <__aeabi_dsub+0x4a8>
 8001d82:	e119      	b.n	8001fb8 <__aeabi_dsub+0x6dc>
 8001d84:	0032      	movs	r2, r6
 8001d86:	e6c1      	b.n	8001b0c <__aeabi_dsub+0x230>
 8001d88:	4642      	mov	r2, r8
 8001d8a:	2400      	movs	r4, #0
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	e648      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001d90:	2020      	movs	r0, #32
 8001d92:	000c      	movs	r4, r1
 8001d94:	1a80      	subs	r0, r0, r2
 8001d96:	003e      	movs	r6, r7
 8001d98:	4087      	lsls	r7, r0
 8001d9a:	4084      	lsls	r4, r0
 8001d9c:	40d6      	lsrs	r6, r2
 8001d9e:	1e78      	subs	r0, r7, #1
 8001da0:	4187      	sbcs	r7, r0
 8001da2:	40d1      	lsrs	r1, r2
 8001da4:	4334      	orrs	r4, r6
 8001da6:	433c      	orrs	r4, r7
 8001da8:	448c      	add	ip, r1
 8001daa:	e7a4      	b.n	8001cf6 <__aeabi_dsub+0x41a>
 8001dac:	4a80      	ldr	r2, [pc, #512]	; (8001fb0 <__aeabi_dsub+0x6d4>)
 8001dae:	4290      	cmp	r0, r2
 8001db0:	d100      	bne.n	8001db4 <__aeabi_dsub+0x4d8>
 8001db2:	e0e9      	b.n	8001f88 <__aeabi_dsub+0x6ac>
 8001db4:	19df      	adds	r7, r3, r7
 8001db6:	429f      	cmp	r7, r3
 8001db8:	419b      	sbcs	r3, r3
 8001dba:	4461      	add	r1, ip
 8001dbc:	425b      	negs	r3, r3
 8001dbe:	18c9      	adds	r1, r1, r3
 8001dc0:	07cc      	lsls	r4, r1, #31
 8001dc2:	087f      	lsrs	r7, r7, #1
 8001dc4:	084b      	lsrs	r3, r1, #1
 8001dc6:	4699      	mov	r9, r3
 8001dc8:	4680      	mov	r8, r0
 8001dca:	433c      	orrs	r4, r7
 8001dcc:	e6f4      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001dce:	1afc      	subs	r4, r7, r3
 8001dd0:	42a7      	cmp	r7, r4
 8001dd2:	41bf      	sbcs	r7, r7
 8001dd4:	4663      	mov	r3, ip
 8001dd6:	427f      	negs	r7, r7
 8001dd8:	1ac9      	subs	r1, r1, r3
 8001dda:	1bcb      	subs	r3, r1, r7
 8001ddc:	4699      	mov	r9, r3
 8001dde:	465d      	mov	r5, fp
 8001de0:	e5d5      	b.n	800198e <__aeabi_dsub+0xb2>
 8001de2:	08ff      	lsrs	r7, r7, #3
 8001de4:	074b      	lsls	r3, r1, #29
 8001de6:	465d      	mov	r5, fp
 8001de8:	433b      	orrs	r3, r7
 8001dea:	08cc      	lsrs	r4, r1, #3
 8001dec:	e6ee      	b.n	8001bcc <__aeabi_dsub+0x2f0>
 8001dee:	4662      	mov	r2, ip
 8001df0:	431a      	orrs	r2, r3
 8001df2:	d000      	beq.n	8001df6 <__aeabi_dsub+0x51a>
 8001df4:	e082      	b.n	8001efc <__aeabi_dsub+0x620>
 8001df6:	000b      	movs	r3, r1
 8001df8:	433b      	orrs	r3, r7
 8001dfa:	d11b      	bne.n	8001e34 <__aeabi_dsub+0x558>
 8001dfc:	2480      	movs	r4, #128	; 0x80
 8001dfe:	2500      	movs	r5, #0
 8001e00:	0324      	lsls	r4, r4, #12
 8001e02:	e6f9      	b.n	8001bf8 <__aeabi_dsub+0x31c>
 8001e04:	19dc      	adds	r4, r3, r7
 8001e06:	429c      	cmp	r4, r3
 8001e08:	419b      	sbcs	r3, r3
 8001e0a:	4461      	add	r1, ip
 8001e0c:	4689      	mov	r9, r1
 8001e0e:	425b      	negs	r3, r3
 8001e10:	4499      	add	r9, r3
 8001e12:	464b      	mov	r3, r9
 8001e14:	021b      	lsls	r3, r3, #8
 8001e16:	d444      	bmi.n	8001ea2 <__aeabi_dsub+0x5c6>
 8001e18:	2301      	movs	r3, #1
 8001e1a:	4698      	mov	r8, r3
 8001e1c:	e6cc      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001e1e:	1bdc      	subs	r4, r3, r7
 8001e20:	4662      	mov	r2, ip
 8001e22:	42a3      	cmp	r3, r4
 8001e24:	419b      	sbcs	r3, r3
 8001e26:	1a51      	subs	r1, r2, r1
 8001e28:	425b      	negs	r3, r3
 8001e2a:	1acb      	subs	r3, r1, r3
 8001e2c:	4699      	mov	r9, r3
 8001e2e:	2301      	movs	r3, #1
 8001e30:	4698      	mov	r8, r3
 8001e32:	e5a4      	b.n	800197e <__aeabi_dsub+0xa2>
 8001e34:	08ff      	lsrs	r7, r7, #3
 8001e36:	074b      	lsls	r3, r1, #29
 8001e38:	465d      	mov	r5, fp
 8001e3a:	433b      	orrs	r3, r7
 8001e3c:	08cc      	lsrs	r4, r1, #3
 8001e3e:	e6d7      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001e40:	4662      	mov	r2, ip
 8001e42:	431a      	orrs	r2, r3
 8001e44:	0014      	movs	r4, r2
 8001e46:	1e63      	subs	r3, r4, #1
 8001e48:	419c      	sbcs	r4, r3
 8001e4a:	e679      	b.n	8001b40 <__aeabi_dsub+0x264>
 8001e4c:	0015      	movs	r5, r2
 8001e4e:	4664      	mov	r4, ip
 8001e50:	3d20      	subs	r5, #32
 8001e52:	40ec      	lsrs	r4, r5
 8001e54:	46a0      	mov	r8, r4
 8001e56:	2a20      	cmp	r2, #32
 8001e58:	d005      	beq.n	8001e66 <__aeabi_dsub+0x58a>
 8001e5a:	2540      	movs	r5, #64	; 0x40
 8001e5c:	4664      	mov	r4, ip
 8001e5e:	1aaa      	subs	r2, r5, r2
 8001e60:	4094      	lsls	r4, r2
 8001e62:	4323      	orrs	r3, r4
 8001e64:	469a      	mov	sl, r3
 8001e66:	4654      	mov	r4, sl
 8001e68:	1e63      	subs	r3, r4, #1
 8001e6a:	419c      	sbcs	r4, r3
 8001e6c:	4643      	mov	r3, r8
 8001e6e:	4323      	orrs	r3, r4
 8001e70:	e773      	b.n	8001d5a <__aeabi_dsub+0x47e>
 8001e72:	4662      	mov	r2, ip
 8001e74:	431a      	orrs	r2, r3
 8001e76:	d023      	beq.n	8001ec0 <__aeabi_dsub+0x5e4>
 8001e78:	000a      	movs	r2, r1
 8001e7a:	433a      	orrs	r2, r7
 8001e7c:	d000      	beq.n	8001e80 <__aeabi_dsub+0x5a4>
 8001e7e:	e0a0      	b.n	8001fc2 <__aeabi_dsub+0x6e6>
 8001e80:	4662      	mov	r2, ip
 8001e82:	08db      	lsrs	r3, r3, #3
 8001e84:	0752      	lsls	r2, r2, #29
 8001e86:	4313      	orrs	r3, r2
 8001e88:	4662      	mov	r2, ip
 8001e8a:	08d4      	lsrs	r4, r2, #3
 8001e8c:	e6b0      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001e8e:	000b      	movs	r3, r1
 8001e90:	433b      	orrs	r3, r7
 8001e92:	d100      	bne.n	8001e96 <__aeabi_dsub+0x5ba>
 8001e94:	e728      	b.n	8001ce8 <__aeabi_dsub+0x40c>
 8001e96:	08ff      	lsrs	r7, r7, #3
 8001e98:	074b      	lsls	r3, r1, #29
 8001e9a:	465d      	mov	r5, fp
 8001e9c:	433b      	orrs	r3, r7
 8001e9e:	08cc      	lsrs	r4, r1, #3
 8001ea0:	e697      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	4698      	mov	r8, r3
 8001ea6:	e736      	b.n	8001d16 <__aeabi_dsub+0x43a>
 8001ea8:	1afc      	subs	r4, r7, r3
 8001eaa:	42a7      	cmp	r7, r4
 8001eac:	41bf      	sbcs	r7, r7
 8001eae:	4663      	mov	r3, ip
 8001eb0:	427f      	negs	r7, r7
 8001eb2:	1ac9      	subs	r1, r1, r3
 8001eb4:	1bcb      	subs	r3, r1, r7
 8001eb6:	4699      	mov	r9, r3
 8001eb8:	2301      	movs	r3, #1
 8001eba:	465d      	mov	r5, fp
 8001ebc:	4698      	mov	r8, r3
 8001ebe:	e55e      	b.n	800197e <__aeabi_dsub+0xa2>
 8001ec0:	074b      	lsls	r3, r1, #29
 8001ec2:	08ff      	lsrs	r7, r7, #3
 8001ec4:	433b      	orrs	r3, r7
 8001ec6:	08cc      	lsrs	r4, r1, #3
 8001ec8:	e692      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001eca:	1bdc      	subs	r4, r3, r7
 8001ecc:	4660      	mov	r0, ip
 8001ece:	42a3      	cmp	r3, r4
 8001ed0:	41b6      	sbcs	r6, r6
 8001ed2:	1a40      	subs	r0, r0, r1
 8001ed4:	4276      	negs	r6, r6
 8001ed6:	1b80      	subs	r0, r0, r6
 8001ed8:	4681      	mov	r9, r0
 8001eda:	0200      	lsls	r0, r0, #8
 8001edc:	d560      	bpl.n	8001fa0 <__aeabi_dsub+0x6c4>
 8001ede:	1afc      	subs	r4, r7, r3
 8001ee0:	42a7      	cmp	r7, r4
 8001ee2:	41bf      	sbcs	r7, r7
 8001ee4:	4663      	mov	r3, ip
 8001ee6:	427f      	negs	r7, r7
 8001ee8:	1ac9      	subs	r1, r1, r3
 8001eea:	1bcb      	subs	r3, r1, r7
 8001eec:	4699      	mov	r9, r3
 8001eee:	465d      	mov	r5, fp
 8001ef0:	e576      	b.n	80019e0 <__aeabi_dsub+0x104>
 8001ef2:	08ff      	lsrs	r7, r7, #3
 8001ef4:	074b      	lsls	r3, r1, #29
 8001ef6:	433b      	orrs	r3, r7
 8001ef8:	08cc      	lsrs	r4, r1, #3
 8001efa:	e667      	b.n	8001bcc <__aeabi_dsub+0x2f0>
 8001efc:	000a      	movs	r2, r1
 8001efe:	08db      	lsrs	r3, r3, #3
 8001f00:	433a      	orrs	r2, r7
 8001f02:	d100      	bne.n	8001f06 <__aeabi_dsub+0x62a>
 8001f04:	e66f      	b.n	8001be6 <__aeabi_dsub+0x30a>
 8001f06:	4662      	mov	r2, ip
 8001f08:	0752      	lsls	r2, r2, #29
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	4662      	mov	r2, ip
 8001f0e:	08d4      	lsrs	r4, r2, #3
 8001f10:	2280      	movs	r2, #128	; 0x80
 8001f12:	0312      	lsls	r2, r2, #12
 8001f14:	4214      	tst	r4, r2
 8001f16:	d007      	beq.n	8001f28 <__aeabi_dsub+0x64c>
 8001f18:	08c8      	lsrs	r0, r1, #3
 8001f1a:	4210      	tst	r0, r2
 8001f1c:	d104      	bne.n	8001f28 <__aeabi_dsub+0x64c>
 8001f1e:	465d      	mov	r5, fp
 8001f20:	0004      	movs	r4, r0
 8001f22:	08fb      	lsrs	r3, r7, #3
 8001f24:	0749      	lsls	r1, r1, #29
 8001f26:	430b      	orrs	r3, r1
 8001f28:	0f5a      	lsrs	r2, r3, #29
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	08db      	lsrs	r3, r3, #3
 8001f2e:	0752      	lsls	r2, r2, #29
 8001f30:	4313      	orrs	r3, r2
 8001f32:	e65d      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001f34:	074b      	lsls	r3, r1, #29
 8001f36:	08ff      	lsrs	r7, r7, #3
 8001f38:	433b      	orrs	r3, r7
 8001f3a:	08cc      	lsrs	r4, r1, #3
 8001f3c:	e649      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001f3e:	19dc      	adds	r4, r3, r7
 8001f40:	429c      	cmp	r4, r3
 8001f42:	419b      	sbcs	r3, r3
 8001f44:	4461      	add	r1, ip
 8001f46:	4689      	mov	r9, r1
 8001f48:	425b      	negs	r3, r3
 8001f4a:	4499      	add	r9, r3
 8001f4c:	464b      	mov	r3, r9
 8001f4e:	021b      	lsls	r3, r3, #8
 8001f50:	d400      	bmi.n	8001f54 <__aeabi_dsub+0x678>
 8001f52:	e631      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001f54:	464a      	mov	r2, r9
 8001f56:	4b17      	ldr	r3, [pc, #92]	; (8001fb4 <__aeabi_dsub+0x6d8>)
 8001f58:	401a      	ands	r2, r3
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	4691      	mov	r9, r2
 8001f5e:	4698      	mov	r8, r3
 8001f60:	e62a      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001f62:	0016      	movs	r6, r2
 8001f64:	4664      	mov	r4, ip
 8001f66:	3e20      	subs	r6, #32
 8001f68:	40f4      	lsrs	r4, r6
 8001f6a:	46a0      	mov	r8, r4
 8001f6c:	2a20      	cmp	r2, #32
 8001f6e:	d005      	beq.n	8001f7c <__aeabi_dsub+0x6a0>
 8001f70:	2640      	movs	r6, #64	; 0x40
 8001f72:	4664      	mov	r4, ip
 8001f74:	1ab2      	subs	r2, r6, r2
 8001f76:	4094      	lsls	r4, r2
 8001f78:	4323      	orrs	r3, r4
 8001f7a:	469a      	mov	sl, r3
 8001f7c:	4654      	mov	r4, sl
 8001f7e:	1e63      	subs	r3, r4, #1
 8001f80:	419c      	sbcs	r4, r3
 8001f82:	4643      	mov	r3, r8
 8001f84:	431c      	orrs	r4, r3
 8001f86:	e5db      	b.n	8001b40 <__aeabi_dsub+0x264>
 8001f88:	0002      	movs	r2, r0
 8001f8a:	2400      	movs	r4, #0
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	e548      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001f90:	19dc      	adds	r4, r3, r7
 8001f92:	42bc      	cmp	r4, r7
 8001f94:	41bf      	sbcs	r7, r7
 8001f96:	4461      	add	r1, ip
 8001f98:	4689      	mov	r9, r1
 8001f9a:	427f      	negs	r7, r7
 8001f9c:	44b9      	add	r9, r7
 8001f9e:	e738      	b.n	8001e12 <__aeabi_dsub+0x536>
 8001fa0:	464b      	mov	r3, r9
 8001fa2:	4323      	orrs	r3, r4
 8001fa4:	d100      	bne.n	8001fa8 <__aeabi_dsub+0x6cc>
 8001fa6:	e69f      	b.n	8001ce8 <__aeabi_dsub+0x40c>
 8001fa8:	e606      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	000007fe 	.word	0x000007fe
 8001fb0:	000007ff 	.word	0x000007ff
 8001fb4:	ff7fffff 	.word	0xff7fffff
 8001fb8:	08ff      	lsrs	r7, r7, #3
 8001fba:	074b      	lsls	r3, r1, #29
 8001fbc:	433b      	orrs	r3, r7
 8001fbe:	08cc      	lsrs	r4, r1, #3
 8001fc0:	e616      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001fc2:	4662      	mov	r2, ip
 8001fc4:	08db      	lsrs	r3, r3, #3
 8001fc6:	0752      	lsls	r2, r2, #29
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	4662      	mov	r2, ip
 8001fcc:	08d4      	lsrs	r4, r2, #3
 8001fce:	2280      	movs	r2, #128	; 0x80
 8001fd0:	0312      	lsls	r2, r2, #12
 8001fd2:	4214      	tst	r4, r2
 8001fd4:	d007      	beq.n	8001fe6 <__aeabi_dsub+0x70a>
 8001fd6:	08c8      	lsrs	r0, r1, #3
 8001fd8:	4210      	tst	r0, r2
 8001fda:	d104      	bne.n	8001fe6 <__aeabi_dsub+0x70a>
 8001fdc:	465d      	mov	r5, fp
 8001fde:	0004      	movs	r4, r0
 8001fe0:	08fb      	lsrs	r3, r7, #3
 8001fe2:	0749      	lsls	r1, r1, #29
 8001fe4:	430b      	orrs	r3, r1
 8001fe6:	0f5a      	lsrs	r2, r3, #29
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	0752      	lsls	r2, r2, #29
 8001fec:	08db      	lsrs	r3, r3, #3
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	e5fe      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	4a01      	ldr	r2, [pc, #4]	; (8001ffc <__aeabi_dsub+0x720>)
 8001ff6:	001c      	movs	r4, r3
 8001ff8:	e513      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	000007ff 	.word	0x000007ff

08002000 <__aeabi_dcmpun>:
 8002000:	b570      	push	{r4, r5, r6, lr}
 8002002:	0005      	movs	r5, r0
 8002004:	480c      	ldr	r0, [pc, #48]	; (8002038 <__aeabi_dcmpun+0x38>)
 8002006:	031c      	lsls	r4, r3, #12
 8002008:	0016      	movs	r6, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	030a      	lsls	r2, r1, #12
 800200e:	0049      	lsls	r1, r1, #1
 8002010:	0b12      	lsrs	r2, r2, #12
 8002012:	0d49      	lsrs	r1, r1, #21
 8002014:	0b24      	lsrs	r4, r4, #12
 8002016:	0d5b      	lsrs	r3, r3, #21
 8002018:	4281      	cmp	r1, r0
 800201a:	d008      	beq.n	800202e <__aeabi_dcmpun+0x2e>
 800201c:	4a06      	ldr	r2, [pc, #24]	; (8002038 <__aeabi_dcmpun+0x38>)
 800201e:	2000      	movs	r0, #0
 8002020:	4293      	cmp	r3, r2
 8002022:	d103      	bne.n	800202c <__aeabi_dcmpun+0x2c>
 8002024:	0020      	movs	r0, r4
 8002026:	4330      	orrs	r0, r6
 8002028:	1e43      	subs	r3, r0, #1
 800202a:	4198      	sbcs	r0, r3
 800202c:	bd70      	pop	{r4, r5, r6, pc}
 800202e:	2001      	movs	r0, #1
 8002030:	432a      	orrs	r2, r5
 8002032:	d1fb      	bne.n	800202c <__aeabi_dcmpun+0x2c>
 8002034:	e7f2      	b.n	800201c <__aeabi_dcmpun+0x1c>
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	000007ff 	.word	0x000007ff

0800203c <__aeabi_d2iz>:
 800203c:	000a      	movs	r2, r1
 800203e:	b530      	push	{r4, r5, lr}
 8002040:	4c13      	ldr	r4, [pc, #76]	; (8002090 <__aeabi_d2iz+0x54>)
 8002042:	0053      	lsls	r3, r2, #1
 8002044:	0309      	lsls	r1, r1, #12
 8002046:	0005      	movs	r5, r0
 8002048:	0b09      	lsrs	r1, r1, #12
 800204a:	2000      	movs	r0, #0
 800204c:	0d5b      	lsrs	r3, r3, #21
 800204e:	0fd2      	lsrs	r2, r2, #31
 8002050:	42a3      	cmp	r3, r4
 8002052:	dd04      	ble.n	800205e <__aeabi_d2iz+0x22>
 8002054:	480f      	ldr	r0, [pc, #60]	; (8002094 <__aeabi_d2iz+0x58>)
 8002056:	4283      	cmp	r3, r0
 8002058:	dd02      	ble.n	8002060 <__aeabi_d2iz+0x24>
 800205a:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <__aeabi_d2iz+0x5c>)
 800205c:	18d0      	adds	r0, r2, r3
 800205e:	bd30      	pop	{r4, r5, pc}
 8002060:	2080      	movs	r0, #128	; 0x80
 8002062:	0340      	lsls	r0, r0, #13
 8002064:	4301      	orrs	r1, r0
 8002066:	480d      	ldr	r0, [pc, #52]	; (800209c <__aeabi_d2iz+0x60>)
 8002068:	1ac0      	subs	r0, r0, r3
 800206a:	281f      	cmp	r0, #31
 800206c:	dd08      	ble.n	8002080 <__aeabi_d2iz+0x44>
 800206e:	480c      	ldr	r0, [pc, #48]	; (80020a0 <__aeabi_d2iz+0x64>)
 8002070:	1ac3      	subs	r3, r0, r3
 8002072:	40d9      	lsrs	r1, r3
 8002074:	000b      	movs	r3, r1
 8002076:	4258      	negs	r0, r3
 8002078:	2a00      	cmp	r2, #0
 800207a:	d1f0      	bne.n	800205e <__aeabi_d2iz+0x22>
 800207c:	0018      	movs	r0, r3
 800207e:	e7ee      	b.n	800205e <__aeabi_d2iz+0x22>
 8002080:	4c08      	ldr	r4, [pc, #32]	; (80020a4 <__aeabi_d2iz+0x68>)
 8002082:	40c5      	lsrs	r5, r0
 8002084:	46a4      	mov	ip, r4
 8002086:	4463      	add	r3, ip
 8002088:	4099      	lsls	r1, r3
 800208a:	000b      	movs	r3, r1
 800208c:	432b      	orrs	r3, r5
 800208e:	e7f2      	b.n	8002076 <__aeabi_d2iz+0x3a>
 8002090:	000003fe 	.word	0x000003fe
 8002094:	0000041d 	.word	0x0000041d
 8002098:	7fffffff 	.word	0x7fffffff
 800209c:	00000433 	.word	0x00000433
 80020a0:	00000413 	.word	0x00000413
 80020a4:	fffffbed 	.word	0xfffffbed

080020a8 <__aeabi_i2d>:
 80020a8:	b570      	push	{r4, r5, r6, lr}
 80020aa:	2800      	cmp	r0, #0
 80020ac:	d016      	beq.n	80020dc <__aeabi_i2d+0x34>
 80020ae:	17c3      	asrs	r3, r0, #31
 80020b0:	18c5      	adds	r5, r0, r3
 80020b2:	405d      	eors	r5, r3
 80020b4:	0fc4      	lsrs	r4, r0, #31
 80020b6:	0028      	movs	r0, r5
 80020b8:	f000 f8d4 	bl	8002264 <__clzsi2>
 80020bc:	4a11      	ldr	r2, [pc, #68]	; (8002104 <__aeabi_i2d+0x5c>)
 80020be:	1a12      	subs	r2, r2, r0
 80020c0:	280a      	cmp	r0, #10
 80020c2:	dc16      	bgt.n	80020f2 <__aeabi_i2d+0x4a>
 80020c4:	0003      	movs	r3, r0
 80020c6:	002e      	movs	r6, r5
 80020c8:	3315      	adds	r3, #21
 80020ca:	409e      	lsls	r6, r3
 80020cc:	230b      	movs	r3, #11
 80020ce:	1a18      	subs	r0, r3, r0
 80020d0:	40c5      	lsrs	r5, r0
 80020d2:	0552      	lsls	r2, r2, #21
 80020d4:	032d      	lsls	r5, r5, #12
 80020d6:	0b2d      	lsrs	r5, r5, #12
 80020d8:	0d53      	lsrs	r3, r2, #21
 80020da:	e003      	b.n	80020e4 <__aeabi_i2d+0x3c>
 80020dc:	2400      	movs	r4, #0
 80020de:	2300      	movs	r3, #0
 80020e0:	2500      	movs	r5, #0
 80020e2:	2600      	movs	r6, #0
 80020e4:	051b      	lsls	r3, r3, #20
 80020e6:	432b      	orrs	r3, r5
 80020e8:	07e4      	lsls	r4, r4, #31
 80020ea:	4323      	orrs	r3, r4
 80020ec:	0030      	movs	r0, r6
 80020ee:	0019      	movs	r1, r3
 80020f0:	bd70      	pop	{r4, r5, r6, pc}
 80020f2:	380b      	subs	r0, #11
 80020f4:	4085      	lsls	r5, r0
 80020f6:	0552      	lsls	r2, r2, #21
 80020f8:	032d      	lsls	r5, r5, #12
 80020fa:	2600      	movs	r6, #0
 80020fc:	0b2d      	lsrs	r5, r5, #12
 80020fe:	0d53      	lsrs	r3, r2, #21
 8002100:	e7f0      	b.n	80020e4 <__aeabi_i2d+0x3c>
 8002102:	46c0      	nop			; (mov r8, r8)
 8002104:	0000041e 	.word	0x0000041e

08002108 <__aeabi_ui2d>:
 8002108:	b510      	push	{r4, lr}
 800210a:	1e04      	subs	r4, r0, #0
 800210c:	d010      	beq.n	8002130 <__aeabi_ui2d+0x28>
 800210e:	f000 f8a9 	bl	8002264 <__clzsi2>
 8002112:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <__aeabi_ui2d+0x48>)
 8002114:	1a1b      	subs	r3, r3, r0
 8002116:	280a      	cmp	r0, #10
 8002118:	dc11      	bgt.n	800213e <__aeabi_ui2d+0x36>
 800211a:	220b      	movs	r2, #11
 800211c:	0021      	movs	r1, r4
 800211e:	1a12      	subs	r2, r2, r0
 8002120:	40d1      	lsrs	r1, r2
 8002122:	3015      	adds	r0, #21
 8002124:	030a      	lsls	r2, r1, #12
 8002126:	055b      	lsls	r3, r3, #21
 8002128:	4084      	lsls	r4, r0
 800212a:	0b12      	lsrs	r2, r2, #12
 800212c:	0d5b      	lsrs	r3, r3, #21
 800212e:	e001      	b.n	8002134 <__aeabi_ui2d+0x2c>
 8002130:	2300      	movs	r3, #0
 8002132:	2200      	movs	r2, #0
 8002134:	051b      	lsls	r3, r3, #20
 8002136:	4313      	orrs	r3, r2
 8002138:	0020      	movs	r0, r4
 800213a:	0019      	movs	r1, r3
 800213c:	bd10      	pop	{r4, pc}
 800213e:	0022      	movs	r2, r4
 8002140:	380b      	subs	r0, #11
 8002142:	4082      	lsls	r2, r0
 8002144:	055b      	lsls	r3, r3, #21
 8002146:	0312      	lsls	r2, r2, #12
 8002148:	2400      	movs	r4, #0
 800214a:	0b12      	lsrs	r2, r2, #12
 800214c:	0d5b      	lsrs	r3, r3, #21
 800214e:	e7f1      	b.n	8002134 <__aeabi_ui2d+0x2c>
 8002150:	0000041e 	.word	0x0000041e

08002154 <__aeabi_d2f>:
 8002154:	0002      	movs	r2, r0
 8002156:	004b      	lsls	r3, r1, #1
 8002158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800215a:	0d5b      	lsrs	r3, r3, #21
 800215c:	030c      	lsls	r4, r1, #12
 800215e:	4e3d      	ldr	r6, [pc, #244]	; (8002254 <__aeabi_d2f+0x100>)
 8002160:	0a64      	lsrs	r4, r4, #9
 8002162:	0f40      	lsrs	r0, r0, #29
 8002164:	1c5f      	adds	r7, r3, #1
 8002166:	0fc9      	lsrs	r1, r1, #31
 8002168:	4304      	orrs	r4, r0
 800216a:	00d5      	lsls	r5, r2, #3
 800216c:	4237      	tst	r7, r6
 800216e:	d00a      	beq.n	8002186 <__aeabi_d2f+0x32>
 8002170:	4839      	ldr	r0, [pc, #228]	; (8002258 <__aeabi_d2f+0x104>)
 8002172:	181e      	adds	r6, r3, r0
 8002174:	2efe      	cmp	r6, #254	; 0xfe
 8002176:	dd16      	ble.n	80021a6 <__aeabi_d2f+0x52>
 8002178:	20ff      	movs	r0, #255	; 0xff
 800217a:	2400      	movs	r4, #0
 800217c:	05c0      	lsls	r0, r0, #23
 800217e:	4320      	orrs	r0, r4
 8002180:	07c9      	lsls	r1, r1, #31
 8002182:	4308      	orrs	r0, r1
 8002184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002186:	2b00      	cmp	r3, #0
 8002188:	d106      	bne.n	8002198 <__aeabi_d2f+0x44>
 800218a:	432c      	orrs	r4, r5
 800218c:	d026      	beq.n	80021dc <__aeabi_d2f+0x88>
 800218e:	2205      	movs	r2, #5
 8002190:	0192      	lsls	r2, r2, #6
 8002192:	0a54      	lsrs	r4, r2, #9
 8002194:	b2d8      	uxtb	r0, r3
 8002196:	e7f1      	b.n	800217c <__aeabi_d2f+0x28>
 8002198:	4325      	orrs	r5, r4
 800219a:	d0ed      	beq.n	8002178 <__aeabi_d2f+0x24>
 800219c:	2080      	movs	r0, #128	; 0x80
 800219e:	03c0      	lsls	r0, r0, #15
 80021a0:	4304      	orrs	r4, r0
 80021a2:	20ff      	movs	r0, #255	; 0xff
 80021a4:	e7ea      	b.n	800217c <__aeabi_d2f+0x28>
 80021a6:	2e00      	cmp	r6, #0
 80021a8:	dd1b      	ble.n	80021e2 <__aeabi_d2f+0x8e>
 80021aa:	0192      	lsls	r2, r2, #6
 80021ac:	1e53      	subs	r3, r2, #1
 80021ae:	419a      	sbcs	r2, r3
 80021b0:	00e4      	lsls	r4, r4, #3
 80021b2:	0f6d      	lsrs	r5, r5, #29
 80021b4:	4322      	orrs	r2, r4
 80021b6:	432a      	orrs	r2, r5
 80021b8:	0753      	lsls	r3, r2, #29
 80021ba:	d048      	beq.n	800224e <__aeabi_d2f+0xfa>
 80021bc:	230f      	movs	r3, #15
 80021be:	4013      	ands	r3, r2
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d000      	beq.n	80021c6 <__aeabi_d2f+0x72>
 80021c4:	3204      	adds	r2, #4
 80021c6:	2380      	movs	r3, #128	; 0x80
 80021c8:	04db      	lsls	r3, r3, #19
 80021ca:	4013      	ands	r3, r2
 80021cc:	d03f      	beq.n	800224e <__aeabi_d2f+0xfa>
 80021ce:	1c70      	adds	r0, r6, #1
 80021d0:	2efe      	cmp	r6, #254	; 0xfe
 80021d2:	d0d1      	beq.n	8002178 <__aeabi_d2f+0x24>
 80021d4:	0192      	lsls	r2, r2, #6
 80021d6:	0a54      	lsrs	r4, r2, #9
 80021d8:	b2c0      	uxtb	r0, r0
 80021da:	e7cf      	b.n	800217c <__aeabi_d2f+0x28>
 80021dc:	2000      	movs	r0, #0
 80021de:	2400      	movs	r4, #0
 80021e0:	e7cc      	b.n	800217c <__aeabi_d2f+0x28>
 80021e2:	0032      	movs	r2, r6
 80021e4:	3217      	adds	r2, #23
 80021e6:	db22      	blt.n	800222e <__aeabi_d2f+0xda>
 80021e8:	2080      	movs	r0, #128	; 0x80
 80021ea:	0400      	lsls	r0, r0, #16
 80021ec:	4320      	orrs	r0, r4
 80021ee:	241e      	movs	r4, #30
 80021f0:	1ba4      	subs	r4, r4, r6
 80021f2:	2c1f      	cmp	r4, #31
 80021f4:	dd1d      	ble.n	8002232 <__aeabi_d2f+0xde>
 80021f6:	2202      	movs	r2, #2
 80021f8:	4252      	negs	r2, r2
 80021fa:	1b96      	subs	r6, r2, r6
 80021fc:	0002      	movs	r2, r0
 80021fe:	40f2      	lsrs	r2, r6
 8002200:	0016      	movs	r6, r2
 8002202:	2c20      	cmp	r4, #32
 8002204:	d004      	beq.n	8002210 <__aeabi_d2f+0xbc>
 8002206:	4a15      	ldr	r2, [pc, #84]	; (800225c <__aeabi_d2f+0x108>)
 8002208:	4694      	mov	ip, r2
 800220a:	4463      	add	r3, ip
 800220c:	4098      	lsls	r0, r3
 800220e:	4305      	orrs	r5, r0
 8002210:	002a      	movs	r2, r5
 8002212:	1e53      	subs	r3, r2, #1
 8002214:	419a      	sbcs	r2, r3
 8002216:	4332      	orrs	r2, r6
 8002218:	2600      	movs	r6, #0
 800221a:	0753      	lsls	r3, r2, #29
 800221c:	d1ce      	bne.n	80021bc <__aeabi_d2f+0x68>
 800221e:	2480      	movs	r4, #128	; 0x80
 8002220:	0013      	movs	r3, r2
 8002222:	04e4      	lsls	r4, r4, #19
 8002224:	2001      	movs	r0, #1
 8002226:	4023      	ands	r3, r4
 8002228:	4222      	tst	r2, r4
 800222a:	d1d3      	bne.n	80021d4 <__aeabi_d2f+0x80>
 800222c:	e7b0      	b.n	8002190 <__aeabi_d2f+0x3c>
 800222e:	2300      	movs	r3, #0
 8002230:	e7ad      	b.n	800218e <__aeabi_d2f+0x3a>
 8002232:	4a0b      	ldr	r2, [pc, #44]	; (8002260 <__aeabi_d2f+0x10c>)
 8002234:	4694      	mov	ip, r2
 8002236:	002a      	movs	r2, r5
 8002238:	40e2      	lsrs	r2, r4
 800223a:	0014      	movs	r4, r2
 800223c:	002a      	movs	r2, r5
 800223e:	4463      	add	r3, ip
 8002240:	409a      	lsls	r2, r3
 8002242:	4098      	lsls	r0, r3
 8002244:	1e55      	subs	r5, r2, #1
 8002246:	41aa      	sbcs	r2, r5
 8002248:	4302      	orrs	r2, r0
 800224a:	4322      	orrs	r2, r4
 800224c:	e7e4      	b.n	8002218 <__aeabi_d2f+0xc4>
 800224e:	0033      	movs	r3, r6
 8002250:	e79e      	b.n	8002190 <__aeabi_d2f+0x3c>
 8002252:	46c0      	nop			; (mov r8, r8)
 8002254:	000007fe 	.word	0x000007fe
 8002258:	fffffc80 	.word	0xfffffc80
 800225c:	fffffca2 	.word	0xfffffca2
 8002260:	fffffc82 	.word	0xfffffc82

08002264 <__clzsi2>:
 8002264:	211c      	movs	r1, #28
 8002266:	2301      	movs	r3, #1
 8002268:	041b      	lsls	r3, r3, #16
 800226a:	4298      	cmp	r0, r3
 800226c:	d301      	bcc.n	8002272 <__clzsi2+0xe>
 800226e:	0c00      	lsrs	r0, r0, #16
 8002270:	3910      	subs	r1, #16
 8002272:	0a1b      	lsrs	r3, r3, #8
 8002274:	4298      	cmp	r0, r3
 8002276:	d301      	bcc.n	800227c <__clzsi2+0x18>
 8002278:	0a00      	lsrs	r0, r0, #8
 800227a:	3908      	subs	r1, #8
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	4298      	cmp	r0, r3
 8002280:	d301      	bcc.n	8002286 <__clzsi2+0x22>
 8002282:	0900      	lsrs	r0, r0, #4
 8002284:	3904      	subs	r1, #4
 8002286:	a202      	add	r2, pc, #8	; (adr r2, 8002290 <__clzsi2+0x2c>)
 8002288:	5c10      	ldrb	r0, [r2, r0]
 800228a:	1840      	adds	r0, r0, r1
 800228c:	4770      	bx	lr
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	02020304 	.word	0x02020304
 8002294:	01010101 	.word	0x01010101
	...

080022a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4a06      	ldr	r2, [pc, #24]	; (80022c8 <vApplicationGetIdleTaskMemory+0x28>)
 80022b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	4a05      	ldr	r2, [pc, #20]	; (80022cc <vApplicationGetIdleTaskMemory+0x2c>)
 80022b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2280      	movs	r2, #128	; 0x80
 80022bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	46bd      	mov	sp, r7
 80022c2:	b004      	add	sp, #16
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	20000200 	.word	0x20000200
 80022cc:	200002b4 	.word	0x200002b4

080022d0 <Read_Temperatur>:

/* USER CODE BEGIN PFP */


void Read_Temperatur(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af00      	add	r7, sp, #0

	double value  = 1.0;
 80022d6:	2200      	movs	r2, #0
 80022d8:	4b25      	ldr	r3, [pc, #148]	; (8002370 <Read_Temperatur+0xa0>)
 80022da:	61ba      	str	r2, [r7, #24]
 80022dc:	61fb      	str	r3, [r7, #28]
	double raw = 0.0;
 80022de:	2200      	movs	r2, #0
 80022e0:	2300      	movs	r3, #0
 80022e2:	613a      	str	r2, [r7, #16]
 80022e4:	617b      	str	r3, [r7, #20]
	//int res  = 0;
	char msg[16] = "";
 80022e6:	003b      	movs	r3, r7
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	3304      	adds	r3, #4
 80022ee:	220c      	movs	r2, #12
 80022f0:	2100      	movs	r1, #0
 80022f2:	0018      	movs	r0, r3
 80022f4:	f003 fef2 	bl	80060dc <memset>



	HAL_ADC_Start(&hadc);
 80022f8:	4b1e      	ldr	r3, [pc, #120]	; (8002374 <Read_Temperatur+0xa4>)
 80022fa:	0018      	movs	r0, r3
 80022fc:	f000 fdbe 	bl	8002e7c <HAL_ADC_Start>

	HAL_ADC_PollForConversion(&hadc,100);
 8002300:	4b1c      	ldr	r3, [pc, #112]	; (8002374 <Read_Temperatur+0xa4>)
 8002302:	2164      	movs	r1, #100	; 0x64
 8002304:	0018      	movs	r0, r3
 8002306:	f000 fe0d 	bl	8002f24 <HAL_ADC_PollForConversion>

	raw = (double)HAL_ADC_GetValue(&hadc);
 800230a:	4b1a      	ldr	r3, [pc, #104]	; (8002374 <Read_Temperatur+0xa4>)
 800230c:	0018      	movs	r0, r3
 800230e:	f000 fea1 	bl	8003054 <HAL_ADC_GetValue>
 8002312:	0003      	movs	r3, r0
 8002314:	0018      	movs	r0, r3
 8002316:	f7ff fef7 	bl	8002108 <__aeabi_ui2d>
 800231a:	0002      	movs	r2, r0
 800231c:	000b      	movs	r3, r1
 800231e:	613a      	str	r2, [r7, #16]
 8002320:	617b      	str	r3, [r7, #20]

	value  = (raw - 500)/10.0;
 8002322:	2200      	movs	r2, #0
 8002324:	4b14      	ldr	r3, [pc, #80]	; (8002378 <Read_Temperatur+0xa8>)
 8002326:	6938      	ldr	r0, [r7, #16]
 8002328:	6979      	ldr	r1, [r7, #20]
 800232a:	f7ff fad7 	bl	80018dc <__aeabi_dsub>
 800232e:	0002      	movs	r2, r0
 8002330:	000b      	movs	r3, r1
 8002332:	0010      	movs	r0, r2
 8002334:	0019      	movs	r1, r3
 8002336:	2200      	movs	r2, #0
 8002338:	4b10      	ldr	r3, [pc, #64]	; (800237c <Read_Temperatur+0xac>)
 800233a:	f7fe fc61 	bl	8000c00 <__aeabi_ddiv>
 800233e:	0002      	movs	r2, r0
 8002340:	000b      	movs	r3, r1
 8002342:	61ba      	str	r2, [r7, #24]
 8002344:	61fb      	str	r3, [r7, #28]

	sprintf(msg,"\n\n%f\n\n",value);
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	490d      	ldr	r1, [pc, #52]	; (8002380 <Read_Temperatur+0xb0>)
 800234c:	0038      	movs	r0, r7
 800234e:	f004 fe65 	bl	800701c <siprintf>

	HAL_UART_Transmit(&huart3,(uint8_t*)msg,16,500);
 8002352:	23fa      	movs	r3, #250	; 0xfa
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	0039      	movs	r1, r7
 8002358:	480a      	ldr	r0, [pc, #40]	; (8002384 <Read_Temperatur+0xb4>)
 800235a:	2210      	movs	r2, #16
 800235c:	f002 f8a4 	bl	80044a8 <HAL_UART_Transmit>

	HAL_Delay(750);
 8002360:	4b09      	ldr	r3, [pc, #36]	; (8002388 <Read_Temperatur+0xb8>)
 8002362:	0018      	movs	r0, r3
 8002364:	f000 fc26 	bl	8002bb4 <HAL_Delay>

}
 8002368:	46c0      	nop			; (mov r8, r8)
 800236a:	46bd      	mov	sp, r7
 800236c:	b008      	add	sp, #32
 800236e:	bd80      	pop	{r7, pc}
 8002370:	3ff00000 	.word	0x3ff00000
 8002374:	200004b4 	.word	0x200004b4
 8002378:	407f4000 	.word	0x407f4000
 800237c:	40240000 	.word	0x40240000
 8002380:	0800aa38 	.word	0x0800aa38
 8002384:	20000518 	.word	0x20000518
 8002388:	000002ee 	.word	0x000002ee

0800238c <Pisca_Led>:

void Pisca_Led(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8002390:	2390      	movs	r3, #144	; 0x90
 8002392:	05db      	lsls	r3, r3, #23
 8002394:	2120      	movs	r1, #32
 8002396:	0018      	movs	r0, r3
 8002398:	f001 fb17 	bl	80039ca <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 800239c:	23fa      	movs	r3, #250	; 0xfa
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	0018      	movs	r0, r3
 80023a2:	f000 fc07 	bl	8002bb4 <HAL_Delay>

}
 80023a6:	46c0      	nop			; (mov r8, r8)
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023ac:	b5b0      	push	{r4, r5, r7, lr}
 80023ae:	b096      	sub	sp, #88	; 0x58
 80023b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023b2:	f000 fb9b 	bl	8002aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023b6:	f000 f849 	bl	800244c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023ba:	f000 f93b 	bl	8002634 <MX_GPIO_Init>
  MX_ADC_Init();
 80023be:	f000 f889 	bl	80024d4 <MX_ADC_Init>
  MX_CRC_Init();
 80023c2:	f000 f8e3 	bl	800258c <MX_CRC_Init>
  MX_USART3_UART_Init();
 80023c6:	f000 f905 	bl	80025d4 <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task_01 */
  osThreadDef(Task_01, S_Task_01, osPriorityHigh, 0, 128);
 80023ca:	213c      	movs	r1, #60	; 0x3c
 80023cc:	187b      	adds	r3, r7, r1
 80023ce:	4a19      	ldr	r2, [pc, #100]	; (8002434 <main+0x88>)
 80023d0:	ca31      	ldmia	r2!, {r0, r4, r5}
 80023d2:	c331      	stmia	r3!, {r0, r4, r5}
 80023d4:	ca31      	ldmia	r2!, {r0, r4, r5}
 80023d6:	c331      	stmia	r3!, {r0, r4, r5}
 80023d8:	6812      	ldr	r2, [r2, #0]
 80023da:	601a      	str	r2, [r3, #0]
  Task_01Handle = osThreadCreate(osThread(Task_01), NULL);
 80023dc:	187b      	adds	r3, r7, r1
 80023de:	2100      	movs	r1, #0
 80023e0:	0018      	movs	r0, r3
 80023e2:	f002 fc74 	bl	8004cce <osThreadCreate>
 80023e6:	0002      	movs	r2, r0
 80023e8:	4b13      	ldr	r3, [pc, #76]	; (8002438 <main+0x8c>)
 80023ea:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task_02 */
  osThreadDef(Task_02, S_Task_02, osPriorityIdle, 0, 128);
 80023ec:	2120      	movs	r1, #32
 80023ee:	187b      	adds	r3, r7, r1
 80023f0:	4a12      	ldr	r2, [pc, #72]	; (800243c <main+0x90>)
 80023f2:	ca31      	ldmia	r2!, {r0, r4, r5}
 80023f4:	c331      	stmia	r3!, {r0, r4, r5}
 80023f6:	ca31      	ldmia	r2!, {r0, r4, r5}
 80023f8:	c331      	stmia	r3!, {r0, r4, r5}
 80023fa:	6812      	ldr	r2, [r2, #0]
 80023fc:	601a      	str	r2, [r3, #0]
  Task_02Handle = osThreadCreate(osThread(Task_02), NULL);
 80023fe:	187b      	adds	r3, r7, r1
 8002400:	2100      	movs	r1, #0
 8002402:	0018      	movs	r0, r3
 8002404:	f002 fc63 	bl	8004cce <osThreadCreate>
 8002408:	0002      	movs	r2, r0
 800240a:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <main+0x94>)
 800240c:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task_03 */
  osThreadDef(Task_03, S_Task_03, osPriorityIdle, 0, 128);
 800240e:	1d3b      	adds	r3, r7, #4
 8002410:	4a0c      	ldr	r2, [pc, #48]	; (8002444 <main+0x98>)
 8002412:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002414:	c313      	stmia	r3!, {r0, r1, r4}
 8002416:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002418:	c313      	stmia	r3!, {r0, r1, r4}
 800241a:	6812      	ldr	r2, [r2, #0]
 800241c:	601a      	str	r2, [r3, #0]
  Task_03Handle = osThreadCreate(osThread(Task_03), NULL);
 800241e:	1d3b      	adds	r3, r7, #4
 8002420:	2100      	movs	r1, #0
 8002422:	0018      	movs	r0, r3
 8002424:	f002 fc53 	bl	8004cce <osThreadCreate>
 8002428:	0002      	movs	r2, r0
 800242a:	4b07      	ldr	r3, [pc, #28]	; (8002448 <main+0x9c>)
 800242c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800242e:	f002 fc46 	bl	8004cbe <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002432:	e7fe      	b.n	8002432 <main+0x86>
 8002434:	0800aa40 	.word	0x0800aa40
 8002438:	2000059c 	.word	0x2000059c
 800243c:	0800aa5c 	.word	0x0800aa5c
 8002440:	200005a0 	.word	0x200005a0
 8002444:	0800aa78 	.word	0x0800aa78
 8002448:	200005a4 	.word	0x200005a4

0800244c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800244c:	b590      	push	{r4, r7, lr}
 800244e:	b093      	sub	sp, #76	; 0x4c
 8002450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002452:	2414      	movs	r4, #20
 8002454:	193b      	adds	r3, r7, r4
 8002456:	0018      	movs	r0, r3
 8002458:	2334      	movs	r3, #52	; 0x34
 800245a:	001a      	movs	r2, r3
 800245c:	2100      	movs	r1, #0
 800245e:	f003 fe3d 	bl	80060dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002462:	1d3b      	adds	r3, r7, #4
 8002464:	0018      	movs	r0, r3
 8002466:	2310      	movs	r3, #16
 8002468:	001a      	movs	r2, r3
 800246a:	2100      	movs	r1, #0
 800246c:	f003 fe36 	bl	80060dc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48;
 8002470:	0021      	movs	r1, r4
 8002472:	187b      	adds	r3, r7, r1
 8002474:	2230      	movs	r2, #48	; 0x30
 8002476:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002478:	187b      	adds	r3, r7, r1
 800247a:	2201      	movs	r2, #1
 800247c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800247e:	187b      	adds	r3, r7, r1
 8002480:	2201      	movs	r2, #1
 8002482:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002484:	187b      	adds	r3, r7, r1
 8002486:	2210      	movs	r2, #16
 8002488:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800248a:	187b      	adds	r3, r7, r1
 800248c:	2200      	movs	r2, #0
 800248e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002490:	187b      	adds	r3, r7, r1
 8002492:	0018      	movs	r0, r3
 8002494:	f001 fab4 	bl	8003a00 <HAL_RCC_OscConfig>
 8002498:	1e03      	subs	r3, r0, #0
 800249a:	d001      	beq.n	80024a0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800249c:	f000 f942 	bl	8002724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024a0:	1d3b      	adds	r3, r7, #4
 80024a2:	2207      	movs	r2, #7
 80024a4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80024a6:	1d3b      	adds	r3, r7, #4
 80024a8:	2203      	movs	r2, #3
 80024aa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024ac:	1d3b      	adds	r3, r7, #4
 80024ae:	2200      	movs	r2, #0
 80024b0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80024b2:	1d3b      	adds	r3, r7, #4
 80024b4:	2200      	movs	r2, #0
 80024b6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80024b8:	1d3b      	adds	r3, r7, #4
 80024ba:	2101      	movs	r1, #1
 80024bc:	0018      	movs	r0, r3
 80024be:	f001 fe25 	bl	800410c <HAL_RCC_ClockConfig>
 80024c2:	1e03      	subs	r3, r0, #0
 80024c4:	d001      	beq.n	80024ca <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80024c6:	f000 f92d 	bl	8002724 <Error_Handler>
  }
}
 80024ca:	46c0      	nop			; (mov r8, r8)
 80024cc:	46bd      	mov	sp, r7
 80024ce:	b013      	add	sp, #76	; 0x4c
 80024d0:	bd90      	pop	{r4, r7, pc}
	...

080024d4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80024da:	1d3b      	adds	r3, r7, #4
 80024dc:	0018      	movs	r0, r3
 80024de:	230c      	movs	r3, #12
 80024e0:	001a      	movs	r2, r3
 80024e2:	2100      	movs	r1, #0
 80024e4:	f003 fdfa 	bl	80060dc <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80024e8:	4b26      	ldr	r3, [pc, #152]	; (8002584 <MX_ADC_Init+0xb0>)
 80024ea:	4a27      	ldr	r2, [pc, #156]	; (8002588 <MX_ADC_Init+0xb4>)
 80024ec:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80024ee:	4b25      	ldr	r3, [pc, #148]	; (8002584 <MX_ADC_Init+0xb0>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80024f4:	4b23      	ldr	r3, [pc, #140]	; (8002584 <MX_ADC_Init+0xb0>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80024fa:	4b22      	ldr	r3, [pc, #136]	; (8002584 <MX_ADC_Init+0xb0>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002500:	4b20      	ldr	r3, [pc, #128]	; (8002584 <MX_ADC_Init+0xb0>)
 8002502:	2201      	movs	r2, #1
 8002504:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002506:	4b1f      	ldr	r3, [pc, #124]	; (8002584 <MX_ADC_Init+0xb0>)
 8002508:	2204      	movs	r2, #4
 800250a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800250c:	4b1d      	ldr	r3, [pc, #116]	; (8002584 <MX_ADC_Init+0xb0>)
 800250e:	2200      	movs	r2, #0
 8002510:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002512:	4b1c      	ldr	r3, [pc, #112]	; (8002584 <MX_ADC_Init+0xb0>)
 8002514:	2200      	movs	r2, #0
 8002516:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002518:	4b1a      	ldr	r3, [pc, #104]	; (8002584 <MX_ADC_Init+0xb0>)
 800251a:	2200      	movs	r2, #0
 800251c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800251e:	4b19      	ldr	r3, [pc, #100]	; (8002584 <MX_ADC_Init+0xb0>)
 8002520:	2200      	movs	r2, #0
 8002522:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002524:	4b17      	ldr	r3, [pc, #92]	; (8002584 <MX_ADC_Init+0xb0>)
 8002526:	22c2      	movs	r2, #194	; 0xc2
 8002528:	32ff      	adds	r2, #255	; 0xff
 800252a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800252c:	4b15      	ldr	r3, [pc, #84]	; (8002584 <MX_ADC_Init+0xb0>)
 800252e:	2200      	movs	r2, #0
 8002530:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002532:	4b14      	ldr	r3, [pc, #80]	; (8002584 <MX_ADC_Init+0xb0>)
 8002534:	2224      	movs	r2, #36	; 0x24
 8002536:	2100      	movs	r1, #0
 8002538:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800253a:	4b12      	ldr	r3, [pc, #72]	; (8002584 <MX_ADC_Init+0xb0>)
 800253c:	2201      	movs	r2, #1
 800253e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002540:	4b10      	ldr	r3, [pc, #64]	; (8002584 <MX_ADC_Init+0xb0>)
 8002542:	0018      	movs	r0, r3
 8002544:	f000 fb5a 	bl	8002bfc <HAL_ADC_Init>
 8002548:	1e03      	subs	r3, r0, #0
 800254a:	d001      	beq.n	8002550 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800254c:	f000 f8ea 	bl	8002724 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002550:	1d3b      	adds	r3, r7, #4
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002556:	1d3b      	adds	r3, r7, #4
 8002558:	2280      	movs	r2, #128	; 0x80
 800255a:	0152      	lsls	r2, r2, #5
 800255c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800255e:	1d3b      	adds	r3, r7, #4
 8002560:	2280      	movs	r2, #128	; 0x80
 8002562:	0552      	lsls	r2, r2, #21
 8002564:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002566:	1d3a      	adds	r2, r7, #4
 8002568:	4b06      	ldr	r3, [pc, #24]	; (8002584 <MX_ADC_Init+0xb0>)
 800256a:	0011      	movs	r1, r2
 800256c:	0018      	movs	r0, r3
 800256e:	f000 fd7d 	bl	800306c <HAL_ADC_ConfigChannel>
 8002572:	1e03      	subs	r3, r0, #0
 8002574:	d001      	beq.n	800257a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8002576:	f000 f8d5 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800257a:	46c0      	nop			; (mov r8, r8)
 800257c:	46bd      	mov	sp, r7
 800257e:	b004      	add	sp, #16
 8002580:	bd80      	pop	{r7, pc}
 8002582:	46c0      	nop			; (mov r8, r8)
 8002584:	200004b4 	.word	0x200004b4
 8002588:	40012400 	.word	0x40012400

0800258c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002590:	4b0e      	ldr	r3, [pc, #56]	; (80025cc <MX_CRC_Init+0x40>)
 8002592:	4a0f      	ldr	r2, [pc, #60]	; (80025d0 <MX_CRC_Init+0x44>)
 8002594:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8002596:	4b0d      	ldr	r3, [pc, #52]	; (80025cc <MX_CRC_Init+0x40>)
 8002598:	2200      	movs	r2, #0
 800259a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800259c:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <MX_CRC_Init+0x40>)
 800259e:	2200      	movs	r2, #0
 80025a0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80025a2:	4b0a      	ldr	r3, [pc, #40]	; (80025cc <MX_CRC_Init+0x40>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80025a8:	4b08      	ldr	r3, [pc, #32]	; (80025cc <MX_CRC_Init+0x40>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80025ae:	4b07      	ldr	r3, [pc, #28]	; (80025cc <MX_CRC_Init+0x40>)
 80025b0:	2201      	movs	r2, #1
 80025b2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80025b4:	4b05      	ldr	r3, [pc, #20]	; (80025cc <MX_CRC_Init+0x40>)
 80025b6:	0018      	movs	r0, r3
 80025b8:	f000 ff9e 	bl	80034f8 <HAL_CRC_Init>
 80025bc:	1e03      	subs	r3, r0, #0
 80025be:	d001      	beq.n	80025c4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80025c0:	f000 f8b0 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80025c4:	46c0      	nop			; (mov r8, r8)
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	46c0      	nop			; (mov r8, r8)
 80025cc:	200004f4 	.word	0x200004f4
 80025d0:	40023000 	.word	0x40023000

080025d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80025d8:	4b14      	ldr	r3, [pc, #80]	; (800262c <MX_USART3_UART_Init+0x58>)
 80025da:	4a15      	ldr	r2, [pc, #84]	; (8002630 <MX_USART3_UART_Init+0x5c>)
 80025dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80025de:	4b13      	ldr	r3, [pc, #76]	; (800262c <MX_USART3_UART_Init+0x58>)
 80025e0:	2296      	movs	r2, #150	; 0x96
 80025e2:	0192      	lsls	r2, r2, #6
 80025e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80025e6:	4b11      	ldr	r3, [pc, #68]	; (800262c <MX_USART3_UART_Init+0x58>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80025ec:	4b0f      	ldr	r3, [pc, #60]	; (800262c <MX_USART3_UART_Init+0x58>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80025f2:	4b0e      	ldr	r3, [pc, #56]	; (800262c <MX_USART3_UART_Init+0x58>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80025f8:	4b0c      	ldr	r3, [pc, #48]	; (800262c <MX_USART3_UART_Init+0x58>)
 80025fa:	220c      	movs	r2, #12
 80025fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025fe:	4b0b      	ldr	r3, [pc, #44]	; (800262c <MX_USART3_UART_Init+0x58>)
 8002600:	2200      	movs	r2, #0
 8002602:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002604:	4b09      	ldr	r3, [pc, #36]	; (800262c <MX_USART3_UART_Init+0x58>)
 8002606:	2200      	movs	r2, #0
 8002608:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800260a:	4b08      	ldr	r3, [pc, #32]	; (800262c <MX_USART3_UART_Init+0x58>)
 800260c:	2200      	movs	r2, #0
 800260e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002610:	4b06      	ldr	r3, [pc, #24]	; (800262c <MX_USART3_UART_Init+0x58>)
 8002612:	2200      	movs	r2, #0
 8002614:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002616:	4b05      	ldr	r3, [pc, #20]	; (800262c <MX_USART3_UART_Init+0x58>)
 8002618:	0018      	movs	r0, r3
 800261a:	f001 fef1 	bl	8004400 <HAL_UART_Init>
 800261e:	1e03      	subs	r3, r0, #0
 8002620:	d001      	beq.n	8002626 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002622:	f000 f87f 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	20000518 	.word	0x20000518
 8002630:	40004800 	.word	0x40004800

08002634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002634:	b590      	push	{r4, r7, lr}
 8002636:	b089      	sub	sp, #36	; 0x24
 8002638:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263a:	240c      	movs	r4, #12
 800263c:	193b      	adds	r3, r7, r4
 800263e:	0018      	movs	r0, r3
 8002640:	2314      	movs	r3, #20
 8002642:	001a      	movs	r2, r3
 8002644:	2100      	movs	r1, #0
 8002646:	f003 fd49 	bl	80060dc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800264a:	4b24      	ldr	r3, [pc, #144]	; (80026dc <MX_GPIO_Init+0xa8>)
 800264c:	695a      	ldr	r2, [r3, #20]
 800264e:	4b23      	ldr	r3, [pc, #140]	; (80026dc <MX_GPIO_Init+0xa8>)
 8002650:	2180      	movs	r1, #128	; 0x80
 8002652:	03c9      	lsls	r1, r1, #15
 8002654:	430a      	orrs	r2, r1
 8002656:	615a      	str	r2, [r3, #20]
 8002658:	4b20      	ldr	r3, [pc, #128]	; (80026dc <MX_GPIO_Init+0xa8>)
 800265a:	695a      	ldr	r2, [r3, #20]
 800265c:	2380      	movs	r3, #128	; 0x80
 800265e:	03db      	lsls	r3, r3, #15
 8002660:	4013      	ands	r3, r2
 8002662:	60bb      	str	r3, [r7, #8]
 8002664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002666:	4b1d      	ldr	r3, [pc, #116]	; (80026dc <MX_GPIO_Init+0xa8>)
 8002668:	695a      	ldr	r2, [r3, #20]
 800266a:	4b1c      	ldr	r3, [pc, #112]	; (80026dc <MX_GPIO_Init+0xa8>)
 800266c:	2180      	movs	r1, #128	; 0x80
 800266e:	0289      	lsls	r1, r1, #10
 8002670:	430a      	orrs	r2, r1
 8002672:	615a      	str	r2, [r3, #20]
 8002674:	4b19      	ldr	r3, [pc, #100]	; (80026dc <MX_GPIO_Init+0xa8>)
 8002676:	695a      	ldr	r2, [r3, #20]
 8002678:	2380      	movs	r3, #128	; 0x80
 800267a:	029b      	lsls	r3, r3, #10
 800267c:	4013      	ands	r3, r2
 800267e:	607b      	str	r3, [r7, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002682:	4b16      	ldr	r3, [pc, #88]	; (80026dc <MX_GPIO_Init+0xa8>)
 8002684:	695a      	ldr	r2, [r3, #20]
 8002686:	4b15      	ldr	r3, [pc, #84]	; (80026dc <MX_GPIO_Init+0xa8>)
 8002688:	2180      	movs	r1, #128	; 0x80
 800268a:	0309      	lsls	r1, r1, #12
 800268c:	430a      	orrs	r2, r1
 800268e:	615a      	str	r2, [r3, #20]
 8002690:	4b12      	ldr	r3, [pc, #72]	; (80026dc <MX_GPIO_Init+0xa8>)
 8002692:	695a      	ldr	r2, [r3, #20]
 8002694:	2380      	movs	r3, #128	; 0x80
 8002696:	031b      	lsls	r3, r3, #12
 8002698:	4013      	ands	r3, r2
 800269a:	603b      	str	r3, [r7, #0]
 800269c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED02_GPIO_Port, LED02_Pin, GPIO_PIN_RESET);
 800269e:	2390      	movs	r3, #144	; 0x90
 80026a0:	05db      	lsls	r3, r3, #23
 80026a2:	2200      	movs	r2, #0
 80026a4:	2120      	movs	r1, #32
 80026a6:	0018      	movs	r0, r3
 80026a8:	f001 f972 	bl	8003990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED02_Pin */
  GPIO_InitStruct.Pin = LED02_Pin;
 80026ac:	0021      	movs	r1, r4
 80026ae:	187b      	adds	r3, r7, r1
 80026b0:	2220      	movs	r2, #32
 80026b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026b4:	187b      	adds	r3, r7, r1
 80026b6:	2201      	movs	r2, #1
 80026b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ba:	187b      	adds	r3, r7, r1
 80026bc:	2200      	movs	r2, #0
 80026be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c0:	187b      	adds	r3, r7, r1
 80026c2:	2200      	movs	r2, #0
 80026c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED02_GPIO_Port, &GPIO_InitStruct);
 80026c6:	187a      	adds	r2, r7, r1
 80026c8:	2390      	movs	r3, #144	; 0x90
 80026ca:	05db      	lsls	r3, r3, #23
 80026cc:	0011      	movs	r1, r2
 80026ce:	0018      	movs	r0, r3
 80026d0:	f000 ffe6 	bl	80036a0 <HAL_GPIO_Init>

}
 80026d4:	46c0      	nop			; (mov r8, r8)
 80026d6:	46bd      	mov	sp, r7
 80026d8:	b009      	add	sp, #36	; 0x24
 80026da:	bd90      	pop	{r4, r7, pc}
 80026dc:	40021000 	.word	0x40021000

080026e0 <S_Task_01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_S_Task_01 */
void S_Task_01(void const * argument)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	Read_Temperatur();
 80026e8:	f7ff fdf2 	bl	80022d0 <Read_Temperatur>
	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 80026ec:	2390      	movs	r3, #144	; 0x90
 80026ee:	05db      	lsls	r3, r3, #23
 80026f0:	2120      	movs	r1, #32
 80026f2:	0018      	movs	r0, r3
 80026f4:	f001 f969 	bl	80039ca <HAL_GPIO_TogglePin>
    osDelay(1);
 80026f8:	2001      	movs	r0, #1
 80026fa:	f002 fb35 	bl	8004d68 <osDelay>
	Read_Temperatur();
 80026fe:	e7f3      	b.n	80026e8 <S_Task_01+0x8>

08002700 <S_Task_02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_S_Task_02 */
void S_Task_02(void const * argument)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN S_Task_02 */
  /* Infinite loop */
  for(;;)
  {

	Pisca_Led();
 8002708:	f7ff fe40 	bl	800238c <Pisca_Led>
	osDelay(1);
 800270c:	2001      	movs	r0, #1
 800270e:	f002 fb2b 	bl	8004d68 <osDelay>
	Pisca_Led();
 8002712:	e7f9      	b.n	8002708 <S_Task_02+0x8>

08002714 <S_Task_03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_S_Task_03 */
void S_Task_03(void const * argument)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN S_Task_03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800271c:	2001      	movs	r0, #1
 800271e:	f002 fb23 	bl	8004d68 <osDelay>
 8002722:	e7fb      	b.n	800271c <S_Task_03+0x8>

08002724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002728:	b672      	cpsid	i
}
 800272a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800272c:	e7fe      	b.n	800272c <Error_Handler+0x8>
	...

08002730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002736:	4b12      	ldr	r3, [pc, #72]	; (8002780 <HAL_MspInit+0x50>)
 8002738:	699a      	ldr	r2, [r3, #24]
 800273a:	4b11      	ldr	r3, [pc, #68]	; (8002780 <HAL_MspInit+0x50>)
 800273c:	2101      	movs	r1, #1
 800273e:	430a      	orrs	r2, r1
 8002740:	619a      	str	r2, [r3, #24]
 8002742:	4b0f      	ldr	r3, [pc, #60]	; (8002780 <HAL_MspInit+0x50>)
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	2201      	movs	r2, #1
 8002748:	4013      	ands	r3, r2
 800274a:	607b      	str	r3, [r7, #4]
 800274c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800274e:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <HAL_MspInit+0x50>)
 8002750:	69da      	ldr	r2, [r3, #28]
 8002752:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <HAL_MspInit+0x50>)
 8002754:	2180      	movs	r1, #128	; 0x80
 8002756:	0549      	lsls	r1, r1, #21
 8002758:	430a      	orrs	r2, r1
 800275a:	61da      	str	r2, [r3, #28]
 800275c:	4b08      	ldr	r3, [pc, #32]	; (8002780 <HAL_MspInit+0x50>)
 800275e:	69da      	ldr	r2, [r3, #28]
 8002760:	2380      	movs	r3, #128	; 0x80
 8002762:	055b      	lsls	r3, r3, #21
 8002764:	4013      	ands	r3, r2
 8002766:	603b      	str	r3, [r7, #0]
 8002768:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800276a:	2302      	movs	r3, #2
 800276c:	425b      	negs	r3, r3
 800276e:	2200      	movs	r2, #0
 8002770:	2103      	movs	r1, #3
 8002772:	0018      	movs	r0, r3
 8002774:	f000 fe9e 	bl	80034b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002778:	46c0      	nop			; (mov r8, r8)
 800277a:	46bd      	mov	sp, r7
 800277c:	b002      	add	sp, #8
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40021000 	.word	0x40021000

08002784 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002784:	b590      	push	{r4, r7, lr}
 8002786:	b08b      	sub	sp, #44	; 0x2c
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800278c:	2414      	movs	r4, #20
 800278e:	193b      	adds	r3, r7, r4
 8002790:	0018      	movs	r0, r3
 8002792:	2314      	movs	r3, #20
 8002794:	001a      	movs	r2, r3
 8002796:	2100      	movs	r1, #0
 8002798:	f003 fca0 	bl	80060dc <memset>
  if(hadc->Instance==ADC1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a19      	ldr	r2, [pc, #100]	; (8002808 <HAL_ADC_MspInit+0x84>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d12b      	bne.n	80027fe <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027a6:	4b19      	ldr	r3, [pc, #100]	; (800280c <HAL_ADC_MspInit+0x88>)
 80027a8:	699a      	ldr	r2, [r3, #24]
 80027aa:	4b18      	ldr	r3, [pc, #96]	; (800280c <HAL_ADC_MspInit+0x88>)
 80027ac:	2180      	movs	r1, #128	; 0x80
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	430a      	orrs	r2, r1
 80027b2:	619a      	str	r2, [r3, #24]
 80027b4:	4b15      	ldr	r3, [pc, #84]	; (800280c <HAL_ADC_MspInit+0x88>)
 80027b6:	699a      	ldr	r2, [r3, #24]
 80027b8:	2380      	movs	r3, #128	; 0x80
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4013      	ands	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
 80027c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c2:	4b12      	ldr	r3, [pc, #72]	; (800280c <HAL_ADC_MspInit+0x88>)
 80027c4:	695a      	ldr	r2, [r3, #20]
 80027c6:	4b11      	ldr	r3, [pc, #68]	; (800280c <HAL_ADC_MspInit+0x88>)
 80027c8:	2180      	movs	r1, #128	; 0x80
 80027ca:	0289      	lsls	r1, r1, #10
 80027cc:	430a      	orrs	r2, r1
 80027ce:	615a      	str	r2, [r3, #20]
 80027d0:	4b0e      	ldr	r3, [pc, #56]	; (800280c <HAL_ADC_MspInit+0x88>)
 80027d2:	695a      	ldr	r2, [r3, #20]
 80027d4:	2380      	movs	r3, #128	; 0x80
 80027d6:	029b      	lsls	r3, r3, #10
 80027d8:	4013      	ands	r3, r2
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80027de:	193b      	adds	r3, r7, r4
 80027e0:	2201      	movs	r2, #1
 80027e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027e4:	193b      	adds	r3, r7, r4
 80027e6:	2203      	movs	r2, #3
 80027e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ea:	193b      	adds	r3, r7, r4
 80027ec:	2200      	movs	r2, #0
 80027ee:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f0:	193a      	adds	r2, r7, r4
 80027f2:	2390      	movs	r3, #144	; 0x90
 80027f4:	05db      	lsls	r3, r3, #23
 80027f6:	0011      	movs	r1, r2
 80027f8:	0018      	movs	r0, r3
 80027fa:	f000 ff51 	bl	80036a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	46bd      	mov	sp, r7
 8002802:	b00b      	add	sp, #44	; 0x2c
 8002804:	bd90      	pop	{r4, r7, pc}
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	40012400 	.word	0x40012400
 800280c:	40021000 	.word	0x40021000

08002810 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a09      	ldr	r2, [pc, #36]	; (8002844 <HAL_CRC_MspInit+0x34>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d10b      	bne.n	800283a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002822:	4b09      	ldr	r3, [pc, #36]	; (8002848 <HAL_CRC_MspInit+0x38>)
 8002824:	695a      	ldr	r2, [r3, #20]
 8002826:	4b08      	ldr	r3, [pc, #32]	; (8002848 <HAL_CRC_MspInit+0x38>)
 8002828:	2140      	movs	r1, #64	; 0x40
 800282a:	430a      	orrs	r2, r1
 800282c:	615a      	str	r2, [r3, #20]
 800282e:	4b06      	ldr	r3, [pc, #24]	; (8002848 <HAL_CRC_MspInit+0x38>)
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	2240      	movs	r2, #64	; 0x40
 8002834:	4013      	ands	r3, r2
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	46bd      	mov	sp, r7
 800283e:	b004      	add	sp, #16
 8002840:	bd80      	pop	{r7, pc}
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	40023000 	.word	0x40023000
 8002848:	40021000 	.word	0x40021000

0800284c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800284c:	b590      	push	{r4, r7, lr}
 800284e:	b08b      	sub	sp, #44	; 0x2c
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002854:	2414      	movs	r4, #20
 8002856:	193b      	adds	r3, r7, r4
 8002858:	0018      	movs	r0, r3
 800285a:	2314      	movs	r3, #20
 800285c:	001a      	movs	r2, r3
 800285e:	2100      	movs	r1, #0
 8002860:	f003 fc3c 	bl	80060dc <memset>
  if(huart->Instance==USART3)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a1c      	ldr	r2, [pc, #112]	; (80028dc <HAL_UART_MspInit+0x90>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d131      	bne.n	80028d2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800286e:	4b1c      	ldr	r3, [pc, #112]	; (80028e0 <HAL_UART_MspInit+0x94>)
 8002870:	69da      	ldr	r2, [r3, #28]
 8002872:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <HAL_UART_MspInit+0x94>)
 8002874:	2180      	movs	r1, #128	; 0x80
 8002876:	02c9      	lsls	r1, r1, #11
 8002878:	430a      	orrs	r2, r1
 800287a:	61da      	str	r2, [r3, #28]
 800287c:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <HAL_UART_MspInit+0x94>)
 800287e:	69da      	ldr	r2, [r3, #28]
 8002880:	2380      	movs	r3, #128	; 0x80
 8002882:	02db      	lsls	r3, r3, #11
 8002884:	4013      	ands	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
 8002888:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800288a:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <HAL_UART_MspInit+0x94>)
 800288c:	695a      	ldr	r2, [r3, #20]
 800288e:	4b14      	ldr	r3, [pc, #80]	; (80028e0 <HAL_UART_MspInit+0x94>)
 8002890:	2180      	movs	r1, #128	; 0x80
 8002892:	0309      	lsls	r1, r1, #12
 8002894:	430a      	orrs	r2, r1
 8002896:	615a      	str	r2, [r3, #20]
 8002898:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <HAL_UART_MspInit+0x94>)
 800289a:	695a      	ldr	r2, [r3, #20]
 800289c:	2380      	movs	r3, #128	; 0x80
 800289e:	031b      	lsls	r3, r3, #12
 80028a0:	4013      	ands	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC5     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80028a6:	0021      	movs	r1, r4
 80028a8:	187b      	adds	r3, r7, r1
 80028aa:	2230      	movs	r2, #48	; 0x30
 80028ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ae:	187b      	adds	r3, r7, r1
 80028b0:	2202      	movs	r2, #2
 80028b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	187b      	adds	r3, r7, r1
 80028b6:	2200      	movs	r2, #0
 80028b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028ba:	187b      	adds	r3, r7, r1
 80028bc:	2203      	movs	r2, #3
 80028be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 80028c0:	187b      	adds	r3, r7, r1
 80028c2:	2201      	movs	r2, #1
 80028c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028c6:	187b      	adds	r3, r7, r1
 80028c8:	4a06      	ldr	r2, [pc, #24]	; (80028e4 <HAL_UART_MspInit+0x98>)
 80028ca:	0019      	movs	r1, r3
 80028cc:	0010      	movs	r0, r2
 80028ce:	f000 fee7 	bl	80036a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	46bd      	mov	sp, r7
 80028d6:	b00b      	add	sp, #44	; 0x2c
 80028d8:	bd90      	pop	{r4, r7, pc}
 80028da:	46c0      	nop			; (mov r8, r8)
 80028dc:	40004800 	.word	0x40004800
 80028e0:	40021000 	.word	0x40021000
 80028e4:	48000800 	.word	0x48000800

080028e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028ec:	e7fe      	b.n	80028ec <NMI_Handler+0x4>

080028ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028f2:	e7fe      	b.n	80028f2 <HardFault_Handler+0x4>

080028f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028f8:	f000 f940 	bl	8002b7c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80028fc:	f002 ff6c 	bl	80057d8 <xTaskGetSchedulerState>
 8002900:	0003      	movs	r3, r0
 8002902:	2b01      	cmp	r3, #1
 8002904:	d001      	beq.n	800290a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002906:	f003 f8cf 	bl	8005aa8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
	return 1;
 8002914:	2301      	movs	r3, #1
}
 8002916:	0018      	movs	r0, r3
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <_kill>:

int _kill(int pid, int sig)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002926:	f003 faa1 	bl	8005e6c <__errno>
 800292a:	0003      	movs	r3, r0
 800292c:	2216      	movs	r2, #22
 800292e:	601a      	str	r2, [r3, #0]
	return -1;
 8002930:	2301      	movs	r3, #1
 8002932:	425b      	negs	r3, r3
}
 8002934:	0018      	movs	r0, r3
 8002936:	46bd      	mov	sp, r7
 8002938:	b002      	add	sp, #8
 800293a:	bd80      	pop	{r7, pc}

0800293c <_exit>:

void _exit (int status)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002944:	2301      	movs	r3, #1
 8002946:	425a      	negs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	0011      	movs	r1, r2
 800294c:	0018      	movs	r0, r3
 800294e:	f7ff ffe5 	bl	800291c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002952:	e7fe      	b.n	8002952 <_exit+0x16>

08002954 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002960:	2300      	movs	r3, #0
 8002962:	617b      	str	r3, [r7, #20]
 8002964:	e00a      	b.n	800297c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002966:	e000      	b.n	800296a <_read+0x16>
 8002968:	bf00      	nop
 800296a:	0001      	movs	r1, r0
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	60ba      	str	r2, [r7, #8]
 8002972:	b2ca      	uxtb	r2, r1
 8002974:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	3301      	adds	r3, #1
 800297a:	617b      	str	r3, [r7, #20]
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	429a      	cmp	r2, r3
 8002982:	dbf0      	blt.n	8002966 <_read+0x12>
	}

return len;
 8002984:	687b      	ldr	r3, [r7, #4]
}
 8002986:	0018      	movs	r0, r3
 8002988:	46bd      	mov	sp, r7
 800298a:	b006      	add	sp, #24
 800298c:	bd80      	pop	{r7, pc}

0800298e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b086      	sub	sp, #24
 8002992:	af00      	add	r7, sp, #0
 8002994:	60f8      	str	r0, [r7, #12]
 8002996:	60b9      	str	r1, [r7, #8]
 8002998:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800299a:	2300      	movs	r3, #0
 800299c:	617b      	str	r3, [r7, #20]
 800299e:	e009      	b.n	80029b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	60ba      	str	r2, [r7, #8]
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	0018      	movs	r0, r3
 80029aa:	e000      	b.n	80029ae <_write+0x20>
 80029ac:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	3301      	adds	r3, #1
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	dbf1      	blt.n	80029a0 <_write+0x12>
	}
	return len;
 80029bc:	687b      	ldr	r3, [r7, #4]
}
 80029be:	0018      	movs	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b006      	add	sp, #24
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <_close>:

int _close(int file)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b082      	sub	sp, #8
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
	return -1;
 80029ce:	2301      	movs	r3, #1
 80029d0:	425b      	negs	r3, r3
}
 80029d2:	0018      	movs	r0, r3
 80029d4:	46bd      	mov	sp, r7
 80029d6:	b002      	add	sp, #8
 80029d8:	bd80      	pop	{r7, pc}

080029da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
 80029e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	2280      	movs	r2, #128	; 0x80
 80029e8:	0192      	lsls	r2, r2, #6
 80029ea:	605a      	str	r2, [r3, #4]
	return 0;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	0018      	movs	r0, r3
 80029f0:	46bd      	mov	sp, r7
 80029f2:	b002      	add	sp, #8
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <_isatty>:

int _isatty(int file)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b082      	sub	sp, #8
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
	return 1;
 80029fe:	2301      	movs	r3, #1
}
 8002a00:	0018      	movs	r0, r3
 8002a02:	46bd      	mov	sp, r7
 8002a04:	b002      	add	sp, #8
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
	return 0;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	0018      	movs	r0, r3
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	b004      	add	sp, #16
 8002a1c:	bd80      	pop	{r7, pc}
	...

08002a20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a28:	4a14      	ldr	r2, [pc, #80]	; (8002a7c <_sbrk+0x5c>)
 8002a2a:	4b15      	ldr	r3, [pc, #84]	; (8002a80 <_sbrk+0x60>)
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a34:	4b13      	ldr	r3, [pc, #76]	; (8002a84 <_sbrk+0x64>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d102      	bne.n	8002a42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a3c:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <_sbrk+0x64>)
 8002a3e:	4a12      	ldr	r2, [pc, #72]	; (8002a88 <_sbrk+0x68>)
 8002a40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a42:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <_sbrk+0x64>)
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	18d3      	adds	r3, r2, r3
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d207      	bcs.n	8002a60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a50:	f003 fa0c 	bl	8005e6c <__errno>
 8002a54:	0003      	movs	r3, r0
 8002a56:	220c      	movs	r2, #12
 8002a58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	425b      	negs	r3, r3
 8002a5e:	e009      	b.n	8002a74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a60:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <_sbrk+0x64>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a66:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <_sbrk+0x64>)
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	18d2      	adds	r2, r2, r3
 8002a6e:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <_sbrk+0x64>)
 8002a70:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002a72:	68fb      	ldr	r3, [r7, #12]
}
 8002a74:	0018      	movs	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	b006      	add	sp, #24
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	20004000 	.word	0x20004000
 8002a80:	00000400 	.word	0x00000400
 8002a84:	200005a8 	.word	0x200005a8
 8002a88:	20001308 	.word	0x20001308

08002a8c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002a90:	46c0      	nop			; (mov r8, r8)
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
	...

08002a98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a98:	480d      	ldr	r0, [pc, #52]	; (8002ad0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a9a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a9c:	480d      	ldr	r0, [pc, #52]	; (8002ad4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a9e:	490e      	ldr	r1, [pc, #56]	; (8002ad8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002aa0:	4a0e      	ldr	r2, [pc, #56]	; (8002adc <LoopForever+0xe>)
  movs r3, #0
 8002aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002aa4:	e002      	b.n	8002aac <LoopCopyDataInit>

08002aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aaa:	3304      	adds	r3, #4

08002aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ab0:	d3f9      	bcc.n	8002aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ab2:	4a0b      	ldr	r2, [pc, #44]	; (8002ae0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ab4:	4c0b      	ldr	r4, [pc, #44]	; (8002ae4 <LoopForever+0x16>)
  movs r3, #0
 8002ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ab8:	e001      	b.n	8002abe <LoopFillZerobss>

08002aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002abc:	3204      	adds	r2, #4

08002abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ac0:	d3fb      	bcc.n	8002aba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002ac2:	f7ff ffe3 	bl	8002a8c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002ac6:	f003 fad9 	bl	800607c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002aca:	f7ff fc6f 	bl	80023ac <main>

08002ace <LoopForever>:

LoopForever:
    b LoopForever
 8002ace:	e7fe      	b.n	8002ace <LoopForever>
  ldr   r0, =_estack
 8002ad0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ad8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002adc:	0800b004 	.word	0x0800b004
  ldr r2, =_sbss
 8002ae0:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002ae4:	20001304 	.word	0x20001304

08002ae8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ae8:	e7fe      	b.n	8002ae8 <ADC1_COMP_IRQHandler>
	...

08002aec <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002af0:	4b07      	ldr	r3, [pc, #28]	; (8002b10 <HAL_Init+0x24>)
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <HAL_Init+0x24>)
 8002af6:	2110      	movs	r1, #16
 8002af8:	430a      	orrs	r2, r1
 8002afa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002afc:	2003      	movs	r0, #3
 8002afe:	f000 f809 	bl	8002b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b02:	f7ff fe15 	bl	8002730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	0018      	movs	r0, r3
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	46c0      	nop			; (mov r8, r8)
 8002b10:	40022000 	.word	0x40022000

08002b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b14:	b590      	push	{r4, r7, lr}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b1c:	4b14      	ldr	r3, [pc, #80]	; (8002b70 <HAL_InitTick+0x5c>)
 8002b1e:	681c      	ldr	r4, [r3, #0]
 8002b20:	4b14      	ldr	r3, [pc, #80]	; (8002b74 <HAL_InitTick+0x60>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	0019      	movs	r1, r3
 8002b26:	23fa      	movs	r3, #250	; 0xfa
 8002b28:	0098      	lsls	r0, r3, #2
 8002b2a:	f7fd fb09 	bl	8000140 <__udivsi3>
 8002b2e:	0003      	movs	r3, r0
 8002b30:	0019      	movs	r1, r3
 8002b32:	0020      	movs	r0, r4
 8002b34:	f7fd fb04 	bl	8000140 <__udivsi3>
 8002b38:	0003      	movs	r3, r0
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f000 fccf 	bl	80034de <HAL_SYSTICK_Config>
 8002b40:	1e03      	subs	r3, r0, #0
 8002b42:	d001      	beq.n	8002b48 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e00f      	b.n	8002b68 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b03      	cmp	r3, #3
 8002b4c:	d80b      	bhi.n	8002b66 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	2301      	movs	r3, #1
 8002b52:	425b      	negs	r3, r3
 8002b54:	2200      	movs	r2, #0
 8002b56:	0018      	movs	r0, r3
 8002b58:	f000 fcac 	bl	80034b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b5c:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <HAL_InitTick+0x64>)
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	e000      	b.n	8002b68 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
}
 8002b68:	0018      	movs	r0, r3
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	b003      	add	sp, #12
 8002b6e:	bd90      	pop	{r4, r7, pc}
 8002b70:	20000000 	.word	0x20000000
 8002b74:	20000008 	.word	0x20000008
 8002b78:	20000004 	.word	0x20000004

08002b7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b80:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <HAL_IncTick+0x1c>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	001a      	movs	r2, r3
 8002b86:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <HAL_IncTick+0x20>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	18d2      	adds	r2, r2, r3
 8002b8c:	4b03      	ldr	r3, [pc, #12]	; (8002b9c <HAL_IncTick+0x20>)
 8002b8e:	601a      	str	r2, [r3, #0]
}
 8002b90:	46c0      	nop			; (mov r8, r8)
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	20000008 	.word	0x20000008
 8002b9c:	200005ac 	.word	0x200005ac

08002ba0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ba4:	4b02      	ldr	r3, [pc, #8]	; (8002bb0 <HAL_GetTick+0x10>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
}
 8002ba8:	0018      	movs	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	46c0      	nop			; (mov r8, r8)
 8002bb0:	200005ac 	.word	0x200005ac

08002bb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bbc:	f7ff fff0 	bl	8002ba0 <HAL_GetTick>
 8002bc0:	0003      	movs	r3, r0
 8002bc2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	d005      	beq.n	8002bda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bce:	4b0a      	ldr	r3, [pc, #40]	; (8002bf8 <HAL_Delay+0x44>)
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	001a      	movs	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	189b      	adds	r3, r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	f7ff ffe0 	bl	8002ba0 <HAL_GetTick>
 8002be0:	0002      	movs	r2, r0
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d8f7      	bhi.n	8002bdc <HAL_Delay+0x28>
  {
  }
}
 8002bec:	46c0      	nop			; (mov r8, r8)
 8002bee:	46c0      	nop			; (mov r8, r8)
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	b004      	add	sp, #16
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	46c0      	nop			; (mov r8, r8)
 8002bf8:	20000008 	.word	0x20000008

08002bfc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c04:	230f      	movs	r3, #15
 8002c06:	18fb      	adds	r3, r7, r3
 8002c08:	2200      	movs	r2, #0
 8002c0a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e125      	b.n	8002e66 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10a      	bne.n	8002c38 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2234      	movs	r2, #52	; 0x34
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	0018      	movs	r0, r3
 8002c34:	f7ff fda6 	bl	8002784 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3c:	2210      	movs	r2, #16
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d000      	beq.n	8002c44 <HAL_ADC_Init+0x48>
 8002c42:	e103      	b.n	8002e4c <HAL_ADC_Init+0x250>
 8002c44:	230f      	movs	r3, #15
 8002c46:	18fb      	adds	r3, r7, r3
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d000      	beq.n	8002c50 <HAL_ADC_Init+0x54>
 8002c4e:	e0fd      	b.n	8002e4c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	2204      	movs	r2, #4
 8002c58:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002c5a:	d000      	beq.n	8002c5e <HAL_ADC_Init+0x62>
 8002c5c:	e0f6      	b.n	8002e4c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c62:	4a83      	ldr	r2, [pc, #524]	; (8002e70 <HAL_ADC_Init+0x274>)
 8002c64:	4013      	ands	r3, r2
 8002c66:	2202      	movs	r2, #2
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	2203      	movs	r2, #3
 8002c76:	4013      	ands	r3, r2
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d112      	bne.n	8002ca2 <HAL_ADC_Init+0xa6>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2201      	movs	r2, #1
 8002c84:	4013      	ands	r3, r2
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d009      	beq.n	8002c9e <HAL_ADC_Init+0xa2>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68da      	ldr	r2, [r3, #12]
 8002c90:	2380      	movs	r3, #128	; 0x80
 8002c92:	021b      	lsls	r3, r3, #8
 8002c94:	401a      	ands	r2, r3
 8002c96:	2380      	movs	r3, #128	; 0x80
 8002c98:	021b      	lsls	r3, r3, #8
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d101      	bne.n	8002ca2 <HAL_ADC_Init+0xa6>
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e000      	b.n	8002ca4 <HAL_ADC_Init+0xa8>
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d116      	bne.n	8002cd6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	2218      	movs	r2, #24
 8002cb0:	4393      	bics	r3, r2
 8002cb2:	0019      	movs	r1, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	0899      	lsrs	r1, r3, #2
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68da      	ldr	r2, [r3, #12]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4964      	ldr	r1, [pc, #400]	; (8002e74 <HAL_ADC_Init+0x278>)
 8002ce2:	400a      	ands	r2, r1
 8002ce4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	7e1b      	ldrb	r3, [r3, #24]
 8002cea:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	7e5b      	ldrb	r3, [r3, #25]
 8002cf0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002cf2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	7e9b      	ldrb	r3, [r3, #26]
 8002cf8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002cfa:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d002      	beq.n	8002d0a <HAL_ADC_Init+0x10e>
 8002d04:	2380      	movs	r3, #128	; 0x80
 8002d06:	015b      	lsls	r3, r3, #5
 8002d08:	e000      	b.n	8002d0c <HAL_ADC_Init+0x110>
 8002d0a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002d0c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002d12:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d101      	bne.n	8002d20 <HAL_ADC_Init+0x124>
 8002d1c:	2304      	movs	r3, #4
 8002d1e:	e000      	b.n	8002d22 <HAL_ADC_Init+0x126>
 8002d20:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002d22:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2124      	movs	r1, #36	; 0x24
 8002d28:	5c5b      	ldrb	r3, [r3, r1]
 8002d2a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002d2c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	7edb      	ldrb	r3, [r3, #27]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d115      	bne.n	8002d68 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	7e9b      	ldrb	r3, [r3, #26]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d105      	bne.n	8002d50 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2280      	movs	r2, #128	; 0x80
 8002d48:	0252      	lsls	r2, r2, #9
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60bb      	str	r3, [r7, #8]
 8002d4e:	e00b      	b.n	8002d68 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d54:	2220      	movs	r2, #32
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d60:	2201      	movs	r2, #1
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	69da      	ldr	r2, [r3, #28]
 8002d6c:	23c2      	movs	r3, #194	; 0xc2
 8002d6e:	33ff      	adds	r3, #255	; 0xff
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d007      	beq.n	8002d84 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68d9      	ldr	r1, [r3, #12]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d98:	2380      	movs	r3, #128	; 0x80
 8002d9a:	055b      	lsls	r3, r3, #21
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d01b      	beq.n	8002dd8 <HAL_ADC_Init+0x1dc>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d017      	beq.n	8002dd8 <HAL_ADC_Init+0x1dc>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d013      	beq.n	8002dd8 <HAL_ADC_Init+0x1dc>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db4:	2b03      	cmp	r3, #3
 8002db6:	d00f      	beq.n	8002dd8 <HAL_ADC_Init+0x1dc>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d00b      	beq.n	8002dd8 <HAL_ADC_Init+0x1dc>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	2b05      	cmp	r3, #5
 8002dc6:	d007      	beq.n	8002dd8 <HAL_ADC_Init+0x1dc>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dcc:	2b06      	cmp	r3, #6
 8002dce:	d003      	beq.n	8002dd8 <HAL_ADC_Init+0x1dc>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd4:	2b07      	cmp	r3, #7
 8002dd6:	d112      	bne.n	8002dfe <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	695a      	ldr	r2, [r3, #20]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2107      	movs	r1, #7
 8002de4:	438a      	bics	r2, r1
 8002de6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6959      	ldr	r1, [r3, #20]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df2:	2207      	movs	r2, #7
 8002df4:	401a      	ands	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	4a1c      	ldr	r2, [pc, #112]	; (8002e78 <HAL_ADC_Init+0x27c>)
 8002e06:	4013      	ands	r3, r2
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d10b      	bne.n	8002e26 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e18:	2203      	movs	r2, #3
 8002e1a:	4393      	bics	r3, r2
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002e24:	e01c      	b.n	8002e60 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2a:	2212      	movs	r2, #18
 8002e2c:	4393      	bics	r3, r2
 8002e2e:	2210      	movs	r2, #16
 8002e30:	431a      	orrs	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002e42:	230f      	movs	r3, #15
 8002e44:	18fb      	adds	r3, r7, r3
 8002e46:	2201      	movs	r2, #1
 8002e48:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002e4a:	e009      	b.n	8002e60 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e50:	2210      	movs	r2, #16
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002e58:	230f      	movs	r3, #15
 8002e5a:	18fb      	adds	r3, r7, r3
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e60:	230f      	movs	r3, #15
 8002e62:	18fb      	adds	r3, r7, r3
 8002e64:	781b      	ldrb	r3, [r3, #0]
}
 8002e66:	0018      	movs	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	b004      	add	sp, #16
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	fffffefd 	.word	0xfffffefd
 8002e74:	fffe0219 	.word	0xfffe0219
 8002e78:	833fffe7 	.word	0x833fffe7

08002e7c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002e7c:	b590      	push	{r4, r7, lr}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e84:	230f      	movs	r3, #15
 8002e86:	18fb      	adds	r3, r7, r3
 8002e88:	2200      	movs	r2, #0
 8002e8a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	2204      	movs	r2, #4
 8002e94:	4013      	ands	r3, r2
 8002e96:	d138      	bne.n	8002f0a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2234      	movs	r2, #52	; 0x34
 8002e9c:	5c9b      	ldrb	r3, [r3, r2]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d101      	bne.n	8002ea6 <HAL_ADC_Start+0x2a>
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	e038      	b.n	8002f18 <HAL_ADC_Start+0x9c>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2234      	movs	r2, #52	; 0x34
 8002eaa:	2101      	movs	r1, #1
 8002eac:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	7e5b      	ldrb	r3, [r3, #25]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d007      	beq.n	8002ec6 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002eb6:	230f      	movs	r3, #15
 8002eb8:	18fc      	adds	r4, r7, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	f000 f9e3 	bl	8003288 <ADC_Enable>
 8002ec2:	0003      	movs	r3, r0
 8002ec4:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002ec6:	230f      	movs	r3, #15
 8002ec8:	18fb      	adds	r3, r7, r3
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d120      	bne.n	8002f12 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed4:	4a12      	ldr	r2, [pc, #72]	; (8002f20 <HAL_ADC_Start+0xa4>)
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	2280      	movs	r2, #128	; 0x80
 8002eda:	0052      	lsls	r2, r2, #1
 8002edc:	431a      	orrs	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2234      	movs	r2, #52	; 0x34
 8002eec:	2100      	movs	r1, #0
 8002eee:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	221c      	movs	r2, #28
 8002ef6:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2104      	movs	r1, #4
 8002f04:	430a      	orrs	r2, r1
 8002f06:	609a      	str	r2, [r3, #8]
 8002f08:	e003      	b.n	8002f12 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f0a:	230f      	movs	r3, #15
 8002f0c:	18fb      	adds	r3, r7, r3
 8002f0e:	2202      	movs	r2, #2
 8002f10:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f12:	230f      	movs	r3, #15
 8002f14:	18fb      	adds	r3, r7, r3
 8002f16:	781b      	ldrb	r3, [r3, #0]
}
 8002f18:	0018      	movs	r0, r3
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	b005      	add	sp, #20
 8002f1e:	bd90      	pop	{r4, r7, pc}
 8002f20:	fffff0fe 	.word	0xfffff0fe

08002f24 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	2b08      	cmp	r3, #8
 8002f34:	d102      	bne.n	8002f3c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002f36:	2308      	movs	r3, #8
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	e014      	b.n	8002f66 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	2201      	movs	r2, #1
 8002f44:	4013      	ands	r3, r2
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d10b      	bne.n	8002f62 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4e:	2220      	movs	r2, #32
 8002f50:	431a      	orrs	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2234      	movs	r2, #52	; 0x34
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e071      	b.n	8003046 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002f62:	230c      	movs	r3, #12
 8002f64:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002f66:	f7ff fe1b 	bl	8002ba0 <HAL_GetTick>
 8002f6a:	0003      	movs	r3, r0
 8002f6c:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002f6e:	e01f      	b.n	8002fb0 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	3301      	adds	r3, #1
 8002f74:	d01c      	beq.n	8002fb0 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d007      	beq.n	8002f8c <HAL_ADC_PollForConversion+0x68>
 8002f7c:	f7ff fe10 	bl	8002ba0 <HAL_GetTick>
 8002f80:	0002      	movs	r2, r0
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d211      	bcs.n	8002fb0 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	4013      	ands	r3, r2
 8002f96:	d10b      	bne.n	8002fb0 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9c:	2204      	movs	r2, #4
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2234      	movs	r2, #52	; 0x34
 8002fa8:	2100      	movs	r1, #0
 8002faa:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e04a      	b.n	8003046 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	d0d9      	beq.n	8002f70 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc0:	2280      	movs	r2, #128	; 0x80
 8002fc2:	0092      	lsls	r2, r2, #2
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68da      	ldr	r2, [r3, #12]
 8002fd0:	23c0      	movs	r3, #192	; 0xc0
 8002fd2:	011b      	lsls	r3, r3, #4
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	d12d      	bne.n	8003034 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d129      	bne.n	8003034 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2208      	movs	r2, #8
 8002fe8:	4013      	ands	r3, r2
 8002fea:	2b08      	cmp	r3, #8
 8002fec:	d122      	bne.n	8003034 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	2204      	movs	r2, #4
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d110      	bne.n	800301c <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	210c      	movs	r1, #12
 8003006:	438a      	bics	r2, r1
 8003008:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300e:	4a10      	ldr	r2, [pc, #64]	; (8003050 <HAL_ADC_PollForConversion+0x12c>)
 8003010:	4013      	ands	r3, r2
 8003012:	2201      	movs	r2, #1
 8003014:	431a      	orrs	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	639a      	str	r2, [r3, #56]	; 0x38
 800301a:	e00b      	b.n	8003034 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003020:	2220      	movs	r2, #32
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302c:	2201      	movs	r2, #1
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	7e1b      	ldrb	r3, [r3, #24]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d103      	bne.n	8003044 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	220c      	movs	r2, #12
 8003042:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	0018      	movs	r0, r3
 8003048:	46bd      	mov	sp, r7
 800304a:	b004      	add	sp, #16
 800304c:	bd80      	pop	{r7, pc}
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	fffffefe 	.word	0xfffffefe

08003054 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003062:	0018      	movs	r0, r3
 8003064:	46bd      	mov	sp, r7
 8003066:	b002      	add	sp, #8
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003076:	230f      	movs	r3, #15
 8003078:	18fb      	adds	r3, r7, r3
 800307a:	2200      	movs	r2, #0
 800307c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800307e:	2300      	movs	r3, #0
 8003080:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003086:	2380      	movs	r3, #128	; 0x80
 8003088:	055b      	lsls	r3, r3, #21
 800308a:	429a      	cmp	r2, r3
 800308c:	d011      	beq.n	80030b2 <HAL_ADC_ConfigChannel+0x46>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003092:	2b01      	cmp	r3, #1
 8003094:	d00d      	beq.n	80030b2 <HAL_ADC_ConfigChannel+0x46>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309a:	2b02      	cmp	r3, #2
 800309c:	d009      	beq.n	80030b2 <HAL_ADC_ConfigChannel+0x46>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	d005      	beq.n	80030b2 <HAL_ADC_ConfigChannel+0x46>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d001      	beq.n	80030b2 <HAL_ADC_ConfigChannel+0x46>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2234      	movs	r2, #52	; 0x34
 80030b6:	5c9b      	ldrb	r3, [r3, r2]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d101      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x54>
 80030bc:	2302      	movs	r3, #2
 80030be:	e0d0      	b.n	8003262 <HAL_ADC_ConfigChannel+0x1f6>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2234      	movs	r2, #52	; 0x34
 80030c4:	2101      	movs	r1, #1
 80030c6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	2204      	movs	r2, #4
 80030d0:	4013      	ands	r3, r2
 80030d2:	d000      	beq.n	80030d6 <HAL_ADC_ConfigChannel+0x6a>
 80030d4:	e0b4      	b.n	8003240 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	4a64      	ldr	r2, [pc, #400]	; (800326c <HAL_ADC_ConfigChannel+0x200>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d100      	bne.n	80030e2 <HAL_ADC_ConfigChannel+0x76>
 80030e0:	e082      	b.n	80031e8 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2201      	movs	r2, #1
 80030ee:	409a      	lsls	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030fc:	2380      	movs	r3, #128	; 0x80
 80030fe:	055b      	lsls	r3, r3, #21
 8003100:	429a      	cmp	r2, r3
 8003102:	d037      	beq.n	8003174 <HAL_ADC_ConfigChannel+0x108>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003108:	2b01      	cmp	r3, #1
 800310a:	d033      	beq.n	8003174 <HAL_ADC_ConfigChannel+0x108>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003110:	2b02      	cmp	r3, #2
 8003112:	d02f      	beq.n	8003174 <HAL_ADC_ConfigChannel+0x108>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	2b03      	cmp	r3, #3
 800311a:	d02b      	beq.n	8003174 <HAL_ADC_ConfigChannel+0x108>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	2b04      	cmp	r3, #4
 8003122:	d027      	beq.n	8003174 <HAL_ADC_ConfigChannel+0x108>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003128:	2b05      	cmp	r3, #5
 800312a:	d023      	beq.n	8003174 <HAL_ADC_ConfigChannel+0x108>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003130:	2b06      	cmp	r3, #6
 8003132:	d01f      	beq.n	8003174 <HAL_ADC_ConfigChannel+0x108>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003138:	2b07      	cmp	r3, #7
 800313a:	d01b      	beq.n	8003174 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	2107      	movs	r1, #7
 8003148:	400b      	ands	r3, r1
 800314a:	429a      	cmp	r2, r3
 800314c:	d012      	beq.n	8003174 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695a      	ldr	r2, [r3, #20]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2107      	movs	r1, #7
 800315a:	438a      	bics	r2, r1
 800315c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6959      	ldr	r1, [r3, #20]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	2207      	movs	r2, #7
 800316a:	401a      	ands	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2b10      	cmp	r3, #16
 800317a:	d007      	beq.n	800318c <HAL_ADC_ConfigChannel+0x120>
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2b11      	cmp	r3, #17
 8003182:	d003      	beq.n	800318c <HAL_ADC_ConfigChannel+0x120>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2b12      	cmp	r3, #18
 800318a:	d163      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800318c:	4b38      	ldr	r3, [pc, #224]	; (8003270 <HAL_ADC_ConfigChannel+0x204>)
 800318e:	6819      	ldr	r1, [r3, #0]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2b10      	cmp	r3, #16
 8003196:	d009      	beq.n	80031ac <HAL_ADC_ConfigChannel+0x140>
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b11      	cmp	r3, #17
 800319e:	d102      	bne.n	80031a6 <HAL_ADC_ConfigChannel+0x13a>
 80031a0:	2380      	movs	r3, #128	; 0x80
 80031a2:	03db      	lsls	r3, r3, #15
 80031a4:	e004      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x144>
 80031a6:	2380      	movs	r3, #128	; 0x80
 80031a8:	045b      	lsls	r3, r3, #17
 80031aa:	e001      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x144>
 80031ac:	2380      	movs	r3, #128	; 0x80
 80031ae:	041b      	lsls	r3, r3, #16
 80031b0:	4a2f      	ldr	r2, [pc, #188]	; (8003270 <HAL_ADC_ConfigChannel+0x204>)
 80031b2:	430b      	orrs	r3, r1
 80031b4:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b10      	cmp	r3, #16
 80031bc:	d14a      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031be:	4b2d      	ldr	r3, [pc, #180]	; (8003274 <HAL_ADC_ConfigChannel+0x208>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	492d      	ldr	r1, [pc, #180]	; (8003278 <HAL_ADC_ConfigChannel+0x20c>)
 80031c4:	0018      	movs	r0, r3
 80031c6:	f7fc ffbb 	bl	8000140 <__udivsi3>
 80031ca:	0003      	movs	r3, r0
 80031cc:	001a      	movs	r2, r3
 80031ce:	0013      	movs	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	189b      	adds	r3, r3, r2
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031d8:	e002      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	3b01      	subs	r3, #1
 80031de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1f9      	bne.n	80031da <HAL_ADC_ConfigChannel+0x16e>
 80031e6:	e035      	b.n	8003254 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2101      	movs	r1, #1
 80031f4:	4099      	lsls	r1, r3
 80031f6:	000b      	movs	r3, r1
 80031f8:	43d9      	mvns	r1, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	400a      	ands	r2, r1
 8003200:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2b10      	cmp	r3, #16
 8003208:	d007      	beq.n	800321a <HAL_ADC_ConfigChannel+0x1ae>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2b11      	cmp	r3, #17
 8003210:	d003      	beq.n	800321a <HAL_ADC_ConfigChannel+0x1ae>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b12      	cmp	r3, #18
 8003218:	d11c      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800321a:	4b15      	ldr	r3, [pc, #84]	; (8003270 <HAL_ADC_ConfigChannel+0x204>)
 800321c:	6819      	ldr	r1, [r3, #0]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2b10      	cmp	r3, #16
 8003224:	d007      	beq.n	8003236 <HAL_ADC_ConfigChannel+0x1ca>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b11      	cmp	r3, #17
 800322c:	d101      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x1c6>
 800322e:	4b13      	ldr	r3, [pc, #76]	; (800327c <HAL_ADC_ConfigChannel+0x210>)
 8003230:	e002      	b.n	8003238 <HAL_ADC_ConfigChannel+0x1cc>
 8003232:	4b13      	ldr	r3, [pc, #76]	; (8003280 <HAL_ADC_ConfigChannel+0x214>)
 8003234:	e000      	b.n	8003238 <HAL_ADC_ConfigChannel+0x1cc>
 8003236:	4b13      	ldr	r3, [pc, #76]	; (8003284 <HAL_ADC_ConfigChannel+0x218>)
 8003238:	4a0d      	ldr	r2, [pc, #52]	; (8003270 <HAL_ADC_ConfigChannel+0x204>)
 800323a:	400b      	ands	r3, r1
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	e009      	b.n	8003254 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003244:	2220      	movs	r2, #32
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800324c:	230f      	movs	r3, #15
 800324e:	18fb      	adds	r3, r7, r3
 8003250:	2201      	movs	r2, #1
 8003252:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2234      	movs	r2, #52	; 0x34
 8003258:	2100      	movs	r1, #0
 800325a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800325c:	230f      	movs	r3, #15
 800325e:	18fb      	adds	r3, r7, r3
 8003260:	781b      	ldrb	r3, [r3, #0]
}
 8003262:	0018      	movs	r0, r3
 8003264:	46bd      	mov	sp, r7
 8003266:	b004      	add	sp, #16
 8003268:	bd80      	pop	{r7, pc}
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	00001001 	.word	0x00001001
 8003270:	40012708 	.word	0x40012708
 8003274:	20000000 	.word	0x20000000
 8003278:	000f4240 	.word	0x000f4240
 800327c:	ffbfffff 	.word	0xffbfffff
 8003280:	feffffff 	.word	0xfeffffff
 8003284:	ff7fffff 	.word	0xff7fffff

08003288 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	2203      	movs	r2, #3
 80032a0:	4013      	ands	r3, r2
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d112      	bne.n	80032cc <ADC_Enable+0x44>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2201      	movs	r2, #1
 80032ae:	4013      	ands	r3, r2
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d009      	beq.n	80032c8 <ADC_Enable+0x40>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	2380      	movs	r3, #128	; 0x80
 80032bc:	021b      	lsls	r3, r3, #8
 80032be:	401a      	ands	r2, r3
 80032c0:	2380      	movs	r3, #128	; 0x80
 80032c2:	021b      	lsls	r3, r3, #8
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d101      	bne.n	80032cc <ADC_Enable+0x44>
 80032c8:	2301      	movs	r3, #1
 80032ca:	e000      	b.n	80032ce <ADC_Enable+0x46>
 80032cc:	2300      	movs	r3, #0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d152      	bne.n	8003378 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	4a2a      	ldr	r2, [pc, #168]	; (8003384 <ADC_Enable+0xfc>)
 80032da:	4013      	ands	r3, r2
 80032dc:	d00d      	beq.n	80032fa <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e2:	2210      	movs	r2, #16
 80032e4:	431a      	orrs	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ee:	2201      	movs	r2, #1
 80032f0:	431a      	orrs	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e03f      	b.n	800337a <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2101      	movs	r1, #1
 8003306:	430a      	orrs	r2, r1
 8003308:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800330a:	4b1f      	ldr	r3, [pc, #124]	; (8003388 <ADC_Enable+0x100>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	491f      	ldr	r1, [pc, #124]	; (800338c <ADC_Enable+0x104>)
 8003310:	0018      	movs	r0, r3
 8003312:	f7fc ff15 	bl	8000140 <__udivsi3>
 8003316:	0003      	movs	r3, r0
 8003318:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800331a:	e002      	b.n	8003322 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	3b01      	subs	r3, #1
 8003320:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1f9      	bne.n	800331c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003328:	f7ff fc3a 	bl	8002ba0 <HAL_GetTick>
 800332c:	0003      	movs	r3, r0
 800332e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003330:	e01b      	b.n	800336a <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003332:	f7ff fc35 	bl	8002ba0 <HAL_GetTick>
 8003336:	0002      	movs	r2, r0
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d914      	bls.n	800336a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2201      	movs	r2, #1
 8003348:	4013      	ands	r3, r2
 800334a:	2b01      	cmp	r3, #1
 800334c:	d00d      	beq.n	800336a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003352:	2210      	movs	r2, #16
 8003354:	431a      	orrs	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800335e:	2201      	movs	r2, #1
 8003360:	431a      	orrs	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e007      	b.n	800337a <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2201      	movs	r2, #1
 8003372:	4013      	ands	r3, r2
 8003374:	2b01      	cmp	r3, #1
 8003376:	d1dc      	bne.n	8003332 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	0018      	movs	r0, r3
 800337c:	46bd      	mov	sp, r7
 800337e:	b004      	add	sp, #16
 8003380:	bd80      	pop	{r7, pc}
 8003382:	46c0      	nop			; (mov r8, r8)
 8003384:	80000017 	.word	0x80000017
 8003388:	20000000 	.word	0x20000000
 800338c:	000f4240 	.word	0x000f4240

08003390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003390:	b590      	push	{r4, r7, lr}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	0002      	movs	r2, r0
 8003398:	6039      	str	r1, [r7, #0]
 800339a:	1dfb      	adds	r3, r7, #7
 800339c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800339e:	1dfb      	adds	r3, r7, #7
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	2b7f      	cmp	r3, #127	; 0x7f
 80033a4:	d828      	bhi.n	80033f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033a6:	4a2f      	ldr	r2, [pc, #188]	; (8003464 <__NVIC_SetPriority+0xd4>)
 80033a8:	1dfb      	adds	r3, r7, #7
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	b25b      	sxtb	r3, r3
 80033ae:	089b      	lsrs	r3, r3, #2
 80033b0:	33c0      	adds	r3, #192	; 0xc0
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	589b      	ldr	r3, [r3, r2]
 80033b6:	1dfa      	adds	r2, r7, #7
 80033b8:	7812      	ldrb	r2, [r2, #0]
 80033ba:	0011      	movs	r1, r2
 80033bc:	2203      	movs	r2, #3
 80033be:	400a      	ands	r2, r1
 80033c0:	00d2      	lsls	r2, r2, #3
 80033c2:	21ff      	movs	r1, #255	; 0xff
 80033c4:	4091      	lsls	r1, r2
 80033c6:	000a      	movs	r2, r1
 80033c8:	43d2      	mvns	r2, r2
 80033ca:	401a      	ands	r2, r3
 80033cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	019b      	lsls	r3, r3, #6
 80033d2:	22ff      	movs	r2, #255	; 0xff
 80033d4:	401a      	ands	r2, r3
 80033d6:	1dfb      	adds	r3, r7, #7
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	0018      	movs	r0, r3
 80033dc:	2303      	movs	r3, #3
 80033de:	4003      	ands	r3, r0
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033e4:	481f      	ldr	r0, [pc, #124]	; (8003464 <__NVIC_SetPriority+0xd4>)
 80033e6:	1dfb      	adds	r3, r7, #7
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	b25b      	sxtb	r3, r3
 80033ec:	089b      	lsrs	r3, r3, #2
 80033ee:	430a      	orrs	r2, r1
 80033f0:	33c0      	adds	r3, #192	; 0xc0
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80033f6:	e031      	b.n	800345c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033f8:	4a1b      	ldr	r2, [pc, #108]	; (8003468 <__NVIC_SetPriority+0xd8>)
 80033fa:	1dfb      	adds	r3, r7, #7
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	0019      	movs	r1, r3
 8003400:	230f      	movs	r3, #15
 8003402:	400b      	ands	r3, r1
 8003404:	3b08      	subs	r3, #8
 8003406:	089b      	lsrs	r3, r3, #2
 8003408:	3306      	adds	r3, #6
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	18d3      	adds	r3, r2, r3
 800340e:	3304      	adds	r3, #4
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	1dfa      	adds	r2, r7, #7
 8003414:	7812      	ldrb	r2, [r2, #0]
 8003416:	0011      	movs	r1, r2
 8003418:	2203      	movs	r2, #3
 800341a:	400a      	ands	r2, r1
 800341c:	00d2      	lsls	r2, r2, #3
 800341e:	21ff      	movs	r1, #255	; 0xff
 8003420:	4091      	lsls	r1, r2
 8003422:	000a      	movs	r2, r1
 8003424:	43d2      	mvns	r2, r2
 8003426:	401a      	ands	r2, r3
 8003428:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	019b      	lsls	r3, r3, #6
 800342e:	22ff      	movs	r2, #255	; 0xff
 8003430:	401a      	ands	r2, r3
 8003432:	1dfb      	adds	r3, r7, #7
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	0018      	movs	r0, r3
 8003438:	2303      	movs	r3, #3
 800343a:	4003      	ands	r3, r0
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003440:	4809      	ldr	r0, [pc, #36]	; (8003468 <__NVIC_SetPriority+0xd8>)
 8003442:	1dfb      	adds	r3, r7, #7
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	001c      	movs	r4, r3
 8003448:	230f      	movs	r3, #15
 800344a:	4023      	ands	r3, r4
 800344c:	3b08      	subs	r3, #8
 800344e:	089b      	lsrs	r3, r3, #2
 8003450:	430a      	orrs	r2, r1
 8003452:	3306      	adds	r3, #6
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	18c3      	adds	r3, r0, r3
 8003458:	3304      	adds	r3, #4
 800345a:	601a      	str	r2, [r3, #0]
}
 800345c:	46c0      	nop			; (mov r8, r8)
 800345e:	46bd      	mov	sp, r7
 8003460:	b003      	add	sp, #12
 8003462:	bd90      	pop	{r4, r7, pc}
 8003464:	e000e100 	.word	0xe000e100
 8003468:	e000ed00 	.word	0xe000ed00

0800346c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	1e5a      	subs	r2, r3, #1
 8003478:	2380      	movs	r3, #128	; 0x80
 800347a:	045b      	lsls	r3, r3, #17
 800347c:	429a      	cmp	r2, r3
 800347e:	d301      	bcc.n	8003484 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003480:	2301      	movs	r3, #1
 8003482:	e010      	b.n	80034a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003484:	4b0a      	ldr	r3, [pc, #40]	; (80034b0 <SysTick_Config+0x44>)
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	3a01      	subs	r2, #1
 800348a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800348c:	2301      	movs	r3, #1
 800348e:	425b      	negs	r3, r3
 8003490:	2103      	movs	r1, #3
 8003492:	0018      	movs	r0, r3
 8003494:	f7ff ff7c 	bl	8003390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003498:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <SysTick_Config+0x44>)
 800349a:	2200      	movs	r2, #0
 800349c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800349e:	4b04      	ldr	r3, [pc, #16]	; (80034b0 <SysTick_Config+0x44>)
 80034a0:	2207      	movs	r2, #7
 80034a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	0018      	movs	r0, r3
 80034a8:	46bd      	mov	sp, r7
 80034aa:	b002      	add	sp, #8
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	e000e010 	.word	0xe000e010

080034b4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60b9      	str	r1, [r7, #8]
 80034bc:	607a      	str	r2, [r7, #4]
 80034be:	210f      	movs	r1, #15
 80034c0:	187b      	adds	r3, r7, r1
 80034c2:	1c02      	adds	r2, r0, #0
 80034c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	187b      	adds	r3, r7, r1
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	b25b      	sxtb	r3, r3
 80034ce:	0011      	movs	r1, r2
 80034d0:	0018      	movs	r0, r3
 80034d2:	f7ff ff5d 	bl	8003390 <__NVIC_SetPriority>
}
 80034d6:	46c0      	nop			; (mov r8, r8)
 80034d8:	46bd      	mov	sp, r7
 80034da:	b004      	add	sp, #16
 80034dc:	bd80      	pop	{r7, pc}

080034de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b082      	sub	sp, #8
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	0018      	movs	r0, r3
 80034ea:	f7ff ffbf 	bl	800346c <SysTick_Config>
 80034ee:	0003      	movs	r3, r0
}
 80034f0:	0018      	movs	r0, r3
 80034f2:	46bd      	mov	sp, r7
 80034f4:	b002      	add	sp, #8
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e056      	b.n	80035b8 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	7f5b      	ldrb	r3, [r3, #29]
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	d106      	bne.n	8003522 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	0018      	movs	r0, r3
 800351e:	f7ff f977 	bl	8002810 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2202      	movs	r2, #2
 8003526:	775a      	strb	r2, [r3, #29]

#if defined(CRC_POL_POL)
  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	791b      	ldrb	r3, [r3, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10c      	bne.n	800354a <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a22      	ldr	r2, [pc, #136]	; (80035c0 <HAL_CRC_Init+0xc8>)
 8003536:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2118      	movs	r1, #24
 8003544:	438a      	bics	r2, r1
 8003546:	609a      	str	r2, [r3, #8]
 8003548:	e00b      	b.n	8003562 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6899      	ldr	r1, [r3, #8]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68da      	ldr	r2, [r3, #12]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	0018      	movs	r0, r3
 8003556:	f000 f835 	bl	80035c4 <HAL_CRCEx_Polynomial_Set>
 800355a:	1e03      	subs	r3, r0, #0
 800355c:	d001      	beq.n	8003562 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e02a      	b.n	80035b8 <HAL_CRC_Init+0xc0>
#endif /* CRC_POL_POL */

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	795b      	ldrb	r3, [r3, #5]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d105      	bne.n	8003576 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2201      	movs	r2, #1
 8003570:	4252      	negs	r2, r2
 8003572:	611a      	str	r2, [r3, #16]
 8003574:	e004      	b.n	8003580 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6912      	ldr	r2, [r2, #16]
 800357e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	2260      	movs	r2, #96	; 0x60
 8003588:	4393      	bics	r3, r2
 800358a:	0019      	movs	r1, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	695a      	ldr	r2, [r3, #20]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	2280      	movs	r2, #128	; 0x80
 80035a0:	4393      	bics	r3, r2
 80035a2:	0019      	movs	r1, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	699a      	ldr	r2, [r3, #24]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	0018      	movs	r0, r3
 80035ba:	46bd      	mov	sp, r7
 80035bc:	b002      	add	sp, #8
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	04c11db7 	.word	0x04c11db7

080035c4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035d0:	2317      	movs	r3, #23
 80035d2:	18fb      	adds	r3, r7, r3
 80035d4:	2200      	movs	r2, #0
 80035d6:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80035d8:	231f      	movs	r3, #31
 80035da:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80035dc:	46c0      	nop			; (mov r8, r8)
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1e5a      	subs	r2, r3, #1
 80035e2:	613a      	str	r2, [r7, #16]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d008      	beq.n	80035fa <HAL_CRCEx_Polynomial_Set+0x36>
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	221f      	movs	r2, #31
 80035ec:	4013      	ands	r3, r2
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	40da      	lsrs	r2, r3
 80035f2:	0013      	movs	r3, r2
 80035f4:	2201      	movs	r2, #1
 80035f6:	4013      	ands	r3, r2
 80035f8:	d0f1      	beq.n	80035de <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b18      	cmp	r3, #24
 80035fe:	d00f      	beq.n	8003620 <HAL_CRCEx_Polynomial_Set+0x5c>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b18      	cmp	r3, #24
 8003604:	d824      	bhi.n	8003650 <HAL_CRCEx_Polynomial_Set+0x8c>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b10      	cmp	r3, #16
 800360a:	d011      	beq.n	8003630 <HAL_CRCEx_Polynomial_Set+0x6c>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b10      	cmp	r3, #16
 8003610:	d81e      	bhi.n	8003650 <HAL_CRCEx_Polynomial_Set+0x8c>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d020      	beq.n	800365a <HAL_CRCEx_Polynomial_Set+0x96>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b08      	cmp	r3, #8
 800361c:	d010      	beq.n	8003640 <HAL_CRCEx_Polynomial_Set+0x7c>
 800361e:	e017      	b.n	8003650 <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	2b06      	cmp	r3, #6
 8003624:	d91b      	bls.n	800365e <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 8003626:	2317      	movs	r3, #23
 8003628:	18fb      	adds	r3, r7, r3
 800362a:	2201      	movs	r2, #1
 800362c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800362e:	e016      	b.n	800365e <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	2b07      	cmp	r3, #7
 8003634:	d915      	bls.n	8003662 <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 8003636:	2317      	movs	r3, #23
 8003638:	18fb      	adds	r3, r7, r3
 800363a:	2201      	movs	r2, #1
 800363c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800363e:	e010      	b.n	8003662 <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	2b0f      	cmp	r3, #15
 8003644:	d90f      	bls.n	8003666 <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 8003646:	2317      	movs	r3, #23
 8003648:	18fb      	adds	r3, r7, r3
 800364a:	2201      	movs	r2, #1
 800364c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800364e:	e00a      	b.n	8003666 <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003650:	2317      	movs	r3, #23
 8003652:	18fb      	adds	r3, r7, r3
 8003654:	2201      	movs	r2, #1
 8003656:	701a      	strb	r2, [r3, #0]
      break;
 8003658:	e006      	b.n	8003668 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 800365a:	46c0      	nop			; (mov r8, r8)
 800365c:	e004      	b.n	8003668 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 800365e:	46c0      	nop			; (mov r8, r8)
 8003660:	e002      	b.n	8003668 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	e000      	b.n	8003668 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8003666:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 8003668:	2317      	movs	r3, #23
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10e      	bne.n	8003690 <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2218      	movs	r2, #24
 8003682:	4393      	bics	r3, r2
 8003684:	0019      	movs	r1, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	430a      	orrs	r2, r1
 800368e:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003690:	2317      	movs	r3, #23
 8003692:	18fb      	adds	r3, r7, r3
 8003694:	781b      	ldrb	r3, [r3, #0]
}
 8003696:	0018      	movs	r0, r3
 8003698:	46bd      	mov	sp, r7
 800369a:	b006      	add	sp, #24
 800369c:	bd80      	pop	{r7, pc}
	...

080036a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036aa:	2300      	movs	r3, #0
 80036ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036ae:	e155      	b.n	800395c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2101      	movs	r1, #1
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	4091      	lsls	r1, r2
 80036ba:	000a      	movs	r2, r1
 80036bc:	4013      	ands	r3, r2
 80036be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d100      	bne.n	80036c8 <HAL_GPIO_Init+0x28>
 80036c6:	e146      	b.n	8003956 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	2203      	movs	r2, #3
 80036ce:	4013      	ands	r3, r2
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d005      	beq.n	80036e0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	2203      	movs	r2, #3
 80036da:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d130      	bne.n	8003742 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	2203      	movs	r2, #3
 80036ec:	409a      	lsls	r2, r3
 80036ee:	0013      	movs	r3, r2
 80036f0:	43da      	mvns	r2, r3
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	4013      	ands	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	68da      	ldr	r2, [r3, #12]
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	409a      	lsls	r2, r3
 8003702:	0013      	movs	r3, r2
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	4313      	orrs	r3, r2
 8003708:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003716:	2201      	movs	r2, #1
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	409a      	lsls	r2, r3
 800371c:	0013      	movs	r3, r2
 800371e:	43da      	mvns	r2, r3
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	4013      	ands	r3, r2
 8003724:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	091b      	lsrs	r3, r3, #4
 800372c:	2201      	movs	r2, #1
 800372e:	401a      	ands	r2, r3
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	409a      	lsls	r2, r3
 8003734:	0013      	movs	r3, r2
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	4313      	orrs	r3, r2
 800373a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	2203      	movs	r2, #3
 8003748:	4013      	ands	r3, r2
 800374a:	2b03      	cmp	r3, #3
 800374c:	d017      	beq.n	800377e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	2203      	movs	r2, #3
 800375a:	409a      	lsls	r2, r3
 800375c:	0013      	movs	r3, r2
 800375e:	43da      	mvns	r2, r3
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	4013      	ands	r3, r2
 8003764:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	689a      	ldr	r2, [r3, #8]
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	409a      	lsls	r2, r3
 8003770:	0013      	movs	r3, r2
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	4313      	orrs	r3, r2
 8003776:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2203      	movs	r2, #3
 8003784:	4013      	ands	r3, r2
 8003786:	2b02      	cmp	r3, #2
 8003788:	d123      	bne.n	80037d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	08da      	lsrs	r2, r3, #3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	3208      	adds	r2, #8
 8003792:	0092      	lsls	r2, r2, #2
 8003794:	58d3      	ldr	r3, [r2, r3]
 8003796:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	2207      	movs	r2, #7
 800379c:	4013      	ands	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	220f      	movs	r2, #15
 80037a2:	409a      	lsls	r2, r3
 80037a4:	0013      	movs	r3, r2
 80037a6:	43da      	mvns	r2, r3
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	4013      	ands	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	691a      	ldr	r2, [r3, #16]
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	2107      	movs	r1, #7
 80037b6:	400b      	ands	r3, r1
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	409a      	lsls	r2, r3
 80037bc:	0013      	movs	r3, r2
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	08da      	lsrs	r2, r3, #3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3208      	adds	r2, #8
 80037cc:	0092      	lsls	r2, r2, #2
 80037ce:	6939      	ldr	r1, [r7, #16]
 80037d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	2203      	movs	r2, #3
 80037de:	409a      	lsls	r2, r3
 80037e0:	0013      	movs	r3, r2
 80037e2:	43da      	mvns	r2, r3
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	4013      	ands	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2203      	movs	r2, #3
 80037f0:	401a      	ands	r2, r3
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	409a      	lsls	r2, r3
 80037f8:	0013      	movs	r3, r2
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	23c0      	movs	r3, #192	; 0xc0
 800380c:	029b      	lsls	r3, r3, #10
 800380e:	4013      	ands	r3, r2
 8003810:	d100      	bne.n	8003814 <HAL_GPIO_Init+0x174>
 8003812:	e0a0      	b.n	8003956 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003814:	4b57      	ldr	r3, [pc, #348]	; (8003974 <HAL_GPIO_Init+0x2d4>)
 8003816:	699a      	ldr	r2, [r3, #24]
 8003818:	4b56      	ldr	r3, [pc, #344]	; (8003974 <HAL_GPIO_Init+0x2d4>)
 800381a:	2101      	movs	r1, #1
 800381c:	430a      	orrs	r2, r1
 800381e:	619a      	str	r2, [r3, #24]
 8003820:	4b54      	ldr	r3, [pc, #336]	; (8003974 <HAL_GPIO_Init+0x2d4>)
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	2201      	movs	r2, #1
 8003826:	4013      	ands	r3, r2
 8003828:	60bb      	str	r3, [r7, #8]
 800382a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800382c:	4a52      	ldr	r2, [pc, #328]	; (8003978 <HAL_GPIO_Init+0x2d8>)
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	089b      	lsrs	r3, r3, #2
 8003832:	3302      	adds	r3, #2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	589b      	ldr	r3, [r3, r2]
 8003838:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2203      	movs	r2, #3
 800383e:	4013      	ands	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	220f      	movs	r2, #15
 8003844:	409a      	lsls	r2, r3
 8003846:	0013      	movs	r3, r2
 8003848:	43da      	mvns	r2, r3
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	4013      	ands	r3, r2
 800384e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	2390      	movs	r3, #144	; 0x90
 8003854:	05db      	lsls	r3, r3, #23
 8003856:	429a      	cmp	r2, r3
 8003858:	d019      	beq.n	800388e <HAL_GPIO_Init+0x1ee>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a47      	ldr	r2, [pc, #284]	; (800397c <HAL_GPIO_Init+0x2dc>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d013      	beq.n	800388a <HAL_GPIO_Init+0x1ea>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a46      	ldr	r2, [pc, #280]	; (8003980 <HAL_GPIO_Init+0x2e0>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d00d      	beq.n	8003886 <HAL_GPIO_Init+0x1e6>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a45      	ldr	r2, [pc, #276]	; (8003984 <HAL_GPIO_Init+0x2e4>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d007      	beq.n	8003882 <HAL_GPIO_Init+0x1e2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a44      	ldr	r2, [pc, #272]	; (8003988 <HAL_GPIO_Init+0x2e8>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d101      	bne.n	800387e <HAL_GPIO_Init+0x1de>
 800387a:	2304      	movs	r3, #4
 800387c:	e008      	b.n	8003890 <HAL_GPIO_Init+0x1f0>
 800387e:	2305      	movs	r3, #5
 8003880:	e006      	b.n	8003890 <HAL_GPIO_Init+0x1f0>
 8003882:	2303      	movs	r3, #3
 8003884:	e004      	b.n	8003890 <HAL_GPIO_Init+0x1f0>
 8003886:	2302      	movs	r3, #2
 8003888:	e002      	b.n	8003890 <HAL_GPIO_Init+0x1f0>
 800388a:	2301      	movs	r3, #1
 800388c:	e000      	b.n	8003890 <HAL_GPIO_Init+0x1f0>
 800388e:	2300      	movs	r3, #0
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	2103      	movs	r1, #3
 8003894:	400a      	ands	r2, r1
 8003896:	0092      	lsls	r2, r2, #2
 8003898:	4093      	lsls	r3, r2
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	4313      	orrs	r3, r2
 800389e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038a0:	4935      	ldr	r1, [pc, #212]	; (8003978 <HAL_GPIO_Init+0x2d8>)
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	089b      	lsrs	r3, r3, #2
 80038a6:	3302      	adds	r3, #2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038ae:	4b37      	ldr	r3, [pc, #220]	; (800398c <HAL_GPIO_Init+0x2ec>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	43da      	mvns	r2, r3
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	4013      	ands	r3, r2
 80038bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	2380      	movs	r3, #128	; 0x80
 80038c4:	025b      	lsls	r3, r3, #9
 80038c6:	4013      	ands	r3, r2
 80038c8:	d003      	beq.n	80038d2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80038d2:	4b2e      	ldr	r3, [pc, #184]	; (800398c <HAL_GPIO_Init+0x2ec>)
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80038d8:	4b2c      	ldr	r3, [pc, #176]	; (800398c <HAL_GPIO_Init+0x2ec>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	43da      	mvns	r2, r3
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	4013      	ands	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	2380      	movs	r3, #128	; 0x80
 80038ee:	029b      	lsls	r3, r3, #10
 80038f0:	4013      	ands	r3, r2
 80038f2:	d003      	beq.n	80038fc <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80038fc:	4b23      	ldr	r3, [pc, #140]	; (800398c <HAL_GPIO_Init+0x2ec>)
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003902:	4b22      	ldr	r3, [pc, #136]	; (800398c <HAL_GPIO_Init+0x2ec>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	43da      	mvns	r2, r3
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	4013      	ands	r3, r2
 8003910:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	2380      	movs	r3, #128	; 0x80
 8003918:	035b      	lsls	r3, r3, #13
 800391a:	4013      	ands	r3, r2
 800391c:	d003      	beq.n	8003926 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4313      	orrs	r3, r2
 8003924:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003926:	4b19      	ldr	r3, [pc, #100]	; (800398c <HAL_GPIO_Init+0x2ec>)
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800392c:	4b17      	ldr	r3, [pc, #92]	; (800398c <HAL_GPIO_Init+0x2ec>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	43da      	mvns	r2, r3
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	4013      	ands	r3, r2
 800393a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	2380      	movs	r3, #128	; 0x80
 8003942:	039b      	lsls	r3, r3, #14
 8003944:	4013      	ands	r3, r2
 8003946:	d003      	beq.n	8003950 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	4313      	orrs	r3, r2
 800394e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003950:	4b0e      	ldr	r3, [pc, #56]	; (800398c <HAL_GPIO_Init+0x2ec>)
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	3301      	adds	r3, #1
 800395a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	40da      	lsrs	r2, r3
 8003964:	1e13      	subs	r3, r2, #0
 8003966:	d000      	beq.n	800396a <HAL_GPIO_Init+0x2ca>
 8003968:	e6a2      	b.n	80036b0 <HAL_GPIO_Init+0x10>
  } 
}
 800396a:	46c0      	nop			; (mov r8, r8)
 800396c:	46c0      	nop			; (mov r8, r8)
 800396e:	46bd      	mov	sp, r7
 8003970:	b006      	add	sp, #24
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40021000 	.word	0x40021000
 8003978:	40010000 	.word	0x40010000
 800397c:	48000400 	.word	0x48000400
 8003980:	48000800 	.word	0x48000800
 8003984:	48000c00 	.word	0x48000c00
 8003988:	48001000 	.word	0x48001000
 800398c:	40010400 	.word	0x40010400

08003990 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	0008      	movs	r0, r1
 800399a:	0011      	movs	r1, r2
 800399c:	1cbb      	adds	r3, r7, #2
 800399e:	1c02      	adds	r2, r0, #0
 80039a0:	801a      	strh	r2, [r3, #0]
 80039a2:	1c7b      	adds	r3, r7, #1
 80039a4:	1c0a      	adds	r2, r1, #0
 80039a6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039a8:	1c7b      	adds	r3, r7, #1
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d004      	beq.n	80039ba <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039b0:	1cbb      	adds	r3, r7, #2
 80039b2:	881a      	ldrh	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039b8:	e003      	b.n	80039c2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039ba:	1cbb      	adds	r3, r7, #2
 80039bc:	881a      	ldrh	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	46bd      	mov	sp, r7
 80039c6:	b002      	add	sp, #8
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b084      	sub	sp, #16
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	000a      	movs	r2, r1
 80039d4:	1cbb      	adds	r3, r7, #2
 80039d6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039de:	1cbb      	adds	r3, r7, #2
 80039e0:	881b      	ldrh	r3, [r3, #0]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	4013      	ands	r3, r2
 80039e6:	041a      	lsls	r2, r3, #16
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	43db      	mvns	r3, r3
 80039ec:	1cb9      	adds	r1, r7, #2
 80039ee:	8809      	ldrh	r1, [r1, #0]
 80039f0:	400b      	ands	r3, r1
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	619a      	str	r2, [r3, #24]
}
 80039f8:	46c0      	nop			; (mov r8, r8)
 80039fa:	46bd      	mov	sp, r7
 80039fc:	b004      	add	sp, #16
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b088      	sub	sp, #32
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d102      	bne.n	8003a14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	f000 fb76 	bl	8004100 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	d100      	bne.n	8003a20 <HAL_RCC_OscConfig+0x20>
 8003a1e:	e08e      	b.n	8003b3e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003a20:	4bc5      	ldr	r3, [pc, #788]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	220c      	movs	r2, #12
 8003a26:	4013      	ands	r3, r2
 8003a28:	2b04      	cmp	r3, #4
 8003a2a:	d00e      	beq.n	8003a4a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a2c:	4bc2      	ldr	r3, [pc, #776]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	220c      	movs	r2, #12
 8003a32:	4013      	ands	r3, r2
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d117      	bne.n	8003a68 <HAL_RCC_OscConfig+0x68>
 8003a38:	4bbf      	ldr	r3, [pc, #764]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	23c0      	movs	r3, #192	; 0xc0
 8003a3e:	025b      	lsls	r3, r3, #9
 8003a40:	401a      	ands	r2, r3
 8003a42:	2380      	movs	r3, #128	; 0x80
 8003a44:	025b      	lsls	r3, r3, #9
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d10e      	bne.n	8003a68 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a4a:	4bbb      	ldr	r3, [pc, #748]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	2380      	movs	r3, #128	; 0x80
 8003a50:	029b      	lsls	r3, r3, #10
 8003a52:	4013      	ands	r3, r2
 8003a54:	d100      	bne.n	8003a58 <HAL_RCC_OscConfig+0x58>
 8003a56:	e071      	b.n	8003b3c <HAL_RCC_OscConfig+0x13c>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d000      	beq.n	8003a62 <HAL_RCC_OscConfig+0x62>
 8003a60:	e06c      	b.n	8003b3c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	f000 fb4c 	bl	8004100 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d107      	bne.n	8003a80 <HAL_RCC_OscConfig+0x80>
 8003a70:	4bb1      	ldr	r3, [pc, #708]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	4bb0      	ldr	r3, [pc, #704]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003a76:	2180      	movs	r1, #128	; 0x80
 8003a78:	0249      	lsls	r1, r1, #9
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	e02f      	b.n	8003ae0 <HAL_RCC_OscConfig+0xe0>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10c      	bne.n	8003aa2 <HAL_RCC_OscConfig+0xa2>
 8003a88:	4bab      	ldr	r3, [pc, #684]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	4baa      	ldr	r3, [pc, #680]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003a8e:	49ab      	ldr	r1, [pc, #684]	; (8003d3c <HAL_RCC_OscConfig+0x33c>)
 8003a90:	400a      	ands	r2, r1
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	4ba8      	ldr	r3, [pc, #672]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	4ba7      	ldr	r3, [pc, #668]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003a9a:	49a9      	ldr	r1, [pc, #676]	; (8003d40 <HAL_RCC_OscConfig+0x340>)
 8003a9c:	400a      	ands	r2, r1
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	e01e      	b.n	8003ae0 <HAL_RCC_OscConfig+0xe0>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2b05      	cmp	r3, #5
 8003aa8:	d10e      	bne.n	8003ac8 <HAL_RCC_OscConfig+0xc8>
 8003aaa:	4ba3      	ldr	r3, [pc, #652]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	4ba2      	ldr	r3, [pc, #648]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003ab0:	2180      	movs	r1, #128	; 0x80
 8003ab2:	02c9      	lsls	r1, r1, #11
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	601a      	str	r2, [r3, #0]
 8003ab8:	4b9f      	ldr	r3, [pc, #636]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	4b9e      	ldr	r3, [pc, #632]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003abe:	2180      	movs	r1, #128	; 0x80
 8003ac0:	0249      	lsls	r1, r1, #9
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	e00b      	b.n	8003ae0 <HAL_RCC_OscConfig+0xe0>
 8003ac8:	4b9b      	ldr	r3, [pc, #620]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	4b9a      	ldr	r3, [pc, #616]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003ace:	499b      	ldr	r1, [pc, #620]	; (8003d3c <HAL_RCC_OscConfig+0x33c>)
 8003ad0:	400a      	ands	r2, r1
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	4b98      	ldr	r3, [pc, #608]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	4b97      	ldr	r3, [pc, #604]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003ada:	4999      	ldr	r1, [pc, #612]	; (8003d40 <HAL_RCC_OscConfig+0x340>)
 8003adc:	400a      	ands	r2, r1
 8003ade:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d014      	beq.n	8003b12 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae8:	f7ff f85a 	bl	8002ba0 <HAL_GetTick>
 8003aec:	0003      	movs	r3, r0
 8003aee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003af2:	f7ff f855 	bl	8002ba0 <HAL_GetTick>
 8003af6:	0002      	movs	r2, r0
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b64      	cmp	r3, #100	; 0x64
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e2fd      	b.n	8004100 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b04:	4b8c      	ldr	r3, [pc, #560]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	2380      	movs	r3, #128	; 0x80
 8003b0a:	029b      	lsls	r3, r3, #10
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	d0f0      	beq.n	8003af2 <HAL_RCC_OscConfig+0xf2>
 8003b10:	e015      	b.n	8003b3e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b12:	f7ff f845 	bl	8002ba0 <HAL_GetTick>
 8003b16:	0003      	movs	r3, r0
 8003b18:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b1c:	f7ff f840 	bl	8002ba0 <HAL_GetTick>
 8003b20:	0002      	movs	r2, r0
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b64      	cmp	r3, #100	; 0x64
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e2e8      	b.n	8004100 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b2e:	4b82      	ldr	r3, [pc, #520]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	2380      	movs	r3, #128	; 0x80
 8003b34:	029b      	lsls	r3, r3, #10
 8003b36:	4013      	ands	r3, r2
 8003b38:	d1f0      	bne.n	8003b1c <HAL_RCC_OscConfig+0x11c>
 8003b3a:	e000      	b.n	8003b3e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b3c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2202      	movs	r2, #2
 8003b44:	4013      	ands	r3, r2
 8003b46:	d100      	bne.n	8003b4a <HAL_RCC_OscConfig+0x14a>
 8003b48:	e06c      	b.n	8003c24 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003b4a:	4b7b      	ldr	r3, [pc, #492]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	220c      	movs	r2, #12
 8003b50:	4013      	ands	r3, r2
 8003b52:	d00e      	beq.n	8003b72 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003b54:	4b78      	ldr	r3, [pc, #480]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	220c      	movs	r2, #12
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	d11f      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x1a0>
 8003b60:	4b75      	ldr	r3, [pc, #468]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	23c0      	movs	r3, #192	; 0xc0
 8003b66:	025b      	lsls	r3, r3, #9
 8003b68:	401a      	ands	r2, r3
 8003b6a:	2380      	movs	r3, #128	; 0x80
 8003b6c:	021b      	lsls	r3, r3, #8
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d116      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b72:	4b71      	ldr	r3, [pc, #452]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2202      	movs	r2, #2
 8003b78:	4013      	ands	r3, r2
 8003b7a:	d005      	beq.n	8003b88 <HAL_RCC_OscConfig+0x188>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d001      	beq.n	8003b88 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e2bb      	b.n	8004100 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b88:	4b6b      	ldr	r3, [pc, #428]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	22f8      	movs	r2, #248	; 0xf8
 8003b8e:	4393      	bics	r3, r2
 8003b90:	0019      	movs	r1, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	00da      	lsls	r2, r3, #3
 8003b98:	4b67      	ldr	r3, [pc, #412]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b9e:	e041      	b.n	8003c24 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d024      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ba8:	4b63      	ldr	r3, [pc, #396]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	4b62      	ldr	r3, [pc, #392]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003bae:	2101      	movs	r1, #1
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb4:	f7fe fff4 	bl	8002ba0 <HAL_GetTick>
 8003bb8:	0003      	movs	r3, r0
 8003bba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bbc:	e008      	b.n	8003bd0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bbe:	f7fe ffef 	bl	8002ba0 <HAL_GetTick>
 8003bc2:	0002      	movs	r2, r0
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e297      	b.n	8004100 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd0:	4b59      	ldr	r3, [pc, #356]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	d0f1      	beq.n	8003bbe <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bda:	4b57      	ldr	r3, [pc, #348]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	22f8      	movs	r2, #248	; 0xf8
 8003be0:	4393      	bics	r3, r2
 8003be2:	0019      	movs	r1, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	00da      	lsls	r2, r3, #3
 8003bea:	4b53      	ldr	r3, [pc, #332]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003bec:	430a      	orrs	r2, r1
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	e018      	b.n	8003c24 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bf2:	4b51      	ldr	r3, [pc, #324]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	4b50      	ldr	r3, [pc, #320]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	438a      	bics	r2, r1
 8003bfc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfe:	f7fe ffcf 	bl	8002ba0 <HAL_GetTick>
 8003c02:	0003      	movs	r3, r0
 8003c04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c08:	f7fe ffca 	bl	8002ba0 <HAL_GetTick>
 8003c0c:	0002      	movs	r2, r0
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e272      	b.n	8004100 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c1a:	4b47      	ldr	r3, [pc, #284]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2202      	movs	r2, #2
 8003c20:	4013      	ands	r3, r2
 8003c22:	d1f1      	bne.n	8003c08 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2208      	movs	r2, #8
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	d036      	beq.n	8003c9c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d019      	beq.n	8003c6a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c36:	4b40      	ldr	r3, [pc, #256]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003c38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c3a:	4b3f      	ldr	r3, [pc, #252]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c42:	f7fe ffad 	bl	8002ba0 <HAL_GetTick>
 8003c46:	0003      	movs	r3, r0
 8003c48:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c4c:	f7fe ffa8 	bl	8002ba0 <HAL_GetTick>
 8003c50:	0002      	movs	r2, r0
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e250      	b.n	8004100 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c5e:	4b36      	ldr	r3, [pc, #216]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	2202      	movs	r2, #2
 8003c64:	4013      	ands	r3, r2
 8003c66:	d0f1      	beq.n	8003c4c <HAL_RCC_OscConfig+0x24c>
 8003c68:	e018      	b.n	8003c9c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c6a:	4b33      	ldr	r3, [pc, #204]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003c6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c6e:	4b32      	ldr	r3, [pc, #200]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003c70:	2101      	movs	r1, #1
 8003c72:	438a      	bics	r2, r1
 8003c74:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c76:	f7fe ff93 	bl	8002ba0 <HAL_GetTick>
 8003c7a:	0003      	movs	r3, r0
 8003c7c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c80:	f7fe ff8e 	bl	8002ba0 <HAL_GetTick>
 8003c84:	0002      	movs	r2, r0
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e236      	b.n	8004100 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c92:	4b29      	ldr	r3, [pc, #164]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	2202      	movs	r2, #2
 8003c98:	4013      	ands	r3, r2
 8003c9a:	d1f1      	bne.n	8003c80 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2204      	movs	r2, #4
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	d100      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x2a8>
 8003ca6:	e0b5      	b.n	8003e14 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ca8:	201f      	movs	r0, #31
 8003caa:	183b      	adds	r3, r7, r0
 8003cac:	2200      	movs	r2, #0
 8003cae:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cb0:	4b21      	ldr	r3, [pc, #132]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003cb2:	69da      	ldr	r2, [r3, #28]
 8003cb4:	2380      	movs	r3, #128	; 0x80
 8003cb6:	055b      	lsls	r3, r3, #21
 8003cb8:	4013      	ands	r3, r2
 8003cba:	d110      	bne.n	8003cde <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cbc:	4b1e      	ldr	r3, [pc, #120]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003cbe:	69da      	ldr	r2, [r3, #28]
 8003cc0:	4b1d      	ldr	r3, [pc, #116]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003cc2:	2180      	movs	r1, #128	; 0x80
 8003cc4:	0549      	lsls	r1, r1, #21
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	61da      	str	r2, [r3, #28]
 8003cca:	4b1b      	ldr	r3, [pc, #108]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003ccc:	69da      	ldr	r2, [r3, #28]
 8003cce:	2380      	movs	r3, #128	; 0x80
 8003cd0:	055b      	lsls	r3, r3, #21
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003cd8:	183b      	adds	r3, r7, r0
 8003cda:	2201      	movs	r2, #1
 8003cdc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cde:	4b19      	ldr	r3, [pc, #100]	; (8003d44 <HAL_RCC_OscConfig+0x344>)
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	2380      	movs	r3, #128	; 0x80
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	d11a      	bne.n	8003d20 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cea:	4b16      	ldr	r3, [pc, #88]	; (8003d44 <HAL_RCC_OscConfig+0x344>)
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	4b15      	ldr	r3, [pc, #84]	; (8003d44 <HAL_RCC_OscConfig+0x344>)
 8003cf0:	2180      	movs	r1, #128	; 0x80
 8003cf2:	0049      	lsls	r1, r1, #1
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cf8:	f7fe ff52 	bl	8002ba0 <HAL_GetTick>
 8003cfc:	0003      	movs	r3, r0
 8003cfe:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d02:	f7fe ff4d 	bl	8002ba0 <HAL_GetTick>
 8003d06:	0002      	movs	r2, r0
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b64      	cmp	r3, #100	; 0x64
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e1f5      	b.n	8004100 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d14:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <HAL_RCC_OscConfig+0x344>)
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	2380      	movs	r3, #128	; 0x80
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	d0f0      	beq.n	8003d02 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d10f      	bne.n	8003d48 <HAL_RCC_OscConfig+0x348>
 8003d28:	4b03      	ldr	r3, [pc, #12]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003d2a:	6a1a      	ldr	r2, [r3, #32]
 8003d2c:	4b02      	ldr	r3, [pc, #8]	; (8003d38 <HAL_RCC_OscConfig+0x338>)
 8003d2e:	2101      	movs	r1, #1
 8003d30:	430a      	orrs	r2, r1
 8003d32:	621a      	str	r2, [r3, #32]
 8003d34:	e036      	b.n	8003da4 <HAL_RCC_OscConfig+0x3a4>
 8003d36:	46c0      	nop			; (mov r8, r8)
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	fffeffff 	.word	0xfffeffff
 8003d40:	fffbffff 	.word	0xfffbffff
 8003d44:	40007000 	.word	0x40007000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10c      	bne.n	8003d6a <HAL_RCC_OscConfig+0x36a>
 8003d50:	4bca      	ldr	r3, [pc, #808]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003d52:	6a1a      	ldr	r2, [r3, #32]
 8003d54:	4bc9      	ldr	r3, [pc, #804]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003d56:	2101      	movs	r1, #1
 8003d58:	438a      	bics	r2, r1
 8003d5a:	621a      	str	r2, [r3, #32]
 8003d5c:	4bc7      	ldr	r3, [pc, #796]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003d5e:	6a1a      	ldr	r2, [r3, #32]
 8003d60:	4bc6      	ldr	r3, [pc, #792]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003d62:	2104      	movs	r1, #4
 8003d64:	438a      	bics	r2, r1
 8003d66:	621a      	str	r2, [r3, #32]
 8003d68:	e01c      	b.n	8003da4 <HAL_RCC_OscConfig+0x3a4>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	2b05      	cmp	r3, #5
 8003d70:	d10c      	bne.n	8003d8c <HAL_RCC_OscConfig+0x38c>
 8003d72:	4bc2      	ldr	r3, [pc, #776]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003d74:	6a1a      	ldr	r2, [r3, #32]
 8003d76:	4bc1      	ldr	r3, [pc, #772]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003d78:	2104      	movs	r1, #4
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	621a      	str	r2, [r3, #32]
 8003d7e:	4bbf      	ldr	r3, [pc, #764]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003d80:	6a1a      	ldr	r2, [r3, #32]
 8003d82:	4bbe      	ldr	r3, [pc, #760]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003d84:	2101      	movs	r1, #1
 8003d86:	430a      	orrs	r2, r1
 8003d88:	621a      	str	r2, [r3, #32]
 8003d8a:	e00b      	b.n	8003da4 <HAL_RCC_OscConfig+0x3a4>
 8003d8c:	4bbb      	ldr	r3, [pc, #748]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003d8e:	6a1a      	ldr	r2, [r3, #32]
 8003d90:	4bba      	ldr	r3, [pc, #744]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003d92:	2101      	movs	r1, #1
 8003d94:	438a      	bics	r2, r1
 8003d96:	621a      	str	r2, [r3, #32]
 8003d98:	4bb8      	ldr	r3, [pc, #736]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003d9a:	6a1a      	ldr	r2, [r3, #32]
 8003d9c:	4bb7      	ldr	r3, [pc, #732]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003d9e:	2104      	movs	r1, #4
 8003da0:	438a      	bics	r2, r1
 8003da2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d014      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dac:	f7fe fef8 	bl	8002ba0 <HAL_GetTick>
 8003db0:	0003      	movs	r3, r0
 8003db2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db4:	e009      	b.n	8003dca <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003db6:	f7fe fef3 	bl	8002ba0 <HAL_GetTick>
 8003dba:	0002      	movs	r2, r0
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	4aaf      	ldr	r2, [pc, #700]	; (8004080 <HAL_RCC_OscConfig+0x680>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e19a      	b.n	8004100 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dca:	4bac      	ldr	r3, [pc, #688]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	2202      	movs	r2, #2
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	d0f0      	beq.n	8003db6 <HAL_RCC_OscConfig+0x3b6>
 8003dd4:	e013      	b.n	8003dfe <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dd6:	f7fe fee3 	bl	8002ba0 <HAL_GetTick>
 8003dda:	0003      	movs	r3, r0
 8003ddc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dde:	e009      	b.n	8003df4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003de0:	f7fe fede 	bl	8002ba0 <HAL_GetTick>
 8003de4:	0002      	movs	r2, r0
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	4aa5      	ldr	r2, [pc, #660]	; (8004080 <HAL_RCC_OscConfig+0x680>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e185      	b.n	8004100 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003df4:	4ba1      	ldr	r3, [pc, #644]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	2202      	movs	r2, #2
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	d1f0      	bne.n	8003de0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003dfe:	231f      	movs	r3, #31
 8003e00:	18fb      	adds	r3, r7, r3
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d105      	bne.n	8003e14 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e08:	4b9c      	ldr	r3, [pc, #624]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003e0a:	69da      	ldr	r2, [r3, #28]
 8003e0c:	4b9b      	ldr	r3, [pc, #620]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003e0e:	499d      	ldr	r1, [pc, #628]	; (8004084 <HAL_RCC_OscConfig+0x684>)
 8003e10:	400a      	ands	r2, r1
 8003e12:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2210      	movs	r2, #16
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	d063      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d12a      	bne.n	8003e7c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003e26:	4b95      	ldr	r3, [pc, #596]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003e28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e2a:	4b94      	ldr	r3, [pc, #592]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003e2c:	2104      	movs	r1, #4
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003e32:	4b92      	ldr	r3, [pc, #584]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003e34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e36:	4b91      	ldr	r3, [pc, #580]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003e38:	2101      	movs	r1, #1
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e3e:	f7fe feaf 	bl	8002ba0 <HAL_GetTick>
 8003e42:	0003      	movs	r3, r0
 8003e44:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003e48:	f7fe feaa 	bl	8002ba0 <HAL_GetTick>
 8003e4c:	0002      	movs	r2, r0
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e152      	b.n	8004100 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003e5a:	4b88      	ldr	r3, [pc, #544]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5e:	2202      	movs	r2, #2
 8003e60:	4013      	ands	r3, r2
 8003e62:	d0f1      	beq.n	8003e48 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003e64:	4b85      	ldr	r3, [pc, #532]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e68:	22f8      	movs	r2, #248	; 0xf8
 8003e6a:	4393      	bics	r3, r2
 8003e6c:	0019      	movs	r1, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	00da      	lsls	r2, r3, #3
 8003e74:	4b81      	ldr	r3, [pc, #516]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003e76:	430a      	orrs	r2, r1
 8003e78:	635a      	str	r2, [r3, #52]	; 0x34
 8003e7a:	e034      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	3305      	adds	r3, #5
 8003e82:	d111      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003e84:	4b7d      	ldr	r3, [pc, #500]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e88:	4b7c      	ldr	r3, [pc, #496]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003e8a:	2104      	movs	r1, #4
 8003e8c:	438a      	bics	r2, r1
 8003e8e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003e90:	4b7a      	ldr	r3, [pc, #488]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e94:	22f8      	movs	r2, #248	; 0xf8
 8003e96:	4393      	bics	r3, r2
 8003e98:	0019      	movs	r1, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	00da      	lsls	r2, r3, #3
 8003ea0:	4b76      	ldr	r3, [pc, #472]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	635a      	str	r2, [r3, #52]	; 0x34
 8003ea6:	e01e      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003ea8:	4b74      	ldr	r3, [pc, #464]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eac:	4b73      	ldr	r3, [pc, #460]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003eae:	2104      	movs	r1, #4
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003eb4:	4b71      	ldr	r3, [pc, #452]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003eb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eb8:	4b70      	ldr	r3, [pc, #448]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003eba:	2101      	movs	r1, #1
 8003ebc:	438a      	bics	r2, r1
 8003ebe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ec0:	f7fe fe6e 	bl	8002ba0 <HAL_GetTick>
 8003ec4:	0003      	movs	r3, r0
 8003ec6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003ec8:	e008      	b.n	8003edc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003eca:	f7fe fe69 	bl	8002ba0 <HAL_GetTick>
 8003ece:	0002      	movs	r2, r0
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e111      	b.n	8004100 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003edc:	4b67      	ldr	r3, [pc, #412]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee0:	2202      	movs	r2, #2
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	d1f1      	bne.n	8003eca <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2220      	movs	r2, #32
 8003eec:	4013      	ands	r3, r2
 8003eee:	d05c      	beq.n	8003faa <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003ef0:	4b62      	ldr	r3, [pc, #392]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	220c      	movs	r2, #12
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	2b0c      	cmp	r3, #12
 8003efa:	d00e      	beq.n	8003f1a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003efc:	4b5f      	ldr	r3, [pc, #380]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	220c      	movs	r2, #12
 8003f02:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d114      	bne.n	8003f32 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003f08:	4b5c      	ldr	r3, [pc, #368]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	23c0      	movs	r3, #192	; 0xc0
 8003f0e:	025b      	lsls	r3, r3, #9
 8003f10:	401a      	ands	r2, r3
 8003f12:	23c0      	movs	r3, #192	; 0xc0
 8003f14:	025b      	lsls	r3, r3, #9
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d10b      	bne.n	8003f32 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003f1a:	4b58      	ldr	r3, [pc, #352]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003f1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f1e:	2380      	movs	r3, #128	; 0x80
 8003f20:	025b      	lsls	r3, r3, #9
 8003f22:	4013      	ands	r3, r2
 8003f24:	d040      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x5a8>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d03c      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e0e6      	b.n	8004100 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d01b      	beq.n	8003f72 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003f3a:	4b50      	ldr	r3, [pc, #320]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003f3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f3e:	4b4f      	ldr	r3, [pc, #316]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003f40:	2180      	movs	r1, #128	; 0x80
 8003f42:	0249      	lsls	r1, r1, #9
 8003f44:	430a      	orrs	r2, r1
 8003f46:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f48:	f7fe fe2a 	bl	8002ba0 <HAL_GetTick>
 8003f4c:	0003      	movs	r3, r0
 8003f4e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003f50:	e008      	b.n	8003f64 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f52:	f7fe fe25 	bl	8002ba0 <HAL_GetTick>
 8003f56:	0002      	movs	r2, r0
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e0cd      	b.n	8004100 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003f64:	4b45      	ldr	r3, [pc, #276]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003f66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f68:	2380      	movs	r3, #128	; 0x80
 8003f6a:	025b      	lsls	r3, r3, #9
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	d0f0      	beq.n	8003f52 <HAL_RCC_OscConfig+0x552>
 8003f70:	e01b      	b.n	8003faa <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003f72:	4b42      	ldr	r3, [pc, #264]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003f74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f76:	4b41      	ldr	r3, [pc, #260]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003f78:	4943      	ldr	r1, [pc, #268]	; (8004088 <HAL_RCC_OscConfig+0x688>)
 8003f7a:	400a      	ands	r2, r1
 8003f7c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7e:	f7fe fe0f 	bl	8002ba0 <HAL_GetTick>
 8003f82:	0003      	movs	r3, r0
 8003f84:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f88:	f7fe fe0a 	bl	8002ba0 <HAL_GetTick>
 8003f8c:	0002      	movs	r2, r0
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e0b2      	b.n	8004100 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003f9a:	4b38      	ldr	r3, [pc, #224]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003f9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f9e:	2380      	movs	r3, #128	; 0x80
 8003fa0:	025b      	lsls	r3, r3, #9
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	d1f0      	bne.n	8003f88 <HAL_RCC_OscConfig+0x588>
 8003fa6:	e000      	b.n	8003faa <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003fa8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d100      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x5b4>
 8003fb2:	e0a4      	b.n	80040fe <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fb4:	4b31      	ldr	r3, [pc, #196]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	220c      	movs	r2, #12
 8003fba:	4013      	ands	r3, r2
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d100      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x5c2>
 8003fc0:	e078      	b.n	80040b4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d14c      	bne.n	8004064 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fca:	4b2c      	ldr	r3, [pc, #176]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	4b2b      	ldr	r3, [pc, #172]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003fd0:	492e      	ldr	r1, [pc, #184]	; (800408c <HAL_RCC_OscConfig+0x68c>)
 8003fd2:	400a      	ands	r2, r1
 8003fd4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd6:	f7fe fde3 	bl	8002ba0 <HAL_GetTick>
 8003fda:	0003      	movs	r3, r0
 8003fdc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fe0:	f7fe fdde 	bl	8002ba0 <HAL_GetTick>
 8003fe4:	0002      	movs	r2, r0
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e086      	b.n	8004100 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ff2:	4b22      	ldr	r3, [pc, #136]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	2380      	movs	r3, #128	; 0x80
 8003ff8:	049b      	lsls	r3, r3, #18
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	d1f0      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ffe:	4b1f      	ldr	r3, [pc, #124]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8004000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004002:	220f      	movs	r2, #15
 8004004:	4393      	bics	r3, r2
 8004006:	0019      	movs	r1, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800400c:	4b1b      	ldr	r3, [pc, #108]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 800400e:	430a      	orrs	r2, r1
 8004010:	62da      	str	r2, [r3, #44]	; 0x2c
 8004012:	4b1a      	ldr	r3, [pc, #104]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	4a1e      	ldr	r2, [pc, #120]	; (8004090 <HAL_RCC_OscConfig+0x690>)
 8004018:	4013      	ands	r3, r2
 800401a:	0019      	movs	r1, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004024:	431a      	orrs	r2, r3
 8004026:	4b15      	ldr	r3, [pc, #84]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8004028:	430a      	orrs	r2, r1
 800402a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800402c:	4b13      	ldr	r3, [pc, #76]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	4b12      	ldr	r3, [pc, #72]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8004032:	2180      	movs	r1, #128	; 0x80
 8004034:	0449      	lsls	r1, r1, #17
 8004036:	430a      	orrs	r2, r1
 8004038:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403a:	f7fe fdb1 	bl	8002ba0 <HAL_GetTick>
 800403e:	0003      	movs	r3, r0
 8004040:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004044:	f7fe fdac 	bl	8002ba0 <HAL_GetTick>
 8004048:	0002      	movs	r2, r0
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e054      	b.n	8004100 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004056:	4b09      	ldr	r3, [pc, #36]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	2380      	movs	r3, #128	; 0x80
 800405c:	049b      	lsls	r3, r3, #18
 800405e:	4013      	ands	r3, r2
 8004060:	d0f0      	beq.n	8004044 <HAL_RCC_OscConfig+0x644>
 8004062:	e04c      	b.n	80040fe <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004064:	4b05      	ldr	r3, [pc, #20]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	4b04      	ldr	r3, [pc, #16]	; (800407c <HAL_RCC_OscConfig+0x67c>)
 800406a:	4908      	ldr	r1, [pc, #32]	; (800408c <HAL_RCC_OscConfig+0x68c>)
 800406c:	400a      	ands	r2, r1
 800406e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004070:	f7fe fd96 	bl	8002ba0 <HAL_GetTick>
 8004074:	0003      	movs	r3, r0
 8004076:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004078:	e015      	b.n	80040a6 <HAL_RCC_OscConfig+0x6a6>
 800407a:	46c0      	nop			; (mov r8, r8)
 800407c:	40021000 	.word	0x40021000
 8004080:	00001388 	.word	0x00001388
 8004084:	efffffff 	.word	0xefffffff
 8004088:	fffeffff 	.word	0xfffeffff
 800408c:	feffffff 	.word	0xfeffffff
 8004090:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004094:	f7fe fd84 	bl	8002ba0 <HAL_GetTick>
 8004098:	0002      	movs	r2, r0
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e02c      	b.n	8004100 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040a6:	4b18      	ldr	r3, [pc, #96]	; (8004108 <HAL_RCC_OscConfig+0x708>)
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	2380      	movs	r3, #128	; 0x80
 80040ac:	049b      	lsls	r3, r3, #18
 80040ae:	4013      	ands	r3, r2
 80040b0:	d1f0      	bne.n	8004094 <HAL_RCC_OscConfig+0x694>
 80040b2:	e024      	b.n	80040fe <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d101      	bne.n	80040c0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e01f      	b.n	8004100 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80040c0:	4b11      	ldr	r3, [pc, #68]	; (8004108 <HAL_RCC_OscConfig+0x708>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80040c6:	4b10      	ldr	r3, [pc, #64]	; (8004108 <HAL_RCC_OscConfig+0x708>)
 80040c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ca:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	23c0      	movs	r3, #192	; 0xc0
 80040d0:	025b      	lsls	r3, r3, #9
 80040d2:	401a      	ands	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d8:	429a      	cmp	r2, r3
 80040da:	d10e      	bne.n	80040fa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	220f      	movs	r2, #15
 80040e0:	401a      	ands	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d107      	bne.n	80040fa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	23f0      	movs	r3, #240	; 0xf0
 80040ee:	039b      	lsls	r3, r3, #14
 80040f0:	401a      	ands	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d001      	beq.n	80040fe <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e000      	b.n	8004100 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	0018      	movs	r0, r3
 8004102:	46bd      	mov	sp, r7
 8004104:	b008      	add	sp, #32
 8004106:	bd80      	pop	{r7, pc}
 8004108:	40021000 	.word	0x40021000

0800410c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e0bf      	b.n	80042a0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004120:	4b61      	ldr	r3, [pc, #388]	; (80042a8 <HAL_RCC_ClockConfig+0x19c>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2201      	movs	r2, #1
 8004126:	4013      	ands	r3, r2
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	429a      	cmp	r2, r3
 800412c:	d911      	bls.n	8004152 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800412e:	4b5e      	ldr	r3, [pc, #376]	; (80042a8 <HAL_RCC_ClockConfig+0x19c>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2201      	movs	r2, #1
 8004134:	4393      	bics	r3, r2
 8004136:	0019      	movs	r1, r3
 8004138:	4b5b      	ldr	r3, [pc, #364]	; (80042a8 <HAL_RCC_ClockConfig+0x19c>)
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004140:	4b59      	ldr	r3, [pc, #356]	; (80042a8 <HAL_RCC_ClockConfig+0x19c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2201      	movs	r2, #1
 8004146:	4013      	ands	r3, r2
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d001      	beq.n	8004152 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e0a6      	b.n	80042a0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2202      	movs	r2, #2
 8004158:	4013      	ands	r3, r2
 800415a:	d015      	beq.n	8004188 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2204      	movs	r2, #4
 8004162:	4013      	ands	r3, r2
 8004164:	d006      	beq.n	8004174 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004166:	4b51      	ldr	r3, [pc, #324]	; (80042ac <HAL_RCC_ClockConfig+0x1a0>)
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	4b50      	ldr	r3, [pc, #320]	; (80042ac <HAL_RCC_ClockConfig+0x1a0>)
 800416c:	21e0      	movs	r1, #224	; 0xe0
 800416e:	00c9      	lsls	r1, r1, #3
 8004170:	430a      	orrs	r2, r1
 8004172:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004174:	4b4d      	ldr	r3, [pc, #308]	; (80042ac <HAL_RCC_ClockConfig+0x1a0>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	22f0      	movs	r2, #240	; 0xf0
 800417a:	4393      	bics	r3, r2
 800417c:	0019      	movs	r1, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689a      	ldr	r2, [r3, #8]
 8004182:	4b4a      	ldr	r3, [pc, #296]	; (80042ac <HAL_RCC_ClockConfig+0x1a0>)
 8004184:	430a      	orrs	r2, r1
 8004186:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2201      	movs	r2, #1
 800418e:	4013      	ands	r3, r2
 8004190:	d04c      	beq.n	800422c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d107      	bne.n	80041aa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800419a:	4b44      	ldr	r3, [pc, #272]	; (80042ac <HAL_RCC_ClockConfig+0x1a0>)
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	2380      	movs	r3, #128	; 0x80
 80041a0:	029b      	lsls	r3, r3, #10
 80041a2:	4013      	ands	r3, r2
 80041a4:	d120      	bne.n	80041e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e07a      	b.n	80042a0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d107      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041b2:	4b3e      	ldr	r3, [pc, #248]	; (80042ac <HAL_RCC_ClockConfig+0x1a0>)
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	2380      	movs	r3, #128	; 0x80
 80041b8:	049b      	lsls	r3, r3, #18
 80041ba:	4013      	ands	r3, r2
 80041bc:	d114      	bne.n	80041e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e06e      	b.n	80042a0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2b03      	cmp	r3, #3
 80041c8:	d107      	bne.n	80041da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80041ca:	4b38      	ldr	r3, [pc, #224]	; (80042ac <HAL_RCC_ClockConfig+0x1a0>)
 80041cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041ce:	2380      	movs	r3, #128	; 0x80
 80041d0:	025b      	lsls	r3, r3, #9
 80041d2:	4013      	ands	r3, r2
 80041d4:	d108      	bne.n	80041e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e062      	b.n	80042a0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041da:	4b34      	ldr	r3, [pc, #208]	; (80042ac <HAL_RCC_ClockConfig+0x1a0>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2202      	movs	r2, #2
 80041e0:	4013      	ands	r3, r2
 80041e2:	d101      	bne.n	80041e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e05b      	b.n	80042a0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041e8:	4b30      	ldr	r3, [pc, #192]	; (80042ac <HAL_RCC_ClockConfig+0x1a0>)
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	2203      	movs	r2, #3
 80041ee:	4393      	bics	r3, r2
 80041f0:	0019      	movs	r1, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	4b2d      	ldr	r3, [pc, #180]	; (80042ac <HAL_RCC_ClockConfig+0x1a0>)
 80041f8:	430a      	orrs	r2, r1
 80041fa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041fc:	f7fe fcd0 	bl	8002ba0 <HAL_GetTick>
 8004200:	0003      	movs	r3, r0
 8004202:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004204:	e009      	b.n	800421a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004206:	f7fe fccb 	bl	8002ba0 <HAL_GetTick>
 800420a:	0002      	movs	r2, r0
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	4a27      	ldr	r2, [pc, #156]	; (80042b0 <HAL_RCC_ClockConfig+0x1a4>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d901      	bls.n	800421a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e042      	b.n	80042a0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800421a:	4b24      	ldr	r3, [pc, #144]	; (80042ac <HAL_RCC_ClockConfig+0x1a0>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	220c      	movs	r2, #12
 8004220:	401a      	ands	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	429a      	cmp	r2, r3
 800422a:	d1ec      	bne.n	8004206 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800422c:	4b1e      	ldr	r3, [pc, #120]	; (80042a8 <HAL_RCC_ClockConfig+0x19c>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2201      	movs	r2, #1
 8004232:	4013      	ands	r3, r2
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	429a      	cmp	r2, r3
 8004238:	d211      	bcs.n	800425e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800423a:	4b1b      	ldr	r3, [pc, #108]	; (80042a8 <HAL_RCC_ClockConfig+0x19c>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2201      	movs	r2, #1
 8004240:	4393      	bics	r3, r2
 8004242:	0019      	movs	r1, r3
 8004244:	4b18      	ldr	r3, [pc, #96]	; (80042a8 <HAL_RCC_ClockConfig+0x19c>)
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	430a      	orrs	r2, r1
 800424a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800424c:	4b16      	ldr	r3, [pc, #88]	; (80042a8 <HAL_RCC_ClockConfig+0x19c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2201      	movs	r2, #1
 8004252:	4013      	ands	r3, r2
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d001      	beq.n	800425e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e020      	b.n	80042a0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2204      	movs	r2, #4
 8004264:	4013      	ands	r3, r2
 8004266:	d009      	beq.n	800427c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004268:	4b10      	ldr	r3, [pc, #64]	; (80042ac <HAL_RCC_ClockConfig+0x1a0>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	4a11      	ldr	r2, [pc, #68]	; (80042b4 <HAL_RCC_ClockConfig+0x1a8>)
 800426e:	4013      	ands	r3, r2
 8004270:	0019      	movs	r1, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68da      	ldr	r2, [r3, #12]
 8004276:	4b0d      	ldr	r3, [pc, #52]	; (80042ac <HAL_RCC_ClockConfig+0x1a0>)
 8004278:	430a      	orrs	r2, r1
 800427a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800427c:	f000 f820 	bl	80042c0 <HAL_RCC_GetSysClockFreq>
 8004280:	0001      	movs	r1, r0
 8004282:	4b0a      	ldr	r3, [pc, #40]	; (80042ac <HAL_RCC_ClockConfig+0x1a0>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	091b      	lsrs	r3, r3, #4
 8004288:	220f      	movs	r2, #15
 800428a:	4013      	ands	r3, r2
 800428c:	4a0a      	ldr	r2, [pc, #40]	; (80042b8 <HAL_RCC_ClockConfig+0x1ac>)
 800428e:	5cd3      	ldrb	r3, [r2, r3]
 8004290:	000a      	movs	r2, r1
 8004292:	40da      	lsrs	r2, r3
 8004294:	4b09      	ldr	r3, [pc, #36]	; (80042bc <HAL_RCC_ClockConfig+0x1b0>)
 8004296:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004298:	2003      	movs	r0, #3
 800429a:	f7fe fc3b 	bl	8002b14 <HAL_InitTick>
  
  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	0018      	movs	r0, r3
 80042a2:	46bd      	mov	sp, r7
 80042a4:	b004      	add	sp, #16
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	40022000 	.word	0x40022000
 80042ac:	40021000 	.word	0x40021000
 80042b0:	00001388 	.word	0x00001388
 80042b4:	fffff8ff 	.word	0xfffff8ff
 80042b8:	0800ab3c 	.word	0x0800ab3c
 80042bc:	20000000 	.word	0x20000000

080042c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042c0:	b590      	push	{r4, r7, lr}
 80042c2:	b08f      	sub	sp, #60	; 0x3c
 80042c4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80042c6:	2314      	movs	r3, #20
 80042c8:	18fb      	adds	r3, r7, r3
 80042ca:	4a38      	ldr	r2, [pc, #224]	; (80043ac <HAL_RCC_GetSysClockFreq+0xec>)
 80042cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80042ce:	c313      	stmia	r3!, {r0, r1, r4}
 80042d0:	6812      	ldr	r2, [r2, #0]
 80042d2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80042d4:	1d3b      	adds	r3, r7, #4
 80042d6:	4a36      	ldr	r2, [pc, #216]	; (80043b0 <HAL_RCC_GetSysClockFreq+0xf0>)
 80042d8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80042da:	c313      	stmia	r3!, {r0, r1, r4}
 80042dc:	6812      	ldr	r2, [r2, #0]
 80042de:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042e4:	2300      	movs	r3, #0
 80042e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80042e8:	2300      	movs	r3, #0
 80042ea:	637b      	str	r3, [r7, #52]	; 0x34
 80042ec:	2300      	movs	r3, #0
 80042ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80042f4:	4b2f      	ldr	r3, [pc, #188]	; (80043b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fc:	220c      	movs	r2, #12
 80042fe:	4013      	ands	r3, r2
 8004300:	2b0c      	cmp	r3, #12
 8004302:	d047      	beq.n	8004394 <HAL_RCC_GetSysClockFreq+0xd4>
 8004304:	d849      	bhi.n	800439a <HAL_RCC_GetSysClockFreq+0xda>
 8004306:	2b04      	cmp	r3, #4
 8004308:	d002      	beq.n	8004310 <HAL_RCC_GetSysClockFreq+0x50>
 800430a:	2b08      	cmp	r3, #8
 800430c:	d003      	beq.n	8004316 <HAL_RCC_GetSysClockFreq+0x56>
 800430e:	e044      	b.n	800439a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004310:	4b29      	ldr	r3, [pc, #164]	; (80043b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004312:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004314:	e044      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004318:	0c9b      	lsrs	r3, r3, #18
 800431a:	220f      	movs	r2, #15
 800431c:	4013      	ands	r3, r2
 800431e:	2214      	movs	r2, #20
 8004320:	18ba      	adds	r2, r7, r2
 8004322:	5cd3      	ldrb	r3, [r2, r3]
 8004324:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004326:	4b23      	ldr	r3, [pc, #140]	; (80043b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432a:	220f      	movs	r2, #15
 800432c:	4013      	ands	r3, r2
 800432e:	1d3a      	adds	r2, r7, #4
 8004330:	5cd3      	ldrb	r3, [r2, r3]
 8004332:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004334:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004336:	23c0      	movs	r3, #192	; 0xc0
 8004338:	025b      	lsls	r3, r3, #9
 800433a:	401a      	ands	r2, r3
 800433c:	2380      	movs	r3, #128	; 0x80
 800433e:	025b      	lsls	r3, r3, #9
 8004340:	429a      	cmp	r2, r3
 8004342:	d109      	bne.n	8004358 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004344:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004346:	481c      	ldr	r0, [pc, #112]	; (80043b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004348:	f7fb fefa 	bl	8000140 <__udivsi3>
 800434c:	0003      	movs	r3, r0
 800434e:	001a      	movs	r2, r3
 8004350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004352:	4353      	muls	r3, r2
 8004354:	637b      	str	r3, [r7, #52]	; 0x34
 8004356:	e01a      	b.n	800438e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004358:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800435a:	23c0      	movs	r3, #192	; 0xc0
 800435c:	025b      	lsls	r3, r3, #9
 800435e:	401a      	ands	r2, r3
 8004360:	23c0      	movs	r3, #192	; 0xc0
 8004362:	025b      	lsls	r3, r3, #9
 8004364:	429a      	cmp	r2, r3
 8004366:	d109      	bne.n	800437c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004368:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800436a:	4814      	ldr	r0, [pc, #80]	; (80043bc <HAL_RCC_GetSysClockFreq+0xfc>)
 800436c:	f7fb fee8 	bl	8000140 <__udivsi3>
 8004370:	0003      	movs	r3, r0
 8004372:	001a      	movs	r2, r3
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	4353      	muls	r3, r2
 8004378:	637b      	str	r3, [r7, #52]	; 0x34
 800437a:	e008      	b.n	800438e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800437c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800437e:	480e      	ldr	r0, [pc, #56]	; (80043b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004380:	f7fb fede 	bl	8000140 <__udivsi3>
 8004384:	0003      	movs	r3, r0
 8004386:	001a      	movs	r2, r3
 8004388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438a:	4353      	muls	r3, r2
 800438c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800438e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004390:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004392:	e005      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004394:	4b09      	ldr	r3, [pc, #36]	; (80043bc <HAL_RCC_GetSysClockFreq+0xfc>)
 8004396:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004398:	e002      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800439a:	4b07      	ldr	r3, [pc, #28]	; (80043b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800439c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800439e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80043a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80043a2:	0018      	movs	r0, r3
 80043a4:	46bd      	mov	sp, r7
 80043a6:	b00f      	add	sp, #60	; 0x3c
 80043a8:	bd90      	pop	{r4, r7, pc}
 80043aa:	46c0      	nop			; (mov r8, r8)
 80043ac:	0800aa94 	.word	0x0800aa94
 80043b0:	0800aaa4 	.word	0x0800aaa4
 80043b4:	40021000 	.word	0x40021000
 80043b8:	007a1200 	.word	0x007a1200
 80043bc:	02dc6c00 	.word	0x02dc6c00

080043c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c4:	4b02      	ldr	r3, [pc, #8]	; (80043d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80043c6:	681b      	ldr	r3, [r3, #0]
}
 80043c8:	0018      	movs	r0, r3
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	46c0      	nop			; (mov r8, r8)
 80043d0:	20000000 	.word	0x20000000

080043d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80043d8:	f7ff fff2 	bl	80043c0 <HAL_RCC_GetHCLKFreq>
 80043dc:	0001      	movs	r1, r0
 80043de:	4b06      	ldr	r3, [pc, #24]	; (80043f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	0a1b      	lsrs	r3, r3, #8
 80043e4:	2207      	movs	r2, #7
 80043e6:	4013      	ands	r3, r2
 80043e8:	4a04      	ldr	r2, [pc, #16]	; (80043fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80043ea:	5cd3      	ldrb	r3, [r2, r3]
 80043ec:	40d9      	lsrs	r1, r3
 80043ee:	000b      	movs	r3, r1
}    
 80043f0:	0018      	movs	r0, r3
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	46c0      	nop			; (mov r8, r8)
 80043f8:	40021000 	.word	0x40021000
 80043fc:	0800ab4c 	.word	0x0800ab4c

08004400 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e044      	b.n	800449c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004416:	2b00      	cmp	r3, #0
 8004418:	d107      	bne.n	800442a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2274      	movs	r2, #116	; 0x74
 800441e:	2100      	movs	r1, #0
 8004420:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	0018      	movs	r0, r3
 8004426:	f7fe fa11 	bl	800284c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2224      	movs	r2, #36	; 0x24
 800442e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2101      	movs	r1, #1
 800443c:	438a      	bics	r2, r1
 800443e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	0018      	movs	r0, r3
 8004444:	f000 f8da 	bl	80045fc <UART_SetConfig>
 8004448:	0003      	movs	r3, r0
 800444a:	2b01      	cmp	r3, #1
 800444c:	d101      	bne.n	8004452 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e024      	b.n	800449c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	0018      	movs	r0, r3
 800445e:	f000 fa55 	bl	800490c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	490d      	ldr	r1, [pc, #52]	; (80044a4 <HAL_UART_Init+0xa4>)
 800446e:	400a      	ands	r2, r1
 8004470:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	212a      	movs	r1, #42	; 0x2a
 800447e:	438a      	bics	r2, r1
 8004480:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2101      	movs	r1, #1
 800448e:	430a      	orrs	r2, r1
 8004490:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	0018      	movs	r0, r3
 8004496:	f000 faed 	bl	8004a74 <UART_CheckIdleState>
 800449a:	0003      	movs	r3, r0
}
 800449c:	0018      	movs	r0, r3
 800449e:	46bd      	mov	sp, r7
 80044a0:	b002      	add	sp, #8
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	ffffb7ff 	.word	0xffffb7ff

080044a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b08a      	sub	sp, #40	; 0x28
 80044ac:	af02      	add	r7, sp, #8
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	603b      	str	r3, [r7, #0]
 80044b4:	1dbb      	adds	r3, r7, #6
 80044b6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044bc:	2b20      	cmp	r3, #32
 80044be:	d000      	beq.n	80044c2 <HAL_UART_Transmit+0x1a>
 80044c0:	e096      	b.n	80045f0 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d003      	beq.n	80044d0 <HAL_UART_Transmit+0x28>
 80044c8:	1dbb      	adds	r3, r7, #6
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d101      	bne.n	80044d4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e08e      	b.n	80045f2 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	2380      	movs	r3, #128	; 0x80
 80044da:	015b      	lsls	r3, r3, #5
 80044dc:	429a      	cmp	r2, r3
 80044de:	d109      	bne.n	80044f4 <HAL_UART_Transmit+0x4c>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d105      	bne.n	80044f4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	2201      	movs	r2, #1
 80044ec:	4013      	ands	r3, r2
 80044ee:	d001      	beq.n	80044f4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e07e      	b.n	80045f2 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2274      	movs	r2, #116	; 0x74
 80044f8:	5c9b      	ldrb	r3, [r3, r2]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d101      	bne.n	8004502 <HAL_UART_Transmit+0x5a>
 80044fe:	2302      	movs	r3, #2
 8004500:	e077      	b.n	80045f2 <HAL_UART_Transmit+0x14a>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2274      	movs	r2, #116	; 0x74
 8004506:	2101      	movs	r1, #1
 8004508:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2280      	movs	r2, #128	; 0x80
 800450e:	2100      	movs	r1, #0
 8004510:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2221      	movs	r2, #33	; 0x21
 8004516:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004518:	f7fe fb42 	bl	8002ba0 <HAL_GetTick>
 800451c:	0003      	movs	r3, r0
 800451e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	1dba      	adds	r2, r7, #6
 8004524:	2150      	movs	r1, #80	; 0x50
 8004526:	8812      	ldrh	r2, [r2, #0]
 8004528:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	1dba      	adds	r2, r7, #6
 800452e:	2152      	movs	r1, #82	; 0x52
 8004530:	8812      	ldrh	r2, [r2, #0]
 8004532:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	2380      	movs	r3, #128	; 0x80
 800453a:	015b      	lsls	r3, r3, #5
 800453c:	429a      	cmp	r2, r3
 800453e:	d108      	bne.n	8004552 <HAL_UART_Transmit+0xaa>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d104      	bne.n	8004552 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8004548:	2300      	movs	r3, #0
 800454a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	61bb      	str	r3, [r7, #24]
 8004550:	e003      	b.n	800455a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004556:	2300      	movs	r3, #0
 8004558:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2274      	movs	r2, #116	; 0x74
 800455e:	2100      	movs	r1, #0
 8004560:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004562:	e02d      	b.n	80045c0 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	0013      	movs	r3, r2
 800456e:	2200      	movs	r2, #0
 8004570:	2180      	movs	r1, #128	; 0x80
 8004572:	f000 fac7 	bl	8004b04 <UART_WaitOnFlagUntilTimeout>
 8004576:	1e03      	subs	r3, r0, #0
 8004578:	d001      	beq.n	800457e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e039      	b.n	80045f2 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10b      	bne.n	800459c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	881a      	ldrh	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	05d2      	lsls	r2, r2, #23
 800458e:	0dd2      	lsrs	r2, r2, #23
 8004590:	b292      	uxth	r2, r2
 8004592:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	3302      	adds	r3, #2
 8004598:	61bb      	str	r3, [r7, #24]
 800459a:	e008      	b.n	80045ae <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	781a      	ldrb	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	b292      	uxth	r2, r2
 80045a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	3301      	adds	r3, #1
 80045ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2252      	movs	r2, #82	; 0x52
 80045b2:	5a9b      	ldrh	r3, [r3, r2]
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	3b01      	subs	r3, #1
 80045b8:	b299      	uxth	r1, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2252      	movs	r2, #82	; 0x52
 80045be:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2252      	movs	r2, #82	; 0x52
 80045c4:	5a9b      	ldrh	r3, [r3, r2]
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1cb      	bne.n	8004564 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	0013      	movs	r3, r2
 80045d6:	2200      	movs	r2, #0
 80045d8:	2140      	movs	r1, #64	; 0x40
 80045da:	f000 fa93 	bl	8004b04 <UART_WaitOnFlagUntilTimeout>
 80045de:	1e03      	subs	r3, r0, #0
 80045e0:	d001      	beq.n	80045e6 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e005      	b.n	80045f2 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2220      	movs	r2, #32
 80045ea:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80045ec:	2300      	movs	r3, #0
 80045ee:	e000      	b.n	80045f2 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80045f0:	2302      	movs	r3, #2
  }
}
 80045f2:	0018      	movs	r0, r3
 80045f4:	46bd      	mov	sp, r7
 80045f6:	b008      	add	sp, #32
 80045f8:	bd80      	pop	{r7, pc}
	...

080045fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b088      	sub	sp, #32
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004604:	231e      	movs	r3, #30
 8004606:	18fb      	adds	r3, r7, r3
 8004608:	2200      	movs	r2, #0
 800460a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	431a      	orrs	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	431a      	orrs	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	69db      	ldr	r3, [r3, #28]
 8004620:	4313      	orrs	r3, r2
 8004622:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4aaf      	ldr	r2, [pc, #700]	; (80048e8 <UART_SetConfig+0x2ec>)
 800462c:	4013      	ands	r3, r2
 800462e:	0019      	movs	r1, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	430a      	orrs	r2, r1
 8004638:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	4aaa      	ldr	r2, [pc, #680]	; (80048ec <UART_SetConfig+0x2f0>)
 8004642:	4013      	ands	r3, r2
 8004644:	0019      	movs	r1, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	4313      	orrs	r3, r2
 8004660:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	4aa1      	ldr	r2, [pc, #644]	; (80048f0 <UART_SetConfig+0x2f4>)
 800466a:	4013      	ands	r3, r2
 800466c:	0019      	movs	r1, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	430a      	orrs	r2, r1
 8004676:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a9d      	ldr	r2, [pc, #628]	; (80048f4 <UART_SetConfig+0x2f8>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d127      	bne.n	80046d2 <UART_SetConfig+0xd6>
 8004682:	4b9d      	ldr	r3, [pc, #628]	; (80048f8 <UART_SetConfig+0x2fc>)
 8004684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004686:	2203      	movs	r2, #3
 8004688:	4013      	ands	r3, r2
 800468a:	2b03      	cmp	r3, #3
 800468c:	d00d      	beq.n	80046aa <UART_SetConfig+0xae>
 800468e:	d81b      	bhi.n	80046c8 <UART_SetConfig+0xcc>
 8004690:	2b02      	cmp	r3, #2
 8004692:	d014      	beq.n	80046be <UART_SetConfig+0xc2>
 8004694:	d818      	bhi.n	80046c8 <UART_SetConfig+0xcc>
 8004696:	2b00      	cmp	r3, #0
 8004698:	d002      	beq.n	80046a0 <UART_SetConfig+0xa4>
 800469a:	2b01      	cmp	r3, #1
 800469c:	d00a      	beq.n	80046b4 <UART_SetConfig+0xb8>
 800469e:	e013      	b.n	80046c8 <UART_SetConfig+0xcc>
 80046a0:	231f      	movs	r3, #31
 80046a2:	18fb      	adds	r3, r7, r3
 80046a4:	2200      	movs	r2, #0
 80046a6:	701a      	strb	r2, [r3, #0]
 80046a8:	e065      	b.n	8004776 <UART_SetConfig+0x17a>
 80046aa:	231f      	movs	r3, #31
 80046ac:	18fb      	adds	r3, r7, r3
 80046ae:	2202      	movs	r2, #2
 80046b0:	701a      	strb	r2, [r3, #0]
 80046b2:	e060      	b.n	8004776 <UART_SetConfig+0x17a>
 80046b4:	231f      	movs	r3, #31
 80046b6:	18fb      	adds	r3, r7, r3
 80046b8:	2204      	movs	r2, #4
 80046ba:	701a      	strb	r2, [r3, #0]
 80046bc:	e05b      	b.n	8004776 <UART_SetConfig+0x17a>
 80046be:	231f      	movs	r3, #31
 80046c0:	18fb      	adds	r3, r7, r3
 80046c2:	2208      	movs	r2, #8
 80046c4:	701a      	strb	r2, [r3, #0]
 80046c6:	e056      	b.n	8004776 <UART_SetConfig+0x17a>
 80046c8:	231f      	movs	r3, #31
 80046ca:	18fb      	adds	r3, r7, r3
 80046cc:	2210      	movs	r2, #16
 80046ce:	701a      	strb	r2, [r3, #0]
 80046d0:	e051      	b.n	8004776 <UART_SetConfig+0x17a>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a89      	ldr	r2, [pc, #548]	; (80048fc <UART_SetConfig+0x300>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d134      	bne.n	8004746 <UART_SetConfig+0x14a>
 80046dc:	4b86      	ldr	r3, [pc, #536]	; (80048f8 <UART_SetConfig+0x2fc>)
 80046de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046e0:	23c0      	movs	r3, #192	; 0xc0
 80046e2:	029b      	lsls	r3, r3, #10
 80046e4:	4013      	ands	r3, r2
 80046e6:	22c0      	movs	r2, #192	; 0xc0
 80046e8:	0292      	lsls	r2, r2, #10
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d017      	beq.n	800471e <UART_SetConfig+0x122>
 80046ee:	22c0      	movs	r2, #192	; 0xc0
 80046f0:	0292      	lsls	r2, r2, #10
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d822      	bhi.n	800473c <UART_SetConfig+0x140>
 80046f6:	2280      	movs	r2, #128	; 0x80
 80046f8:	0292      	lsls	r2, r2, #10
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d019      	beq.n	8004732 <UART_SetConfig+0x136>
 80046fe:	2280      	movs	r2, #128	; 0x80
 8004700:	0292      	lsls	r2, r2, #10
 8004702:	4293      	cmp	r3, r2
 8004704:	d81a      	bhi.n	800473c <UART_SetConfig+0x140>
 8004706:	2b00      	cmp	r3, #0
 8004708:	d004      	beq.n	8004714 <UART_SetConfig+0x118>
 800470a:	2280      	movs	r2, #128	; 0x80
 800470c:	0252      	lsls	r2, r2, #9
 800470e:	4293      	cmp	r3, r2
 8004710:	d00a      	beq.n	8004728 <UART_SetConfig+0x12c>
 8004712:	e013      	b.n	800473c <UART_SetConfig+0x140>
 8004714:	231f      	movs	r3, #31
 8004716:	18fb      	adds	r3, r7, r3
 8004718:	2200      	movs	r2, #0
 800471a:	701a      	strb	r2, [r3, #0]
 800471c:	e02b      	b.n	8004776 <UART_SetConfig+0x17a>
 800471e:	231f      	movs	r3, #31
 8004720:	18fb      	adds	r3, r7, r3
 8004722:	2202      	movs	r2, #2
 8004724:	701a      	strb	r2, [r3, #0]
 8004726:	e026      	b.n	8004776 <UART_SetConfig+0x17a>
 8004728:	231f      	movs	r3, #31
 800472a:	18fb      	adds	r3, r7, r3
 800472c:	2204      	movs	r2, #4
 800472e:	701a      	strb	r2, [r3, #0]
 8004730:	e021      	b.n	8004776 <UART_SetConfig+0x17a>
 8004732:	231f      	movs	r3, #31
 8004734:	18fb      	adds	r3, r7, r3
 8004736:	2208      	movs	r2, #8
 8004738:	701a      	strb	r2, [r3, #0]
 800473a:	e01c      	b.n	8004776 <UART_SetConfig+0x17a>
 800473c:	231f      	movs	r3, #31
 800473e:	18fb      	adds	r3, r7, r3
 8004740:	2210      	movs	r2, #16
 8004742:	701a      	strb	r2, [r3, #0]
 8004744:	e017      	b.n	8004776 <UART_SetConfig+0x17a>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a6d      	ldr	r2, [pc, #436]	; (8004900 <UART_SetConfig+0x304>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d104      	bne.n	800475a <UART_SetConfig+0x15e>
 8004750:	231f      	movs	r3, #31
 8004752:	18fb      	adds	r3, r7, r3
 8004754:	2200      	movs	r2, #0
 8004756:	701a      	strb	r2, [r3, #0]
 8004758:	e00d      	b.n	8004776 <UART_SetConfig+0x17a>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a69      	ldr	r2, [pc, #420]	; (8004904 <UART_SetConfig+0x308>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d104      	bne.n	800476e <UART_SetConfig+0x172>
 8004764:	231f      	movs	r3, #31
 8004766:	18fb      	adds	r3, r7, r3
 8004768:	2200      	movs	r2, #0
 800476a:	701a      	strb	r2, [r3, #0]
 800476c:	e003      	b.n	8004776 <UART_SetConfig+0x17a>
 800476e:	231f      	movs	r3, #31
 8004770:	18fb      	adds	r3, r7, r3
 8004772:	2210      	movs	r2, #16
 8004774:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	69da      	ldr	r2, [r3, #28]
 800477a:	2380      	movs	r3, #128	; 0x80
 800477c:	021b      	lsls	r3, r3, #8
 800477e:	429a      	cmp	r2, r3
 8004780:	d15d      	bne.n	800483e <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8004782:	231f      	movs	r3, #31
 8004784:	18fb      	adds	r3, r7, r3
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	2b08      	cmp	r3, #8
 800478a:	d015      	beq.n	80047b8 <UART_SetConfig+0x1bc>
 800478c:	dc18      	bgt.n	80047c0 <UART_SetConfig+0x1c4>
 800478e:	2b04      	cmp	r3, #4
 8004790:	d00d      	beq.n	80047ae <UART_SetConfig+0x1b2>
 8004792:	dc15      	bgt.n	80047c0 <UART_SetConfig+0x1c4>
 8004794:	2b00      	cmp	r3, #0
 8004796:	d002      	beq.n	800479e <UART_SetConfig+0x1a2>
 8004798:	2b02      	cmp	r3, #2
 800479a:	d005      	beq.n	80047a8 <UART_SetConfig+0x1ac>
 800479c:	e010      	b.n	80047c0 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800479e:	f7ff fe19 	bl	80043d4 <HAL_RCC_GetPCLK1Freq>
 80047a2:	0003      	movs	r3, r0
 80047a4:	61bb      	str	r3, [r7, #24]
        break;
 80047a6:	e012      	b.n	80047ce <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047a8:	4b57      	ldr	r3, [pc, #348]	; (8004908 <UART_SetConfig+0x30c>)
 80047aa:	61bb      	str	r3, [r7, #24]
        break;
 80047ac:	e00f      	b.n	80047ce <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ae:	f7ff fd87 	bl	80042c0 <HAL_RCC_GetSysClockFreq>
 80047b2:	0003      	movs	r3, r0
 80047b4:	61bb      	str	r3, [r7, #24]
        break;
 80047b6:	e00a      	b.n	80047ce <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047b8:	2380      	movs	r3, #128	; 0x80
 80047ba:	021b      	lsls	r3, r3, #8
 80047bc:	61bb      	str	r3, [r7, #24]
        break;
 80047be:	e006      	b.n	80047ce <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80047c0:	2300      	movs	r3, #0
 80047c2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047c4:	231e      	movs	r3, #30
 80047c6:	18fb      	adds	r3, r7, r3
 80047c8:	2201      	movs	r2, #1
 80047ca:	701a      	strb	r2, [r3, #0]
        break;
 80047cc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d100      	bne.n	80047d6 <UART_SetConfig+0x1da>
 80047d4:	e07b      	b.n	80048ce <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	005a      	lsls	r2, r3, #1
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	085b      	lsrs	r3, r3, #1
 80047e0:	18d2      	adds	r2, r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	0019      	movs	r1, r3
 80047e8:	0010      	movs	r0, r2
 80047ea:	f7fb fca9 	bl	8000140 <__udivsi3>
 80047ee:	0003      	movs	r3, r0
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	2b0f      	cmp	r3, #15
 80047f8:	d91c      	bls.n	8004834 <UART_SetConfig+0x238>
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	2380      	movs	r3, #128	; 0x80
 80047fe:	025b      	lsls	r3, r3, #9
 8004800:	429a      	cmp	r2, r3
 8004802:	d217      	bcs.n	8004834 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	b29a      	uxth	r2, r3
 8004808:	200e      	movs	r0, #14
 800480a:	183b      	adds	r3, r7, r0
 800480c:	210f      	movs	r1, #15
 800480e:	438a      	bics	r2, r1
 8004810:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	085b      	lsrs	r3, r3, #1
 8004816:	b29b      	uxth	r3, r3
 8004818:	2207      	movs	r2, #7
 800481a:	4013      	ands	r3, r2
 800481c:	b299      	uxth	r1, r3
 800481e:	183b      	adds	r3, r7, r0
 8004820:	183a      	adds	r2, r7, r0
 8004822:	8812      	ldrh	r2, [r2, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	183a      	adds	r2, r7, r0
 800482e:	8812      	ldrh	r2, [r2, #0]
 8004830:	60da      	str	r2, [r3, #12]
 8004832:	e04c      	b.n	80048ce <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8004834:	231e      	movs	r3, #30
 8004836:	18fb      	adds	r3, r7, r3
 8004838:	2201      	movs	r2, #1
 800483a:	701a      	strb	r2, [r3, #0]
 800483c:	e047      	b.n	80048ce <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800483e:	231f      	movs	r3, #31
 8004840:	18fb      	adds	r3, r7, r3
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	2b08      	cmp	r3, #8
 8004846:	d015      	beq.n	8004874 <UART_SetConfig+0x278>
 8004848:	dc18      	bgt.n	800487c <UART_SetConfig+0x280>
 800484a:	2b04      	cmp	r3, #4
 800484c:	d00d      	beq.n	800486a <UART_SetConfig+0x26e>
 800484e:	dc15      	bgt.n	800487c <UART_SetConfig+0x280>
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <UART_SetConfig+0x25e>
 8004854:	2b02      	cmp	r3, #2
 8004856:	d005      	beq.n	8004864 <UART_SetConfig+0x268>
 8004858:	e010      	b.n	800487c <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800485a:	f7ff fdbb 	bl	80043d4 <HAL_RCC_GetPCLK1Freq>
 800485e:	0003      	movs	r3, r0
 8004860:	61bb      	str	r3, [r7, #24]
        break;
 8004862:	e012      	b.n	800488a <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004864:	4b28      	ldr	r3, [pc, #160]	; (8004908 <UART_SetConfig+0x30c>)
 8004866:	61bb      	str	r3, [r7, #24]
        break;
 8004868:	e00f      	b.n	800488a <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800486a:	f7ff fd29 	bl	80042c0 <HAL_RCC_GetSysClockFreq>
 800486e:	0003      	movs	r3, r0
 8004870:	61bb      	str	r3, [r7, #24]
        break;
 8004872:	e00a      	b.n	800488a <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004874:	2380      	movs	r3, #128	; 0x80
 8004876:	021b      	lsls	r3, r3, #8
 8004878:	61bb      	str	r3, [r7, #24]
        break;
 800487a:	e006      	b.n	800488a <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 800487c:	2300      	movs	r3, #0
 800487e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004880:	231e      	movs	r3, #30
 8004882:	18fb      	adds	r3, r7, r3
 8004884:	2201      	movs	r2, #1
 8004886:	701a      	strb	r2, [r3, #0]
        break;
 8004888:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d01e      	beq.n	80048ce <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	085a      	lsrs	r2, r3, #1
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	18d2      	adds	r2, r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	0019      	movs	r1, r3
 80048a0:	0010      	movs	r0, r2
 80048a2:	f7fb fc4d 	bl	8000140 <__udivsi3>
 80048a6:	0003      	movs	r3, r0
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	2b0f      	cmp	r3, #15
 80048b0:	d909      	bls.n	80048c6 <UART_SetConfig+0x2ca>
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	2380      	movs	r3, #128	; 0x80
 80048b6:	025b      	lsls	r3, r3, #9
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d204      	bcs.n	80048c6 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	60da      	str	r2, [r3, #12]
 80048c4:	e003      	b.n	80048ce <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80048c6:	231e      	movs	r3, #30
 80048c8:	18fb      	adds	r3, r7, r3
 80048ca:	2201      	movs	r2, #1
 80048cc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80048da:	231e      	movs	r3, #30
 80048dc:	18fb      	adds	r3, r7, r3
 80048de:	781b      	ldrb	r3, [r3, #0]
}
 80048e0:	0018      	movs	r0, r3
 80048e2:	46bd      	mov	sp, r7
 80048e4:	b008      	add	sp, #32
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	efff69f3 	.word	0xefff69f3
 80048ec:	ffffcfff 	.word	0xffffcfff
 80048f0:	fffff4ff 	.word	0xfffff4ff
 80048f4:	40013800 	.word	0x40013800
 80048f8:	40021000 	.word	0x40021000
 80048fc:	40004400 	.word	0x40004400
 8004900:	40004800 	.word	0x40004800
 8004904:	40004c00 	.word	0x40004c00
 8004908:	007a1200 	.word	0x007a1200

0800490c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004918:	2201      	movs	r2, #1
 800491a:	4013      	ands	r3, r2
 800491c:	d00b      	beq.n	8004936 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	4a4a      	ldr	r2, [pc, #296]	; (8004a50 <UART_AdvFeatureConfig+0x144>)
 8004926:	4013      	ands	r3, r2
 8004928:	0019      	movs	r1, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	2202      	movs	r2, #2
 800493c:	4013      	ands	r3, r2
 800493e:	d00b      	beq.n	8004958 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	4a43      	ldr	r2, [pc, #268]	; (8004a54 <UART_AdvFeatureConfig+0x148>)
 8004948:	4013      	ands	r3, r2
 800494a:	0019      	movs	r1, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	430a      	orrs	r2, r1
 8004956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	2204      	movs	r2, #4
 800495e:	4013      	ands	r3, r2
 8004960:	d00b      	beq.n	800497a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	4a3b      	ldr	r2, [pc, #236]	; (8004a58 <UART_AdvFeatureConfig+0x14c>)
 800496a:	4013      	ands	r3, r2
 800496c:	0019      	movs	r1, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497e:	2208      	movs	r2, #8
 8004980:	4013      	ands	r3, r2
 8004982:	d00b      	beq.n	800499c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	4a34      	ldr	r2, [pc, #208]	; (8004a5c <UART_AdvFeatureConfig+0x150>)
 800498c:	4013      	ands	r3, r2
 800498e:	0019      	movs	r1, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	430a      	orrs	r2, r1
 800499a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	2210      	movs	r2, #16
 80049a2:	4013      	ands	r3, r2
 80049a4:	d00b      	beq.n	80049be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	4a2c      	ldr	r2, [pc, #176]	; (8004a60 <UART_AdvFeatureConfig+0x154>)
 80049ae:	4013      	ands	r3, r2
 80049b0:	0019      	movs	r1, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	2220      	movs	r2, #32
 80049c4:	4013      	ands	r3, r2
 80049c6:	d00b      	beq.n	80049e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	4a25      	ldr	r2, [pc, #148]	; (8004a64 <UART_AdvFeatureConfig+0x158>)
 80049d0:	4013      	ands	r3, r2
 80049d2:	0019      	movs	r1, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	430a      	orrs	r2, r1
 80049de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	2240      	movs	r2, #64	; 0x40
 80049e6:	4013      	ands	r3, r2
 80049e8:	d01d      	beq.n	8004a26 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	4a1d      	ldr	r2, [pc, #116]	; (8004a68 <UART_AdvFeatureConfig+0x15c>)
 80049f2:	4013      	ands	r3, r2
 80049f4:	0019      	movs	r1, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a06:	2380      	movs	r3, #128	; 0x80
 8004a08:	035b      	lsls	r3, r3, #13
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d10b      	bne.n	8004a26 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	4a15      	ldr	r2, [pc, #84]	; (8004a6c <UART_AdvFeatureConfig+0x160>)
 8004a16:	4013      	ands	r3, r2
 8004a18:	0019      	movs	r1, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	2280      	movs	r2, #128	; 0x80
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	d00b      	beq.n	8004a48 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	4a0e      	ldr	r2, [pc, #56]	; (8004a70 <UART_AdvFeatureConfig+0x164>)
 8004a38:	4013      	ands	r3, r2
 8004a3a:	0019      	movs	r1, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	605a      	str	r2, [r3, #4]
  }
}
 8004a48:	46c0      	nop			; (mov r8, r8)
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	b002      	add	sp, #8
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	fffdffff 	.word	0xfffdffff
 8004a54:	fffeffff 	.word	0xfffeffff
 8004a58:	fffbffff 	.word	0xfffbffff
 8004a5c:	ffff7fff 	.word	0xffff7fff
 8004a60:	ffffefff 	.word	0xffffefff
 8004a64:	ffffdfff 	.word	0xffffdfff
 8004a68:	ffefffff 	.word	0xffefffff
 8004a6c:	ff9fffff 	.word	0xff9fffff
 8004a70:	fff7ffff 	.word	0xfff7ffff

08004a74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af02      	add	r7, sp, #8
 8004a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2280      	movs	r2, #128	; 0x80
 8004a80:	2100      	movs	r1, #0
 8004a82:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a84:	f7fe f88c 	bl	8002ba0 <HAL_GetTick>
 8004a88:	0003      	movs	r3, r0
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2208      	movs	r2, #8
 8004a94:	4013      	ands	r3, r2
 8004a96:	2b08      	cmp	r3, #8
 8004a98:	d10c      	bne.n	8004ab4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2280      	movs	r2, #128	; 0x80
 8004a9e:	0391      	lsls	r1, r2, #14
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	4a17      	ldr	r2, [pc, #92]	; (8004b00 <UART_CheckIdleState+0x8c>)
 8004aa4:	9200      	str	r2, [sp, #0]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f000 f82c 	bl	8004b04 <UART_WaitOnFlagUntilTimeout>
 8004aac:	1e03      	subs	r3, r0, #0
 8004aae:	d001      	beq.n	8004ab4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e021      	b.n	8004af8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2204      	movs	r2, #4
 8004abc:	4013      	ands	r3, r2
 8004abe:	2b04      	cmp	r3, #4
 8004ac0:	d10c      	bne.n	8004adc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2280      	movs	r2, #128	; 0x80
 8004ac6:	03d1      	lsls	r1, r2, #15
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	4a0d      	ldr	r2, [pc, #52]	; (8004b00 <UART_CheckIdleState+0x8c>)
 8004acc:	9200      	str	r2, [sp, #0]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f000 f818 	bl	8004b04 <UART_WaitOnFlagUntilTimeout>
 8004ad4:	1e03      	subs	r3, r0, #0
 8004ad6:	d001      	beq.n	8004adc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e00d      	b.n	8004af8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2274      	movs	r2, #116	; 0x74
 8004af2:	2100      	movs	r1, #0
 8004af4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	0018      	movs	r0, r3
 8004afa:	46bd      	mov	sp, r7
 8004afc:	b004      	add	sp, #16
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	01ffffff 	.word	0x01ffffff

08004b04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b094      	sub	sp, #80	; 0x50
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	603b      	str	r3, [r7, #0]
 8004b10:	1dfb      	adds	r3, r7, #7
 8004b12:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b14:	e0a3      	b.n	8004c5e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b18:	3301      	adds	r3, #1
 8004b1a:	d100      	bne.n	8004b1e <UART_WaitOnFlagUntilTimeout+0x1a>
 8004b1c:	e09f      	b.n	8004c5e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b1e:	f7fe f83f 	bl	8002ba0 <HAL_GetTick>
 8004b22:	0002      	movs	r2, r0
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d302      	bcc.n	8004b34 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d13d      	bne.n	8004bb0 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b34:	f3ef 8310 	mrs	r3, PRIMASK
 8004b38:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b3c:	647b      	str	r3, [r7, #68]	; 0x44
 8004b3e:	2301      	movs	r3, #1
 8004b40:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b44:	f383 8810 	msr	PRIMASK, r3
}
 8004b48:	46c0      	nop			; (mov r8, r8)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	494c      	ldr	r1, [pc, #304]	; (8004c88 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004b56:	400a      	ands	r2, r1
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b5c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b60:	f383 8810 	msr	PRIMASK, r3
}
 8004b64:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b66:	f3ef 8310 	mrs	r3, PRIMASK
 8004b6a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b6e:	643b      	str	r3, [r7, #64]	; 0x40
 8004b70:	2301      	movs	r3, #1
 8004b72:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b76:	f383 8810 	msr	PRIMASK, r3
}
 8004b7a:	46c0      	nop			; (mov r8, r8)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689a      	ldr	r2, [r3, #8]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2101      	movs	r1, #1
 8004b88:	438a      	bics	r2, r1
 8004b8a:	609a      	str	r2, [r3, #8]
 8004b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b92:	f383 8810 	msr	PRIMASK, r3
}
 8004b96:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2274      	movs	r2, #116	; 0x74
 8004ba8:	2100      	movs	r1, #0
 8004baa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e067      	b.n	8004c80 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2204      	movs	r2, #4
 8004bb8:	4013      	ands	r3, r2
 8004bba:	d050      	beq.n	8004c5e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	69da      	ldr	r2, [r3, #28]
 8004bc2:	2380      	movs	r3, #128	; 0x80
 8004bc4:	011b      	lsls	r3, r3, #4
 8004bc6:	401a      	ands	r2, r3
 8004bc8:	2380      	movs	r3, #128	; 0x80
 8004bca:	011b      	lsls	r3, r3, #4
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d146      	bne.n	8004c5e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2280      	movs	r2, #128	; 0x80
 8004bd6:	0112      	lsls	r2, r2, #4
 8004bd8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bda:	f3ef 8310 	mrs	r3, PRIMASK
 8004bde:	613b      	str	r3, [r7, #16]
  return(result);
 8004be0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004be2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004be4:	2301      	movs	r3, #1
 8004be6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	f383 8810 	msr	PRIMASK, r3
}
 8004bee:	46c0      	nop			; (mov r8, r8)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4923      	ldr	r1, [pc, #140]	; (8004c88 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004bfc:	400a      	ands	r2, r1
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c02:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	f383 8810 	msr	PRIMASK, r3
}
 8004c0a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c0c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c10:	61fb      	str	r3, [r7, #28]
  return(result);
 8004c12:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c14:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c16:	2301      	movs	r3, #1
 8004c18:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	f383 8810 	msr	PRIMASK, r3
}
 8004c20:	46c0      	nop			; (mov r8, r8)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	689a      	ldr	r2, [r3, #8]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2101      	movs	r1, #1
 8004c2e:	438a      	bics	r2, r1
 8004c30:	609a      	str	r2, [r3, #8]
 8004c32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c34:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	f383 8810 	msr	PRIMASK, r3
}
 8004c3c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2220      	movs	r2, #32
 8004c42:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2220      	movs	r2, #32
 8004c48:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2280      	movs	r2, #128	; 0x80
 8004c4e:	2120      	movs	r1, #32
 8004c50:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2274      	movs	r2, #116	; 0x74
 8004c56:	2100      	movs	r1, #0
 8004c58:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e010      	b.n	8004c80 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	69db      	ldr	r3, [r3, #28]
 8004c64:	68ba      	ldr	r2, [r7, #8]
 8004c66:	4013      	ands	r3, r2
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	425a      	negs	r2, r3
 8004c6e:	4153      	adcs	r3, r2
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	001a      	movs	r2, r3
 8004c74:	1dfb      	adds	r3, r7, #7
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d100      	bne.n	8004c7e <UART_WaitOnFlagUntilTimeout+0x17a>
 8004c7c:	e74b      	b.n	8004b16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	0018      	movs	r0, r3
 8004c82:	46bd      	mov	sp, r7
 8004c84:	b014      	add	sp, #80	; 0x50
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	fffffe5f 	.word	0xfffffe5f

08004c8c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	0002      	movs	r2, r0
 8004c94:	1dbb      	adds	r3, r7, #6
 8004c96:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004c9c:	1dbb      	adds	r3, r7, #6
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	5e9b      	ldrsh	r3, [r3, r2]
 8004ca2:	2b84      	cmp	r3, #132	; 0x84
 8004ca4:	d006      	beq.n	8004cb4 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8004ca6:	1dbb      	adds	r3, r7, #6
 8004ca8:	2200      	movs	r2, #0
 8004caa:	5e9a      	ldrsh	r2, [r3, r2]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	18d3      	adds	r3, r2, r3
 8004cb0:	3303      	adds	r3, #3
 8004cb2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
}
 8004cb6:	0018      	movs	r0, r3
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	b004      	add	sp, #16
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004cc2:	f000 fab7 	bl	8005234 <vTaskStartScheduler>
  
  return osOK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	0018      	movs	r0, r3
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004cce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cd0:	b089      	sub	sp, #36	; 0x24
 8004cd2:	af04      	add	r7, sp, #16
 8004cd4:	6078      	str	r0, [r7, #4]
 8004cd6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d020      	beq.n	8004d22 <osThreadCreate+0x54>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d01c      	beq.n	8004d22 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685c      	ldr	r4, [r3, #4]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681d      	ldr	r5, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	691e      	ldr	r6, [r3, #16]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2208      	movs	r2, #8
 8004cf8:	5e9b      	ldrsh	r3, [r3, r2]
 8004cfa:	0018      	movs	r0, r3
 8004cfc:	f7ff ffc6 	bl	8004c8c <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	695a      	ldr	r2, [r3, #20]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d08:	6839      	ldr	r1, [r7, #0]
 8004d0a:	9302      	str	r3, [sp, #8]
 8004d0c:	9201      	str	r2, [sp, #4]
 8004d0e:	9000      	str	r0, [sp, #0]
 8004d10:	000b      	movs	r3, r1
 8004d12:	0032      	movs	r2, r6
 8004d14:	0029      	movs	r1, r5
 8004d16:	0020      	movs	r0, r4
 8004d18:	f000 f8e3 	bl	8004ee2 <xTaskCreateStatic>
 8004d1c:	0003      	movs	r3, r0
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	e01d      	b.n	8004d5e <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685c      	ldr	r4, [r3, #4]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d2e:	b29e      	uxth	r6, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2208      	movs	r2, #8
 8004d34:	5e9b      	ldrsh	r3, [r3, r2]
 8004d36:	0018      	movs	r0, r3
 8004d38:	f7ff ffa8 	bl	8004c8c <makeFreeRtosPriority>
 8004d3c:	0001      	movs	r1, r0
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	230c      	movs	r3, #12
 8004d42:	18fb      	adds	r3, r7, r3
 8004d44:	9301      	str	r3, [sp, #4]
 8004d46:	9100      	str	r1, [sp, #0]
 8004d48:	0013      	movs	r3, r2
 8004d4a:	0032      	movs	r2, r6
 8004d4c:	0029      	movs	r1, r5
 8004d4e:	0020      	movs	r0, r4
 8004d50:	f000 f90a 	bl	8004f68 <xTaskCreate>
 8004d54:	0003      	movs	r3, r0
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d001      	beq.n	8004d5e <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	e000      	b.n	8004d60 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
}
 8004d60:	0018      	movs	r0, r3
 8004d62:	46bd      	mov	sp, r7
 8004d64:	b005      	add	sp, #20
 8004d66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d68 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <osDelay+0x16>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	e000      	b.n	8004d80 <osDelay+0x18>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	0018      	movs	r0, r3
 8004d82:	f000 fa31 	bl	80051e8 <vTaskDelay>
  
  return osOK;
 8004d86:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004d88:	0018      	movs	r0, r3
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	b004      	add	sp, #16
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	3308      	adds	r3, #8
 8004d9c:	001a      	movs	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	4252      	negs	r2, r2
 8004da8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	3308      	adds	r3, #8
 8004dae:	001a      	movs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	3308      	adds	r3, #8
 8004db8:	001a      	movs	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004dc4:	46c0      	nop			; (mov r8, r8)
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	b002      	add	sp, #8
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004dda:	46c0      	nop			; (mov r8, r8)
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	b002      	add	sp, #8
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b084      	sub	sp, #16
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
 8004dea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	689a      	ldr	r2, [r3, #8]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	601a      	str	r2, [r3, #0]
}
 8004e1e:	46c0      	nop			; (mov r8, r8)
 8004e20:	46bd      	mov	sp, r7
 8004e22:	b004      	add	sp, #16
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b084      	sub	sp, #16
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
 8004e2e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	d103      	bne.n	8004e44 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	e00c      	b.n	8004e5e <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	3308      	adds	r3, #8
 8004e48:	60fb      	str	r3, [r7, #12]
 8004e4a:	e002      	b.n	8004e52 <vListInsert+0x2c>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	60fb      	str	r3, [r7, #12]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d2f6      	bcs.n	8004e4c <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	683a      	ldr	r2, [r7, #0]
 8004e6c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	1c5a      	adds	r2, r3, #1
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	601a      	str	r2, [r3, #0]
}
 8004e8a:	46c0      	nop			; (mov r8, r8)
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	b004      	add	sp, #16
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b084      	sub	sp, #16
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	6892      	ldr	r2, [r2, #8]
 8004ea8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	6852      	ldr	r2, [r2, #4]
 8004eb2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d103      	bne.n	8004ec6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	689a      	ldr	r2, [r3, #8]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	1e5a      	subs	r2, r3, #1
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
}
 8004eda:	0018      	movs	r0, r3
 8004edc:	46bd      	mov	sp, r7
 8004ede:	b004      	add	sp, #16
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ee2:	b590      	push	{r4, r7, lr}
 8004ee4:	b08d      	sub	sp, #52	; 0x34
 8004ee6:	af04      	add	r7, sp, #16
 8004ee8:	60f8      	str	r0, [r7, #12]
 8004eea:	60b9      	str	r1, [r7, #8]
 8004eec:	607a      	str	r2, [r7, #4]
 8004eee:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <xTaskCreateStatic+0x18>
 8004ef6:	b672      	cpsid	i
 8004ef8:	e7fe      	b.n	8004ef8 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8004efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d101      	bne.n	8004f04 <xTaskCreateStatic+0x22>
 8004f00:	b672      	cpsid	i
 8004f02:	e7fe      	b.n	8004f02 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f04:	23b4      	movs	r3, #180	; 0xb4
 8004f06:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	2bb4      	cmp	r3, #180	; 0xb4
 8004f0c:	d001      	beq.n	8004f12 <xTaskCreateStatic+0x30>
 8004f0e:	b672      	cpsid	i
 8004f10:	e7fe      	b.n	8004f10 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d020      	beq.n	8004f5a <xTaskCreateStatic+0x78>
 8004f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d01d      	beq.n	8004f5a <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f20:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f26:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	22b1      	movs	r2, #177	; 0xb1
 8004f2c:	2102      	movs	r1, #2
 8004f2e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f30:	683c      	ldr	r4, [r7, #0]
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	68b9      	ldr	r1, [r7, #8]
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	2300      	movs	r3, #0
 8004f3a:	9303      	str	r3, [sp, #12]
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	9302      	str	r3, [sp, #8]
 8004f40:	2318      	movs	r3, #24
 8004f42:	18fb      	adds	r3, r7, r3
 8004f44:	9301      	str	r3, [sp, #4]
 8004f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	0023      	movs	r3, r4
 8004f4c:	f000 f858 	bl	8005000 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	0018      	movs	r0, r3
 8004f54:	f000 f8e4 	bl	8005120 <prvAddNewTaskToReadyList>
 8004f58:	e001      	b.n	8004f5e <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004f5e:	69bb      	ldr	r3, [r7, #24]
	}
 8004f60:	0018      	movs	r0, r3
 8004f62:	46bd      	mov	sp, r7
 8004f64:	b009      	add	sp, #36	; 0x24
 8004f66:	bd90      	pop	{r4, r7, pc}

08004f68 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f68:	b590      	push	{r4, r7, lr}
 8004f6a:	b08d      	sub	sp, #52	; 0x34
 8004f6c:	af04      	add	r7, sp, #16
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	603b      	str	r3, [r7, #0]
 8004f74:	1dbb      	adds	r3, r7, #6
 8004f76:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f78:	1dbb      	adds	r3, r7, #6
 8004f7a:	881b      	ldrh	r3, [r3, #0]
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	0018      	movs	r0, r3
 8004f80:	f000 fdce 	bl	8005b20 <pvPortMalloc>
 8004f84:	0003      	movs	r3, r0
 8004f86:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d010      	beq.n	8004fb0 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004f8e:	20b4      	movs	r0, #180	; 0xb4
 8004f90:	f000 fdc6 	bl	8005b20 <pvPortMalloc>
 8004f94:	0003      	movs	r3, r0
 8004f96:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	631a      	str	r2, [r3, #48]	; 0x30
 8004fa4:	e006      	b.n	8004fb4 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	0018      	movs	r0, r3
 8004faa:	f000 fe5f 	bl	8005c6c <vPortFree>
 8004fae:	e001      	b.n	8004fb4 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d01a      	beq.n	8004ff0 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	22b1      	movs	r2, #177	; 0xb1
 8004fbe:	2100      	movs	r1, #0
 8004fc0:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004fc2:	1dbb      	adds	r3, r7, #6
 8004fc4:	881a      	ldrh	r2, [r3, #0]
 8004fc6:	683c      	ldr	r4, [r7, #0]
 8004fc8:	68b9      	ldr	r1, [r7, #8]
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	2300      	movs	r3, #0
 8004fce:	9303      	str	r3, [sp, #12]
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	9302      	str	r3, [sp, #8]
 8004fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fd6:	9301      	str	r3, [sp, #4]
 8004fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	0023      	movs	r3, r4
 8004fde:	f000 f80f 	bl	8005000 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	0018      	movs	r0, r3
 8004fe6:	f000 f89b 	bl	8005120 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004fea:	2301      	movs	r3, #1
 8004fec:	61bb      	str	r3, [r7, #24]
 8004fee:	e002      	b.n	8004ff6 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	425b      	negs	r3, r3
 8004ff4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004ff6:	69bb      	ldr	r3, [r7, #24]
	}
 8004ff8:	0018      	movs	r0, r3
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	b009      	add	sp, #36	; 0x24
 8004ffe:	bd90      	pop	{r4, r7, pc}

08005000 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
 800500c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800500e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	493e      	ldr	r1, [pc, #248]	; (8005110 <prvInitialiseNewTask+0x110>)
 8005016:	468c      	mov	ip, r1
 8005018:	4463      	add	r3, ip
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	18d3      	adds	r3, r2, r3
 800501e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	2207      	movs	r2, #7
 8005024:	4393      	bics	r3, r2
 8005026:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	2207      	movs	r2, #7
 800502c:	4013      	ands	r3, r2
 800502e:	d001      	beq.n	8005034 <prvInitialiseNewTask+0x34>
 8005030:	b672      	cpsid	i
 8005032:	e7fe      	b.n	8005032 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005034:	2300      	movs	r3, #0
 8005036:	617b      	str	r3, [r7, #20]
 8005038:	e013      	b.n	8005062 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	18d3      	adds	r3, r2, r3
 8005040:	7818      	ldrb	r0, [r3, #0]
 8005042:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005044:	2134      	movs	r1, #52	; 0x34
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	18d3      	adds	r3, r2, r3
 800504a:	185b      	adds	r3, r3, r1
 800504c:	1c02      	adds	r2, r0, #0
 800504e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	18d3      	adds	r3, r2, r3
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d006      	beq.n	800506a <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	3301      	adds	r3, #1
 8005060:	617b      	str	r3, [r7, #20]
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	2b0f      	cmp	r3, #15
 8005066:	d9e8      	bls.n	800503a <prvInitialiseNewTask+0x3a>
 8005068:	e000      	b.n	800506c <prvInitialiseNewTask+0x6c>
		{
			break;
 800506a:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800506c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506e:	2243      	movs	r2, #67	; 0x43
 8005070:	2100      	movs	r1, #0
 8005072:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005074:	6a3b      	ldr	r3, [r7, #32]
 8005076:	2b06      	cmp	r3, #6
 8005078:	d901      	bls.n	800507e <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800507a:	2306      	movs	r3, #6
 800507c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800507e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005080:	6a3a      	ldr	r2, [r7, #32]
 8005082:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005086:	6a3a      	ldr	r2, [r7, #32]
 8005088:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800508a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508c:	2200      	movs	r2, #0
 800508e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005092:	3304      	adds	r3, #4
 8005094:	0018      	movs	r0, r3
 8005096:	f7ff fe99 	bl	8004dcc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800509a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509c:	3318      	adds	r3, #24
 800509e:	0018      	movs	r0, r3
 80050a0:	f7ff fe94 	bl	8004dcc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80050a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050a8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	2207      	movs	r2, #7
 80050ae:	1ad2      	subs	r2, r2, r3
 80050b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80050b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050b8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80050ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050bc:	22ac      	movs	r2, #172	; 0xac
 80050be:	2100      	movs	r1, #0
 80050c0:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80050c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c4:	22b0      	movs	r2, #176	; 0xb0
 80050c6:	2100      	movs	r1, #0
 80050c8:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80050ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050cc:	334c      	adds	r3, #76	; 0x4c
 80050ce:	2260      	movs	r2, #96	; 0x60
 80050d0:	2100      	movs	r1, #0
 80050d2:	0018      	movs	r0, r3
 80050d4:	f001 f802 	bl	80060dc <memset>
 80050d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050da:	4a0e      	ldr	r2, [pc, #56]	; (8005114 <prvInitialiseNewTask+0x114>)
 80050dc:	651a      	str	r2, [r3, #80]	; 0x50
 80050de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e0:	4a0d      	ldr	r2, [pc, #52]	; (8005118 <prvInitialiseNewTask+0x118>)
 80050e2:	655a      	str	r2, [r3, #84]	; 0x54
 80050e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e6:	4a0d      	ldr	r2, [pc, #52]	; (800511c <prvInitialiseNewTask+0x11c>)
 80050e8:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	68f9      	ldr	r1, [r7, #12]
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	0018      	movs	r0, r3
 80050f2:	f000 fbe1 	bl	80058b8 <pxPortInitialiseStack>
 80050f6:	0002      	movs	r2, r0
 80050f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80050fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d002      	beq.n	8005108 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005104:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005106:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005108:	46c0      	nop			; (mov r8, r8)
 800510a:	46bd      	mov	sp, r7
 800510c:	b006      	add	sp, #24
 800510e:	bd80      	pop	{r7, pc}
 8005110:	3fffffff 	.word	0x3fffffff
 8005114:	0800ab74 	.word	0x0800ab74
 8005118:	0800ab94 	.word	0x0800ab94
 800511c:	0800ab54 	.word	0x0800ab54

08005120 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005128:	f000 fc62 	bl	80059f0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800512c:	4b28      	ldr	r3, [pc, #160]	; (80051d0 <prvAddNewTaskToReadyList+0xb0>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	1c5a      	adds	r2, r3, #1
 8005132:	4b27      	ldr	r3, [pc, #156]	; (80051d0 <prvAddNewTaskToReadyList+0xb0>)
 8005134:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8005136:	4b27      	ldr	r3, [pc, #156]	; (80051d4 <prvAddNewTaskToReadyList+0xb4>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d109      	bne.n	8005152 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800513e:	4b25      	ldr	r3, [pc, #148]	; (80051d4 <prvAddNewTaskToReadyList+0xb4>)
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005144:	4b22      	ldr	r3, [pc, #136]	; (80051d0 <prvAddNewTaskToReadyList+0xb0>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d110      	bne.n	800516e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800514c:	f000 fa80 	bl	8005650 <prvInitialiseTaskLists>
 8005150:	e00d      	b.n	800516e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005152:	4b21      	ldr	r3, [pc, #132]	; (80051d8 <prvAddNewTaskToReadyList+0xb8>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d109      	bne.n	800516e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800515a:	4b1e      	ldr	r3, [pc, #120]	; (80051d4 <prvAddNewTaskToReadyList+0xb4>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005164:	429a      	cmp	r2, r3
 8005166:	d802      	bhi.n	800516e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005168:	4b1a      	ldr	r3, [pc, #104]	; (80051d4 <prvAddNewTaskToReadyList+0xb4>)
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800516e:	4b1b      	ldr	r3, [pc, #108]	; (80051dc <prvAddNewTaskToReadyList+0xbc>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	1c5a      	adds	r2, r3, #1
 8005174:	4b19      	ldr	r3, [pc, #100]	; (80051dc <prvAddNewTaskToReadyList+0xbc>)
 8005176:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800517c:	4b18      	ldr	r3, [pc, #96]	; (80051e0 <prvAddNewTaskToReadyList+0xc0>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	429a      	cmp	r2, r3
 8005182:	d903      	bls.n	800518c <prvAddNewTaskToReadyList+0x6c>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005188:	4b15      	ldr	r3, [pc, #84]	; (80051e0 <prvAddNewTaskToReadyList+0xc0>)
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005190:	0013      	movs	r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	189b      	adds	r3, r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4a12      	ldr	r2, [pc, #72]	; (80051e4 <prvAddNewTaskToReadyList+0xc4>)
 800519a:	189a      	adds	r2, r3, r2
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	3304      	adds	r3, #4
 80051a0:	0019      	movs	r1, r3
 80051a2:	0010      	movs	r0, r2
 80051a4:	f7ff fe1d 	bl	8004de2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80051a8:	f000 fc34 	bl	8005a14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80051ac:	4b0a      	ldr	r3, [pc, #40]	; (80051d8 <prvAddNewTaskToReadyList+0xb8>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d008      	beq.n	80051c6 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80051b4:	4b07      	ldr	r3, [pc, #28]	; (80051d4 <prvAddNewTaskToReadyList+0xb4>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051be:	429a      	cmp	r2, r3
 80051c0:	d201      	bcs.n	80051c6 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80051c2:	f000 fc05 	bl	80059d0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051c6:	46c0      	nop			; (mov r8, r8)
 80051c8:	46bd      	mov	sp, r7
 80051ca:	b002      	add	sp, #8
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	46c0      	nop			; (mov r8, r8)
 80051d0:	200006b0 	.word	0x200006b0
 80051d4:	200005b0 	.word	0x200005b0
 80051d8:	200006bc 	.word	0x200006bc
 80051dc:	200006cc 	.word	0x200006cc
 80051e0:	200006b8 	.word	0x200006b8
 80051e4:	200005b4 	.word	0x200005b4

080051e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80051f0:	2300      	movs	r3, #0
 80051f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d010      	beq.n	800521c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80051fa:	4b0d      	ldr	r3, [pc, #52]	; (8005230 <vTaskDelay+0x48>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <vTaskDelay+0x1e>
 8005202:	b672      	cpsid	i
 8005204:	e7fe      	b.n	8005204 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8005206:	f000 f86d 	bl	80052e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2100      	movs	r1, #0
 800520e:	0018      	movs	r0, r3
 8005210:	f000 fafe 	bl	8005810 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005214:	f000 f872 	bl	80052fc <xTaskResumeAll>
 8005218:	0003      	movs	r3, r0
 800521a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8005222:	f000 fbd5 	bl	80059d0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005226:	46c0      	nop			; (mov r8, r8)
 8005228:	46bd      	mov	sp, r7
 800522a:	b004      	add	sp, #16
 800522c:	bd80      	pop	{r7, pc}
 800522e:	46c0      	nop			; (mov r8, r8)
 8005230:	200006d8 	.word	0x200006d8

08005234 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005234:	b590      	push	{r4, r7, lr}
 8005236:	b089      	sub	sp, #36	; 0x24
 8005238:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800523a:	2300      	movs	r3, #0
 800523c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800523e:	2300      	movs	r3, #0
 8005240:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005242:	003a      	movs	r2, r7
 8005244:	1d39      	adds	r1, r7, #4
 8005246:	2308      	movs	r3, #8
 8005248:	18fb      	adds	r3, r7, r3
 800524a:	0018      	movs	r0, r3
 800524c:	f7fd f828 	bl	80022a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005250:	683c      	ldr	r4, [r7, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	491b      	ldr	r1, [pc, #108]	; (80052c4 <vTaskStartScheduler+0x90>)
 8005258:	481b      	ldr	r0, [pc, #108]	; (80052c8 <vTaskStartScheduler+0x94>)
 800525a:	9202      	str	r2, [sp, #8]
 800525c:	9301      	str	r3, [sp, #4]
 800525e:	2300      	movs	r3, #0
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	2300      	movs	r3, #0
 8005264:	0022      	movs	r2, r4
 8005266:	f7ff fe3c 	bl	8004ee2 <xTaskCreateStatic>
 800526a:	0002      	movs	r2, r0
 800526c:	4b17      	ldr	r3, [pc, #92]	; (80052cc <vTaskStartScheduler+0x98>)
 800526e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005270:	4b16      	ldr	r3, [pc, #88]	; (80052cc <vTaskStartScheduler+0x98>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d002      	beq.n	800527e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005278:	2301      	movs	r3, #1
 800527a:	60fb      	str	r3, [r7, #12]
 800527c:	e001      	b.n	8005282 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800527e:	2300      	movs	r3, #0
 8005280:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d113      	bne.n	80052b0 <vTaskStartScheduler+0x7c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8005288:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800528a:	4b11      	ldr	r3, [pc, #68]	; (80052d0 <vTaskStartScheduler+0x9c>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	334c      	adds	r3, #76	; 0x4c
 8005290:	001a      	movs	r2, r3
 8005292:	4b10      	ldr	r3, [pc, #64]	; (80052d4 <vTaskStartScheduler+0xa0>)
 8005294:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005296:	4b10      	ldr	r3, [pc, #64]	; (80052d8 <vTaskStartScheduler+0xa4>)
 8005298:	2201      	movs	r2, #1
 800529a:	4252      	negs	r2, r2
 800529c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800529e:	4b0f      	ldr	r3, [pc, #60]	; (80052dc <vTaskStartScheduler+0xa8>)
 80052a0:	2201      	movs	r2, #1
 80052a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80052a4:	4b0e      	ldr	r3, [pc, #56]	; (80052e0 <vTaskStartScheduler+0xac>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80052aa:	f000 fb6d 	bl	8005988 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80052ae:	e004      	b.n	80052ba <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	3301      	adds	r3, #1
 80052b4:	d101      	bne.n	80052ba <vTaskStartScheduler+0x86>
 80052b6:	b672      	cpsid	i
 80052b8:	e7fe      	b.n	80052b8 <vTaskStartScheduler+0x84>
}
 80052ba:	46c0      	nop			; (mov r8, r8)
 80052bc:	46bd      	mov	sp, r7
 80052be:	b005      	add	sp, #20
 80052c0:	bd90      	pop	{r4, r7, pc}
 80052c2:	46c0      	nop			; (mov r8, r8)
 80052c4:	0800aab4 	.word	0x0800aab4
 80052c8:	08005631 	.word	0x08005631
 80052cc:	200006d4 	.word	0x200006d4
 80052d0:	200005b0 	.word	0x200005b0
 80052d4:	20000010 	.word	0x20000010
 80052d8:	200006d0 	.word	0x200006d0
 80052dc:	200006bc 	.word	0x200006bc
 80052e0:	200006b4 	.word	0x200006b4

080052e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80052e8:	4b03      	ldr	r3, [pc, #12]	; (80052f8 <vTaskSuspendAll+0x14>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	1c5a      	adds	r2, r3, #1
 80052ee:	4b02      	ldr	r3, [pc, #8]	; (80052f8 <vTaskSuspendAll+0x14>)
 80052f0:	601a      	str	r2, [r3, #0]
}
 80052f2:	46c0      	nop			; (mov r8, r8)
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	200006d8 	.word	0x200006d8

080052fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005302:	2300      	movs	r3, #0
 8005304:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005306:	2300      	movs	r3, #0
 8005308:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800530a:	4b3a      	ldr	r3, [pc, #232]	; (80053f4 <xTaskResumeAll+0xf8>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <xTaskResumeAll+0x1a>
 8005312:	b672      	cpsid	i
 8005314:	e7fe      	b.n	8005314 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005316:	f000 fb6b 	bl	80059f0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800531a:	4b36      	ldr	r3, [pc, #216]	; (80053f4 <xTaskResumeAll+0xf8>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	1e5a      	subs	r2, r3, #1
 8005320:	4b34      	ldr	r3, [pc, #208]	; (80053f4 <xTaskResumeAll+0xf8>)
 8005322:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005324:	4b33      	ldr	r3, [pc, #204]	; (80053f4 <xTaskResumeAll+0xf8>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d15b      	bne.n	80053e4 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800532c:	4b32      	ldr	r3, [pc, #200]	; (80053f8 <xTaskResumeAll+0xfc>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d057      	beq.n	80053e4 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005334:	e02f      	b.n	8005396 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005336:	4b31      	ldr	r3, [pc, #196]	; (80053fc <xTaskResumeAll+0x100>)
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	3318      	adds	r3, #24
 8005342:	0018      	movs	r0, r3
 8005344:	f7ff fda5 	bl	8004e92 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	3304      	adds	r3, #4
 800534c:	0018      	movs	r0, r3
 800534e:	f7ff fda0 	bl	8004e92 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005356:	4b2a      	ldr	r3, [pc, #168]	; (8005400 <xTaskResumeAll+0x104>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	429a      	cmp	r2, r3
 800535c:	d903      	bls.n	8005366 <xTaskResumeAll+0x6a>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005362:	4b27      	ldr	r3, [pc, #156]	; (8005400 <xTaskResumeAll+0x104>)
 8005364:	601a      	str	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800536a:	0013      	movs	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	189b      	adds	r3, r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4a24      	ldr	r2, [pc, #144]	; (8005404 <xTaskResumeAll+0x108>)
 8005374:	189a      	adds	r2, r3, r2
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	3304      	adds	r3, #4
 800537a:	0019      	movs	r1, r3
 800537c:	0010      	movs	r0, r2
 800537e:	f7ff fd30 	bl	8004de2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005386:	4b20      	ldr	r3, [pc, #128]	; (8005408 <xTaskResumeAll+0x10c>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538c:	429a      	cmp	r2, r3
 800538e:	d302      	bcc.n	8005396 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8005390:	4b1e      	ldr	r3, [pc, #120]	; (800540c <xTaskResumeAll+0x110>)
 8005392:	2201      	movs	r2, #1
 8005394:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005396:	4b19      	ldr	r3, [pc, #100]	; (80053fc <xTaskResumeAll+0x100>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1cb      	bne.n	8005336 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d001      	beq.n	80053a8 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80053a4:	f000 f9f4 	bl	8005790 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80053a8:	4b19      	ldr	r3, [pc, #100]	; (8005410 <xTaskResumeAll+0x114>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00f      	beq.n	80053d4 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80053b4:	f000 f82e 	bl	8005414 <xTaskIncrementTick>
 80053b8:	1e03      	subs	r3, r0, #0
 80053ba:	d002      	beq.n	80053c2 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80053bc:	4b13      	ldr	r3, [pc, #76]	; (800540c <xTaskResumeAll+0x110>)
 80053be:	2201      	movs	r2, #1
 80053c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	3b01      	subs	r3, #1
 80053c6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1f2      	bne.n	80053b4 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 80053ce:	4b10      	ldr	r3, [pc, #64]	; (8005410 <xTaskResumeAll+0x114>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80053d4:	4b0d      	ldr	r3, [pc, #52]	; (800540c <xTaskResumeAll+0x110>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d003      	beq.n	80053e4 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80053dc:	2301      	movs	r3, #1
 80053de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80053e0:	f000 faf6 	bl	80059d0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80053e4:	f000 fb16 	bl	8005a14 <vPortExitCritical>

	return xAlreadyYielded;
 80053e8:	68bb      	ldr	r3, [r7, #8]
}
 80053ea:	0018      	movs	r0, r3
 80053ec:	46bd      	mov	sp, r7
 80053ee:	b004      	add	sp, #16
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	46c0      	nop			; (mov r8, r8)
 80053f4:	200006d8 	.word	0x200006d8
 80053f8:	200006b0 	.word	0x200006b0
 80053fc:	20000670 	.word	0x20000670
 8005400:	200006b8 	.word	0x200006b8
 8005404:	200005b4 	.word	0x200005b4
 8005408:	200005b0 	.word	0x200005b0
 800540c:	200006c4 	.word	0x200006c4
 8005410:	200006c0 	.word	0x200006c0

08005414 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800541a:	2300      	movs	r3, #0
 800541c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800541e:	4b4c      	ldr	r3, [pc, #304]	; (8005550 <xTaskIncrementTick+0x13c>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d000      	beq.n	8005428 <xTaskIncrementTick+0x14>
 8005426:	e083      	b.n	8005530 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005428:	4b4a      	ldr	r3, [pc, #296]	; (8005554 <xTaskIncrementTick+0x140>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	3301      	adds	r3, #1
 800542e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005430:	4b48      	ldr	r3, [pc, #288]	; (8005554 <xTaskIncrementTick+0x140>)
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d117      	bne.n	800546c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800543c:	4b46      	ldr	r3, [pc, #280]	; (8005558 <xTaskIncrementTick+0x144>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <xTaskIncrementTick+0x36>
 8005446:	b672      	cpsid	i
 8005448:	e7fe      	b.n	8005448 <xTaskIncrementTick+0x34>
 800544a:	4b43      	ldr	r3, [pc, #268]	; (8005558 <xTaskIncrementTick+0x144>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	60fb      	str	r3, [r7, #12]
 8005450:	4b42      	ldr	r3, [pc, #264]	; (800555c <xTaskIncrementTick+0x148>)
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	4b40      	ldr	r3, [pc, #256]	; (8005558 <xTaskIncrementTick+0x144>)
 8005456:	601a      	str	r2, [r3, #0]
 8005458:	4b40      	ldr	r3, [pc, #256]	; (800555c <xTaskIncrementTick+0x148>)
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	601a      	str	r2, [r3, #0]
 800545e:	4b40      	ldr	r3, [pc, #256]	; (8005560 <xTaskIncrementTick+0x14c>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	1c5a      	adds	r2, r3, #1
 8005464:	4b3e      	ldr	r3, [pc, #248]	; (8005560 <xTaskIncrementTick+0x14c>)
 8005466:	601a      	str	r2, [r3, #0]
 8005468:	f000 f992 	bl	8005790 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800546c:	4b3d      	ldr	r3, [pc, #244]	; (8005564 <xTaskIncrementTick+0x150>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	429a      	cmp	r2, r3
 8005474:	d34e      	bcc.n	8005514 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005476:	4b38      	ldr	r3, [pc, #224]	; (8005558 <xTaskIncrementTick+0x144>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <xTaskIncrementTick+0x70>
 8005480:	2301      	movs	r3, #1
 8005482:	e000      	b.n	8005486 <xTaskIncrementTick+0x72>
 8005484:	2300      	movs	r3, #0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d004      	beq.n	8005494 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800548a:	4b36      	ldr	r3, [pc, #216]	; (8005564 <xTaskIncrementTick+0x150>)
 800548c:	2201      	movs	r2, #1
 800548e:	4252      	negs	r2, r2
 8005490:	601a      	str	r2, [r3, #0]
					break;
 8005492:	e03f      	b.n	8005514 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005494:	4b30      	ldr	r3, [pc, #192]	; (8005558 <xTaskIncrementTick+0x144>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d203      	bcs.n	80054b4 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80054ac:	4b2d      	ldr	r3, [pc, #180]	; (8005564 <xTaskIncrementTick+0x150>)
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	601a      	str	r2, [r3, #0]
						break;
 80054b2:	e02f      	b.n	8005514 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	3304      	adds	r3, #4
 80054b8:	0018      	movs	r0, r3
 80054ba:	f7ff fcea 	bl	8004e92 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d004      	beq.n	80054d0 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	3318      	adds	r3, #24
 80054ca:	0018      	movs	r0, r3
 80054cc:	f7ff fce1 	bl	8004e92 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d4:	4b24      	ldr	r3, [pc, #144]	; (8005568 <xTaskIncrementTick+0x154>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d903      	bls.n	80054e4 <xTaskIncrementTick+0xd0>
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e0:	4b21      	ldr	r3, [pc, #132]	; (8005568 <xTaskIncrementTick+0x154>)
 80054e2:	601a      	str	r2, [r3, #0]
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e8:	0013      	movs	r3, r2
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	189b      	adds	r3, r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4a1e      	ldr	r2, [pc, #120]	; (800556c <xTaskIncrementTick+0x158>)
 80054f2:	189a      	adds	r2, r3, r2
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	3304      	adds	r3, #4
 80054f8:	0019      	movs	r1, r3
 80054fa:	0010      	movs	r0, r2
 80054fc:	f7ff fc71 	bl	8004de2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005504:	4b1a      	ldr	r3, [pc, #104]	; (8005570 <xTaskIncrementTick+0x15c>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550a:	429a      	cmp	r2, r3
 800550c:	d3b3      	bcc.n	8005476 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800550e:	2301      	movs	r3, #1
 8005510:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005512:	e7b0      	b.n	8005476 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005514:	4b16      	ldr	r3, [pc, #88]	; (8005570 <xTaskIncrementTick+0x15c>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800551a:	4914      	ldr	r1, [pc, #80]	; (800556c <xTaskIncrementTick+0x158>)
 800551c:	0013      	movs	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	189b      	adds	r3, r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	585b      	ldr	r3, [r3, r1]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d907      	bls.n	800553a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800552a:	2301      	movs	r3, #1
 800552c:	617b      	str	r3, [r7, #20]
 800552e:	e004      	b.n	800553a <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005530:	4b10      	ldr	r3, [pc, #64]	; (8005574 <xTaskIncrementTick+0x160>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	1c5a      	adds	r2, r3, #1
 8005536:	4b0f      	ldr	r3, [pc, #60]	; (8005574 <xTaskIncrementTick+0x160>)
 8005538:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800553a:	4b0f      	ldr	r3, [pc, #60]	; (8005578 <xTaskIncrementTick+0x164>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d001      	beq.n	8005546 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8005542:	2301      	movs	r3, #1
 8005544:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005546:	697b      	ldr	r3, [r7, #20]
}
 8005548:	0018      	movs	r0, r3
 800554a:	46bd      	mov	sp, r7
 800554c:	b006      	add	sp, #24
 800554e:	bd80      	pop	{r7, pc}
 8005550:	200006d8 	.word	0x200006d8
 8005554:	200006b4 	.word	0x200006b4
 8005558:	20000668 	.word	0x20000668
 800555c:	2000066c 	.word	0x2000066c
 8005560:	200006c8 	.word	0x200006c8
 8005564:	200006d0 	.word	0x200006d0
 8005568:	200006b8 	.word	0x200006b8
 800556c:	200005b4 	.word	0x200005b4
 8005570:	200005b0 	.word	0x200005b0
 8005574:	200006c0 	.word	0x200006c0
 8005578:	200006c4 	.word	0x200006c4

0800557c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005582:	4b25      	ldr	r3, [pc, #148]	; (8005618 <vTaskSwitchContext+0x9c>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800558a:	4b24      	ldr	r3, [pc, #144]	; (800561c <vTaskSwitchContext+0xa0>)
 800558c:	2201      	movs	r2, #1
 800558e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005590:	e03d      	b.n	800560e <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 8005592:	4b22      	ldr	r3, [pc, #136]	; (800561c <vTaskSwitchContext+0xa0>)
 8005594:	2200      	movs	r2, #0
 8005596:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005598:	4b21      	ldr	r3, [pc, #132]	; (8005620 <vTaskSwitchContext+0xa4>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	607b      	str	r3, [r7, #4]
 800559e:	e007      	b.n	80055b0 <vTaskSwitchContext+0x34>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d101      	bne.n	80055aa <vTaskSwitchContext+0x2e>
 80055a6:	b672      	cpsid	i
 80055a8:	e7fe      	b.n	80055a8 <vTaskSwitchContext+0x2c>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	3b01      	subs	r3, #1
 80055ae:	607b      	str	r3, [r7, #4]
 80055b0:	491c      	ldr	r1, [pc, #112]	; (8005624 <vTaskSwitchContext+0xa8>)
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	0013      	movs	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	189b      	adds	r3, r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	585b      	ldr	r3, [r3, r1]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d0ee      	beq.n	80055a0 <vTaskSwitchContext+0x24>
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	0013      	movs	r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	189b      	adds	r3, r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4a15      	ldr	r2, [pc, #84]	; (8005624 <vTaskSwitchContext+0xa8>)
 80055ce:	189b      	adds	r3, r3, r2
 80055d0:	603b      	str	r3, [r7, #0]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	605a      	str	r2, [r3, #4]
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	3308      	adds	r3, #8
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d104      	bne.n	80055f2 <vTaskSwitchContext+0x76>
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	605a      	str	r2, [r3, #4]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	68da      	ldr	r2, [r3, #12]
 80055f8:	4b0b      	ldr	r3, [pc, #44]	; (8005628 <vTaskSwitchContext+0xac>)
 80055fa:	601a      	str	r2, [r3, #0]
 80055fc:	4b08      	ldr	r3, [pc, #32]	; (8005620 <vTaskSwitchContext+0xa4>)
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005602:	4b09      	ldr	r3, [pc, #36]	; (8005628 <vTaskSwitchContext+0xac>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	334c      	adds	r3, #76	; 0x4c
 8005608:	001a      	movs	r2, r3
 800560a:	4b08      	ldr	r3, [pc, #32]	; (800562c <vTaskSwitchContext+0xb0>)
 800560c:	601a      	str	r2, [r3, #0]
}
 800560e:	46c0      	nop			; (mov r8, r8)
 8005610:	46bd      	mov	sp, r7
 8005612:	b002      	add	sp, #8
 8005614:	bd80      	pop	{r7, pc}
 8005616:	46c0      	nop			; (mov r8, r8)
 8005618:	200006d8 	.word	0x200006d8
 800561c:	200006c4 	.word	0x200006c4
 8005620:	200006b8 	.word	0x200006b8
 8005624:	200005b4 	.word	0x200005b4
 8005628:	200005b0 	.word	0x200005b0
 800562c:	20000010 	.word	0x20000010

08005630 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005638:	f000 f84e 	bl	80056d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800563c:	4b03      	ldr	r3, [pc, #12]	; (800564c <prvIdleTask+0x1c>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d9f9      	bls.n	8005638 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005644:	f000 f9c4 	bl	80059d0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8005648:	e7f6      	b.n	8005638 <prvIdleTask+0x8>
 800564a:	46c0      	nop			; (mov r8, r8)
 800564c:	200005b4 	.word	0x200005b4

08005650 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005656:	2300      	movs	r3, #0
 8005658:	607b      	str	r3, [r7, #4]
 800565a:	e00c      	b.n	8005676 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	0013      	movs	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	189b      	adds	r3, r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4a14      	ldr	r2, [pc, #80]	; (80056b8 <prvInitialiseTaskLists+0x68>)
 8005668:	189b      	adds	r3, r3, r2
 800566a:	0018      	movs	r0, r3
 800566c:	f7ff fb90 	bl	8004d90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	3301      	adds	r3, #1
 8005674:	607b      	str	r3, [r7, #4]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b06      	cmp	r3, #6
 800567a:	d9ef      	bls.n	800565c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800567c:	4b0f      	ldr	r3, [pc, #60]	; (80056bc <prvInitialiseTaskLists+0x6c>)
 800567e:	0018      	movs	r0, r3
 8005680:	f7ff fb86 	bl	8004d90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005684:	4b0e      	ldr	r3, [pc, #56]	; (80056c0 <prvInitialiseTaskLists+0x70>)
 8005686:	0018      	movs	r0, r3
 8005688:	f7ff fb82 	bl	8004d90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800568c:	4b0d      	ldr	r3, [pc, #52]	; (80056c4 <prvInitialiseTaskLists+0x74>)
 800568e:	0018      	movs	r0, r3
 8005690:	f7ff fb7e 	bl	8004d90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005694:	4b0c      	ldr	r3, [pc, #48]	; (80056c8 <prvInitialiseTaskLists+0x78>)
 8005696:	0018      	movs	r0, r3
 8005698:	f7ff fb7a 	bl	8004d90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800569c:	4b0b      	ldr	r3, [pc, #44]	; (80056cc <prvInitialiseTaskLists+0x7c>)
 800569e:	0018      	movs	r0, r3
 80056a0:	f7ff fb76 	bl	8004d90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80056a4:	4b0a      	ldr	r3, [pc, #40]	; (80056d0 <prvInitialiseTaskLists+0x80>)
 80056a6:	4a05      	ldr	r2, [pc, #20]	; (80056bc <prvInitialiseTaskLists+0x6c>)
 80056a8:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80056aa:	4b0a      	ldr	r3, [pc, #40]	; (80056d4 <prvInitialiseTaskLists+0x84>)
 80056ac:	4a04      	ldr	r2, [pc, #16]	; (80056c0 <prvInitialiseTaskLists+0x70>)
 80056ae:	601a      	str	r2, [r3, #0]
}
 80056b0:	46c0      	nop			; (mov r8, r8)
 80056b2:	46bd      	mov	sp, r7
 80056b4:	b002      	add	sp, #8
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	200005b4 	.word	0x200005b4
 80056bc:	20000640 	.word	0x20000640
 80056c0:	20000654 	.word	0x20000654
 80056c4:	20000670 	.word	0x20000670
 80056c8:	20000684 	.word	0x20000684
 80056cc:	2000069c 	.word	0x2000069c
 80056d0:	20000668 	.word	0x20000668
 80056d4:	2000066c 	.word	0x2000066c

080056d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056de:	e01a      	b.n	8005716 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80056e0:	f000 f986 	bl	80059f0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80056e4:	4b10      	ldr	r3, [pc, #64]	; (8005728 <prvCheckTasksWaitingTermination+0x50>)
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3304      	adds	r3, #4
 80056f0:	0018      	movs	r0, r3
 80056f2:	f7ff fbce 	bl	8004e92 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80056f6:	4b0d      	ldr	r3, [pc, #52]	; (800572c <prvCheckTasksWaitingTermination+0x54>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	1e5a      	subs	r2, r3, #1
 80056fc:	4b0b      	ldr	r3, [pc, #44]	; (800572c <prvCheckTasksWaitingTermination+0x54>)
 80056fe:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005700:	4b0b      	ldr	r3, [pc, #44]	; (8005730 <prvCheckTasksWaitingTermination+0x58>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	1e5a      	subs	r2, r3, #1
 8005706:	4b0a      	ldr	r3, [pc, #40]	; (8005730 <prvCheckTasksWaitingTermination+0x58>)
 8005708:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800570a:	f000 f983 	bl	8005a14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	0018      	movs	r0, r3
 8005712:	f000 f80f 	bl	8005734 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005716:	4b06      	ldr	r3, [pc, #24]	; (8005730 <prvCheckTasksWaitingTermination+0x58>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1e0      	bne.n	80056e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800571e:	46c0      	nop			; (mov r8, r8)
 8005720:	46c0      	nop			; (mov r8, r8)
 8005722:	46bd      	mov	sp, r7
 8005724:	b002      	add	sp, #8
 8005726:	bd80      	pop	{r7, pc}
 8005728:	20000684 	.word	0x20000684
 800572c:	200006b0 	.word	0x200006b0
 8005730:	20000698 	.word	0x20000698

08005734 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	334c      	adds	r3, #76	; 0x4c
 8005740:	0018      	movs	r0, r3
 8005742:	f001 fbef 	bl	8006f24 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	22b1      	movs	r2, #177	; 0xb1
 800574a:	5c9b      	ldrb	r3, [r3, r2]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d109      	bne.n	8005764 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005754:	0018      	movs	r0, r3
 8005756:	f000 fa89 	bl	8005c6c <vPortFree>
				vPortFree( pxTCB );
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	0018      	movs	r0, r3
 800575e:	f000 fa85 	bl	8005c6c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005762:	e010      	b.n	8005786 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	22b1      	movs	r2, #177	; 0xb1
 8005768:	5c9b      	ldrb	r3, [r3, r2]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d104      	bne.n	8005778 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	0018      	movs	r0, r3
 8005772:	f000 fa7b 	bl	8005c6c <vPortFree>
	}
 8005776:	e006      	b.n	8005786 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	22b1      	movs	r2, #177	; 0xb1
 800577c:	5c9b      	ldrb	r3, [r3, r2]
 800577e:	2b02      	cmp	r3, #2
 8005780:	d001      	beq.n	8005786 <prvDeleteTCB+0x52>
 8005782:	b672      	cpsid	i
 8005784:	e7fe      	b.n	8005784 <prvDeleteTCB+0x50>
	}
 8005786:	46c0      	nop			; (mov r8, r8)
 8005788:	46bd      	mov	sp, r7
 800578a:	b002      	add	sp, #8
 800578c:	bd80      	pop	{r7, pc}
	...

08005790 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005796:	4b0e      	ldr	r3, [pc, #56]	; (80057d0 <prvResetNextTaskUnblockTime+0x40>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d101      	bne.n	80057a4 <prvResetNextTaskUnblockTime+0x14>
 80057a0:	2301      	movs	r3, #1
 80057a2:	e000      	b.n	80057a6 <prvResetNextTaskUnblockTime+0x16>
 80057a4:	2300      	movs	r3, #0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d004      	beq.n	80057b4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80057aa:	4b0a      	ldr	r3, [pc, #40]	; (80057d4 <prvResetNextTaskUnblockTime+0x44>)
 80057ac:	2201      	movs	r2, #1
 80057ae:	4252      	negs	r2, r2
 80057b0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80057b2:	e008      	b.n	80057c6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80057b4:	4b06      	ldr	r3, [pc, #24]	; (80057d0 <prvResetNextTaskUnblockTime+0x40>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685a      	ldr	r2, [r3, #4]
 80057c2:	4b04      	ldr	r3, [pc, #16]	; (80057d4 <prvResetNextTaskUnblockTime+0x44>)
 80057c4:	601a      	str	r2, [r3, #0]
}
 80057c6:	46c0      	nop			; (mov r8, r8)
 80057c8:	46bd      	mov	sp, r7
 80057ca:	b002      	add	sp, #8
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	46c0      	nop			; (mov r8, r8)
 80057d0:	20000668 	.word	0x20000668
 80057d4:	200006d0 	.word	0x200006d0

080057d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80057de:	4b0a      	ldr	r3, [pc, #40]	; (8005808 <xTaskGetSchedulerState+0x30>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d102      	bne.n	80057ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80057e6:	2301      	movs	r3, #1
 80057e8:	607b      	str	r3, [r7, #4]
 80057ea:	e008      	b.n	80057fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057ec:	4b07      	ldr	r3, [pc, #28]	; (800580c <xTaskGetSchedulerState+0x34>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d102      	bne.n	80057fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80057f4:	2302      	movs	r3, #2
 80057f6:	607b      	str	r3, [r7, #4]
 80057f8:	e001      	b.n	80057fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80057fa:	2300      	movs	r3, #0
 80057fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80057fe:	687b      	ldr	r3, [r7, #4]
	}
 8005800:	0018      	movs	r0, r3
 8005802:	46bd      	mov	sp, r7
 8005804:	b002      	add	sp, #8
 8005806:	bd80      	pop	{r7, pc}
 8005808:	200006bc 	.word	0x200006bc
 800580c:	200006d8 	.word	0x200006d8

08005810 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800581a:	4b21      	ldr	r3, [pc, #132]	; (80058a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005820:	4b20      	ldr	r3, [pc, #128]	; (80058a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	3304      	adds	r3, #4
 8005826:	0018      	movs	r0, r3
 8005828:	f7ff fb33 	bl	8004e92 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	3301      	adds	r3, #1
 8005830:	d10b      	bne.n	800584a <prvAddCurrentTaskToDelayedList+0x3a>
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d008      	beq.n	800584a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005838:	4b1a      	ldr	r3, [pc, #104]	; (80058a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	1d1a      	adds	r2, r3, #4
 800583e:	4b1a      	ldr	r3, [pc, #104]	; (80058a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005840:	0011      	movs	r1, r2
 8005842:	0018      	movs	r0, r3
 8005844:	f7ff facd 	bl	8004de2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005848:	e026      	b.n	8005898 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	18d3      	adds	r3, r2, r3
 8005850:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005852:	4b14      	ldr	r3, [pc, #80]	; (80058a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	429a      	cmp	r2, r3
 8005860:	d209      	bcs.n	8005876 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005862:	4b12      	ldr	r3, [pc, #72]	; (80058ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	4b0f      	ldr	r3, [pc, #60]	; (80058a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	3304      	adds	r3, #4
 800586c:	0019      	movs	r1, r3
 800586e:	0010      	movs	r0, r2
 8005870:	f7ff fad9 	bl	8004e26 <vListInsert>
}
 8005874:	e010      	b.n	8005898 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005876:	4b0e      	ldr	r3, [pc, #56]	; (80058b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	4b0a      	ldr	r3, [pc, #40]	; (80058a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3304      	adds	r3, #4
 8005880:	0019      	movs	r1, r3
 8005882:	0010      	movs	r0, r2
 8005884:	f7ff facf 	bl	8004e26 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005888:	4b0a      	ldr	r3, [pc, #40]	; (80058b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	429a      	cmp	r2, r3
 8005890:	d202      	bcs.n	8005898 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005892:	4b08      	ldr	r3, [pc, #32]	; (80058b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	601a      	str	r2, [r3, #0]
}
 8005898:	46c0      	nop			; (mov r8, r8)
 800589a:	46bd      	mov	sp, r7
 800589c:	b004      	add	sp, #16
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	200006b4 	.word	0x200006b4
 80058a4:	200005b0 	.word	0x200005b0
 80058a8:	2000069c 	.word	0x2000069c
 80058ac:	2000066c 	.word	0x2000066c
 80058b0:	20000668 	.word	0x20000668
 80058b4:	200006d0 	.word	0x200006d0

080058b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	3b04      	subs	r3, #4
 80058c8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2280      	movs	r2, #128	; 0x80
 80058ce:	0452      	lsls	r2, r2, #17
 80058d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	3b04      	subs	r3, #4
 80058d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	3b04      	subs	r3, #4
 80058e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80058e4:	4a08      	ldr	r2, [pc, #32]	; (8005908 <pxPortInitialiseStack+0x50>)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	3b14      	subs	r3, #20
 80058ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	3b20      	subs	r3, #32
 80058fa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80058fc:	68fb      	ldr	r3, [r7, #12]
}
 80058fe:	0018      	movs	r0, r3
 8005900:	46bd      	mov	sp, r7
 8005902:	b004      	add	sp, #16
 8005904:	bd80      	pop	{r7, pc}
 8005906:	46c0      	nop			; (mov r8, r8)
 8005908:	0800590d 	.word	0x0800590d

0800590c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005912:	2300      	movs	r3, #0
 8005914:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005916:	4b08      	ldr	r3, [pc, #32]	; (8005938 <prvTaskExitError+0x2c>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	3301      	adds	r3, #1
 800591c:	d001      	beq.n	8005922 <prvTaskExitError+0x16>
 800591e:	b672      	cpsid	i
 8005920:	e7fe      	b.n	8005920 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8005922:	b672      	cpsid	i
	while( ulDummy == 0 )
 8005924:	46c0      	nop			; (mov r8, r8)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d0fc      	beq.n	8005926 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800592c:	46c0      	nop			; (mov r8, r8)
 800592e:	46c0      	nop			; (mov r8, r8)
 8005930:	46bd      	mov	sp, r7
 8005932:	b002      	add	sp, #8
 8005934:	bd80      	pop	{r7, pc}
 8005936:	46c0      	nop			; (mov r8, r8)
 8005938:	2000000c 	.word	0x2000000c

0800593c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8005940:	46c0      	nop			; (mov r8, r8)
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
	...

08005950 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8005950:	4a0b      	ldr	r2, [pc, #44]	; (8005980 <pxCurrentTCBConst2>)
 8005952:	6813      	ldr	r3, [r2, #0]
 8005954:	6818      	ldr	r0, [r3, #0]
 8005956:	3020      	adds	r0, #32
 8005958:	f380 8809 	msr	PSP, r0
 800595c:	2002      	movs	r0, #2
 800595e:	f380 8814 	msr	CONTROL, r0
 8005962:	f3bf 8f6f 	isb	sy
 8005966:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005968:	46ae      	mov	lr, r5
 800596a:	bc08      	pop	{r3}
 800596c:	bc04      	pop	{r2}
 800596e:	b662      	cpsie	i
 8005970:	4718      	bx	r3
 8005972:	46c0      	nop			; (mov r8, r8)
 8005974:	46c0      	nop			; (mov r8, r8)
 8005976:	46c0      	nop			; (mov r8, r8)
 8005978:	46c0      	nop			; (mov r8, r8)
 800597a:	46c0      	nop			; (mov r8, r8)
 800597c:	46c0      	nop			; (mov r8, r8)
 800597e:	46c0      	nop			; (mov r8, r8)

08005980 <pxCurrentTCBConst2>:
 8005980:	200005b0 	.word	0x200005b0
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8005984:	46c0      	nop			; (mov r8, r8)
 8005986:	46c0      	nop			; (mov r8, r8)

08005988 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800598c:	4b0e      	ldr	r3, [pc, #56]	; (80059c8 <xPortStartScheduler+0x40>)
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	4b0d      	ldr	r3, [pc, #52]	; (80059c8 <xPortStartScheduler+0x40>)
 8005992:	21ff      	movs	r1, #255	; 0xff
 8005994:	0409      	lsls	r1, r1, #16
 8005996:	430a      	orrs	r2, r1
 8005998:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800599a:	4b0b      	ldr	r3, [pc, #44]	; (80059c8 <xPortStartScheduler+0x40>)
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	4b0a      	ldr	r3, [pc, #40]	; (80059c8 <xPortStartScheduler+0x40>)
 80059a0:	21ff      	movs	r1, #255	; 0xff
 80059a2:	0609      	lsls	r1, r1, #24
 80059a4:	430a      	orrs	r2, r1
 80059a6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80059a8:	f000 f898 	bl	8005adc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80059ac:	4b07      	ldr	r3, [pc, #28]	; (80059cc <xPortStartScheduler+0x44>)
 80059ae:	2200      	movs	r2, #0
 80059b0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80059b2:	f7ff ffcd 	bl	8005950 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80059b6:	f7ff fde1 	bl	800557c <vTaskSwitchContext>
	prvTaskExitError();
 80059ba:	f7ff ffa7 	bl	800590c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	0018      	movs	r0, r3
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	46c0      	nop			; (mov r8, r8)
 80059c8:	e000ed20 	.word	0xe000ed20
 80059cc:	2000000c 	.word	0x2000000c

080059d0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80059d4:	4b05      	ldr	r3, [pc, #20]	; (80059ec <vPortYield+0x1c>)
 80059d6:	2280      	movs	r2, #128	; 0x80
 80059d8:	0552      	lsls	r2, r2, #21
 80059da:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80059dc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80059e0:	f3bf 8f6f 	isb	sy
}
 80059e4:	46c0      	nop			; (mov r8, r8)
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	46c0      	nop			; (mov r8, r8)
 80059ec:	e000ed04 	.word	0xe000ed04

080059f0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80059f4:	b672      	cpsid	i
    uxCriticalNesting++;
 80059f6:	4b06      	ldr	r3, [pc, #24]	; (8005a10 <vPortEnterCritical+0x20>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	1c5a      	adds	r2, r3, #1
 80059fc:	4b04      	ldr	r3, [pc, #16]	; (8005a10 <vPortEnterCritical+0x20>)
 80059fe:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8005a00:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005a04:	f3bf 8f6f 	isb	sy
}
 8005a08:	46c0      	nop			; (mov r8, r8)
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	46c0      	nop			; (mov r8, r8)
 8005a10:	2000000c 	.word	0x2000000c

08005a14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a18:	4b09      	ldr	r3, [pc, #36]	; (8005a40 <vPortExitCritical+0x2c>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <vPortExitCritical+0x10>
 8005a20:	b672      	cpsid	i
 8005a22:	e7fe      	b.n	8005a22 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8005a24:	4b06      	ldr	r3, [pc, #24]	; (8005a40 <vPortExitCritical+0x2c>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	1e5a      	subs	r2, r3, #1
 8005a2a:	4b05      	ldr	r3, [pc, #20]	; (8005a40 <vPortExitCritical+0x2c>)
 8005a2c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8005a2e:	4b04      	ldr	r3, [pc, #16]	; (8005a40 <vPortExitCritical+0x2c>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d100      	bne.n	8005a38 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8005a36:	b662      	cpsie	i
    }
}
 8005a38:	46c0      	nop			; (mov r8, r8)
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	46c0      	nop			; (mov r8, r8)
 8005a40:	2000000c 	.word	0x2000000c

08005a44 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005a44:	f3ef 8010 	mrs	r0, PRIMASK
 8005a48:	b672      	cpsid	i
 8005a4a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8005a4c:	46c0      	nop			; (mov r8, r8)
 8005a4e:	0018      	movs	r0, r3

08005a50 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005a50:	f380 8810 	msr	PRIMASK, r0
 8005a54:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8005a56:	46c0      	nop			; (mov r8, r8)
	...

08005a60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005a60:	f3ef 8009 	mrs	r0, PSP
 8005a64:	4b0e      	ldr	r3, [pc, #56]	; (8005aa0 <pxCurrentTCBConst>)
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	3820      	subs	r0, #32
 8005a6a:	6010      	str	r0, [r2, #0]
 8005a6c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005a6e:	4644      	mov	r4, r8
 8005a70:	464d      	mov	r5, r9
 8005a72:	4656      	mov	r6, sl
 8005a74:	465f      	mov	r7, fp
 8005a76:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005a78:	b508      	push	{r3, lr}
 8005a7a:	b672      	cpsid	i
 8005a7c:	f7ff fd7e 	bl	800557c <vTaskSwitchContext>
 8005a80:	b662      	cpsie	i
 8005a82:	bc0c      	pop	{r2, r3}
 8005a84:	6811      	ldr	r1, [r2, #0]
 8005a86:	6808      	ldr	r0, [r1, #0]
 8005a88:	3010      	adds	r0, #16
 8005a8a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005a8c:	46a0      	mov	r8, r4
 8005a8e:	46a9      	mov	r9, r5
 8005a90:	46b2      	mov	sl, r6
 8005a92:	46bb      	mov	fp, r7
 8005a94:	f380 8809 	msr	PSP, r0
 8005a98:	3820      	subs	r0, #32
 8005a9a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005a9c:	4718      	bx	r3
 8005a9e:	46c0      	nop			; (mov r8, r8)

08005aa0 <pxCurrentTCBConst>:
 8005aa0:	200005b0 	.word	0x200005b0
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8005aa4:	46c0      	nop			; (mov r8, r8)
 8005aa6:	46c0      	nop			; (mov r8, r8)

08005aa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8005aae:	f7ff ffc9 	bl	8005a44 <ulSetInterruptMaskFromISR>
 8005ab2:	0003      	movs	r3, r0
 8005ab4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ab6:	f7ff fcad 	bl	8005414 <xTaskIncrementTick>
 8005aba:	1e03      	subs	r3, r0, #0
 8005abc:	d003      	beq.n	8005ac6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8005abe:	4b06      	ldr	r3, [pc, #24]	; (8005ad8 <xPortSysTickHandler+0x30>)
 8005ac0:	2280      	movs	r2, #128	; 0x80
 8005ac2:	0552      	lsls	r2, r2, #21
 8005ac4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	0018      	movs	r0, r3
 8005aca:	f7ff ffc1 	bl	8005a50 <vClearInterruptMaskFromISR>
}
 8005ace:	46c0      	nop			; (mov r8, r8)
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	b002      	add	sp, #8
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	46c0      	nop			; (mov r8, r8)
 8005ad8:	e000ed04 	.word	0xe000ed04

08005adc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8005ae0:	4b0b      	ldr	r3, [pc, #44]	; (8005b10 <prvSetupTimerInterrupt+0x34>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8005ae6:	4b0b      	ldr	r3, [pc, #44]	; (8005b14 <prvSetupTimerInterrupt+0x38>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005aec:	4b0a      	ldr	r3, [pc, #40]	; (8005b18 <prvSetupTimerInterrupt+0x3c>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	22fa      	movs	r2, #250	; 0xfa
 8005af2:	0091      	lsls	r1, r2, #2
 8005af4:	0018      	movs	r0, r3
 8005af6:	f7fa fb23 	bl	8000140 <__udivsi3>
 8005afa:	0003      	movs	r3, r0
 8005afc:	001a      	movs	r2, r3
 8005afe:	4b07      	ldr	r3, [pc, #28]	; (8005b1c <prvSetupTimerInterrupt+0x40>)
 8005b00:	3a01      	subs	r2, #1
 8005b02:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8005b04:	4b02      	ldr	r3, [pc, #8]	; (8005b10 <prvSetupTimerInterrupt+0x34>)
 8005b06:	2207      	movs	r2, #7
 8005b08:	601a      	str	r2, [r3, #0]
}
 8005b0a:	46c0      	nop			; (mov r8, r8)
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	e000e010 	.word	0xe000e010
 8005b14:	e000e018 	.word	0xe000e018
 8005b18:	20000000 	.word	0x20000000
 8005b1c:	e000e014 	.word	0xe000e014

08005b20 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8005b2c:	f7ff fbda 	bl	80052e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b30:	4b49      	ldr	r3, [pc, #292]	; (8005c58 <pvPortMalloc+0x138>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d101      	bne.n	8005b3c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b38:	f000 f8e0 	bl	8005cfc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b3c:	4b47      	ldr	r3, [pc, #284]	; (8005c5c <pvPortMalloc+0x13c>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	4013      	ands	r3, r2
 8005b44:	d000      	beq.n	8005b48 <pvPortMalloc+0x28>
 8005b46:	e079      	b.n	8005c3c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d012      	beq.n	8005b74 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8005b4e:	2208      	movs	r2, #8
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	189b      	adds	r3, r3, r2
 8005b54:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2207      	movs	r2, #7
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	d00a      	beq.n	8005b74 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2207      	movs	r2, #7
 8005b62:	4393      	bics	r3, r2
 8005b64:	3308      	adds	r3, #8
 8005b66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2207      	movs	r2, #7
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	d001      	beq.n	8005b74 <pvPortMalloc+0x54>
 8005b70:	b672      	cpsid	i
 8005b72:	e7fe      	b.n	8005b72 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d060      	beq.n	8005c3c <pvPortMalloc+0x11c>
 8005b7a:	4b39      	ldr	r3, [pc, #228]	; (8005c60 <pvPortMalloc+0x140>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d85b      	bhi.n	8005c3c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005b84:	4b37      	ldr	r3, [pc, #220]	; (8005c64 <pvPortMalloc+0x144>)
 8005b86:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8005b88:	4b36      	ldr	r3, [pc, #216]	; (8005c64 <pvPortMalloc+0x144>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b8e:	e004      	b.n	8005b9a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d903      	bls.n	8005bac <pvPortMalloc+0x8c>
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1f1      	bne.n	8005b90 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005bac:	4b2a      	ldr	r3, [pc, #168]	; (8005c58 <pvPortMalloc+0x138>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d042      	beq.n	8005c3c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2208      	movs	r2, #8
 8005bbc:	189b      	adds	r3, r3, r2
 8005bbe:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	685a      	ldr	r2, [r3, #4]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	1ad2      	subs	r2, r2, r3
 8005bd0:	2308      	movs	r3, #8
 8005bd2:	005b      	lsls	r3, r3, #1
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d916      	bls.n	8005c06 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	18d3      	adds	r3, r2, r3
 8005bde:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	2207      	movs	r2, #7
 8005be4:	4013      	ands	r3, r2
 8005be6:	d001      	beq.n	8005bec <pvPortMalloc+0xcc>
 8005be8:	b672      	cpsid	i
 8005bea:	e7fe      	b.n	8005bea <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	1ad2      	subs	r2, r2, r3
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	0018      	movs	r0, r3
 8005c02:	f000 f8db 	bl	8005dbc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c06:	4b16      	ldr	r3, [pc, #88]	; (8005c60 <pvPortMalloc+0x140>)
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	1ad2      	subs	r2, r2, r3
 8005c10:	4b13      	ldr	r3, [pc, #76]	; (8005c60 <pvPortMalloc+0x140>)
 8005c12:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c14:	4b12      	ldr	r3, [pc, #72]	; (8005c60 <pvPortMalloc+0x140>)
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	4b13      	ldr	r3, [pc, #76]	; (8005c68 <pvPortMalloc+0x148>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d203      	bcs.n	8005c28 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c20:	4b0f      	ldr	r3, [pc, #60]	; (8005c60 <pvPortMalloc+0x140>)
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	4b10      	ldr	r3, [pc, #64]	; (8005c68 <pvPortMalloc+0x148>)
 8005c26:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	4b0b      	ldr	r3, [pc, #44]	; (8005c5c <pvPortMalloc+0x13c>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	431a      	orrs	r2, r3
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005c3c:	f7ff fb5e 	bl	80052fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2207      	movs	r2, #7
 8005c44:	4013      	ands	r3, r2
 8005c46:	d001      	beq.n	8005c4c <pvPortMalloc+0x12c>
 8005c48:	b672      	cpsid	i
 8005c4a:	e7fe      	b.n	8005c4a <pvPortMalloc+0x12a>
	return pvReturn;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
}
 8005c4e:	0018      	movs	r0, r3
 8005c50:	46bd      	mov	sp, r7
 8005c52:	b006      	add	sp, #24
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	46c0      	nop			; (mov r8, r8)
 8005c58:	200012e4 	.word	0x200012e4
 8005c5c:	200012f0 	.word	0x200012f0
 8005c60:	200012e8 	.word	0x200012e8
 8005c64:	200012dc 	.word	0x200012dc
 8005c68:	200012ec 	.word	0x200012ec

08005c6c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d035      	beq.n	8005cea <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005c7e:	2308      	movs	r3, #8
 8005c80:	425b      	negs	r3, r3
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	18d3      	adds	r3, r2, r3
 8005c86:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	4b18      	ldr	r3, [pc, #96]	; (8005cf4 <vPortFree+0x88>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4013      	ands	r3, r2
 8005c96:	d101      	bne.n	8005c9c <vPortFree+0x30>
 8005c98:	b672      	cpsid	i
 8005c9a:	e7fe      	b.n	8005c9a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d001      	beq.n	8005ca8 <vPortFree+0x3c>
 8005ca4:	b672      	cpsid	i
 8005ca6:	e7fe      	b.n	8005ca6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	4b11      	ldr	r3, [pc, #68]	; (8005cf4 <vPortFree+0x88>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	d01a      	beq.n	8005cea <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d116      	bne.n	8005cea <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	685a      	ldr	r2, [r3, #4]
 8005cc0:	4b0c      	ldr	r3, [pc, #48]	; (8005cf4 <vPortFree+0x88>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	43db      	mvns	r3, r3
 8005cc6:	401a      	ands	r2, r3
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005ccc:	f7ff fb0a 	bl	80052e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	4b08      	ldr	r3, [pc, #32]	; (8005cf8 <vPortFree+0x8c>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	18d2      	adds	r2, r2, r3
 8005cda:	4b07      	ldr	r3, [pc, #28]	; (8005cf8 <vPortFree+0x8c>)
 8005cdc:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	0018      	movs	r0, r3
 8005ce2:	f000 f86b 	bl	8005dbc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005ce6:	f7ff fb09 	bl	80052fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005cea:	46c0      	nop			; (mov r8, r8)
 8005cec:	46bd      	mov	sp, r7
 8005cee:	b004      	add	sp, #16
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	46c0      	nop			; (mov r8, r8)
 8005cf4:	200012f0 	.word	0x200012f0
 8005cf8:	200012e8 	.word	0x200012e8

08005cfc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005d02:	23c0      	movs	r3, #192	; 0xc0
 8005d04:	011b      	lsls	r3, r3, #4
 8005d06:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005d08:	4b26      	ldr	r3, [pc, #152]	; (8005da4 <prvHeapInit+0xa8>)
 8005d0a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2207      	movs	r2, #7
 8005d10:	4013      	ands	r3, r2
 8005d12:	d00c      	beq.n	8005d2e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	3307      	adds	r3, #7
 8005d18:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2207      	movs	r2, #7
 8005d1e:	4393      	bics	r3, r2
 8005d20:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	1ad2      	subs	r2, r2, r3
 8005d28:	4b1e      	ldr	r3, [pc, #120]	; (8005da4 <prvHeapInit+0xa8>)
 8005d2a:	18d3      	adds	r3, r2, r3
 8005d2c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005d32:	4b1d      	ldr	r3, [pc, #116]	; (8005da8 <prvHeapInit+0xac>)
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005d38:	4b1b      	ldr	r3, [pc, #108]	; (8005da8 <prvHeapInit+0xac>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	68ba      	ldr	r2, [r7, #8]
 8005d42:	18d3      	adds	r3, r2, r3
 8005d44:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005d46:	2208      	movs	r2, #8
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	1a9b      	subs	r3, r3, r2
 8005d4c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2207      	movs	r2, #7
 8005d52:	4393      	bics	r3, r2
 8005d54:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	4b14      	ldr	r3, [pc, #80]	; (8005dac <prvHeapInit+0xb0>)
 8005d5a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8005d5c:	4b13      	ldr	r3, [pc, #76]	; (8005dac <prvHeapInit+0xb0>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2200      	movs	r2, #0
 8005d62:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005d64:	4b11      	ldr	r3, [pc, #68]	; (8005dac <prvHeapInit+0xb0>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	1ad2      	subs	r2, r2, r3
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d7a:	4b0c      	ldr	r3, [pc, #48]	; (8005dac <prvHeapInit+0xb0>)
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	685a      	ldr	r2, [r3, #4]
 8005d86:	4b0a      	ldr	r3, [pc, #40]	; (8005db0 <prvHeapInit+0xb4>)
 8005d88:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	685a      	ldr	r2, [r3, #4]
 8005d8e:	4b09      	ldr	r3, [pc, #36]	; (8005db4 <prvHeapInit+0xb8>)
 8005d90:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d92:	4b09      	ldr	r3, [pc, #36]	; (8005db8 <prvHeapInit+0xbc>)
 8005d94:	2280      	movs	r2, #128	; 0x80
 8005d96:	0612      	lsls	r2, r2, #24
 8005d98:	601a      	str	r2, [r3, #0]
}
 8005d9a:	46c0      	nop			; (mov r8, r8)
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	b004      	add	sp, #16
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	46c0      	nop			; (mov r8, r8)
 8005da4:	200006dc 	.word	0x200006dc
 8005da8:	200012dc 	.word	0x200012dc
 8005dac:	200012e4 	.word	0x200012e4
 8005db0:	200012ec 	.word	0x200012ec
 8005db4:	200012e8 	.word	0x200012e8
 8005db8:	200012f0 	.word	0x200012f0

08005dbc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005dc4:	4b27      	ldr	r3, [pc, #156]	; (8005e64 <prvInsertBlockIntoFreeList+0xa8>)
 8005dc6:	60fb      	str	r3, [r7, #12]
 8005dc8:	e002      	b.n	8005dd0 <prvInsertBlockIntoFreeList+0x14>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	60fb      	str	r3, [r7, #12]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d8f7      	bhi.n	8005dca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	18d3      	adds	r3, r2, r3
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d108      	bne.n	8005dfe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	685a      	ldr	r2, [r3, #4]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	18d2      	adds	r2, r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	18d2      	adds	r2, r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d118      	bne.n	8005e44 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	4b14      	ldr	r3, [pc, #80]	; (8005e68 <prvInsertBlockIntoFreeList+0xac>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d00d      	beq.n	8005e3a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685a      	ldr	r2, [r3, #4]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	18d2      	adds	r2, r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	601a      	str	r2, [r3, #0]
 8005e38:	e008      	b.n	8005e4c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005e3a:	4b0b      	ldr	r3, [pc, #44]	; (8005e68 <prvInsertBlockIntoFreeList+0xac>)
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	e003      	b.n	8005e4c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d002      	beq.n	8005e5a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e5a:	46c0      	nop			; (mov r8, r8)
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	b004      	add	sp, #16
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	46c0      	nop			; (mov r8, r8)
 8005e64:	200012dc 	.word	0x200012dc
 8005e68:	200012e4 	.word	0x200012e4

08005e6c <__errno>:
 8005e6c:	4b01      	ldr	r3, [pc, #4]	; (8005e74 <__errno+0x8>)
 8005e6e:	6818      	ldr	r0, [r3, #0]
 8005e70:	4770      	bx	lr
 8005e72:	46c0      	nop			; (mov r8, r8)
 8005e74:	20000010 	.word	0x20000010

08005e78 <std>:
 8005e78:	2300      	movs	r3, #0
 8005e7a:	b510      	push	{r4, lr}
 8005e7c:	0004      	movs	r4, r0
 8005e7e:	6003      	str	r3, [r0, #0]
 8005e80:	6043      	str	r3, [r0, #4]
 8005e82:	6083      	str	r3, [r0, #8]
 8005e84:	8181      	strh	r1, [r0, #12]
 8005e86:	6643      	str	r3, [r0, #100]	; 0x64
 8005e88:	0019      	movs	r1, r3
 8005e8a:	81c2      	strh	r2, [r0, #14]
 8005e8c:	6103      	str	r3, [r0, #16]
 8005e8e:	6143      	str	r3, [r0, #20]
 8005e90:	6183      	str	r3, [r0, #24]
 8005e92:	2208      	movs	r2, #8
 8005e94:	305c      	adds	r0, #92	; 0x5c
 8005e96:	f000 f921 	bl	80060dc <memset>
 8005e9a:	4b05      	ldr	r3, [pc, #20]	; (8005eb0 <std+0x38>)
 8005e9c:	6224      	str	r4, [r4, #32]
 8005e9e:	6263      	str	r3, [r4, #36]	; 0x24
 8005ea0:	4b04      	ldr	r3, [pc, #16]	; (8005eb4 <std+0x3c>)
 8005ea2:	62a3      	str	r3, [r4, #40]	; 0x28
 8005ea4:	4b04      	ldr	r3, [pc, #16]	; (8005eb8 <std+0x40>)
 8005ea6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005ea8:	4b04      	ldr	r3, [pc, #16]	; (8005ebc <std+0x44>)
 8005eaa:	6323      	str	r3, [r4, #48]	; 0x30
 8005eac:	bd10      	pop	{r4, pc}
 8005eae:	46c0      	nop			; (mov r8, r8)
 8005eb0:	0800705d 	.word	0x0800705d
 8005eb4:	08007085 	.word	0x08007085
 8005eb8:	080070bd 	.word	0x080070bd
 8005ebc:	080070e9 	.word	0x080070e9

08005ec0 <_cleanup_r>:
 8005ec0:	b510      	push	{r4, lr}
 8005ec2:	4902      	ldr	r1, [pc, #8]	; (8005ecc <_cleanup_r+0xc>)
 8005ec4:	f000 f8ba 	bl	800603c <_fwalk_reent>
 8005ec8:	bd10      	pop	{r4, pc}
 8005eca:	46c0      	nop			; (mov r8, r8)
 8005ecc:	08008d31 	.word	0x08008d31

08005ed0 <__sfmoreglue>:
 8005ed0:	b570      	push	{r4, r5, r6, lr}
 8005ed2:	2568      	movs	r5, #104	; 0x68
 8005ed4:	1e4a      	subs	r2, r1, #1
 8005ed6:	4355      	muls	r5, r2
 8005ed8:	000e      	movs	r6, r1
 8005eda:	0029      	movs	r1, r5
 8005edc:	3174      	adds	r1, #116	; 0x74
 8005ede:	f000 f927 	bl	8006130 <_malloc_r>
 8005ee2:	1e04      	subs	r4, r0, #0
 8005ee4:	d008      	beq.n	8005ef8 <__sfmoreglue+0x28>
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	002a      	movs	r2, r5
 8005eea:	6001      	str	r1, [r0, #0]
 8005eec:	6046      	str	r6, [r0, #4]
 8005eee:	300c      	adds	r0, #12
 8005ef0:	60a0      	str	r0, [r4, #8]
 8005ef2:	3268      	adds	r2, #104	; 0x68
 8005ef4:	f000 f8f2 	bl	80060dc <memset>
 8005ef8:	0020      	movs	r0, r4
 8005efa:	bd70      	pop	{r4, r5, r6, pc}

08005efc <__sfp_lock_acquire>:
 8005efc:	b510      	push	{r4, lr}
 8005efe:	4802      	ldr	r0, [pc, #8]	; (8005f08 <__sfp_lock_acquire+0xc>)
 8005f00:	f000 f8e1 	bl	80060c6 <__retarget_lock_acquire_recursive>
 8005f04:	bd10      	pop	{r4, pc}
 8005f06:	46c0      	nop			; (mov r8, r8)
 8005f08:	200012f5 	.word	0x200012f5

08005f0c <__sfp_lock_release>:
 8005f0c:	b510      	push	{r4, lr}
 8005f0e:	4802      	ldr	r0, [pc, #8]	; (8005f18 <__sfp_lock_release+0xc>)
 8005f10:	f000 f8da 	bl	80060c8 <__retarget_lock_release_recursive>
 8005f14:	bd10      	pop	{r4, pc}
 8005f16:	46c0      	nop			; (mov r8, r8)
 8005f18:	200012f5 	.word	0x200012f5

08005f1c <__sinit_lock_acquire>:
 8005f1c:	b510      	push	{r4, lr}
 8005f1e:	4802      	ldr	r0, [pc, #8]	; (8005f28 <__sinit_lock_acquire+0xc>)
 8005f20:	f000 f8d1 	bl	80060c6 <__retarget_lock_acquire_recursive>
 8005f24:	bd10      	pop	{r4, pc}
 8005f26:	46c0      	nop			; (mov r8, r8)
 8005f28:	200012f6 	.word	0x200012f6

08005f2c <__sinit_lock_release>:
 8005f2c:	b510      	push	{r4, lr}
 8005f2e:	4802      	ldr	r0, [pc, #8]	; (8005f38 <__sinit_lock_release+0xc>)
 8005f30:	f000 f8ca 	bl	80060c8 <__retarget_lock_release_recursive>
 8005f34:	bd10      	pop	{r4, pc}
 8005f36:	46c0      	nop			; (mov r8, r8)
 8005f38:	200012f6 	.word	0x200012f6

08005f3c <__sinit>:
 8005f3c:	b513      	push	{r0, r1, r4, lr}
 8005f3e:	0004      	movs	r4, r0
 8005f40:	f7ff ffec 	bl	8005f1c <__sinit_lock_acquire>
 8005f44:	69a3      	ldr	r3, [r4, #24]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d002      	beq.n	8005f50 <__sinit+0x14>
 8005f4a:	f7ff ffef 	bl	8005f2c <__sinit_lock_release>
 8005f4e:	bd13      	pop	{r0, r1, r4, pc}
 8005f50:	64a3      	str	r3, [r4, #72]	; 0x48
 8005f52:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005f54:	6523      	str	r3, [r4, #80]	; 0x50
 8005f56:	4b13      	ldr	r3, [pc, #76]	; (8005fa4 <__sinit+0x68>)
 8005f58:	4a13      	ldr	r2, [pc, #76]	; (8005fa8 <__sinit+0x6c>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005f5e:	9301      	str	r3, [sp, #4]
 8005f60:	42a3      	cmp	r3, r4
 8005f62:	d101      	bne.n	8005f68 <__sinit+0x2c>
 8005f64:	2301      	movs	r3, #1
 8005f66:	61a3      	str	r3, [r4, #24]
 8005f68:	0020      	movs	r0, r4
 8005f6a:	f000 f81f 	bl	8005fac <__sfp>
 8005f6e:	6060      	str	r0, [r4, #4]
 8005f70:	0020      	movs	r0, r4
 8005f72:	f000 f81b 	bl	8005fac <__sfp>
 8005f76:	60a0      	str	r0, [r4, #8]
 8005f78:	0020      	movs	r0, r4
 8005f7a:	f000 f817 	bl	8005fac <__sfp>
 8005f7e:	2200      	movs	r2, #0
 8005f80:	2104      	movs	r1, #4
 8005f82:	60e0      	str	r0, [r4, #12]
 8005f84:	6860      	ldr	r0, [r4, #4]
 8005f86:	f7ff ff77 	bl	8005e78 <std>
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	2109      	movs	r1, #9
 8005f8e:	68a0      	ldr	r0, [r4, #8]
 8005f90:	f7ff ff72 	bl	8005e78 <std>
 8005f94:	2202      	movs	r2, #2
 8005f96:	2112      	movs	r1, #18
 8005f98:	68e0      	ldr	r0, [r4, #12]
 8005f9a:	f7ff ff6d 	bl	8005e78 <std>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	61a3      	str	r3, [r4, #24]
 8005fa2:	e7d2      	b.n	8005f4a <__sinit+0xe>
 8005fa4:	0800abb4 	.word	0x0800abb4
 8005fa8:	08005ec1 	.word	0x08005ec1

08005fac <__sfp>:
 8005fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fae:	0007      	movs	r7, r0
 8005fb0:	f7ff ffa4 	bl	8005efc <__sfp_lock_acquire>
 8005fb4:	4b1f      	ldr	r3, [pc, #124]	; (8006034 <__sfp+0x88>)
 8005fb6:	681e      	ldr	r6, [r3, #0]
 8005fb8:	69b3      	ldr	r3, [r6, #24]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d102      	bne.n	8005fc4 <__sfp+0x18>
 8005fbe:	0030      	movs	r0, r6
 8005fc0:	f7ff ffbc 	bl	8005f3c <__sinit>
 8005fc4:	3648      	adds	r6, #72	; 0x48
 8005fc6:	68b4      	ldr	r4, [r6, #8]
 8005fc8:	6873      	ldr	r3, [r6, #4]
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	d504      	bpl.n	8005fd8 <__sfp+0x2c>
 8005fce:	6833      	ldr	r3, [r6, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d022      	beq.n	800601a <__sfp+0x6e>
 8005fd4:	6836      	ldr	r6, [r6, #0]
 8005fd6:	e7f6      	b.n	8005fc6 <__sfp+0x1a>
 8005fd8:	220c      	movs	r2, #12
 8005fda:	5ea5      	ldrsh	r5, [r4, r2]
 8005fdc:	2d00      	cmp	r5, #0
 8005fde:	d11a      	bne.n	8006016 <__sfp+0x6a>
 8005fe0:	0020      	movs	r0, r4
 8005fe2:	4b15      	ldr	r3, [pc, #84]	; (8006038 <__sfp+0x8c>)
 8005fe4:	3058      	adds	r0, #88	; 0x58
 8005fe6:	60e3      	str	r3, [r4, #12]
 8005fe8:	6665      	str	r5, [r4, #100]	; 0x64
 8005fea:	f000 f86b 	bl	80060c4 <__retarget_lock_init_recursive>
 8005fee:	f7ff ff8d 	bl	8005f0c <__sfp_lock_release>
 8005ff2:	0020      	movs	r0, r4
 8005ff4:	2208      	movs	r2, #8
 8005ff6:	0029      	movs	r1, r5
 8005ff8:	6025      	str	r5, [r4, #0]
 8005ffa:	60a5      	str	r5, [r4, #8]
 8005ffc:	6065      	str	r5, [r4, #4]
 8005ffe:	6125      	str	r5, [r4, #16]
 8006000:	6165      	str	r5, [r4, #20]
 8006002:	61a5      	str	r5, [r4, #24]
 8006004:	305c      	adds	r0, #92	; 0x5c
 8006006:	f000 f869 	bl	80060dc <memset>
 800600a:	6365      	str	r5, [r4, #52]	; 0x34
 800600c:	63a5      	str	r5, [r4, #56]	; 0x38
 800600e:	64a5      	str	r5, [r4, #72]	; 0x48
 8006010:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006012:	0020      	movs	r0, r4
 8006014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006016:	3468      	adds	r4, #104	; 0x68
 8006018:	e7d7      	b.n	8005fca <__sfp+0x1e>
 800601a:	2104      	movs	r1, #4
 800601c:	0038      	movs	r0, r7
 800601e:	f7ff ff57 	bl	8005ed0 <__sfmoreglue>
 8006022:	1e04      	subs	r4, r0, #0
 8006024:	6030      	str	r0, [r6, #0]
 8006026:	d1d5      	bne.n	8005fd4 <__sfp+0x28>
 8006028:	f7ff ff70 	bl	8005f0c <__sfp_lock_release>
 800602c:	230c      	movs	r3, #12
 800602e:	603b      	str	r3, [r7, #0]
 8006030:	e7ef      	b.n	8006012 <__sfp+0x66>
 8006032:	46c0      	nop			; (mov r8, r8)
 8006034:	0800abb4 	.word	0x0800abb4
 8006038:	ffff0001 	.word	0xffff0001

0800603c <_fwalk_reent>:
 800603c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800603e:	0004      	movs	r4, r0
 8006040:	0006      	movs	r6, r0
 8006042:	2700      	movs	r7, #0
 8006044:	9101      	str	r1, [sp, #4]
 8006046:	3448      	adds	r4, #72	; 0x48
 8006048:	6863      	ldr	r3, [r4, #4]
 800604a:	68a5      	ldr	r5, [r4, #8]
 800604c:	9300      	str	r3, [sp, #0]
 800604e:	9b00      	ldr	r3, [sp, #0]
 8006050:	3b01      	subs	r3, #1
 8006052:	9300      	str	r3, [sp, #0]
 8006054:	d504      	bpl.n	8006060 <_fwalk_reent+0x24>
 8006056:	6824      	ldr	r4, [r4, #0]
 8006058:	2c00      	cmp	r4, #0
 800605a:	d1f5      	bne.n	8006048 <_fwalk_reent+0xc>
 800605c:	0038      	movs	r0, r7
 800605e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006060:	89ab      	ldrh	r3, [r5, #12]
 8006062:	2b01      	cmp	r3, #1
 8006064:	d908      	bls.n	8006078 <_fwalk_reent+0x3c>
 8006066:	220e      	movs	r2, #14
 8006068:	5eab      	ldrsh	r3, [r5, r2]
 800606a:	3301      	adds	r3, #1
 800606c:	d004      	beq.n	8006078 <_fwalk_reent+0x3c>
 800606e:	0029      	movs	r1, r5
 8006070:	0030      	movs	r0, r6
 8006072:	9b01      	ldr	r3, [sp, #4]
 8006074:	4798      	blx	r3
 8006076:	4307      	orrs	r7, r0
 8006078:	3568      	adds	r5, #104	; 0x68
 800607a:	e7e8      	b.n	800604e <_fwalk_reent+0x12>

0800607c <__libc_init_array>:
 800607c:	b570      	push	{r4, r5, r6, lr}
 800607e:	2600      	movs	r6, #0
 8006080:	4d0c      	ldr	r5, [pc, #48]	; (80060b4 <__libc_init_array+0x38>)
 8006082:	4c0d      	ldr	r4, [pc, #52]	; (80060b8 <__libc_init_array+0x3c>)
 8006084:	1b64      	subs	r4, r4, r5
 8006086:	10a4      	asrs	r4, r4, #2
 8006088:	42a6      	cmp	r6, r4
 800608a:	d109      	bne.n	80060a0 <__libc_init_array+0x24>
 800608c:	2600      	movs	r6, #0
 800608e:	f004 fcb9 	bl	800aa04 <_init>
 8006092:	4d0a      	ldr	r5, [pc, #40]	; (80060bc <__libc_init_array+0x40>)
 8006094:	4c0a      	ldr	r4, [pc, #40]	; (80060c0 <__libc_init_array+0x44>)
 8006096:	1b64      	subs	r4, r4, r5
 8006098:	10a4      	asrs	r4, r4, #2
 800609a:	42a6      	cmp	r6, r4
 800609c:	d105      	bne.n	80060aa <__libc_init_array+0x2e>
 800609e:	bd70      	pop	{r4, r5, r6, pc}
 80060a0:	00b3      	lsls	r3, r6, #2
 80060a2:	58eb      	ldr	r3, [r5, r3]
 80060a4:	4798      	blx	r3
 80060a6:	3601      	adds	r6, #1
 80060a8:	e7ee      	b.n	8006088 <__libc_init_array+0xc>
 80060aa:	00b3      	lsls	r3, r6, #2
 80060ac:	58eb      	ldr	r3, [r5, r3]
 80060ae:	4798      	blx	r3
 80060b0:	3601      	adds	r6, #1
 80060b2:	e7f2      	b.n	800609a <__libc_init_array+0x1e>
 80060b4:	0800affc 	.word	0x0800affc
 80060b8:	0800affc 	.word	0x0800affc
 80060bc:	0800affc 	.word	0x0800affc
 80060c0:	0800b000 	.word	0x0800b000

080060c4 <__retarget_lock_init_recursive>:
 80060c4:	4770      	bx	lr

080060c6 <__retarget_lock_acquire_recursive>:
 80060c6:	4770      	bx	lr

080060c8 <__retarget_lock_release_recursive>:
 80060c8:	4770      	bx	lr

080060ca <memcpy>:
 80060ca:	2300      	movs	r3, #0
 80060cc:	b510      	push	{r4, lr}
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d100      	bne.n	80060d4 <memcpy+0xa>
 80060d2:	bd10      	pop	{r4, pc}
 80060d4:	5ccc      	ldrb	r4, [r1, r3]
 80060d6:	54c4      	strb	r4, [r0, r3]
 80060d8:	3301      	adds	r3, #1
 80060da:	e7f8      	b.n	80060ce <memcpy+0x4>

080060dc <memset>:
 80060dc:	0003      	movs	r3, r0
 80060de:	1882      	adds	r2, r0, r2
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d100      	bne.n	80060e6 <memset+0xa>
 80060e4:	4770      	bx	lr
 80060e6:	7019      	strb	r1, [r3, #0]
 80060e8:	3301      	adds	r3, #1
 80060ea:	e7f9      	b.n	80060e0 <memset+0x4>

080060ec <sbrk_aligned>:
 80060ec:	b570      	push	{r4, r5, r6, lr}
 80060ee:	4e0f      	ldr	r6, [pc, #60]	; (800612c <sbrk_aligned+0x40>)
 80060f0:	000d      	movs	r5, r1
 80060f2:	6831      	ldr	r1, [r6, #0]
 80060f4:	0004      	movs	r4, r0
 80060f6:	2900      	cmp	r1, #0
 80060f8:	d102      	bne.n	8006100 <sbrk_aligned+0x14>
 80060fa:	f000 ff79 	bl	8006ff0 <_sbrk_r>
 80060fe:	6030      	str	r0, [r6, #0]
 8006100:	0029      	movs	r1, r5
 8006102:	0020      	movs	r0, r4
 8006104:	f000 ff74 	bl	8006ff0 <_sbrk_r>
 8006108:	1c43      	adds	r3, r0, #1
 800610a:	d00a      	beq.n	8006122 <sbrk_aligned+0x36>
 800610c:	2303      	movs	r3, #3
 800610e:	1cc5      	adds	r5, r0, #3
 8006110:	439d      	bics	r5, r3
 8006112:	42a8      	cmp	r0, r5
 8006114:	d007      	beq.n	8006126 <sbrk_aligned+0x3a>
 8006116:	1a29      	subs	r1, r5, r0
 8006118:	0020      	movs	r0, r4
 800611a:	f000 ff69 	bl	8006ff0 <_sbrk_r>
 800611e:	1c43      	adds	r3, r0, #1
 8006120:	d101      	bne.n	8006126 <sbrk_aligned+0x3a>
 8006122:	2501      	movs	r5, #1
 8006124:	426d      	negs	r5, r5
 8006126:	0028      	movs	r0, r5
 8006128:	bd70      	pop	{r4, r5, r6, pc}
 800612a:	46c0      	nop			; (mov r8, r8)
 800612c:	200012fc 	.word	0x200012fc

08006130 <_malloc_r>:
 8006130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006132:	2203      	movs	r2, #3
 8006134:	1ccb      	adds	r3, r1, #3
 8006136:	4393      	bics	r3, r2
 8006138:	3308      	adds	r3, #8
 800613a:	0006      	movs	r6, r0
 800613c:	001f      	movs	r7, r3
 800613e:	2b0c      	cmp	r3, #12
 8006140:	d232      	bcs.n	80061a8 <_malloc_r+0x78>
 8006142:	270c      	movs	r7, #12
 8006144:	42b9      	cmp	r1, r7
 8006146:	d831      	bhi.n	80061ac <_malloc_r+0x7c>
 8006148:	0030      	movs	r0, r6
 800614a:	f003 f9e5 	bl	8009518 <__malloc_lock>
 800614e:	4d32      	ldr	r5, [pc, #200]	; (8006218 <_malloc_r+0xe8>)
 8006150:	682b      	ldr	r3, [r5, #0]
 8006152:	001c      	movs	r4, r3
 8006154:	2c00      	cmp	r4, #0
 8006156:	d12e      	bne.n	80061b6 <_malloc_r+0x86>
 8006158:	0039      	movs	r1, r7
 800615a:	0030      	movs	r0, r6
 800615c:	f7ff ffc6 	bl	80060ec <sbrk_aligned>
 8006160:	0004      	movs	r4, r0
 8006162:	1c43      	adds	r3, r0, #1
 8006164:	d11e      	bne.n	80061a4 <_malloc_r+0x74>
 8006166:	682c      	ldr	r4, [r5, #0]
 8006168:	0025      	movs	r5, r4
 800616a:	2d00      	cmp	r5, #0
 800616c:	d14a      	bne.n	8006204 <_malloc_r+0xd4>
 800616e:	6823      	ldr	r3, [r4, #0]
 8006170:	0029      	movs	r1, r5
 8006172:	18e3      	adds	r3, r4, r3
 8006174:	0030      	movs	r0, r6
 8006176:	9301      	str	r3, [sp, #4]
 8006178:	f000 ff3a 	bl	8006ff0 <_sbrk_r>
 800617c:	9b01      	ldr	r3, [sp, #4]
 800617e:	4283      	cmp	r3, r0
 8006180:	d143      	bne.n	800620a <_malloc_r+0xda>
 8006182:	6823      	ldr	r3, [r4, #0]
 8006184:	3703      	adds	r7, #3
 8006186:	1aff      	subs	r7, r7, r3
 8006188:	2303      	movs	r3, #3
 800618a:	439f      	bics	r7, r3
 800618c:	3708      	adds	r7, #8
 800618e:	2f0c      	cmp	r7, #12
 8006190:	d200      	bcs.n	8006194 <_malloc_r+0x64>
 8006192:	270c      	movs	r7, #12
 8006194:	0039      	movs	r1, r7
 8006196:	0030      	movs	r0, r6
 8006198:	f7ff ffa8 	bl	80060ec <sbrk_aligned>
 800619c:	1c43      	adds	r3, r0, #1
 800619e:	d034      	beq.n	800620a <_malloc_r+0xda>
 80061a0:	6823      	ldr	r3, [r4, #0]
 80061a2:	19df      	adds	r7, r3, r7
 80061a4:	6027      	str	r7, [r4, #0]
 80061a6:	e013      	b.n	80061d0 <_malloc_r+0xa0>
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	dacb      	bge.n	8006144 <_malloc_r+0x14>
 80061ac:	230c      	movs	r3, #12
 80061ae:	2500      	movs	r5, #0
 80061b0:	6033      	str	r3, [r6, #0]
 80061b2:	0028      	movs	r0, r5
 80061b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80061b6:	6822      	ldr	r2, [r4, #0]
 80061b8:	1bd1      	subs	r1, r2, r7
 80061ba:	d420      	bmi.n	80061fe <_malloc_r+0xce>
 80061bc:	290b      	cmp	r1, #11
 80061be:	d917      	bls.n	80061f0 <_malloc_r+0xc0>
 80061c0:	19e2      	adds	r2, r4, r7
 80061c2:	6027      	str	r7, [r4, #0]
 80061c4:	42a3      	cmp	r3, r4
 80061c6:	d111      	bne.n	80061ec <_malloc_r+0xbc>
 80061c8:	602a      	str	r2, [r5, #0]
 80061ca:	6863      	ldr	r3, [r4, #4]
 80061cc:	6011      	str	r1, [r2, #0]
 80061ce:	6053      	str	r3, [r2, #4]
 80061d0:	0030      	movs	r0, r6
 80061d2:	0025      	movs	r5, r4
 80061d4:	f003 f9a8 	bl	8009528 <__malloc_unlock>
 80061d8:	2207      	movs	r2, #7
 80061da:	350b      	adds	r5, #11
 80061dc:	1d23      	adds	r3, r4, #4
 80061de:	4395      	bics	r5, r2
 80061e0:	1aea      	subs	r2, r5, r3
 80061e2:	429d      	cmp	r5, r3
 80061e4:	d0e5      	beq.n	80061b2 <_malloc_r+0x82>
 80061e6:	1b5b      	subs	r3, r3, r5
 80061e8:	50a3      	str	r3, [r4, r2]
 80061ea:	e7e2      	b.n	80061b2 <_malloc_r+0x82>
 80061ec:	605a      	str	r2, [r3, #4]
 80061ee:	e7ec      	b.n	80061ca <_malloc_r+0x9a>
 80061f0:	6862      	ldr	r2, [r4, #4]
 80061f2:	42a3      	cmp	r3, r4
 80061f4:	d101      	bne.n	80061fa <_malloc_r+0xca>
 80061f6:	602a      	str	r2, [r5, #0]
 80061f8:	e7ea      	b.n	80061d0 <_malloc_r+0xa0>
 80061fa:	605a      	str	r2, [r3, #4]
 80061fc:	e7e8      	b.n	80061d0 <_malloc_r+0xa0>
 80061fe:	0023      	movs	r3, r4
 8006200:	6864      	ldr	r4, [r4, #4]
 8006202:	e7a7      	b.n	8006154 <_malloc_r+0x24>
 8006204:	002c      	movs	r4, r5
 8006206:	686d      	ldr	r5, [r5, #4]
 8006208:	e7af      	b.n	800616a <_malloc_r+0x3a>
 800620a:	230c      	movs	r3, #12
 800620c:	0030      	movs	r0, r6
 800620e:	6033      	str	r3, [r6, #0]
 8006210:	f003 f98a 	bl	8009528 <__malloc_unlock>
 8006214:	e7cd      	b.n	80061b2 <_malloc_r+0x82>
 8006216:	46c0      	nop			; (mov r8, r8)
 8006218:	200012f8 	.word	0x200012f8

0800621c <__cvt>:
 800621c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800621e:	001e      	movs	r6, r3
 8006220:	2300      	movs	r3, #0
 8006222:	0014      	movs	r4, r2
 8006224:	b08b      	sub	sp, #44	; 0x2c
 8006226:	429e      	cmp	r6, r3
 8006228:	da04      	bge.n	8006234 <__cvt+0x18>
 800622a:	2180      	movs	r1, #128	; 0x80
 800622c:	0609      	lsls	r1, r1, #24
 800622e:	1873      	adds	r3, r6, r1
 8006230:	001e      	movs	r6, r3
 8006232:	232d      	movs	r3, #45	; 0x2d
 8006234:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006236:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006238:	7013      	strb	r3, [r2, #0]
 800623a:	2320      	movs	r3, #32
 800623c:	2203      	movs	r2, #3
 800623e:	439f      	bics	r7, r3
 8006240:	2f46      	cmp	r7, #70	; 0x46
 8006242:	d007      	beq.n	8006254 <__cvt+0x38>
 8006244:	003b      	movs	r3, r7
 8006246:	3b45      	subs	r3, #69	; 0x45
 8006248:	4259      	negs	r1, r3
 800624a:	414b      	adcs	r3, r1
 800624c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800624e:	3a01      	subs	r2, #1
 8006250:	18cb      	adds	r3, r1, r3
 8006252:	9310      	str	r3, [sp, #64]	; 0x40
 8006254:	ab09      	add	r3, sp, #36	; 0x24
 8006256:	9304      	str	r3, [sp, #16]
 8006258:	ab08      	add	r3, sp, #32
 800625a:	9303      	str	r3, [sp, #12]
 800625c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800625e:	9200      	str	r2, [sp, #0]
 8006260:	9302      	str	r3, [sp, #8]
 8006262:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006264:	0022      	movs	r2, r4
 8006266:	9301      	str	r3, [sp, #4]
 8006268:	0033      	movs	r3, r6
 800626a:	f001 febb 	bl	8007fe4 <_dtoa_r>
 800626e:	0005      	movs	r5, r0
 8006270:	2f47      	cmp	r7, #71	; 0x47
 8006272:	d102      	bne.n	800627a <__cvt+0x5e>
 8006274:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006276:	07db      	lsls	r3, r3, #31
 8006278:	d528      	bpl.n	80062cc <__cvt+0xb0>
 800627a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800627c:	18eb      	adds	r3, r5, r3
 800627e:	9307      	str	r3, [sp, #28]
 8006280:	2f46      	cmp	r7, #70	; 0x46
 8006282:	d114      	bne.n	80062ae <__cvt+0x92>
 8006284:	782b      	ldrb	r3, [r5, #0]
 8006286:	2b30      	cmp	r3, #48	; 0x30
 8006288:	d10c      	bne.n	80062a4 <__cvt+0x88>
 800628a:	2200      	movs	r2, #0
 800628c:	2300      	movs	r3, #0
 800628e:	0020      	movs	r0, r4
 8006290:	0031      	movs	r1, r6
 8006292:	f7fa f8db 	bl	800044c <__aeabi_dcmpeq>
 8006296:	2800      	cmp	r0, #0
 8006298:	d104      	bne.n	80062a4 <__cvt+0x88>
 800629a:	2301      	movs	r3, #1
 800629c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800629e:	1a9b      	subs	r3, r3, r2
 80062a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80062a2:	6013      	str	r3, [r2, #0]
 80062a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80062a6:	9a07      	ldr	r2, [sp, #28]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	18d3      	adds	r3, r2, r3
 80062ac:	9307      	str	r3, [sp, #28]
 80062ae:	2200      	movs	r2, #0
 80062b0:	2300      	movs	r3, #0
 80062b2:	0020      	movs	r0, r4
 80062b4:	0031      	movs	r1, r6
 80062b6:	f7fa f8c9 	bl	800044c <__aeabi_dcmpeq>
 80062ba:	2800      	cmp	r0, #0
 80062bc:	d001      	beq.n	80062c2 <__cvt+0xa6>
 80062be:	9b07      	ldr	r3, [sp, #28]
 80062c0:	9309      	str	r3, [sp, #36]	; 0x24
 80062c2:	2230      	movs	r2, #48	; 0x30
 80062c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062c6:	9907      	ldr	r1, [sp, #28]
 80062c8:	428b      	cmp	r3, r1
 80062ca:	d306      	bcc.n	80062da <__cvt+0xbe>
 80062cc:	0028      	movs	r0, r5
 80062ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062d0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80062d2:	1b5b      	subs	r3, r3, r5
 80062d4:	6013      	str	r3, [r2, #0]
 80062d6:	b00b      	add	sp, #44	; 0x2c
 80062d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062da:	1c59      	adds	r1, r3, #1
 80062dc:	9109      	str	r1, [sp, #36]	; 0x24
 80062de:	701a      	strb	r2, [r3, #0]
 80062e0:	e7f0      	b.n	80062c4 <__cvt+0xa8>

080062e2 <__exponent>:
 80062e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062e4:	1c83      	adds	r3, r0, #2
 80062e6:	b087      	sub	sp, #28
 80062e8:	9303      	str	r3, [sp, #12]
 80062ea:	0005      	movs	r5, r0
 80062ec:	000c      	movs	r4, r1
 80062ee:	232b      	movs	r3, #43	; 0x2b
 80062f0:	7002      	strb	r2, [r0, #0]
 80062f2:	2900      	cmp	r1, #0
 80062f4:	da01      	bge.n	80062fa <__exponent+0x18>
 80062f6:	424c      	negs	r4, r1
 80062f8:	3302      	adds	r3, #2
 80062fa:	706b      	strb	r3, [r5, #1]
 80062fc:	2c09      	cmp	r4, #9
 80062fe:	dd31      	ble.n	8006364 <__exponent+0x82>
 8006300:	270a      	movs	r7, #10
 8006302:	ab04      	add	r3, sp, #16
 8006304:	1dde      	adds	r6, r3, #7
 8006306:	0020      	movs	r0, r4
 8006308:	0039      	movs	r1, r7
 800630a:	9601      	str	r6, [sp, #4]
 800630c:	f7fa f888 	bl	8000420 <__aeabi_idivmod>
 8006310:	3e01      	subs	r6, #1
 8006312:	3130      	adds	r1, #48	; 0x30
 8006314:	0020      	movs	r0, r4
 8006316:	7031      	strb	r1, [r6, #0]
 8006318:	0039      	movs	r1, r7
 800631a:	9402      	str	r4, [sp, #8]
 800631c:	f7f9 ff9a 	bl	8000254 <__divsi3>
 8006320:	9b02      	ldr	r3, [sp, #8]
 8006322:	0004      	movs	r4, r0
 8006324:	2b63      	cmp	r3, #99	; 0x63
 8006326:	dcee      	bgt.n	8006306 <__exponent+0x24>
 8006328:	9b01      	ldr	r3, [sp, #4]
 800632a:	3430      	adds	r4, #48	; 0x30
 800632c:	1e9a      	subs	r2, r3, #2
 800632e:	0013      	movs	r3, r2
 8006330:	9903      	ldr	r1, [sp, #12]
 8006332:	7014      	strb	r4, [r2, #0]
 8006334:	a804      	add	r0, sp, #16
 8006336:	3007      	adds	r0, #7
 8006338:	4298      	cmp	r0, r3
 800633a:	d80e      	bhi.n	800635a <__exponent+0x78>
 800633c:	ab04      	add	r3, sp, #16
 800633e:	3307      	adds	r3, #7
 8006340:	2000      	movs	r0, #0
 8006342:	429a      	cmp	r2, r3
 8006344:	d804      	bhi.n	8006350 <__exponent+0x6e>
 8006346:	ab04      	add	r3, sp, #16
 8006348:	3009      	adds	r0, #9
 800634a:	18c0      	adds	r0, r0, r3
 800634c:	9b01      	ldr	r3, [sp, #4]
 800634e:	1ac0      	subs	r0, r0, r3
 8006350:	9b03      	ldr	r3, [sp, #12]
 8006352:	1818      	adds	r0, r3, r0
 8006354:	1b40      	subs	r0, r0, r5
 8006356:	b007      	add	sp, #28
 8006358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800635a:	7818      	ldrb	r0, [r3, #0]
 800635c:	3301      	adds	r3, #1
 800635e:	7008      	strb	r0, [r1, #0]
 8006360:	3101      	adds	r1, #1
 8006362:	e7e7      	b.n	8006334 <__exponent+0x52>
 8006364:	2330      	movs	r3, #48	; 0x30
 8006366:	18e4      	adds	r4, r4, r3
 8006368:	70ab      	strb	r3, [r5, #2]
 800636a:	1d28      	adds	r0, r5, #4
 800636c:	70ec      	strb	r4, [r5, #3]
 800636e:	e7f1      	b.n	8006354 <__exponent+0x72>

08006370 <_printf_float>:
 8006370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006372:	b095      	sub	sp, #84	; 0x54
 8006374:	000c      	movs	r4, r1
 8006376:	9209      	str	r2, [sp, #36]	; 0x24
 8006378:	001e      	movs	r6, r3
 800637a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800637c:	0007      	movs	r7, r0
 800637e:	f003 f88b 	bl	8009498 <_localeconv_r>
 8006382:	6803      	ldr	r3, [r0, #0]
 8006384:	0018      	movs	r0, r3
 8006386:	930c      	str	r3, [sp, #48]	; 0x30
 8006388:	f7f9 febe 	bl	8000108 <strlen>
 800638c:	2300      	movs	r3, #0
 800638e:	9312      	str	r3, [sp, #72]	; 0x48
 8006390:	7e23      	ldrb	r3, [r4, #24]
 8006392:	2207      	movs	r2, #7
 8006394:	930a      	str	r3, [sp, #40]	; 0x28
 8006396:	6823      	ldr	r3, [r4, #0]
 8006398:	900e      	str	r0, [sp, #56]	; 0x38
 800639a:	930d      	str	r3, [sp, #52]	; 0x34
 800639c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800639e:	682b      	ldr	r3, [r5, #0]
 80063a0:	05c9      	lsls	r1, r1, #23
 80063a2:	d547      	bpl.n	8006434 <_printf_float+0xc4>
 80063a4:	189b      	adds	r3, r3, r2
 80063a6:	4393      	bics	r3, r2
 80063a8:	001a      	movs	r2, r3
 80063aa:	3208      	adds	r2, #8
 80063ac:	602a      	str	r2, [r5, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	64a2      	str	r2, [r4, #72]	; 0x48
 80063b4:	64e3      	str	r3, [r4, #76]	; 0x4c
 80063b6:	2201      	movs	r2, #1
 80063b8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80063ba:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80063bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80063be:	006b      	lsls	r3, r5, #1
 80063c0:	085b      	lsrs	r3, r3, #1
 80063c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80063c4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80063c6:	4ba7      	ldr	r3, [pc, #668]	; (8006664 <_printf_float+0x2f4>)
 80063c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80063ca:	4252      	negs	r2, r2
 80063cc:	f7fb fe18 	bl	8002000 <__aeabi_dcmpun>
 80063d0:	2800      	cmp	r0, #0
 80063d2:	d131      	bne.n	8006438 <_printf_float+0xc8>
 80063d4:	2201      	movs	r2, #1
 80063d6:	4ba3      	ldr	r3, [pc, #652]	; (8006664 <_printf_float+0x2f4>)
 80063d8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80063da:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80063dc:	4252      	negs	r2, r2
 80063de:	f7fa f845 	bl	800046c <__aeabi_dcmple>
 80063e2:	2800      	cmp	r0, #0
 80063e4:	d128      	bne.n	8006438 <_printf_float+0xc8>
 80063e6:	2200      	movs	r2, #0
 80063e8:	2300      	movs	r3, #0
 80063ea:	0029      	movs	r1, r5
 80063ec:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80063ee:	f7fa f833 	bl	8000458 <__aeabi_dcmplt>
 80063f2:	2800      	cmp	r0, #0
 80063f4:	d003      	beq.n	80063fe <_printf_float+0x8e>
 80063f6:	0023      	movs	r3, r4
 80063f8:	222d      	movs	r2, #45	; 0x2d
 80063fa:	3343      	adds	r3, #67	; 0x43
 80063fc:	701a      	strb	r2, [r3, #0]
 80063fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006400:	4d99      	ldr	r5, [pc, #612]	; (8006668 <_printf_float+0x2f8>)
 8006402:	2b47      	cmp	r3, #71	; 0x47
 8006404:	d900      	bls.n	8006408 <_printf_float+0x98>
 8006406:	4d99      	ldr	r5, [pc, #612]	; (800666c <_printf_float+0x2fc>)
 8006408:	2303      	movs	r3, #3
 800640a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800640c:	6123      	str	r3, [r4, #16]
 800640e:	3301      	adds	r3, #1
 8006410:	439a      	bics	r2, r3
 8006412:	2300      	movs	r3, #0
 8006414:	6022      	str	r2, [r4, #0]
 8006416:	930b      	str	r3, [sp, #44]	; 0x2c
 8006418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800641a:	0021      	movs	r1, r4
 800641c:	0038      	movs	r0, r7
 800641e:	9600      	str	r6, [sp, #0]
 8006420:	aa13      	add	r2, sp, #76	; 0x4c
 8006422:	f000 f9e7 	bl	80067f4 <_printf_common>
 8006426:	1c43      	adds	r3, r0, #1
 8006428:	d000      	beq.n	800642c <_printf_float+0xbc>
 800642a:	e0a2      	b.n	8006572 <_printf_float+0x202>
 800642c:	2001      	movs	r0, #1
 800642e:	4240      	negs	r0, r0
 8006430:	b015      	add	sp, #84	; 0x54
 8006432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006434:	3307      	adds	r3, #7
 8006436:	e7b6      	b.n	80063a6 <_printf_float+0x36>
 8006438:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800643a:	002b      	movs	r3, r5
 800643c:	0010      	movs	r0, r2
 800643e:	0029      	movs	r1, r5
 8006440:	f7fb fdde 	bl	8002000 <__aeabi_dcmpun>
 8006444:	2800      	cmp	r0, #0
 8006446:	d00b      	beq.n	8006460 <_printf_float+0xf0>
 8006448:	2d00      	cmp	r5, #0
 800644a:	da03      	bge.n	8006454 <_printf_float+0xe4>
 800644c:	0023      	movs	r3, r4
 800644e:	222d      	movs	r2, #45	; 0x2d
 8006450:	3343      	adds	r3, #67	; 0x43
 8006452:	701a      	strb	r2, [r3, #0]
 8006454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006456:	4d86      	ldr	r5, [pc, #536]	; (8006670 <_printf_float+0x300>)
 8006458:	2b47      	cmp	r3, #71	; 0x47
 800645a:	d9d5      	bls.n	8006408 <_printf_float+0x98>
 800645c:	4d85      	ldr	r5, [pc, #532]	; (8006674 <_printf_float+0x304>)
 800645e:	e7d3      	b.n	8006408 <_printf_float+0x98>
 8006460:	2220      	movs	r2, #32
 8006462:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006464:	6863      	ldr	r3, [r4, #4]
 8006466:	4391      	bics	r1, r2
 8006468:	910f      	str	r1, [sp, #60]	; 0x3c
 800646a:	1c5a      	adds	r2, r3, #1
 800646c:	d149      	bne.n	8006502 <_printf_float+0x192>
 800646e:	3307      	adds	r3, #7
 8006470:	6063      	str	r3, [r4, #4]
 8006472:	2380      	movs	r3, #128	; 0x80
 8006474:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006476:	00db      	lsls	r3, r3, #3
 8006478:	4313      	orrs	r3, r2
 800647a:	2200      	movs	r2, #0
 800647c:	9206      	str	r2, [sp, #24]
 800647e:	aa12      	add	r2, sp, #72	; 0x48
 8006480:	9205      	str	r2, [sp, #20]
 8006482:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006484:	a908      	add	r1, sp, #32
 8006486:	9204      	str	r2, [sp, #16]
 8006488:	aa11      	add	r2, sp, #68	; 0x44
 800648a:	9203      	str	r2, [sp, #12]
 800648c:	2223      	movs	r2, #35	; 0x23
 800648e:	6023      	str	r3, [r4, #0]
 8006490:	9301      	str	r3, [sp, #4]
 8006492:	6863      	ldr	r3, [r4, #4]
 8006494:	1852      	adds	r2, r2, r1
 8006496:	9202      	str	r2, [sp, #8]
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	0038      	movs	r0, r7
 800649c:	002b      	movs	r3, r5
 800649e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80064a0:	f7ff febc 	bl	800621c <__cvt>
 80064a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064a6:	0005      	movs	r5, r0
 80064a8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80064aa:	2b47      	cmp	r3, #71	; 0x47
 80064ac:	d108      	bne.n	80064c0 <_printf_float+0x150>
 80064ae:	1ccb      	adds	r3, r1, #3
 80064b0:	db02      	blt.n	80064b8 <_printf_float+0x148>
 80064b2:	6863      	ldr	r3, [r4, #4]
 80064b4:	4299      	cmp	r1, r3
 80064b6:	dd48      	ble.n	800654a <_printf_float+0x1da>
 80064b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064ba:	3b02      	subs	r3, #2
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	930a      	str	r3, [sp, #40]	; 0x28
 80064c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064c2:	2b65      	cmp	r3, #101	; 0x65
 80064c4:	d824      	bhi.n	8006510 <_printf_float+0x1a0>
 80064c6:	0020      	movs	r0, r4
 80064c8:	001a      	movs	r2, r3
 80064ca:	3901      	subs	r1, #1
 80064cc:	3050      	adds	r0, #80	; 0x50
 80064ce:	9111      	str	r1, [sp, #68]	; 0x44
 80064d0:	f7ff ff07 	bl	80062e2 <__exponent>
 80064d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80064d6:	900b      	str	r0, [sp, #44]	; 0x2c
 80064d8:	1813      	adds	r3, r2, r0
 80064da:	6123      	str	r3, [r4, #16]
 80064dc:	2a01      	cmp	r2, #1
 80064de:	dc02      	bgt.n	80064e6 <_printf_float+0x176>
 80064e0:	6822      	ldr	r2, [r4, #0]
 80064e2:	07d2      	lsls	r2, r2, #31
 80064e4:	d501      	bpl.n	80064ea <_printf_float+0x17a>
 80064e6:	3301      	adds	r3, #1
 80064e8:	6123      	str	r3, [r4, #16]
 80064ea:	2323      	movs	r3, #35	; 0x23
 80064ec:	aa08      	add	r2, sp, #32
 80064ee:	189b      	adds	r3, r3, r2
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d100      	bne.n	80064f8 <_printf_float+0x188>
 80064f6:	e78f      	b.n	8006418 <_printf_float+0xa8>
 80064f8:	0023      	movs	r3, r4
 80064fa:	222d      	movs	r2, #45	; 0x2d
 80064fc:	3343      	adds	r3, #67	; 0x43
 80064fe:	701a      	strb	r2, [r3, #0]
 8006500:	e78a      	b.n	8006418 <_printf_float+0xa8>
 8006502:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006504:	2a47      	cmp	r2, #71	; 0x47
 8006506:	d1b4      	bne.n	8006472 <_printf_float+0x102>
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1b2      	bne.n	8006472 <_printf_float+0x102>
 800650c:	3301      	adds	r3, #1
 800650e:	e7af      	b.n	8006470 <_printf_float+0x100>
 8006510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006512:	2b66      	cmp	r3, #102	; 0x66
 8006514:	d11b      	bne.n	800654e <_printf_float+0x1de>
 8006516:	6863      	ldr	r3, [r4, #4]
 8006518:	2900      	cmp	r1, #0
 800651a:	dd0d      	ble.n	8006538 <_printf_float+0x1c8>
 800651c:	6121      	str	r1, [r4, #16]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d102      	bne.n	8006528 <_printf_float+0x1b8>
 8006522:	6822      	ldr	r2, [r4, #0]
 8006524:	07d2      	lsls	r2, r2, #31
 8006526:	d502      	bpl.n	800652e <_printf_float+0x1be>
 8006528:	3301      	adds	r3, #1
 800652a:	1859      	adds	r1, r3, r1
 800652c:	6121      	str	r1, [r4, #16]
 800652e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006530:	65a3      	str	r3, [r4, #88]	; 0x58
 8006532:	2300      	movs	r3, #0
 8006534:	930b      	str	r3, [sp, #44]	; 0x2c
 8006536:	e7d8      	b.n	80064ea <_printf_float+0x17a>
 8006538:	2b00      	cmp	r3, #0
 800653a:	d103      	bne.n	8006544 <_printf_float+0x1d4>
 800653c:	2201      	movs	r2, #1
 800653e:	6821      	ldr	r1, [r4, #0]
 8006540:	4211      	tst	r1, r2
 8006542:	d000      	beq.n	8006546 <_printf_float+0x1d6>
 8006544:	1c9a      	adds	r2, r3, #2
 8006546:	6122      	str	r2, [r4, #16]
 8006548:	e7f1      	b.n	800652e <_printf_float+0x1be>
 800654a:	2367      	movs	r3, #103	; 0x67
 800654c:	930a      	str	r3, [sp, #40]	; 0x28
 800654e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006550:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006552:	4293      	cmp	r3, r2
 8006554:	db06      	blt.n	8006564 <_printf_float+0x1f4>
 8006556:	6822      	ldr	r2, [r4, #0]
 8006558:	6123      	str	r3, [r4, #16]
 800655a:	07d2      	lsls	r2, r2, #31
 800655c:	d5e7      	bpl.n	800652e <_printf_float+0x1be>
 800655e:	3301      	adds	r3, #1
 8006560:	6123      	str	r3, [r4, #16]
 8006562:	e7e4      	b.n	800652e <_printf_float+0x1be>
 8006564:	2101      	movs	r1, #1
 8006566:	2b00      	cmp	r3, #0
 8006568:	dc01      	bgt.n	800656e <_printf_float+0x1fe>
 800656a:	1849      	adds	r1, r1, r1
 800656c:	1ac9      	subs	r1, r1, r3
 800656e:	1852      	adds	r2, r2, r1
 8006570:	e7e9      	b.n	8006546 <_printf_float+0x1d6>
 8006572:	6822      	ldr	r2, [r4, #0]
 8006574:	0553      	lsls	r3, r2, #21
 8006576:	d407      	bmi.n	8006588 <_printf_float+0x218>
 8006578:	6923      	ldr	r3, [r4, #16]
 800657a:	002a      	movs	r2, r5
 800657c:	0038      	movs	r0, r7
 800657e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006580:	47b0      	blx	r6
 8006582:	1c43      	adds	r3, r0, #1
 8006584:	d128      	bne.n	80065d8 <_printf_float+0x268>
 8006586:	e751      	b.n	800642c <_printf_float+0xbc>
 8006588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800658a:	2b65      	cmp	r3, #101	; 0x65
 800658c:	d800      	bhi.n	8006590 <_printf_float+0x220>
 800658e:	e0e1      	b.n	8006754 <_printf_float+0x3e4>
 8006590:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006592:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006594:	2200      	movs	r2, #0
 8006596:	2300      	movs	r3, #0
 8006598:	f7f9 ff58 	bl	800044c <__aeabi_dcmpeq>
 800659c:	2800      	cmp	r0, #0
 800659e:	d031      	beq.n	8006604 <_printf_float+0x294>
 80065a0:	2301      	movs	r3, #1
 80065a2:	0038      	movs	r0, r7
 80065a4:	4a34      	ldr	r2, [pc, #208]	; (8006678 <_printf_float+0x308>)
 80065a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065a8:	47b0      	blx	r6
 80065aa:	1c43      	adds	r3, r0, #1
 80065ac:	d100      	bne.n	80065b0 <_printf_float+0x240>
 80065ae:	e73d      	b.n	800642c <_printf_float+0xbc>
 80065b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80065b4:	4293      	cmp	r3, r2
 80065b6:	db02      	blt.n	80065be <_printf_float+0x24e>
 80065b8:	6823      	ldr	r3, [r4, #0]
 80065ba:	07db      	lsls	r3, r3, #31
 80065bc:	d50c      	bpl.n	80065d8 <_printf_float+0x268>
 80065be:	0038      	movs	r0, r7
 80065c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065c6:	47b0      	blx	r6
 80065c8:	2500      	movs	r5, #0
 80065ca:	1c43      	adds	r3, r0, #1
 80065cc:	d100      	bne.n	80065d0 <_printf_float+0x260>
 80065ce:	e72d      	b.n	800642c <_printf_float+0xbc>
 80065d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065d2:	3b01      	subs	r3, #1
 80065d4:	42ab      	cmp	r3, r5
 80065d6:	dc0a      	bgt.n	80065ee <_printf_float+0x27e>
 80065d8:	6823      	ldr	r3, [r4, #0]
 80065da:	079b      	lsls	r3, r3, #30
 80065dc:	d500      	bpl.n	80065e0 <_printf_float+0x270>
 80065de:	e106      	b.n	80067ee <_printf_float+0x47e>
 80065e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80065e2:	68e0      	ldr	r0, [r4, #12]
 80065e4:	4298      	cmp	r0, r3
 80065e6:	db00      	blt.n	80065ea <_printf_float+0x27a>
 80065e8:	e722      	b.n	8006430 <_printf_float+0xc0>
 80065ea:	0018      	movs	r0, r3
 80065ec:	e720      	b.n	8006430 <_printf_float+0xc0>
 80065ee:	0022      	movs	r2, r4
 80065f0:	2301      	movs	r3, #1
 80065f2:	0038      	movs	r0, r7
 80065f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065f6:	321a      	adds	r2, #26
 80065f8:	47b0      	blx	r6
 80065fa:	1c43      	adds	r3, r0, #1
 80065fc:	d100      	bne.n	8006600 <_printf_float+0x290>
 80065fe:	e715      	b.n	800642c <_printf_float+0xbc>
 8006600:	3501      	adds	r5, #1
 8006602:	e7e5      	b.n	80065d0 <_printf_float+0x260>
 8006604:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006606:	2b00      	cmp	r3, #0
 8006608:	dc38      	bgt.n	800667c <_printf_float+0x30c>
 800660a:	2301      	movs	r3, #1
 800660c:	0038      	movs	r0, r7
 800660e:	4a1a      	ldr	r2, [pc, #104]	; (8006678 <_printf_float+0x308>)
 8006610:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006612:	47b0      	blx	r6
 8006614:	1c43      	adds	r3, r0, #1
 8006616:	d100      	bne.n	800661a <_printf_float+0x2aa>
 8006618:	e708      	b.n	800642c <_printf_float+0xbc>
 800661a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800661c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800661e:	4313      	orrs	r3, r2
 8006620:	d102      	bne.n	8006628 <_printf_float+0x2b8>
 8006622:	6823      	ldr	r3, [r4, #0]
 8006624:	07db      	lsls	r3, r3, #31
 8006626:	d5d7      	bpl.n	80065d8 <_printf_float+0x268>
 8006628:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800662a:	0038      	movs	r0, r7
 800662c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800662e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006630:	47b0      	blx	r6
 8006632:	1c43      	adds	r3, r0, #1
 8006634:	d100      	bne.n	8006638 <_printf_float+0x2c8>
 8006636:	e6f9      	b.n	800642c <_printf_float+0xbc>
 8006638:	2300      	movs	r3, #0
 800663a:	930a      	str	r3, [sp, #40]	; 0x28
 800663c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800663e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006640:	425b      	negs	r3, r3
 8006642:	4293      	cmp	r3, r2
 8006644:	dc01      	bgt.n	800664a <_printf_float+0x2da>
 8006646:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006648:	e797      	b.n	800657a <_printf_float+0x20a>
 800664a:	0022      	movs	r2, r4
 800664c:	2301      	movs	r3, #1
 800664e:	0038      	movs	r0, r7
 8006650:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006652:	321a      	adds	r2, #26
 8006654:	47b0      	blx	r6
 8006656:	1c43      	adds	r3, r0, #1
 8006658:	d100      	bne.n	800665c <_printf_float+0x2ec>
 800665a:	e6e7      	b.n	800642c <_printf_float+0xbc>
 800665c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800665e:	3301      	adds	r3, #1
 8006660:	e7eb      	b.n	800663a <_printf_float+0x2ca>
 8006662:	46c0      	nop			; (mov r8, r8)
 8006664:	7fefffff 	.word	0x7fefffff
 8006668:	0800abb8 	.word	0x0800abb8
 800666c:	0800abbc 	.word	0x0800abbc
 8006670:	0800abc0 	.word	0x0800abc0
 8006674:	0800abc4 	.word	0x0800abc4
 8006678:	0800abc8 	.word	0x0800abc8
 800667c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800667e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006680:	920a      	str	r2, [sp, #40]	; 0x28
 8006682:	429a      	cmp	r2, r3
 8006684:	dd00      	ble.n	8006688 <_printf_float+0x318>
 8006686:	930a      	str	r3, [sp, #40]	; 0x28
 8006688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800668a:	2b00      	cmp	r3, #0
 800668c:	dc3c      	bgt.n	8006708 <_printf_float+0x398>
 800668e:	2300      	movs	r3, #0
 8006690:	930d      	str	r3, [sp, #52]	; 0x34
 8006692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006694:	43db      	mvns	r3, r3
 8006696:	17db      	asrs	r3, r3, #31
 8006698:	930f      	str	r3, [sp, #60]	; 0x3c
 800669a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800669c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800669e:	930b      	str	r3, [sp, #44]	; 0x2c
 80066a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066a2:	4013      	ands	r3, r2
 80066a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80066aa:	4293      	cmp	r3, r2
 80066ac:	dc34      	bgt.n	8006718 <_printf_float+0x3a8>
 80066ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80066b2:	4293      	cmp	r3, r2
 80066b4:	db3d      	blt.n	8006732 <_printf_float+0x3c2>
 80066b6:	6823      	ldr	r3, [r4, #0]
 80066b8:	07db      	lsls	r3, r3, #31
 80066ba:	d43a      	bmi.n	8006732 <_printf_float+0x3c2>
 80066bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80066be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066c0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	1a52      	subs	r2, r2, r1
 80066c6:	920a      	str	r2, [sp, #40]	; 0x28
 80066c8:	429a      	cmp	r2, r3
 80066ca:	dd00      	ble.n	80066ce <_printf_float+0x35e>
 80066cc:	930a      	str	r3, [sp, #40]	; 0x28
 80066ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	dc36      	bgt.n	8006742 <_printf_float+0x3d2>
 80066d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066d6:	2500      	movs	r5, #0
 80066d8:	43db      	mvns	r3, r3
 80066da:	17db      	asrs	r3, r3, #31
 80066dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80066de:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80066e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80066e4:	1a9b      	subs	r3, r3, r2
 80066e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066e8:	400a      	ands	r2, r1
 80066ea:	1a9b      	subs	r3, r3, r2
 80066ec:	42ab      	cmp	r3, r5
 80066ee:	dc00      	bgt.n	80066f2 <_printf_float+0x382>
 80066f0:	e772      	b.n	80065d8 <_printf_float+0x268>
 80066f2:	0022      	movs	r2, r4
 80066f4:	2301      	movs	r3, #1
 80066f6:	0038      	movs	r0, r7
 80066f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066fa:	321a      	adds	r2, #26
 80066fc:	47b0      	blx	r6
 80066fe:	1c43      	adds	r3, r0, #1
 8006700:	d100      	bne.n	8006704 <_printf_float+0x394>
 8006702:	e693      	b.n	800642c <_printf_float+0xbc>
 8006704:	3501      	adds	r5, #1
 8006706:	e7ea      	b.n	80066de <_printf_float+0x36e>
 8006708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800670a:	002a      	movs	r2, r5
 800670c:	0038      	movs	r0, r7
 800670e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006710:	47b0      	blx	r6
 8006712:	1c43      	adds	r3, r0, #1
 8006714:	d1bb      	bne.n	800668e <_printf_float+0x31e>
 8006716:	e689      	b.n	800642c <_printf_float+0xbc>
 8006718:	0022      	movs	r2, r4
 800671a:	2301      	movs	r3, #1
 800671c:	0038      	movs	r0, r7
 800671e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006720:	321a      	adds	r2, #26
 8006722:	47b0      	blx	r6
 8006724:	1c43      	adds	r3, r0, #1
 8006726:	d100      	bne.n	800672a <_printf_float+0x3ba>
 8006728:	e680      	b.n	800642c <_printf_float+0xbc>
 800672a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800672c:	3301      	adds	r3, #1
 800672e:	930d      	str	r3, [sp, #52]	; 0x34
 8006730:	e7b3      	b.n	800669a <_printf_float+0x32a>
 8006732:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006734:	0038      	movs	r0, r7
 8006736:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006738:	9909      	ldr	r1, [sp, #36]	; 0x24
 800673a:	47b0      	blx	r6
 800673c:	1c43      	adds	r3, r0, #1
 800673e:	d1bd      	bne.n	80066bc <_printf_float+0x34c>
 8006740:	e674      	b.n	800642c <_printf_float+0xbc>
 8006742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006744:	0038      	movs	r0, r7
 8006746:	18ea      	adds	r2, r5, r3
 8006748:	9909      	ldr	r1, [sp, #36]	; 0x24
 800674a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800674c:	47b0      	blx	r6
 800674e:	1c43      	adds	r3, r0, #1
 8006750:	d1c0      	bne.n	80066d4 <_printf_float+0x364>
 8006752:	e66b      	b.n	800642c <_printf_float+0xbc>
 8006754:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006756:	2b01      	cmp	r3, #1
 8006758:	dc02      	bgt.n	8006760 <_printf_float+0x3f0>
 800675a:	2301      	movs	r3, #1
 800675c:	421a      	tst	r2, r3
 800675e:	d034      	beq.n	80067ca <_printf_float+0x45a>
 8006760:	2301      	movs	r3, #1
 8006762:	002a      	movs	r2, r5
 8006764:	0038      	movs	r0, r7
 8006766:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006768:	47b0      	blx	r6
 800676a:	1c43      	adds	r3, r0, #1
 800676c:	d100      	bne.n	8006770 <_printf_float+0x400>
 800676e:	e65d      	b.n	800642c <_printf_float+0xbc>
 8006770:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006772:	0038      	movs	r0, r7
 8006774:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006776:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006778:	47b0      	blx	r6
 800677a:	1c43      	adds	r3, r0, #1
 800677c:	d100      	bne.n	8006780 <_printf_float+0x410>
 800677e:	e655      	b.n	800642c <_printf_float+0xbc>
 8006780:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006782:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006784:	2200      	movs	r2, #0
 8006786:	2300      	movs	r3, #0
 8006788:	f7f9 fe60 	bl	800044c <__aeabi_dcmpeq>
 800678c:	2800      	cmp	r0, #0
 800678e:	d11a      	bne.n	80067c6 <_printf_float+0x456>
 8006790:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006792:	1c6a      	adds	r2, r5, #1
 8006794:	3b01      	subs	r3, #1
 8006796:	0038      	movs	r0, r7
 8006798:	9909      	ldr	r1, [sp, #36]	; 0x24
 800679a:	47b0      	blx	r6
 800679c:	1c43      	adds	r3, r0, #1
 800679e:	d10e      	bne.n	80067be <_printf_float+0x44e>
 80067a0:	e644      	b.n	800642c <_printf_float+0xbc>
 80067a2:	0022      	movs	r2, r4
 80067a4:	2301      	movs	r3, #1
 80067a6:	0038      	movs	r0, r7
 80067a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067aa:	321a      	adds	r2, #26
 80067ac:	47b0      	blx	r6
 80067ae:	1c43      	adds	r3, r0, #1
 80067b0:	d100      	bne.n	80067b4 <_printf_float+0x444>
 80067b2:	e63b      	b.n	800642c <_printf_float+0xbc>
 80067b4:	3501      	adds	r5, #1
 80067b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067b8:	3b01      	subs	r3, #1
 80067ba:	42ab      	cmp	r3, r5
 80067bc:	dcf1      	bgt.n	80067a2 <_printf_float+0x432>
 80067be:	0022      	movs	r2, r4
 80067c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067c2:	3250      	adds	r2, #80	; 0x50
 80067c4:	e6da      	b.n	800657c <_printf_float+0x20c>
 80067c6:	2500      	movs	r5, #0
 80067c8:	e7f5      	b.n	80067b6 <_printf_float+0x446>
 80067ca:	002a      	movs	r2, r5
 80067cc:	e7e3      	b.n	8006796 <_printf_float+0x426>
 80067ce:	0022      	movs	r2, r4
 80067d0:	2301      	movs	r3, #1
 80067d2:	0038      	movs	r0, r7
 80067d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067d6:	3219      	adds	r2, #25
 80067d8:	47b0      	blx	r6
 80067da:	1c43      	adds	r3, r0, #1
 80067dc:	d100      	bne.n	80067e0 <_printf_float+0x470>
 80067de:	e625      	b.n	800642c <_printf_float+0xbc>
 80067e0:	3501      	adds	r5, #1
 80067e2:	68e3      	ldr	r3, [r4, #12]
 80067e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80067e6:	1a9b      	subs	r3, r3, r2
 80067e8:	42ab      	cmp	r3, r5
 80067ea:	dcf0      	bgt.n	80067ce <_printf_float+0x45e>
 80067ec:	e6f8      	b.n	80065e0 <_printf_float+0x270>
 80067ee:	2500      	movs	r5, #0
 80067f0:	e7f7      	b.n	80067e2 <_printf_float+0x472>
 80067f2:	46c0      	nop			; (mov r8, r8)

080067f4 <_printf_common>:
 80067f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067f6:	0015      	movs	r5, r2
 80067f8:	9301      	str	r3, [sp, #4]
 80067fa:	688a      	ldr	r2, [r1, #8]
 80067fc:	690b      	ldr	r3, [r1, #16]
 80067fe:	000c      	movs	r4, r1
 8006800:	9000      	str	r0, [sp, #0]
 8006802:	4293      	cmp	r3, r2
 8006804:	da00      	bge.n	8006808 <_printf_common+0x14>
 8006806:	0013      	movs	r3, r2
 8006808:	0022      	movs	r2, r4
 800680a:	602b      	str	r3, [r5, #0]
 800680c:	3243      	adds	r2, #67	; 0x43
 800680e:	7812      	ldrb	r2, [r2, #0]
 8006810:	2a00      	cmp	r2, #0
 8006812:	d001      	beq.n	8006818 <_printf_common+0x24>
 8006814:	3301      	adds	r3, #1
 8006816:	602b      	str	r3, [r5, #0]
 8006818:	6823      	ldr	r3, [r4, #0]
 800681a:	069b      	lsls	r3, r3, #26
 800681c:	d502      	bpl.n	8006824 <_printf_common+0x30>
 800681e:	682b      	ldr	r3, [r5, #0]
 8006820:	3302      	adds	r3, #2
 8006822:	602b      	str	r3, [r5, #0]
 8006824:	6822      	ldr	r2, [r4, #0]
 8006826:	2306      	movs	r3, #6
 8006828:	0017      	movs	r7, r2
 800682a:	401f      	ands	r7, r3
 800682c:	421a      	tst	r2, r3
 800682e:	d027      	beq.n	8006880 <_printf_common+0x8c>
 8006830:	0023      	movs	r3, r4
 8006832:	3343      	adds	r3, #67	; 0x43
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	1e5a      	subs	r2, r3, #1
 8006838:	4193      	sbcs	r3, r2
 800683a:	6822      	ldr	r2, [r4, #0]
 800683c:	0692      	lsls	r2, r2, #26
 800683e:	d430      	bmi.n	80068a2 <_printf_common+0xae>
 8006840:	0022      	movs	r2, r4
 8006842:	9901      	ldr	r1, [sp, #4]
 8006844:	9800      	ldr	r0, [sp, #0]
 8006846:	9e08      	ldr	r6, [sp, #32]
 8006848:	3243      	adds	r2, #67	; 0x43
 800684a:	47b0      	blx	r6
 800684c:	1c43      	adds	r3, r0, #1
 800684e:	d025      	beq.n	800689c <_printf_common+0xa8>
 8006850:	2306      	movs	r3, #6
 8006852:	6820      	ldr	r0, [r4, #0]
 8006854:	682a      	ldr	r2, [r5, #0]
 8006856:	68e1      	ldr	r1, [r4, #12]
 8006858:	2500      	movs	r5, #0
 800685a:	4003      	ands	r3, r0
 800685c:	2b04      	cmp	r3, #4
 800685e:	d103      	bne.n	8006868 <_printf_common+0x74>
 8006860:	1a8d      	subs	r5, r1, r2
 8006862:	43eb      	mvns	r3, r5
 8006864:	17db      	asrs	r3, r3, #31
 8006866:	401d      	ands	r5, r3
 8006868:	68a3      	ldr	r3, [r4, #8]
 800686a:	6922      	ldr	r2, [r4, #16]
 800686c:	4293      	cmp	r3, r2
 800686e:	dd01      	ble.n	8006874 <_printf_common+0x80>
 8006870:	1a9b      	subs	r3, r3, r2
 8006872:	18ed      	adds	r5, r5, r3
 8006874:	2700      	movs	r7, #0
 8006876:	42bd      	cmp	r5, r7
 8006878:	d120      	bne.n	80068bc <_printf_common+0xc8>
 800687a:	2000      	movs	r0, #0
 800687c:	e010      	b.n	80068a0 <_printf_common+0xac>
 800687e:	3701      	adds	r7, #1
 8006880:	68e3      	ldr	r3, [r4, #12]
 8006882:	682a      	ldr	r2, [r5, #0]
 8006884:	1a9b      	subs	r3, r3, r2
 8006886:	42bb      	cmp	r3, r7
 8006888:	ddd2      	ble.n	8006830 <_printf_common+0x3c>
 800688a:	0022      	movs	r2, r4
 800688c:	2301      	movs	r3, #1
 800688e:	9901      	ldr	r1, [sp, #4]
 8006890:	9800      	ldr	r0, [sp, #0]
 8006892:	9e08      	ldr	r6, [sp, #32]
 8006894:	3219      	adds	r2, #25
 8006896:	47b0      	blx	r6
 8006898:	1c43      	adds	r3, r0, #1
 800689a:	d1f0      	bne.n	800687e <_printf_common+0x8a>
 800689c:	2001      	movs	r0, #1
 800689e:	4240      	negs	r0, r0
 80068a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80068a2:	2030      	movs	r0, #48	; 0x30
 80068a4:	18e1      	adds	r1, r4, r3
 80068a6:	3143      	adds	r1, #67	; 0x43
 80068a8:	7008      	strb	r0, [r1, #0]
 80068aa:	0021      	movs	r1, r4
 80068ac:	1c5a      	adds	r2, r3, #1
 80068ae:	3145      	adds	r1, #69	; 0x45
 80068b0:	7809      	ldrb	r1, [r1, #0]
 80068b2:	18a2      	adds	r2, r4, r2
 80068b4:	3243      	adds	r2, #67	; 0x43
 80068b6:	3302      	adds	r3, #2
 80068b8:	7011      	strb	r1, [r2, #0]
 80068ba:	e7c1      	b.n	8006840 <_printf_common+0x4c>
 80068bc:	0022      	movs	r2, r4
 80068be:	2301      	movs	r3, #1
 80068c0:	9901      	ldr	r1, [sp, #4]
 80068c2:	9800      	ldr	r0, [sp, #0]
 80068c4:	9e08      	ldr	r6, [sp, #32]
 80068c6:	321a      	adds	r2, #26
 80068c8:	47b0      	blx	r6
 80068ca:	1c43      	adds	r3, r0, #1
 80068cc:	d0e6      	beq.n	800689c <_printf_common+0xa8>
 80068ce:	3701      	adds	r7, #1
 80068d0:	e7d1      	b.n	8006876 <_printf_common+0x82>
	...

080068d4 <_printf_i>:
 80068d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068d6:	b08b      	sub	sp, #44	; 0x2c
 80068d8:	9206      	str	r2, [sp, #24]
 80068da:	000a      	movs	r2, r1
 80068dc:	3243      	adds	r2, #67	; 0x43
 80068de:	9307      	str	r3, [sp, #28]
 80068e0:	9005      	str	r0, [sp, #20]
 80068e2:	9204      	str	r2, [sp, #16]
 80068e4:	7e0a      	ldrb	r2, [r1, #24]
 80068e6:	000c      	movs	r4, r1
 80068e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80068ea:	2a78      	cmp	r2, #120	; 0x78
 80068ec:	d807      	bhi.n	80068fe <_printf_i+0x2a>
 80068ee:	2a62      	cmp	r2, #98	; 0x62
 80068f0:	d809      	bhi.n	8006906 <_printf_i+0x32>
 80068f2:	2a00      	cmp	r2, #0
 80068f4:	d100      	bne.n	80068f8 <_printf_i+0x24>
 80068f6:	e0c1      	b.n	8006a7c <_printf_i+0x1a8>
 80068f8:	2a58      	cmp	r2, #88	; 0x58
 80068fa:	d100      	bne.n	80068fe <_printf_i+0x2a>
 80068fc:	e08c      	b.n	8006a18 <_printf_i+0x144>
 80068fe:	0026      	movs	r6, r4
 8006900:	3642      	adds	r6, #66	; 0x42
 8006902:	7032      	strb	r2, [r6, #0]
 8006904:	e022      	b.n	800694c <_printf_i+0x78>
 8006906:	0010      	movs	r0, r2
 8006908:	3863      	subs	r0, #99	; 0x63
 800690a:	2815      	cmp	r0, #21
 800690c:	d8f7      	bhi.n	80068fe <_printf_i+0x2a>
 800690e:	f7f9 fc0d 	bl	800012c <__gnu_thumb1_case_shi>
 8006912:	0016      	.short	0x0016
 8006914:	fff6001f 	.word	0xfff6001f
 8006918:	fff6fff6 	.word	0xfff6fff6
 800691c:	001ffff6 	.word	0x001ffff6
 8006920:	fff6fff6 	.word	0xfff6fff6
 8006924:	fff6fff6 	.word	0xfff6fff6
 8006928:	003600a8 	.word	0x003600a8
 800692c:	fff6009a 	.word	0xfff6009a
 8006930:	00b9fff6 	.word	0x00b9fff6
 8006934:	0036fff6 	.word	0x0036fff6
 8006938:	fff6fff6 	.word	0xfff6fff6
 800693c:	009e      	.short	0x009e
 800693e:	0026      	movs	r6, r4
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	3642      	adds	r6, #66	; 0x42
 8006944:	1d11      	adds	r1, r2, #4
 8006946:	6019      	str	r1, [r3, #0]
 8006948:	6813      	ldr	r3, [r2, #0]
 800694a:	7033      	strb	r3, [r6, #0]
 800694c:	2301      	movs	r3, #1
 800694e:	e0a7      	b.n	8006aa0 <_printf_i+0x1cc>
 8006950:	6808      	ldr	r0, [r1, #0]
 8006952:	6819      	ldr	r1, [r3, #0]
 8006954:	1d0a      	adds	r2, r1, #4
 8006956:	0605      	lsls	r5, r0, #24
 8006958:	d50b      	bpl.n	8006972 <_printf_i+0x9e>
 800695a:	680d      	ldr	r5, [r1, #0]
 800695c:	601a      	str	r2, [r3, #0]
 800695e:	2d00      	cmp	r5, #0
 8006960:	da03      	bge.n	800696a <_printf_i+0x96>
 8006962:	232d      	movs	r3, #45	; 0x2d
 8006964:	9a04      	ldr	r2, [sp, #16]
 8006966:	426d      	negs	r5, r5
 8006968:	7013      	strb	r3, [r2, #0]
 800696a:	4b61      	ldr	r3, [pc, #388]	; (8006af0 <_printf_i+0x21c>)
 800696c:	270a      	movs	r7, #10
 800696e:	9303      	str	r3, [sp, #12]
 8006970:	e01b      	b.n	80069aa <_printf_i+0xd6>
 8006972:	680d      	ldr	r5, [r1, #0]
 8006974:	601a      	str	r2, [r3, #0]
 8006976:	0641      	lsls	r1, r0, #25
 8006978:	d5f1      	bpl.n	800695e <_printf_i+0x8a>
 800697a:	b22d      	sxth	r5, r5
 800697c:	e7ef      	b.n	800695e <_printf_i+0x8a>
 800697e:	680d      	ldr	r5, [r1, #0]
 8006980:	6819      	ldr	r1, [r3, #0]
 8006982:	1d08      	adds	r0, r1, #4
 8006984:	6018      	str	r0, [r3, #0]
 8006986:	062e      	lsls	r6, r5, #24
 8006988:	d501      	bpl.n	800698e <_printf_i+0xba>
 800698a:	680d      	ldr	r5, [r1, #0]
 800698c:	e003      	b.n	8006996 <_printf_i+0xc2>
 800698e:	066d      	lsls	r5, r5, #25
 8006990:	d5fb      	bpl.n	800698a <_printf_i+0xb6>
 8006992:	680d      	ldr	r5, [r1, #0]
 8006994:	b2ad      	uxth	r5, r5
 8006996:	4b56      	ldr	r3, [pc, #344]	; (8006af0 <_printf_i+0x21c>)
 8006998:	2708      	movs	r7, #8
 800699a:	9303      	str	r3, [sp, #12]
 800699c:	2a6f      	cmp	r2, #111	; 0x6f
 800699e:	d000      	beq.n	80069a2 <_printf_i+0xce>
 80069a0:	3702      	adds	r7, #2
 80069a2:	0023      	movs	r3, r4
 80069a4:	2200      	movs	r2, #0
 80069a6:	3343      	adds	r3, #67	; 0x43
 80069a8:	701a      	strb	r2, [r3, #0]
 80069aa:	6863      	ldr	r3, [r4, #4]
 80069ac:	60a3      	str	r3, [r4, #8]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	db03      	blt.n	80069ba <_printf_i+0xe6>
 80069b2:	2204      	movs	r2, #4
 80069b4:	6821      	ldr	r1, [r4, #0]
 80069b6:	4391      	bics	r1, r2
 80069b8:	6021      	str	r1, [r4, #0]
 80069ba:	2d00      	cmp	r5, #0
 80069bc:	d102      	bne.n	80069c4 <_printf_i+0xf0>
 80069be:	9e04      	ldr	r6, [sp, #16]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00c      	beq.n	80069de <_printf_i+0x10a>
 80069c4:	9e04      	ldr	r6, [sp, #16]
 80069c6:	0028      	movs	r0, r5
 80069c8:	0039      	movs	r1, r7
 80069ca:	f7f9 fc3f 	bl	800024c <__aeabi_uidivmod>
 80069ce:	9b03      	ldr	r3, [sp, #12]
 80069d0:	3e01      	subs	r6, #1
 80069d2:	5c5b      	ldrb	r3, [r3, r1]
 80069d4:	7033      	strb	r3, [r6, #0]
 80069d6:	002b      	movs	r3, r5
 80069d8:	0005      	movs	r5, r0
 80069da:	429f      	cmp	r7, r3
 80069dc:	d9f3      	bls.n	80069c6 <_printf_i+0xf2>
 80069de:	2f08      	cmp	r7, #8
 80069e0:	d109      	bne.n	80069f6 <_printf_i+0x122>
 80069e2:	6823      	ldr	r3, [r4, #0]
 80069e4:	07db      	lsls	r3, r3, #31
 80069e6:	d506      	bpl.n	80069f6 <_printf_i+0x122>
 80069e8:	6863      	ldr	r3, [r4, #4]
 80069ea:	6922      	ldr	r2, [r4, #16]
 80069ec:	4293      	cmp	r3, r2
 80069ee:	dc02      	bgt.n	80069f6 <_printf_i+0x122>
 80069f0:	2330      	movs	r3, #48	; 0x30
 80069f2:	3e01      	subs	r6, #1
 80069f4:	7033      	strb	r3, [r6, #0]
 80069f6:	9b04      	ldr	r3, [sp, #16]
 80069f8:	1b9b      	subs	r3, r3, r6
 80069fa:	6123      	str	r3, [r4, #16]
 80069fc:	9b07      	ldr	r3, [sp, #28]
 80069fe:	0021      	movs	r1, r4
 8006a00:	9300      	str	r3, [sp, #0]
 8006a02:	9805      	ldr	r0, [sp, #20]
 8006a04:	9b06      	ldr	r3, [sp, #24]
 8006a06:	aa09      	add	r2, sp, #36	; 0x24
 8006a08:	f7ff fef4 	bl	80067f4 <_printf_common>
 8006a0c:	1c43      	adds	r3, r0, #1
 8006a0e:	d14c      	bne.n	8006aaa <_printf_i+0x1d6>
 8006a10:	2001      	movs	r0, #1
 8006a12:	4240      	negs	r0, r0
 8006a14:	b00b      	add	sp, #44	; 0x2c
 8006a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a18:	3145      	adds	r1, #69	; 0x45
 8006a1a:	700a      	strb	r2, [r1, #0]
 8006a1c:	4a34      	ldr	r2, [pc, #208]	; (8006af0 <_printf_i+0x21c>)
 8006a1e:	9203      	str	r2, [sp, #12]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	6821      	ldr	r1, [r4, #0]
 8006a24:	ca20      	ldmia	r2!, {r5}
 8006a26:	601a      	str	r2, [r3, #0]
 8006a28:	0608      	lsls	r0, r1, #24
 8006a2a:	d516      	bpl.n	8006a5a <_printf_i+0x186>
 8006a2c:	07cb      	lsls	r3, r1, #31
 8006a2e:	d502      	bpl.n	8006a36 <_printf_i+0x162>
 8006a30:	2320      	movs	r3, #32
 8006a32:	4319      	orrs	r1, r3
 8006a34:	6021      	str	r1, [r4, #0]
 8006a36:	2710      	movs	r7, #16
 8006a38:	2d00      	cmp	r5, #0
 8006a3a:	d1b2      	bne.n	80069a2 <_printf_i+0xce>
 8006a3c:	2320      	movs	r3, #32
 8006a3e:	6822      	ldr	r2, [r4, #0]
 8006a40:	439a      	bics	r2, r3
 8006a42:	6022      	str	r2, [r4, #0]
 8006a44:	e7ad      	b.n	80069a2 <_printf_i+0xce>
 8006a46:	2220      	movs	r2, #32
 8006a48:	6809      	ldr	r1, [r1, #0]
 8006a4a:	430a      	orrs	r2, r1
 8006a4c:	6022      	str	r2, [r4, #0]
 8006a4e:	0022      	movs	r2, r4
 8006a50:	2178      	movs	r1, #120	; 0x78
 8006a52:	3245      	adds	r2, #69	; 0x45
 8006a54:	7011      	strb	r1, [r2, #0]
 8006a56:	4a27      	ldr	r2, [pc, #156]	; (8006af4 <_printf_i+0x220>)
 8006a58:	e7e1      	b.n	8006a1e <_printf_i+0x14a>
 8006a5a:	0648      	lsls	r0, r1, #25
 8006a5c:	d5e6      	bpl.n	8006a2c <_printf_i+0x158>
 8006a5e:	b2ad      	uxth	r5, r5
 8006a60:	e7e4      	b.n	8006a2c <_printf_i+0x158>
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	680d      	ldr	r5, [r1, #0]
 8006a66:	1d10      	adds	r0, r2, #4
 8006a68:	6949      	ldr	r1, [r1, #20]
 8006a6a:	6018      	str	r0, [r3, #0]
 8006a6c:	6813      	ldr	r3, [r2, #0]
 8006a6e:	062e      	lsls	r6, r5, #24
 8006a70:	d501      	bpl.n	8006a76 <_printf_i+0x1a2>
 8006a72:	6019      	str	r1, [r3, #0]
 8006a74:	e002      	b.n	8006a7c <_printf_i+0x1a8>
 8006a76:	066d      	lsls	r5, r5, #25
 8006a78:	d5fb      	bpl.n	8006a72 <_printf_i+0x19e>
 8006a7a:	8019      	strh	r1, [r3, #0]
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	9e04      	ldr	r6, [sp, #16]
 8006a80:	6123      	str	r3, [r4, #16]
 8006a82:	e7bb      	b.n	80069fc <_printf_i+0x128>
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	1d11      	adds	r1, r2, #4
 8006a88:	6019      	str	r1, [r3, #0]
 8006a8a:	6816      	ldr	r6, [r2, #0]
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	0030      	movs	r0, r6
 8006a90:	6862      	ldr	r2, [r4, #4]
 8006a92:	f002 fd35 	bl	8009500 <memchr>
 8006a96:	2800      	cmp	r0, #0
 8006a98:	d001      	beq.n	8006a9e <_printf_i+0x1ca>
 8006a9a:	1b80      	subs	r0, r0, r6
 8006a9c:	6060      	str	r0, [r4, #4]
 8006a9e:	6863      	ldr	r3, [r4, #4]
 8006aa0:	6123      	str	r3, [r4, #16]
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	9a04      	ldr	r2, [sp, #16]
 8006aa6:	7013      	strb	r3, [r2, #0]
 8006aa8:	e7a8      	b.n	80069fc <_printf_i+0x128>
 8006aaa:	6923      	ldr	r3, [r4, #16]
 8006aac:	0032      	movs	r2, r6
 8006aae:	9906      	ldr	r1, [sp, #24]
 8006ab0:	9805      	ldr	r0, [sp, #20]
 8006ab2:	9d07      	ldr	r5, [sp, #28]
 8006ab4:	47a8      	blx	r5
 8006ab6:	1c43      	adds	r3, r0, #1
 8006ab8:	d0aa      	beq.n	8006a10 <_printf_i+0x13c>
 8006aba:	6823      	ldr	r3, [r4, #0]
 8006abc:	079b      	lsls	r3, r3, #30
 8006abe:	d415      	bmi.n	8006aec <_printf_i+0x218>
 8006ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ac2:	68e0      	ldr	r0, [r4, #12]
 8006ac4:	4298      	cmp	r0, r3
 8006ac6:	daa5      	bge.n	8006a14 <_printf_i+0x140>
 8006ac8:	0018      	movs	r0, r3
 8006aca:	e7a3      	b.n	8006a14 <_printf_i+0x140>
 8006acc:	0022      	movs	r2, r4
 8006ace:	2301      	movs	r3, #1
 8006ad0:	9906      	ldr	r1, [sp, #24]
 8006ad2:	9805      	ldr	r0, [sp, #20]
 8006ad4:	9e07      	ldr	r6, [sp, #28]
 8006ad6:	3219      	adds	r2, #25
 8006ad8:	47b0      	blx	r6
 8006ada:	1c43      	adds	r3, r0, #1
 8006adc:	d098      	beq.n	8006a10 <_printf_i+0x13c>
 8006ade:	3501      	adds	r5, #1
 8006ae0:	68e3      	ldr	r3, [r4, #12]
 8006ae2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ae4:	1a9b      	subs	r3, r3, r2
 8006ae6:	42ab      	cmp	r3, r5
 8006ae8:	dcf0      	bgt.n	8006acc <_printf_i+0x1f8>
 8006aea:	e7e9      	b.n	8006ac0 <_printf_i+0x1ec>
 8006aec:	2500      	movs	r5, #0
 8006aee:	e7f7      	b.n	8006ae0 <_printf_i+0x20c>
 8006af0:	0800abca 	.word	0x0800abca
 8006af4:	0800abdb 	.word	0x0800abdb

08006af8 <_scanf_float>:
 8006af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006afa:	b08b      	sub	sp, #44	; 0x2c
 8006afc:	0015      	movs	r5, r2
 8006afe:	9001      	str	r0, [sp, #4]
 8006b00:	22ae      	movs	r2, #174	; 0xae
 8006b02:	2000      	movs	r0, #0
 8006b04:	9306      	str	r3, [sp, #24]
 8006b06:	688b      	ldr	r3, [r1, #8]
 8006b08:	000e      	movs	r6, r1
 8006b0a:	1e59      	subs	r1, r3, #1
 8006b0c:	0052      	lsls	r2, r2, #1
 8006b0e:	9005      	str	r0, [sp, #20]
 8006b10:	4291      	cmp	r1, r2
 8006b12:	d905      	bls.n	8006b20 <_scanf_float+0x28>
 8006b14:	3b5e      	subs	r3, #94	; 0x5e
 8006b16:	3bff      	subs	r3, #255	; 0xff
 8006b18:	9305      	str	r3, [sp, #20]
 8006b1a:	235e      	movs	r3, #94	; 0x5e
 8006b1c:	33ff      	adds	r3, #255	; 0xff
 8006b1e:	60b3      	str	r3, [r6, #8]
 8006b20:	23f0      	movs	r3, #240	; 0xf0
 8006b22:	6832      	ldr	r2, [r6, #0]
 8006b24:	00db      	lsls	r3, r3, #3
 8006b26:	4313      	orrs	r3, r2
 8006b28:	6033      	str	r3, [r6, #0]
 8006b2a:	0033      	movs	r3, r6
 8006b2c:	2400      	movs	r4, #0
 8006b2e:	331c      	adds	r3, #28
 8006b30:	001f      	movs	r7, r3
 8006b32:	9303      	str	r3, [sp, #12]
 8006b34:	9402      	str	r4, [sp, #8]
 8006b36:	9408      	str	r4, [sp, #32]
 8006b38:	9407      	str	r4, [sp, #28]
 8006b3a:	9400      	str	r4, [sp, #0]
 8006b3c:	9404      	str	r4, [sp, #16]
 8006b3e:	68b2      	ldr	r2, [r6, #8]
 8006b40:	2a00      	cmp	r2, #0
 8006b42:	d00a      	beq.n	8006b5a <_scanf_float+0x62>
 8006b44:	682b      	ldr	r3, [r5, #0]
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	2b4e      	cmp	r3, #78	; 0x4e
 8006b4a:	d844      	bhi.n	8006bd6 <_scanf_float+0xde>
 8006b4c:	0018      	movs	r0, r3
 8006b4e:	2b40      	cmp	r3, #64	; 0x40
 8006b50:	d82c      	bhi.n	8006bac <_scanf_float+0xb4>
 8006b52:	382b      	subs	r0, #43	; 0x2b
 8006b54:	b2c1      	uxtb	r1, r0
 8006b56:	290e      	cmp	r1, #14
 8006b58:	d92a      	bls.n	8006bb0 <_scanf_float+0xb8>
 8006b5a:	9b00      	ldr	r3, [sp, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d003      	beq.n	8006b68 <_scanf_float+0x70>
 8006b60:	6832      	ldr	r2, [r6, #0]
 8006b62:	4ba4      	ldr	r3, [pc, #656]	; (8006df4 <_scanf_float+0x2fc>)
 8006b64:	4013      	ands	r3, r2
 8006b66:	6033      	str	r3, [r6, #0]
 8006b68:	9b02      	ldr	r3, [sp, #8]
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d900      	bls.n	8006b72 <_scanf_float+0x7a>
 8006b70:	e0f9      	b.n	8006d66 <_scanf_float+0x26e>
 8006b72:	24be      	movs	r4, #190	; 0xbe
 8006b74:	0064      	lsls	r4, r4, #1
 8006b76:	9b03      	ldr	r3, [sp, #12]
 8006b78:	429f      	cmp	r7, r3
 8006b7a:	d900      	bls.n	8006b7e <_scanf_float+0x86>
 8006b7c:	e0e9      	b.n	8006d52 <_scanf_float+0x25a>
 8006b7e:	2301      	movs	r3, #1
 8006b80:	9302      	str	r3, [sp, #8]
 8006b82:	e185      	b.n	8006e90 <_scanf_float+0x398>
 8006b84:	0018      	movs	r0, r3
 8006b86:	3861      	subs	r0, #97	; 0x61
 8006b88:	280d      	cmp	r0, #13
 8006b8a:	d8e6      	bhi.n	8006b5a <_scanf_float+0x62>
 8006b8c:	f7f9 face 	bl	800012c <__gnu_thumb1_case_shi>
 8006b90:	ffe50083 	.word	0xffe50083
 8006b94:	ffe5ffe5 	.word	0xffe5ffe5
 8006b98:	00a200b6 	.word	0x00a200b6
 8006b9c:	ffe5ffe5 	.word	0xffe5ffe5
 8006ba0:	ffe50089 	.word	0xffe50089
 8006ba4:	ffe5ffe5 	.word	0xffe5ffe5
 8006ba8:	0065ffe5 	.word	0x0065ffe5
 8006bac:	3841      	subs	r0, #65	; 0x41
 8006bae:	e7eb      	b.n	8006b88 <_scanf_float+0x90>
 8006bb0:	280e      	cmp	r0, #14
 8006bb2:	d8d2      	bhi.n	8006b5a <_scanf_float+0x62>
 8006bb4:	f7f9 faba 	bl	800012c <__gnu_thumb1_case_shi>
 8006bb8:	ffd1004b 	.word	0xffd1004b
 8006bbc:	0098004b 	.word	0x0098004b
 8006bc0:	0020ffd1 	.word	0x0020ffd1
 8006bc4:	00400040 	.word	0x00400040
 8006bc8:	00400040 	.word	0x00400040
 8006bcc:	00400040 	.word	0x00400040
 8006bd0:	00400040 	.word	0x00400040
 8006bd4:	0040      	.short	0x0040
 8006bd6:	2b6e      	cmp	r3, #110	; 0x6e
 8006bd8:	d809      	bhi.n	8006bee <_scanf_float+0xf6>
 8006bda:	2b60      	cmp	r3, #96	; 0x60
 8006bdc:	d8d2      	bhi.n	8006b84 <_scanf_float+0x8c>
 8006bde:	2b54      	cmp	r3, #84	; 0x54
 8006be0:	d07d      	beq.n	8006cde <_scanf_float+0x1e6>
 8006be2:	2b59      	cmp	r3, #89	; 0x59
 8006be4:	d1b9      	bne.n	8006b5a <_scanf_float+0x62>
 8006be6:	2c07      	cmp	r4, #7
 8006be8:	d1b7      	bne.n	8006b5a <_scanf_float+0x62>
 8006bea:	2408      	movs	r4, #8
 8006bec:	e02c      	b.n	8006c48 <_scanf_float+0x150>
 8006bee:	2b74      	cmp	r3, #116	; 0x74
 8006bf0:	d075      	beq.n	8006cde <_scanf_float+0x1e6>
 8006bf2:	2b79      	cmp	r3, #121	; 0x79
 8006bf4:	d0f7      	beq.n	8006be6 <_scanf_float+0xee>
 8006bf6:	e7b0      	b.n	8006b5a <_scanf_float+0x62>
 8006bf8:	6831      	ldr	r1, [r6, #0]
 8006bfa:	05c8      	lsls	r0, r1, #23
 8006bfc:	d51c      	bpl.n	8006c38 <_scanf_float+0x140>
 8006bfe:	2380      	movs	r3, #128	; 0x80
 8006c00:	4399      	bics	r1, r3
 8006c02:	9b00      	ldr	r3, [sp, #0]
 8006c04:	6031      	str	r1, [r6, #0]
 8006c06:	3301      	adds	r3, #1
 8006c08:	9300      	str	r3, [sp, #0]
 8006c0a:	9b05      	ldr	r3, [sp, #20]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d003      	beq.n	8006c18 <_scanf_float+0x120>
 8006c10:	3b01      	subs	r3, #1
 8006c12:	3201      	adds	r2, #1
 8006c14:	9305      	str	r3, [sp, #20]
 8006c16:	60b2      	str	r2, [r6, #8]
 8006c18:	68b3      	ldr	r3, [r6, #8]
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	60b3      	str	r3, [r6, #8]
 8006c1e:	6933      	ldr	r3, [r6, #16]
 8006c20:	3301      	adds	r3, #1
 8006c22:	6133      	str	r3, [r6, #16]
 8006c24:	686b      	ldr	r3, [r5, #4]
 8006c26:	3b01      	subs	r3, #1
 8006c28:	606b      	str	r3, [r5, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	dc00      	bgt.n	8006c30 <_scanf_float+0x138>
 8006c2e:	e086      	b.n	8006d3e <_scanf_float+0x246>
 8006c30:	682b      	ldr	r3, [r5, #0]
 8006c32:	3301      	adds	r3, #1
 8006c34:	602b      	str	r3, [r5, #0]
 8006c36:	e782      	b.n	8006b3e <_scanf_float+0x46>
 8006c38:	9a02      	ldr	r2, [sp, #8]
 8006c3a:	1912      	adds	r2, r2, r4
 8006c3c:	2a00      	cmp	r2, #0
 8006c3e:	d18c      	bne.n	8006b5a <_scanf_float+0x62>
 8006c40:	4a6d      	ldr	r2, [pc, #436]	; (8006df8 <_scanf_float+0x300>)
 8006c42:	6831      	ldr	r1, [r6, #0]
 8006c44:	400a      	ands	r2, r1
 8006c46:	6032      	str	r2, [r6, #0]
 8006c48:	703b      	strb	r3, [r7, #0]
 8006c4a:	3701      	adds	r7, #1
 8006c4c:	e7e4      	b.n	8006c18 <_scanf_float+0x120>
 8006c4e:	2180      	movs	r1, #128	; 0x80
 8006c50:	6832      	ldr	r2, [r6, #0]
 8006c52:	420a      	tst	r2, r1
 8006c54:	d081      	beq.n	8006b5a <_scanf_float+0x62>
 8006c56:	438a      	bics	r2, r1
 8006c58:	e7f5      	b.n	8006c46 <_scanf_float+0x14e>
 8006c5a:	9a02      	ldr	r2, [sp, #8]
 8006c5c:	2a00      	cmp	r2, #0
 8006c5e:	d10f      	bne.n	8006c80 <_scanf_float+0x188>
 8006c60:	9a00      	ldr	r2, [sp, #0]
 8006c62:	2a00      	cmp	r2, #0
 8006c64:	d10f      	bne.n	8006c86 <_scanf_float+0x18e>
 8006c66:	6832      	ldr	r2, [r6, #0]
 8006c68:	21e0      	movs	r1, #224	; 0xe0
 8006c6a:	0010      	movs	r0, r2
 8006c6c:	00c9      	lsls	r1, r1, #3
 8006c6e:	4008      	ands	r0, r1
 8006c70:	4288      	cmp	r0, r1
 8006c72:	d108      	bne.n	8006c86 <_scanf_float+0x18e>
 8006c74:	4961      	ldr	r1, [pc, #388]	; (8006dfc <_scanf_float+0x304>)
 8006c76:	400a      	ands	r2, r1
 8006c78:	6032      	str	r2, [r6, #0]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	9202      	str	r2, [sp, #8]
 8006c7e:	e7e3      	b.n	8006c48 <_scanf_float+0x150>
 8006c80:	9a02      	ldr	r2, [sp, #8]
 8006c82:	2a02      	cmp	r2, #2
 8006c84:	d059      	beq.n	8006d3a <_scanf_float+0x242>
 8006c86:	2c01      	cmp	r4, #1
 8006c88:	d002      	beq.n	8006c90 <_scanf_float+0x198>
 8006c8a:	2c04      	cmp	r4, #4
 8006c8c:	d000      	beq.n	8006c90 <_scanf_float+0x198>
 8006c8e:	e764      	b.n	8006b5a <_scanf_float+0x62>
 8006c90:	3401      	adds	r4, #1
 8006c92:	b2e4      	uxtb	r4, r4
 8006c94:	e7d8      	b.n	8006c48 <_scanf_float+0x150>
 8006c96:	9a02      	ldr	r2, [sp, #8]
 8006c98:	2a01      	cmp	r2, #1
 8006c9a:	d000      	beq.n	8006c9e <_scanf_float+0x1a6>
 8006c9c:	e75d      	b.n	8006b5a <_scanf_float+0x62>
 8006c9e:	2202      	movs	r2, #2
 8006ca0:	e7ec      	b.n	8006c7c <_scanf_float+0x184>
 8006ca2:	2c00      	cmp	r4, #0
 8006ca4:	d110      	bne.n	8006cc8 <_scanf_float+0x1d0>
 8006ca6:	9a00      	ldr	r2, [sp, #0]
 8006ca8:	2a00      	cmp	r2, #0
 8006caa:	d000      	beq.n	8006cae <_scanf_float+0x1b6>
 8006cac:	e758      	b.n	8006b60 <_scanf_float+0x68>
 8006cae:	6832      	ldr	r2, [r6, #0]
 8006cb0:	21e0      	movs	r1, #224	; 0xe0
 8006cb2:	0010      	movs	r0, r2
 8006cb4:	00c9      	lsls	r1, r1, #3
 8006cb6:	4008      	ands	r0, r1
 8006cb8:	4288      	cmp	r0, r1
 8006cba:	d000      	beq.n	8006cbe <_scanf_float+0x1c6>
 8006cbc:	e754      	b.n	8006b68 <_scanf_float+0x70>
 8006cbe:	494f      	ldr	r1, [pc, #316]	; (8006dfc <_scanf_float+0x304>)
 8006cc0:	3401      	adds	r4, #1
 8006cc2:	400a      	ands	r2, r1
 8006cc4:	6032      	str	r2, [r6, #0]
 8006cc6:	e7bf      	b.n	8006c48 <_scanf_float+0x150>
 8006cc8:	21fd      	movs	r1, #253	; 0xfd
 8006cca:	1ee2      	subs	r2, r4, #3
 8006ccc:	420a      	tst	r2, r1
 8006cce:	d000      	beq.n	8006cd2 <_scanf_float+0x1da>
 8006cd0:	e743      	b.n	8006b5a <_scanf_float+0x62>
 8006cd2:	e7dd      	b.n	8006c90 <_scanf_float+0x198>
 8006cd4:	2c02      	cmp	r4, #2
 8006cd6:	d000      	beq.n	8006cda <_scanf_float+0x1e2>
 8006cd8:	e73f      	b.n	8006b5a <_scanf_float+0x62>
 8006cda:	2403      	movs	r4, #3
 8006cdc:	e7b4      	b.n	8006c48 <_scanf_float+0x150>
 8006cde:	2c06      	cmp	r4, #6
 8006ce0:	d000      	beq.n	8006ce4 <_scanf_float+0x1ec>
 8006ce2:	e73a      	b.n	8006b5a <_scanf_float+0x62>
 8006ce4:	2407      	movs	r4, #7
 8006ce6:	e7af      	b.n	8006c48 <_scanf_float+0x150>
 8006ce8:	6832      	ldr	r2, [r6, #0]
 8006cea:	0591      	lsls	r1, r2, #22
 8006cec:	d400      	bmi.n	8006cf0 <_scanf_float+0x1f8>
 8006cee:	e734      	b.n	8006b5a <_scanf_float+0x62>
 8006cf0:	4943      	ldr	r1, [pc, #268]	; (8006e00 <_scanf_float+0x308>)
 8006cf2:	400a      	ands	r2, r1
 8006cf4:	6032      	str	r2, [r6, #0]
 8006cf6:	9a00      	ldr	r2, [sp, #0]
 8006cf8:	9204      	str	r2, [sp, #16]
 8006cfa:	e7a5      	b.n	8006c48 <_scanf_float+0x150>
 8006cfc:	21a0      	movs	r1, #160	; 0xa0
 8006cfe:	2080      	movs	r0, #128	; 0x80
 8006d00:	6832      	ldr	r2, [r6, #0]
 8006d02:	00c9      	lsls	r1, r1, #3
 8006d04:	4011      	ands	r1, r2
 8006d06:	00c0      	lsls	r0, r0, #3
 8006d08:	4281      	cmp	r1, r0
 8006d0a:	d006      	beq.n	8006d1a <_scanf_float+0x222>
 8006d0c:	4202      	tst	r2, r0
 8006d0e:	d100      	bne.n	8006d12 <_scanf_float+0x21a>
 8006d10:	e723      	b.n	8006b5a <_scanf_float+0x62>
 8006d12:	9900      	ldr	r1, [sp, #0]
 8006d14:	2900      	cmp	r1, #0
 8006d16:	d100      	bne.n	8006d1a <_scanf_float+0x222>
 8006d18:	e726      	b.n	8006b68 <_scanf_float+0x70>
 8006d1a:	0591      	lsls	r1, r2, #22
 8006d1c:	d404      	bmi.n	8006d28 <_scanf_float+0x230>
 8006d1e:	9900      	ldr	r1, [sp, #0]
 8006d20:	9804      	ldr	r0, [sp, #16]
 8006d22:	9708      	str	r7, [sp, #32]
 8006d24:	1a09      	subs	r1, r1, r0
 8006d26:	9107      	str	r1, [sp, #28]
 8006d28:	4934      	ldr	r1, [pc, #208]	; (8006dfc <_scanf_float+0x304>)
 8006d2a:	400a      	ands	r2, r1
 8006d2c:	21c0      	movs	r1, #192	; 0xc0
 8006d2e:	0049      	lsls	r1, r1, #1
 8006d30:	430a      	orrs	r2, r1
 8006d32:	6032      	str	r2, [r6, #0]
 8006d34:	2200      	movs	r2, #0
 8006d36:	9200      	str	r2, [sp, #0]
 8006d38:	e786      	b.n	8006c48 <_scanf_float+0x150>
 8006d3a:	2203      	movs	r2, #3
 8006d3c:	e79e      	b.n	8006c7c <_scanf_float+0x184>
 8006d3e:	23c0      	movs	r3, #192	; 0xc0
 8006d40:	005b      	lsls	r3, r3, #1
 8006d42:	0029      	movs	r1, r5
 8006d44:	58f3      	ldr	r3, [r6, r3]
 8006d46:	9801      	ldr	r0, [sp, #4]
 8006d48:	4798      	blx	r3
 8006d4a:	2800      	cmp	r0, #0
 8006d4c:	d100      	bne.n	8006d50 <_scanf_float+0x258>
 8006d4e:	e6f6      	b.n	8006b3e <_scanf_float+0x46>
 8006d50:	e703      	b.n	8006b5a <_scanf_float+0x62>
 8006d52:	3f01      	subs	r7, #1
 8006d54:	5933      	ldr	r3, [r6, r4]
 8006d56:	002a      	movs	r2, r5
 8006d58:	7839      	ldrb	r1, [r7, #0]
 8006d5a:	9801      	ldr	r0, [sp, #4]
 8006d5c:	4798      	blx	r3
 8006d5e:	6933      	ldr	r3, [r6, #16]
 8006d60:	3b01      	subs	r3, #1
 8006d62:	6133      	str	r3, [r6, #16]
 8006d64:	e707      	b.n	8006b76 <_scanf_float+0x7e>
 8006d66:	1e63      	subs	r3, r4, #1
 8006d68:	2b06      	cmp	r3, #6
 8006d6a:	d80e      	bhi.n	8006d8a <_scanf_float+0x292>
 8006d6c:	9702      	str	r7, [sp, #8]
 8006d6e:	2c02      	cmp	r4, #2
 8006d70:	d920      	bls.n	8006db4 <_scanf_float+0x2bc>
 8006d72:	1be3      	subs	r3, r4, r7
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	9305      	str	r3, [sp, #20]
 8006d78:	9b02      	ldr	r3, [sp, #8]
 8006d7a:	9a05      	ldr	r2, [sp, #20]
 8006d7c:	189b      	adds	r3, r3, r2
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	2b03      	cmp	r3, #3
 8006d82:	d827      	bhi.n	8006dd4 <_scanf_float+0x2dc>
 8006d84:	3c03      	subs	r4, #3
 8006d86:	b2e4      	uxtb	r4, r4
 8006d88:	1b3f      	subs	r7, r7, r4
 8006d8a:	6833      	ldr	r3, [r6, #0]
 8006d8c:	05da      	lsls	r2, r3, #23
 8006d8e:	d554      	bpl.n	8006e3a <_scanf_float+0x342>
 8006d90:	055b      	lsls	r3, r3, #21
 8006d92:	d537      	bpl.n	8006e04 <_scanf_float+0x30c>
 8006d94:	24be      	movs	r4, #190	; 0xbe
 8006d96:	0064      	lsls	r4, r4, #1
 8006d98:	9b03      	ldr	r3, [sp, #12]
 8006d9a:	429f      	cmp	r7, r3
 8006d9c:	d800      	bhi.n	8006da0 <_scanf_float+0x2a8>
 8006d9e:	e6ee      	b.n	8006b7e <_scanf_float+0x86>
 8006da0:	3f01      	subs	r7, #1
 8006da2:	5933      	ldr	r3, [r6, r4]
 8006da4:	002a      	movs	r2, r5
 8006da6:	7839      	ldrb	r1, [r7, #0]
 8006da8:	9801      	ldr	r0, [sp, #4]
 8006daa:	4798      	blx	r3
 8006dac:	6933      	ldr	r3, [r6, #16]
 8006dae:	3b01      	subs	r3, #1
 8006db0:	6133      	str	r3, [r6, #16]
 8006db2:	e7f1      	b.n	8006d98 <_scanf_float+0x2a0>
 8006db4:	24be      	movs	r4, #190	; 0xbe
 8006db6:	0064      	lsls	r4, r4, #1
 8006db8:	9b03      	ldr	r3, [sp, #12]
 8006dba:	429f      	cmp	r7, r3
 8006dbc:	d800      	bhi.n	8006dc0 <_scanf_float+0x2c8>
 8006dbe:	e6de      	b.n	8006b7e <_scanf_float+0x86>
 8006dc0:	3f01      	subs	r7, #1
 8006dc2:	5933      	ldr	r3, [r6, r4]
 8006dc4:	002a      	movs	r2, r5
 8006dc6:	7839      	ldrb	r1, [r7, #0]
 8006dc8:	9801      	ldr	r0, [sp, #4]
 8006dca:	4798      	blx	r3
 8006dcc:	6933      	ldr	r3, [r6, #16]
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	6133      	str	r3, [r6, #16]
 8006dd2:	e7f1      	b.n	8006db8 <_scanf_float+0x2c0>
 8006dd4:	9b02      	ldr	r3, [sp, #8]
 8006dd6:	002a      	movs	r2, r5
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	7819      	ldrb	r1, [r3, #0]
 8006ddc:	9302      	str	r3, [sp, #8]
 8006dde:	23be      	movs	r3, #190	; 0xbe
 8006de0:	005b      	lsls	r3, r3, #1
 8006de2:	58f3      	ldr	r3, [r6, r3]
 8006de4:	9801      	ldr	r0, [sp, #4]
 8006de6:	9309      	str	r3, [sp, #36]	; 0x24
 8006de8:	4798      	blx	r3
 8006dea:	6933      	ldr	r3, [r6, #16]
 8006dec:	3b01      	subs	r3, #1
 8006dee:	6133      	str	r3, [r6, #16]
 8006df0:	e7c2      	b.n	8006d78 <_scanf_float+0x280>
 8006df2:	46c0      	nop			; (mov r8, r8)
 8006df4:	fffffeff 	.word	0xfffffeff
 8006df8:	fffffe7f 	.word	0xfffffe7f
 8006dfc:	fffff87f 	.word	0xfffff87f
 8006e00:	fffffd7f 	.word	0xfffffd7f
 8006e04:	6933      	ldr	r3, [r6, #16]
 8006e06:	1e7c      	subs	r4, r7, #1
 8006e08:	7821      	ldrb	r1, [r4, #0]
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	6133      	str	r3, [r6, #16]
 8006e0e:	2965      	cmp	r1, #101	; 0x65
 8006e10:	d00c      	beq.n	8006e2c <_scanf_float+0x334>
 8006e12:	2945      	cmp	r1, #69	; 0x45
 8006e14:	d00a      	beq.n	8006e2c <_scanf_float+0x334>
 8006e16:	23be      	movs	r3, #190	; 0xbe
 8006e18:	005b      	lsls	r3, r3, #1
 8006e1a:	58f3      	ldr	r3, [r6, r3]
 8006e1c:	002a      	movs	r2, r5
 8006e1e:	9801      	ldr	r0, [sp, #4]
 8006e20:	4798      	blx	r3
 8006e22:	6933      	ldr	r3, [r6, #16]
 8006e24:	1ebc      	subs	r4, r7, #2
 8006e26:	3b01      	subs	r3, #1
 8006e28:	7821      	ldrb	r1, [r4, #0]
 8006e2a:	6133      	str	r3, [r6, #16]
 8006e2c:	23be      	movs	r3, #190	; 0xbe
 8006e2e:	005b      	lsls	r3, r3, #1
 8006e30:	002a      	movs	r2, r5
 8006e32:	58f3      	ldr	r3, [r6, r3]
 8006e34:	9801      	ldr	r0, [sp, #4]
 8006e36:	4798      	blx	r3
 8006e38:	0027      	movs	r7, r4
 8006e3a:	6832      	ldr	r2, [r6, #0]
 8006e3c:	2310      	movs	r3, #16
 8006e3e:	0011      	movs	r1, r2
 8006e40:	4019      	ands	r1, r3
 8006e42:	9102      	str	r1, [sp, #8]
 8006e44:	421a      	tst	r2, r3
 8006e46:	d158      	bne.n	8006efa <_scanf_float+0x402>
 8006e48:	23c0      	movs	r3, #192	; 0xc0
 8006e4a:	7039      	strb	r1, [r7, #0]
 8006e4c:	6832      	ldr	r2, [r6, #0]
 8006e4e:	00db      	lsls	r3, r3, #3
 8006e50:	4013      	ands	r3, r2
 8006e52:	2280      	movs	r2, #128	; 0x80
 8006e54:	00d2      	lsls	r2, r2, #3
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d11d      	bne.n	8006e96 <_scanf_float+0x39e>
 8006e5a:	9b04      	ldr	r3, [sp, #16]
 8006e5c:	9a00      	ldr	r2, [sp, #0]
 8006e5e:	9900      	ldr	r1, [sp, #0]
 8006e60:	1a9a      	subs	r2, r3, r2
 8006e62:	428b      	cmp	r3, r1
 8006e64:	d124      	bne.n	8006eb0 <_scanf_float+0x3b8>
 8006e66:	2200      	movs	r2, #0
 8006e68:	9903      	ldr	r1, [sp, #12]
 8006e6a:	9801      	ldr	r0, [sp, #4]
 8006e6c:	f000 ff6e 	bl	8007d4c <_strtod_r>
 8006e70:	9b06      	ldr	r3, [sp, #24]
 8006e72:	000d      	movs	r5, r1
 8006e74:	6831      	ldr	r1, [r6, #0]
 8006e76:	0004      	movs	r4, r0
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	078a      	lsls	r2, r1, #30
 8006e7c:	d525      	bpl.n	8006eca <_scanf_float+0x3d2>
 8006e7e:	1d1a      	adds	r2, r3, #4
 8006e80:	9906      	ldr	r1, [sp, #24]
 8006e82:	600a      	str	r2, [r1, #0]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	601c      	str	r4, [r3, #0]
 8006e88:	605d      	str	r5, [r3, #4]
 8006e8a:	68f3      	ldr	r3, [r6, #12]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	60f3      	str	r3, [r6, #12]
 8006e90:	9802      	ldr	r0, [sp, #8]
 8006e92:	b00b      	add	sp, #44	; 0x2c
 8006e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e96:	9b07      	ldr	r3, [sp, #28]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d0e4      	beq.n	8006e66 <_scanf_float+0x36e>
 8006e9c:	9b08      	ldr	r3, [sp, #32]
 8006e9e:	9a02      	ldr	r2, [sp, #8]
 8006ea0:	1c59      	adds	r1, r3, #1
 8006ea2:	9801      	ldr	r0, [sp, #4]
 8006ea4:	230a      	movs	r3, #10
 8006ea6:	f000 ffe7 	bl	8007e78 <_strtol_r>
 8006eaa:	9b07      	ldr	r3, [sp, #28]
 8006eac:	9f08      	ldr	r7, [sp, #32]
 8006eae:	1ac2      	subs	r2, r0, r3
 8006eb0:	0033      	movs	r3, r6
 8006eb2:	3370      	adds	r3, #112	; 0x70
 8006eb4:	33ff      	adds	r3, #255	; 0xff
 8006eb6:	429f      	cmp	r7, r3
 8006eb8:	d302      	bcc.n	8006ec0 <_scanf_float+0x3c8>
 8006eba:	0037      	movs	r7, r6
 8006ebc:	376f      	adds	r7, #111	; 0x6f
 8006ebe:	37ff      	adds	r7, #255	; 0xff
 8006ec0:	0038      	movs	r0, r7
 8006ec2:	490f      	ldr	r1, [pc, #60]	; (8006f00 <_scanf_float+0x408>)
 8006ec4:	f000 f8aa 	bl	800701c <siprintf>
 8006ec8:	e7cd      	b.n	8006e66 <_scanf_float+0x36e>
 8006eca:	1d1a      	adds	r2, r3, #4
 8006ecc:	0749      	lsls	r1, r1, #29
 8006ece:	d4d7      	bmi.n	8006e80 <_scanf_float+0x388>
 8006ed0:	9906      	ldr	r1, [sp, #24]
 8006ed2:	0020      	movs	r0, r4
 8006ed4:	600a      	str	r2, [r1, #0]
 8006ed6:	681f      	ldr	r7, [r3, #0]
 8006ed8:	0022      	movs	r2, r4
 8006eda:	002b      	movs	r3, r5
 8006edc:	0029      	movs	r1, r5
 8006ede:	f7fb f88f 	bl	8002000 <__aeabi_dcmpun>
 8006ee2:	2800      	cmp	r0, #0
 8006ee4:	d004      	beq.n	8006ef0 <_scanf_float+0x3f8>
 8006ee6:	4807      	ldr	r0, [pc, #28]	; (8006f04 <_scanf_float+0x40c>)
 8006ee8:	f000 f894 	bl	8007014 <nanf>
 8006eec:	6038      	str	r0, [r7, #0]
 8006eee:	e7cc      	b.n	8006e8a <_scanf_float+0x392>
 8006ef0:	0020      	movs	r0, r4
 8006ef2:	0029      	movs	r1, r5
 8006ef4:	f7fb f92e 	bl	8002154 <__aeabi_d2f>
 8006ef8:	e7f8      	b.n	8006eec <_scanf_float+0x3f4>
 8006efa:	2300      	movs	r3, #0
 8006efc:	e640      	b.n	8006b80 <_scanf_float+0x88>
 8006efe:	46c0      	nop			; (mov r8, r8)
 8006f00:	0800abec 	.word	0x0800abec
 8006f04:	0800aff8 	.word	0x0800aff8

08006f08 <cleanup_glue>:
 8006f08:	b570      	push	{r4, r5, r6, lr}
 8006f0a:	000d      	movs	r5, r1
 8006f0c:	6809      	ldr	r1, [r1, #0]
 8006f0e:	0004      	movs	r4, r0
 8006f10:	2900      	cmp	r1, #0
 8006f12:	d001      	beq.n	8006f18 <cleanup_glue+0x10>
 8006f14:	f7ff fff8 	bl	8006f08 <cleanup_glue>
 8006f18:	0029      	movs	r1, r5
 8006f1a:	0020      	movs	r0, r4
 8006f1c:	f003 f802 	bl	8009f24 <_free_r>
 8006f20:	bd70      	pop	{r4, r5, r6, pc}
	...

08006f24 <_reclaim_reent>:
 8006f24:	4b31      	ldr	r3, [pc, #196]	; (8006fec <_reclaim_reent+0xc8>)
 8006f26:	b570      	push	{r4, r5, r6, lr}
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	0004      	movs	r4, r0
 8006f2c:	4283      	cmp	r3, r0
 8006f2e:	d049      	beq.n	8006fc4 <_reclaim_reent+0xa0>
 8006f30:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00a      	beq.n	8006f4c <_reclaim_reent+0x28>
 8006f36:	2500      	movs	r5, #0
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	42ab      	cmp	r3, r5
 8006f3c:	d147      	bne.n	8006fce <_reclaim_reent+0xaa>
 8006f3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f40:	6819      	ldr	r1, [r3, #0]
 8006f42:	2900      	cmp	r1, #0
 8006f44:	d002      	beq.n	8006f4c <_reclaim_reent+0x28>
 8006f46:	0020      	movs	r0, r4
 8006f48:	f002 ffec 	bl	8009f24 <_free_r>
 8006f4c:	6961      	ldr	r1, [r4, #20]
 8006f4e:	2900      	cmp	r1, #0
 8006f50:	d002      	beq.n	8006f58 <_reclaim_reent+0x34>
 8006f52:	0020      	movs	r0, r4
 8006f54:	f002 ffe6 	bl	8009f24 <_free_r>
 8006f58:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006f5a:	2900      	cmp	r1, #0
 8006f5c:	d002      	beq.n	8006f64 <_reclaim_reent+0x40>
 8006f5e:	0020      	movs	r0, r4
 8006f60:	f002 ffe0 	bl	8009f24 <_free_r>
 8006f64:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006f66:	2900      	cmp	r1, #0
 8006f68:	d002      	beq.n	8006f70 <_reclaim_reent+0x4c>
 8006f6a:	0020      	movs	r0, r4
 8006f6c:	f002 ffda 	bl	8009f24 <_free_r>
 8006f70:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006f72:	2900      	cmp	r1, #0
 8006f74:	d002      	beq.n	8006f7c <_reclaim_reent+0x58>
 8006f76:	0020      	movs	r0, r4
 8006f78:	f002 ffd4 	bl	8009f24 <_free_r>
 8006f7c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006f7e:	2900      	cmp	r1, #0
 8006f80:	d002      	beq.n	8006f88 <_reclaim_reent+0x64>
 8006f82:	0020      	movs	r0, r4
 8006f84:	f002 ffce 	bl	8009f24 <_free_r>
 8006f88:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006f8a:	2900      	cmp	r1, #0
 8006f8c:	d002      	beq.n	8006f94 <_reclaim_reent+0x70>
 8006f8e:	0020      	movs	r0, r4
 8006f90:	f002 ffc8 	bl	8009f24 <_free_r>
 8006f94:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006f96:	2900      	cmp	r1, #0
 8006f98:	d002      	beq.n	8006fa0 <_reclaim_reent+0x7c>
 8006f9a:	0020      	movs	r0, r4
 8006f9c:	f002 ffc2 	bl	8009f24 <_free_r>
 8006fa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fa2:	2900      	cmp	r1, #0
 8006fa4:	d002      	beq.n	8006fac <_reclaim_reent+0x88>
 8006fa6:	0020      	movs	r0, r4
 8006fa8:	f002 ffbc 	bl	8009f24 <_free_r>
 8006fac:	69a3      	ldr	r3, [r4, #24]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d008      	beq.n	8006fc4 <_reclaim_reent+0xa0>
 8006fb2:	0020      	movs	r0, r4
 8006fb4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006fb6:	4798      	blx	r3
 8006fb8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006fba:	2900      	cmp	r1, #0
 8006fbc:	d002      	beq.n	8006fc4 <_reclaim_reent+0xa0>
 8006fbe:	0020      	movs	r0, r4
 8006fc0:	f7ff ffa2 	bl	8006f08 <cleanup_glue>
 8006fc4:	bd70      	pop	{r4, r5, r6, pc}
 8006fc6:	5949      	ldr	r1, [r1, r5]
 8006fc8:	2900      	cmp	r1, #0
 8006fca:	d108      	bne.n	8006fde <_reclaim_reent+0xba>
 8006fcc:	3504      	adds	r5, #4
 8006fce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fd0:	68d9      	ldr	r1, [r3, #12]
 8006fd2:	2d80      	cmp	r5, #128	; 0x80
 8006fd4:	d1f7      	bne.n	8006fc6 <_reclaim_reent+0xa2>
 8006fd6:	0020      	movs	r0, r4
 8006fd8:	f002 ffa4 	bl	8009f24 <_free_r>
 8006fdc:	e7af      	b.n	8006f3e <_reclaim_reent+0x1a>
 8006fde:	680e      	ldr	r6, [r1, #0]
 8006fe0:	0020      	movs	r0, r4
 8006fe2:	f002 ff9f 	bl	8009f24 <_free_r>
 8006fe6:	0031      	movs	r1, r6
 8006fe8:	e7ee      	b.n	8006fc8 <_reclaim_reent+0xa4>
 8006fea:	46c0      	nop			; (mov r8, r8)
 8006fec:	20000010 	.word	0x20000010

08006ff0 <_sbrk_r>:
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	b570      	push	{r4, r5, r6, lr}
 8006ff4:	4d06      	ldr	r5, [pc, #24]	; (8007010 <_sbrk_r+0x20>)
 8006ff6:	0004      	movs	r4, r0
 8006ff8:	0008      	movs	r0, r1
 8006ffa:	602b      	str	r3, [r5, #0]
 8006ffc:	f7fb fd10 	bl	8002a20 <_sbrk>
 8007000:	1c43      	adds	r3, r0, #1
 8007002:	d103      	bne.n	800700c <_sbrk_r+0x1c>
 8007004:	682b      	ldr	r3, [r5, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d000      	beq.n	800700c <_sbrk_r+0x1c>
 800700a:	6023      	str	r3, [r4, #0]
 800700c:	bd70      	pop	{r4, r5, r6, pc}
 800700e:	46c0      	nop			; (mov r8, r8)
 8007010:	20001300 	.word	0x20001300

08007014 <nanf>:
 8007014:	4800      	ldr	r0, [pc, #0]	; (8007018 <nanf+0x4>)
 8007016:	4770      	bx	lr
 8007018:	7fc00000 	.word	0x7fc00000

0800701c <siprintf>:
 800701c:	b40e      	push	{r1, r2, r3}
 800701e:	b500      	push	{lr}
 8007020:	490b      	ldr	r1, [pc, #44]	; (8007050 <siprintf+0x34>)
 8007022:	b09c      	sub	sp, #112	; 0x70
 8007024:	ab1d      	add	r3, sp, #116	; 0x74
 8007026:	9002      	str	r0, [sp, #8]
 8007028:	9006      	str	r0, [sp, #24]
 800702a:	9107      	str	r1, [sp, #28]
 800702c:	9104      	str	r1, [sp, #16]
 800702e:	4809      	ldr	r0, [pc, #36]	; (8007054 <siprintf+0x38>)
 8007030:	4909      	ldr	r1, [pc, #36]	; (8007058 <siprintf+0x3c>)
 8007032:	cb04      	ldmia	r3!, {r2}
 8007034:	9105      	str	r1, [sp, #20]
 8007036:	6800      	ldr	r0, [r0, #0]
 8007038:	a902      	add	r1, sp, #8
 800703a:	9301      	str	r3, [sp, #4]
 800703c:	f003 f81e 	bl	800a07c <_svfiprintf_r>
 8007040:	2300      	movs	r3, #0
 8007042:	9a02      	ldr	r2, [sp, #8]
 8007044:	7013      	strb	r3, [r2, #0]
 8007046:	b01c      	add	sp, #112	; 0x70
 8007048:	bc08      	pop	{r3}
 800704a:	b003      	add	sp, #12
 800704c:	4718      	bx	r3
 800704e:	46c0      	nop			; (mov r8, r8)
 8007050:	7fffffff 	.word	0x7fffffff
 8007054:	20000010 	.word	0x20000010
 8007058:	ffff0208 	.word	0xffff0208

0800705c <__sread>:
 800705c:	b570      	push	{r4, r5, r6, lr}
 800705e:	000c      	movs	r4, r1
 8007060:	250e      	movs	r5, #14
 8007062:	5f49      	ldrsh	r1, [r1, r5]
 8007064:	f003 f90a 	bl	800a27c <_read_r>
 8007068:	2800      	cmp	r0, #0
 800706a:	db03      	blt.n	8007074 <__sread+0x18>
 800706c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800706e:	181b      	adds	r3, r3, r0
 8007070:	6563      	str	r3, [r4, #84]	; 0x54
 8007072:	bd70      	pop	{r4, r5, r6, pc}
 8007074:	89a3      	ldrh	r3, [r4, #12]
 8007076:	4a02      	ldr	r2, [pc, #8]	; (8007080 <__sread+0x24>)
 8007078:	4013      	ands	r3, r2
 800707a:	81a3      	strh	r3, [r4, #12]
 800707c:	e7f9      	b.n	8007072 <__sread+0x16>
 800707e:	46c0      	nop			; (mov r8, r8)
 8007080:	ffffefff 	.word	0xffffefff

08007084 <__swrite>:
 8007084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007086:	001f      	movs	r7, r3
 8007088:	898b      	ldrh	r3, [r1, #12]
 800708a:	0005      	movs	r5, r0
 800708c:	000c      	movs	r4, r1
 800708e:	0016      	movs	r6, r2
 8007090:	05db      	lsls	r3, r3, #23
 8007092:	d505      	bpl.n	80070a0 <__swrite+0x1c>
 8007094:	230e      	movs	r3, #14
 8007096:	5ec9      	ldrsh	r1, [r1, r3]
 8007098:	2200      	movs	r2, #0
 800709a:	2302      	movs	r3, #2
 800709c:	f002 fa00 	bl	80094a0 <_lseek_r>
 80070a0:	89a3      	ldrh	r3, [r4, #12]
 80070a2:	4a05      	ldr	r2, [pc, #20]	; (80070b8 <__swrite+0x34>)
 80070a4:	0028      	movs	r0, r5
 80070a6:	4013      	ands	r3, r2
 80070a8:	81a3      	strh	r3, [r4, #12]
 80070aa:	0032      	movs	r2, r6
 80070ac:	230e      	movs	r3, #14
 80070ae:	5ee1      	ldrsh	r1, [r4, r3]
 80070b0:	003b      	movs	r3, r7
 80070b2:	f000 fee5 	bl	8007e80 <_write_r>
 80070b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070b8:	ffffefff 	.word	0xffffefff

080070bc <__sseek>:
 80070bc:	b570      	push	{r4, r5, r6, lr}
 80070be:	000c      	movs	r4, r1
 80070c0:	250e      	movs	r5, #14
 80070c2:	5f49      	ldrsh	r1, [r1, r5]
 80070c4:	f002 f9ec 	bl	80094a0 <_lseek_r>
 80070c8:	89a3      	ldrh	r3, [r4, #12]
 80070ca:	1c42      	adds	r2, r0, #1
 80070cc:	d103      	bne.n	80070d6 <__sseek+0x1a>
 80070ce:	4a05      	ldr	r2, [pc, #20]	; (80070e4 <__sseek+0x28>)
 80070d0:	4013      	ands	r3, r2
 80070d2:	81a3      	strh	r3, [r4, #12]
 80070d4:	bd70      	pop	{r4, r5, r6, pc}
 80070d6:	2280      	movs	r2, #128	; 0x80
 80070d8:	0152      	lsls	r2, r2, #5
 80070da:	4313      	orrs	r3, r2
 80070dc:	81a3      	strh	r3, [r4, #12]
 80070de:	6560      	str	r0, [r4, #84]	; 0x54
 80070e0:	e7f8      	b.n	80070d4 <__sseek+0x18>
 80070e2:	46c0      	nop			; (mov r8, r8)
 80070e4:	ffffefff 	.word	0xffffefff

080070e8 <__sclose>:
 80070e8:	b510      	push	{r4, lr}
 80070ea:	230e      	movs	r3, #14
 80070ec:	5ec9      	ldrsh	r1, [r1, r3]
 80070ee:	f000 fedb 	bl	8007ea8 <_close_r>
 80070f2:	bd10      	pop	{r4, pc}

080070f4 <sulp>:
 80070f4:	b570      	push	{r4, r5, r6, lr}
 80070f6:	0016      	movs	r6, r2
 80070f8:	000d      	movs	r5, r1
 80070fa:	f002 fda1 	bl	8009c40 <__ulp>
 80070fe:	2e00      	cmp	r6, #0
 8007100:	d00d      	beq.n	800711e <sulp+0x2a>
 8007102:	236b      	movs	r3, #107	; 0x6b
 8007104:	006a      	lsls	r2, r5, #1
 8007106:	0d52      	lsrs	r2, r2, #21
 8007108:	1a9b      	subs	r3, r3, r2
 800710a:	2b00      	cmp	r3, #0
 800710c:	dd07      	ble.n	800711e <sulp+0x2a>
 800710e:	2400      	movs	r4, #0
 8007110:	4a03      	ldr	r2, [pc, #12]	; (8007120 <sulp+0x2c>)
 8007112:	051b      	lsls	r3, r3, #20
 8007114:	189d      	adds	r5, r3, r2
 8007116:	002b      	movs	r3, r5
 8007118:	0022      	movs	r2, r4
 800711a:	f7fa f973 	bl	8001404 <__aeabi_dmul>
 800711e:	bd70      	pop	{r4, r5, r6, pc}
 8007120:	3ff00000 	.word	0x3ff00000

08007124 <_strtod_l>:
 8007124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007126:	001d      	movs	r5, r3
 8007128:	2300      	movs	r3, #0
 800712a:	b0a5      	sub	sp, #148	; 0x94
 800712c:	9320      	str	r3, [sp, #128]	; 0x80
 800712e:	4bac      	ldr	r3, [pc, #688]	; (80073e0 <_strtod_l+0x2bc>)
 8007130:	9005      	str	r0, [sp, #20]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	9108      	str	r1, [sp, #32]
 8007136:	0018      	movs	r0, r3
 8007138:	9307      	str	r3, [sp, #28]
 800713a:	921b      	str	r2, [sp, #108]	; 0x6c
 800713c:	f7f8 ffe4 	bl	8000108 <strlen>
 8007140:	2600      	movs	r6, #0
 8007142:	0004      	movs	r4, r0
 8007144:	2700      	movs	r7, #0
 8007146:	9b08      	ldr	r3, [sp, #32]
 8007148:	931f      	str	r3, [sp, #124]	; 0x7c
 800714a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800714c:	7813      	ldrb	r3, [r2, #0]
 800714e:	2b2b      	cmp	r3, #43	; 0x2b
 8007150:	d058      	beq.n	8007204 <_strtod_l+0xe0>
 8007152:	d844      	bhi.n	80071de <_strtod_l+0xba>
 8007154:	2b0d      	cmp	r3, #13
 8007156:	d83d      	bhi.n	80071d4 <_strtod_l+0xb0>
 8007158:	2b08      	cmp	r3, #8
 800715a:	d83d      	bhi.n	80071d8 <_strtod_l+0xb4>
 800715c:	2b00      	cmp	r3, #0
 800715e:	d047      	beq.n	80071f0 <_strtod_l+0xcc>
 8007160:	2300      	movs	r3, #0
 8007162:	930e      	str	r3, [sp, #56]	; 0x38
 8007164:	2200      	movs	r2, #0
 8007166:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007168:	920a      	str	r2, [sp, #40]	; 0x28
 800716a:	9306      	str	r3, [sp, #24]
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	2b30      	cmp	r3, #48	; 0x30
 8007170:	d000      	beq.n	8007174 <_strtod_l+0x50>
 8007172:	e07f      	b.n	8007274 <_strtod_l+0x150>
 8007174:	9b06      	ldr	r3, [sp, #24]
 8007176:	3220      	adds	r2, #32
 8007178:	785b      	ldrb	r3, [r3, #1]
 800717a:	4393      	bics	r3, r2
 800717c:	2b58      	cmp	r3, #88	; 0x58
 800717e:	d000      	beq.n	8007182 <_strtod_l+0x5e>
 8007180:	e06e      	b.n	8007260 <_strtod_l+0x13c>
 8007182:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007184:	9502      	str	r5, [sp, #8]
 8007186:	9301      	str	r3, [sp, #4]
 8007188:	ab20      	add	r3, sp, #128	; 0x80
 800718a:	9300      	str	r3, [sp, #0]
 800718c:	4a95      	ldr	r2, [pc, #596]	; (80073e4 <_strtod_l+0x2c0>)
 800718e:	ab21      	add	r3, sp, #132	; 0x84
 8007190:	9805      	ldr	r0, [sp, #20]
 8007192:	a91f      	add	r1, sp, #124	; 0x7c
 8007194:	f001 fe76 	bl	8008e84 <__gethex>
 8007198:	2307      	movs	r3, #7
 800719a:	0005      	movs	r5, r0
 800719c:	0004      	movs	r4, r0
 800719e:	401d      	ands	r5, r3
 80071a0:	4218      	tst	r0, r3
 80071a2:	d006      	beq.n	80071b2 <_strtod_l+0x8e>
 80071a4:	2d06      	cmp	r5, #6
 80071a6:	d12f      	bne.n	8007208 <_strtod_l+0xe4>
 80071a8:	9b06      	ldr	r3, [sp, #24]
 80071aa:	3301      	adds	r3, #1
 80071ac:	931f      	str	r3, [sp, #124]	; 0x7c
 80071ae:	2300      	movs	r3, #0
 80071b0:	930e      	str	r3, [sp, #56]	; 0x38
 80071b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d002      	beq.n	80071be <_strtod_l+0x9a>
 80071b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80071ba:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80071bc:	601a      	str	r2, [r3, #0]
 80071be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d01c      	beq.n	80071fe <_strtod_l+0xda>
 80071c4:	2380      	movs	r3, #128	; 0x80
 80071c6:	0032      	movs	r2, r6
 80071c8:	061b      	lsls	r3, r3, #24
 80071ca:	18fb      	adds	r3, r7, r3
 80071cc:	0010      	movs	r0, r2
 80071ce:	0019      	movs	r1, r3
 80071d0:	b025      	add	sp, #148	; 0x94
 80071d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071d4:	2b20      	cmp	r3, #32
 80071d6:	d1c3      	bne.n	8007160 <_strtod_l+0x3c>
 80071d8:	3201      	adds	r2, #1
 80071da:	921f      	str	r2, [sp, #124]	; 0x7c
 80071dc:	e7b5      	b.n	800714a <_strtod_l+0x26>
 80071de:	2b2d      	cmp	r3, #45	; 0x2d
 80071e0:	d1be      	bne.n	8007160 <_strtod_l+0x3c>
 80071e2:	3b2c      	subs	r3, #44	; 0x2c
 80071e4:	930e      	str	r3, [sp, #56]	; 0x38
 80071e6:	1c53      	adds	r3, r2, #1
 80071e8:	931f      	str	r3, [sp, #124]	; 0x7c
 80071ea:	7853      	ldrb	r3, [r2, #1]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d1b9      	bne.n	8007164 <_strtod_l+0x40>
 80071f0:	9b08      	ldr	r3, [sp, #32]
 80071f2:	931f      	str	r3, [sp, #124]	; 0x7c
 80071f4:	2300      	movs	r3, #0
 80071f6:	930e      	str	r3, [sp, #56]	; 0x38
 80071f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1dc      	bne.n	80071b8 <_strtod_l+0x94>
 80071fe:	0032      	movs	r2, r6
 8007200:	003b      	movs	r3, r7
 8007202:	e7e3      	b.n	80071cc <_strtod_l+0xa8>
 8007204:	2300      	movs	r3, #0
 8007206:	e7ed      	b.n	80071e4 <_strtod_l+0xc0>
 8007208:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800720a:	2a00      	cmp	r2, #0
 800720c:	d007      	beq.n	800721e <_strtod_l+0xfa>
 800720e:	2135      	movs	r1, #53	; 0x35
 8007210:	a822      	add	r0, sp, #136	; 0x88
 8007212:	f002 fe16 	bl	8009e42 <__copybits>
 8007216:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007218:	9805      	ldr	r0, [sp, #20]
 800721a:	f002 f9d1 	bl	80095c0 <_Bfree>
 800721e:	1e68      	subs	r0, r5, #1
 8007220:	2804      	cmp	r0, #4
 8007222:	d806      	bhi.n	8007232 <_strtod_l+0x10e>
 8007224:	f7f8 ff78 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007228:	1816030b 	.word	0x1816030b
 800722c:	0b          	.byte	0x0b
 800722d:	00          	.byte	0x00
 800722e:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8007230:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8007232:	0723      	lsls	r3, r4, #28
 8007234:	d5bd      	bpl.n	80071b2 <_strtod_l+0x8e>
 8007236:	2380      	movs	r3, #128	; 0x80
 8007238:	061b      	lsls	r3, r3, #24
 800723a:	431f      	orrs	r7, r3
 800723c:	e7b9      	b.n	80071b2 <_strtod_l+0x8e>
 800723e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007240:	4a69      	ldr	r2, [pc, #420]	; (80073e8 <_strtod_l+0x2c4>)
 8007242:	496a      	ldr	r1, [pc, #424]	; (80073ec <_strtod_l+0x2c8>)
 8007244:	401a      	ands	r2, r3
 8007246:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007248:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800724a:	185b      	adds	r3, r3, r1
 800724c:	051b      	lsls	r3, r3, #20
 800724e:	431a      	orrs	r2, r3
 8007250:	0017      	movs	r7, r2
 8007252:	e7ee      	b.n	8007232 <_strtod_l+0x10e>
 8007254:	4f66      	ldr	r7, [pc, #408]	; (80073f0 <_strtod_l+0x2cc>)
 8007256:	e7ec      	b.n	8007232 <_strtod_l+0x10e>
 8007258:	2601      	movs	r6, #1
 800725a:	4f66      	ldr	r7, [pc, #408]	; (80073f4 <_strtod_l+0x2d0>)
 800725c:	4276      	negs	r6, r6
 800725e:	e7e8      	b.n	8007232 <_strtod_l+0x10e>
 8007260:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007262:	1c5a      	adds	r2, r3, #1
 8007264:	921f      	str	r2, [sp, #124]	; 0x7c
 8007266:	785b      	ldrb	r3, [r3, #1]
 8007268:	2b30      	cmp	r3, #48	; 0x30
 800726a:	d0f9      	beq.n	8007260 <_strtod_l+0x13c>
 800726c:	2b00      	cmp	r3, #0
 800726e:	d0a0      	beq.n	80071b2 <_strtod_l+0x8e>
 8007270:	2301      	movs	r3, #1
 8007272:	930a      	str	r3, [sp, #40]	; 0x28
 8007274:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007276:	220a      	movs	r2, #10
 8007278:	9310      	str	r3, [sp, #64]	; 0x40
 800727a:	2300      	movs	r3, #0
 800727c:	930f      	str	r3, [sp, #60]	; 0x3c
 800727e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007280:	9309      	str	r3, [sp, #36]	; 0x24
 8007282:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8007284:	7805      	ldrb	r5, [r0, #0]
 8007286:	002b      	movs	r3, r5
 8007288:	3b30      	subs	r3, #48	; 0x30
 800728a:	b2d9      	uxtb	r1, r3
 800728c:	2909      	cmp	r1, #9
 800728e:	d927      	bls.n	80072e0 <_strtod_l+0x1bc>
 8007290:	0022      	movs	r2, r4
 8007292:	9907      	ldr	r1, [sp, #28]
 8007294:	f003 f80c 	bl	800a2b0 <strncmp>
 8007298:	2800      	cmp	r0, #0
 800729a:	d033      	beq.n	8007304 <_strtod_l+0x1e0>
 800729c:	2000      	movs	r0, #0
 800729e:	002b      	movs	r3, r5
 80072a0:	4684      	mov	ip, r0
 80072a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072a4:	900c      	str	r0, [sp, #48]	; 0x30
 80072a6:	9206      	str	r2, [sp, #24]
 80072a8:	2220      	movs	r2, #32
 80072aa:	0019      	movs	r1, r3
 80072ac:	4391      	bics	r1, r2
 80072ae:	000a      	movs	r2, r1
 80072b0:	2100      	movs	r1, #0
 80072b2:	9107      	str	r1, [sp, #28]
 80072b4:	2a45      	cmp	r2, #69	; 0x45
 80072b6:	d000      	beq.n	80072ba <_strtod_l+0x196>
 80072b8:	e0c5      	b.n	8007446 <_strtod_l+0x322>
 80072ba:	9b06      	ldr	r3, [sp, #24]
 80072bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072be:	4303      	orrs	r3, r0
 80072c0:	4313      	orrs	r3, r2
 80072c2:	428b      	cmp	r3, r1
 80072c4:	d094      	beq.n	80071f0 <_strtod_l+0xcc>
 80072c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80072c8:	9308      	str	r3, [sp, #32]
 80072ca:	3301      	adds	r3, #1
 80072cc:	931f      	str	r3, [sp, #124]	; 0x7c
 80072ce:	9b08      	ldr	r3, [sp, #32]
 80072d0:	785b      	ldrb	r3, [r3, #1]
 80072d2:	2b2b      	cmp	r3, #43	; 0x2b
 80072d4:	d076      	beq.n	80073c4 <_strtod_l+0x2a0>
 80072d6:	000c      	movs	r4, r1
 80072d8:	2b2d      	cmp	r3, #45	; 0x2d
 80072da:	d179      	bne.n	80073d0 <_strtod_l+0x2ac>
 80072dc:	2401      	movs	r4, #1
 80072de:	e072      	b.n	80073c6 <_strtod_l+0x2a2>
 80072e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072e2:	2908      	cmp	r1, #8
 80072e4:	dc09      	bgt.n	80072fa <_strtod_l+0x1d6>
 80072e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80072e8:	4351      	muls	r1, r2
 80072ea:	185b      	adds	r3, r3, r1
 80072ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80072ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072f0:	3001      	adds	r0, #1
 80072f2:	3301      	adds	r3, #1
 80072f4:	9309      	str	r3, [sp, #36]	; 0x24
 80072f6:	901f      	str	r0, [sp, #124]	; 0x7c
 80072f8:	e7c3      	b.n	8007282 <_strtod_l+0x15e>
 80072fa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80072fc:	4351      	muls	r1, r2
 80072fe:	185b      	adds	r3, r3, r1
 8007300:	930f      	str	r3, [sp, #60]	; 0x3c
 8007302:	e7f4      	b.n	80072ee <_strtod_l+0x1ca>
 8007304:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007306:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007308:	191c      	adds	r4, r3, r4
 800730a:	941f      	str	r4, [sp, #124]	; 0x7c
 800730c:	7823      	ldrb	r3, [r4, #0]
 800730e:	2a00      	cmp	r2, #0
 8007310:	d039      	beq.n	8007386 <_strtod_l+0x262>
 8007312:	900c      	str	r0, [sp, #48]	; 0x30
 8007314:	9206      	str	r2, [sp, #24]
 8007316:	001a      	movs	r2, r3
 8007318:	3a30      	subs	r2, #48	; 0x30
 800731a:	2a09      	cmp	r2, #9
 800731c:	d912      	bls.n	8007344 <_strtod_l+0x220>
 800731e:	2201      	movs	r2, #1
 8007320:	4694      	mov	ip, r2
 8007322:	e7c1      	b.n	80072a8 <_strtod_l+0x184>
 8007324:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007326:	3001      	adds	r0, #1
 8007328:	1c5a      	adds	r2, r3, #1
 800732a:	921f      	str	r2, [sp, #124]	; 0x7c
 800732c:	785b      	ldrb	r3, [r3, #1]
 800732e:	2b30      	cmp	r3, #48	; 0x30
 8007330:	d0f8      	beq.n	8007324 <_strtod_l+0x200>
 8007332:	001a      	movs	r2, r3
 8007334:	3a31      	subs	r2, #49	; 0x31
 8007336:	2a08      	cmp	r2, #8
 8007338:	d83f      	bhi.n	80073ba <_strtod_l+0x296>
 800733a:	900c      	str	r0, [sp, #48]	; 0x30
 800733c:	2000      	movs	r0, #0
 800733e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007340:	9006      	str	r0, [sp, #24]
 8007342:	9210      	str	r2, [sp, #64]	; 0x40
 8007344:	001a      	movs	r2, r3
 8007346:	1c41      	adds	r1, r0, #1
 8007348:	3a30      	subs	r2, #48	; 0x30
 800734a:	2b30      	cmp	r3, #48	; 0x30
 800734c:	d015      	beq.n	800737a <_strtod_l+0x256>
 800734e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007350:	185b      	adds	r3, r3, r1
 8007352:	210a      	movs	r1, #10
 8007354:	930c      	str	r3, [sp, #48]	; 0x30
 8007356:	9b06      	ldr	r3, [sp, #24]
 8007358:	18c4      	adds	r4, r0, r3
 800735a:	42a3      	cmp	r3, r4
 800735c:	d115      	bne.n	800738a <_strtod_l+0x266>
 800735e:	9906      	ldr	r1, [sp, #24]
 8007360:	9b06      	ldr	r3, [sp, #24]
 8007362:	3101      	adds	r1, #1
 8007364:	1809      	adds	r1, r1, r0
 8007366:	181b      	adds	r3, r3, r0
 8007368:	9106      	str	r1, [sp, #24]
 800736a:	2b08      	cmp	r3, #8
 800736c:	dc1b      	bgt.n	80073a6 <_strtod_l+0x282>
 800736e:	230a      	movs	r3, #10
 8007370:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007372:	434b      	muls	r3, r1
 8007374:	2100      	movs	r1, #0
 8007376:	18d3      	adds	r3, r2, r3
 8007378:	930b      	str	r3, [sp, #44]	; 0x2c
 800737a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800737c:	0008      	movs	r0, r1
 800737e:	1c5a      	adds	r2, r3, #1
 8007380:	921f      	str	r2, [sp, #124]	; 0x7c
 8007382:	785b      	ldrb	r3, [r3, #1]
 8007384:	e7c7      	b.n	8007316 <_strtod_l+0x1f2>
 8007386:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007388:	e7d1      	b.n	800732e <_strtod_l+0x20a>
 800738a:	2b08      	cmp	r3, #8
 800738c:	dc04      	bgt.n	8007398 <_strtod_l+0x274>
 800738e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007390:	434d      	muls	r5, r1
 8007392:	950b      	str	r5, [sp, #44]	; 0x2c
 8007394:	3301      	adds	r3, #1
 8007396:	e7e0      	b.n	800735a <_strtod_l+0x236>
 8007398:	1c5d      	adds	r5, r3, #1
 800739a:	2d10      	cmp	r5, #16
 800739c:	dcfa      	bgt.n	8007394 <_strtod_l+0x270>
 800739e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80073a0:	434d      	muls	r5, r1
 80073a2:	950f      	str	r5, [sp, #60]	; 0x3c
 80073a4:	e7f6      	b.n	8007394 <_strtod_l+0x270>
 80073a6:	9b06      	ldr	r3, [sp, #24]
 80073a8:	2100      	movs	r1, #0
 80073aa:	2b10      	cmp	r3, #16
 80073ac:	dce5      	bgt.n	800737a <_strtod_l+0x256>
 80073ae:	230a      	movs	r3, #10
 80073b0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80073b2:	4343      	muls	r3, r0
 80073b4:	18d3      	adds	r3, r2, r3
 80073b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80073b8:	e7df      	b.n	800737a <_strtod_l+0x256>
 80073ba:	2200      	movs	r2, #0
 80073bc:	920c      	str	r2, [sp, #48]	; 0x30
 80073be:	9206      	str	r2, [sp, #24]
 80073c0:	3201      	adds	r2, #1
 80073c2:	e7ad      	b.n	8007320 <_strtod_l+0x1fc>
 80073c4:	2400      	movs	r4, #0
 80073c6:	9b08      	ldr	r3, [sp, #32]
 80073c8:	3302      	adds	r3, #2
 80073ca:	931f      	str	r3, [sp, #124]	; 0x7c
 80073cc:	9b08      	ldr	r3, [sp, #32]
 80073ce:	789b      	ldrb	r3, [r3, #2]
 80073d0:	001a      	movs	r2, r3
 80073d2:	3a30      	subs	r2, #48	; 0x30
 80073d4:	2a09      	cmp	r2, #9
 80073d6:	d913      	bls.n	8007400 <_strtod_l+0x2dc>
 80073d8:	9a08      	ldr	r2, [sp, #32]
 80073da:	921f      	str	r2, [sp, #124]	; 0x7c
 80073dc:	2200      	movs	r2, #0
 80073de:	e031      	b.n	8007444 <_strtod_l+0x320>
 80073e0:	0800ae40 	.word	0x0800ae40
 80073e4:	0800abf4 	.word	0x0800abf4
 80073e8:	ffefffff 	.word	0xffefffff
 80073ec:	00000433 	.word	0x00000433
 80073f0:	7ff00000 	.word	0x7ff00000
 80073f4:	7fffffff 	.word	0x7fffffff
 80073f8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80073fa:	1c5a      	adds	r2, r3, #1
 80073fc:	921f      	str	r2, [sp, #124]	; 0x7c
 80073fe:	785b      	ldrb	r3, [r3, #1]
 8007400:	2b30      	cmp	r3, #48	; 0x30
 8007402:	d0f9      	beq.n	80073f8 <_strtod_l+0x2d4>
 8007404:	2200      	movs	r2, #0
 8007406:	9207      	str	r2, [sp, #28]
 8007408:	001a      	movs	r2, r3
 800740a:	3a31      	subs	r2, #49	; 0x31
 800740c:	2a08      	cmp	r2, #8
 800740e:	d81a      	bhi.n	8007446 <_strtod_l+0x322>
 8007410:	3b30      	subs	r3, #48	; 0x30
 8007412:	001a      	movs	r2, r3
 8007414:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007416:	9307      	str	r3, [sp, #28]
 8007418:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800741a:	1c59      	adds	r1, r3, #1
 800741c:	911f      	str	r1, [sp, #124]	; 0x7c
 800741e:	785b      	ldrb	r3, [r3, #1]
 8007420:	001d      	movs	r5, r3
 8007422:	3d30      	subs	r5, #48	; 0x30
 8007424:	2d09      	cmp	r5, #9
 8007426:	d939      	bls.n	800749c <_strtod_l+0x378>
 8007428:	9d07      	ldr	r5, [sp, #28]
 800742a:	1b49      	subs	r1, r1, r5
 800742c:	4db0      	ldr	r5, [pc, #704]	; (80076f0 <_strtod_l+0x5cc>)
 800742e:	9507      	str	r5, [sp, #28]
 8007430:	2908      	cmp	r1, #8
 8007432:	dc03      	bgt.n	800743c <_strtod_l+0x318>
 8007434:	9207      	str	r2, [sp, #28]
 8007436:	42aa      	cmp	r2, r5
 8007438:	dd00      	ble.n	800743c <_strtod_l+0x318>
 800743a:	9507      	str	r5, [sp, #28]
 800743c:	2c00      	cmp	r4, #0
 800743e:	d002      	beq.n	8007446 <_strtod_l+0x322>
 8007440:	9a07      	ldr	r2, [sp, #28]
 8007442:	4252      	negs	r2, r2
 8007444:	9207      	str	r2, [sp, #28]
 8007446:	9a06      	ldr	r2, [sp, #24]
 8007448:	2a00      	cmp	r2, #0
 800744a:	d14b      	bne.n	80074e4 <_strtod_l+0x3c0>
 800744c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800744e:	4310      	orrs	r0, r2
 8007450:	d000      	beq.n	8007454 <_strtod_l+0x330>
 8007452:	e6ae      	b.n	80071b2 <_strtod_l+0x8e>
 8007454:	4662      	mov	r2, ip
 8007456:	2a00      	cmp	r2, #0
 8007458:	d000      	beq.n	800745c <_strtod_l+0x338>
 800745a:	e6c9      	b.n	80071f0 <_strtod_l+0xcc>
 800745c:	2b69      	cmp	r3, #105	; 0x69
 800745e:	d025      	beq.n	80074ac <_strtod_l+0x388>
 8007460:	dc21      	bgt.n	80074a6 <_strtod_l+0x382>
 8007462:	2b49      	cmp	r3, #73	; 0x49
 8007464:	d022      	beq.n	80074ac <_strtod_l+0x388>
 8007466:	2b4e      	cmp	r3, #78	; 0x4e
 8007468:	d000      	beq.n	800746c <_strtod_l+0x348>
 800746a:	e6c1      	b.n	80071f0 <_strtod_l+0xcc>
 800746c:	49a1      	ldr	r1, [pc, #644]	; (80076f4 <_strtod_l+0x5d0>)
 800746e:	a81f      	add	r0, sp, #124	; 0x7c
 8007470:	f001 ff56 	bl	8009320 <__match>
 8007474:	2800      	cmp	r0, #0
 8007476:	d100      	bne.n	800747a <_strtod_l+0x356>
 8007478:	e6ba      	b.n	80071f0 <_strtod_l+0xcc>
 800747a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	2b28      	cmp	r3, #40	; 0x28
 8007480:	d12a      	bne.n	80074d8 <_strtod_l+0x3b4>
 8007482:	499d      	ldr	r1, [pc, #628]	; (80076f8 <_strtod_l+0x5d4>)
 8007484:	aa22      	add	r2, sp, #136	; 0x88
 8007486:	a81f      	add	r0, sp, #124	; 0x7c
 8007488:	f001 ff5e 	bl	8009348 <__hexnan>
 800748c:	2805      	cmp	r0, #5
 800748e:	d123      	bne.n	80074d8 <_strtod_l+0x3b4>
 8007490:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007492:	4a9a      	ldr	r2, [pc, #616]	; (80076fc <_strtod_l+0x5d8>)
 8007494:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8007496:	431a      	orrs	r2, r3
 8007498:	0017      	movs	r7, r2
 800749a:	e68a      	b.n	80071b2 <_strtod_l+0x8e>
 800749c:	210a      	movs	r1, #10
 800749e:	434a      	muls	r2, r1
 80074a0:	18d2      	adds	r2, r2, r3
 80074a2:	3a30      	subs	r2, #48	; 0x30
 80074a4:	e7b8      	b.n	8007418 <_strtod_l+0x2f4>
 80074a6:	2b6e      	cmp	r3, #110	; 0x6e
 80074a8:	d0e0      	beq.n	800746c <_strtod_l+0x348>
 80074aa:	e6a1      	b.n	80071f0 <_strtod_l+0xcc>
 80074ac:	4994      	ldr	r1, [pc, #592]	; (8007700 <_strtod_l+0x5dc>)
 80074ae:	a81f      	add	r0, sp, #124	; 0x7c
 80074b0:	f001 ff36 	bl	8009320 <__match>
 80074b4:	2800      	cmp	r0, #0
 80074b6:	d100      	bne.n	80074ba <_strtod_l+0x396>
 80074b8:	e69a      	b.n	80071f0 <_strtod_l+0xcc>
 80074ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80074bc:	4991      	ldr	r1, [pc, #580]	; (8007704 <_strtod_l+0x5e0>)
 80074be:	3b01      	subs	r3, #1
 80074c0:	a81f      	add	r0, sp, #124	; 0x7c
 80074c2:	931f      	str	r3, [sp, #124]	; 0x7c
 80074c4:	f001 ff2c 	bl	8009320 <__match>
 80074c8:	2800      	cmp	r0, #0
 80074ca:	d102      	bne.n	80074d2 <_strtod_l+0x3ae>
 80074cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80074ce:	3301      	adds	r3, #1
 80074d0:	931f      	str	r3, [sp, #124]	; 0x7c
 80074d2:	2600      	movs	r6, #0
 80074d4:	4f89      	ldr	r7, [pc, #548]	; (80076fc <_strtod_l+0x5d8>)
 80074d6:	e66c      	b.n	80071b2 <_strtod_l+0x8e>
 80074d8:	488b      	ldr	r0, [pc, #556]	; (8007708 <_strtod_l+0x5e4>)
 80074da:	f002 fee3 	bl	800a2a4 <nan>
 80074de:	0006      	movs	r6, r0
 80074e0:	000f      	movs	r7, r1
 80074e2:	e666      	b.n	80071b2 <_strtod_l+0x8e>
 80074e4:	9b07      	ldr	r3, [sp, #28]
 80074e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074e8:	1a9b      	subs	r3, r3, r2
 80074ea:	930a      	str	r3, [sp, #40]	; 0x28
 80074ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d101      	bne.n	80074f6 <_strtod_l+0x3d2>
 80074f2:	9b06      	ldr	r3, [sp, #24]
 80074f4:	9309      	str	r3, [sp, #36]	; 0x24
 80074f6:	9c06      	ldr	r4, [sp, #24]
 80074f8:	2c10      	cmp	r4, #16
 80074fa:	dd00      	ble.n	80074fe <_strtod_l+0x3da>
 80074fc:	2410      	movs	r4, #16
 80074fe:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007500:	f7fa fe02 	bl	8002108 <__aeabi_ui2d>
 8007504:	9b06      	ldr	r3, [sp, #24]
 8007506:	0006      	movs	r6, r0
 8007508:	000f      	movs	r7, r1
 800750a:	2b09      	cmp	r3, #9
 800750c:	dd15      	ble.n	800753a <_strtod_l+0x416>
 800750e:	0022      	movs	r2, r4
 8007510:	4b7e      	ldr	r3, [pc, #504]	; (800770c <_strtod_l+0x5e8>)
 8007512:	3a09      	subs	r2, #9
 8007514:	00d2      	lsls	r2, r2, #3
 8007516:	189b      	adds	r3, r3, r2
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	f7f9 ff72 	bl	8001404 <__aeabi_dmul>
 8007520:	0006      	movs	r6, r0
 8007522:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007524:	000f      	movs	r7, r1
 8007526:	f7fa fdef 	bl	8002108 <__aeabi_ui2d>
 800752a:	0002      	movs	r2, r0
 800752c:	000b      	movs	r3, r1
 800752e:	0030      	movs	r0, r6
 8007530:	0039      	movs	r1, r7
 8007532:	f7f9 f829 	bl	8000588 <__aeabi_dadd>
 8007536:	0006      	movs	r6, r0
 8007538:	000f      	movs	r7, r1
 800753a:	9b06      	ldr	r3, [sp, #24]
 800753c:	2b0f      	cmp	r3, #15
 800753e:	dc39      	bgt.n	80075b4 <_strtod_l+0x490>
 8007540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007542:	2b00      	cmp	r3, #0
 8007544:	d100      	bne.n	8007548 <_strtod_l+0x424>
 8007546:	e634      	b.n	80071b2 <_strtod_l+0x8e>
 8007548:	dd24      	ble.n	8007594 <_strtod_l+0x470>
 800754a:	2b16      	cmp	r3, #22
 800754c:	dc09      	bgt.n	8007562 <_strtod_l+0x43e>
 800754e:	496f      	ldr	r1, [pc, #444]	; (800770c <_strtod_l+0x5e8>)
 8007550:	00db      	lsls	r3, r3, #3
 8007552:	18c9      	adds	r1, r1, r3
 8007554:	0032      	movs	r2, r6
 8007556:	6808      	ldr	r0, [r1, #0]
 8007558:	6849      	ldr	r1, [r1, #4]
 800755a:	003b      	movs	r3, r7
 800755c:	f7f9 ff52 	bl	8001404 <__aeabi_dmul>
 8007560:	e7bd      	b.n	80074de <_strtod_l+0x3ba>
 8007562:	2325      	movs	r3, #37	; 0x25
 8007564:	9a06      	ldr	r2, [sp, #24]
 8007566:	1a9b      	subs	r3, r3, r2
 8007568:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800756a:	4293      	cmp	r3, r2
 800756c:	db22      	blt.n	80075b4 <_strtod_l+0x490>
 800756e:	240f      	movs	r4, #15
 8007570:	9b06      	ldr	r3, [sp, #24]
 8007572:	4d66      	ldr	r5, [pc, #408]	; (800770c <_strtod_l+0x5e8>)
 8007574:	1ae4      	subs	r4, r4, r3
 8007576:	00e1      	lsls	r1, r4, #3
 8007578:	1869      	adds	r1, r5, r1
 800757a:	0032      	movs	r2, r6
 800757c:	6808      	ldr	r0, [r1, #0]
 800757e:	6849      	ldr	r1, [r1, #4]
 8007580:	003b      	movs	r3, r7
 8007582:	f7f9 ff3f 	bl	8001404 <__aeabi_dmul>
 8007586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007588:	1b1c      	subs	r4, r3, r4
 800758a:	00e4      	lsls	r4, r4, #3
 800758c:	192c      	adds	r4, r5, r4
 800758e:	6822      	ldr	r2, [r4, #0]
 8007590:	6863      	ldr	r3, [r4, #4]
 8007592:	e7e3      	b.n	800755c <_strtod_l+0x438>
 8007594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007596:	3316      	adds	r3, #22
 8007598:	db0c      	blt.n	80075b4 <_strtod_l+0x490>
 800759a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800759c:	9a07      	ldr	r2, [sp, #28]
 800759e:	0030      	movs	r0, r6
 80075a0:	1a9a      	subs	r2, r3, r2
 80075a2:	4b5a      	ldr	r3, [pc, #360]	; (800770c <_strtod_l+0x5e8>)
 80075a4:	00d2      	lsls	r2, r2, #3
 80075a6:	189b      	adds	r3, r3, r2
 80075a8:	0039      	movs	r1, r7
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	f7f9 fb27 	bl	8000c00 <__aeabi_ddiv>
 80075b2:	e794      	b.n	80074de <_strtod_l+0x3ba>
 80075b4:	9b06      	ldr	r3, [sp, #24]
 80075b6:	1b1c      	subs	r4, r3, r4
 80075b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075ba:	18e4      	adds	r4, r4, r3
 80075bc:	2c00      	cmp	r4, #0
 80075be:	dd72      	ble.n	80076a6 <_strtod_l+0x582>
 80075c0:	230f      	movs	r3, #15
 80075c2:	0021      	movs	r1, r4
 80075c4:	4019      	ands	r1, r3
 80075c6:	421c      	tst	r4, r3
 80075c8:	d00a      	beq.n	80075e0 <_strtod_l+0x4bc>
 80075ca:	00cb      	lsls	r3, r1, #3
 80075cc:	494f      	ldr	r1, [pc, #316]	; (800770c <_strtod_l+0x5e8>)
 80075ce:	0032      	movs	r2, r6
 80075d0:	18c9      	adds	r1, r1, r3
 80075d2:	6808      	ldr	r0, [r1, #0]
 80075d4:	6849      	ldr	r1, [r1, #4]
 80075d6:	003b      	movs	r3, r7
 80075d8:	f7f9 ff14 	bl	8001404 <__aeabi_dmul>
 80075dc:	0006      	movs	r6, r0
 80075de:	000f      	movs	r7, r1
 80075e0:	230f      	movs	r3, #15
 80075e2:	439c      	bics	r4, r3
 80075e4:	d04a      	beq.n	800767c <_strtod_l+0x558>
 80075e6:	3326      	adds	r3, #38	; 0x26
 80075e8:	33ff      	adds	r3, #255	; 0xff
 80075ea:	429c      	cmp	r4, r3
 80075ec:	dd22      	ble.n	8007634 <_strtod_l+0x510>
 80075ee:	2300      	movs	r3, #0
 80075f0:	9306      	str	r3, [sp, #24]
 80075f2:	9307      	str	r3, [sp, #28]
 80075f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80075f6:	9309      	str	r3, [sp, #36]	; 0x24
 80075f8:	2322      	movs	r3, #34	; 0x22
 80075fa:	2600      	movs	r6, #0
 80075fc:	9a05      	ldr	r2, [sp, #20]
 80075fe:	4f3f      	ldr	r7, [pc, #252]	; (80076fc <_strtod_l+0x5d8>)
 8007600:	6013      	str	r3, [r2, #0]
 8007602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007604:	42b3      	cmp	r3, r6
 8007606:	d100      	bne.n	800760a <_strtod_l+0x4e6>
 8007608:	e5d3      	b.n	80071b2 <_strtod_l+0x8e>
 800760a:	9920      	ldr	r1, [sp, #128]	; 0x80
 800760c:	9805      	ldr	r0, [sp, #20]
 800760e:	f001 ffd7 	bl	80095c0 <_Bfree>
 8007612:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007614:	9805      	ldr	r0, [sp, #20]
 8007616:	f001 ffd3 	bl	80095c0 <_Bfree>
 800761a:	9907      	ldr	r1, [sp, #28]
 800761c:	9805      	ldr	r0, [sp, #20]
 800761e:	f001 ffcf 	bl	80095c0 <_Bfree>
 8007622:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007624:	9805      	ldr	r0, [sp, #20]
 8007626:	f001 ffcb 	bl	80095c0 <_Bfree>
 800762a:	9906      	ldr	r1, [sp, #24]
 800762c:	9805      	ldr	r0, [sp, #20]
 800762e:	f001 ffc7 	bl	80095c0 <_Bfree>
 8007632:	e5be      	b.n	80071b2 <_strtod_l+0x8e>
 8007634:	2300      	movs	r3, #0
 8007636:	0030      	movs	r0, r6
 8007638:	0039      	movs	r1, r7
 800763a:	4d35      	ldr	r5, [pc, #212]	; (8007710 <_strtod_l+0x5ec>)
 800763c:	1124      	asrs	r4, r4, #4
 800763e:	9308      	str	r3, [sp, #32]
 8007640:	2c01      	cmp	r4, #1
 8007642:	dc1e      	bgt.n	8007682 <_strtod_l+0x55e>
 8007644:	2b00      	cmp	r3, #0
 8007646:	d001      	beq.n	800764c <_strtod_l+0x528>
 8007648:	0006      	movs	r6, r0
 800764a:	000f      	movs	r7, r1
 800764c:	4b31      	ldr	r3, [pc, #196]	; (8007714 <_strtod_l+0x5f0>)
 800764e:	0032      	movs	r2, r6
 8007650:	18ff      	adds	r7, r7, r3
 8007652:	9b08      	ldr	r3, [sp, #32]
 8007654:	00dd      	lsls	r5, r3, #3
 8007656:	4b2e      	ldr	r3, [pc, #184]	; (8007710 <_strtod_l+0x5ec>)
 8007658:	195d      	adds	r5, r3, r5
 800765a:	6828      	ldr	r0, [r5, #0]
 800765c:	6869      	ldr	r1, [r5, #4]
 800765e:	003b      	movs	r3, r7
 8007660:	f7f9 fed0 	bl	8001404 <__aeabi_dmul>
 8007664:	4b25      	ldr	r3, [pc, #148]	; (80076fc <_strtod_l+0x5d8>)
 8007666:	4a2c      	ldr	r2, [pc, #176]	; (8007718 <_strtod_l+0x5f4>)
 8007668:	0006      	movs	r6, r0
 800766a:	400b      	ands	r3, r1
 800766c:	4293      	cmp	r3, r2
 800766e:	d8be      	bhi.n	80075ee <_strtod_l+0x4ca>
 8007670:	4a2a      	ldr	r2, [pc, #168]	; (800771c <_strtod_l+0x5f8>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d913      	bls.n	800769e <_strtod_l+0x57a>
 8007676:	2601      	movs	r6, #1
 8007678:	4f29      	ldr	r7, [pc, #164]	; (8007720 <_strtod_l+0x5fc>)
 800767a:	4276      	negs	r6, r6
 800767c:	2300      	movs	r3, #0
 800767e:	9308      	str	r3, [sp, #32]
 8007680:	e087      	b.n	8007792 <_strtod_l+0x66e>
 8007682:	2201      	movs	r2, #1
 8007684:	4214      	tst	r4, r2
 8007686:	d004      	beq.n	8007692 <_strtod_l+0x56e>
 8007688:	682a      	ldr	r2, [r5, #0]
 800768a:	686b      	ldr	r3, [r5, #4]
 800768c:	f7f9 feba 	bl	8001404 <__aeabi_dmul>
 8007690:	2301      	movs	r3, #1
 8007692:	9a08      	ldr	r2, [sp, #32]
 8007694:	1064      	asrs	r4, r4, #1
 8007696:	3201      	adds	r2, #1
 8007698:	9208      	str	r2, [sp, #32]
 800769a:	3508      	adds	r5, #8
 800769c:	e7d0      	b.n	8007640 <_strtod_l+0x51c>
 800769e:	23d4      	movs	r3, #212	; 0xd4
 80076a0:	049b      	lsls	r3, r3, #18
 80076a2:	18cf      	adds	r7, r1, r3
 80076a4:	e7ea      	b.n	800767c <_strtod_l+0x558>
 80076a6:	2c00      	cmp	r4, #0
 80076a8:	d0e8      	beq.n	800767c <_strtod_l+0x558>
 80076aa:	4264      	negs	r4, r4
 80076ac:	220f      	movs	r2, #15
 80076ae:	0023      	movs	r3, r4
 80076b0:	4013      	ands	r3, r2
 80076b2:	4214      	tst	r4, r2
 80076b4:	d00a      	beq.n	80076cc <_strtod_l+0x5a8>
 80076b6:	00da      	lsls	r2, r3, #3
 80076b8:	4b14      	ldr	r3, [pc, #80]	; (800770c <_strtod_l+0x5e8>)
 80076ba:	0030      	movs	r0, r6
 80076bc:	189b      	adds	r3, r3, r2
 80076be:	0039      	movs	r1, r7
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	f7f9 fa9c 	bl	8000c00 <__aeabi_ddiv>
 80076c8:	0006      	movs	r6, r0
 80076ca:	000f      	movs	r7, r1
 80076cc:	1124      	asrs	r4, r4, #4
 80076ce:	d0d5      	beq.n	800767c <_strtod_l+0x558>
 80076d0:	2c1f      	cmp	r4, #31
 80076d2:	dd27      	ble.n	8007724 <_strtod_l+0x600>
 80076d4:	2300      	movs	r3, #0
 80076d6:	9306      	str	r3, [sp, #24]
 80076d8:	9307      	str	r3, [sp, #28]
 80076da:	930b      	str	r3, [sp, #44]	; 0x2c
 80076dc:	9309      	str	r3, [sp, #36]	; 0x24
 80076de:	2322      	movs	r3, #34	; 0x22
 80076e0:	9a05      	ldr	r2, [sp, #20]
 80076e2:	2600      	movs	r6, #0
 80076e4:	6013      	str	r3, [r2, #0]
 80076e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076e8:	2700      	movs	r7, #0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d18d      	bne.n	800760a <_strtod_l+0x4e6>
 80076ee:	e560      	b.n	80071b2 <_strtod_l+0x8e>
 80076f0:	00004e1f 	.word	0x00004e1f
 80076f4:	0800abc5 	.word	0x0800abc5
 80076f8:	0800ac08 	.word	0x0800ac08
 80076fc:	7ff00000 	.word	0x7ff00000
 8007700:	0800abbd 	.word	0x0800abbd
 8007704:	0800ad4c 	.word	0x0800ad4c
 8007708:	0800aff8 	.word	0x0800aff8
 800770c:	0800aed8 	.word	0x0800aed8
 8007710:	0800aeb0 	.word	0x0800aeb0
 8007714:	fcb00000 	.word	0xfcb00000
 8007718:	7ca00000 	.word	0x7ca00000
 800771c:	7c900000 	.word	0x7c900000
 8007720:	7fefffff 	.word	0x7fefffff
 8007724:	2310      	movs	r3, #16
 8007726:	0022      	movs	r2, r4
 8007728:	401a      	ands	r2, r3
 800772a:	9208      	str	r2, [sp, #32]
 800772c:	421c      	tst	r4, r3
 800772e:	d001      	beq.n	8007734 <_strtod_l+0x610>
 8007730:	335a      	adds	r3, #90	; 0x5a
 8007732:	9308      	str	r3, [sp, #32]
 8007734:	0030      	movs	r0, r6
 8007736:	0039      	movs	r1, r7
 8007738:	2300      	movs	r3, #0
 800773a:	4dc5      	ldr	r5, [pc, #788]	; (8007a50 <_strtod_l+0x92c>)
 800773c:	2201      	movs	r2, #1
 800773e:	4214      	tst	r4, r2
 8007740:	d004      	beq.n	800774c <_strtod_l+0x628>
 8007742:	682a      	ldr	r2, [r5, #0]
 8007744:	686b      	ldr	r3, [r5, #4]
 8007746:	f7f9 fe5d 	bl	8001404 <__aeabi_dmul>
 800774a:	2301      	movs	r3, #1
 800774c:	1064      	asrs	r4, r4, #1
 800774e:	3508      	adds	r5, #8
 8007750:	2c00      	cmp	r4, #0
 8007752:	d1f3      	bne.n	800773c <_strtod_l+0x618>
 8007754:	2b00      	cmp	r3, #0
 8007756:	d001      	beq.n	800775c <_strtod_l+0x638>
 8007758:	0006      	movs	r6, r0
 800775a:	000f      	movs	r7, r1
 800775c:	9b08      	ldr	r3, [sp, #32]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00f      	beq.n	8007782 <_strtod_l+0x65e>
 8007762:	236b      	movs	r3, #107	; 0x6b
 8007764:	007a      	lsls	r2, r7, #1
 8007766:	0d52      	lsrs	r2, r2, #21
 8007768:	0039      	movs	r1, r7
 800776a:	1a9b      	subs	r3, r3, r2
 800776c:	2b00      	cmp	r3, #0
 800776e:	dd08      	ble.n	8007782 <_strtod_l+0x65e>
 8007770:	2b1f      	cmp	r3, #31
 8007772:	dc00      	bgt.n	8007776 <_strtod_l+0x652>
 8007774:	e124      	b.n	80079c0 <_strtod_l+0x89c>
 8007776:	2600      	movs	r6, #0
 8007778:	2b34      	cmp	r3, #52	; 0x34
 800777a:	dc00      	bgt.n	800777e <_strtod_l+0x65a>
 800777c:	e119      	b.n	80079b2 <_strtod_l+0x88e>
 800777e:	27dc      	movs	r7, #220	; 0xdc
 8007780:	04bf      	lsls	r7, r7, #18
 8007782:	2200      	movs	r2, #0
 8007784:	2300      	movs	r3, #0
 8007786:	0030      	movs	r0, r6
 8007788:	0039      	movs	r1, r7
 800778a:	f7f8 fe5f 	bl	800044c <__aeabi_dcmpeq>
 800778e:	2800      	cmp	r0, #0
 8007790:	d1a0      	bne.n	80076d4 <_strtod_l+0x5b0>
 8007792:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007794:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007796:	9300      	str	r3, [sp, #0]
 8007798:	9910      	ldr	r1, [sp, #64]	; 0x40
 800779a:	9b06      	ldr	r3, [sp, #24]
 800779c:	9805      	ldr	r0, [sp, #20]
 800779e:	f001 ff77 	bl	8009690 <__s2b>
 80077a2:	900b      	str	r0, [sp, #44]	; 0x2c
 80077a4:	2800      	cmp	r0, #0
 80077a6:	d100      	bne.n	80077aa <_strtod_l+0x686>
 80077a8:	e721      	b.n	80075ee <_strtod_l+0x4ca>
 80077aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077ac:	9907      	ldr	r1, [sp, #28]
 80077ae:	17da      	asrs	r2, r3, #31
 80077b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077b2:	1a5b      	subs	r3, r3, r1
 80077b4:	401a      	ands	r2, r3
 80077b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077b8:	9215      	str	r2, [sp, #84]	; 0x54
 80077ba:	43db      	mvns	r3, r3
 80077bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077be:	17db      	asrs	r3, r3, #31
 80077c0:	401a      	ands	r2, r3
 80077c2:	2300      	movs	r3, #0
 80077c4:	921a      	str	r2, [sp, #104]	; 0x68
 80077c6:	9306      	str	r3, [sp, #24]
 80077c8:	9307      	str	r3, [sp, #28]
 80077ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077cc:	9805      	ldr	r0, [sp, #20]
 80077ce:	6859      	ldr	r1, [r3, #4]
 80077d0:	f001 feb2 	bl	8009538 <_Balloc>
 80077d4:	9009      	str	r0, [sp, #36]	; 0x24
 80077d6:	2800      	cmp	r0, #0
 80077d8:	d100      	bne.n	80077dc <_strtod_l+0x6b8>
 80077da:	e70d      	b.n	80075f8 <_strtod_l+0x4d4>
 80077dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	310c      	adds	r1, #12
 80077e4:	1c9a      	adds	r2, r3, #2
 80077e6:	0092      	lsls	r2, r2, #2
 80077e8:	300c      	adds	r0, #12
 80077ea:	930c      	str	r3, [sp, #48]	; 0x30
 80077ec:	f7fe fc6d 	bl	80060ca <memcpy>
 80077f0:	ab22      	add	r3, sp, #136	; 0x88
 80077f2:	9301      	str	r3, [sp, #4]
 80077f4:	ab21      	add	r3, sp, #132	; 0x84
 80077f6:	9300      	str	r3, [sp, #0]
 80077f8:	0032      	movs	r2, r6
 80077fa:	003b      	movs	r3, r7
 80077fc:	9805      	ldr	r0, [sp, #20]
 80077fe:	9612      	str	r6, [sp, #72]	; 0x48
 8007800:	9713      	str	r7, [sp, #76]	; 0x4c
 8007802:	f002 fa91 	bl	8009d28 <__d2b>
 8007806:	9020      	str	r0, [sp, #128]	; 0x80
 8007808:	2800      	cmp	r0, #0
 800780a:	d100      	bne.n	800780e <_strtod_l+0x6ea>
 800780c:	e6f4      	b.n	80075f8 <_strtod_l+0x4d4>
 800780e:	2101      	movs	r1, #1
 8007810:	9805      	ldr	r0, [sp, #20]
 8007812:	f001 ffd1 	bl	80097b8 <__i2b>
 8007816:	9007      	str	r0, [sp, #28]
 8007818:	2800      	cmp	r0, #0
 800781a:	d100      	bne.n	800781e <_strtod_l+0x6fa>
 800781c:	e6ec      	b.n	80075f8 <_strtod_l+0x4d4>
 800781e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007820:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007822:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007824:	1ad4      	subs	r4, r2, r3
 8007826:	2b00      	cmp	r3, #0
 8007828:	db01      	blt.n	800782e <_strtod_l+0x70a>
 800782a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800782c:	195d      	adds	r5, r3, r5
 800782e:	9908      	ldr	r1, [sp, #32]
 8007830:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007832:	1a5b      	subs	r3, r3, r1
 8007834:	2136      	movs	r1, #54	; 0x36
 8007836:	189b      	adds	r3, r3, r2
 8007838:	1a8a      	subs	r2, r1, r2
 800783a:	4986      	ldr	r1, [pc, #536]	; (8007a54 <_strtod_l+0x930>)
 800783c:	2001      	movs	r0, #1
 800783e:	468c      	mov	ip, r1
 8007840:	2100      	movs	r1, #0
 8007842:	3b01      	subs	r3, #1
 8007844:	9110      	str	r1, [sp, #64]	; 0x40
 8007846:	9014      	str	r0, [sp, #80]	; 0x50
 8007848:	4563      	cmp	r3, ip
 800784a:	da07      	bge.n	800785c <_strtod_l+0x738>
 800784c:	4661      	mov	r1, ip
 800784e:	1ac9      	subs	r1, r1, r3
 8007850:	1a52      	subs	r2, r2, r1
 8007852:	291f      	cmp	r1, #31
 8007854:	dd00      	ble.n	8007858 <_strtod_l+0x734>
 8007856:	e0b8      	b.n	80079ca <_strtod_l+0x8a6>
 8007858:	4088      	lsls	r0, r1
 800785a:	9014      	str	r0, [sp, #80]	; 0x50
 800785c:	18ab      	adds	r3, r5, r2
 800785e:	930c      	str	r3, [sp, #48]	; 0x30
 8007860:	18a4      	adds	r4, r4, r2
 8007862:	9b08      	ldr	r3, [sp, #32]
 8007864:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007866:	191c      	adds	r4, r3, r4
 8007868:	002b      	movs	r3, r5
 800786a:	4295      	cmp	r5, r2
 800786c:	dd00      	ble.n	8007870 <_strtod_l+0x74c>
 800786e:	0013      	movs	r3, r2
 8007870:	42a3      	cmp	r3, r4
 8007872:	dd00      	ble.n	8007876 <_strtod_l+0x752>
 8007874:	0023      	movs	r3, r4
 8007876:	2b00      	cmp	r3, #0
 8007878:	dd04      	ble.n	8007884 <_strtod_l+0x760>
 800787a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800787c:	1ae4      	subs	r4, r4, r3
 800787e:	1ad2      	subs	r2, r2, r3
 8007880:	920c      	str	r2, [sp, #48]	; 0x30
 8007882:	1aed      	subs	r5, r5, r3
 8007884:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007886:	2b00      	cmp	r3, #0
 8007888:	dd17      	ble.n	80078ba <_strtod_l+0x796>
 800788a:	001a      	movs	r2, r3
 800788c:	9907      	ldr	r1, [sp, #28]
 800788e:	9805      	ldr	r0, [sp, #20]
 8007890:	f002 f858 	bl	8009944 <__pow5mult>
 8007894:	9007      	str	r0, [sp, #28]
 8007896:	2800      	cmp	r0, #0
 8007898:	d100      	bne.n	800789c <_strtod_l+0x778>
 800789a:	e6ad      	b.n	80075f8 <_strtod_l+0x4d4>
 800789c:	0001      	movs	r1, r0
 800789e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80078a0:	9805      	ldr	r0, [sp, #20]
 80078a2:	f001 ff9f 	bl	80097e4 <__multiply>
 80078a6:	900f      	str	r0, [sp, #60]	; 0x3c
 80078a8:	2800      	cmp	r0, #0
 80078aa:	d100      	bne.n	80078ae <_strtod_l+0x78a>
 80078ac:	e6a4      	b.n	80075f8 <_strtod_l+0x4d4>
 80078ae:	9920      	ldr	r1, [sp, #128]	; 0x80
 80078b0:	9805      	ldr	r0, [sp, #20]
 80078b2:	f001 fe85 	bl	80095c0 <_Bfree>
 80078b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078b8:	9320      	str	r3, [sp, #128]	; 0x80
 80078ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078bc:	2b00      	cmp	r3, #0
 80078be:	dd00      	ble.n	80078c2 <_strtod_l+0x79e>
 80078c0:	e089      	b.n	80079d6 <_strtod_l+0x8b2>
 80078c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	dd08      	ble.n	80078da <_strtod_l+0x7b6>
 80078c8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80078ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078cc:	9805      	ldr	r0, [sp, #20]
 80078ce:	f002 f839 	bl	8009944 <__pow5mult>
 80078d2:	9009      	str	r0, [sp, #36]	; 0x24
 80078d4:	2800      	cmp	r0, #0
 80078d6:	d100      	bne.n	80078da <_strtod_l+0x7b6>
 80078d8:	e68e      	b.n	80075f8 <_strtod_l+0x4d4>
 80078da:	2c00      	cmp	r4, #0
 80078dc:	dd08      	ble.n	80078f0 <_strtod_l+0x7cc>
 80078de:	0022      	movs	r2, r4
 80078e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078e2:	9805      	ldr	r0, [sp, #20]
 80078e4:	f002 f88a 	bl	80099fc <__lshift>
 80078e8:	9009      	str	r0, [sp, #36]	; 0x24
 80078ea:	2800      	cmp	r0, #0
 80078ec:	d100      	bne.n	80078f0 <_strtod_l+0x7cc>
 80078ee:	e683      	b.n	80075f8 <_strtod_l+0x4d4>
 80078f0:	2d00      	cmp	r5, #0
 80078f2:	dd08      	ble.n	8007906 <_strtod_l+0x7e2>
 80078f4:	002a      	movs	r2, r5
 80078f6:	9907      	ldr	r1, [sp, #28]
 80078f8:	9805      	ldr	r0, [sp, #20]
 80078fa:	f002 f87f 	bl	80099fc <__lshift>
 80078fe:	9007      	str	r0, [sp, #28]
 8007900:	2800      	cmp	r0, #0
 8007902:	d100      	bne.n	8007906 <_strtod_l+0x7e2>
 8007904:	e678      	b.n	80075f8 <_strtod_l+0x4d4>
 8007906:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007908:	9920      	ldr	r1, [sp, #128]	; 0x80
 800790a:	9805      	ldr	r0, [sp, #20]
 800790c:	f002 f900 	bl	8009b10 <__mdiff>
 8007910:	9006      	str	r0, [sp, #24]
 8007912:	2800      	cmp	r0, #0
 8007914:	d100      	bne.n	8007918 <_strtod_l+0x7f4>
 8007916:	e66f      	b.n	80075f8 <_strtod_l+0x4d4>
 8007918:	2200      	movs	r2, #0
 800791a:	68c3      	ldr	r3, [r0, #12]
 800791c:	9907      	ldr	r1, [sp, #28]
 800791e:	60c2      	str	r2, [r0, #12]
 8007920:	930f      	str	r3, [sp, #60]	; 0x3c
 8007922:	f002 f8d9 	bl	8009ad8 <__mcmp>
 8007926:	2800      	cmp	r0, #0
 8007928:	da5f      	bge.n	80079ea <_strtod_l+0x8c6>
 800792a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800792c:	4333      	orrs	r3, r6
 800792e:	d000      	beq.n	8007932 <_strtod_l+0x80e>
 8007930:	e08a      	b.n	8007a48 <_strtod_l+0x924>
 8007932:	033b      	lsls	r3, r7, #12
 8007934:	d000      	beq.n	8007938 <_strtod_l+0x814>
 8007936:	e087      	b.n	8007a48 <_strtod_l+0x924>
 8007938:	22d6      	movs	r2, #214	; 0xd6
 800793a:	4b47      	ldr	r3, [pc, #284]	; (8007a58 <_strtod_l+0x934>)
 800793c:	04d2      	lsls	r2, r2, #19
 800793e:	403b      	ands	r3, r7
 8007940:	4293      	cmp	r3, r2
 8007942:	d800      	bhi.n	8007946 <_strtod_l+0x822>
 8007944:	e080      	b.n	8007a48 <_strtod_l+0x924>
 8007946:	9b06      	ldr	r3, [sp, #24]
 8007948:	695b      	ldr	r3, [r3, #20]
 800794a:	930a      	str	r3, [sp, #40]	; 0x28
 800794c:	2b00      	cmp	r3, #0
 800794e:	d104      	bne.n	800795a <_strtod_l+0x836>
 8007950:	9b06      	ldr	r3, [sp, #24]
 8007952:	691b      	ldr	r3, [r3, #16]
 8007954:	930a      	str	r3, [sp, #40]	; 0x28
 8007956:	2b01      	cmp	r3, #1
 8007958:	dd76      	ble.n	8007a48 <_strtod_l+0x924>
 800795a:	9906      	ldr	r1, [sp, #24]
 800795c:	2201      	movs	r2, #1
 800795e:	9805      	ldr	r0, [sp, #20]
 8007960:	f002 f84c 	bl	80099fc <__lshift>
 8007964:	9907      	ldr	r1, [sp, #28]
 8007966:	9006      	str	r0, [sp, #24]
 8007968:	f002 f8b6 	bl	8009ad8 <__mcmp>
 800796c:	2800      	cmp	r0, #0
 800796e:	dd6b      	ble.n	8007a48 <_strtod_l+0x924>
 8007970:	9908      	ldr	r1, [sp, #32]
 8007972:	003b      	movs	r3, r7
 8007974:	4a38      	ldr	r2, [pc, #224]	; (8007a58 <_strtod_l+0x934>)
 8007976:	2900      	cmp	r1, #0
 8007978:	d100      	bne.n	800797c <_strtod_l+0x858>
 800797a:	e092      	b.n	8007aa2 <_strtod_l+0x97e>
 800797c:	0011      	movs	r1, r2
 800797e:	20d6      	movs	r0, #214	; 0xd6
 8007980:	4039      	ands	r1, r7
 8007982:	04c0      	lsls	r0, r0, #19
 8007984:	4281      	cmp	r1, r0
 8007986:	dd00      	ble.n	800798a <_strtod_l+0x866>
 8007988:	e08b      	b.n	8007aa2 <_strtod_l+0x97e>
 800798a:	23dc      	movs	r3, #220	; 0xdc
 800798c:	049b      	lsls	r3, r3, #18
 800798e:	4299      	cmp	r1, r3
 8007990:	dc00      	bgt.n	8007994 <_strtod_l+0x870>
 8007992:	e6a4      	b.n	80076de <_strtod_l+0x5ba>
 8007994:	0030      	movs	r0, r6
 8007996:	0039      	movs	r1, r7
 8007998:	2200      	movs	r2, #0
 800799a:	4b30      	ldr	r3, [pc, #192]	; (8007a5c <_strtod_l+0x938>)
 800799c:	f7f9 fd32 	bl	8001404 <__aeabi_dmul>
 80079a0:	0006      	movs	r6, r0
 80079a2:	000f      	movs	r7, r1
 80079a4:	4308      	orrs	r0, r1
 80079a6:	d000      	beq.n	80079aa <_strtod_l+0x886>
 80079a8:	e62f      	b.n	800760a <_strtod_l+0x4e6>
 80079aa:	2322      	movs	r3, #34	; 0x22
 80079ac:	9a05      	ldr	r2, [sp, #20]
 80079ae:	6013      	str	r3, [r2, #0]
 80079b0:	e62b      	b.n	800760a <_strtod_l+0x4e6>
 80079b2:	234b      	movs	r3, #75	; 0x4b
 80079b4:	1a9a      	subs	r2, r3, r2
 80079b6:	3b4c      	subs	r3, #76	; 0x4c
 80079b8:	4093      	lsls	r3, r2
 80079ba:	4019      	ands	r1, r3
 80079bc:	000f      	movs	r7, r1
 80079be:	e6e0      	b.n	8007782 <_strtod_l+0x65e>
 80079c0:	2201      	movs	r2, #1
 80079c2:	4252      	negs	r2, r2
 80079c4:	409a      	lsls	r2, r3
 80079c6:	4016      	ands	r6, r2
 80079c8:	e6db      	b.n	8007782 <_strtod_l+0x65e>
 80079ca:	4925      	ldr	r1, [pc, #148]	; (8007a60 <_strtod_l+0x93c>)
 80079cc:	1acb      	subs	r3, r1, r3
 80079ce:	0001      	movs	r1, r0
 80079d0:	4099      	lsls	r1, r3
 80079d2:	9110      	str	r1, [sp, #64]	; 0x40
 80079d4:	e741      	b.n	800785a <_strtod_l+0x736>
 80079d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80079d8:	9920      	ldr	r1, [sp, #128]	; 0x80
 80079da:	9805      	ldr	r0, [sp, #20]
 80079dc:	f002 f80e 	bl	80099fc <__lshift>
 80079e0:	9020      	str	r0, [sp, #128]	; 0x80
 80079e2:	2800      	cmp	r0, #0
 80079e4:	d000      	beq.n	80079e8 <_strtod_l+0x8c4>
 80079e6:	e76c      	b.n	80078c2 <_strtod_l+0x79e>
 80079e8:	e606      	b.n	80075f8 <_strtod_l+0x4d4>
 80079ea:	970c      	str	r7, [sp, #48]	; 0x30
 80079ec:	2800      	cmp	r0, #0
 80079ee:	d176      	bne.n	8007ade <_strtod_l+0x9ba>
 80079f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80079f2:	033b      	lsls	r3, r7, #12
 80079f4:	0b1b      	lsrs	r3, r3, #12
 80079f6:	2a00      	cmp	r2, #0
 80079f8:	d038      	beq.n	8007a6c <_strtod_l+0x948>
 80079fa:	4a1a      	ldr	r2, [pc, #104]	; (8007a64 <_strtod_l+0x940>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d138      	bne.n	8007a72 <_strtod_l+0x94e>
 8007a00:	2201      	movs	r2, #1
 8007a02:	9b08      	ldr	r3, [sp, #32]
 8007a04:	4252      	negs	r2, r2
 8007a06:	0031      	movs	r1, r6
 8007a08:	0010      	movs	r0, r2
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00b      	beq.n	8007a26 <_strtod_l+0x902>
 8007a0e:	24d4      	movs	r4, #212	; 0xd4
 8007a10:	4b11      	ldr	r3, [pc, #68]	; (8007a58 <_strtod_l+0x934>)
 8007a12:	0010      	movs	r0, r2
 8007a14:	403b      	ands	r3, r7
 8007a16:	04e4      	lsls	r4, r4, #19
 8007a18:	42a3      	cmp	r3, r4
 8007a1a:	d804      	bhi.n	8007a26 <_strtod_l+0x902>
 8007a1c:	306c      	adds	r0, #108	; 0x6c
 8007a1e:	0d1b      	lsrs	r3, r3, #20
 8007a20:	1ac3      	subs	r3, r0, r3
 8007a22:	409a      	lsls	r2, r3
 8007a24:	0010      	movs	r0, r2
 8007a26:	4281      	cmp	r1, r0
 8007a28:	d123      	bne.n	8007a72 <_strtod_l+0x94e>
 8007a2a:	4b0f      	ldr	r3, [pc, #60]	; (8007a68 <_strtod_l+0x944>)
 8007a2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d102      	bne.n	8007a38 <_strtod_l+0x914>
 8007a32:	1c4b      	adds	r3, r1, #1
 8007a34:	d100      	bne.n	8007a38 <_strtod_l+0x914>
 8007a36:	e5df      	b.n	80075f8 <_strtod_l+0x4d4>
 8007a38:	4b07      	ldr	r3, [pc, #28]	; (8007a58 <_strtod_l+0x934>)
 8007a3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a3c:	2600      	movs	r6, #0
 8007a3e:	401a      	ands	r2, r3
 8007a40:	0013      	movs	r3, r2
 8007a42:	2280      	movs	r2, #128	; 0x80
 8007a44:	0352      	lsls	r2, r2, #13
 8007a46:	189f      	adds	r7, r3, r2
 8007a48:	9b08      	ldr	r3, [sp, #32]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1a2      	bne.n	8007994 <_strtod_l+0x870>
 8007a4e:	e5dc      	b.n	800760a <_strtod_l+0x4e6>
 8007a50:	0800ac20 	.word	0x0800ac20
 8007a54:	fffffc02 	.word	0xfffffc02
 8007a58:	7ff00000 	.word	0x7ff00000
 8007a5c:	39500000 	.word	0x39500000
 8007a60:	fffffbe2 	.word	0xfffffbe2
 8007a64:	000fffff 	.word	0x000fffff
 8007a68:	7fefffff 	.word	0x7fefffff
 8007a6c:	4333      	orrs	r3, r6
 8007a6e:	d100      	bne.n	8007a72 <_strtod_l+0x94e>
 8007a70:	e77e      	b.n	8007970 <_strtod_l+0x84c>
 8007a72:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d01d      	beq.n	8007ab4 <_strtod_l+0x990>
 8007a78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a7a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007a7c:	4213      	tst	r3, r2
 8007a7e:	d0e3      	beq.n	8007a48 <_strtod_l+0x924>
 8007a80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a82:	0030      	movs	r0, r6
 8007a84:	0039      	movs	r1, r7
 8007a86:	9a08      	ldr	r2, [sp, #32]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d017      	beq.n	8007abc <_strtod_l+0x998>
 8007a8c:	f7ff fb32 	bl	80070f4 <sulp>
 8007a90:	0002      	movs	r2, r0
 8007a92:	000b      	movs	r3, r1
 8007a94:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007a96:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007a98:	f7f8 fd76 	bl	8000588 <__aeabi_dadd>
 8007a9c:	0006      	movs	r6, r0
 8007a9e:	000f      	movs	r7, r1
 8007aa0:	e7d2      	b.n	8007a48 <_strtod_l+0x924>
 8007aa2:	2601      	movs	r6, #1
 8007aa4:	4013      	ands	r3, r2
 8007aa6:	4a99      	ldr	r2, [pc, #612]	; (8007d0c <_strtod_l+0xbe8>)
 8007aa8:	4276      	negs	r6, r6
 8007aaa:	189b      	adds	r3, r3, r2
 8007aac:	4a98      	ldr	r2, [pc, #608]	; (8007d10 <_strtod_l+0xbec>)
 8007aae:	431a      	orrs	r2, r3
 8007ab0:	0017      	movs	r7, r2
 8007ab2:	e7c9      	b.n	8007a48 <_strtod_l+0x924>
 8007ab4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007ab6:	4233      	tst	r3, r6
 8007ab8:	d0c6      	beq.n	8007a48 <_strtod_l+0x924>
 8007aba:	e7e1      	b.n	8007a80 <_strtod_l+0x95c>
 8007abc:	f7ff fb1a 	bl	80070f4 <sulp>
 8007ac0:	0002      	movs	r2, r0
 8007ac2:	000b      	movs	r3, r1
 8007ac4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007ac6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007ac8:	f7f9 ff08 	bl	80018dc <__aeabi_dsub>
 8007acc:	2200      	movs	r2, #0
 8007ace:	2300      	movs	r3, #0
 8007ad0:	0006      	movs	r6, r0
 8007ad2:	000f      	movs	r7, r1
 8007ad4:	f7f8 fcba 	bl	800044c <__aeabi_dcmpeq>
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	d0b5      	beq.n	8007a48 <_strtod_l+0x924>
 8007adc:	e5ff      	b.n	80076de <_strtod_l+0x5ba>
 8007ade:	9907      	ldr	r1, [sp, #28]
 8007ae0:	9806      	ldr	r0, [sp, #24]
 8007ae2:	f002 f985 	bl	8009df0 <__ratio>
 8007ae6:	2380      	movs	r3, #128	; 0x80
 8007ae8:	2200      	movs	r2, #0
 8007aea:	05db      	lsls	r3, r3, #23
 8007aec:	0004      	movs	r4, r0
 8007aee:	000d      	movs	r5, r1
 8007af0:	f7f8 fcbc 	bl	800046c <__aeabi_dcmple>
 8007af4:	2800      	cmp	r0, #0
 8007af6:	d075      	beq.n	8007be4 <_strtod_l+0xac0>
 8007af8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d047      	beq.n	8007b8e <_strtod_l+0xa6a>
 8007afe:	2300      	movs	r3, #0
 8007b00:	4c84      	ldr	r4, [pc, #528]	; (8007d14 <_strtod_l+0xbf0>)
 8007b02:	2500      	movs	r5, #0
 8007b04:	9310      	str	r3, [sp, #64]	; 0x40
 8007b06:	9411      	str	r4, [sp, #68]	; 0x44
 8007b08:	4c82      	ldr	r4, [pc, #520]	; (8007d14 <_strtod_l+0xbf0>)
 8007b0a:	4a83      	ldr	r2, [pc, #524]	; (8007d18 <_strtod_l+0xbf4>)
 8007b0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b0e:	4013      	ands	r3, r2
 8007b10:	9314      	str	r3, [sp, #80]	; 0x50
 8007b12:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007b14:	4b81      	ldr	r3, [pc, #516]	; (8007d1c <_strtod_l+0xbf8>)
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d000      	beq.n	8007b1c <_strtod_l+0x9f8>
 8007b1a:	e0ac      	b.n	8007c76 <_strtod_l+0xb52>
 8007b1c:	4a80      	ldr	r2, [pc, #512]	; (8007d20 <_strtod_l+0xbfc>)
 8007b1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b20:	4694      	mov	ip, r2
 8007b22:	4463      	add	r3, ip
 8007b24:	001f      	movs	r7, r3
 8007b26:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007b28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b2a:	0030      	movs	r0, r6
 8007b2c:	0039      	movs	r1, r7
 8007b2e:	920c      	str	r2, [sp, #48]	; 0x30
 8007b30:	930d      	str	r3, [sp, #52]	; 0x34
 8007b32:	f002 f885 	bl	8009c40 <__ulp>
 8007b36:	0002      	movs	r2, r0
 8007b38:	000b      	movs	r3, r1
 8007b3a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007b3c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007b3e:	f7f9 fc61 	bl	8001404 <__aeabi_dmul>
 8007b42:	0032      	movs	r2, r6
 8007b44:	003b      	movs	r3, r7
 8007b46:	f7f8 fd1f 	bl	8000588 <__aeabi_dadd>
 8007b4a:	4a73      	ldr	r2, [pc, #460]	; (8007d18 <_strtod_l+0xbf4>)
 8007b4c:	4b75      	ldr	r3, [pc, #468]	; (8007d24 <_strtod_l+0xc00>)
 8007b4e:	0006      	movs	r6, r0
 8007b50:	400a      	ands	r2, r1
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d95e      	bls.n	8007c14 <_strtod_l+0xaf0>
 8007b56:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007b58:	4b73      	ldr	r3, [pc, #460]	; (8007d28 <_strtod_l+0xc04>)
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d103      	bne.n	8007b66 <_strtod_l+0xa42>
 8007b5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007b60:	3301      	adds	r3, #1
 8007b62:	d100      	bne.n	8007b66 <_strtod_l+0xa42>
 8007b64:	e548      	b.n	80075f8 <_strtod_l+0x4d4>
 8007b66:	2601      	movs	r6, #1
 8007b68:	4f6f      	ldr	r7, [pc, #444]	; (8007d28 <_strtod_l+0xc04>)
 8007b6a:	4276      	negs	r6, r6
 8007b6c:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007b6e:	9805      	ldr	r0, [sp, #20]
 8007b70:	f001 fd26 	bl	80095c0 <_Bfree>
 8007b74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b76:	9805      	ldr	r0, [sp, #20]
 8007b78:	f001 fd22 	bl	80095c0 <_Bfree>
 8007b7c:	9907      	ldr	r1, [sp, #28]
 8007b7e:	9805      	ldr	r0, [sp, #20]
 8007b80:	f001 fd1e 	bl	80095c0 <_Bfree>
 8007b84:	9906      	ldr	r1, [sp, #24]
 8007b86:	9805      	ldr	r0, [sp, #20]
 8007b88:	f001 fd1a 	bl	80095c0 <_Bfree>
 8007b8c:	e61d      	b.n	80077ca <_strtod_l+0x6a6>
 8007b8e:	2e00      	cmp	r6, #0
 8007b90:	d11c      	bne.n	8007bcc <_strtod_l+0xaa8>
 8007b92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b94:	031b      	lsls	r3, r3, #12
 8007b96:	d11f      	bne.n	8007bd8 <_strtod_l+0xab4>
 8007b98:	2200      	movs	r2, #0
 8007b9a:	0020      	movs	r0, r4
 8007b9c:	0029      	movs	r1, r5
 8007b9e:	4b5d      	ldr	r3, [pc, #372]	; (8007d14 <_strtod_l+0xbf0>)
 8007ba0:	f7f8 fc5a 	bl	8000458 <__aeabi_dcmplt>
 8007ba4:	2800      	cmp	r0, #0
 8007ba6:	d11a      	bne.n	8007bde <_strtod_l+0xaba>
 8007ba8:	0020      	movs	r0, r4
 8007baa:	0029      	movs	r1, r5
 8007bac:	2200      	movs	r2, #0
 8007bae:	4b5f      	ldr	r3, [pc, #380]	; (8007d2c <_strtod_l+0xc08>)
 8007bb0:	f7f9 fc28 	bl	8001404 <__aeabi_dmul>
 8007bb4:	0005      	movs	r5, r0
 8007bb6:	000c      	movs	r4, r1
 8007bb8:	2380      	movs	r3, #128	; 0x80
 8007bba:	061b      	lsls	r3, r3, #24
 8007bbc:	18e3      	adds	r3, r4, r3
 8007bbe:	951c      	str	r5, [sp, #112]	; 0x70
 8007bc0:	931d      	str	r3, [sp, #116]	; 0x74
 8007bc2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007bc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007bc6:	9210      	str	r2, [sp, #64]	; 0x40
 8007bc8:	9311      	str	r3, [sp, #68]	; 0x44
 8007bca:	e79e      	b.n	8007b0a <_strtod_l+0x9e6>
 8007bcc:	2e01      	cmp	r6, #1
 8007bce:	d103      	bne.n	8007bd8 <_strtod_l+0xab4>
 8007bd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d100      	bne.n	8007bd8 <_strtod_l+0xab4>
 8007bd6:	e582      	b.n	80076de <_strtod_l+0x5ba>
 8007bd8:	2300      	movs	r3, #0
 8007bda:	4c55      	ldr	r4, [pc, #340]	; (8007d30 <_strtod_l+0xc0c>)
 8007bdc:	e791      	b.n	8007b02 <_strtod_l+0x9de>
 8007bde:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007be0:	4c52      	ldr	r4, [pc, #328]	; (8007d2c <_strtod_l+0xc08>)
 8007be2:	e7e9      	b.n	8007bb8 <_strtod_l+0xa94>
 8007be4:	2200      	movs	r2, #0
 8007be6:	0020      	movs	r0, r4
 8007be8:	0029      	movs	r1, r5
 8007bea:	4b50      	ldr	r3, [pc, #320]	; (8007d2c <_strtod_l+0xc08>)
 8007bec:	f7f9 fc0a 	bl	8001404 <__aeabi_dmul>
 8007bf0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007bf2:	0005      	movs	r5, r0
 8007bf4:	000b      	movs	r3, r1
 8007bf6:	000c      	movs	r4, r1
 8007bf8:	2a00      	cmp	r2, #0
 8007bfa:	d107      	bne.n	8007c0c <_strtod_l+0xae8>
 8007bfc:	2280      	movs	r2, #128	; 0x80
 8007bfe:	0612      	lsls	r2, r2, #24
 8007c00:	188b      	adds	r3, r1, r2
 8007c02:	9016      	str	r0, [sp, #88]	; 0x58
 8007c04:	9317      	str	r3, [sp, #92]	; 0x5c
 8007c06:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007c08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c0a:	e7dc      	b.n	8007bc6 <_strtod_l+0xaa2>
 8007c0c:	0002      	movs	r2, r0
 8007c0e:	9216      	str	r2, [sp, #88]	; 0x58
 8007c10:	9317      	str	r3, [sp, #92]	; 0x5c
 8007c12:	e7f8      	b.n	8007c06 <_strtod_l+0xae2>
 8007c14:	23d4      	movs	r3, #212	; 0xd4
 8007c16:	049b      	lsls	r3, r3, #18
 8007c18:	18cf      	adds	r7, r1, r3
 8007c1a:	9b08      	ldr	r3, [sp, #32]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d1a5      	bne.n	8007b6c <_strtod_l+0xa48>
 8007c20:	4b3d      	ldr	r3, [pc, #244]	; (8007d18 <_strtod_l+0xbf4>)
 8007c22:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007c24:	403b      	ands	r3, r7
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d1a0      	bne.n	8007b6c <_strtod_l+0xa48>
 8007c2a:	0028      	movs	r0, r5
 8007c2c:	0021      	movs	r1, r4
 8007c2e:	f7f8 fc59 	bl	80004e4 <__aeabi_d2lz>
 8007c32:	f7f8 fc93 	bl	800055c <__aeabi_l2d>
 8007c36:	0002      	movs	r2, r0
 8007c38:	000b      	movs	r3, r1
 8007c3a:	0028      	movs	r0, r5
 8007c3c:	0021      	movs	r1, r4
 8007c3e:	f7f9 fe4d 	bl	80018dc <__aeabi_dsub>
 8007c42:	033b      	lsls	r3, r7, #12
 8007c44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c46:	0b1b      	lsrs	r3, r3, #12
 8007c48:	4333      	orrs	r3, r6
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	0004      	movs	r4, r0
 8007c4e:	000d      	movs	r5, r1
 8007c50:	4a38      	ldr	r2, [pc, #224]	; (8007d34 <_strtod_l+0xc10>)
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d055      	beq.n	8007d02 <_strtod_l+0xbde>
 8007c56:	4b38      	ldr	r3, [pc, #224]	; (8007d38 <_strtod_l+0xc14>)
 8007c58:	f7f8 fbfe 	bl	8000458 <__aeabi_dcmplt>
 8007c5c:	2800      	cmp	r0, #0
 8007c5e:	d000      	beq.n	8007c62 <_strtod_l+0xb3e>
 8007c60:	e4d3      	b.n	800760a <_strtod_l+0x4e6>
 8007c62:	0020      	movs	r0, r4
 8007c64:	0029      	movs	r1, r5
 8007c66:	4a35      	ldr	r2, [pc, #212]	; (8007d3c <_strtod_l+0xc18>)
 8007c68:	4b30      	ldr	r3, [pc, #192]	; (8007d2c <_strtod_l+0xc08>)
 8007c6a:	f7f8 fc09 	bl	8000480 <__aeabi_dcmpgt>
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	d100      	bne.n	8007c74 <_strtod_l+0xb50>
 8007c72:	e77b      	b.n	8007b6c <_strtod_l+0xa48>
 8007c74:	e4c9      	b.n	800760a <_strtod_l+0x4e6>
 8007c76:	9b08      	ldr	r3, [sp, #32]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d02b      	beq.n	8007cd4 <_strtod_l+0xbb0>
 8007c7c:	23d4      	movs	r3, #212	; 0xd4
 8007c7e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007c80:	04db      	lsls	r3, r3, #19
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d826      	bhi.n	8007cd4 <_strtod_l+0xbb0>
 8007c86:	0028      	movs	r0, r5
 8007c88:	0021      	movs	r1, r4
 8007c8a:	4a2d      	ldr	r2, [pc, #180]	; (8007d40 <_strtod_l+0xc1c>)
 8007c8c:	4b2d      	ldr	r3, [pc, #180]	; (8007d44 <_strtod_l+0xc20>)
 8007c8e:	f7f8 fbed 	bl	800046c <__aeabi_dcmple>
 8007c92:	2800      	cmp	r0, #0
 8007c94:	d017      	beq.n	8007cc6 <_strtod_l+0xba2>
 8007c96:	0028      	movs	r0, r5
 8007c98:	0021      	movs	r1, r4
 8007c9a:	f7f8 fc05 	bl	80004a8 <__aeabi_d2uiz>
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	d100      	bne.n	8007ca4 <_strtod_l+0xb80>
 8007ca2:	3001      	adds	r0, #1
 8007ca4:	f7fa fa30 	bl	8002108 <__aeabi_ui2d>
 8007ca8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007caa:	0005      	movs	r5, r0
 8007cac:	000b      	movs	r3, r1
 8007cae:	000c      	movs	r4, r1
 8007cb0:	2a00      	cmp	r2, #0
 8007cb2:	d122      	bne.n	8007cfa <_strtod_l+0xbd6>
 8007cb4:	2280      	movs	r2, #128	; 0x80
 8007cb6:	0612      	lsls	r2, r2, #24
 8007cb8:	188b      	adds	r3, r1, r2
 8007cba:	9018      	str	r0, [sp, #96]	; 0x60
 8007cbc:	9319      	str	r3, [sp, #100]	; 0x64
 8007cbe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007cc0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007cc2:	9210      	str	r2, [sp, #64]	; 0x40
 8007cc4:	9311      	str	r3, [sp, #68]	; 0x44
 8007cc6:	22d6      	movs	r2, #214	; 0xd6
 8007cc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007cca:	04d2      	lsls	r2, r2, #19
 8007ccc:	189b      	adds	r3, r3, r2
 8007cce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007cd0:	1a9b      	subs	r3, r3, r2
 8007cd2:	9311      	str	r3, [sp, #68]	; 0x44
 8007cd4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007cd6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007cd8:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8007cda:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8007cdc:	f001 ffb0 	bl	8009c40 <__ulp>
 8007ce0:	0002      	movs	r2, r0
 8007ce2:	000b      	movs	r3, r1
 8007ce4:	0030      	movs	r0, r6
 8007ce6:	0039      	movs	r1, r7
 8007ce8:	f7f9 fb8c 	bl	8001404 <__aeabi_dmul>
 8007cec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007cee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007cf0:	f7f8 fc4a 	bl	8000588 <__aeabi_dadd>
 8007cf4:	0006      	movs	r6, r0
 8007cf6:	000f      	movs	r7, r1
 8007cf8:	e78f      	b.n	8007c1a <_strtod_l+0xaf6>
 8007cfa:	0002      	movs	r2, r0
 8007cfc:	9218      	str	r2, [sp, #96]	; 0x60
 8007cfe:	9319      	str	r3, [sp, #100]	; 0x64
 8007d00:	e7dd      	b.n	8007cbe <_strtod_l+0xb9a>
 8007d02:	4b11      	ldr	r3, [pc, #68]	; (8007d48 <_strtod_l+0xc24>)
 8007d04:	f7f8 fba8 	bl	8000458 <__aeabi_dcmplt>
 8007d08:	e7b1      	b.n	8007c6e <_strtod_l+0xb4a>
 8007d0a:	46c0      	nop			; (mov r8, r8)
 8007d0c:	fff00000 	.word	0xfff00000
 8007d10:	000fffff 	.word	0x000fffff
 8007d14:	3ff00000 	.word	0x3ff00000
 8007d18:	7ff00000 	.word	0x7ff00000
 8007d1c:	7fe00000 	.word	0x7fe00000
 8007d20:	fcb00000 	.word	0xfcb00000
 8007d24:	7c9fffff 	.word	0x7c9fffff
 8007d28:	7fefffff 	.word	0x7fefffff
 8007d2c:	3fe00000 	.word	0x3fe00000
 8007d30:	bff00000 	.word	0xbff00000
 8007d34:	94a03595 	.word	0x94a03595
 8007d38:	3fdfffff 	.word	0x3fdfffff
 8007d3c:	35afe535 	.word	0x35afe535
 8007d40:	ffc00000 	.word	0xffc00000
 8007d44:	41dfffff 	.word	0x41dfffff
 8007d48:	3fcfffff 	.word	0x3fcfffff

08007d4c <_strtod_r>:
 8007d4c:	b510      	push	{r4, lr}
 8007d4e:	4b02      	ldr	r3, [pc, #8]	; (8007d58 <_strtod_r+0xc>)
 8007d50:	f7ff f9e8 	bl	8007124 <_strtod_l>
 8007d54:	bd10      	pop	{r4, pc}
 8007d56:	46c0      	nop			; (mov r8, r8)
 8007d58:	20000078 	.word	0x20000078

08007d5c <_strtol_l.constprop.0>:
 8007d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d5e:	b087      	sub	sp, #28
 8007d60:	001e      	movs	r6, r3
 8007d62:	9005      	str	r0, [sp, #20]
 8007d64:	9101      	str	r1, [sp, #4]
 8007d66:	9202      	str	r2, [sp, #8]
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d045      	beq.n	8007df8 <_strtol_l.constprop.0+0x9c>
 8007d6c:	000b      	movs	r3, r1
 8007d6e:	2e24      	cmp	r6, #36	; 0x24
 8007d70:	d842      	bhi.n	8007df8 <_strtol_l.constprop.0+0x9c>
 8007d72:	4a3f      	ldr	r2, [pc, #252]	; (8007e70 <_strtol_l.constprop.0+0x114>)
 8007d74:	2108      	movs	r1, #8
 8007d76:	4694      	mov	ip, r2
 8007d78:	001a      	movs	r2, r3
 8007d7a:	4660      	mov	r0, ip
 8007d7c:	7814      	ldrb	r4, [r2, #0]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	5d00      	ldrb	r0, [r0, r4]
 8007d82:	001d      	movs	r5, r3
 8007d84:	0007      	movs	r7, r0
 8007d86:	400f      	ands	r7, r1
 8007d88:	4208      	tst	r0, r1
 8007d8a:	d1f5      	bne.n	8007d78 <_strtol_l.constprop.0+0x1c>
 8007d8c:	2c2d      	cmp	r4, #45	; 0x2d
 8007d8e:	d13a      	bne.n	8007e06 <_strtol_l.constprop.0+0xaa>
 8007d90:	2701      	movs	r7, #1
 8007d92:	781c      	ldrb	r4, [r3, #0]
 8007d94:	1c95      	adds	r5, r2, #2
 8007d96:	2e00      	cmp	r6, #0
 8007d98:	d065      	beq.n	8007e66 <_strtol_l.constprop.0+0x10a>
 8007d9a:	2e10      	cmp	r6, #16
 8007d9c:	d109      	bne.n	8007db2 <_strtol_l.constprop.0+0x56>
 8007d9e:	2c30      	cmp	r4, #48	; 0x30
 8007da0:	d107      	bne.n	8007db2 <_strtol_l.constprop.0+0x56>
 8007da2:	2220      	movs	r2, #32
 8007da4:	782b      	ldrb	r3, [r5, #0]
 8007da6:	4393      	bics	r3, r2
 8007da8:	2b58      	cmp	r3, #88	; 0x58
 8007daa:	d157      	bne.n	8007e5c <_strtol_l.constprop.0+0x100>
 8007dac:	2610      	movs	r6, #16
 8007dae:	786c      	ldrb	r4, [r5, #1]
 8007db0:	3502      	adds	r5, #2
 8007db2:	4b30      	ldr	r3, [pc, #192]	; (8007e74 <_strtol_l.constprop.0+0x118>)
 8007db4:	0031      	movs	r1, r6
 8007db6:	18fb      	adds	r3, r7, r3
 8007db8:	0018      	movs	r0, r3
 8007dba:	9303      	str	r3, [sp, #12]
 8007dbc:	f7f8 fa46 	bl	800024c <__aeabi_uidivmod>
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	4684      	mov	ip, r0
 8007dc6:	0018      	movs	r0, r3
 8007dc8:	9104      	str	r1, [sp, #16]
 8007dca:	4252      	negs	r2, r2
 8007dcc:	0021      	movs	r1, r4
 8007dce:	3930      	subs	r1, #48	; 0x30
 8007dd0:	2909      	cmp	r1, #9
 8007dd2:	d81d      	bhi.n	8007e10 <_strtol_l.constprop.0+0xb4>
 8007dd4:	000c      	movs	r4, r1
 8007dd6:	42a6      	cmp	r6, r4
 8007dd8:	dd28      	ble.n	8007e2c <_strtol_l.constprop.0+0xd0>
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	db24      	blt.n	8007e28 <_strtol_l.constprop.0+0xcc>
 8007dde:	0013      	movs	r3, r2
 8007de0:	4584      	cmp	ip, r0
 8007de2:	d306      	bcc.n	8007df2 <_strtol_l.constprop.0+0x96>
 8007de4:	d102      	bne.n	8007dec <_strtol_l.constprop.0+0x90>
 8007de6:	9904      	ldr	r1, [sp, #16]
 8007de8:	42a1      	cmp	r1, r4
 8007dea:	db02      	blt.n	8007df2 <_strtol_l.constprop.0+0x96>
 8007dec:	2301      	movs	r3, #1
 8007dee:	4370      	muls	r0, r6
 8007df0:	1820      	adds	r0, r4, r0
 8007df2:	782c      	ldrb	r4, [r5, #0]
 8007df4:	3501      	adds	r5, #1
 8007df6:	e7e9      	b.n	8007dcc <_strtol_l.constprop.0+0x70>
 8007df8:	f7fe f838 	bl	8005e6c <__errno>
 8007dfc:	2316      	movs	r3, #22
 8007dfe:	6003      	str	r3, [r0, #0]
 8007e00:	2000      	movs	r0, #0
 8007e02:	b007      	add	sp, #28
 8007e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e06:	2c2b      	cmp	r4, #43	; 0x2b
 8007e08:	d1c5      	bne.n	8007d96 <_strtol_l.constprop.0+0x3a>
 8007e0a:	781c      	ldrb	r4, [r3, #0]
 8007e0c:	1c95      	adds	r5, r2, #2
 8007e0e:	e7c2      	b.n	8007d96 <_strtol_l.constprop.0+0x3a>
 8007e10:	0021      	movs	r1, r4
 8007e12:	3941      	subs	r1, #65	; 0x41
 8007e14:	2919      	cmp	r1, #25
 8007e16:	d801      	bhi.n	8007e1c <_strtol_l.constprop.0+0xc0>
 8007e18:	3c37      	subs	r4, #55	; 0x37
 8007e1a:	e7dc      	b.n	8007dd6 <_strtol_l.constprop.0+0x7a>
 8007e1c:	0021      	movs	r1, r4
 8007e1e:	3961      	subs	r1, #97	; 0x61
 8007e20:	2919      	cmp	r1, #25
 8007e22:	d803      	bhi.n	8007e2c <_strtol_l.constprop.0+0xd0>
 8007e24:	3c57      	subs	r4, #87	; 0x57
 8007e26:	e7d6      	b.n	8007dd6 <_strtol_l.constprop.0+0x7a>
 8007e28:	0013      	movs	r3, r2
 8007e2a:	e7e2      	b.n	8007df2 <_strtol_l.constprop.0+0x96>
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	da09      	bge.n	8007e44 <_strtol_l.constprop.0+0xe8>
 8007e30:	2322      	movs	r3, #34	; 0x22
 8007e32:	9a05      	ldr	r2, [sp, #20]
 8007e34:	9803      	ldr	r0, [sp, #12]
 8007e36:	6013      	str	r3, [r2, #0]
 8007e38:	9b02      	ldr	r3, [sp, #8]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d0e1      	beq.n	8007e02 <_strtol_l.constprop.0+0xa6>
 8007e3e:	1e6b      	subs	r3, r5, #1
 8007e40:	9301      	str	r3, [sp, #4]
 8007e42:	e007      	b.n	8007e54 <_strtol_l.constprop.0+0xf8>
 8007e44:	2f00      	cmp	r7, #0
 8007e46:	d000      	beq.n	8007e4a <_strtol_l.constprop.0+0xee>
 8007e48:	4240      	negs	r0, r0
 8007e4a:	9a02      	ldr	r2, [sp, #8]
 8007e4c:	2a00      	cmp	r2, #0
 8007e4e:	d0d8      	beq.n	8007e02 <_strtol_l.constprop.0+0xa6>
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1f4      	bne.n	8007e3e <_strtol_l.constprop.0+0xe2>
 8007e54:	9b02      	ldr	r3, [sp, #8]
 8007e56:	9a01      	ldr	r2, [sp, #4]
 8007e58:	601a      	str	r2, [r3, #0]
 8007e5a:	e7d2      	b.n	8007e02 <_strtol_l.constprop.0+0xa6>
 8007e5c:	2430      	movs	r4, #48	; 0x30
 8007e5e:	2e00      	cmp	r6, #0
 8007e60:	d1a7      	bne.n	8007db2 <_strtol_l.constprop.0+0x56>
 8007e62:	3608      	adds	r6, #8
 8007e64:	e7a5      	b.n	8007db2 <_strtol_l.constprop.0+0x56>
 8007e66:	2c30      	cmp	r4, #48	; 0x30
 8007e68:	d09b      	beq.n	8007da2 <_strtol_l.constprop.0+0x46>
 8007e6a:	260a      	movs	r6, #10
 8007e6c:	e7a1      	b.n	8007db2 <_strtol_l.constprop.0+0x56>
 8007e6e:	46c0      	nop			; (mov r8, r8)
 8007e70:	0800ac49 	.word	0x0800ac49
 8007e74:	7fffffff 	.word	0x7fffffff

08007e78 <_strtol_r>:
 8007e78:	b510      	push	{r4, lr}
 8007e7a:	f7ff ff6f 	bl	8007d5c <_strtol_l.constprop.0>
 8007e7e:	bd10      	pop	{r4, pc}

08007e80 <_write_r>:
 8007e80:	b570      	push	{r4, r5, r6, lr}
 8007e82:	0004      	movs	r4, r0
 8007e84:	0008      	movs	r0, r1
 8007e86:	0011      	movs	r1, r2
 8007e88:	001a      	movs	r2, r3
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	4d05      	ldr	r5, [pc, #20]	; (8007ea4 <_write_r+0x24>)
 8007e8e:	602b      	str	r3, [r5, #0]
 8007e90:	f7fa fd7d 	bl	800298e <_write>
 8007e94:	1c43      	adds	r3, r0, #1
 8007e96:	d103      	bne.n	8007ea0 <_write_r+0x20>
 8007e98:	682b      	ldr	r3, [r5, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d000      	beq.n	8007ea0 <_write_r+0x20>
 8007e9e:	6023      	str	r3, [r4, #0]
 8007ea0:	bd70      	pop	{r4, r5, r6, pc}
 8007ea2:	46c0      	nop			; (mov r8, r8)
 8007ea4:	20001300 	.word	0x20001300

08007ea8 <_close_r>:
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	b570      	push	{r4, r5, r6, lr}
 8007eac:	4d06      	ldr	r5, [pc, #24]	; (8007ec8 <_close_r+0x20>)
 8007eae:	0004      	movs	r4, r0
 8007eb0:	0008      	movs	r0, r1
 8007eb2:	602b      	str	r3, [r5, #0]
 8007eb4:	f7fa fd87 	bl	80029c6 <_close>
 8007eb8:	1c43      	adds	r3, r0, #1
 8007eba:	d103      	bne.n	8007ec4 <_close_r+0x1c>
 8007ebc:	682b      	ldr	r3, [r5, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d000      	beq.n	8007ec4 <_close_r+0x1c>
 8007ec2:	6023      	str	r3, [r4, #0]
 8007ec4:	bd70      	pop	{r4, r5, r6, pc}
 8007ec6:	46c0      	nop			; (mov r8, r8)
 8007ec8:	20001300 	.word	0x20001300

08007ecc <quorem>:
 8007ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ece:	0006      	movs	r6, r0
 8007ed0:	690b      	ldr	r3, [r1, #16]
 8007ed2:	6932      	ldr	r2, [r6, #16]
 8007ed4:	b087      	sub	sp, #28
 8007ed6:	2000      	movs	r0, #0
 8007ed8:	9103      	str	r1, [sp, #12]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	db65      	blt.n	8007faa <quorem+0xde>
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	009c      	lsls	r4, r3, #2
 8007ee2:	9300      	str	r3, [sp, #0]
 8007ee4:	000b      	movs	r3, r1
 8007ee6:	3314      	adds	r3, #20
 8007ee8:	9305      	str	r3, [sp, #20]
 8007eea:	191b      	adds	r3, r3, r4
 8007eec:	9304      	str	r3, [sp, #16]
 8007eee:	0033      	movs	r3, r6
 8007ef0:	3314      	adds	r3, #20
 8007ef2:	9302      	str	r3, [sp, #8]
 8007ef4:	191c      	adds	r4, r3, r4
 8007ef6:	9b04      	ldr	r3, [sp, #16]
 8007ef8:	6827      	ldr	r7, [r4, #0]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	0038      	movs	r0, r7
 8007efe:	1c5d      	adds	r5, r3, #1
 8007f00:	0029      	movs	r1, r5
 8007f02:	9301      	str	r3, [sp, #4]
 8007f04:	f7f8 f91c 	bl	8000140 <__udivsi3>
 8007f08:	9001      	str	r0, [sp, #4]
 8007f0a:	42af      	cmp	r7, r5
 8007f0c:	d324      	bcc.n	8007f58 <quorem+0x8c>
 8007f0e:	2500      	movs	r5, #0
 8007f10:	46ac      	mov	ip, r5
 8007f12:	9802      	ldr	r0, [sp, #8]
 8007f14:	9f05      	ldr	r7, [sp, #20]
 8007f16:	cf08      	ldmia	r7!, {r3}
 8007f18:	9a01      	ldr	r2, [sp, #4]
 8007f1a:	b299      	uxth	r1, r3
 8007f1c:	4351      	muls	r1, r2
 8007f1e:	0c1b      	lsrs	r3, r3, #16
 8007f20:	4353      	muls	r3, r2
 8007f22:	1949      	adds	r1, r1, r5
 8007f24:	0c0a      	lsrs	r2, r1, #16
 8007f26:	189b      	adds	r3, r3, r2
 8007f28:	6802      	ldr	r2, [r0, #0]
 8007f2a:	b289      	uxth	r1, r1
 8007f2c:	b292      	uxth	r2, r2
 8007f2e:	4462      	add	r2, ip
 8007f30:	1a52      	subs	r2, r2, r1
 8007f32:	6801      	ldr	r1, [r0, #0]
 8007f34:	0c1d      	lsrs	r5, r3, #16
 8007f36:	0c09      	lsrs	r1, r1, #16
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	1acb      	subs	r3, r1, r3
 8007f3c:	1411      	asrs	r1, r2, #16
 8007f3e:	185b      	adds	r3, r3, r1
 8007f40:	1419      	asrs	r1, r3, #16
 8007f42:	b292      	uxth	r2, r2
 8007f44:	041b      	lsls	r3, r3, #16
 8007f46:	431a      	orrs	r2, r3
 8007f48:	9b04      	ldr	r3, [sp, #16]
 8007f4a:	468c      	mov	ip, r1
 8007f4c:	c004      	stmia	r0!, {r2}
 8007f4e:	42bb      	cmp	r3, r7
 8007f50:	d2e1      	bcs.n	8007f16 <quorem+0x4a>
 8007f52:	6823      	ldr	r3, [r4, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d030      	beq.n	8007fba <quorem+0xee>
 8007f58:	0030      	movs	r0, r6
 8007f5a:	9903      	ldr	r1, [sp, #12]
 8007f5c:	f001 fdbc 	bl	8009ad8 <__mcmp>
 8007f60:	2800      	cmp	r0, #0
 8007f62:	db21      	blt.n	8007fa8 <quorem+0xdc>
 8007f64:	0030      	movs	r0, r6
 8007f66:	2400      	movs	r4, #0
 8007f68:	9b01      	ldr	r3, [sp, #4]
 8007f6a:	9903      	ldr	r1, [sp, #12]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	9301      	str	r3, [sp, #4]
 8007f70:	3014      	adds	r0, #20
 8007f72:	3114      	adds	r1, #20
 8007f74:	6803      	ldr	r3, [r0, #0]
 8007f76:	c920      	ldmia	r1!, {r5}
 8007f78:	b29a      	uxth	r2, r3
 8007f7a:	1914      	adds	r4, r2, r4
 8007f7c:	b2aa      	uxth	r2, r5
 8007f7e:	1aa2      	subs	r2, r4, r2
 8007f80:	0c1b      	lsrs	r3, r3, #16
 8007f82:	0c2d      	lsrs	r5, r5, #16
 8007f84:	1414      	asrs	r4, r2, #16
 8007f86:	1b5b      	subs	r3, r3, r5
 8007f88:	191b      	adds	r3, r3, r4
 8007f8a:	141c      	asrs	r4, r3, #16
 8007f8c:	b292      	uxth	r2, r2
 8007f8e:	041b      	lsls	r3, r3, #16
 8007f90:	4313      	orrs	r3, r2
 8007f92:	c008      	stmia	r0!, {r3}
 8007f94:	9b04      	ldr	r3, [sp, #16]
 8007f96:	428b      	cmp	r3, r1
 8007f98:	d2ec      	bcs.n	8007f74 <quorem+0xa8>
 8007f9a:	9b00      	ldr	r3, [sp, #0]
 8007f9c:	9a02      	ldr	r2, [sp, #8]
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	18d3      	adds	r3, r2, r3
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	2a00      	cmp	r2, #0
 8007fa6:	d015      	beq.n	8007fd4 <quorem+0x108>
 8007fa8:	9801      	ldr	r0, [sp, #4]
 8007faa:	b007      	add	sp, #28
 8007fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fae:	6823      	ldr	r3, [r4, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d106      	bne.n	8007fc2 <quorem+0xf6>
 8007fb4:	9b00      	ldr	r3, [sp, #0]
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	9300      	str	r3, [sp, #0]
 8007fba:	9b02      	ldr	r3, [sp, #8]
 8007fbc:	3c04      	subs	r4, #4
 8007fbe:	42a3      	cmp	r3, r4
 8007fc0:	d3f5      	bcc.n	8007fae <quorem+0xe2>
 8007fc2:	9b00      	ldr	r3, [sp, #0]
 8007fc4:	6133      	str	r3, [r6, #16]
 8007fc6:	e7c7      	b.n	8007f58 <quorem+0x8c>
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	2a00      	cmp	r2, #0
 8007fcc:	d106      	bne.n	8007fdc <quorem+0x110>
 8007fce:	9a00      	ldr	r2, [sp, #0]
 8007fd0:	3a01      	subs	r2, #1
 8007fd2:	9200      	str	r2, [sp, #0]
 8007fd4:	9a02      	ldr	r2, [sp, #8]
 8007fd6:	3b04      	subs	r3, #4
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d3f5      	bcc.n	8007fc8 <quorem+0xfc>
 8007fdc:	9b00      	ldr	r3, [sp, #0]
 8007fde:	6133      	str	r3, [r6, #16]
 8007fe0:	e7e2      	b.n	8007fa8 <quorem+0xdc>
	...

08007fe4 <_dtoa_r>:
 8007fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fe6:	b09d      	sub	sp, #116	; 0x74
 8007fe8:	9202      	str	r2, [sp, #8]
 8007fea:	9303      	str	r3, [sp, #12]
 8007fec:	9b02      	ldr	r3, [sp, #8]
 8007fee:	9c03      	ldr	r4, [sp, #12]
 8007ff0:	9308      	str	r3, [sp, #32]
 8007ff2:	9409      	str	r4, [sp, #36]	; 0x24
 8007ff4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007ff6:	0007      	movs	r7, r0
 8007ff8:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8007ffa:	2c00      	cmp	r4, #0
 8007ffc:	d10e      	bne.n	800801c <_dtoa_r+0x38>
 8007ffe:	2010      	movs	r0, #16
 8008000:	f001 fa62 	bl	80094c8 <malloc>
 8008004:	1e02      	subs	r2, r0, #0
 8008006:	6278      	str	r0, [r7, #36]	; 0x24
 8008008:	d104      	bne.n	8008014 <_dtoa_r+0x30>
 800800a:	21ea      	movs	r1, #234	; 0xea
 800800c:	4bc7      	ldr	r3, [pc, #796]	; (800832c <_dtoa_r+0x348>)
 800800e:	48c8      	ldr	r0, [pc, #800]	; (8008330 <_dtoa_r+0x34c>)
 8008010:	f002 f96e 	bl	800a2f0 <__assert_func>
 8008014:	6044      	str	r4, [r0, #4]
 8008016:	6084      	str	r4, [r0, #8]
 8008018:	6004      	str	r4, [r0, #0]
 800801a:	60c4      	str	r4, [r0, #12]
 800801c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801e:	6819      	ldr	r1, [r3, #0]
 8008020:	2900      	cmp	r1, #0
 8008022:	d00a      	beq.n	800803a <_dtoa_r+0x56>
 8008024:	685a      	ldr	r2, [r3, #4]
 8008026:	2301      	movs	r3, #1
 8008028:	4093      	lsls	r3, r2
 800802a:	604a      	str	r2, [r1, #4]
 800802c:	608b      	str	r3, [r1, #8]
 800802e:	0038      	movs	r0, r7
 8008030:	f001 fac6 	bl	80095c0 <_Bfree>
 8008034:	2200      	movs	r2, #0
 8008036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008038:	601a      	str	r2, [r3, #0]
 800803a:	9b03      	ldr	r3, [sp, #12]
 800803c:	2b00      	cmp	r3, #0
 800803e:	da20      	bge.n	8008082 <_dtoa_r+0x9e>
 8008040:	2301      	movs	r3, #1
 8008042:	602b      	str	r3, [r5, #0]
 8008044:	9b03      	ldr	r3, [sp, #12]
 8008046:	005b      	lsls	r3, r3, #1
 8008048:	085b      	lsrs	r3, r3, #1
 800804a:	9309      	str	r3, [sp, #36]	; 0x24
 800804c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800804e:	4bb9      	ldr	r3, [pc, #740]	; (8008334 <_dtoa_r+0x350>)
 8008050:	4ab8      	ldr	r2, [pc, #736]	; (8008334 <_dtoa_r+0x350>)
 8008052:	402b      	ands	r3, r5
 8008054:	4293      	cmp	r3, r2
 8008056:	d117      	bne.n	8008088 <_dtoa_r+0xa4>
 8008058:	4bb7      	ldr	r3, [pc, #732]	; (8008338 <_dtoa_r+0x354>)
 800805a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800805c:	0328      	lsls	r0, r5, #12
 800805e:	6013      	str	r3, [r2, #0]
 8008060:	9b02      	ldr	r3, [sp, #8]
 8008062:	0b00      	lsrs	r0, r0, #12
 8008064:	4318      	orrs	r0, r3
 8008066:	d101      	bne.n	800806c <_dtoa_r+0x88>
 8008068:	f000 fdbf 	bl	8008bea <_dtoa_r+0xc06>
 800806c:	48b3      	ldr	r0, [pc, #716]	; (800833c <_dtoa_r+0x358>)
 800806e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008070:	9006      	str	r0, [sp, #24]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d002      	beq.n	800807c <_dtoa_r+0x98>
 8008076:	4bb2      	ldr	r3, [pc, #712]	; (8008340 <_dtoa_r+0x35c>)
 8008078:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800807a:	6013      	str	r3, [r2, #0]
 800807c:	9806      	ldr	r0, [sp, #24]
 800807e:	b01d      	add	sp, #116	; 0x74
 8008080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008082:	2300      	movs	r3, #0
 8008084:	602b      	str	r3, [r5, #0]
 8008086:	e7e1      	b.n	800804c <_dtoa_r+0x68>
 8008088:	9b08      	ldr	r3, [sp, #32]
 800808a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800808c:	9312      	str	r3, [sp, #72]	; 0x48
 800808e:	9413      	str	r4, [sp, #76]	; 0x4c
 8008090:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008092:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008094:	2200      	movs	r2, #0
 8008096:	2300      	movs	r3, #0
 8008098:	f7f8 f9d8 	bl	800044c <__aeabi_dcmpeq>
 800809c:	1e04      	subs	r4, r0, #0
 800809e:	d009      	beq.n	80080b4 <_dtoa_r+0xd0>
 80080a0:	2301      	movs	r3, #1
 80080a2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80080a4:	6013      	str	r3, [r2, #0]
 80080a6:	4ba7      	ldr	r3, [pc, #668]	; (8008344 <_dtoa_r+0x360>)
 80080a8:	9306      	str	r3, [sp, #24]
 80080aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d0e5      	beq.n	800807c <_dtoa_r+0x98>
 80080b0:	4ba5      	ldr	r3, [pc, #660]	; (8008348 <_dtoa_r+0x364>)
 80080b2:	e7e1      	b.n	8008078 <_dtoa_r+0x94>
 80080b4:	ab1a      	add	r3, sp, #104	; 0x68
 80080b6:	9301      	str	r3, [sp, #4]
 80080b8:	ab1b      	add	r3, sp, #108	; 0x6c
 80080ba:	9300      	str	r3, [sp, #0]
 80080bc:	0038      	movs	r0, r7
 80080be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80080c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80080c2:	f001 fe31 	bl	8009d28 <__d2b>
 80080c6:	006e      	lsls	r6, r5, #1
 80080c8:	9005      	str	r0, [sp, #20]
 80080ca:	0d76      	lsrs	r6, r6, #21
 80080cc:	d100      	bne.n	80080d0 <_dtoa_r+0xec>
 80080ce:	e07c      	b.n	80081ca <_dtoa_r+0x1e6>
 80080d0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80080d2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80080d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80080d6:	4a9d      	ldr	r2, [pc, #628]	; (800834c <_dtoa_r+0x368>)
 80080d8:	031b      	lsls	r3, r3, #12
 80080da:	0b1b      	lsrs	r3, r3, #12
 80080dc:	431a      	orrs	r2, r3
 80080de:	0011      	movs	r1, r2
 80080e0:	4b9b      	ldr	r3, [pc, #620]	; (8008350 <_dtoa_r+0x36c>)
 80080e2:	9418      	str	r4, [sp, #96]	; 0x60
 80080e4:	18f6      	adds	r6, r6, r3
 80080e6:	2200      	movs	r2, #0
 80080e8:	4b9a      	ldr	r3, [pc, #616]	; (8008354 <_dtoa_r+0x370>)
 80080ea:	f7f9 fbf7 	bl	80018dc <__aeabi_dsub>
 80080ee:	4a9a      	ldr	r2, [pc, #616]	; (8008358 <_dtoa_r+0x374>)
 80080f0:	4b9a      	ldr	r3, [pc, #616]	; (800835c <_dtoa_r+0x378>)
 80080f2:	f7f9 f987 	bl	8001404 <__aeabi_dmul>
 80080f6:	4a9a      	ldr	r2, [pc, #616]	; (8008360 <_dtoa_r+0x37c>)
 80080f8:	4b9a      	ldr	r3, [pc, #616]	; (8008364 <_dtoa_r+0x380>)
 80080fa:	f7f8 fa45 	bl	8000588 <__aeabi_dadd>
 80080fe:	0004      	movs	r4, r0
 8008100:	0030      	movs	r0, r6
 8008102:	000d      	movs	r5, r1
 8008104:	f7f9 ffd0 	bl	80020a8 <__aeabi_i2d>
 8008108:	4a97      	ldr	r2, [pc, #604]	; (8008368 <_dtoa_r+0x384>)
 800810a:	4b98      	ldr	r3, [pc, #608]	; (800836c <_dtoa_r+0x388>)
 800810c:	f7f9 f97a 	bl	8001404 <__aeabi_dmul>
 8008110:	0002      	movs	r2, r0
 8008112:	000b      	movs	r3, r1
 8008114:	0020      	movs	r0, r4
 8008116:	0029      	movs	r1, r5
 8008118:	f7f8 fa36 	bl	8000588 <__aeabi_dadd>
 800811c:	0004      	movs	r4, r0
 800811e:	000d      	movs	r5, r1
 8008120:	f7f9 ff8c 	bl	800203c <__aeabi_d2iz>
 8008124:	2200      	movs	r2, #0
 8008126:	9002      	str	r0, [sp, #8]
 8008128:	2300      	movs	r3, #0
 800812a:	0020      	movs	r0, r4
 800812c:	0029      	movs	r1, r5
 800812e:	f7f8 f993 	bl	8000458 <__aeabi_dcmplt>
 8008132:	2800      	cmp	r0, #0
 8008134:	d00b      	beq.n	800814e <_dtoa_r+0x16a>
 8008136:	9802      	ldr	r0, [sp, #8]
 8008138:	f7f9 ffb6 	bl	80020a8 <__aeabi_i2d>
 800813c:	002b      	movs	r3, r5
 800813e:	0022      	movs	r2, r4
 8008140:	f7f8 f984 	bl	800044c <__aeabi_dcmpeq>
 8008144:	4243      	negs	r3, r0
 8008146:	4158      	adcs	r0, r3
 8008148:	9b02      	ldr	r3, [sp, #8]
 800814a:	1a1b      	subs	r3, r3, r0
 800814c:	9302      	str	r3, [sp, #8]
 800814e:	2301      	movs	r3, #1
 8008150:	9316      	str	r3, [sp, #88]	; 0x58
 8008152:	9b02      	ldr	r3, [sp, #8]
 8008154:	2b16      	cmp	r3, #22
 8008156:	d80f      	bhi.n	8008178 <_dtoa_r+0x194>
 8008158:	9812      	ldr	r0, [sp, #72]	; 0x48
 800815a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800815c:	00da      	lsls	r2, r3, #3
 800815e:	4b84      	ldr	r3, [pc, #528]	; (8008370 <_dtoa_r+0x38c>)
 8008160:	189b      	adds	r3, r3, r2
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	f7f8 f977 	bl	8000458 <__aeabi_dcmplt>
 800816a:	2800      	cmp	r0, #0
 800816c:	d049      	beq.n	8008202 <_dtoa_r+0x21e>
 800816e:	9b02      	ldr	r3, [sp, #8]
 8008170:	3b01      	subs	r3, #1
 8008172:	9302      	str	r3, [sp, #8]
 8008174:	2300      	movs	r3, #0
 8008176:	9316      	str	r3, [sp, #88]	; 0x58
 8008178:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800817a:	1b9e      	subs	r6, r3, r6
 800817c:	2300      	movs	r3, #0
 800817e:	930a      	str	r3, [sp, #40]	; 0x28
 8008180:	0033      	movs	r3, r6
 8008182:	3b01      	subs	r3, #1
 8008184:	930d      	str	r3, [sp, #52]	; 0x34
 8008186:	d504      	bpl.n	8008192 <_dtoa_r+0x1ae>
 8008188:	2301      	movs	r3, #1
 800818a:	1b9b      	subs	r3, r3, r6
 800818c:	930a      	str	r3, [sp, #40]	; 0x28
 800818e:	2300      	movs	r3, #0
 8008190:	930d      	str	r3, [sp, #52]	; 0x34
 8008192:	9b02      	ldr	r3, [sp, #8]
 8008194:	2b00      	cmp	r3, #0
 8008196:	db36      	blt.n	8008206 <_dtoa_r+0x222>
 8008198:	9a02      	ldr	r2, [sp, #8]
 800819a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800819c:	4694      	mov	ip, r2
 800819e:	4463      	add	r3, ip
 80081a0:	930d      	str	r3, [sp, #52]	; 0x34
 80081a2:	2300      	movs	r3, #0
 80081a4:	9215      	str	r2, [sp, #84]	; 0x54
 80081a6:	930e      	str	r3, [sp, #56]	; 0x38
 80081a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80081aa:	2401      	movs	r4, #1
 80081ac:	2b09      	cmp	r3, #9
 80081ae:	d864      	bhi.n	800827a <_dtoa_r+0x296>
 80081b0:	2b05      	cmp	r3, #5
 80081b2:	dd02      	ble.n	80081ba <_dtoa_r+0x1d6>
 80081b4:	2400      	movs	r4, #0
 80081b6:	3b04      	subs	r3, #4
 80081b8:	9322      	str	r3, [sp, #136]	; 0x88
 80081ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80081bc:	1e98      	subs	r0, r3, #2
 80081be:	2803      	cmp	r0, #3
 80081c0:	d864      	bhi.n	800828c <_dtoa_r+0x2a8>
 80081c2:	f7f7 ffa9 	bl	8000118 <__gnu_thumb1_case_uqi>
 80081c6:	3829      	.short	0x3829
 80081c8:	5836      	.short	0x5836
 80081ca:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80081cc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80081ce:	189e      	adds	r6, r3, r2
 80081d0:	4b68      	ldr	r3, [pc, #416]	; (8008374 <_dtoa_r+0x390>)
 80081d2:	18f2      	adds	r2, r6, r3
 80081d4:	2a20      	cmp	r2, #32
 80081d6:	dd0f      	ble.n	80081f8 <_dtoa_r+0x214>
 80081d8:	2340      	movs	r3, #64	; 0x40
 80081da:	1a9b      	subs	r3, r3, r2
 80081dc:	409d      	lsls	r5, r3
 80081de:	4b66      	ldr	r3, [pc, #408]	; (8008378 <_dtoa_r+0x394>)
 80081e0:	9802      	ldr	r0, [sp, #8]
 80081e2:	18f3      	adds	r3, r6, r3
 80081e4:	40d8      	lsrs	r0, r3
 80081e6:	4328      	orrs	r0, r5
 80081e8:	f7f9 ff8e 	bl	8002108 <__aeabi_ui2d>
 80081ec:	2301      	movs	r3, #1
 80081ee:	4c63      	ldr	r4, [pc, #396]	; (800837c <_dtoa_r+0x398>)
 80081f0:	3e01      	subs	r6, #1
 80081f2:	1909      	adds	r1, r1, r4
 80081f4:	9318      	str	r3, [sp, #96]	; 0x60
 80081f6:	e776      	b.n	80080e6 <_dtoa_r+0x102>
 80081f8:	2320      	movs	r3, #32
 80081fa:	9802      	ldr	r0, [sp, #8]
 80081fc:	1a9b      	subs	r3, r3, r2
 80081fe:	4098      	lsls	r0, r3
 8008200:	e7f2      	b.n	80081e8 <_dtoa_r+0x204>
 8008202:	9016      	str	r0, [sp, #88]	; 0x58
 8008204:	e7b8      	b.n	8008178 <_dtoa_r+0x194>
 8008206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008208:	9a02      	ldr	r2, [sp, #8]
 800820a:	1a9b      	subs	r3, r3, r2
 800820c:	930a      	str	r3, [sp, #40]	; 0x28
 800820e:	4253      	negs	r3, r2
 8008210:	930e      	str	r3, [sp, #56]	; 0x38
 8008212:	2300      	movs	r3, #0
 8008214:	9315      	str	r3, [sp, #84]	; 0x54
 8008216:	e7c7      	b.n	80081a8 <_dtoa_r+0x1c4>
 8008218:	2300      	movs	r3, #0
 800821a:	930f      	str	r3, [sp, #60]	; 0x3c
 800821c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800821e:	930c      	str	r3, [sp, #48]	; 0x30
 8008220:	9307      	str	r3, [sp, #28]
 8008222:	2b00      	cmp	r3, #0
 8008224:	dc13      	bgt.n	800824e <_dtoa_r+0x26a>
 8008226:	2301      	movs	r3, #1
 8008228:	001a      	movs	r2, r3
 800822a:	930c      	str	r3, [sp, #48]	; 0x30
 800822c:	9307      	str	r3, [sp, #28]
 800822e:	9223      	str	r2, [sp, #140]	; 0x8c
 8008230:	e00d      	b.n	800824e <_dtoa_r+0x26a>
 8008232:	2301      	movs	r3, #1
 8008234:	e7f1      	b.n	800821a <_dtoa_r+0x236>
 8008236:	2300      	movs	r3, #0
 8008238:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800823a:	930f      	str	r3, [sp, #60]	; 0x3c
 800823c:	4694      	mov	ip, r2
 800823e:	9b02      	ldr	r3, [sp, #8]
 8008240:	4463      	add	r3, ip
 8008242:	930c      	str	r3, [sp, #48]	; 0x30
 8008244:	3301      	adds	r3, #1
 8008246:	9307      	str	r3, [sp, #28]
 8008248:	2b00      	cmp	r3, #0
 800824a:	dc00      	bgt.n	800824e <_dtoa_r+0x26a>
 800824c:	2301      	movs	r3, #1
 800824e:	2200      	movs	r2, #0
 8008250:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008252:	6042      	str	r2, [r0, #4]
 8008254:	3204      	adds	r2, #4
 8008256:	0015      	movs	r5, r2
 8008258:	3514      	adds	r5, #20
 800825a:	6841      	ldr	r1, [r0, #4]
 800825c:	429d      	cmp	r5, r3
 800825e:	d919      	bls.n	8008294 <_dtoa_r+0x2b0>
 8008260:	0038      	movs	r0, r7
 8008262:	f001 f969 	bl	8009538 <_Balloc>
 8008266:	9006      	str	r0, [sp, #24]
 8008268:	2800      	cmp	r0, #0
 800826a:	d117      	bne.n	800829c <_dtoa_r+0x2b8>
 800826c:	21d5      	movs	r1, #213	; 0xd5
 800826e:	0002      	movs	r2, r0
 8008270:	4b43      	ldr	r3, [pc, #268]	; (8008380 <_dtoa_r+0x39c>)
 8008272:	0049      	lsls	r1, r1, #1
 8008274:	e6cb      	b.n	800800e <_dtoa_r+0x2a>
 8008276:	2301      	movs	r3, #1
 8008278:	e7de      	b.n	8008238 <_dtoa_r+0x254>
 800827a:	2300      	movs	r3, #0
 800827c:	940f      	str	r4, [sp, #60]	; 0x3c
 800827e:	9322      	str	r3, [sp, #136]	; 0x88
 8008280:	3b01      	subs	r3, #1
 8008282:	930c      	str	r3, [sp, #48]	; 0x30
 8008284:	9307      	str	r3, [sp, #28]
 8008286:	2200      	movs	r2, #0
 8008288:	3313      	adds	r3, #19
 800828a:	e7d0      	b.n	800822e <_dtoa_r+0x24a>
 800828c:	2301      	movs	r3, #1
 800828e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008290:	3b02      	subs	r3, #2
 8008292:	e7f6      	b.n	8008282 <_dtoa_r+0x29e>
 8008294:	3101      	adds	r1, #1
 8008296:	6041      	str	r1, [r0, #4]
 8008298:	0052      	lsls	r2, r2, #1
 800829a:	e7dc      	b.n	8008256 <_dtoa_r+0x272>
 800829c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829e:	9a06      	ldr	r2, [sp, #24]
 80082a0:	601a      	str	r2, [r3, #0]
 80082a2:	9b07      	ldr	r3, [sp, #28]
 80082a4:	2b0e      	cmp	r3, #14
 80082a6:	d900      	bls.n	80082aa <_dtoa_r+0x2c6>
 80082a8:	e0eb      	b.n	8008482 <_dtoa_r+0x49e>
 80082aa:	2c00      	cmp	r4, #0
 80082ac:	d100      	bne.n	80082b0 <_dtoa_r+0x2cc>
 80082ae:	e0e8      	b.n	8008482 <_dtoa_r+0x49e>
 80082b0:	9b02      	ldr	r3, [sp, #8]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	dd68      	ble.n	8008388 <_dtoa_r+0x3a4>
 80082b6:	001a      	movs	r2, r3
 80082b8:	210f      	movs	r1, #15
 80082ba:	4b2d      	ldr	r3, [pc, #180]	; (8008370 <_dtoa_r+0x38c>)
 80082bc:	400a      	ands	r2, r1
 80082be:	00d2      	lsls	r2, r2, #3
 80082c0:	189b      	adds	r3, r3, r2
 80082c2:	681d      	ldr	r5, [r3, #0]
 80082c4:	685e      	ldr	r6, [r3, #4]
 80082c6:	9b02      	ldr	r3, [sp, #8]
 80082c8:	111c      	asrs	r4, r3, #4
 80082ca:	2302      	movs	r3, #2
 80082cc:	9310      	str	r3, [sp, #64]	; 0x40
 80082ce:	9b02      	ldr	r3, [sp, #8]
 80082d0:	05db      	lsls	r3, r3, #23
 80082d2:	d50b      	bpl.n	80082ec <_dtoa_r+0x308>
 80082d4:	4b2b      	ldr	r3, [pc, #172]	; (8008384 <_dtoa_r+0x3a0>)
 80082d6:	400c      	ands	r4, r1
 80082d8:	6a1a      	ldr	r2, [r3, #32]
 80082da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082dc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80082de:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80082e0:	f7f8 fc8e 	bl	8000c00 <__aeabi_ddiv>
 80082e4:	2303      	movs	r3, #3
 80082e6:	9008      	str	r0, [sp, #32]
 80082e8:	9109      	str	r1, [sp, #36]	; 0x24
 80082ea:	9310      	str	r3, [sp, #64]	; 0x40
 80082ec:	4b25      	ldr	r3, [pc, #148]	; (8008384 <_dtoa_r+0x3a0>)
 80082ee:	9314      	str	r3, [sp, #80]	; 0x50
 80082f0:	2c00      	cmp	r4, #0
 80082f2:	d108      	bne.n	8008306 <_dtoa_r+0x322>
 80082f4:	9808      	ldr	r0, [sp, #32]
 80082f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082f8:	002a      	movs	r2, r5
 80082fa:	0033      	movs	r3, r6
 80082fc:	f7f8 fc80 	bl	8000c00 <__aeabi_ddiv>
 8008300:	9008      	str	r0, [sp, #32]
 8008302:	9109      	str	r1, [sp, #36]	; 0x24
 8008304:	e05c      	b.n	80083c0 <_dtoa_r+0x3dc>
 8008306:	2301      	movs	r3, #1
 8008308:	421c      	tst	r4, r3
 800830a:	d00b      	beq.n	8008324 <_dtoa_r+0x340>
 800830c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800830e:	0028      	movs	r0, r5
 8008310:	3301      	adds	r3, #1
 8008312:	9310      	str	r3, [sp, #64]	; 0x40
 8008314:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008316:	0031      	movs	r1, r6
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	f7f9 f872 	bl	8001404 <__aeabi_dmul>
 8008320:	0005      	movs	r5, r0
 8008322:	000e      	movs	r6, r1
 8008324:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008326:	1064      	asrs	r4, r4, #1
 8008328:	3308      	adds	r3, #8
 800832a:	e7e0      	b.n	80082ee <_dtoa_r+0x30a>
 800832c:	0800ad56 	.word	0x0800ad56
 8008330:	0800ad6d 	.word	0x0800ad6d
 8008334:	7ff00000 	.word	0x7ff00000
 8008338:	0000270f 	.word	0x0000270f
 800833c:	0800ad52 	.word	0x0800ad52
 8008340:	0800ad55 	.word	0x0800ad55
 8008344:	0800abc8 	.word	0x0800abc8
 8008348:	0800abc9 	.word	0x0800abc9
 800834c:	3ff00000 	.word	0x3ff00000
 8008350:	fffffc01 	.word	0xfffffc01
 8008354:	3ff80000 	.word	0x3ff80000
 8008358:	636f4361 	.word	0x636f4361
 800835c:	3fd287a7 	.word	0x3fd287a7
 8008360:	8b60c8b3 	.word	0x8b60c8b3
 8008364:	3fc68a28 	.word	0x3fc68a28
 8008368:	509f79fb 	.word	0x509f79fb
 800836c:	3fd34413 	.word	0x3fd34413
 8008370:	0800aed8 	.word	0x0800aed8
 8008374:	00000432 	.word	0x00000432
 8008378:	00000412 	.word	0x00000412
 800837c:	fe100000 	.word	0xfe100000
 8008380:	0800adc8 	.word	0x0800adc8
 8008384:	0800aeb0 	.word	0x0800aeb0
 8008388:	2302      	movs	r3, #2
 800838a:	9310      	str	r3, [sp, #64]	; 0x40
 800838c:	9b02      	ldr	r3, [sp, #8]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d016      	beq.n	80083c0 <_dtoa_r+0x3dc>
 8008392:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008394:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008396:	425c      	negs	r4, r3
 8008398:	230f      	movs	r3, #15
 800839a:	4ab6      	ldr	r2, [pc, #728]	; (8008674 <_dtoa_r+0x690>)
 800839c:	4023      	ands	r3, r4
 800839e:	00db      	lsls	r3, r3, #3
 80083a0:	18d3      	adds	r3, r2, r3
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	f7f9 f82d 	bl	8001404 <__aeabi_dmul>
 80083aa:	2601      	movs	r6, #1
 80083ac:	2300      	movs	r3, #0
 80083ae:	9008      	str	r0, [sp, #32]
 80083b0:	9109      	str	r1, [sp, #36]	; 0x24
 80083b2:	4db1      	ldr	r5, [pc, #708]	; (8008678 <_dtoa_r+0x694>)
 80083b4:	1124      	asrs	r4, r4, #4
 80083b6:	2c00      	cmp	r4, #0
 80083b8:	d000      	beq.n	80083bc <_dtoa_r+0x3d8>
 80083ba:	e094      	b.n	80084e6 <_dtoa_r+0x502>
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d19f      	bne.n	8008300 <_dtoa_r+0x31c>
 80083c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d100      	bne.n	80083c8 <_dtoa_r+0x3e4>
 80083c6:	e09b      	b.n	8008500 <_dtoa_r+0x51c>
 80083c8:	9c08      	ldr	r4, [sp, #32]
 80083ca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80083cc:	2200      	movs	r2, #0
 80083ce:	0020      	movs	r0, r4
 80083d0:	0029      	movs	r1, r5
 80083d2:	4baa      	ldr	r3, [pc, #680]	; (800867c <_dtoa_r+0x698>)
 80083d4:	f7f8 f840 	bl	8000458 <__aeabi_dcmplt>
 80083d8:	2800      	cmp	r0, #0
 80083da:	d100      	bne.n	80083de <_dtoa_r+0x3fa>
 80083dc:	e090      	b.n	8008500 <_dtoa_r+0x51c>
 80083de:	9b07      	ldr	r3, [sp, #28]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d100      	bne.n	80083e6 <_dtoa_r+0x402>
 80083e4:	e08c      	b.n	8008500 <_dtoa_r+0x51c>
 80083e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	dd46      	ble.n	800847a <_dtoa_r+0x496>
 80083ec:	9b02      	ldr	r3, [sp, #8]
 80083ee:	2200      	movs	r2, #0
 80083f0:	0020      	movs	r0, r4
 80083f2:	0029      	movs	r1, r5
 80083f4:	1e5e      	subs	r6, r3, #1
 80083f6:	4ba2      	ldr	r3, [pc, #648]	; (8008680 <_dtoa_r+0x69c>)
 80083f8:	f7f9 f804 	bl	8001404 <__aeabi_dmul>
 80083fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80083fe:	9008      	str	r0, [sp, #32]
 8008400:	9109      	str	r1, [sp, #36]	; 0x24
 8008402:	3301      	adds	r3, #1
 8008404:	9310      	str	r3, [sp, #64]	; 0x40
 8008406:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008408:	9810      	ldr	r0, [sp, #64]	; 0x40
 800840a:	9c08      	ldr	r4, [sp, #32]
 800840c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800840e:	9314      	str	r3, [sp, #80]	; 0x50
 8008410:	f7f9 fe4a 	bl	80020a8 <__aeabi_i2d>
 8008414:	0022      	movs	r2, r4
 8008416:	002b      	movs	r3, r5
 8008418:	f7f8 fff4 	bl	8001404 <__aeabi_dmul>
 800841c:	2200      	movs	r2, #0
 800841e:	4b99      	ldr	r3, [pc, #612]	; (8008684 <_dtoa_r+0x6a0>)
 8008420:	f7f8 f8b2 	bl	8000588 <__aeabi_dadd>
 8008424:	9010      	str	r0, [sp, #64]	; 0x40
 8008426:	9111      	str	r1, [sp, #68]	; 0x44
 8008428:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800842a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800842c:	9208      	str	r2, [sp, #32]
 800842e:	9309      	str	r3, [sp, #36]	; 0x24
 8008430:	4a95      	ldr	r2, [pc, #596]	; (8008688 <_dtoa_r+0x6a4>)
 8008432:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008434:	4694      	mov	ip, r2
 8008436:	4463      	add	r3, ip
 8008438:	9317      	str	r3, [sp, #92]	; 0x5c
 800843a:	9309      	str	r3, [sp, #36]	; 0x24
 800843c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800843e:	2b00      	cmp	r3, #0
 8008440:	d161      	bne.n	8008506 <_dtoa_r+0x522>
 8008442:	2200      	movs	r2, #0
 8008444:	0020      	movs	r0, r4
 8008446:	0029      	movs	r1, r5
 8008448:	4b90      	ldr	r3, [pc, #576]	; (800868c <_dtoa_r+0x6a8>)
 800844a:	f7f9 fa47 	bl	80018dc <__aeabi_dsub>
 800844e:	9a08      	ldr	r2, [sp, #32]
 8008450:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008452:	0004      	movs	r4, r0
 8008454:	000d      	movs	r5, r1
 8008456:	f7f8 f813 	bl	8000480 <__aeabi_dcmpgt>
 800845a:	2800      	cmp	r0, #0
 800845c:	d000      	beq.n	8008460 <_dtoa_r+0x47c>
 800845e:	e2af      	b.n	80089c0 <_dtoa_r+0x9dc>
 8008460:	488b      	ldr	r0, [pc, #556]	; (8008690 <_dtoa_r+0x6ac>)
 8008462:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008464:	4684      	mov	ip, r0
 8008466:	4461      	add	r1, ip
 8008468:	000b      	movs	r3, r1
 800846a:	0020      	movs	r0, r4
 800846c:	0029      	movs	r1, r5
 800846e:	9a08      	ldr	r2, [sp, #32]
 8008470:	f7f7 fff2 	bl	8000458 <__aeabi_dcmplt>
 8008474:	2800      	cmp	r0, #0
 8008476:	d000      	beq.n	800847a <_dtoa_r+0x496>
 8008478:	e29f      	b.n	80089ba <_dtoa_r+0x9d6>
 800847a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800847c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800847e:	9308      	str	r3, [sp, #32]
 8008480:	9409      	str	r4, [sp, #36]	; 0x24
 8008482:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008484:	2b00      	cmp	r3, #0
 8008486:	da00      	bge.n	800848a <_dtoa_r+0x4a6>
 8008488:	e172      	b.n	8008770 <_dtoa_r+0x78c>
 800848a:	9a02      	ldr	r2, [sp, #8]
 800848c:	2a0e      	cmp	r2, #14
 800848e:	dd00      	ble.n	8008492 <_dtoa_r+0x4ae>
 8008490:	e16e      	b.n	8008770 <_dtoa_r+0x78c>
 8008492:	4b78      	ldr	r3, [pc, #480]	; (8008674 <_dtoa_r+0x690>)
 8008494:	00d2      	lsls	r2, r2, #3
 8008496:	189b      	adds	r3, r3, r2
 8008498:	685c      	ldr	r4, [r3, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	930a      	str	r3, [sp, #40]	; 0x28
 800849e:	940b      	str	r4, [sp, #44]	; 0x2c
 80084a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	db00      	blt.n	80084a8 <_dtoa_r+0x4c4>
 80084a6:	e0f7      	b.n	8008698 <_dtoa_r+0x6b4>
 80084a8:	9b07      	ldr	r3, [sp, #28]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	dd00      	ble.n	80084b0 <_dtoa_r+0x4cc>
 80084ae:	e0f3      	b.n	8008698 <_dtoa_r+0x6b4>
 80084b0:	d000      	beq.n	80084b4 <_dtoa_r+0x4d0>
 80084b2:	e282      	b.n	80089ba <_dtoa_r+0x9d6>
 80084b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80084b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80084b8:	2200      	movs	r2, #0
 80084ba:	4b74      	ldr	r3, [pc, #464]	; (800868c <_dtoa_r+0x6a8>)
 80084bc:	f7f8 ffa2 	bl	8001404 <__aeabi_dmul>
 80084c0:	9a08      	ldr	r2, [sp, #32]
 80084c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084c4:	f7f7 ffe6 	bl	8000494 <__aeabi_dcmpge>
 80084c8:	9e07      	ldr	r6, [sp, #28]
 80084ca:	0035      	movs	r5, r6
 80084cc:	2800      	cmp	r0, #0
 80084ce:	d000      	beq.n	80084d2 <_dtoa_r+0x4ee>
 80084d0:	e259      	b.n	8008986 <_dtoa_r+0x9a2>
 80084d2:	9b06      	ldr	r3, [sp, #24]
 80084d4:	9a06      	ldr	r2, [sp, #24]
 80084d6:	3301      	adds	r3, #1
 80084d8:	9308      	str	r3, [sp, #32]
 80084da:	2331      	movs	r3, #49	; 0x31
 80084dc:	7013      	strb	r3, [r2, #0]
 80084de:	9b02      	ldr	r3, [sp, #8]
 80084e0:	3301      	adds	r3, #1
 80084e2:	9302      	str	r3, [sp, #8]
 80084e4:	e254      	b.n	8008990 <_dtoa_r+0x9ac>
 80084e6:	4234      	tst	r4, r6
 80084e8:	d007      	beq.n	80084fa <_dtoa_r+0x516>
 80084ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084ec:	3301      	adds	r3, #1
 80084ee:	9310      	str	r3, [sp, #64]	; 0x40
 80084f0:	682a      	ldr	r2, [r5, #0]
 80084f2:	686b      	ldr	r3, [r5, #4]
 80084f4:	f7f8 ff86 	bl	8001404 <__aeabi_dmul>
 80084f8:	0033      	movs	r3, r6
 80084fa:	1064      	asrs	r4, r4, #1
 80084fc:	3508      	adds	r5, #8
 80084fe:	e75a      	b.n	80083b6 <_dtoa_r+0x3d2>
 8008500:	9e02      	ldr	r6, [sp, #8]
 8008502:	9b07      	ldr	r3, [sp, #28]
 8008504:	e780      	b.n	8008408 <_dtoa_r+0x424>
 8008506:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008508:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800850a:	1e5a      	subs	r2, r3, #1
 800850c:	4b59      	ldr	r3, [pc, #356]	; (8008674 <_dtoa_r+0x690>)
 800850e:	00d2      	lsls	r2, r2, #3
 8008510:	189b      	adds	r3, r3, r2
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	2900      	cmp	r1, #0
 8008518:	d051      	beq.n	80085be <_dtoa_r+0x5da>
 800851a:	2000      	movs	r0, #0
 800851c:	495d      	ldr	r1, [pc, #372]	; (8008694 <_dtoa_r+0x6b0>)
 800851e:	f7f8 fb6f 	bl	8000c00 <__aeabi_ddiv>
 8008522:	9a08      	ldr	r2, [sp, #32]
 8008524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008526:	f7f9 f9d9 	bl	80018dc <__aeabi_dsub>
 800852a:	9a06      	ldr	r2, [sp, #24]
 800852c:	9b06      	ldr	r3, [sp, #24]
 800852e:	4694      	mov	ip, r2
 8008530:	9317      	str	r3, [sp, #92]	; 0x5c
 8008532:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008534:	9010      	str	r0, [sp, #64]	; 0x40
 8008536:	9111      	str	r1, [sp, #68]	; 0x44
 8008538:	4463      	add	r3, ip
 800853a:	9319      	str	r3, [sp, #100]	; 0x64
 800853c:	0029      	movs	r1, r5
 800853e:	0020      	movs	r0, r4
 8008540:	f7f9 fd7c 	bl	800203c <__aeabi_d2iz>
 8008544:	9014      	str	r0, [sp, #80]	; 0x50
 8008546:	f7f9 fdaf 	bl	80020a8 <__aeabi_i2d>
 800854a:	0002      	movs	r2, r0
 800854c:	000b      	movs	r3, r1
 800854e:	0020      	movs	r0, r4
 8008550:	0029      	movs	r1, r5
 8008552:	f7f9 f9c3 	bl	80018dc <__aeabi_dsub>
 8008556:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008558:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800855a:	3301      	adds	r3, #1
 800855c:	9308      	str	r3, [sp, #32]
 800855e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008560:	0004      	movs	r4, r0
 8008562:	3330      	adds	r3, #48	; 0x30
 8008564:	7013      	strb	r3, [r2, #0]
 8008566:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008568:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800856a:	000d      	movs	r5, r1
 800856c:	f7f7 ff74 	bl	8000458 <__aeabi_dcmplt>
 8008570:	2800      	cmp	r0, #0
 8008572:	d175      	bne.n	8008660 <_dtoa_r+0x67c>
 8008574:	0022      	movs	r2, r4
 8008576:	002b      	movs	r3, r5
 8008578:	2000      	movs	r0, #0
 800857a:	4940      	ldr	r1, [pc, #256]	; (800867c <_dtoa_r+0x698>)
 800857c:	f7f9 f9ae 	bl	80018dc <__aeabi_dsub>
 8008580:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008582:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008584:	f7f7 ff68 	bl	8000458 <__aeabi_dcmplt>
 8008588:	2800      	cmp	r0, #0
 800858a:	d000      	beq.n	800858e <_dtoa_r+0x5aa>
 800858c:	e0d2      	b.n	8008734 <_dtoa_r+0x750>
 800858e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008590:	9a08      	ldr	r2, [sp, #32]
 8008592:	4293      	cmp	r3, r2
 8008594:	d100      	bne.n	8008598 <_dtoa_r+0x5b4>
 8008596:	e770      	b.n	800847a <_dtoa_r+0x496>
 8008598:	9810      	ldr	r0, [sp, #64]	; 0x40
 800859a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800859c:	2200      	movs	r2, #0
 800859e:	4b38      	ldr	r3, [pc, #224]	; (8008680 <_dtoa_r+0x69c>)
 80085a0:	f7f8 ff30 	bl	8001404 <__aeabi_dmul>
 80085a4:	4b36      	ldr	r3, [pc, #216]	; (8008680 <_dtoa_r+0x69c>)
 80085a6:	9010      	str	r0, [sp, #64]	; 0x40
 80085a8:	9111      	str	r1, [sp, #68]	; 0x44
 80085aa:	2200      	movs	r2, #0
 80085ac:	0020      	movs	r0, r4
 80085ae:	0029      	movs	r1, r5
 80085b0:	f7f8 ff28 	bl	8001404 <__aeabi_dmul>
 80085b4:	9b08      	ldr	r3, [sp, #32]
 80085b6:	0004      	movs	r4, r0
 80085b8:	000d      	movs	r5, r1
 80085ba:	9317      	str	r3, [sp, #92]	; 0x5c
 80085bc:	e7be      	b.n	800853c <_dtoa_r+0x558>
 80085be:	9808      	ldr	r0, [sp, #32]
 80085c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085c2:	f7f8 ff1f 	bl	8001404 <__aeabi_dmul>
 80085c6:	9a06      	ldr	r2, [sp, #24]
 80085c8:	9b06      	ldr	r3, [sp, #24]
 80085ca:	4694      	mov	ip, r2
 80085cc:	9308      	str	r3, [sp, #32]
 80085ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80085d0:	9010      	str	r0, [sp, #64]	; 0x40
 80085d2:	9111      	str	r1, [sp, #68]	; 0x44
 80085d4:	4463      	add	r3, ip
 80085d6:	9319      	str	r3, [sp, #100]	; 0x64
 80085d8:	0029      	movs	r1, r5
 80085da:	0020      	movs	r0, r4
 80085dc:	f7f9 fd2e 	bl	800203c <__aeabi_d2iz>
 80085e0:	9017      	str	r0, [sp, #92]	; 0x5c
 80085e2:	f7f9 fd61 	bl	80020a8 <__aeabi_i2d>
 80085e6:	0002      	movs	r2, r0
 80085e8:	000b      	movs	r3, r1
 80085ea:	0020      	movs	r0, r4
 80085ec:	0029      	movs	r1, r5
 80085ee:	f7f9 f975 	bl	80018dc <__aeabi_dsub>
 80085f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085f4:	9a08      	ldr	r2, [sp, #32]
 80085f6:	3330      	adds	r3, #48	; 0x30
 80085f8:	7013      	strb	r3, [r2, #0]
 80085fa:	0013      	movs	r3, r2
 80085fc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80085fe:	3301      	adds	r3, #1
 8008600:	0004      	movs	r4, r0
 8008602:	000d      	movs	r5, r1
 8008604:	9308      	str	r3, [sp, #32]
 8008606:	4293      	cmp	r3, r2
 8008608:	d12c      	bne.n	8008664 <_dtoa_r+0x680>
 800860a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800860c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800860e:	9a06      	ldr	r2, [sp, #24]
 8008610:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008612:	4694      	mov	ip, r2
 8008614:	4463      	add	r3, ip
 8008616:	2200      	movs	r2, #0
 8008618:	9308      	str	r3, [sp, #32]
 800861a:	4b1e      	ldr	r3, [pc, #120]	; (8008694 <_dtoa_r+0x6b0>)
 800861c:	f7f7 ffb4 	bl	8000588 <__aeabi_dadd>
 8008620:	0002      	movs	r2, r0
 8008622:	000b      	movs	r3, r1
 8008624:	0020      	movs	r0, r4
 8008626:	0029      	movs	r1, r5
 8008628:	f7f7 ff2a 	bl	8000480 <__aeabi_dcmpgt>
 800862c:	2800      	cmp	r0, #0
 800862e:	d000      	beq.n	8008632 <_dtoa_r+0x64e>
 8008630:	e080      	b.n	8008734 <_dtoa_r+0x750>
 8008632:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008634:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008636:	2000      	movs	r0, #0
 8008638:	4916      	ldr	r1, [pc, #88]	; (8008694 <_dtoa_r+0x6b0>)
 800863a:	f7f9 f94f 	bl	80018dc <__aeabi_dsub>
 800863e:	0002      	movs	r2, r0
 8008640:	000b      	movs	r3, r1
 8008642:	0020      	movs	r0, r4
 8008644:	0029      	movs	r1, r5
 8008646:	f7f7 ff07 	bl	8000458 <__aeabi_dcmplt>
 800864a:	2800      	cmp	r0, #0
 800864c:	d100      	bne.n	8008650 <_dtoa_r+0x66c>
 800864e:	e714      	b.n	800847a <_dtoa_r+0x496>
 8008650:	9b08      	ldr	r3, [sp, #32]
 8008652:	001a      	movs	r2, r3
 8008654:	3a01      	subs	r2, #1
 8008656:	9208      	str	r2, [sp, #32]
 8008658:	7812      	ldrb	r2, [r2, #0]
 800865a:	2a30      	cmp	r2, #48	; 0x30
 800865c:	d0f8      	beq.n	8008650 <_dtoa_r+0x66c>
 800865e:	9308      	str	r3, [sp, #32]
 8008660:	9602      	str	r6, [sp, #8]
 8008662:	e055      	b.n	8008710 <_dtoa_r+0x72c>
 8008664:	2200      	movs	r2, #0
 8008666:	4b06      	ldr	r3, [pc, #24]	; (8008680 <_dtoa_r+0x69c>)
 8008668:	f7f8 fecc 	bl	8001404 <__aeabi_dmul>
 800866c:	0004      	movs	r4, r0
 800866e:	000d      	movs	r5, r1
 8008670:	e7b2      	b.n	80085d8 <_dtoa_r+0x5f4>
 8008672:	46c0      	nop			; (mov r8, r8)
 8008674:	0800aed8 	.word	0x0800aed8
 8008678:	0800aeb0 	.word	0x0800aeb0
 800867c:	3ff00000 	.word	0x3ff00000
 8008680:	40240000 	.word	0x40240000
 8008684:	401c0000 	.word	0x401c0000
 8008688:	fcc00000 	.word	0xfcc00000
 800868c:	40140000 	.word	0x40140000
 8008690:	7cc00000 	.word	0x7cc00000
 8008694:	3fe00000 	.word	0x3fe00000
 8008698:	9b07      	ldr	r3, [sp, #28]
 800869a:	9e06      	ldr	r6, [sp, #24]
 800869c:	3b01      	subs	r3, #1
 800869e:	199b      	adds	r3, r3, r6
 80086a0:	930c      	str	r3, [sp, #48]	; 0x30
 80086a2:	9c08      	ldr	r4, [sp, #32]
 80086a4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80086a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086aa:	0020      	movs	r0, r4
 80086ac:	0029      	movs	r1, r5
 80086ae:	f7f8 faa7 	bl	8000c00 <__aeabi_ddiv>
 80086b2:	f7f9 fcc3 	bl	800203c <__aeabi_d2iz>
 80086b6:	9007      	str	r0, [sp, #28]
 80086b8:	f7f9 fcf6 	bl	80020a8 <__aeabi_i2d>
 80086bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086c0:	f7f8 fea0 	bl	8001404 <__aeabi_dmul>
 80086c4:	0002      	movs	r2, r0
 80086c6:	000b      	movs	r3, r1
 80086c8:	0020      	movs	r0, r4
 80086ca:	0029      	movs	r1, r5
 80086cc:	f7f9 f906 	bl	80018dc <__aeabi_dsub>
 80086d0:	0033      	movs	r3, r6
 80086d2:	9a07      	ldr	r2, [sp, #28]
 80086d4:	3601      	adds	r6, #1
 80086d6:	3230      	adds	r2, #48	; 0x30
 80086d8:	701a      	strb	r2, [r3, #0]
 80086da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086dc:	9608      	str	r6, [sp, #32]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d139      	bne.n	8008756 <_dtoa_r+0x772>
 80086e2:	0002      	movs	r2, r0
 80086e4:	000b      	movs	r3, r1
 80086e6:	f7f7 ff4f 	bl	8000588 <__aeabi_dadd>
 80086ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086ee:	0004      	movs	r4, r0
 80086f0:	000d      	movs	r5, r1
 80086f2:	f7f7 fec5 	bl	8000480 <__aeabi_dcmpgt>
 80086f6:	2800      	cmp	r0, #0
 80086f8:	d11b      	bne.n	8008732 <_dtoa_r+0x74e>
 80086fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086fe:	0020      	movs	r0, r4
 8008700:	0029      	movs	r1, r5
 8008702:	f7f7 fea3 	bl	800044c <__aeabi_dcmpeq>
 8008706:	2800      	cmp	r0, #0
 8008708:	d002      	beq.n	8008710 <_dtoa_r+0x72c>
 800870a:	9b07      	ldr	r3, [sp, #28]
 800870c:	07db      	lsls	r3, r3, #31
 800870e:	d410      	bmi.n	8008732 <_dtoa_r+0x74e>
 8008710:	0038      	movs	r0, r7
 8008712:	9905      	ldr	r1, [sp, #20]
 8008714:	f000 ff54 	bl	80095c0 <_Bfree>
 8008718:	2300      	movs	r3, #0
 800871a:	9a08      	ldr	r2, [sp, #32]
 800871c:	9802      	ldr	r0, [sp, #8]
 800871e:	7013      	strb	r3, [r2, #0]
 8008720:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008722:	3001      	adds	r0, #1
 8008724:	6018      	str	r0, [r3, #0]
 8008726:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008728:	2b00      	cmp	r3, #0
 800872a:	d100      	bne.n	800872e <_dtoa_r+0x74a>
 800872c:	e4a6      	b.n	800807c <_dtoa_r+0x98>
 800872e:	601a      	str	r2, [r3, #0]
 8008730:	e4a4      	b.n	800807c <_dtoa_r+0x98>
 8008732:	9e02      	ldr	r6, [sp, #8]
 8008734:	9b08      	ldr	r3, [sp, #32]
 8008736:	9308      	str	r3, [sp, #32]
 8008738:	3b01      	subs	r3, #1
 800873a:	781a      	ldrb	r2, [r3, #0]
 800873c:	2a39      	cmp	r2, #57	; 0x39
 800873e:	d106      	bne.n	800874e <_dtoa_r+0x76a>
 8008740:	9a06      	ldr	r2, [sp, #24]
 8008742:	429a      	cmp	r2, r3
 8008744:	d1f7      	bne.n	8008736 <_dtoa_r+0x752>
 8008746:	2230      	movs	r2, #48	; 0x30
 8008748:	9906      	ldr	r1, [sp, #24]
 800874a:	3601      	adds	r6, #1
 800874c:	700a      	strb	r2, [r1, #0]
 800874e:	781a      	ldrb	r2, [r3, #0]
 8008750:	3201      	adds	r2, #1
 8008752:	701a      	strb	r2, [r3, #0]
 8008754:	e784      	b.n	8008660 <_dtoa_r+0x67c>
 8008756:	2200      	movs	r2, #0
 8008758:	4baa      	ldr	r3, [pc, #680]	; (8008a04 <_dtoa_r+0xa20>)
 800875a:	f7f8 fe53 	bl	8001404 <__aeabi_dmul>
 800875e:	2200      	movs	r2, #0
 8008760:	2300      	movs	r3, #0
 8008762:	0004      	movs	r4, r0
 8008764:	000d      	movs	r5, r1
 8008766:	f7f7 fe71 	bl	800044c <__aeabi_dcmpeq>
 800876a:	2800      	cmp	r0, #0
 800876c:	d09b      	beq.n	80086a6 <_dtoa_r+0x6c2>
 800876e:	e7cf      	b.n	8008710 <_dtoa_r+0x72c>
 8008770:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008772:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008774:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008776:	2d00      	cmp	r5, #0
 8008778:	d012      	beq.n	80087a0 <_dtoa_r+0x7bc>
 800877a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800877c:	2a01      	cmp	r2, #1
 800877e:	dc66      	bgt.n	800884e <_dtoa_r+0x86a>
 8008780:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008782:	2a00      	cmp	r2, #0
 8008784:	d05d      	beq.n	8008842 <_dtoa_r+0x85e>
 8008786:	4aa0      	ldr	r2, [pc, #640]	; (8008a08 <_dtoa_r+0xa24>)
 8008788:	189b      	adds	r3, r3, r2
 800878a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800878c:	2101      	movs	r1, #1
 800878e:	18d2      	adds	r2, r2, r3
 8008790:	920a      	str	r2, [sp, #40]	; 0x28
 8008792:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008794:	0038      	movs	r0, r7
 8008796:	18d3      	adds	r3, r2, r3
 8008798:	930d      	str	r3, [sp, #52]	; 0x34
 800879a:	f001 f80d 	bl	80097b8 <__i2b>
 800879e:	0005      	movs	r5, r0
 80087a0:	2c00      	cmp	r4, #0
 80087a2:	dd0e      	ble.n	80087c2 <_dtoa_r+0x7de>
 80087a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	dd0b      	ble.n	80087c2 <_dtoa_r+0x7de>
 80087aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80087ac:	0023      	movs	r3, r4
 80087ae:	4294      	cmp	r4, r2
 80087b0:	dd00      	ble.n	80087b4 <_dtoa_r+0x7d0>
 80087b2:	0013      	movs	r3, r2
 80087b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087b6:	1ae4      	subs	r4, r4, r3
 80087b8:	1ad2      	subs	r2, r2, r3
 80087ba:	920a      	str	r2, [sp, #40]	; 0x28
 80087bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80087be:	1ad3      	subs	r3, r2, r3
 80087c0:	930d      	str	r3, [sp, #52]	; 0x34
 80087c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d01f      	beq.n	8008808 <_dtoa_r+0x824>
 80087c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d054      	beq.n	8008878 <_dtoa_r+0x894>
 80087ce:	2e00      	cmp	r6, #0
 80087d0:	dd11      	ble.n	80087f6 <_dtoa_r+0x812>
 80087d2:	0029      	movs	r1, r5
 80087d4:	0032      	movs	r2, r6
 80087d6:	0038      	movs	r0, r7
 80087d8:	f001 f8b4 	bl	8009944 <__pow5mult>
 80087dc:	9a05      	ldr	r2, [sp, #20]
 80087de:	0001      	movs	r1, r0
 80087e0:	0005      	movs	r5, r0
 80087e2:	0038      	movs	r0, r7
 80087e4:	f000 fffe 	bl	80097e4 <__multiply>
 80087e8:	9905      	ldr	r1, [sp, #20]
 80087ea:	9014      	str	r0, [sp, #80]	; 0x50
 80087ec:	0038      	movs	r0, r7
 80087ee:	f000 fee7 	bl	80095c0 <_Bfree>
 80087f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087f4:	9305      	str	r3, [sp, #20]
 80087f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087f8:	1b9a      	subs	r2, r3, r6
 80087fa:	42b3      	cmp	r3, r6
 80087fc:	d004      	beq.n	8008808 <_dtoa_r+0x824>
 80087fe:	0038      	movs	r0, r7
 8008800:	9905      	ldr	r1, [sp, #20]
 8008802:	f001 f89f 	bl	8009944 <__pow5mult>
 8008806:	9005      	str	r0, [sp, #20]
 8008808:	2101      	movs	r1, #1
 800880a:	0038      	movs	r0, r7
 800880c:	f000 ffd4 	bl	80097b8 <__i2b>
 8008810:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008812:	0006      	movs	r6, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	dd31      	ble.n	800887c <_dtoa_r+0x898>
 8008818:	001a      	movs	r2, r3
 800881a:	0001      	movs	r1, r0
 800881c:	0038      	movs	r0, r7
 800881e:	f001 f891 	bl	8009944 <__pow5mult>
 8008822:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008824:	0006      	movs	r6, r0
 8008826:	2b01      	cmp	r3, #1
 8008828:	dd2d      	ble.n	8008886 <_dtoa_r+0x8a2>
 800882a:	2300      	movs	r3, #0
 800882c:	930e      	str	r3, [sp, #56]	; 0x38
 800882e:	6933      	ldr	r3, [r6, #16]
 8008830:	3303      	adds	r3, #3
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	18f3      	adds	r3, r6, r3
 8008836:	6858      	ldr	r0, [r3, #4]
 8008838:	f000 ff76 	bl	8009728 <__hi0bits>
 800883c:	2320      	movs	r3, #32
 800883e:	1a18      	subs	r0, r3, r0
 8008840:	e039      	b.n	80088b6 <_dtoa_r+0x8d2>
 8008842:	2336      	movs	r3, #54	; 0x36
 8008844:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008846:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008848:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800884a:	1a9b      	subs	r3, r3, r2
 800884c:	e79d      	b.n	800878a <_dtoa_r+0x7a6>
 800884e:	9b07      	ldr	r3, [sp, #28]
 8008850:	1e5e      	subs	r6, r3, #1
 8008852:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008854:	42b3      	cmp	r3, r6
 8008856:	db07      	blt.n	8008868 <_dtoa_r+0x884>
 8008858:	1b9e      	subs	r6, r3, r6
 800885a:	9b07      	ldr	r3, [sp, #28]
 800885c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800885e:	2b00      	cmp	r3, #0
 8008860:	da93      	bge.n	800878a <_dtoa_r+0x7a6>
 8008862:	1ae4      	subs	r4, r4, r3
 8008864:	2300      	movs	r3, #0
 8008866:	e790      	b.n	800878a <_dtoa_r+0x7a6>
 8008868:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800886a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800886c:	1af3      	subs	r3, r6, r3
 800886e:	18d3      	adds	r3, r2, r3
 8008870:	960e      	str	r6, [sp, #56]	; 0x38
 8008872:	9315      	str	r3, [sp, #84]	; 0x54
 8008874:	2600      	movs	r6, #0
 8008876:	e7f0      	b.n	800885a <_dtoa_r+0x876>
 8008878:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800887a:	e7c0      	b.n	80087fe <_dtoa_r+0x81a>
 800887c:	2300      	movs	r3, #0
 800887e:	930e      	str	r3, [sp, #56]	; 0x38
 8008880:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008882:	2b01      	cmp	r3, #1
 8008884:	dc13      	bgt.n	80088ae <_dtoa_r+0x8ca>
 8008886:	2300      	movs	r3, #0
 8008888:	930e      	str	r3, [sp, #56]	; 0x38
 800888a:	9b08      	ldr	r3, [sp, #32]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d10e      	bne.n	80088ae <_dtoa_r+0x8ca>
 8008890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008892:	031b      	lsls	r3, r3, #12
 8008894:	d10b      	bne.n	80088ae <_dtoa_r+0x8ca>
 8008896:	4b5d      	ldr	r3, [pc, #372]	; (8008a0c <_dtoa_r+0xa28>)
 8008898:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800889a:	4213      	tst	r3, r2
 800889c:	d007      	beq.n	80088ae <_dtoa_r+0x8ca>
 800889e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088a0:	3301      	adds	r3, #1
 80088a2:	930a      	str	r3, [sp, #40]	; 0x28
 80088a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088a6:	3301      	adds	r3, #1
 80088a8:	930d      	str	r3, [sp, #52]	; 0x34
 80088aa:	2301      	movs	r3, #1
 80088ac:	930e      	str	r3, [sp, #56]	; 0x38
 80088ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088b0:	2001      	movs	r0, #1
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d1bb      	bne.n	800882e <_dtoa_r+0x84a>
 80088b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088b8:	221f      	movs	r2, #31
 80088ba:	1818      	adds	r0, r3, r0
 80088bc:	0003      	movs	r3, r0
 80088be:	4013      	ands	r3, r2
 80088c0:	4210      	tst	r0, r2
 80088c2:	d046      	beq.n	8008952 <_dtoa_r+0x96e>
 80088c4:	3201      	adds	r2, #1
 80088c6:	1ad2      	subs	r2, r2, r3
 80088c8:	2a04      	cmp	r2, #4
 80088ca:	dd3f      	ble.n	800894c <_dtoa_r+0x968>
 80088cc:	221c      	movs	r2, #28
 80088ce:	1ad3      	subs	r3, r2, r3
 80088d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088d2:	18e4      	adds	r4, r4, r3
 80088d4:	18d2      	adds	r2, r2, r3
 80088d6:	920a      	str	r2, [sp, #40]	; 0x28
 80088d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80088da:	18d3      	adds	r3, r2, r3
 80088dc:	930d      	str	r3, [sp, #52]	; 0x34
 80088de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	dd05      	ble.n	80088f0 <_dtoa_r+0x90c>
 80088e4:	001a      	movs	r2, r3
 80088e6:	0038      	movs	r0, r7
 80088e8:	9905      	ldr	r1, [sp, #20]
 80088ea:	f001 f887 	bl	80099fc <__lshift>
 80088ee:	9005      	str	r0, [sp, #20]
 80088f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	dd05      	ble.n	8008902 <_dtoa_r+0x91e>
 80088f6:	0031      	movs	r1, r6
 80088f8:	001a      	movs	r2, r3
 80088fa:	0038      	movs	r0, r7
 80088fc:	f001 f87e 	bl	80099fc <__lshift>
 8008900:	0006      	movs	r6, r0
 8008902:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008904:	2b00      	cmp	r3, #0
 8008906:	d026      	beq.n	8008956 <_dtoa_r+0x972>
 8008908:	0031      	movs	r1, r6
 800890a:	9805      	ldr	r0, [sp, #20]
 800890c:	f001 f8e4 	bl	8009ad8 <__mcmp>
 8008910:	2800      	cmp	r0, #0
 8008912:	da20      	bge.n	8008956 <_dtoa_r+0x972>
 8008914:	9b02      	ldr	r3, [sp, #8]
 8008916:	220a      	movs	r2, #10
 8008918:	3b01      	subs	r3, #1
 800891a:	9302      	str	r3, [sp, #8]
 800891c:	0038      	movs	r0, r7
 800891e:	2300      	movs	r3, #0
 8008920:	9905      	ldr	r1, [sp, #20]
 8008922:	f000 fe71 	bl	8009608 <__multadd>
 8008926:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008928:	9005      	str	r0, [sp, #20]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d100      	bne.n	8008930 <_dtoa_r+0x94c>
 800892e:	e166      	b.n	8008bfe <_dtoa_r+0xc1a>
 8008930:	2300      	movs	r3, #0
 8008932:	0029      	movs	r1, r5
 8008934:	220a      	movs	r2, #10
 8008936:	0038      	movs	r0, r7
 8008938:	f000 fe66 	bl	8009608 <__multadd>
 800893c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800893e:	0005      	movs	r5, r0
 8008940:	2b00      	cmp	r3, #0
 8008942:	dc47      	bgt.n	80089d4 <_dtoa_r+0x9f0>
 8008944:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008946:	2b02      	cmp	r3, #2
 8008948:	dc0d      	bgt.n	8008966 <_dtoa_r+0x982>
 800894a:	e043      	b.n	80089d4 <_dtoa_r+0x9f0>
 800894c:	2a04      	cmp	r2, #4
 800894e:	d0c6      	beq.n	80088de <_dtoa_r+0x8fa>
 8008950:	0013      	movs	r3, r2
 8008952:	331c      	adds	r3, #28
 8008954:	e7bc      	b.n	80088d0 <_dtoa_r+0x8ec>
 8008956:	9b07      	ldr	r3, [sp, #28]
 8008958:	2b00      	cmp	r3, #0
 800895a:	dc35      	bgt.n	80089c8 <_dtoa_r+0x9e4>
 800895c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800895e:	2b02      	cmp	r3, #2
 8008960:	dd32      	ble.n	80089c8 <_dtoa_r+0x9e4>
 8008962:	9b07      	ldr	r3, [sp, #28]
 8008964:	930c      	str	r3, [sp, #48]	; 0x30
 8008966:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008968:	2b00      	cmp	r3, #0
 800896a:	d10c      	bne.n	8008986 <_dtoa_r+0x9a2>
 800896c:	0031      	movs	r1, r6
 800896e:	2205      	movs	r2, #5
 8008970:	0038      	movs	r0, r7
 8008972:	f000 fe49 	bl	8009608 <__multadd>
 8008976:	0006      	movs	r6, r0
 8008978:	0001      	movs	r1, r0
 800897a:	9805      	ldr	r0, [sp, #20]
 800897c:	f001 f8ac 	bl	8009ad8 <__mcmp>
 8008980:	2800      	cmp	r0, #0
 8008982:	dd00      	ble.n	8008986 <_dtoa_r+0x9a2>
 8008984:	e5a5      	b.n	80084d2 <_dtoa_r+0x4ee>
 8008986:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008988:	43db      	mvns	r3, r3
 800898a:	9302      	str	r3, [sp, #8]
 800898c:	9b06      	ldr	r3, [sp, #24]
 800898e:	9308      	str	r3, [sp, #32]
 8008990:	2400      	movs	r4, #0
 8008992:	0031      	movs	r1, r6
 8008994:	0038      	movs	r0, r7
 8008996:	f000 fe13 	bl	80095c0 <_Bfree>
 800899a:	2d00      	cmp	r5, #0
 800899c:	d100      	bne.n	80089a0 <_dtoa_r+0x9bc>
 800899e:	e6b7      	b.n	8008710 <_dtoa_r+0x72c>
 80089a0:	2c00      	cmp	r4, #0
 80089a2:	d005      	beq.n	80089b0 <_dtoa_r+0x9cc>
 80089a4:	42ac      	cmp	r4, r5
 80089a6:	d003      	beq.n	80089b0 <_dtoa_r+0x9cc>
 80089a8:	0021      	movs	r1, r4
 80089aa:	0038      	movs	r0, r7
 80089ac:	f000 fe08 	bl	80095c0 <_Bfree>
 80089b0:	0029      	movs	r1, r5
 80089b2:	0038      	movs	r0, r7
 80089b4:	f000 fe04 	bl	80095c0 <_Bfree>
 80089b8:	e6aa      	b.n	8008710 <_dtoa_r+0x72c>
 80089ba:	2600      	movs	r6, #0
 80089bc:	0035      	movs	r5, r6
 80089be:	e7e2      	b.n	8008986 <_dtoa_r+0x9a2>
 80089c0:	9602      	str	r6, [sp, #8]
 80089c2:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80089c4:	0035      	movs	r5, r6
 80089c6:	e584      	b.n	80084d2 <_dtoa_r+0x4ee>
 80089c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d100      	bne.n	80089d0 <_dtoa_r+0x9ec>
 80089ce:	e0ce      	b.n	8008b6e <_dtoa_r+0xb8a>
 80089d0:	9b07      	ldr	r3, [sp, #28]
 80089d2:	930c      	str	r3, [sp, #48]	; 0x30
 80089d4:	2c00      	cmp	r4, #0
 80089d6:	dd05      	ble.n	80089e4 <_dtoa_r+0xa00>
 80089d8:	0029      	movs	r1, r5
 80089da:	0022      	movs	r2, r4
 80089dc:	0038      	movs	r0, r7
 80089de:	f001 f80d 	bl	80099fc <__lshift>
 80089e2:	0005      	movs	r5, r0
 80089e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089e6:	0028      	movs	r0, r5
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d022      	beq.n	8008a32 <_dtoa_r+0xa4e>
 80089ec:	0038      	movs	r0, r7
 80089ee:	6869      	ldr	r1, [r5, #4]
 80089f0:	f000 fda2 	bl	8009538 <_Balloc>
 80089f4:	1e04      	subs	r4, r0, #0
 80089f6:	d10f      	bne.n	8008a18 <_dtoa_r+0xa34>
 80089f8:	0002      	movs	r2, r0
 80089fa:	4b05      	ldr	r3, [pc, #20]	; (8008a10 <_dtoa_r+0xa2c>)
 80089fc:	4905      	ldr	r1, [pc, #20]	; (8008a14 <_dtoa_r+0xa30>)
 80089fe:	f7ff fb06 	bl	800800e <_dtoa_r+0x2a>
 8008a02:	46c0      	nop			; (mov r8, r8)
 8008a04:	40240000 	.word	0x40240000
 8008a08:	00000433 	.word	0x00000433
 8008a0c:	7ff00000 	.word	0x7ff00000
 8008a10:	0800adc8 	.word	0x0800adc8
 8008a14:	000002ea 	.word	0x000002ea
 8008a18:	0029      	movs	r1, r5
 8008a1a:	692b      	ldr	r3, [r5, #16]
 8008a1c:	310c      	adds	r1, #12
 8008a1e:	1c9a      	adds	r2, r3, #2
 8008a20:	0092      	lsls	r2, r2, #2
 8008a22:	300c      	adds	r0, #12
 8008a24:	f7fd fb51 	bl	80060ca <memcpy>
 8008a28:	2201      	movs	r2, #1
 8008a2a:	0021      	movs	r1, r4
 8008a2c:	0038      	movs	r0, r7
 8008a2e:	f000 ffe5 	bl	80099fc <__lshift>
 8008a32:	9b06      	ldr	r3, [sp, #24]
 8008a34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a36:	930a      	str	r3, [sp, #40]	; 0x28
 8008a38:	3b01      	subs	r3, #1
 8008a3a:	189b      	adds	r3, r3, r2
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	002c      	movs	r4, r5
 8008a40:	0005      	movs	r5, r0
 8008a42:	9314      	str	r3, [sp, #80]	; 0x50
 8008a44:	9b08      	ldr	r3, [sp, #32]
 8008a46:	4013      	ands	r3, r2
 8008a48:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a4a:	0031      	movs	r1, r6
 8008a4c:	9805      	ldr	r0, [sp, #20]
 8008a4e:	f7ff fa3d 	bl	8007ecc <quorem>
 8008a52:	0003      	movs	r3, r0
 8008a54:	0021      	movs	r1, r4
 8008a56:	3330      	adds	r3, #48	; 0x30
 8008a58:	900d      	str	r0, [sp, #52]	; 0x34
 8008a5a:	9805      	ldr	r0, [sp, #20]
 8008a5c:	9307      	str	r3, [sp, #28]
 8008a5e:	f001 f83b 	bl	8009ad8 <__mcmp>
 8008a62:	002a      	movs	r2, r5
 8008a64:	900e      	str	r0, [sp, #56]	; 0x38
 8008a66:	0031      	movs	r1, r6
 8008a68:	0038      	movs	r0, r7
 8008a6a:	f001 f851 	bl	8009b10 <__mdiff>
 8008a6e:	68c3      	ldr	r3, [r0, #12]
 8008a70:	9008      	str	r0, [sp, #32]
 8008a72:	9310      	str	r3, [sp, #64]	; 0x40
 8008a74:	2301      	movs	r3, #1
 8008a76:	930c      	str	r3, [sp, #48]	; 0x30
 8008a78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d104      	bne.n	8008a88 <_dtoa_r+0xaa4>
 8008a7e:	0001      	movs	r1, r0
 8008a80:	9805      	ldr	r0, [sp, #20]
 8008a82:	f001 f829 	bl	8009ad8 <__mcmp>
 8008a86:	900c      	str	r0, [sp, #48]	; 0x30
 8008a88:	0038      	movs	r0, r7
 8008a8a:	9908      	ldr	r1, [sp, #32]
 8008a8c:	f000 fd98 	bl	80095c0 <_Bfree>
 8008a90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a94:	3301      	adds	r3, #1
 8008a96:	9308      	str	r3, [sp, #32]
 8008a98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	d10c      	bne.n	8008abc <_dtoa_r+0xad8>
 8008aa2:	9b07      	ldr	r3, [sp, #28]
 8008aa4:	2b39      	cmp	r3, #57	; 0x39
 8008aa6:	d026      	beq.n	8008af6 <_dtoa_r+0xb12>
 8008aa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	dd02      	ble.n	8008ab4 <_dtoa_r+0xad0>
 8008aae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ab0:	3331      	adds	r3, #49	; 0x31
 8008ab2:	9307      	str	r3, [sp, #28]
 8008ab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ab6:	9a07      	ldr	r2, [sp, #28]
 8008ab8:	701a      	strb	r2, [r3, #0]
 8008aba:	e76a      	b.n	8008992 <_dtoa_r+0x9ae>
 8008abc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	db04      	blt.n	8008acc <_dtoa_r+0xae8>
 8008ac2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	d11f      	bne.n	8008b0c <_dtoa_r+0xb28>
 8008acc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	ddf0      	ble.n	8008ab4 <_dtoa_r+0xad0>
 8008ad2:	9905      	ldr	r1, [sp, #20]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	0038      	movs	r0, r7
 8008ad8:	f000 ff90 	bl	80099fc <__lshift>
 8008adc:	0031      	movs	r1, r6
 8008ade:	9005      	str	r0, [sp, #20]
 8008ae0:	f000 fffa 	bl	8009ad8 <__mcmp>
 8008ae4:	2800      	cmp	r0, #0
 8008ae6:	dc03      	bgt.n	8008af0 <_dtoa_r+0xb0c>
 8008ae8:	d1e4      	bne.n	8008ab4 <_dtoa_r+0xad0>
 8008aea:	9b07      	ldr	r3, [sp, #28]
 8008aec:	07db      	lsls	r3, r3, #31
 8008aee:	d5e1      	bpl.n	8008ab4 <_dtoa_r+0xad0>
 8008af0:	9b07      	ldr	r3, [sp, #28]
 8008af2:	2b39      	cmp	r3, #57	; 0x39
 8008af4:	d1db      	bne.n	8008aae <_dtoa_r+0xaca>
 8008af6:	2339      	movs	r3, #57	; 0x39
 8008af8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008afa:	7013      	strb	r3, [r2, #0]
 8008afc:	9b08      	ldr	r3, [sp, #32]
 8008afe:	9308      	str	r3, [sp, #32]
 8008b00:	3b01      	subs	r3, #1
 8008b02:	781a      	ldrb	r2, [r3, #0]
 8008b04:	2a39      	cmp	r2, #57	; 0x39
 8008b06:	d068      	beq.n	8008bda <_dtoa_r+0xbf6>
 8008b08:	3201      	adds	r2, #1
 8008b0a:	e7d5      	b.n	8008ab8 <_dtoa_r+0xad4>
 8008b0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	dd07      	ble.n	8008b22 <_dtoa_r+0xb3e>
 8008b12:	9b07      	ldr	r3, [sp, #28]
 8008b14:	2b39      	cmp	r3, #57	; 0x39
 8008b16:	d0ee      	beq.n	8008af6 <_dtoa_r+0xb12>
 8008b18:	9b07      	ldr	r3, [sp, #28]
 8008b1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	7013      	strb	r3, [r2, #0]
 8008b20:	e737      	b.n	8008992 <_dtoa_r+0x9ae>
 8008b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b24:	9a07      	ldr	r2, [sp, #28]
 8008b26:	701a      	strb	r2, [r3, #0]
 8008b28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008b2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d03e      	beq.n	8008bae <_dtoa_r+0xbca>
 8008b30:	2300      	movs	r3, #0
 8008b32:	220a      	movs	r2, #10
 8008b34:	9905      	ldr	r1, [sp, #20]
 8008b36:	0038      	movs	r0, r7
 8008b38:	f000 fd66 	bl	8009608 <__multadd>
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	9005      	str	r0, [sp, #20]
 8008b40:	220a      	movs	r2, #10
 8008b42:	0021      	movs	r1, r4
 8008b44:	0038      	movs	r0, r7
 8008b46:	42ac      	cmp	r4, r5
 8008b48:	d106      	bne.n	8008b58 <_dtoa_r+0xb74>
 8008b4a:	f000 fd5d 	bl	8009608 <__multadd>
 8008b4e:	0004      	movs	r4, r0
 8008b50:	0005      	movs	r5, r0
 8008b52:	9b08      	ldr	r3, [sp, #32]
 8008b54:	930a      	str	r3, [sp, #40]	; 0x28
 8008b56:	e778      	b.n	8008a4a <_dtoa_r+0xa66>
 8008b58:	f000 fd56 	bl	8009608 <__multadd>
 8008b5c:	0029      	movs	r1, r5
 8008b5e:	0004      	movs	r4, r0
 8008b60:	2300      	movs	r3, #0
 8008b62:	220a      	movs	r2, #10
 8008b64:	0038      	movs	r0, r7
 8008b66:	f000 fd4f 	bl	8009608 <__multadd>
 8008b6a:	0005      	movs	r5, r0
 8008b6c:	e7f1      	b.n	8008b52 <_dtoa_r+0xb6e>
 8008b6e:	9b07      	ldr	r3, [sp, #28]
 8008b70:	930c      	str	r3, [sp, #48]	; 0x30
 8008b72:	2400      	movs	r4, #0
 8008b74:	0031      	movs	r1, r6
 8008b76:	9805      	ldr	r0, [sp, #20]
 8008b78:	f7ff f9a8 	bl	8007ecc <quorem>
 8008b7c:	9b06      	ldr	r3, [sp, #24]
 8008b7e:	3030      	adds	r0, #48	; 0x30
 8008b80:	5518      	strb	r0, [r3, r4]
 8008b82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b84:	3401      	adds	r4, #1
 8008b86:	9007      	str	r0, [sp, #28]
 8008b88:	42a3      	cmp	r3, r4
 8008b8a:	dd07      	ble.n	8008b9c <_dtoa_r+0xbb8>
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	220a      	movs	r2, #10
 8008b90:	0038      	movs	r0, r7
 8008b92:	9905      	ldr	r1, [sp, #20]
 8008b94:	f000 fd38 	bl	8009608 <__multadd>
 8008b98:	9005      	str	r0, [sp, #20]
 8008b9a:	e7eb      	b.n	8008b74 <_dtoa_r+0xb90>
 8008b9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b9e:	2001      	movs	r0, #1
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	dd00      	ble.n	8008ba6 <_dtoa_r+0xbc2>
 8008ba4:	0018      	movs	r0, r3
 8008ba6:	2400      	movs	r4, #0
 8008ba8:	9b06      	ldr	r3, [sp, #24]
 8008baa:	181b      	adds	r3, r3, r0
 8008bac:	9308      	str	r3, [sp, #32]
 8008bae:	9905      	ldr	r1, [sp, #20]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	0038      	movs	r0, r7
 8008bb4:	f000 ff22 	bl	80099fc <__lshift>
 8008bb8:	0031      	movs	r1, r6
 8008bba:	9005      	str	r0, [sp, #20]
 8008bbc:	f000 ff8c 	bl	8009ad8 <__mcmp>
 8008bc0:	2800      	cmp	r0, #0
 8008bc2:	dc9b      	bgt.n	8008afc <_dtoa_r+0xb18>
 8008bc4:	d102      	bne.n	8008bcc <_dtoa_r+0xbe8>
 8008bc6:	9b07      	ldr	r3, [sp, #28]
 8008bc8:	07db      	lsls	r3, r3, #31
 8008bca:	d497      	bmi.n	8008afc <_dtoa_r+0xb18>
 8008bcc:	9b08      	ldr	r3, [sp, #32]
 8008bce:	9308      	str	r3, [sp, #32]
 8008bd0:	3b01      	subs	r3, #1
 8008bd2:	781a      	ldrb	r2, [r3, #0]
 8008bd4:	2a30      	cmp	r2, #48	; 0x30
 8008bd6:	d0fa      	beq.n	8008bce <_dtoa_r+0xbea>
 8008bd8:	e6db      	b.n	8008992 <_dtoa_r+0x9ae>
 8008bda:	9a06      	ldr	r2, [sp, #24]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d18e      	bne.n	8008afe <_dtoa_r+0xb1a>
 8008be0:	9b02      	ldr	r3, [sp, #8]
 8008be2:	3301      	adds	r3, #1
 8008be4:	9302      	str	r3, [sp, #8]
 8008be6:	2331      	movs	r3, #49	; 0x31
 8008be8:	e799      	b.n	8008b1e <_dtoa_r+0xb3a>
 8008bea:	4b09      	ldr	r3, [pc, #36]	; (8008c10 <_dtoa_r+0xc2c>)
 8008bec:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008bee:	9306      	str	r3, [sp, #24]
 8008bf0:	4b08      	ldr	r3, [pc, #32]	; (8008c14 <_dtoa_r+0xc30>)
 8008bf2:	2a00      	cmp	r2, #0
 8008bf4:	d001      	beq.n	8008bfa <_dtoa_r+0xc16>
 8008bf6:	f7ff fa3f 	bl	8008078 <_dtoa_r+0x94>
 8008bfa:	f7ff fa3f 	bl	800807c <_dtoa_r+0x98>
 8008bfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	dcb6      	bgt.n	8008b72 <_dtoa_r+0xb8e>
 8008c04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	dd00      	ble.n	8008c0c <_dtoa_r+0xc28>
 8008c0a:	e6ac      	b.n	8008966 <_dtoa_r+0x982>
 8008c0c:	e7b1      	b.n	8008b72 <_dtoa_r+0xb8e>
 8008c0e:	46c0      	nop			; (mov r8, r8)
 8008c10:	0800ad49 	.word	0x0800ad49
 8008c14:	0800ad51 	.word	0x0800ad51

08008c18 <__sflush_r>:
 8008c18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c1a:	898b      	ldrh	r3, [r1, #12]
 8008c1c:	0005      	movs	r5, r0
 8008c1e:	000c      	movs	r4, r1
 8008c20:	071a      	lsls	r2, r3, #28
 8008c22:	d45f      	bmi.n	8008ce4 <__sflush_r+0xcc>
 8008c24:	684a      	ldr	r2, [r1, #4]
 8008c26:	2a00      	cmp	r2, #0
 8008c28:	dc04      	bgt.n	8008c34 <__sflush_r+0x1c>
 8008c2a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8008c2c:	2a00      	cmp	r2, #0
 8008c2e:	dc01      	bgt.n	8008c34 <__sflush_r+0x1c>
 8008c30:	2000      	movs	r0, #0
 8008c32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008c34:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008c36:	2f00      	cmp	r7, #0
 8008c38:	d0fa      	beq.n	8008c30 <__sflush_r+0x18>
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	2180      	movs	r1, #128	; 0x80
 8008c3e:	682e      	ldr	r6, [r5, #0]
 8008c40:	602a      	str	r2, [r5, #0]
 8008c42:	001a      	movs	r2, r3
 8008c44:	0149      	lsls	r1, r1, #5
 8008c46:	400a      	ands	r2, r1
 8008c48:	420b      	tst	r3, r1
 8008c4a:	d034      	beq.n	8008cb6 <__sflush_r+0x9e>
 8008c4c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c4e:	89a3      	ldrh	r3, [r4, #12]
 8008c50:	075b      	lsls	r3, r3, #29
 8008c52:	d506      	bpl.n	8008c62 <__sflush_r+0x4a>
 8008c54:	6863      	ldr	r3, [r4, #4]
 8008c56:	1ac0      	subs	r0, r0, r3
 8008c58:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d001      	beq.n	8008c62 <__sflush_r+0x4a>
 8008c5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c60:	1ac0      	subs	r0, r0, r3
 8008c62:	0002      	movs	r2, r0
 8008c64:	6a21      	ldr	r1, [r4, #32]
 8008c66:	2300      	movs	r3, #0
 8008c68:	0028      	movs	r0, r5
 8008c6a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008c6c:	47b8      	blx	r7
 8008c6e:	89a1      	ldrh	r1, [r4, #12]
 8008c70:	1c43      	adds	r3, r0, #1
 8008c72:	d106      	bne.n	8008c82 <__sflush_r+0x6a>
 8008c74:	682b      	ldr	r3, [r5, #0]
 8008c76:	2b1d      	cmp	r3, #29
 8008c78:	d831      	bhi.n	8008cde <__sflush_r+0xc6>
 8008c7a:	4a2c      	ldr	r2, [pc, #176]	; (8008d2c <__sflush_r+0x114>)
 8008c7c:	40da      	lsrs	r2, r3
 8008c7e:	07d3      	lsls	r3, r2, #31
 8008c80:	d52d      	bpl.n	8008cde <__sflush_r+0xc6>
 8008c82:	2300      	movs	r3, #0
 8008c84:	6063      	str	r3, [r4, #4]
 8008c86:	6923      	ldr	r3, [r4, #16]
 8008c88:	6023      	str	r3, [r4, #0]
 8008c8a:	04cb      	lsls	r3, r1, #19
 8008c8c:	d505      	bpl.n	8008c9a <__sflush_r+0x82>
 8008c8e:	1c43      	adds	r3, r0, #1
 8008c90:	d102      	bne.n	8008c98 <__sflush_r+0x80>
 8008c92:	682b      	ldr	r3, [r5, #0]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d100      	bne.n	8008c9a <__sflush_r+0x82>
 8008c98:	6560      	str	r0, [r4, #84]	; 0x54
 8008c9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c9c:	602e      	str	r6, [r5, #0]
 8008c9e:	2900      	cmp	r1, #0
 8008ca0:	d0c6      	beq.n	8008c30 <__sflush_r+0x18>
 8008ca2:	0023      	movs	r3, r4
 8008ca4:	3344      	adds	r3, #68	; 0x44
 8008ca6:	4299      	cmp	r1, r3
 8008ca8:	d002      	beq.n	8008cb0 <__sflush_r+0x98>
 8008caa:	0028      	movs	r0, r5
 8008cac:	f001 f93a 	bl	8009f24 <_free_r>
 8008cb0:	2000      	movs	r0, #0
 8008cb2:	6360      	str	r0, [r4, #52]	; 0x34
 8008cb4:	e7bd      	b.n	8008c32 <__sflush_r+0x1a>
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	0028      	movs	r0, r5
 8008cba:	6a21      	ldr	r1, [r4, #32]
 8008cbc:	47b8      	blx	r7
 8008cbe:	1c43      	adds	r3, r0, #1
 8008cc0:	d1c5      	bne.n	8008c4e <__sflush_r+0x36>
 8008cc2:	682b      	ldr	r3, [r5, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d0c2      	beq.n	8008c4e <__sflush_r+0x36>
 8008cc8:	2b1d      	cmp	r3, #29
 8008cca:	d001      	beq.n	8008cd0 <__sflush_r+0xb8>
 8008ccc:	2b16      	cmp	r3, #22
 8008cce:	d101      	bne.n	8008cd4 <__sflush_r+0xbc>
 8008cd0:	602e      	str	r6, [r5, #0]
 8008cd2:	e7ad      	b.n	8008c30 <__sflush_r+0x18>
 8008cd4:	2340      	movs	r3, #64	; 0x40
 8008cd6:	89a2      	ldrh	r2, [r4, #12]
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	81a3      	strh	r3, [r4, #12]
 8008cdc:	e7a9      	b.n	8008c32 <__sflush_r+0x1a>
 8008cde:	2340      	movs	r3, #64	; 0x40
 8008ce0:	430b      	orrs	r3, r1
 8008ce2:	e7fa      	b.n	8008cda <__sflush_r+0xc2>
 8008ce4:	690f      	ldr	r7, [r1, #16]
 8008ce6:	2f00      	cmp	r7, #0
 8008ce8:	d0a2      	beq.n	8008c30 <__sflush_r+0x18>
 8008cea:	680a      	ldr	r2, [r1, #0]
 8008cec:	600f      	str	r7, [r1, #0]
 8008cee:	1bd2      	subs	r2, r2, r7
 8008cf0:	9201      	str	r2, [sp, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	079b      	lsls	r3, r3, #30
 8008cf6:	d100      	bne.n	8008cfa <__sflush_r+0xe2>
 8008cf8:	694a      	ldr	r2, [r1, #20]
 8008cfa:	60a2      	str	r2, [r4, #8]
 8008cfc:	9b01      	ldr	r3, [sp, #4]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	dc00      	bgt.n	8008d04 <__sflush_r+0xec>
 8008d02:	e795      	b.n	8008c30 <__sflush_r+0x18>
 8008d04:	003a      	movs	r2, r7
 8008d06:	0028      	movs	r0, r5
 8008d08:	9b01      	ldr	r3, [sp, #4]
 8008d0a:	6a21      	ldr	r1, [r4, #32]
 8008d0c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d0e:	47b0      	blx	r6
 8008d10:	2800      	cmp	r0, #0
 8008d12:	dc06      	bgt.n	8008d22 <__sflush_r+0x10a>
 8008d14:	2340      	movs	r3, #64	; 0x40
 8008d16:	2001      	movs	r0, #1
 8008d18:	89a2      	ldrh	r2, [r4, #12]
 8008d1a:	4240      	negs	r0, r0
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	81a3      	strh	r3, [r4, #12]
 8008d20:	e787      	b.n	8008c32 <__sflush_r+0x1a>
 8008d22:	9b01      	ldr	r3, [sp, #4]
 8008d24:	183f      	adds	r7, r7, r0
 8008d26:	1a1b      	subs	r3, r3, r0
 8008d28:	9301      	str	r3, [sp, #4]
 8008d2a:	e7e7      	b.n	8008cfc <__sflush_r+0xe4>
 8008d2c:	20400001 	.word	0x20400001

08008d30 <_fflush_r>:
 8008d30:	690b      	ldr	r3, [r1, #16]
 8008d32:	b570      	push	{r4, r5, r6, lr}
 8008d34:	0005      	movs	r5, r0
 8008d36:	000c      	movs	r4, r1
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d102      	bne.n	8008d42 <_fflush_r+0x12>
 8008d3c:	2500      	movs	r5, #0
 8008d3e:	0028      	movs	r0, r5
 8008d40:	bd70      	pop	{r4, r5, r6, pc}
 8008d42:	2800      	cmp	r0, #0
 8008d44:	d004      	beq.n	8008d50 <_fflush_r+0x20>
 8008d46:	6983      	ldr	r3, [r0, #24]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d101      	bne.n	8008d50 <_fflush_r+0x20>
 8008d4c:	f7fd f8f6 	bl	8005f3c <__sinit>
 8008d50:	4b14      	ldr	r3, [pc, #80]	; (8008da4 <_fflush_r+0x74>)
 8008d52:	429c      	cmp	r4, r3
 8008d54:	d11b      	bne.n	8008d8e <_fflush_r+0x5e>
 8008d56:	686c      	ldr	r4, [r5, #4]
 8008d58:	220c      	movs	r2, #12
 8008d5a:	5ea3      	ldrsh	r3, [r4, r2]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d0ed      	beq.n	8008d3c <_fflush_r+0xc>
 8008d60:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d62:	07d2      	lsls	r2, r2, #31
 8008d64:	d404      	bmi.n	8008d70 <_fflush_r+0x40>
 8008d66:	059b      	lsls	r3, r3, #22
 8008d68:	d402      	bmi.n	8008d70 <_fflush_r+0x40>
 8008d6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d6c:	f7fd f9ab 	bl	80060c6 <__retarget_lock_acquire_recursive>
 8008d70:	0028      	movs	r0, r5
 8008d72:	0021      	movs	r1, r4
 8008d74:	f7ff ff50 	bl	8008c18 <__sflush_r>
 8008d78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d7a:	0005      	movs	r5, r0
 8008d7c:	07db      	lsls	r3, r3, #31
 8008d7e:	d4de      	bmi.n	8008d3e <_fflush_r+0xe>
 8008d80:	89a3      	ldrh	r3, [r4, #12]
 8008d82:	059b      	lsls	r3, r3, #22
 8008d84:	d4db      	bmi.n	8008d3e <_fflush_r+0xe>
 8008d86:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d88:	f7fd f99e 	bl	80060c8 <__retarget_lock_release_recursive>
 8008d8c:	e7d7      	b.n	8008d3e <_fflush_r+0xe>
 8008d8e:	4b06      	ldr	r3, [pc, #24]	; (8008da8 <_fflush_r+0x78>)
 8008d90:	429c      	cmp	r4, r3
 8008d92:	d101      	bne.n	8008d98 <_fflush_r+0x68>
 8008d94:	68ac      	ldr	r4, [r5, #8]
 8008d96:	e7df      	b.n	8008d58 <_fflush_r+0x28>
 8008d98:	4b04      	ldr	r3, [pc, #16]	; (8008dac <_fflush_r+0x7c>)
 8008d9a:	429c      	cmp	r4, r3
 8008d9c:	d1dc      	bne.n	8008d58 <_fflush_r+0x28>
 8008d9e:	68ec      	ldr	r4, [r5, #12]
 8008da0:	e7da      	b.n	8008d58 <_fflush_r+0x28>
 8008da2:	46c0      	nop			; (mov r8, r8)
 8008da4:	0800ab74 	.word	0x0800ab74
 8008da8:	0800ab94 	.word	0x0800ab94
 8008dac:	0800ab54 	.word	0x0800ab54

08008db0 <rshift>:
 8008db0:	0002      	movs	r2, r0
 8008db2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008db4:	6904      	ldr	r4, [r0, #16]
 8008db6:	3214      	adds	r2, #20
 8008db8:	0013      	movs	r3, r2
 8008dba:	b085      	sub	sp, #20
 8008dbc:	114f      	asrs	r7, r1, #5
 8008dbe:	42bc      	cmp	r4, r7
 8008dc0:	dd31      	ble.n	8008e26 <rshift+0x76>
 8008dc2:	00bb      	lsls	r3, r7, #2
 8008dc4:	18d3      	adds	r3, r2, r3
 8008dc6:	261f      	movs	r6, #31
 8008dc8:	9301      	str	r3, [sp, #4]
 8008dca:	000b      	movs	r3, r1
 8008dcc:	00a5      	lsls	r5, r4, #2
 8008dce:	4033      	ands	r3, r6
 8008dd0:	1955      	adds	r5, r2, r5
 8008dd2:	9302      	str	r3, [sp, #8]
 8008dd4:	4231      	tst	r1, r6
 8008dd6:	d10c      	bne.n	8008df2 <rshift+0x42>
 8008dd8:	0016      	movs	r6, r2
 8008dda:	9901      	ldr	r1, [sp, #4]
 8008ddc:	428d      	cmp	r5, r1
 8008dde:	d838      	bhi.n	8008e52 <rshift+0xa2>
 8008de0:	9901      	ldr	r1, [sp, #4]
 8008de2:	2300      	movs	r3, #0
 8008de4:	3903      	subs	r1, #3
 8008de6:	428d      	cmp	r5, r1
 8008de8:	d301      	bcc.n	8008dee <rshift+0x3e>
 8008dea:	1be3      	subs	r3, r4, r7
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	18d3      	adds	r3, r2, r3
 8008df0:	e019      	b.n	8008e26 <rshift+0x76>
 8008df2:	2120      	movs	r1, #32
 8008df4:	9b02      	ldr	r3, [sp, #8]
 8008df6:	9e01      	ldr	r6, [sp, #4]
 8008df8:	1acb      	subs	r3, r1, r3
 8008dfa:	9303      	str	r3, [sp, #12]
 8008dfc:	ce02      	ldmia	r6!, {r1}
 8008dfe:	9b02      	ldr	r3, [sp, #8]
 8008e00:	4694      	mov	ip, r2
 8008e02:	40d9      	lsrs	r1, r3
 8008e04:	9100      	str	r1, [sp, #0]
 8008e06:	42b5      	cmp	r5, r6
 8008e08:	d816      	bhi.n	8008e38 <rshift+0x88>
 8008e0a:	9e01      	ldr	r6, [sp, #4]
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	3601      	adds	r6, #1
 8008e10:	42b5      	cmp	r5, r6
 8008e12:	d302      	bcc.n	8008e1a <rshift+0x6a>
 8008e14:	1be3      	subs	r3, r4, r7
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	3b04      	subs	r3, #4
 8008e1a:	9900      	ldr	r1, [sp, #0]
 8008e1c:	18d3      	adds	r3, r2, r3
 8008e1e:	6019      	str	r1, [r3, #0]
 8008e20:	2900      	cmp	r1, #0
 8008e22:	d000      	beq.n	8008e26 <rshift+0x76>
 8008e24:	3304      	adds	r3, #4
 8008e26:	1a99      	subs	r1, r3, r2
 8008e28:	1089      	asrs	r1, r1, #2
 8008e2a:	6101      	str	r1, [r0, #16]
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d101      	bne.n	8008e34 <rshift+0x84>
 8008e30:	2300      	movs	r3, #0
 8008e32:	6143      	str	r3, [r0, #20]
 8008e34:	b005      	add	sp, #20
 8008e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e38:	6833      	ldr	r3, [r6, #0]
 8008e3a:	9903      	ldr	r1, [sp, #12]
 8008e3c:	408b      	lsls	r3, r1
 8008e3e:	9900      	ldr	r1, [sp, #0]
 8008e40:	4319      	orrs	r1, r3
 8008e42:	4663      	mov	r3, ip
 8008e44:	c302      	stmia	r3!, {r1}
 8008e46:	469c      	mov	ip, r3
 8008e48:	ce02      	ldmia	r6!, {r1}
 8008e4a:	9b02      	ldr	r3, [sp, #8]
 8008e4c:	40d9      	lsrs	r1, r3
 8008e4e:	9100      	str	r1, [sp, #0]
 8008e50:	e7d9      	b.n	8008e06 <rshift+0x56>
 8008e52:	c908      	ldmia	r1!, {r3}
 8008e54:	c608      	stmia	r6!, {r3}
 8008e56:	e7c1      	b.n	8008ddc <rshift+0x2c>

08008e58 <__hexdig_fun>:
 8008e58:	0002      	movs	r2, r0
 8008e5a:	3a30      	subs	r2, #48	; 0x30
 8008e5c:	0003      	movs	r3, r0
 8008e5e:	2a09      	cmp	r2, #9
 8008e60:	d802      	bhi.n	8008e68 <__hexdig_fun+0x10>
 8008e62:	3b20      	subs	r3, #32
 8008e64:	b2d8      	uxtb	r0, r3
 8008e66:	4770      	bx	lr
 8008e68:	0002      	movs	r2, r0
 8008e6a:	3a61      	subs	r2, #97	; 0x61
 8008e6c:	2a05      	cmp	r2, #5
 8008e6e:	d801      	bhi.n	8008e74 <__hexdig_fun+0x1c>
 8008e70:	3b47      	subs	r3, #71	; 0x47
 8008e72:	e7f7      	b.n	8008e64 <__hexdig_fun+0xc>
 8008e74:	001a      	movs	r2, r3
 8008e76:	3a41      	subs	r2, #65	; 0x41
 8008e78:	2000      	movs	r0, #0
 8008e7a:	2a05      	cmp	r2, #5
 8008e7c:	d8f3      	bhi.n	8008e66 <__hexdig_fun+0xe>
 8008e7e:	3b27      	subs	r3, #39	; 0x27
 8008e80:	e7f0      	b.n	8008e64 <__hexdig_fun+0xc>
	...

08008e84 <__gethex>:
 8008e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e86:	b08d      	sub	sp, #52	; 0x34
 8008e88:	930a      	str	r3, [sp, #40]	; 0x28
 8008e8a:	4bbf      	ldr	r3, [pc, #764]	; (8009188 <__gethex+0x304>)
 8008e8c:	9005      	str	r0, [sp, #20]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	9109      	str	r1, [sp, #36]	; 0x24
 8008e92:	0018      	movs	r0, r3
 8008e94:	9202      	str	r2, [sp, #8]
 8008e96:	9307      	str	r3, [sp, #28]
 8008e98:	f7f7 f936 	bl	8000108 <strlen>
 8008e9c:	2202      	movs	r2, #2
 8008e9e:	9b07      	ldr	r3, [sp, #28]
 8008ea0:	4252      	negs	r2, r2
 8008ea2:	181b      	adds	r3, r3, r0
 8008ea4:	3b01      	subs	r3, #1
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	9003      	str	r0, [sp, #12]
 8008eaa:	930b      	str	r3, [sp, #44]	; 0x2c
 8008eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eae:	6819      	ldr	r1, [r3, #0]
 8008eb0:	1c8b      	adds	r3, r1, #2
 8008eb2:	1a52      	subs	r2, r2, r1
 8008eb4:	18d1      	adds	r1, r2, r3
 8008eb6:	9301      	str	r3, [sp, #4]
 8008eb8:	9108      	str	r1, [sp, #32]
 8008eba:	9901      	ldr	r1, [sp, #4]
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	7808      	ldrb	r0, [r1, #0]
 8008ec0:	2830      	cmp	r0, #48	; 0x30
 8008ec2:	d0f7      	beq.n	8008eb4 <__gethex+0x30>
 8008ec4:	f7ff ffc8 	bl	8008e58 <__hexdig_fun>
 8008ec8:	2300      	movs	r3, #0
 8008eca:	001c      	movs	r4, r3
 8008ecc:	9304      	str	r3, [sp, #16]
 8008ece:	4298      	cmp	r0, r3
 8008ed0:	d11f      	bne.n	8008f12 <__gethex+0x8e>
 8008ed2:	9a03      	ldr	r2, [sp, #12]
 8008ed4:	9907      	ldr	r1, [sp, #28]
 8008ed6:	9801      	ldr	r0, [sp, #4]
 8008ed8:	f001 f9ea 	bl	800a2b0 <strncmp>
 8008edc:	0007      	movs	r7, r0
 8008ede:	42a0      	cmp	r0, r4
 8008ee0:	d000      	beq.n	8008ee4 <__gethex+0x60>
 8008ee2:	e06b      	b.n	8008fbc <__gethex+0x138>
 8008ee4:	9b01      	ldr	r3, [sp, #4]
 8008ee6:	9a03      	ldr	r2, [sp, #12]
 8008ee8:	5c98      	ldrb	r0, [r3, r2]
 8008eea:	189d      	adds	r5, r3, r2
 8008eec:	f7ff ffb4 	bl	8008e58 <__hexdig_fun>
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	9304      	str	r3, [sp, #16]
 8008ef4:	42a0      	cmp	r0, r4
 8008ef6:	d030      	beq.n	8008f5a <__gethex+0xd6>
 8008ef8:	9501      	str	r5, [sp, #4]
 8008efa:	9b01      	ldr	r3, [sp, #4]
 8008efc:	7818      	ldrb	r0, [r3, #0]
 8008efe:	2830      	cmp	r0, #48	; 0x30
 8008f00:	d009      	beq.n	8008f16 <__gethex+0x92>
 8008f02:	f7ff ffa9 	bl	8008e58 <__hexdig_fun>
 8008f06:	4242      	negs	r2, r0
 8008f08:	4142      	adcs	r2, r0
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	002c      	movs	r4, r5
 8008f0e:	9204      	str	r2, [sp, #16]
 8008f10:	9308      	str	r3, [sp, #32]
 8008f12:	9d01      	ldr	r5, [sp, #4]
 8008f14:	e004      	b.n	8008f20 <__gethex+0x9c>
 8008f16:	9b01      	ldr	r3, [sp, #4]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	9301      	str	r3, [sp, #4]
 8008f1c:	e7ed      	b.n	8008efa <__gethex+0x76>
 8008f1e:	3501      	adds	r5, #1
 8008f20:	7828      	ldrb	r0, [r5, #0]
 8008f22:	f7ff ff99 	bl	8008e58 <__hexdig_fun>
 8008f26:	1e07      	subs	r7, r0, #0
 8008f28:	d1f9      	bne.n	8008f1e <__gethex+0x9a>
 8008f2a:	0028      	movs	r0, r5
 8008f2c:	9a03      	ldr	r2, [sp, #12]
 8008f2e:	9907      	ldr	r1, [sp, #28]
 8008f30:	f001 f9be 	bl	800a2b0 <strncmp>
 8008f34:	2800      	cmp	r0, #0
 8008f36:	d10e      	bne.n	8008f56 <__gethex+0xd2>
 8008f38:	2c00      	cmp	r4, #0
 8008f3a:	d107      	bne.n	8008f4c <__gethex+0xc8>
 8008f3c:	9b03      	ldr	r3, [sp, #12]
 8008f3e:	18ed      	adds	r5, r5, r3
 8008f40:	002c      	movs	r4, r5
 8008f42:	7828      	ldrb	r0, [r5, #0]
 8008f44:	f7ff ff88 	bl	8008e58 <__hexdig_fun>
 8008f48:	2800      	cmp	r0, #0
 8008f4a:	d102      	bne.n	8008f52 <__gethex+0xce>
 8008f4c:	1b64      	subs	r4, r4, r5
 8008f4e:	00a7      	lsls	r7, r4, #2
 8008f50:	e003      	b.n	8008f5a <__gethex+0xd6>
 8008f52:	3501      	adds	r5, #1
 8008f54:	e7f5      	b.n	8008f42 <__gethex+0xbe>
 8008f56:	2c00      	cmp	r4, #0
 8008f58:	d1f8      	bne.n	8008f4c <__gethex+0xc8>
 8008f5a:	2220      	movs	r2, #32
 8008f5c:	782b      	ldrb	r3, [r5, #0]
 8008f5e:	002e      	movs	r6, r5
 8008f60:	4393      	bics	r3, r2
 8008f62:	2b50      	cmp	r3, #80	; 0x50
 8008f64:	d11d      	bne.n	8008fa2 <__gethex+0x11e>
 8008f66:	786b      	ldrb	r3, [r5, #1]
 8008f68:	2b2b      	cmp	r3, #43	; 0x2b
 8008f6a:	d02c      	beq.n	8008fc6 <__gethex+0x142>
 8008f6c:	2b2d      	cmp	r3, #45	; 0x2d
 8008f6e:	d02e      	beq.n	8008fce <__gethex+0x14a>
 8008f70:	2300      	movs	r3, #0
 8008f72:	1c6e      	adds	r6, r5, #1
 8008f74:	9306      	str	r3, [sp, #24]
 8008f76:	7830      	ldrb	r0, [r6, #0]
 8008f78:	f7ff ff6e 	bl	8008e58 <__hexdig_fun>
 8008f7c:	1e43      	subs	r3, r0, #1
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	2b18      	cmp	r3, #24
 8008f82:	d82b      	bhi.n	8008fdc <__gethex+0x158>
 8008f84:	3810      	subs	r0, #16
 8008f86:	0004      	movs	r4, r0
 8008f88:	7870      	ldrb	r0, [r6, #1]
 8008f8a:	f7ff ff65 	bl	8008e58 <__hexdig_fun>
 8008f8e:	1e43      	subs	r3, r0, #1
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	3601      	adds	r6, #1
 8008f94:	2b18      	cmp	r3, #24
 8008f96:	d91c      	bls.n	8008fd2 <__gethex+0x14e>
 8008f98:	9b06      	ldr	r3, [sp, #24]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d000      	beq.n	8008fa0 <__gethex+0x11c>
 8008f9e:	4264      	negs	r4, r4
 8008fa0:	193f      	adds	r7, r7, r4
 8008fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fa4:	601e      	str	r6, [r3, #0]
 8008fa6:	9b04      	ldr	r3, [sp, #16]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d019      	beq.n	8008fe0 <__gethex+0x15c>
 8008fac:	2600      	movs	r6, #0
 8008fae:	9b08      	ldr	r3, [sp, #32]
 8008fb0:	42b3      	cmp	r3, r6
 8008fb2:	d100      	bne.n	8008fb6 <__gethex+0x132>
 8008fb4:	3606      	adds	r6, #6
 8008fb6:	0030      	movs	r0, r6
 8008fb8:	b00d      	add	sp, #52	; 0x34
 8008fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	2700      	movs	r7, #0
 8008fc0:	9d01      	ldr	r5, [sp, #4]
 8008fc2:	9304      	str	r3, [sp, #16]
 8008fc4:	e7c9      	b.n	8008f5a <__gethex+0xd6>
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	9306      	str	r3, [sp, #24]
 8008fca:	1cae      	adds	r6, r5, #2
 8008fcc:	e7d3      	b.n	8008f76 <__gethex+0xf2>
 8008fce:	2301      	movs	r3, #1
 8008fd0:	e7fa      	b.n	8008fc8 <__gethex+0x144>
 8008fd2:	230a      	movs	r3, #10
 8008fd4:	435c      	muls	r4, r3
 8008fd6:	1824      	adds	r4, r4, r0
 8008fd8:	3c10      	subs	r4, #16
 8008fda:	e7d5      	b.n	8008f88 <__gethex+0x104>
 8008fdc:	002e      	movs	r6, r5
 8008fde:	e7e0      	b.n	8008fa2 <__gethex+0x11e>
 8008fe0:	9b01      	ldr	r3, [sp, #4]
 8008fe2:	9904      	ldr	r1, [sp, #16]
 8008fe4:	1aeb      	subs	r3, r5, r3
 8008fe6:	3b01      	subs	r3, #1
 8008fe8:	2b07      	cmp	r3, #7
 8008fea:	dc0a      	bgt.n	8009002 <__gethex+0x17e>
 8008fec:	9805      	ldr	r0, [sp, #20]
 8008fee:	f000 faa3 	bl	8009538 <_Balloc>
 8008ff2:	1e04      	subs	r4, r0, #0
 8008ff4:	d108      	bne.n	8009008 <__gethex+0x184>
 8008ff6:	0002      	movs	r2, r0
 8008ff8:	21de      	movs	r1, #222	; 0xde
 8008ffa:	4b64      	ldr	r3, [pc, #400]	; (800918c <__gethex+0x308>)
 8008ffc:	4864      	ldr	r0, [pc, #400]	; (8009190 <__gethex+0x30c>)
 8008ffe:	f001 f977 	bl	800a2f0 <__assert_func>
 8009002:	3101      	adds	r1, #1
 8009004:	105b      	asrs	r3, r3, #1
 8009006:	e7ef      	b.n	8008fe8 <__gethex+0x164>
 8009008:	0003      	movs	r3, r0
 800900a:	3314      	adds	r3, #20
 800900c:	9304      	str	r3, [sp, #16]
 800900e:	9309      	str	r3, [sp, #36]	; 0x24
 8009010:	2300      	movs	r3, #0
 8009012:	001e      	movs	r6, r3
 8009014:	9306      	str	r3, [sp, #24]
 8009016:	9b01      	ldr	r3, [sp, #4]
 8009018:	42ab      	cmp	r3, r5
 800901a:	d340      	bcc.n	800909e <__gethex+0x21a>
 800901c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800901e:	9b04      	ldr	r3, [sp, #16]
 8009020:	c540      	stmia	r5!, {r6}
 8009022:	1aed      	subs	r5, r5, r3
 8009024:	10ad      	asrs	r5, r5, #2
 8009026:	0030      	movs	r0, r6
 8009028:	6125      	str	r5, [r4, #16]
 800902a:	f000 fb7d 	bl	8009728 <__hi0bits>
 800902e:	9b02      	ldr	r3, [sp, #8]
 8009030:	016d      	lsls	r5, r5, #5
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	1a2e      	subs	r6, r5, r0
 8009036:	9301      	str	r3, [sp, #4]
 8009038:	429e      	cmp	r6, r3
 800903a:	dd5a      	ble.n	80090f2 <__gethex+0x26e>
 800903c:	1af6      	subs	r6, r6, r3
 800903e:	0031      	movs	r1, r6
 8009040:	0020      	movs	r0, r4
 8009042:	f000 ff1f 	bl	8009e84 <__any_on>
 8009046:	1e05      	subs	r5, r0, #0
 8009048:	d016      	beq.n	8009078 <__gethex+0x1f4>
 800904a:	2501      	movs	r5, #1
 800904c:	211f      	movs	r1, #31
 800904e:	0028      	movs	r0, r5
 8009050:	1e73      	subs	r3, r6, #1
 8009052:	4019      	ands	r1, r3
 8009054:	4088      	lsls	r0, r1
 8009056:	0001      	movs	r1, r0
 8009058:	115a      	asrs	r2, r3, #5
 800905a:	9804      	ldr	r0, [sp, #16]
 800905c:	0092      	lsls	r2, r2, #2
 800905e:	5812      	ldr	r2, [r2, r0]
 8009060:	420a      	tst	r2, r1
 8009062:	d009      	beq.n	8009078 <__gethex+0x1f4>
 8009064:	42ab      	cmp	r3, r5
 8009066:	dd06      	ble.n	8009076 <__gethex+0x1f2>
 8009068:	0020      	movs	r0, r4
 800906a:	1eb1      	subs	r1, r6, #2
 800906c:	f000 ff0a 	bl	8009e84 <__any_on>
 8009070:	3502      	adds	r5, #2
 8009072:	2800      	cmp	r0, #0
 8009074:	d100      	bne.n	8009078 <__gethex+0x1f4>
 8009076:	2502      	movs	r5, #2
 8009078:	0031      	movs	r1, r6
 800907a:	0020      	movs	r0, r4
 800907c:	f7ff fe98 	bl	8008db0 <rshift>
 8009080:	19bf      	adds	r7, r7, r6
 8009082:	9b02      	ldr	r3, [sp, #8]
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	9303      	str	r3, [sp, #12]
 8009088:	42bb      	cmp	r3, r7
 800908a:	da42      	bge.n	8009112 <__gethex+0x28e>
 800908c:	0021      	movs	r1, r4
 800908e:	9805      	ldr	r0, [sp, #20]
 8009090:	f000 fa96 	bl	80095c0 <_Bfree>
 8009094:	2300      	movs	r3, #0
 8009096:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009098:	26a3      	movs	r6, #163	; 0xa3
 800909a:	6013      	str	r3, [r2, #0]
 800909c:	e78b      	b.n	8008fb6 <__gethex+0x132>
 800909e:	1e6b      	subs	r3, r5, #1
 80090a0:	9308      	str	r3, [sp, #32]
 80090a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d014      	beq.n	80090d4 <__gethex+0x250>
 80090aa:	9b06      	ldr	r3, [sp, #24]
 80090ac:	2b20      	cmp	r3, #32
 80090ae:	d104      	bne.n	80090ba <__gethex+0x236>
 80090b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090b2:	c340      	stmia	r3!, {r6}
 80090b4:	2600      	movs	r6, #0
 80090b6:	9309      	str	r3, [sp, #36]	; 0x24
 80090b8:	9606      	str	r6, [sp, #24]
 80090ba:	9b08      	ldr	r3, [sp, #32]
 80090bc:	7818      	ldrb	r0, [r3, #0]
 80090be:	f7ff fecb 	bl	8008e58 <__hexdig_fun>
 80090c2:	230f      	movs	r3, #15
 80090c4:	4018      	ands	r0, r3
 80090c6:	9b06      	ldr	r3, [sp, #24]
 80090c8:	9d08      	ldr	r5, [sp, #32]
 80090ca:	4098      	lsls	r0, r3
 80090cc:	3304      	adds	r3, #4
 80090ce:	4306      	orrs	r6, r0
 80090d0:	9306      	str	r3, [sp, #24]
 80090d2:	e7a0      	b.n	8009016 <__gethex+0x192>
 80090d4:	2301      	movs	r3, #1
 80090d6:	9a03      	ldr	r2, [sp, #12]
 80090d8:	1a9d      	subs	r5, r3, r2
 80090da:	9b08      	ldr	r3, [sp, #32]
 80090dc:	195d      	adds	r5, r3, r5
 80090de:	9b01      	ldr	r3, [sp, #4]
 80090e0:	429d      	cmp	r5, r3
 80090e2:	d3e2      	bcc.n	80090aa <__gethex+0x226>
 80090e4:	0028      	movs	r0, r5
 80090e6:	9907      	ldr	r1, [sp, #28]
 80090e8:	f001 f8e2 	bl	800a2b0 <strncmp>
 80090ec:	2800      	cmp	r0, #0
 80090ee:	d1dc      	bne.n	80090aa <__gethex+0x226>
 80090f0:	e791      	b.n	8009016 <__gethex+0x192>
 80090f2:	9b01      	ldr	r3, [sp, #4]
 80090f4:	2500      	movs	r5, #0
 80090f6:	429e      	cmp	r6, r3
 80090f8:	dac3      	bge.n	8009082 <__gethex+0x1fe>
 80090fa:	1b9e      	subs	r6, r3, r6
 80090fc:	0021      	movs	r1, r4
 80090fe:	0032      	movs	r2, r6
 8009100:	9805      	ldr	r0, [sp, #20]
 8009102:	f000 fc7b 	bl	80099fc <__lshift>
 8009106:	0003      	movs	r3, r0
 8009108:	3314      	adds	r3, #20
 800910a:	0004      	movs	r4, r0
 800910c:	1bbf      	subs	r7, r7, r6
 800910e:	9304      	str	r3, [sp, #16]
 8009110:	e7b7      	b.n	8009082 <__gethex+0x1fe>
 8009112:	9b02      	ldr	r3, [sp, #8]
 8009114:	685e      	ldr	r6, [r3, #4]
 8009116:	42be      	cmp	r6, r7
 8009118:	dd71      	ble.n	80091fe <__gethex+0x37a>
 800911a:	9b01      	ldr	r3, [sp, #4]
 800911c:	1bf6      	subs	r6, r6, r7
 800911e:	42b3      	cmp	r3, r6
 8009120:	dc38      	bgt.n	8009194 <__gethex+0x310>
 8009122:	9b02      	ldr	r3, [sp, #8]
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	2b02      	cmp	r3, #2
 8009128:	d026      	beq.n	8009178 <__gethex+0x2f4>
 800912a:	2b03      	cmp	r3, #3
 800912c:	d028      	beq.n	8009180 <__gethex+0x2fc>
 800912e:	2b01      	cmp	r3, #1
 8009130:	d119      	bne.n	8009166 <__gethex+0x2e2>
 8009132:	9b01      	ldr	r3, [sp, #4]
 8009134:	42b3      	cmp	r3, r6
 8009136:	d116      	bne.n	8009166 <__gethex+0x2e2>
 8009138:	2b01      	cmp	r3, #1
 800913a:	d10d      	bne.n	8009158 <__gethex+0x2d4>
 800913c:	9b02      	ldr	r3, [sp, #8]
 800913e:	2662      	movs	r6, #98	; 0x62
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	9301      	str	r3, [sp, #4]
 8009144:	9a01      	ldr	r2, [sp, #4]
 8009146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009148:	601a      	str	r2, [r3, #0]
 800914a:	2301      	movs	r3, #1
 800914c:	9a04      	ldr	r2, [sp, #16]
 800914e:	6123      	str	r3, [r4, #16]
 8009150:	6013      	str	r3, [r2, #0]
 8009152:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009154:	601c      	str	r4, [r3, #0]
 8009156:	e72e      	b.n	8008fb6 <__gethex+0x132>
 8009158:	9901      	ldr	r1, [sp, #4]
 800915a:	0020      	movs	r0, r4
 800915c:	3901      	subs	r1, #1
 800915e:	f000 fe91 	bl	8009e84 <__any_on>
 8009162:	2800      	cmp	r0, #0
 8009164:	d1ea      	bne.n	800913c <__gethex+0x2b8>
 8009166:	0021      	movs	r1, r4
 8009168:	9805      	ldr	r0, [sp, #20]
 800916a:	f000 fa29 	bl	80095c0 <_Bfree>
 800916e:	2300      	movs	r3, #0
 8009170:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009172:	2650      	movs	r6, #80	; 0x50
 8009174:	6013      	str	r3, [r2, #0]
 8009176:	e71e      	b.n	8008fb6 <__gethex+0x132>
 8009178:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800917a:	2b00      	cmp	r3, #0
 800917c:	d1f3      	bne.n	8009166 <__gethex+0x2e2>
 800917e:	e7dd      	b.n	800913c <__gethex+0x2b8>
 8009180:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009182:	2b00      	cmp	r3, #0
 8009184:	d1da      	bne.n	800913c <__gethex+0x2b8>
 8009186:	e7ee      	b.n	8009166 <__gethex+0x2e2>
 8009188:	0800ae40 	.word	0x0800ae40
 800918c:	0800adc8 	.word	0x0800adc8
 8009190:	0800add9 	.word	0x0800add9
 8009194:	1e77      	subs	r7, r6, #1
 8009196:	2d00      	cmp	r5, #0
 8009198:	d12f      	bne.n	80091fa <__gethex+0x376>
 800919a:	2f00      	cmp	r7, #0
 800919c:	d004      	beq.n	80091a8 <__gethex+0x324>
 800919e:	0039      	movs	r1, r7
 80091a0:	0020      	movs	r0, r4
 80091a2:	f000 fe6f 	bl	8009e84 <__any_on>
 80091a6:	0005      	movs	r5, r0
 80091a8:	231f      	movs	r3, #31
 80091aa:	117a      	asrs	r2, r7, #5
 80091ac:	401f      	ands	r7, r3
 80091ae:	3b1e      	subs	r3, #30
 80091b0:	40bb      	lsls	r3, r7
 80091b2:	9904      	ldr	r1, [sp, #16]
 80091b4:	0092      	lsls	r2, r2, #2
 80091b6:	5852      	ldr	r2, [r2, r1]
 80091b8:	421a      	tst	r2, r3
 80091ba:	d001      	beq.n	80091c0 <__gethex+0x33c>
 80091bc:	2302      	movs	r3, #2
 80091be:	431d      	orrs	r5, r3
 80091c0:	9b01      	ldr	r3, [sp, #4]
 80091c2:	0031      	movs	r1, r6
 80091c4:	1b9b      	subs	r3, r3, r6
 80091c6:	2602      	movs	r6, #2
 80091c8:	0020      	movs	r0, r4
 80091ca:	9301      	str	r3, [sp, #4]
 80091cc:	f7ff fdf0 	bl	8008db0 <rshift>
 80091d0:	9b02      	ldr	r3, [sp, #8]
 80091d2:	685f      	ldr	r7, [r3, #4]
 80091d4:	2d00      	cmp	r5, #0
 80091d6:	d041      	beq.n	800925c <__gethex+0x3d8>
 80091d8:	9b02      	ldr	r3, [sp, #8]
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	2b02      	cmp	r3, #2
 80091de:	d010      	beq.n	8009202 <__gethex+0x37e>
 80091e0:	2b03      	cmp	r3, #3
 80091e2:	d012      	beq.n	800920a <__gethex+0x386>
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d106      	bne.n	80091f6 <__gethex+0x372>
 80091e8:	07aa      	lsls	r2, r5, #30
 80091ea:	d504      	bpl.n	80091f6 <__gethex+0x372>
 80091ec:	9a04      	ldr	r2, [sp, #16]
 80091ee:	6810      	ldr	r0, [r2, #0]
 80091f0:	4305      	orrs	r5, r0
 80091f2:	421d      	tst	r5, r3
 80091f4:	d10c      	bne.n	8009210 <__gethex+0x38c>
 80091f6:	2310      	movs	r3, #16
 80091f8:	e02f      	b.n	800925a <__gethex+0x3d6>
 80091fa:	2501      	movs	r5, #1
 80091fc:	e7d4      	b.n	80091a8 <__gethex+0x324>
 80091fe:	2601      	movs	r6, #1
 8009200:	e7e8      	b.n	80091d4 <__gethex+0x350>
 8009202:	2301      	movs	r3, #1
 8009204:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009206:	1a9b      	subs	r3, r3, r2
 8009208:	9313      	str	r3, [sp, #76]	; 0x4c
 800920a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800920c:	2b00      	cmp	r3, #0
 800920e:	d0f2      	beq.n	80091f6 <__gethex+0x372>
 8009210:	6923      	ldr	r3, [r4, #16]
 8009212:	2000      	movs	r0, #0
 8009214:	9303      	str	r3, [sp, #12]
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	9304      	str	r3, [sp, #16]
 800921a:	0023      	movs	r3, r4
 800921c:	9a04      	ldr	r2, [sp, #16]
 800921e:	3314      	adds	r3, #20
 8009220:	1899      	adds	r1, r3, r2
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	1c55      	adds	r5, r2, #1
 8009226:	d01e      	beq.n	8009266 <__gethex+0x3e2>
 8009228:	3201      	adds	r2, #1
 800922a:	601a      	str	r2, [r3, #0]
 800922c:	0023      	movs	r3, r4
 800922e:	3314      	adds	r3, #20
 8009230:	2e02      	cmp	r6, #2
 8009232:	d140      	bne.n	80092b6 <__gethex+0x432>
 8009234:	9a02      	ldr	r2, [sp, #8]
 8009236:	9901      	ldr	r1, [sp, #4]
 8009238:	6812      	ldr	r2, [r2, #0]
 800923a:	3a01      	subs	r2, #1
 800923c:	428a      	cmp	r2, r1
 800923e:	d10b      	bne.n	8009258 <__gethex+0x3d4>
 8009240:	114a      	asrs	r2, r1, #5
 8009242:	211f      	movs	r1, #31
 8009244:	9801      	ldr	r0, [sp, #4]
 8009246:	0092      	lsls	r2, r2, #2
 8009248:	4001      	ands	r1, r0
 800924a:	2001      	movs	r0, #1
 800924c:	0005      	movs	r5, r0
 800924e:	408d      	lsls	r5, r1
 8009250:	58d3      	ldr	r3, [r2, r3]
 8009252:	422b      	tst	r3, r5
 8009254:	d000      	beq.n	8009258 <__gethex+0x3d4>
 8009256:	2601      	movs	r6, #1
 8009258:	2320      	movs	r3, #32
 800925a:	431e      	orrs	r6, r3
 800925c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800925e:	601c      	str	r4, [r3, #0]
 8009260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009262:	601f      	str	r7, [r3, #0]
 8009264:	e6a7      	b.n	8008fb6 <__gethex+0x132>
 8009266:	c301      	stmia	r3!, {r0}
 8009268:	4299      	cmp	r1, r3
 800926a:	d8da      	bhi.n	8009222 <__gethex+0x39e>
 800926c:	9b03      	ldr	r3, [sp, #12]
 800926e:	68a2      	ldr	r2, [r4, #8]
 8009270:	4293      	cmp	r3, r2
 8009272:	db17      	blt.n	80092a4 <__gethex+0x420>
 8009274:	6863      	ldr	r3, [r4, #4]
 8009276:	9805      	ldr	r0, [sp, #20]
 8009278:	1c59      	adds	r1, r3, #1
 800927a:	f000 f95d 	bl	8009538 <_Balloc>
 800927e:	1e05      	subs	r5, r0, #0
 8009280:	d103      	bne.n	800928a <__gethex+0x406>
 8009282:	0002      	movs	r2, r0
 8009284:	2184      	movs	r1, #132	; 0x84
 8009286:	4b1c      	ldr	r3, [pc, #112]	; (80092f8 <__gethex+0x474>)
 8009288:	e6b8      	b.n	8008ffc <__gethex+0x178>
 800928a:	0021      	movs	r1, r4
 800928c:	6923      	ldr	r3, [r4, #16]
 800928e:	310c      	adds	r1, #12
 8009290:	1c9a      	adds	r2, r3, #2
 8009292:	0092      	lsls	r2, r2, #2
 8009294:	300c      	adds	r0, #12
 8009296:	f7fc ff18 	bl	80060ca <memcpy>
 800929a:	0021      	movs	r1, r4
 800929c:	9805      	ldr	r0, [sp, #20]
 800929e:	f000 f98f 	bl	80095c0 <_Bfree>
 80092a2:	002c      	movs	r4, r5
 80092a4:	6923      	ldr	r3, [r4, #16]
 80092a6:	1c5a      	adds	r2, r3, #1
 80092a8:	6122      	str	r2, [r4, #16]
 80092aa:	2201      	movs	r2, #1
 80092ac:	3304      	adds	r3, #4
 80092ae:	009b      	lsls	r3, r3, #2
 80092b0:	18e3      	adds	r3, r4, r3
 80092b2:	605a      	str	r2, [r3, #4]
 80092b4:	e7ba      	b.n	800922c <__gethex+0x3a8>
 80092b6:	6922      	ldr	r2, [r4, #16]
 80092b8:	9903      	ldr	r1, [sp, #12]
 80092ba:	428a      	cmp	r2, r1
 80092bc:	dd09      	ble.n	80092d2 <__gethex+0x44e>
 80092be:	2101      	movs	r1, #1
 80092c0:	0020      	movs	r0, r4
 80092c2:	f7ff fd75 	bl	8008db0 <rshift>
 80092c6:	9b02      	ldr	r3, [sp, #8]
 80092c8:	3701      	adds	r7, #1
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	42bb      	cmp	r3, r7
 80092ce:	dac2      	bge.n	8009256 <__gethex+0x3d2>
 80092d0:	e6dc      	b.n	800908c <__gethex+0x208>
 80092d2:	221f      	movs	r2, #31
 80092d4:	9d01      	ldr	r5, [sp, #4]
 80092d6:	9901      	ldr	r1, [sp, #4]
 80092d8:	2601      	movs	r6, #1
 80092da:	4015      	ands	r5, r2
 80092dc:	4211      	tst	r1, r2
 80092de:	d0bb      	beq.n	8009258 <__gethex+0x3d4>
 80092e0:	9a04      	ldr	r2, [sp, #16]
 80092e2:	189b      	adds	r3, r3, r2
 80092e4:	3b04      	subs	r3, #4
 80092e6:	6818      	ldr	r0, [r3, #0]
 80092e8:	f000 fa1e 	bl	8009728 <__hi0bits>
 80092ec:	2320      	movs	r3, #32
 80092ee:	1b5d      	subs	r5, r3, r5
 80092f0:	42a8      	cmp	r0, r5
 80092f2:	dbe4      	blt.n	80092be <__gethex+0x43a>
 80092f4:	e7b0      	b.n	8009258 <__gethex+0x3d4>
 80092f6:	46c0      	nop			; (mov r8, r8)
 80092f8:	0800adc8 	.word	0x0800adc8

080092fc <L_shift>:
 80092fc:	2308      	movs	r3, #8
 80092fe:	b570      	push	{r4, r5, r6, lr}
 8009300:	2520      	movs	r5, #32
 8009302:	1a9a      	subs	r2, r3, r2
 8009304:	0092      	lsls	r2, r2, #2
 8009306:	1aad      	subs	r5, r5, r2
 8009308:	6843      	ldr	r3, [r0, #4]
 800930a:	6806      	ldr	r6, [r0, #0]
 800930c:	001c      	movs	r4, r3
 800930e:	40ac      	lsls	r4, r5
 8009310:	40d3      	lsrs	r3, r2
 8009312:	4334      	orrs	r4, r6
 8009314:	6004      	str	r4, [r0, #0]
 8009316:	6043      	str	r3, [r0, #4]
 8009318:	3004      	adds	r0, #4
 800931a:	4288      	cmp	r0, r1
 800931c:	d3f4      	bcc.n	8009308 <L_shift+0xc>
 800931e:	bd70      	pop	{r4, r5, r6, pc}

08009320 <__match>:
 8009320:	b530      	push	{r4, r5, lr}
 8009322:	6803      	ldr	r3, [r0, #0]
 8009324:	780c      	ldrb	r4, [r1, #0]
 8009326:	3301      	adds	r3, #1
 8009328:	2c00      	cmp	r4, #0
 800932a:	d102      	bne.n	8009332 <__match+0x12>
 800932c:	6003      	str	r3, [r0, #0]
 800932e:	2001      	movs	r0, #1
 8009330:	bd30      	pop	{r4, r5, pc}
 8009332:	781a      	ldrb	r2, [r3, #0]
 8009334:	0015      	movs	r5, r2
 8009336:	3d41      	subs	r5, #65	; 0x41
 8009338:	2d19      	cmp	r5, #25
 800933a:	d800      	bhi.n	800933e <__match+0x1e>
 800933c:	3220      	adds	r2, #32
 800933e:	3101      	adds	r1, #1
 8009340:	42a2      	cmp	r2, r4
 8009342:	d0ef      	beq.n	8009324 <__match+0x4>
 8009344:	2000      	movs	r0, #0
 8009346:	e7f3      	b.n	8009330 <__match+0x10>

08009348 <__hexnan>:
 8009348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800934a:	680b      	ldr	r3, [r1, #0]
 800934c:	b08b      	sub	sp, #44	; 0x2c
 800934e:	9201      	str	r2, [sp, #4]
 8009350:	9901      	ldr	r1, [sp, #4]
 8009352:	115a      	asrs	r2, r3, #5
 8009354:	0092      	lsls	r2, r2, #2
 8009356:	188a      	adds	r2, r1, r2
 8009358:	9202      	str	r2, [sp, #8]
 800935a:	0019      	movs	r1, r3
 800935c:	221f      	movs	r2, #31
 800935e:	4011      	ands	r1, r2
 8009360:	9008      	str	r0, [sp, #32]
 8009362:	9106      	str	r1, [sp, #24]
 8009364:	4213      	tst	r3, r2
 8009366:	d002      	beq.n	800936e <__hexnan+0x26>
 8009368:	9b02      	ldr	r3, [sp, #8]
 800936a:	3304      	adds	r3, #4
 800936c:	9302      	str	r3, [sp, #8]
 800936e:	9b02      	ldr	r3, [sp, #8]
 8009370:	2500      	movs	r5, #0
 8009372:	1f1e      	subs	r6, r3, #4
 8009374:	0037      	movs	r7, r6
 8009376:	0034      	movs	r4, r6
 8009378:	9b08      	ldr	r3, [sp, #32]
 800937a:	6035      	str	r5, [r6, #0]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	9507      	str	r5, [sp, #28]
 8009380:	9305      	str	r3, [sp, #20]
 8009382:	9503      	str	r5, [sp, #12]
 8009384:	9b05      	ldr	r3, [sp, #20]
 8009386:	3301      	adds	r3, #1
 8009388:	9309      	str	r3, [sp, #36]	; 0x24
 800938a:	9b05      	ldr	r3, [sp, #20]
 800938c:	785b      	ldrb	r3, [r3, #1]
 800938e:	9304      	str	r3, [sp, #16]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d028      	beq.n	80093e6 <__hexnan+0x9e>
 8009394:	9804      	ldr	r0, [sp, #16]
 8009396:	f7ff fd5f 	bl	8008e58 <__hexdig_fun>
 800939a:	2800      	cmp	r0, #0
 800939c:	d154      	bne.n	8009448 <__hexnan+0x100>
 800939e:	9b04      	ldr	r3, [sp, #16]
 80093a0:	2b20      	cmp	r3, #32
 80093a2:	d819      	bhi.n	80093d8 <__hexnan+0x90>
 80093a4:	9b03      	ldr	r3, [sp, #12]
 80093a6:	9a07      	ldr	r2, [sp, #28]
 80093a8:	4293      	cmp	r3, r2
 80093aa:	dd12      	ble.n	80093d2 <__hexnan+0x8a>
 80093ac:	42bc      	cmp	r4, r7
 80093ae:	d206      	bcs.n	80093be <__hexnan+0x76>
 80093b0:	2d07      	cmp	r5, #7
 80093b2:	dc04      	bgt.n	80093be <__hexnan+0x76>
 80093b4:	002a      	movs	r2, r5
 80093b6:	0039      	movs	r1, r7
 80093b8:	0020      	movs	r0, r4
 80093ba:	f7ff ff9f 	bl	80092fc <L_shift>
 80093be:	9b01      	ldr	r3, [sp, #4]
 80093c0:	2508      	movs	r5, #8
 80093c2:	429c      	cmp	r4, r3
 80093c4:	d905      	bls.n	80093d2 <__hexnan+0x8a>
 80093c6:	1f27      	subs	r7, r4, #4
 80093c8:	2500      	movs	r5, #0
 80093ca:	003c      	movs	r4, r7
 80093cc:	9b03      	ldr	r3, [sp, #12]
 80093ce:	603d      	str	r5, [r7, #0]
 80093d0:	9307      	str	r3, [sp, #28]
 80093d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093d4:	9305      	str	r3, [sp, #20]
 80093d6:	e7d5      	b.n	8009384 <__hexnan+0x3c>
 80093d8:	9b04      	ldr	r3, [sp, #16]
 80093da:	2b29      	cmp	r3, #41	; 0x29
 80093dc:	d159      	bne.n	8009492 <__hexnan+0x14a>
 80093de:	9b05      	ldr	r3, [sp, #20]
 80093e0:	9a08      	ldr	r2, [sp, #32]
 80093e2:	3302      	adds	r3, #2
 80093e4:	6013      	str	r3, [r2, #0]
 80093e6:	9b03      	ldr	r3, [sp, #12]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d052      	beq.n	8009492 <__hexnan+0x14a>
 80093ec:	42bc      	cmp	r4, r7
 80093ee:	d206      	bcs.n	80093fe <__hexnan+0xb6>
 80093f0:	2d07      	cmp	r5, #7
 80093f2:	dc04      	bgt.n	80093fe <__hexnan+0xb6>
 80093f4:	002a      	movs	r2, r5
 80093f6:	0039      	movs	r1, r7
 80093f8:	0020      	movs	r0, r4
 80093fa:	f7ff ff7f 	bl	80092fc <L_shift>
 80093fe:	9b01      	ldr	r3, [sp, #4]
 8009400:	429c      	cmp	r4, r3
 8009402:	d935      	bls.n	8009470 <__hexnan+0x128>
 8009404:	001a      	movs	r2, r3
 8009406:	0023      	movs	r3, r4
 8009408:	cb02      	ldmia	r3!, {r1}
 800940a:	c202      	stmia	r2!, {r1}
 800940c:	429e      	cmp	r6, r3
 800940e:	d2fb      	bcs.n	8009408 <__hexnan+0xc0>
 8009410:	9b02      	ldr	r3, [sp, #8]
 8009412:	1c61      	adds	r1, r4, #1
 8009414:	1eda      	subs	r2, r3, #3
 8009416:	2304      	movs	r3, #4
 8009418:	4291      	cmp	r1, r2
 800941a:	d805      	bhi.n	8009428 <__hexnan+0xe0>
 800941c:	9b02      	ldr	r3, [sp, #8]
 800941e:	3b04      	subs	r3, #4
 8009420:	1b1b      	subs	r3, r3, r4
 8009422:	089b      	lsrs	r3, r3, #2
 8009424:	3301      	adds	r3, #1
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	9a01      	ldr	r2, [sp, #4]
 800942a:	18d3      	adds	r3, r2, r3
 800942c:	2200      	movs	r2, #0
 800942e:	c304      	stmia	r3!, {r2}
 8009430:	429e      	cmp	r6, r3
 8009432:	d2fc      	bcs.n	800942e <__hexnan+0xe6>
 8009434:	6833      	ldr	r3, [r6, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d104      	bne.n	8009444 <__hexnan+0xfc>
 800943a:	9b01      	ldr	r3, [sp, #4]
 800943c:	429e      	cmp	r6, r3
 800943e:	d126      	bne.n	800948e <__hexnan+0x146>
 8009440:	2301      	movs	r3, #1
 8009442:	6033      	str	r3, [r6, #0]
 8009444:	2005      	movs	r0, #5
 8009446:	e025      	b.n	8009494 <__hexnan+0x14c>
 8009448:	9b03      	ldr	r3, [sp, #12]
 800944a:	3501      	adds	r5, #1
 800944c:	3301      	adds	r3, #1
 800944e:	9303      	str	r3, [sp, #12]
 8009450:	2d08      	cmp	r5, #8
 8009452:	dd06      	ble.n	8009462 <__hexnan+0x11a>
 8009454:	9b01      	ldr	r3, [sp, #4]
 8009456:	429c      	cmp	r4, r3
 8009458:	d9bb      	bls.n	80093d2 <__hexnan+0x8a>
 800945a:	2300      	movs	r3, #0
 800945c:	2501      	movs	r5, #1
 800945e:	3c04      	subs	r4, #4
 8009460:	6023      	str	r3, [r4, #0]
 8009462:	220f      	movs	r2, #15
 8009464:	6823      	ldr	r3, [r4, #0]
 8009466:	4010      	ands	r0, r2
 8009468:	011b      	lsls	r3, r3, #4
 800946a:	4318      	orrs	r0, r3
 800946c:	6020      	str	r0, [r4, #0]
 800946e:	e7b0      	b.n	80093d2 <__hexnan+0x8a>
 8009470:	9b06      	ldr	r3, [sp, #24]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d0de      	beq.n	8009434 <__hexnan+0xec>
 8009476:	2120      	movs	r1, #32
 8009478:	9a06      	ldr	r2, [sp, #24]
 800947a:	9b02      	ldr	r3, [sp, #8]
 800947c:	1a89      	subs	r1, r1, r2
 800947e:	2201      	movs	r2, #1
 8009480:	4252      	negs	r2, r2
 8009482:	40ca      	lsrs	r2, r1
 8009484:	3b04      	subs	r3, #4
 8009486:	6819      	ldr	r1, [r3, #0]
 8009488:	400a      	ands	r2, r1
 800948a:	601a      	str	r2, [r3, #0]
 800948c:	e7d2      	b.n	8009434 <__hexnan+0xec>
 800948e:	3e04      	subs	r6, #4
 8009490:	e7d0      	b.n	8009434 <__hexnan+0xec>
 8009492:	2004      	movs	r0, #4
 8009494:	b00b      	add	sp, #44	; 0x2c
 8009496:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009498 <_localeconv_r>:
 8009498:	4800      	ldr	r0, [pc, #0]	; (800949c <_localeconv_r+0x4>)
 800949a:	4770      	bx	lr
 800949c:	20000168 	.word	0x20000168

080094a0 <_lseek_r>:
 80094a0:	b570      	push	{r4, r5, r6, lr}
 80094a2:	0004      	movs	r4, r0
 80094a4:	0008      	movs	r0, r1
 80094a6:	0011      	movs	r1, r2
 80094a8:	001a      	movs	r2, r3
 80094aa:	2300      	movs	r3, #0
 80094ac:	4d05      	ldr	r5, [pc, #20]	; (80094c4 <_lseek_r+0x24>)
 80094ae:	602b      	str	r3, [r5, #0]
 80094b0:	f7f9 faaa 	bl	8002a08 <_lseek>
 80094b4:	1c43      	adds	r3, r0, #1
 80094b6:	d103      	bne.n	80094c0 <_lseek_r+0x20>
 80094b8:	682b      	ldr	r3, [r5, #0]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d000      	beq.n	80094c0 <_lseek_r+0x20>
 80094be:	6023      	str	r3, [r4, #0]
 80094c0:	bd70      	pop	{r4, r5, r6, pc}
 80094c2:	46c0      	nop			; (mov r8, r8)
 80094c4:	20001300 	.word	0x20001300

080094c8 <malloc>:
 80094c8:	b510      	push	{r4, lr}
 80094ca:	4b03      	ldr	r3, [pc, #12]	; (80094d8 <malloc+0x10>)
 80094cc:	0001      	movs	r1, r0
 80094ce:	6818      	ldr	r0, [r3, #0]
 80094d0:	f7fc fe2e 	bl	8006130 <_malloc_r>
 80094d4:	bd10      	pop	{r4, pc}
 80094d6:	46c0      	nop			; (mov r8, r8)
 80094d8:	20000010 	.word	0x20000010

080094dc <__ascii_mbtowc>:
 80094dc:	b082      	sub	sp, #8
 80094de:	2900      	cmp	r1, #0
 80094e0:	d100      	bne.n	80094e4 <__ascii_mbtowc+0x8>
 80094e2:	a901      	add	r1, sp, #4
 80094e4:	1e10      	subs	r0, r2, #0
 80094e6:	d006      	beq.n	80094f6 <__ascii_mbtowc+0x1a>
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d006      	beq.n	80094fa <__ascii_mbtowc+0x1e>
 80094ec:	7813      	ldrb	r3, [r2, #0]
 80094ee:	600b      	str	r3, [r1, #0]
 80094f0:	7810      	ldrb	r0, [r2, #0]
 80094f2:	1e43      	subs	r3, r0, #1
 80094f4:	4198      	sbcs	r0, r3
 80094f6:	b002      	add	sp, #8
 80094f8:	4770      	bx	lr
 80094fa:	2002      	movs	r0, #2
 80094fc:	4240      	negs	r0, r0
 80094fe:	e7fa      	b.n	80094f6 <__ascii_mbtowc+0x1a>

08009500 <memchr>:
 8009500:	b2c9      	uxtb	r1, r1
 8009502:	1882      	adds	r2, r0, r2
 8009504:	4290      	cmp	r0, r2
 8009506:	d101      	bne.n	800950c <memchr+0xc>
 8009508:	2000      	movs	r0, #0
 800950a:	4770      	bx	lr
 800950c:	7803      	ldrb	r3, [r0, #0]
 800950e:	428b      	cmp	r3, r1
 8009510:	d0fb      	beq.n	800950a <memchr+0xa>
 8009512:	3001      	adds	r0, #1
 8009514:	e7f6      	b.n	8009504 <memchr+0x4>
	...

08009518 <__malloc_lock>:
 8009518:	b510      	push	{r4, lr}
 800951a:	4802      	ldr	r0, [pc, #8]	; (8009524 <__malloc_lock+0xc>)
 800951c:	f7fc fdd3 	bl	80060c6 <__retarget_lock_acquire_recursive>
 8009520:	bd10      	pop	{r4, pc}
 8009522:	46c0      	nop			; (mov r8, r8)
 8009524:	200012f4 	.word	0x200012f4

08009528 <__malloc_unlock>:
 8009528:	b510      	push	{r4, lr}
 800952a:	4802      	ldr	r0, [pc, #8]	; (8009534 <__malloc_unlock+0xc>)
 800952c:	f7fc fdcc 	bl	80060c8 <__retarget_lock_release_recursive>
 8009530:	bd10      	pop	{r4, pc}
 8009532:	46c0      	nop			; (mov r8, r8)
 8009534:	200012f4 	.word	0x200012f4

08009538 <_Balloc>:
 8009538:	b570      	push	{r4, r5, r6, lr}
 800953a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800953c:	0006      	movs	r6, r0
 800953e:	000c      	movs	r4, r1
 8009540:	2d00      	cmp	r5, #0
 8009542:	d10e      	bne.n	8009562 <_Balloc+0x2a>
 8009544:	2010      	movs	r0, #16
 8009546:	f7ff ffbf 	bl	80094c8 <malloc>
 800954a:	1e02      	subs	r2, r0, #0
 800954c:	6270      	str	r0, [r6, #36]	; 0x24
 800954e:	d104      	bne.n	800955a <_Balloc+0x22>
 8009550:	2166      	movs	r1, #102	; 0x66
 8009552:	4b19      	ldr	r3, [pc, #100]	; (80095b8 <_Balloc+0x80>)
 8009554:	4819      	ldr	r0, [pc, #100]	; (80095bc <_Balloc+0x84>)
 8009556:	f000 fecb 	bl	800a2f0 <__assert_func>
 800955a:	6045      	str	r5, [r0, #4]
 800955c:	6085      	str	r5, [r0, #8]
 800955e:	6005      	str	r5, [r0, #0]
 8009560:	60c5      	str	r5, [r0, #12]
 8009562:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8009564:	68eb      	ldr	r3, [r5, #12]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d013      	beq.n	8009592 <_Balloc+0x5a>
 800956a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800956c:	00a2      	lsls	r2, r4, #2
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	189b      	adds	r3, r3, r2
 8009572:	6818      	ldr	r0, [r3, #0]
 8009574:	2800      	cmp	r0, #0
 8009576:	d118      	bne.n	80095aa <_Balloc+0x72>
 8009578:	2101      	movs	r1, #1
 800957a:	000d      	movs	r5, r1
 800957c:	40a5      	lsls	r5, r4
 800957e:	1d6a      	adds	r2, r5, #5
 8009580:	0030      	movs	r0, r6
 8009582:	0092      	lsls	r2, r2, #2
 8009584:	f000 fca1 	bl	8009eca <_calloc_r>
 8009588:	2800      	cmp	r0, #0
 800958a:	d00c      	beq.n	80095a6 <_Balloc+0x6e>
 800958c:	6044      	str	r4, [r0, #4]
 800958e:	6085      	str	r5, [r0, #8]
 8009590:	e00d      	b.n	80095ae <_Balloc+0x76>
 8009592:	2221      	movs	r2, #33	; 0x21
 8009594:	2104      	movs	r1, #4
 8009596:	0030      	movs	r0, r6
 8009598:	f000 fc97 	bl	8009eca <_calloc_r>
 800959c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800959e:	60e8      	str	r0, [r5, #12]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d1e1      	bne.n	800956a <_Balloc+0x32>
 80095a6:	2000      	movs	r0, #0
 80095a8:	bd70      	pop	{r4, r5, r6, pc}
 80095aa:	6802      	ldr	r2, [r0, #0]
 80095ac:	601a      	str	r2, [r3, #0]
 80095ae:	2300      	movs	r3, #0
 80095b0:	6103      	str	r3, [r0, #16]
 80095b2:	60c3      	str	r3, [r0, #12]
 80095b4:	e7f8      	b.n	80095a8 <_Balloc+0x70>
 80095b6:	46c0      	nop			; (mov r8, r8)
 80095b8:	0800ad56 	.word	0x0800ad56
 80095bc:	0800ae54 	.word	0x0800ae54

080095c0 <_Bfree>:
 80095c0:	b570      	push	{r4, r5, r6, lr}
 80095c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80095c4:	0005      	movs	r5, r0
 80095c6:	000c      	movs	r4, r1
 80095c8:	2e00      	cmp	r6, #0
 80095ca:	d10e      	bne.n	80095ea <_Bfree+0x2a>
 80095cc:	2010      	movs	r0, #16
 80095ce:	f7ff ff7b 	bl	80094c8 <malloc>
 80095d2:	1e02      	subs	r2, r0, #0
 80095d4:	6268      	str	r0, [r5, #36]	; 0x24
 80095d6:	d104      	bne.n	80095e2 <_Bfree+0x22>
 80095d8:	218a      	movs	r1, #138	; 0x8a
 80095da:	4b09      	ldr	r3, [pc, #36]	; (8009600 <_Bfree+0x40>)
 80095dc:	4809      	ldr	r0, [pc, #36]	; (8009604 <_Bfree+0x44>)
 80095de:	f000 fe87 	bl	800a2f0 <__assert_func>
 80095e2:	6046      	str	r6, [r0, #4]
 80095e4:	6086      	str	r6, [r0, #8]
 80095e6:	6006      	str	r6, [r0, #0]
 80095e8:	60c6      	str	r6, [r0, #12]
 80095ea:	2c00      	cmp	r4, #0
 80095ec:	d007      	beq.n	80095fe <_Bfree+0x3e>
 80095ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80095f0:	6862      	ldr	r2, [r4, #4]
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	0092      	lsls	r2, r2, #2
 80095f6:	189b      	adds	r3, r3, r2
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	6022      	str	r2, [r4, #0]
 80095fc:	601c      	str	r4, [r3, #0]
 80095fe:	bd70      	pop	{r4, r5, r6, pc}
 8009600:	0800ad56 	.word	0x0800ad56
 8009604:	0800ae54 	.word	0x0800ae54

08009608 <__multadd>:
 8009608:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800960a:	000e      	movs	r6, r1
 800960c:	9001      	str	r0, [sp, #4]
 800960e:	000c      	movs	r4, r1
 8009610:	001d      	movs	r5, r3
 8009612:	2000      	movs	r0, #0
 8009614:	690f      	ldr	r7, [r1, #16]
 8009616:	3614      	adds	r6, #20
 8009618:	6833      	ldr	r3, [r6, #0]
 800961a:	3001      	adds	r0, #1
 800961c:	b299      	uxth	r1, r3
 800961e:	4351      	muls	r1, r2
 8009620:	0c1b      	lsrs	r3, r3, #16
 8009622:	4353      	muls	r3, r2
 8009624:	1949      	adds	r1, r1, r5
 8009626:	0c0d      	lsrs	r5, r1, #16
 8009628:	195b      	adds	r3, r3, r5
 800962a:	0c1d      	lsrs	r5, r3, #16
 800962c:	b289      	uxth	r1, r1
 800962e:	041b      	lsls	r3, r3, #16
 8009630:	185b      	adds	r3, r3, r1
 8009632:	c608      	stmia	r6!, {r3}
 8009634:	4287      	cmp	r7, r0
 8009636:	dcef      	bgt.n	8009618 <__multadd+0x10>
 8009638:	2d00      	cmp	r5, #0
 800963a:	d022      	beq.n	8009682 <__multadd+0x7a>
 800963c:	68a3      	ldr	r3, [r4, #8]
 800963e:	42bb      	cmp	r3, r7
 8009640:	dc19      	bgt.n	8009676 <__multadd+0x6e>
 8009642:	6863      	ldr	r3, [r4, #4]
 8009644:	9801      	ldr	r0, [sp, #4]
 8009646:	1c59      	adds	r1, r3, #1
 8009648:	f7ff ff76 	bl	8009538 <_Balloc>
 800964c:	1e06      	subs	r6, r0, #0
 800964e:	d105      	bne.n	800965c <__multadd+0x54>
 8009650:	0002      	movs	r2, r0
 8009652:	21b5      	movs	r1, #181	; 0xb5
 8009654:	4b0c      	ldr	r3, [pc, #48]	; (8009688 <__multadd+0x80>)
 8009656:	480d      	ldr	r0, [pc, #52]	; (800968c <__multadd+0x84>)
 8009658:	f000 fe4a 	bl	800a2f0 <__assert_func>
 800965c:	0021      	movs	r1, r4
 800965e:	6923      	ldr	r3, [r4, #16]
 8009660:	310c      	adds	r1, #12
 8009662:	1c9a      	adds	r2, r3, #2
 8009664:	0092      	lsls	r2, r2, #2
 8009666:	300c      	adds	r0, #12
 8009668:	f7fc fd2f 	bl	80060ca <memcpy>
 800966c:	0021      	movs	r1, r4
 800966e:	9801      	ldr	r0, [sp, #4]
 8009670:	f7ff ffa6 	bl	80095c0 <_Bfree>
 8009674:	0034      	movs	r4, r6
 8009676:	1d3b      	adds	r3, r7, #4
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	18e3      	adds	r3, r4, r3
 800967c:	605d      	str	r5, [r3, #4]
 800967e:	1c7b      	adds	r3, r7, #1
 8009680:	6123      	str	r3, [r4, #16]
 8009682:	0020      	movs	r0, r4
 8009684:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009686:	46c0      	nop			; (mov r8, r8)
 8009688:	0800adc8 	.word	0x0800adc8
 800968c:	0800ae54 	.word	0x0800ae54

08009690 <__s2b>:
 8009690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009692:	0006      	movs	r6, r0
 8009694:	0018      	movs	r0, r3
 8009696:	000c      	movs	r4, r1
 8009698:	3008      	adds	r0, #8
 800969a:	2109      	movs	r1, #9
 800969c:	9301      	str	r3, [sp, #4]
 800969e:	0015      	movs	r5, r2
 80096a0:	f7f6 fdd8 	bl	8000254 <__divsi3>
 80096a4:	2301      	movs	r3, #1
 80096a6:	2100      	movs	r1, #0
 80096a8:	4283      	cmp	r3, r0
 80096aa:	db0a      	blt.n	80096c2 <__s2b+0x32>
 80096ac:	0030      	movs	r0, r6
 80096ae:	f7ff ff43 	bl	8009538 <_Balloc>
 80096b2:	1e01      	subs	r1, r0, #0
 80096b4:	d108      	bne.n	80096c8 <__s2b+0x38>
 80096b6:	0002      	movs	r2, r0
 80096b8:	4b19      	ldr	r3, [pc, #100]	; (8009720 <__s2b+0x90>)
 80096ba:	481a      	ldr	r0, [pc, #104]	; (8009724 <__s2b+0x94>)
 80096bc:	31ce      	adds	r1, #206	; 0xce
 80096be:	f000 fe17 	bl	800a2f0 <__assert_func>
 80096c2:	005b      	lsls	r3, r3, #1
 80096c4:	3101      	adds	r1, #1
 80096c6:	e7ef      	b.n	80096a8 <__s2b+0x18>
 80096c8:	9b08      	ldr	r3, [sp, #32]
 80096ca:	6143      	str	r3, [r0, #20]
 80096cc:	2301      	movs	r3, #1
 80096ce:	6103      	str	r3, [r0, #16]
 80096d0:	2d09      	cmp	r5, #9
 80096d2:	dd18      	ble.n	8009706 <__s2b+0x76>
 80096d4:	0023      	movs	r3, r4
 80096d6:	3309      	adds	r3, #9
 80096d8:	001f      	movs	r7, r3
 80096da:	9300      	str	r3, [sp, #0]
 80096dc:	1964      	adds	r4, r4, r5
 80096de:	783b      	ldrb	r3, [r7, #0]
 80096e0:	220a      	movs	r2, #10
 80096e2:	0030      	movs	r0, r6
 80096e4:	3b30      	subs	r3, #48	; 0x30
 80096e6:	f7ff ff8f 	bl	8009608 <__multadd>
 80096ea:	3701      	adds	r7, #1
 80096ec:	0001      	movs	r1, r0
 80096ee:	42a7      	cmp	r7, r4
 80096f0:	d1f5      	bne.n	80096de <__s2b+0x4e>
 80096f2:	002c      	movs	r4, r5
 80096f4:	9b00      	ldr	r3, [sp, #0]
 80096f6:	3c08      	subs	r4, #8
 80096f8:	191c      	adds	r4, r3, r4
 80096fa:	002f      	movs	r7, r5
 80096fc:	9b01      	ldr	r3, [sp, #4]
 80096fe:	429f      	cmp	r7, r3
 8009700:	db04      	blt.n	800970c <__s2b+0x7c>
 8009702:	0008      	movs	r0, r1
 8009704:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009706:	2509      	movs	r5, #9
 8009708:	340a      	adds	r4, #10
 800970a:	e7f6      	b.n	80096fa <__s2b+0x6a>
 800970c:	1b63      	subs	r3, r4, r5
 800970e:	5ddb      	ldrb	r3, [r3, r7]
 8009710:	220a      	movs	r2, #10
 8009712:	0030      	movs	r0, r6
 8009714:	3b30      	subs	r3, #48	; 0x30
 8009716:	f7ff ff77 	bl	8009608 <__multadd>
 800971a:	3701      	adds	r7, #1
 800971c:	0001      	movs	r1, r0
 800971e:	e7ed      	b.n	80096fc <__s2b+0x6c>
 8009720:	0800adc8 	.word	0x0800adc8
 8009724:	0800ae54 	.word	0x0800ae54

08009728 <__hi0bits>:
 8009728:	0003      	movs	r3, r0
 800972a:	0c02      	lsrs	r2, r0, #16
 800972c:	2000      	movs	r0, #0
 800972e:	4282      	cmp	r2, r0
 8009730:	d101      	bne.n	8009736 <__hi0bits+0xe>
 8009732:	041b      	lsls	r3, r3, #16
 8009734:	3010      	adds	r0, #16
 8009736:	0e1a      	lsrs	r2, r3, #24
 8009738:	d101      	bne.n	800973e <__hi0bits+0x16>
 800973a:	3008      	adds	r0, #8
 800973c:	021b      	lsls	r3, r3, #8
 800973e:	0f1a      	lsrs	r2, r3, #28
 8009740:	d101      	bne.n	8009746 <__hi0bits+0x1e>
 8009742:	3004      	adds	r0, #4
 8009744:	011b      	lsls	r3, r3, #4
 8009746:	0f9a      	lsrs	r2, r3, #30
 8009748:	d101      	bne.n	800974e <__hi0bits+0x26>
 800974a:	3002      	adds	r0, #2
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	2b00      	cmp	r3, #0
 8009750:	db03      	blt.n	800975a <__hi0bits+0x32>
 8009752:	3001      	adds	r0, #1
 8009754:	005b      	lsls	r3, r3, #1
 8009756:	d400      	bmi.n	800975a <__hi0bits+0x32>
 8009758:	2020      	movs	r0, #32
 800975a:	4770      	bx	lr

0800975c <__lo0bits>:
 800975c:	6803      	ldr	r3, [r0, #0]
 800975e:	0002      	movs	r2, r0
 8009760:	2107      	movs	r1, #7
 8009762:	0018      	movs	r0, r3
 8009764:	4008      	ands	r0, r1
 8009766:	420b      	tst	r3, r1
 8009768:	d00d      	beq.n	8009786 <__lo0bits+0x2a>
 800976a:	3906      	subs	r1, #6
 800976c:	2000      	movs	r0, #0
 800976e:	420b      	tst	r3, r1
 8009770:	d105      	bne.n	800977e <__lo0bits+0x22>
 8009772:	3002      	adds	r0, #2
 8009774:	4203      	tst	r3, r0
 8009776:	d003      	beq.n	8009780 <__lo0bits+0x24>
 8009778:	40cb      	lsrs	r3, r1
 800977a:	0008      	movs	r0, r1
 800977c:	6013      	str	r3, [r2, #0]
 800977e:	4770      	bx	lr
 8009780:	089b      	lsrs	r3, r3, #2
 8009782:	6013      	str	r3, [r2, #0]
 8009784:	e7fb      	b.n	800977e <__lo0bits+0x22>
 8009786:	b299      	uxth	r1, r3
 8009788:	2900      	cmp	r1, #0
 800978a:	d101      	bne.n	8009790 <__lo0bits+0x34>
 800978c:	2010      	movs	r0, #16
 800978e:	0c1b      	lsrs	r3, r3, #16
 8009790:	b2d9      	uxtb	r1, r3
 8009792:	2900      	cmp	r1, #0
 8009794:	d101      	bne.n	800979a <__lo0bits+0x3e>
 8009796:	3008      	adds	r0, #8
 8009798:	0a1b      	lsrs	r3, r3, #8
 800979a:	0719      	lsls	r1, r3, #28
 800979c:	d101      	bne.n	80097a2 <__lo0bits+0x46>
 800979e:	3004      	adds	r0, #4
 80097a0:	091b      	lsrs	r3, r3, #4
 80097a2:	0799      	lsls	r1, r3, #30
 80097a4:	d101      	bne.n	80097aa <__lo0bits+0x4e>
 80097a6:	3002      	adds	r0, #2
 80097a8:	089b      	lsrs	r3, r3, #2
 80097aa:	07d9      	lsls	r1, r3, #31
 80097ac:	d4e9      	bmi.n	8009782 <__lo0bits+0x26>
 80097ae:	3001      	adds	r0, #1
 80097b0:	085b      	lsrs	r3, r3, #1
 80097b2:	d1e6      	bne.n	8009782 <__lo0bits+0x26>
 80097b4:	2020      	movs	r0, #32
 80097b6:	e7e2      	b.n	800977e <__lo0bits+0x22>

080097b8 <__i2b>:
 80097b8:	b510      	push	{r4, lr}
 80097ba:	000c      	movs	r4, r1
 80097bc:	2101      	movs	r1, #1
 80097be:	f7ff febb 	bl	8009538 <_Balloc>
 80097c2:	2800      	cmp	r0, #0
 80097c4:	d106      	bne.n	80097d4 <__i2b+0x1c>
 80097c6:	21a0      	movs	r1, #160	; 0xa0
 80097c8:	0002      	movs	r2, r0
 80097ca:	4b04      	ldr	r3, [pc, #16]	; (80097dc <__i2b+0x24>)
 80097cc:	4804      	ldr	r0, [pc, #16]	; (80097e0 <__i2b+0x28>)
 80097ce:	0049      	lsls	r1, r1, #1
 80097d0:	f000 fd8e 	bl	800a2f0 <__assert_func>
 80097d4:	2301      	movs	r3, #1
 80097d6:	6144      	str	r4, [r0, #20]
 80097d8:	6103      	str	r3, [r0, #16]
 80097da:	bd10      	pop	{r4, pc}
 80097dc:	0800adc8 	.word	0x0800adc8
 80097e0:	0800ae54 	.word	0x0800ae54

080097e4 <__multiply>:
 80097e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097e6:	690b      	ldr	r3, [r1, #16]
 80097e8:	0014      	movs	r4, r2
 80097ea:	6912      	ldr	r2, [r2, #16]
 80097ec:	000d      	movs	r5, r1
 80097ee:	b089      	sub	sp, #36	; 0x24
 80097f0:	4293      	cmp	r3, r2
 80097f2:	da01      	bge.n	80097f8 <__multiply+0x14>
 80097f4:	0025      	movs	r5, r4
 80097f6:	000c      	movs	r4, r1
 80097f8:	692f      	ldr	r7, [r5, #16]
 80097fa:	6926      	ldr	r6, [r4, #16]
 80097fc:	6869      	ldr	r1, [r5, #4]
 80097fe:	19bb      	adds	r3, r7, r6
 8009800:	9302      	str	r3, [sp, #8]
 8009802:	68ab      	ldr	r3, [r5, #8]
 8009804:	19ba      	adds	r2, r7, r6
 8009806:	4293      	cmp	r3, r2
 8009808:	da00      	bge.n	800980c <__multiply+0x28>
 800980a:	3101      	adds	r1, #1
 800980c:	f7ff fe94 	bl	8009538 <_Balloc>
 8009810:	9001      	str	r0, [sp, #4]
 8009812:	2800      	cmp	r0, #0
 8009814:	d106      	bne.n	8009824 <__multiply+0x40>
 8009816:	215e      	movs	r1, #94	; 0x5e
 8009818:	0002      	movs	r2, r0
 800981a:	4b48      	ldr	r3, [pc, #288]	; (800993c <__multiply+0x158>)
 800981c:	4848      	ldr	r0, [pc, #288]	; (8009940 <__multiply+0x15c>)
 800981e:	31ff      	adds	r1, #255	; 0xff
 8009820:	f000 fd66 	bl	800a2f0 <__assert_func>
 8009824:	9b01      	ldr	r3, [sp, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	3314      	adds	r3, #20
 800982a:	469c      	mov	ip, r3
 800982c:	19bb      	adds	r3, r7, r6
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	4463      	add	r3, ip
 8009832:	9303      	str	r3, [sp, #12]
 8009834:	4663      	mov	r3, ip
 8009836:	9903      	ldr	r1, [sp, #12]
 8009838:	428b      	cmp	r3, r1
 800983a:	d32c      	bcc.n	8009896 <__multiply+0xb2>
 800983c:	002b      	movs	r3, r5
 800983e:	0022      	movs	r2, r4
 8009840:	3314      	adds	r3, #20
 8009842:	00bf      	lsls	r7, r7, #2
 8009844:	3214      	adds	r2, #20
 8009846:	9306      	str	r3, [sp, #24]
 8009848:	00b6      	lsls	r6, r6, #2
 800984a:	19db      	adds	r3, r3, r7
 800984c:	9304      	str	r3, [sp, #16]
 800984e:	1993      	adds	r3, r2, r6
 8009850:	9307      	str	r3, [sp, #28]
 8009852:	2304      	movs	r3, #4
 8009854:	9305      	str	r3, [sp, #20]
 8009856:	002b      	movs	r3, r5
 8009858:	9904      	ldr	r1, [sp, #16]
 800985a:	3315      	adds	r3, #21
 800985c:	9200      	str	r2, [sp, #0]
 800985e:	4299      	cmp	r1, r3
 8009860:	d305      	bcc.n	800986e <__multiply+0x8a>
 8009862:	1b4b      	subs	r3, r1, r5
 8009864:	3b15      	subs	r3, #21
 8009866:	089b      	lsrs	r3, r3, #2
 8009868:	3301      	adds	r3, #1
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	9305      	str	r3, [sp, #20]
 800986e:	9b07      	ldr	r3, [sp, #28]
 8009870:	9a00      	ldr	r2, [sp, #0]
 8009872:	429a      	cmp	r2, r3
 8009874:	d311      	bcc.n	800989a <__multiply+0xb6>
 8009876:	9b02      	ldr	r3, [sp, #8]
 8009878:	2b00      	cmp	r3, #0
 800987a:	dd06      	ble.n	800988a <__multiply+0xa6>
 800987c:	9b03      	ldr	r3, [sp, #12]
 800987e:	3b04      	subs	r3, #4
 8009880:	9303      	str	r3, [sp, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	9300      	str	r3, [sp, #0]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d053      	beq.n	8009932 <__multiply+0x14e>
 800988a:	9b01      	ldr	r3, [sp, #4]
 800988c:	9a02      	ldr	r2, [sp, #8]
 800988e:	0018      	movs	r0, r3
 8009890:	611a      	str	r2, [r3, #16]
 8009892:	b009      	add	sp, #36	; 0x24
 8009894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009896:	c304      	stmia	r3!, {r2}
 8009898:	e7cd      	b.n	8009836 <__multiply+0x52>
 800989a:	9b00      	ldr	r3, [sp, #0]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	b298      	uxth	r0, r3
 80098a0:	2800      	cmp	r0, #0
 80098a2:	d01b      	beq.n	80098dc <__multiply+0xf8>
 80098a4:	4667      	mov	r7, ip
 80098a6:	2400      	movs	r4, #0
 80098a8:	9e06      	ldr	r6, [sp, #24]
 80098aa:	ce02      	ldmia	r6!, {r1}
 80098ac:	683a      	ldr	r2, [r7, #0]
 80098ae:	b28b      	uxth	r3, r1
 80098b0:	4343      	muls	r3, r0
 80098b2:	b292      	uxth	r2, r2
 80098b4:	189b      	adds	r3, r3, r2
 80098b6:	191b      	adds	r3, r3, r4
 80098b8:	0c0c      	lsrs	r4, r1, #16
 80098ba:	4344      	muls	r4, r0
 80098bc:	683a      	ldr	r2, [r7, #0]
 80098be:	0c11      	lsrs	r1, r2, #16
 80098c0:	1861      	adds	r1, r4, r1
 80098c2:	0c1c      	lsrs	r4, r3, #16
 80098c4:	1909      	adds	r1, r1, r4
 80098c6:	0c0c      	lsrs	r4, r1, #16
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	0409      	lsls	r1, r1, #16
 80098cc:	430b      	orrs	r3, r1
 80098ce:	c708      	stmia	r7!, {r3}
 80098d0:	9b04      	ldr	r3, [sp, #16]
 80098d2:	42b3      	cmp	r3, r6
 80098d4:	d8e9      	bhi.n	80098aa <__multiply+0xc6>
 80098d6:	4663      	mov	r3, ip
 80098d8:	9a05      	ldr	r2, [sp, #20]
 80098da:	509c      	str	r4, [r3, r2]
 80098dc:	9b00      	ldr	r3, [sp, #0]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	0c1e      	lsrs	r6, r3, #16
 80098e2:	d020      	beq.n	8009926 <__multiply+0x142>
 80098e4:	4663      	mov	r3, ip
 80098e6:	002c      	movs	r4, r5
 80098e8:	4660      	mov	r0, ip
 80098ea:	2700      	movs	r7, #0
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	3414      	adds	r4, #20
 80098f0:	6822      	ldr	r2, [r4, #0]
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	b291      	uxth	r1, r2
 80098f6:	4371      	muls	r1, r6
 80098f8:	6802      	ldr	r2, [r0, #0]
 80098fa:	0c12      	lsrs	r2, r2, #16
 80098fc:	1889      	adds	r1, r1, r2
 80098fe:	19cf      	adds	r7, r1, r7
 8009900:	0439      	lsls	r1, r7, #16
 8009902:	430b      	orrs	r3, r1
 8009904:	6003      	str	r3, [r0, #0]
 8009906:	cc02      	ldmia	r4!, {r1}
 8009908:	6843      	ldr	r3, [r0, #4]
 800990a:	0c09      	lsrs	r1, r1, #16
 800990c:	4371      	muls	r1, r6
 800990e:	b29b      	uxth	r3, r3
 8009910:	0c3f      	lsrs	r7, r7, #16
 8009912:	18cb      	adds	r3, r1, r3
 8009914:	9a04      	ldr	r2, [sp, #16]
 8009916:	19db      	adds	r3, r3, r7
 8009918:	0c1f      	lsrs	r7, r3, #16
 800991a:	3004      	adds	r0, #4
 800991c:	42a2      	cmp	r2, r4
 800991e:	d8e7      	bhi.n	80098f0 <__multiply+0x10c>
 8009920:	4662      	mov	r2, ip
 8009922:	9905      	ldr	r1, [sp, #20]
 8009924:	5053      	str	r3, [r2, r1]
 8009926:	9b00      	ldr	r3, [sp, #0]
 8009928:	3304      	adds	r3, #4
 800992a:	9300      	str	r3, [sp, #0]
 800992c:	2304      	movs	r3, #4
 800992e:	449c      	add	ip, r3
 8009930:	e79d      	b.n	800986e <__multiply+0x8a>
 8009932:	9b02      	ldr	r3, [sp, #8]
 8009934:	3b01      	subs	r3, #1
 8009936:	9302      	str	r3, [sp, #8]
 8009938:	e79d      	b.n	8009876 <__multiply+0x92>
 800993a:	46c0      	nop			; (mov r8, r8)
 800993c:	0800adc8 	.word	0x0800adc8
 8009940:	0800ae54 	.word	0x0800ae54

08009944 <__pow5mult>:
 8009944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009946:	2303      	movs	r3, #3
 8009948:	0015      	movs	r5, r2
 800994a:	0007      	movs	r7, r0
 800994c:	000e      	movs	r6, r1
 800994e:	401a      	ands	r2, r3
 8009950:	421d      	tst	r5, r3
 8009952:	d008      	beq.n	8009966 <__pow5mult+0x22>
 8009954:	4925      	ldr	r1, [pc, #148]	; (80099ec <__pow5mult+0xa8>)
 8009956:	3a01      	subs	r2, #1
 8009958:	0092      	lsls	r2, r2, #2
 800995a:	5852      	ldr	r2, [r2, r1]
 800995c:	2300      	movs	r3, #0
 800995e:	0031      	movs	r1, r6
 8009960:	f7ff fe52 	bl	8009608 <__multadd>
 8009964:	0006      	movs	r6, r0
 8009966:	10ad      	asrs	r5, r5, #2
 8009968:	d03d      	beq.n	80099e6 <__pow5mult+0xa2>
 800996a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800996c:	2c00      	cmp	r4, #0
 800996e:	d10f      	bne.n	8009990 <__pow5mult+0x4c>
 8009970:	2010      	movs	r0, #16
 8009972:	f7ff fda9 	bl	80094c8 <malloc>
 8009976:	1e02      	subs	r2, r0, #0
 8009978:	6278      	str	r0, [r7, #36]	; 0x24
 800997a:	d105      	bne.n	8009988 <__pow5mult+0x44>
 800997c:	21d7      	movs	r1, #215	; 0xd7
 800997e:	4b1c      	ldr	r3, [pc, #112]	; (80099f0 <__pow5mult+0xac>)
 8009980:	481c      	ldr	r0, [pc, #112]	; (80099f4 <__pow5mult+0xb0>)
 8009982:	0049      	lsls	r1, r1, #1
 8009984:	f000 fcb4 	bl	800a2f0 <__assert_func>
 8009988:	6044      	str	r4, [r0, #4]
 800998a:	6084      	str	r4, [r0, #8]
 800998c:	6004      	str	r4, [r0, #0]
 800998e:	60c4      	str	r4, [r0, #12]
 8009990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009992:	689c      	ldr	r4, [r3, #8]
 8009994:	9301      	str	r3, [sp, #4]
 8009996:	2c00      	cmp	r4, #0
 8009998:	d108      	bne.n	80099ac <__pow5mult+0x68>
 800999a:	0038      	movs	r0, r7
 800999c:	4916      	ldr	r1, [pc, #88]	; (80099f8 <__pow5mult+0xb4>)
 800999e:	f7ff ff0b 	bl	80097b8 <__i2b>
 80099a2:	9b01      	ldr	r3, [sp, #4]
 80099a4:	0004      	movs	r4, r0
 80099a6:	6098      	str	r0, [r3, #8]
 80099a8:	2300      	movs	r3, #0
 80099aa:	6003      	str	r3, [r0, #0]
 80099ac:	2301      	movs	r3, #1
 80099ae:	421d      	tst	r5, r3
 80099b0:	d00a      	beq.n	80099c8 <__pow5mult+0x84>
 80099b2:	0031      	movs	r1, r6
 80099b4:	0022      	movs	r2, r4
 80099b6:	0038      	movs	r0, r7
 80099b8:	f7ff ff14 	bl	80097e4 <__multiply>
 80099bc:	0031      	movs	r1, r6
 80099be:	9001      	str	r0, [sp, #4]
 80099c0:	0038      	movs	r0, r7
 80099c2:	f7ff fdfd 	bl	80095c0 <_Bfree>
 80099c6:	9e01      	ldr	r6, [sp, #4]
 80099c8:	106d      	asrs	r5, r5, #1
 80099ca:	d00c      	beq.n	80099e6 <__pow5mult+0xa2>
 80099cc:	6820      	ldr	r0, [r4, #0]
 80099ce:	2800      	cmp	r0, #0
 80099d0:	d107      	bne.n	80099e2 <__pow5mult+0x9e>
 80099d2:	0022      	movs	r2, r4
 80099d4:	0021      	movs	r1, r4
 80099d6:	0038      	movs	r0, r7
 80099d8:	f7ff ff04 	bl	80097e4 <__multiply>
 80099dc:	2300      	movs	r3, #0
 80099de:	6020      	str	r0, [r4, #0]
 80099e0:	6003      	str	r3, [r0, #0]
 80099e2:	0004      	movs	r4, r0
 80099e4:	e7e2      	b.n	80099ac <__pow5mult+0x68>
 80099e6:	0030      	movs	r0, r6
 80099e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80099ea:	46c0      	nop			; (mov r8, r8)
 80099ec:	0800afa0 	.word	0x0800afa0
 80099f0:	0800ad56 	.word	0x0800ad56
 80099f4:	0800ae54 	.word	0x0800ae54
 80099f8:	00000271 	.word	0x00000271

080099fc <__lshift>:
 80099fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099fe:	000c      	movs	r4, r1
 8009a00:	0017      	movs	r7, r2
 8009a02:	6923      	ldr	r3, [r4, #16]
 8009a04:	1155      	asrs	r5, r2, #5
 8009a06:	b087      	sub	sp, #28
 8009a08:	18eb      	adds	r3, r5, r3
 8009a0a:	9302      	str	r3, [sp, #8]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	9301      	str	r3, [sp, #4]
 8009a10:	6849      	ldr	r1, [r1, #4]
 8009a12:	68a3      	ldr	r3, [r4, #8]
 8009a14:	9004      	str	r0, [sp, #16]
 8009a16:	9a01      	ldr	r2, [sp, #4]
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	db10      	blt.n	8009a3e <__lshift+0x42>
 8009a1c:	9804      	ldr	r0, [sp, #16]
 8009a1e:	f7ff fd8b 	bl	8009538 <_Balloc>
 8009a22:	2300      	movs	r3, #0
 8009a24:	0002      	movs	r2, r0
 8009a26:	0006      	movs	r6, r0
 8009a28:	0019      	movs	r1, r3
 8009a2a:	3214      	adds	r2, #20
 8009a2c:	4298      	cmp	r0, r3
 8009a2e:	d10c      	bne.n	8009a4a <__lshift+0x4e>
 8009a30:	21da      	movs	r1, #218	; 0xda
 8009a32:	0002      	movs	r2, r0
 8009a34:	4b26      	ldr	r3, [pc, #152]	; (8009ad0 <__lshift+0xd4>)
 8009a36:	4827      	ldr	r0, [pc, #156]	; (8009ad4 <__lshift+0xd8>)
 8009a38:	31ff      	adds	r1, #255	; 0xff
 8009a3a:	f000 fc59 	bl	800a2f0 <__assert_func>
 8009a3e:	3101      	adds	r1, #1
 8009a40:	005b      	lsls	r3, r3, #1
 8009a42:	e7e8      	b.n	8009a16 <__lshift+0x1a>
 8009a44:	0098      	lsls	r0, r3, #2
 8009a46:	5011      	str	r1, [r2, r0]
 8009a48:	3301      	adds	r3, #1
 8009a4a:	42ab      	cmp	r3, r5
 8009a4c:	dbfa      	blt.n	8009a44 <__lshift+0x48>
 8009a4e:	43eb      	mvns	r3, r5
 8009a50:	17db      	asrs	r3, r3, #31
 8009a52:	401d      	ands	r5, r3
 8009a54:	211f      	movs	r1, #31
 8009a56:	0023      	movs	r3, r4
 8009a58:	0038      	movs	r0, r7
 8009a5a:	00ad      	lsls	r5, r5, #2
 8009a5c:	1955      	adds	r5, r2, r5
 8009a5e:	6922      	ldr	r2, [r4, #16]
 8009a60:	3314      	adds	r3, #20
 8009a62:	0092      	lsls	r2, r2, #2
 8009a64:	4008      	ands	r0, r1
 8009a66:	4684      	mov	ip, r0
 8009a68:	189a      	adds	r2, r3, r2
 8009a6a:	420f      	tst	r7, r1
 8009a6c:	d02a      	beq.n	8009ac4 <__lshift+0xc8>
 8009a6e:	3101      	adds	r1, #1
 8009a70:	1a09      	subs	r1, r1, r0
 8009a72:	9105      	str	r1, [sp, #20]
 8009a74:	2100      	movs	r1, #0
 8009a76:	9503      	str	r5, [sp, #12]
 8009a78:	4667      	mov	r7, ip
 8009a7a:	6818      	ldr	r0, [r3, #0]
 8009a7c:	40b8      	lsls	r0, r7
 8009a7e:	4301      	orrs	r1, r0
 8009a80:	9803      	ldr	r0, [sp, #12]
 8009a82:	c002      	stmia	r0!, {r1}
 8009a84:	cb02      	ldmia	r3!, {r1}
 8009a86:	9003      	str	r0, [sp, #12]
 8009a88:	9805      	ldr	r0, [sp, #20]
 8009a8a:	40c1      	lsrs	r1, r0
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d8f3      	bhi.n	8009a78 <__lshift+0x7c>
 8009a90:	0020      	movs	r0, r4
 8009a92:	3015      	adds	r0, #21
 8009a94:	2304      	movs	r3, #4
 8009a96:	4282      	cmp	r2, r0
 8009a98:	d304      	bcc.n	8009aa4 <__lshift+0xa8>
 8009a9a:	1b13      	subs	r3, r2, r4
 8009a9c:	3b15      	subs	r3, #21
 8009a9e:	089b      	lsrs	r3, r3, #2
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	009b      	lsls	r3, r3, #2
 8009aa4:	50e9      	str	r1, [r5, r3]
 8009aa6:	2900      	cmp	r1, #0
 8009aa8:	d002      	beq.n	8009ab0 <__lshift+0xb4>
 8009aaa:	9b02      	ldr	r3, [sp, #8]
 8009aac:	3302      	adds	r3, #2
 8009aae:	9301      	str	r3, [sp, #4]
 8009ab0:	9b01      	ldr	r3, [sp, #4]
 8009ab2:	9804      	ldr	r0, [sp, #16]
 8009ab4:	3b01      	subs	r3, #1
 8009ab6:	0021      	movs	r1, r4
 8009ab8:	6133      	str	r3, [r6, #16]
 8009aba:	f7ff fd81 	bl	80095c0 <_Bfree>
 8009abe:	0030      	movs	r0, r6
 8009ac0:	b007      	add	sp, #28
 8009ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ac4:	cb02      	ldmia	r3!, {r1}
 8009ac6:	c502      	stmia	r5!, {r1}
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d8fb      	bhi.n	8009ac4 <__lshift+0xc8>
 8009acc:	e7f0      	b.n	8009ab0 <__lshift+0xb4>
 8009ace:	46c0      	nop			; (mov r8, r8)
 8009ad0:	0800adc8 	.word	0x0800adc8
 8009ad4:	0800ae54 	.word	0x0800ae54

08009ad8 <__mcmp>:
 8009ad8:	6902      	ldr	r2, [r0, #16]
 8009ada:	690b      	ldr	r3, [r1, #16]
 8009adc:	b530      	push	{r4, r5, lr}
 8009ade:	0004      	movs	r4, r0
 8009ae0:	1ad0      	subs	r0, r2, r3
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d10d      	bne.n	8009b02 <__mcmp+0x2a>
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	3414      	adds	r4, #20
 8009aea:	3114      	adds	r1, #20
 8009aec:	18e2      	adds	r2, r4, r3
 8009aee:	18c9      	adds	r1, r1, r3
 8009af0:	3a04      	subs	r2, #4
 8009af2:	3904      	subs	r1, #4
 8009af4:	6815      	ldr	r5, [r2, #0]
 8009af6:	680b      	ldr	r3, [r1, #0]
 8009af8:	429d      	cmp	r5, r3
 8009afa:	d003      	beq.n	8009b04 <__mcmp+0x2c>
 8009afc:	2001      	movs	r0, #1
 8009afe:	429d      	cmp	r5, r3
 8009b00:	d303      	bcc.n	8009b0a <__mcmp+0x32>
 8009b02:	bd30      	pop	{r4, r5, pc}
 8009b04:	4294      	cmp	r4, r2
 8009b06:	d3f3      	bcc.n	8009af0 <__mcmp+0x18>
 8009b08:	e7fb      	b.n	8009b02 <__mcmp+0x2a>
 8009b0a:	4240      	negs	r0, r0
 8009b0c:	e7f9      	b.n	8009b02 <__mcmp+0x2a>
	...

08009b10 <__mdiff>:
 8009b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b12:	000e      	movs	r6, r1
 8009b14:	0007      	movs	r7, r0
 8009b16:	0011      	movs	r1, r2
 8009b18:	0030      	movs	r0, r6
 8009b1a:	b087      	sub	sp, #28
 8009b1c:	0014      	movs	r4, r2
 8009b1e:	f7ff ffdb 	bl	8009ad8 <__mcmp>
 8009b22:	1e05      	subs	r5, r0, #0
 8009b24:	d110      	bne.n	8009b48 <__mdiff+0x38>
 8009b26:	0001      	movs	r1, r0
 8009b28:	0038      	movs	r0, r7
 8009b2a:	f7ff fd05 	bl	8009538 <_Balloc>
 8009b2e:	1e02      	subs	r2, r0, #0
 8009b30:	d104      	bne.n	8009b3c <__mdiff+0x2c>
 8009b32:	4b40      	ldr	r3, [pc, #256]	; (8009c34 <__mdiff+0x124>)
 8009b34:	4940      	ldr	r1, [pc, #256]	; (8009c38 <__mdiff+0x128>)
 8009b36:	4841      	ldr	r0, [pc, #260]	; (8009c3c <__mdiff+0x12c>)
 8009b38:	f000 fbda 	bl	800a2f0 <__assert_func>
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	6145      	str	r5, [r0, #20]
 8009b40:	6103      	str	r3, [r0, #16]
 8009b42:	0010      	movs	r0, r2
 8009b44:	b007      	add	sp, #28
 8009b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b48:	2301      	movs	r3, #1
 8009b4a:	9301      	str	r3, [sp, #4]
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	db04      	blt.n	8009b5a <__mdiff+0x4a>
 8009b50:	0023      	movs	r3, r4
 8009b52:	0034      	movs	r4, r6
 8009b54:	001e      	movs	r6, r3
 8009b56:	2300      	movs	r3, #0
 8009b58:	9301      	str	r3, [sp, #4]
 8009b5a:	0038      	movs	r0, r7
 8009b5c:	6861      	ldr	r1, [r4, #4]
 8009b5e:	f7ff fceb 	bl	8009538 <_Balloc>
 8009b62:	1e02      	subs	r2, r0, #0
 8009b64:	d103      	bne.n	8009b6e <__mdiff+0x5e>
 8009b66:	2190      	movs	r1, #144	; 0x90
 8009b68:	4b32      	ldr	r3, [pc, #200]	; (8009c34 <__mdiff+0x124>)
 8009b6a:	0089      	lsls	r1, r1, #2
 8009b6c:	e7e3      	b.n	8009b36 <__mdiff+0x26>
 8009b6e:	9b01      	ldr	r3, [sp, #4]
 8009b70:	2700      	movs	r7, #0
 8009b72:	60c3      	str	r3, [r0, #12]
 8009b74:	6920      	ldr	r0, [r4, #16]
 8009b76:	3414      	adds	r4, #20
 8009b78:	9401      	str	r4, [sp, #4]
 8009b7a:	9b01      	ldr	r3, [sp, #4]
 8009b7c:	0084      	lsls	r4, r0, #2
 8009b7e:	191b      	adds	r3, r3, r4
 8009b80:	0034      	movs	r4, r6
 8009b82:	9302      	str	r3, [sp, #8]
 8009b84:	6933      	ldr	r3, [r6, #16]
 8009b86:	3414      	adds	r4, #20
 8009b88:	0099      	lsls	r1, r3, #2
 8009b8a:	1863      	adds	r3, r4, r1
 8009b8c:	9303      	str	r3, [sp, #12]
 8009b8e:	0013      	movs	r3, r2
 8009b90:	3314      	adds	r3, #20
 8009b92:	469c      	mov	ip, r3
 8009b94:	9305      	str	r3, [sp, #20]
 8009b96:	9b01      	ldr	r3, [sp, #4]
 8009b98:	9304      	str	r3, [sp, #16]
 8009b9a:	9b04      	ldr	r3, [sp, #16]
 8009b9c:	cc02      	ldmia	r4!, {r1}
 8009b9e:	cb20      	ldmia	r3!, {r5}
 8009ba0:	9304      	str	r3, [sp, #16]
 8009ba2:	b2ab      	uxth	r3, r5
 8009ba4:	19df      	adds	r7, r3, r7
 8009ba6:	b28b      	uxth	r3, r1
 8009ba8:	1afb      	subs	r3, r7, r3
 8009baa:	0c09      	lsrs	r1, r1, #16
 8009bac:	0c2d      	lsrs	r5, r5, #16
 8009bae:	1a6d      	subs	r5, r5, r1
 8009bb0:	1419      	asrs	r1, r3, #16
 8009bb2:	186d      	adds	r5, r5, r1
 8009bb4:	4661      	mov	r1, ip
 8009bb6:	142f      	asrs	r7, r5, #16
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	042d      	lsls	r5, r5, #16
 8009bbc:	432b      	orrs	r3, r5
 8009bbe:	c108      	stmia	r1!, {r3}
 8009bc0:	9b03      	ldr	r3, [sp, #12]
 8009bc2:	468c      	mov	ip, r1
 8009bc4:	42a3      	cmp	r3, r4
 8009bc6:	d8e8      	bhi.n	8009b9a <__mdiff+0x8a>
 8009bc8:	0031      	movs	r1, r6
 8009bca:	9c03      	ldr	r4, [sp, #12]
 8009bcc:	3115      	adds	r1, #21
 8009bce:	2304      	movs	r3, #4
 8009bd0:	428c      	cmp	r4, r1
 8009bd2:	d304      	bcc.n	8009bde <__mdiff+0xce>
 8009bd4:	1ba3      	subs	r3, r4, r6
 8009bd6:	3b15      	subs	r3, #21
 8009bd8:	089b      	lsrs	r3, r3, #2
 8009bda:	3301      	adds	r3, #1
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	9901      	ldr	r1, [sp, #4]
 8009be0:	18cc      	adds	r4, r1, r3
 8009be2:	9905      	ldr	r1, [sp, #20]
 8009be4:	0026      	movs	r6, r4
 8009be6:	18cb      	adds	r3, r1, r3
 8009be8:	469c      	mov	ip, r3
 8009bea:	9902      	ldr	r1, [sp, #8]
 8009bec:	428e      	cmp	r6, r1
 8009bee:	d310      	bcc.n	8009c12 <__mdiff+0x102>
 8009bf0:	9e02      	ldr	r6, [sp, #8]
 8009bf2:	1ee1      	subs	r1, r4, #3
 8009bf4:	2500      	movs	r5, #0
 8009bf6:	428e      	cmp	r6, r1
 8009bf8:	d304      	bcc.n	8009c04 <__mdiff+0xf4>
 8009bfa:	0031      	movs	r1, r6
 8009bfc:	3103      	adds	r1, #3
 8009bfe:	1b0c      	subs	r4, r1, r4
 8009c00:	08a4      	lsrs	r4, r4, #2
 8009c02:	00a5      	lsls	r5, r4, #2
 8009c04:	195b      	adds	r3, r3, r5
 8009c06:	3b04      	subs	r3, #4
 8009c08:	6819      	ldr	r1, [r3, #0]
 8009c0a:	2900      	cmp	r1, #0
 8009c0c:	d00f      	beq.n	8009c2e <__mdiff+0x11e>
 8009c0e:	6110      	str	r0, [r2, #16]
 8009c10:	e797      	b.n	8009b42 <__mdiff+0x32>
 8009c12:	ce02      	ldmia	r6!, {r1}
 8009c14:	b28d      	uxth	r5, r1
 8009c16:	19ed      	adds	r5, r5, r7
 8009c18:	0c0f      	lsrs	r7, r1, #16
 8009c1a:	1429      	asrs	r1, r5, #16
 8009c1c:	1879      	adds	r1, r7, r1
 8009c1e:	140f      	asrs	r7, r1, #16
 8009c20:	b2ad      	uxth	r5, r5
 8009c22:	0409      	lsls	r1, r1, #16
 8009c24:	430d      	orrs	r5, r1
 8009c26:	4661      	mov	r1, ip
 8009c28:	c120      	stmia	r1!, {r5}
 8009c2a:	468c      	mov	ip, r1
 8009c2c:	e7dd      	b.n	8009bea <__mdiff+0xda>
 8009c2e:	3801      	subs	r0, #1
 8009c30:	e7e9      	b.n	8009c06 <__mdiff+0xf6>
 8009c32:	46c0      	nop			; (mov r8, r8)
 8009c34:	0800adc8 	.word	0x0800adc8
 8009c38:	00000232 	.word	0x00000232
 8009c3c:	0800ae54 	.word	0x0800ae54

08009c40 <__ulp>:
 8009c40:	4b0f      	ldr	r3, [pc, #60]	; (8009c80 <__ulp+0x40>)
 8009c42:	4019      	ands	r1, r3
 8009c44:	4b0f      	ldr	r3, [pc, #60]	; (8009c84 <__ulp+0x44>)
 8009c46:	18c9      	adds	r1, r1, r3
 8009c48:	2900      	cmp	r1, #0
 8009c4a:	dd04      	ble.n	8009c56 <__ulp+0x16>
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	000b      	movs	r3, r1
 8009c50:	0010      	movs	r0, r2
 8009c52:	0019      	movs	r1, r3
 8009c54:	4770      	bx	lr
 8009c56:	4249      	negs	r1, r1
 8009c58:	2200      	movs	r2, #0
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	1509      	asrs	r1, r1, #20
 8009c5e:	2913      	cmp	r1, #19
 8009c60:	dc04      	bgt.n	8009c6c <__ulp+0x2c>
 8009c62:	2080      	movs	r0, #128	; 0x80
 8009c64:	0300      	lsls	r0, r0, #12
 8009c66:	4108      	asrs	r0, r1
 8009c68:	0003      	movs	r3, r0
 8009c6a:	e7f1      	b.n	8009c50 <__ulp+0x10>
 8009c6c:	3914      	subs	r1, #20
 8009c6e:	2001      	movs	r0, #1
 8009c70:	291e      	cmp	r1, #30
 8009c72:	dc02      	bgt.n	8009c7a <__ulp+0x3a>
 8009c74:	2080      	movs	r0, #128	; 0x80
 8009c76:	0600      	lsls	r0, r0, #24
 8009c78:	40c8      	lsrs	r0, r1
 8009c7a:	0002      	movs	r2, r0
 8009c7c:	e7e8      	b.n	8009c50 <__ulp+0x10>
 8009c7e:	46c0      	nop			; (mov r8, r8)
 8009c80:	7ff00000 	.word	0x7ff00000
 8009c84:	fcc00000 	.word	0xfcc00000

08009c88 <__b2d>:
 8009c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c8a:	0006      	movs	r6, r0
 8009c8c:	6903      	ldr	r3, [r0, #16]
 8009c8e:	3614      	adds	r6, #20
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	18f3      	adds	r3, r6, r3
 8009c94:	1f1d      	subs	r5, r3, #4
 8009c96:	682c      	ldr	r4, [r5, #0]
 8009c98:	000f      	movs	r7, r1
 8009c9a:	0020      	movs	r0, r4
 8009c9c:	9301      	str	r3, [sp, #4]
 8009c9e:	f7ff fd43 	bl	8009728 <__hi0bits>
 8009ca2:	2320      	movs	r3, #32
 8009ca4:	1a1b      	subs	r3, r3, r0
 8009ca6:	491f      	ldr	r1, [pc, #124]	; (8009d24 <__b2d+0x9c>)
 8009ca8:	603b      	str	r3, [r7, #0]
 8009caa:	280a      	cmp	r0, #10
 8009cac:	dc16      	bgt.n	8009cdc <__b2d+0x54>
 8009cae:	230b      	movs	r3, #11
 8009cb0:	0027      	movs	r7, r4
 8009cb2:	1a1b      	subs	r3, r3, r0
 8009cb4:	40df      	lsrs	r7, r3
 8009cb6:	4339      	orrs	r1, r7
 8009cb8:	469c      	mov	ip, r3
 8009cba:	000b      	movs	r3, r1
 8009cbc:	2100      	movs	r1, #0
 8009cbe:	42ae      	cmp	r6, r5
 8009cc0:	d202      	bcs.n	8009cc8 <__b2d+0x40>
 8009cc2:	9901      	ldr	r1, [sp, #4]
 8009cc4:	3908      	subs	r1, #8
 8009cc6:	6809      	ldr	r1, [r1, #0]
 8009cc8:	3015      	adds	r0, #21
 8009cca:	4084      	lsls	r4, r0
 8009ccc:	4660      	mov	r0, ip
 8009cce:	40c1      	lsrs	r1, r0
 8009cd0:	430c      	orrs	r4, r1
 8009cd2:	0022      	movs	r2, r4
 8009cd4:	0010      	movs	r0, r2
 8009cd6:	0019      	movs	r1, r3
 8009cd8:	b003      	add	sp, #12
 8009cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cdc:	2700      	movs	r7, #0
 8009cde:	42ae      	cmp	r6, r5
 8009ce0:	d202      	bcs.n	8009ce8 <__b2d+0x60>
 8009ce2:	9d01      	ldr	r5, [sp, #4]
 8009ce4:	3d08      	subs	r5, #8
 8009ce6:	682f      	ldr	r7, [r5, #0]
 8009ce8:	230b      	movs	r3, #11
 8009cea:	425b      	negs	r3, r3
 8009cec:	469c      	mov	ip, r3
 8009cee:	4484      	add	ip, r0
 8009cf0:	280b      	cmp	r0, #11
 8009cf2:	d013      	beq.n	8009d1c <__b2d+0x94>
 8009cf4:	4663      	mov	r3, ip
 8009cf6:	2020      	movs	r0, #32
 8009cf8:	409c      	lsls	r4, r3
 8009cfa:	1ac0      	subs	r0, r0, r3
 8009cfc:	003b      	movs	r3, r7
 8009cfe:	40c3      	lsrs	r3, r0
 8009d00:	431c      	orrs	r4, r3
 8009d02:	4321      	orrs	r1, r4
 8009d04:	000b      	movs	r3, r1
 8009d06:	2100      	movs	r1, #0
 8009d08:	42b5      	cmp	r5, r6
 8009d0a:	d901      	bls.n	8009d10 <__b2d+0x88>
 8009d0c:	3d04      	subs	r5, #4
 8009d0e:	6829      	ldr	r1, [r5, #0]
 8009d10:	4664      	mov	r4, ip
 8009d12:	40c1      	lsrs	r1, r0
 8009d14:	40a7      	lsls	r7, r4
 8009d16:	430f      	orrs	r7, r1
 8009d18:	003a      	movs	r2, r7
 8009d1a:	e7db      	b.n	8009cd4 <__b2d+0x4c>
 8009d1c:	4321      	orrs	r1, r4
 8009d1e:	000b      	movs	r3, r1
 8009d20:	e7fa      	b.n	8009d18 <__b2d+0x90>
 8009d22:	46c0      	nop			; (mov r8, r8)
 8009d24:	3ff00000 	.word	0x3ff00000

08009d28 <__d2b>:
 8009d28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d2a:	2101      	movs	r1, #1
 8009d2c:	0014      	movs	r4, r2
 8009d2e:	001e      	movs	r6, r3
 8009d30:	9f08      	ldr	r7, [sp, #32]
 8009d32:	f7ff fc01 	bl	8009538 <_Balloc>
 8009d36:	1e05      	subs	r5, r0, #0
 8009d38:	d105      	bne.n	8009d46 <__d2b+0x1e>
 8009d3a:	0002      	movs	r2, r0
 8009d3c:	4b26      	ldr	r3, [pc, #152]	; (8009dd8 <__d2b+0xb0>)
 8009d3e:	4927      	ldr	r1, [pc, #156]	; (8009ddc <__d2b+0xb4>)
 8009d40:	4827      	ldr	r0, [pc, #156]	; (8009de0 <__d2b+0xb8>)
 8009d42:	f000 fad5 	bl	800a2f0 <__assert_func>
 8009d46:	0333      	lsls	r3, r6, #12
 8009d48:	0076      	lsls	r6, r6, #1
 8009d4a:	0b1b      	lsrs	r3, r3, #12
 8009d4c:	0d76      	lsrs	r6, r6, #21
 8009d4e:	d124      	bne.n	8009d9a <__d2b+0x72>
 8009d50:	9301      	str	r3, [sp, #4]
 8009d52:	2c00      	cmp	r4, #0
 8009d54:	d027      	beq.n	8009da6 <__d2b+0x7e>
 8009d56:	4668      	mov	r0, sp
 8009d58:	9400      	str	r4, [sp, #0]
 8009d5a:	f7ff fcff 	bl	800975c <__lo0bits>
 8009d5e:	9c00      	ldr	r4, [sp, #0]
 8009d60:	2800      	cmp	r0, #0
 8009d62:	d01e      	beq.n	8009da2 <__d2b+0x7a>
 8009d64:	9b01      	ldr	r3, [sp, #4]
 8009d66:	2120      	movs	r1, #32
 8009d68:	001a      	movs	r2, r3
 8009d6a:	1a09      	subs	r1, r1, r0
 8009d6c:	408a      	lsls	r2, r1
 8009d6e:	40c3      	lsrs	r3, r0
 8009d70:	4322      	orrs	r2, r4
 8009d72:	616a      	str	r2, [r5, #20]
 8009d74:	9301      	str	r3, [sp, #4]
 8009d76:	9c01      	ldr	r4, [sp, #4]
 8009d78:	61ac      	str	r4, [r5, #24]
 8009d7a:	1e63      	subs	r3, r4, #1
 8009d7c:	419c      	sbcs	r4, r3
 8009d7e:	3401      	adds	r4, #1
 8009d80:	612c      	str	r4, [r5, #16]
 8009d82:	2e00      	cmp	r6, #0
 8009d84:	d018      	beq.n	8009db8 <__d2b+0x90>
 8009d86:	4b17      	ldr	r3, [pc, #92]	; (8009de4 <__d2b+0xbc>)
 8009d88:	18f6      	adds	r6, r6, r3
 8009d8a:	2335      	movs	r3, #53	; 0x35
 8009d8c:	1836      	adds	r6, r6, r0
 8009d8e:	1a18      	subs	r0, r3, r0
 8009d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d92:	603e      	str	r6, [r7, #0]
 8009d94:	6018      	str	r0, [r3, #0]
 8009d96:	0028      	movs	r0, r5
 8009d98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009d9a:	2280      	movs	r2, #128	; 0x80
 8009d9c:	0352      	lsls	r2, r2, #13
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	e7d6      	b.n	8009d50 <__d2b+0x28>
 8009da2:	616c      	str	r4, [r5, #20]
 8009da4:	e7e7      	b.n	8009d76 <__d2b+0x4e>
 8009da6:	a801      	add	r0, sp, #4
 8009da8:	f7ff fcd8 	bl	800975c <__lo0bits>
 8009dac:	2401      	movs	r4, #1
 8009dae:	9b01      	ldr	r3, [sp, #4]
 8009db0:	612c      	str	r4, [r5, #16]
 8009db2:	616b      	str	r3, [r5, #20]
 8009db4:	3020      	adds	r0, #32
 8009db6:	e7e4      	b.n	8009d82 <__d2b+0x5a>
 8009db8:	4b0b      	ldr	r3, [pc, #44]	; (8009de8 <__d2b+0xc0>)
 8009dba:	18c0      	adds	r0, r0, r3
 8009dbc:	4b0b      	ldr	r3, [pc, #44]	; (8009dec <__d2b+0xc4>)
 8009dbe:	6038      	str	r0, [r7, #0]
 8009dc0:	18e3      	adds	r3, r4, r3
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	18eb      	adds	r3, r5, r3
 8009dc6:	6958      	ldr	r0, [r3, #20]
 8009dc8:	f7ff fcae 	bl	8009728 <__hi0bits>
 8009dcc:	0164      	lsls	r4, r4, #5
 8009dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dd0:	1a24      	subs	r4, r4, r0
 8009dd2:	601c      	str	r4, [r3, #0]
 8009dd4:	e7df      	b.n	8009d96 <__d2b+0x6e>
 8009dd6:	46c0      	nop			; (mov r8, r8)
 8009dd8:	0800adc8 	.word	0x0800adc8
 8009ddc:	0000030a 	.word	0x0000030a
 8009de0:	0800ae54 	.word	0x0800ae54
 8009de4:	fffffbcd 	.word	0xfffffbcd
 8009de8:	fffffbce 	.word	0xfffffbce
 8009dec:	3fffffff 	.word	0x3fffffff

08009df0 <__ratio>:
 8009df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009df2:	b087      	sub	sp, #28
 8009df4:	000f      	movs	r7, r1
 8009df6:	a904      	add	r1, sp, #16
 8009df8:	0006      	movs	r6, r0
 8009dfa:	f7ff ff45 	bl	8009c88 <__b2d>
 8009dfe:	9000      	str	r0, [sp, #0]
 8009e00:	9101      	str	r1, [sp, #4]
 8009e02:	9c00      	ldr	r4, [sp, #0]
 8009e04:	9d01      	ldr	r5, [sp, #4]
 8009e06:	0038      	movs	r0, r7
 8009e08:	a905      	add	r1, sp, #20
 8009e0a:	f7ff ff3d 	bl	8009c88 <__b2d>
 8009e0e:	9002      	str	r0, [sp, #8]
 8009e10:	9103      	str	r1, [sp, #12]
 8009e12:	9a02      	ldr	r2, [sp, #8]
 8009e14:	9b03      	ldr	r3, [sp, #12]
 8009e16:	6931      	ldr	r1, [r6, #16]
 8009e18:	6938      	ldr	r0, [r7, #16]
 8009e1a:	9e05      	ldr	r6, [sp, #20]
 8009e1c:	1a08      	subs	r0, r1, r0
 8009e1e:	9904      	ldr	r1, [sp, #16]
 8009e20:	0140      	lsls	r0, r0, #5
 8009e22:	1b89      	subs	r1, r1, r6
 8009e24:	1841      	adds	r1, r0, r1
 8009e26:	0508      	lsls	r0, r1, #20
 8009e28:	2900      	cmp	r1, #0
 8009e2a:	dd07      	ble.n	8009e3c <__ratio+0x4c>
 8009e2c:	9901      	ldr	r1, [sp, #4]
 8009e2e:	1845      	adds	r5, r0, r1
 8009e30:	0020      	movs	r0, r4
 8009e32:	0029      	movs	r1, r5
 8009e34:	f7f6 fee4 	bl	8000c00 <__aeabi_ddiv>
 8009e38:	b007      	add	sp, #28
 8009e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e3c:	9903      	ldr	r1, [sp, #12]
 8009e3e:	1a0b      	subs	r3, r1, r0
 8009e40:	e7f6      	b.n	8009e30 <__ratio+0x40>

08009e42 <__copybits>:
 8009e42:	b570      	push	{r4, r5, r6, lr}
 8009e44:	0014      	movs	r4, r2
 8009e46:	0005      	movs	r5, r0
 8009e48:	3901      	subs	r1, #1
 8009e4a:	6913      	ldr	r3, [r2, #16]
 8009e4c:	1149      	asrs	r1, r1, #5
 8009e4e:	3101      	adds	r1, #1
 8009e50:	0089      	lsls	r1, r1, #2
 8009e52:	3414      	adds	r4, #20
 8009e54:	009b      	lsls	r3, r3, #2
 8009e56:	1841      	adds	r1, r0, r1
 8009e58:	18e3      	adds	r3, r4, r3
 8009e5a:	42a3      	cmp	r3, r4
 8009e5c:	d80d      	bhi.n	8009e7a <__copybits+0x38>
 8009e5e:	0014      	movs	r4, r2
 8009e60:	3411      	adds	r4, #17
 8009e62:	2500      	movs	r5, #0
 8009e64:	429c      	cmp	r4, r3
 8009e66:	d803      	bhi.n	8009e70 <__copybits+0x2e>
 8009e68:	1a9b      	subs	r3, r3, r2
 8009e6a:	3b11      	subs	r3, #17
 8009e6c:	089b      	lsrs	r3, r3, #2
 8009e6e:	009d      	lsls	r5, r3, #2
 8009e70:	2300      	movs	r3, #0
 8009e72:	1940      	adds	r0, r0, r5
 8009e74:	4281      	cmp	r1, r0
 8009e76:	d803      	bhi.n	8009e80 <__copybits+0x3e>
 8009e78:	bd70      	pop	{r4, r5, r6, pc}
 8009e7a:	cc40      	ldmia	r4!, {r6}
 8009e7c:	c540      	stmia	r5!, {r6}
 8009e7e:	e7ec      	b.n	8009e5a <__copybits+0x18>
 8009e80:	c008      	stmia	r0!, {r3}
 8009e82:	e7f7      	b.n	8009e74 <__copybits+0x32>

08009e84 <__any_on>:
 8009e84:	0002      	movs	r2, r0
 8009e86:	6900      	ldr	r0, [r0, #16]
 8009e88:	b510      	push	{r4, lr}
 8009e8a:	3214      	adds	r2, #20
 8009e8c:	114b      	asrs	r3, r1, #5
 8009e8e:	4298      	cmp	r0, r3
 8009e90:	db13      	blt.n	8009eba <__any_on+0x36>
 8009e92:	dd0c      	ble.n	8009eae <__any_on+0x2a>
 8009e94:	241f      	movs	r4, #31
 8009e96:	0008      	movs	r0, r1
 8009e98:	4020      	ands	r0, r4
 8009e9a:	4221      	tst	r1, r4
 8009e9c:	d007      	beq.n	8009eae <__any_on+0x2a>
 8009e9e:	0099      	lsls	r1, r3, #2
 8009ea0:	588c      	ldr	r4, [r1, r2]
 8009ea2:	0021      	movs	r1, r4
 8009ea4:	40c1      	lsrs	r1, r0
 8009ea6:	4081      	lsls	r1, r0
 8009ea8:	2001      	movs	r0, #1
 8009eaa:	428c      	cmp	r4, r1
 8009eac:	d104      	bne.n	8009eb8 <__any_on+0x34>
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	18d3      	adds	r3, r2, r3
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d803      	bhi.n	8009ebe <__any_on+0x3a>
 8009eb6:	2000      	movs	r0, #0
 8009eb8:	bd10      	pop	{r4, pc}
 8009eba:	0003      	movs	r3, r0
 8009ebc:	e7f7      	b.n	8009eae <__any_on+0x2a>
 8009ebe:	3b04      	subs	r3, #4
 8009ec0:	6819      	ldr	r1, [r3, #0]
 8009ec2:	2900      	cmp	r1, #0
 8009ec4:	d0f5      	beq.n	8009eb2 <__any_on+0x2e>
 8009ec6:	2001      	movs	r0, #1
 8009ec8:	e7f6      	b.n	8009eb8 <__any_on+0x34>

08009eca <_calloc_r>:
 8009eca:	b570      	push	{r4, r5, r6, lr}
 8009ecc:	0c13      	lsrs	r3, r2, #16
 8009ece:	0c0d      	lsrs	r5, r1, #16
 8009ed0:	d11e      	bne.n	8009f10 <_calloc_r+0x46>
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d10c      	bne.n	8009ef0 <_calloc_r+0x26>
 8009ed6:	b289      	uxth	r1, r1
 8009ed8:	b294      	uxth	r4, r2
 8009eda:	434c      	muls	r4, r1
 8009edc:	0021      	movs	r1, r4
 8009ede:	f7fc f927 	bl	8006130 <_malloc_r>
 8009ee2:	1e05      	subs	r5, r0, #0
 8009ee4:	d01b      	beq.n	8009f1e <_calloc_r+0x54>
 8009ee6:	0022      	movs	r2, r4
 8009ee8:	2100      	movs	r1, #0
 8009eea:	f7fc f8f7 	bl	80060dc <memset>
 8009eee:	e016      	b.n	8009f1e <_calloc_r+0x54>
 8009ef0:	1c1d      	adds	r5, r3, #0
 8009ef2:	1c0b      	adds	r3, r1, #0
 8009ef4:	b292      	uxth	r2, r2
 8009ef6:	b289      	uxth	r1, r1
 8009ef8:	b29c      	uxth	r4, r3
 8009efa:	4351      	muls	r1, r2
 8009efc:	b2ab      	uxth	r3, r5
 8009efe:	4363      	muls	r3, r4
 8009f00:	0c0c      	lsrs	r4, r1, #16
 8009f02:	191c      	adds	r4, r3, r4
 8009f04:	0c22      	lsrs	r2, r4, #16
 8009f06:	d107      	bne.n	8009f18 <_calloc_r+0x4e>
 8009f08:	0424      	lsls	r4, r4, #16
 8009f0a:	b289      	uxth	r1, r1
 8009f0c:	430c      	orrs	r4, r1
 8009f0e:	e7e5      	b.n	8009edc <_calloc_r+0x12>
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d101      	bne.n	8009f18 <_calloc_r+0x4e>
 8009f14:	1c13      	adds	r3, r2, #0
 8009f16:	e7ed      	b.n	8009ef4 <_calloc_r+0x2a>
 8009f18:	230c      	movs	r3, #12
 8009f1a:	2500      	movs	r5, #0
 8009f1c:	6003      	str	r3, [r0, #0]
 8009f1e:	0028      	movs	r0, r5
 8009f20:	bd70      	pop	{r4, r5, r6, pc}
	...

08009f24 <_free_r>:
 8009f24:	b570      	push	{r4, r5, r6, lr}
 8009f26:	0005      	movs	r5, r0
 8009f28:	2900      	cmp	r1, #0
 8009f2a:	d010      	beq.n	8009f4e <_free_r+0x2a>
 8009f2c:	1f0c      	subs	r4, r1, #4
 8009f2e:	6823      	ldr	r3, [r4, #0]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	da00      	bge.n	8009f36 <_free_r+0x12>
 8009f34:	18e4      	adds	r4, r4, r3
 8009f36:	0028      	movs	r0, r5
 8009f38:	f7ff faee 	bl	8009518 <__malloc_lock>
 8009f3c:	4a1d      	ldr	r2, [pc, #116]	; (8009fb4 <_free_r+0x90>)
 8009f3e:	6813      	ldr	r3, [r2, #0]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d105      	bne.n	8009f50 <_free_r+0x2c>
 8009f44:	6063      	str	r3, [r4, #4]
 8009f46:	6014      	str	r4, [r2, #0]
 8009f48:	0028      	movs	r0, r5
 8009f4a:	f7ff faed 	bl	8009528 <__malloc_unlock>
 8009f4e:	bd70      	pop	{r4, r5, r6, pc}
 8009f50:	42a3      	cmp	r3, r4
 8009f52:	d908      	bls.n	8009f66 <_free_r+0x42>
 8009f54:	6821      	ldr	r1, [r4, #0]
 8009f56:	1860      	adds	r0, r4, r1
 8009f58:	4283      	cmp	r3, r0
 8009f5a:	d1f3      	bne.n	8009f44 <_free_r+0x20>
 8009f5c:	6818      	ldr	r0, [r3, #0]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	1841      	adds	r1, r0, r1
 8009f62:	6021      	str	r1, [r4, #0]
 8009f64:	e7ee      	b.n	8009f44 <_free_r+0x20>
 8009f66:	001a      	movs	r2, r3
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d001      	beq.n	8009f72 <_free_r+0x4e>
 8009f6e:	42a3      	cmp	r3, r4
 8009f70:	d9f9      	bls.n	8009f66 <_free_r+0x42>
 8009f72:	6811      	ldr	r1, [r2, #0]
 8009f74:	1850      	adds	r0, r2, r1
 8009f76:	42a0      	cmp	r0, r4
 8009f78:	d10b      	bne.n	8009f92 <_free_r+0x6e>
 8009f7a:	6820      	ldr	r0, [r4, #0]
 8009f7c:	1809      	adds	r1, r1, r0
 8009f7e:	1850      	adds	r0, r2, r1
 8009f80:	6011      	str	r1, [r2, #0]
 8009f82:	4283      	cmp	r3, r0
 8009f84:	d1e0      	bne.n	8009f48 <_free_r+0x24>
 8009f86:	6818      	ldr	r0, [r3, #0]
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	1841      	adds	r1, r0, r1
 8009f8c:	6011      	str	r1, [r2, #0]
 8009f8e:	6053      	str	r3, [r2, #4]
 8009f90:	e7da      	b.n	8009f48 <_free_r+0x24>
 8009f92:	42a0      	cmp	r0, r4
 8009f94:	d902      	bls.n	8009f9c <_free_r+0x78>
 8009f96:	230c      	movs	r3, #12
 8009f98:	602b      	str	r3, [r5, #0]
 8009f9a:	e7d5      	b.n	8009f48 <_free_r+0x24>
 8009f9c:	6821      	ldr	r1, [r4, #0]
 8009f9e:	1860      	adds	r0, r4, r1
 8009fa0:	4283      	cmp	r3, r0
 8009fa2:	d103      	bne.n	8009fac <_free_r+0x88>
 8009fa4:	6818      	ldr	r0, [r3, #0]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	1841      	adds	r1, r0, r1
 8009faa:	6021      	str	r1, [r4, #0]
 8009fac:	6063      	str	r3, [r4, #4]
 8009fae:	6054      	str	r4, [r2, #4]
 8009fb0:	e7ca      	b.n	8009f48 <_free_r+0x24>
 8009fb2:	46c0      	nop			; (mov r8, r8)
 8009fb4:	200012f8 	.word	0x200012f8

08009fb8 <__ssputs_r>:
 8009fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fba:	688e      	ldr	r6, [r1, #8]
 8009fbc:	b085      	sub	sp, #20
 8009fbe:	0007      	movs	r7, r0
 8009fc0:	000c      	movs	r4, r1
 8009fc2:	9203      	str	r2, [sp, #12]
 8009fc4:	9301      	str	r3, [sp, #4]
 8009fc6:	429e      	cmp	r6, r3
 8009fc8:	d83c      	bhi.n	800a044 <__ssputs_r+0x8c>
 8009fca:	2390      	movs	r3, #144	; 0x90
 8009fcc:	898a      	ldrh	r2, [r1, #12]
 8009fce:	00db      	lsls	r3, r3, #3
 8009fd0:	421a      	tst	r2, r3
 8009fd2:	d034      	beq.n	800a03e <__ssputs_r+0x86>
 8009fd4:	6909      	ldr	r1, [r1, #16]
 8009fd6:	6823      	ldr	r3, [r4, #0]
 8009fd8:	6960      	ldr	r0, [r4, #20]
 8009fda:	1a5b      	subs	r3, r3, r1
 8009fdc:	9302      	str	r3, [sp, #8]
 8009fde:	2303      	movs	r3, #3
 8009fe0:	4343      	muls	r3, r0
 8009fe2:	0fdd      	lsrs	r5, r3, #31
 8009fe4:	18ed      	adds	r5, r5, r3
 8009fe6:	9b01      	ldr	r3, [sp, #4]
 8009fe8:	9802      	ldr	r0, [sp, #8]
 8009fea:	3301      	adds	r3, #1
 8009fec:	181b      	adds	r3, r3, r0
 8009fee:	106d      	asrs	r5, r5, #1
 8009ff0:	42ab      	cmp	r3, r5
 8009ff2:	d900      	bls.n	8009ff6 <__ssputs_r+0x3e>
 8009ff4:	001d      	movs	r5, r3
 8009ff6:	0553      	lsls	r3, r2, #21
 8009ff8:	d532      	bpl.n	800a060 <__ssputs_r+0xa8>
 8009ffa:	0029      	movs	r1, r5
 8009ffc:	0038      	movs	r0, r7
 8009ffe:	f7fc f897 	bl	8006130 <_malloc_r>
 800a002:	1e06      	subs	r6, r0, #0
 800a004:	d109      	bne.n	800a01a <__ssputs_r+0x62>
 800a006:	230c      	movs	r3, #12
 800a008:	603b      	str	r3, [r7, #0]
 800a00a:	2340      	movs	r3, #64	; 0x40
 800a00c:	2001      	movs	r0, #1
 800a00e:	89a2      	ldrh	r2, [r4, #12]
 800a010:	4240      	negs	r0, r0
 800a012:	4313      	orrs	r3, r2
 800a014:	81a3      	strh	r3, [r4, #12]
 800a016:	b005      	add	sp, #20
 800a018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a01a:	9a02      	ldr	r2, [sp, #8]
 800a01c:	6921      	ldr	r1, [r4, #16]
 800a01e:	f7fc f854 	bl	80060ca <memcpy>
 800a022:	89a3      	ldrh	r3, [r4, #12]
 800a024:	4a14      	ldr	r2, [pc, #80]	; (800a078 <__ssputs_r+0xc0>)
 800a026:	401a      	ands	r2, r3
 800a028:	2380      	movs	r3, #128	; 0x80
 800a02a:	4313      	orrs	r3, r2
 800a02c:	81a3      	strh	r3, [r4, #12]
 800a02e:	9b02      	ldr	r3, [sp, #8]
 800a030:	6126      	str	r6, [r4, #16]
 800a032:	18f6      	adds	r6, r6, r3
 800a034:	6026      	str	r6, [r4, #0]
 800a036:	6165      	str	r5, [r4, #20]
 800a038:	9e01      	ldr	r6, [sp, #4]
 800a03a:	1aed      	subs	r5, r5, r3
 800a03c:	60a5      	str	r5, [r4, #8]
 800a03e:	9b01      	ldr	r3, [sp, #4]
 800a040:	429e      	cmp	r6, r3
 800a042:	d900      	bls.n	800a046 <__ssputs_r+0x8e>
 800a044:	9e01      	ldr	r6, [sp, #4]
 800a046:	0032      	movs	r2, r6
 800a048:	9903      	ldr	r1, [sp, #12]
 800a04a:	6820      	ldr	r0, [r4, #0]
 800a04c:	f000 f97e 	bl	800a34c <memmove>
 800a050:	68a3      	ldr	r3, [r4, #8]
 800a052:	2000      	movs	r0, #0
 800a054:	1b9b      	subs	r3, r3, r6
 800a056:	60a3      	str	r3, [r4, #8]
 800a058:	6823      	ldr	r3, [r4, #0]
 800a05a:	199e      	adds	r6, r3, r6
 800a05c:	6026      	str	r6, [r4, #0]
 800a05e:	e7da      	b.n	800a016 <__ssputs_r+0x5e>
 800a060:	002a      	movs	r2, r5
 800a062:	0038      	movs	r0, r7
 800a064:	f000 f985 	bl	800a372 <_realloc_r>
 800a068:	1e06      	subs	r6, r0, #0
 800a06a:	d1e0      	bne.n	800a02e <__ssputs_r+0x76>
 800a06c:	0038      	movs	r0, r7
 800a06e:	6921      	ldr	r1, [r4, #16]
 800a070:	f7ff ff58 	bl	8009f24 <_free_r>
 800a074:	e7c7      	b.n	800a006 <__ssputs_r+0x4e>
 800a076:	46c0      	nop			; (mov r8, r8)
 800a078:	fffffb7f 	.word	0xfffffb7f

0800a07c <_svfiprintf_r>:
 800a07c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a07e:	b0a1      	sub	sp, #132	; 0x84
 800a080:	9003      	str	r0, [sp, #12]
 800a082:	001d      	movs	r5, r3
 800a084:	898b      	ldrh	r3, [r1, #12]
 800a086:	000f      	movs	r7, r1
 800a088:	0016      	movs	r6, r2
 800a08a:	061b      	lsls	r3, r3, #24
 800a08c:	d511      	bpl.n	800a0b2 <_svfiprintf_r+0x36>
 800a08e:	690b      	ldr	r3, [r1, #16]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d10e      	bne.n	800a0b2 <_svfiprintf_r+0x36>
 800a094:	2140      	movs	r1, #64	; 0x40
 800a096:	f7fc f84b 	bl	8006130 <_malloc_r>
 800a09a:	6038      	str	r0, [r7, #0]
 800a09c:	6138      	str	r0, [r7, #16]
 800a09e:	2800      	cmp	r0, #0
 800a0a0:	d105      	bne.n	800a0ae <_svfiprintf_r+0x32>
 800a0a2:	230c      	movs	r3, #12
 800a0a4:	9a03      	ldr	r2, [sp, #12]
 800a0a6:	3801      	subs	r0, #1
 800a0a8:	6013      	str	r3, [r2, #0]
 800a0aa:	b021      	add	sp, #132	; 0x84
 800a0ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0ae:	2340      	movs	r3, #64	; 0x40
 800a0b0:	617b      	str	r3, [r7, #20]
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	ac08      	add	r4, sp, #32
 800a0b6:	6163      	str	r3, [r4, #20]
 800a0b8:	3320      	adds	r3, #32
 800a0ba:	7663      	strb	r3, [r4, #25]
 800a0bc:	3310      	adds	r3, #16
 800a0be:	76a3      	strb	r3, [r4, #26]
 800a0c0:	9507      	str	r5, [sp, #28]
 800a0c2:	0035      	movs	r5, r6
 800a0c4:	782b      	ldrb	r3, [r5, #0]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d001      	beq.n	800a0ce <_svfiprintf_r+0x52>
 800a0ca:	2b25      	cmp	r3, #37	; 0x25
 800a0cc:	d147      	bne.n	800a15e <_svfiprintf_r+0xe2>
 800a0ce:	1bab      	subs	r3, r5, r6
 800a0d0:	9305      	str	r3, [sp, #20]
 800a0d2:	42b5      	cmp	r5, r6
 800a0d4:	d00c      	beq.n	800a0f0 <_svfiprintf_r+0x74>
 800a0d6:	0032      	movs	r2, r6
 800a0d8:	0039      	movs	r1, r7
 800a0da:	9803      	ldr	r0, [sp, #12]
 800a0dc:	f7ff ff6c 	bl	8009fb8 <__ssputs_r>
 800a0e0:	1c43      	adds	r3, r0, #1
 800a0e2:	d100      	bne.n	800a0e6 <_svfiprintf_r+0x6a>
 800a0e4:	e0ae      	b.n	800a244 <_svfiprintf_r+0x1c8>
 800a0e6:	6962      	ldr	r2, [r4, #20]
 800a0e8:	9b05      	ldr	r3, [sp, #20]
 800a0ea:	4694      	mov	ip, r2
 800a0ec:	4463      	add	r3, ip
 800a0ee:	6163      	str	r3, [r4, #20]
 800a0f0:	782b      	ldrb	r3, [r5, #0]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d100      	bne.n	800a0f8 <_svfiprintf_r+0x7c>
 800a0f6:	e0a5      	b.n	800a244 <_svfiprintf_r+0x1c8>
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	4252      	negs	r2, r2
 800a0fe:	6062      	str	r2, [r4, #4]
 800a100:	a904      	add	r1, sp, #16
 800a102:	3254      	adds	r2, #84	; 0x54
 800a104:	1852      	adds	r2, r2, r1
 800a106:	1c6e      	adds	r6, r5, #1
 800a108:	6023      	str	r3, [r4, #0]
 800a10a:	60e3      	str	r3, [r4, #12]
 800a10c:	60a3      	str	r3, [r4, #8]
 800a10e:	7013      	strb	r3, [r2, #0]
 800a110:	65a3      	str	r3, [r4, #88]	; 0x58
 800a112:	2205      	movs	r2, #5
 800a114:	7831      	ldrb	r1, [r6, #0]
 800a116:	4854      	ldr	r0, [pc, #336]	; (800a268 <_svfiprintf_r+0x1ec>)
 800a118:	f7ff f9f2 	bl	8009500 <memchr>
 800a11c:	1c75      	adds	r5, r6, #1
 800a11e:	2800      	cmp	r0, #0
 800a120:	d11f      	bne.n	800a162 <_svfiprintf_r+0xe6>
 800a122:	6822      	ldr	r2, [r4, #0]
 800a124:	06d3      	lsls	r3, r2, #27
 800a126:	d504      	bpl.n	800a132 <_svfiprintf_r+0xb6>
 800a128:	2353      	movs	r3, #83	; 0x53
 800a12a:	a904      	add	r1, sp, #16
 800a12c:	185b      	adds	r3, r3, r1
 800a12e:	2120      	movs	r1, #32
 800a130:	7019      	strb	r1, [r3, #0]
 800a132:	0713      	lsls	r3, r2, #28
 800a134:	d504      	bpl.n	800a140 <_svfiprintf_r+0xc4>
 800a136:	2353      	movs	r3, #83	; 0x53
 800a138:	a904      	add	r1, sp, #16
 800a13a:	185b      	adds	r3, r3, r1
 800a13c:	212b      	movs	r1, #43	; 0x2b
 800a13e:	7019      	strb	r1, [r3, #0]
 800a140:	7833      	ldrb	r3, [r6, #0]
 800a142:	2b2a      	cmp	r3, #42	; 0x2a
 800a144:	d016      	beq.n	800a174 <_svfiprintf_r+0xf8>
 800a146:	0035      	movs	r5, r6
 800a148:	2100      	movs	r1, #0
 800a14a:	200a      	movs	r0, #10
 800a14c:	68e3      	ldr	r3, [r4, #12]
 800a14e:	782a      	ldrb	r2, [r5, #0]
 800a150:	1c6e      	adds	r6, r5, #1
 800a152:	3a30      	subs	r2, #48	; 0x30
 800a154:	2a09      	cmp	r2, #9
 800a156:	d94e      	bls.n	800a1f6 <_svfiprintf_r+0x17a>
 800a158:	2900      	cmp	r1, #0
 800a15a:	d111      	bne.n	800a180 <_svfiprintf_r+0x104>
 800a15c:	e017      	b.n	800a18e <_svfiprintf_r+0x112>
 800a15e:	3501      	adds	r5, #1
 800a160:	e7b0      	b.n	800a0c4 <_svfiprintf_r+0x48>
 800a162:	4b41      	ldr	r3, [pc, #260]	; (800a268 <_svfiprintf_r+0x1ec>)
 800a164:	6822      	ldr	r2, [r4, #0]
 800a166:	1ac0      	subs	r0, r0, r3
 800a168:	2301      	movs	r3, #1
 800a16a:	4083      	lsls	r3, r0
 800a16c:	4313      	orrs	r3, r2
 800a16e:	002e      	movs	r6, r5
 800a170:	6023      	str	r3, [r4, #0]
 800a172:	e7ce      	b.n	800a112 <_svfiprintf_r+0x96>
 800a174:	9b07      	ldr	r3, [sp, #28]
 800a176:	1d19      	adds	r1, r3, #4
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	9107      	str	r1, [sp, #28]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	db01      	blt.n	800a184 <_svfiprintf_r+0x108>
 800a180:	930b      	str	r3, [sp, #44]	; 0x2c
 800a182:	e004      	b.n	800a18e <_svfiprintf_r+0x112>
 800a184:	425b      	negs	r3, r3
 800a186:	60e3      	str	r3, [r4, #12]
 800a188:	2302      	movs	r3, #2
 800a18a:	4313      	orrs	r3, r2
 800a18c:	6023      	str	r3, [r4, #0]
 800a18e:	782b      	ldrb	r3, [r5, #0]
 800a190:	2b2e      	cmp	r3, #46	; 0x2e
 800a192:	d10a      	bne.n	800a1aa <_svfiprintf_r+0x12e>
 800a194:	786b      	ldrb	r3, [r5, #1]
 800a196:	2b2a      	cmp	r3, #42	; 0x2a
 800a198:	d135      	bne.n	800a206 <_svfiprintf_r+0x18a>
 800a19a:	9b07      	ldr	r3, [sp, #28]
 800a19c:	3502      	adds	r5, #2
 800a19e:	1d1a      	adds	r2, r3, #4
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	9207      	str	r2, [sp, #28]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	db2b      	blt.n	800a200 <_svfiprintf_r+0x184>
 800a1a8:	9309      	str	r3, [sp, #36]	; 0x24
 800a1aa:	4e30      	ldr	r6, [pc, #192]	; (800a26c <_svfiprintf_r+0x1f0>)
 800a1ac:	2203      	movs	r2, #3
 800a1ae:	0030      	movs	r0, r6
 800a1b0:	7829      	ldrb	r1, [r5, #0]
 800a1b2:	f7ff f9a5 	bl	8009500 <memchr>
 800a1b6:	2800      	cmp	r0, #0
 800a1b8:	d006      	beq.n	800a1c8 <_svfiprintf_r+0x14c>
 800a1ba:	2340      	movs	r3, #64	; 0x40
 800a1bc:	1b80      	subs	r0, r0, r6
 800a1be:	4083      	lsls	r3, r0
 800a1c0:	6822      	ldr	r2, [r4, #0]
 800a1c2:	3501      	adds	r5, #1
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	6023      	str	r3, [r4, #0]
 800a1c8:	7829      	ldrb	r1, [r5, #0]
 800a1ca:	2206      	movs	r2, #6
 800a1cc:	4828      	ldr	r0, [pc, #160]	; (800a270 <_svfiprintf_r+0x1f4>)
 800a1ce:	1c6e      	adds	r6, r5, #1
 800a1d0:	7621      	strb	r1, [r4, #24]
 800a1d2:	f7ff f995 	bl	8009500 <memchr>
 800a1d6:	2800      	cmp	r0, #0
 800a1d8:	d03c      	beq.n	800a254 <_svfiprintf_r+0x1d8>
 800a1da:	4b26      	ldr	r3, [pc, #152]	; (800a274 <_svfiprintf_r+0x1f8>)
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d125      	bne.n	800a22c <_svfiprintf_r+0x1b0>
 800a1e0:	2207      	movs	r2, #7
 800a1e2:	9b07      	ldr	r3, [sp, #28]
 800a1e4:	3307      	adds	r3, #7
 800a1e6:	4393      	bics	r3, r2
 800a1e8:	3308      	adds	r3, #8
 800a1ea:	9307      	str	r3, [sp, #28]
 800a1ec:	6963      	ldr	r3, [r4, #20]
 800a1ee:	9a04      	ldr	r2, [sp, #16]
 800a1f0:	189b      	adds	r3, r3, r2
 800a1f2:	6163      	str	r3, [r4, #20]
 800a1f4:	e765      	b.n	800a0c2 <_svfiprintf_r+0x46>
 800a1f6:	4343      	muls	r3, r0
 800a1f8:	0035      	movs	r5, r6
 800a1fa:	2101      	movs	r1, #1
 800a1fc:	189b      	adds	r3, r3, r2
 800a1fe:	e7a6      	b.n	800a14e <_svfiprintf_r+0xd2>
 800a200:	2301      	movs	r3, #1
 800a202:	425b      	negs	r3, r3
 800a204:	e7d0      	b.n	800a1a8 <_svfiprintf_r+0x12c>
 800a206:	2300      	movs	r3, #0
 800a208:	200a      	movs	r0, #10
 800a20a:	001a      	movs	r2, r3
 800a20c:	3501      	adds	r5, #1
 800a20e:	6063      	str	r3, [r4, #4]
 800a210:	7829      	ldrb	r1, [r5, #0]
 800a212:	1c6e      	adds	r6, r5, #1
 800a214:	3930      	subs	r1, #48	; 0x30
 800a216:	2909      	cmp	r1, #9
 800a218:	d903      	bls.n	800a222 <_svfiprintf_r+0x1a6>
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d0c5      	beq.n	800a1aa <_svfiprintf_r+0x12e>
 800a21e:	9209      	str	r2, [sp, #36]	; 0x24
 800a220:	e7c3      	b.n	800a1aa <_svfiprintf_r+0x12e>
 800a222:	4342      	muls	r2, r0
 800a224:	0035      	movs	r5, r6
 800a226:	2301      	movs	r3, #1
 800a228:	1852      	adds	r2, r2, r1
 800a22a:	e7f1      	b.n	800a210 <_svfiprintf_r+0x194>
 800a22c:	ab07      	add	r3, sp, #28
 800a22e:	9300      	str	r3, [sp, #0]
 800a230:	003a      	movs	r2, r7
 800a232:	0021      	movs	r1, r4
 800a234:	4b10      	ldr	r3, [pc, #64]	; (800a278 <_svfiprintf_r+0x1fc>)
 800a236:	9803      	ldr	r0, [sp, #12]
 800a238:	f7fc f89a 	bl	8006370 <_printf_float>
 800a23c:	9004      	str	r0, [sp, #16]
 800a23e:	9b04      	ldr	r3, [sp, #16]
 800a240:	3301      	adds	r3, #1
 800a242:	d1d3      	bne.n	800a1ec <_svfiprintf_r+0x170>
 800a244:	89bb      	ldrh	r3, [r7, #12]
 800a246:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a248:	065b      	lsls	r3, r3, #25
 800a24a:	d400      	bmi.n	800a24e <_svfiprintf_r+0x1d2>
 800a24c:	e72d      	b.n	800a0aa <_svfiprintf_r+0x2e>
 800a24e:	2001      	movs	r0, #1
 800a250:	4240      	negs	r0, r0
 800a252:	e72a      	b.n	800a0aa <_svfiprintf_r+0x2e>
 800a254:	ab07      	add	r3, sp, #28
 800a256:	9300      	str	r3, [sp, #0]
 800a258:	003a      	movs	r2, r7
 800a25a:	0021      	movs	r1, r4
 800a25c:	4b06      	ldr	r3, [pc, #24]	; (800a278 <_svfiprintf_r+0x1fc>)
 800a25e:	9803      	ldr	r0, [sp, #12]
 800a260:	f7fc fb38 	bl	80068d4 <_printf_i>
 800a264:	e7ea      	b.n	800a23c <_svfiprintf_r+0x1c0>
 800a266:	46c0      	nop			; (mov r8, r8)
 800a268:	0800afac 	.word	0x0800afac
 800a26c:	0800afb2 	.word	0x0800afb2
 800a270:	0800afb6 	.word	0x0800afb6
 800a274:	08006371 	.word	0x08006371
 800a278:	08009fb9 	.word	0x08009fb9

0800a27c <_read_r>:
 800a27c:	b570      	push	{r4, r5, r6, lr}
 800a27e:	0004      	movs	r4, r0
 800a280:	0008      	movs	r0, r1
 800a282:	0011      	movs	r1, r2
 800a284:	001a      	movs	r2, r3
 800a286:	2300      	movs	r3, #0
 800a288:	4d05      	ldr	r5, [pc, #20]	; (800a2a0 <_read_r+0x24>)
 800a28a:	602b      	str	r3, [r5, #0]
 800a28c:	f7f8 fb62 	bl	8002954 <_read>
 800a290:	1c43      	adds	r3, r0, #1
 800a292:	d103      	bne.n	800a29c <_read_r+0x20>
 800a294:	682b      	ldr	r3, [r5, #0]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d000      	beq.n	800a29c <_read_r+0x20>
 800a29a:	6023      	str	r3, [r4, #0]
 800a29c:	bd70      	pop	{r4, r5, r6, pc}
 800a29e:	46c0      	nop			; (mov r8, r8)
 800a2a0:	20001300 	.word	0x20001300

0800a2a4 <nan>:
 800a2a4:	2000      	movs	r0, #0
 800a2a6:	4901      	ldr	r1, [pc, #4]	; (800a2ac <nan+0x8>)
 800a2a8:	4770      	bx	lr
 800a2aa:	46c0      	nop			; (mov r8, r8)
 800a2ac:	7ff80000 	.word	0x7ff80000

0800a2b0 <strncmp>:
 800a2b0:	b530      	push	{r4, r5, lr}
 800a2b2:	0005      	movs	r5, r0
 800a2b4:	1e10      	subs	r0, r2, #0
 800a2b6:	d008      	beq.n	800a2ca <strncmp+0x1a>
 800a2b8:	2400      	movs	r4, #0
 800a2ba:	3a01      	subs	r2, #1
 800a2bc:	5d2b      	ldrb	r3, [r5, r4]
 800a2be:	5d08      	ldrb	r0, [r1, r4]
 800a2c0:	4283      	cmp	r3, r0
 800a2c2:	d101      	bne.n	800a2c8 <strncmp+0x18>
 800a2c4:	4294      	cmp	r4, r2
 800a2c6:	d101      	bne.n	800a2cc <strncmp+0x1c>
 800a2c8:	1a18      	subs	r0, r3, r0
 800a2ca:	bd30      	pop	{r4, r5, pc}
 800a2cc:	3401      	adds	r4, #1
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d1f4      	bne.n	800a2bc <strncmp+0xc>
 800a2d2:	e7f9      	b.n	800a2c8 <strncmp+0x18>

0800a2d4 <__ascii_wctomb>:
 800a2d4:	0003      	movs	r3, r0
 800a2d6:	1e08      	subs	r0, r1, #0
 800a2d8:	d005      	beq.n	800a2e6 <__ascii_wctomb+0x12>
 800a2da:	2aff      	cmp	r2, #255	; 0xff
 800a2dc:	d904      	bls.n	800a2e8 <__ascii_wctomb+0x14>
 800a2de:	228a      	movs	r2, #138	; 0x8a
 800a2e0:	2001      	movs	r0, #1
 800a2e2:	601a      	str	r2, [r3, #0]
 800a2e4:	4240      	negs	r0, r0
 800a2e6:	4770      	bx	lr
 800a2e8:	2001      	movs	r0, #1
 800a2ea:	700a      	strb	r2, [r1, #0]
 800a2ec:	e7fb      	b.n	800a2e6 <__ascii_wctomb+0x12>
	...

0800a2f0 <__assert_func>:
 800a2f0:	b530      	push	{r4, r5, lr}
 800a2f2:	0014      	movs	r4, r2
 800a2f4:	001a      	movs	r2, r3
 800a2f6:	4b09      	ldr	r3, [pc, #36]	; (800a31c <__assert_func+0x2c>)
 800a2f8:	0005      	movs	r5, r0
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	b085      	sub	sp, #20
 800a2fe:	68d8      	ldr	r0, [r3, #12]
 800a300:	4b07      	ldr	r3, [pc, #28]	; (800a320 <__assert_func+0x30>)
 800a302:	2c00      	cmp	r4, #0
 800a304:	d101      	bne.n	800a30a <__assert_func+0x1a>
 800a306:	4b07      	ldr	r3, [pc, #28]	; (800a324 <__assert_func+0x34>)
 800a308:	001c      	movs	r4, r3
 800a30a:	9301      	str	r3, [sp, #4]
 800a30c:	9100      	str	r1, [sp, #0]
 800a30e:	002b      	movs	r3, r5
 800a310:	4905      	ldr	r1, [pc, #20]	; (800a328 <__assert_func+0x38>)
 800a312:	9402      	str	r4, [sp, #8]
 800a314:	f000 f80a 	bl	800a32c <fiprintf>
 800a318:	f000 fa8a 	bl	800a830 <abort>
 800a31c:	20000010 	.word	0x20000010
 800a320:	0800afbd 	.word	0x0800afbd
 800a324:	0800aff8 	.word	0x0800aff8
 800a328:	0800afca 	.word	0x0800afca

0800a32c <fiprintf>:
 800a32c:	b40e      	push	{r1, r2, r3}
 800a32e:	b503      	push	{r0, r1, lr}
 800a330:	0001      	movs	r1, r0
 800a332:	ab03      	add	r3, sp, #12
 800a334:	4804      	ldr	r0, [pc, #16]	; (800a348 <fiprintf+0x1c>)
 800a336:	cb04      	ldmia	r3!, {r2}
 800a338:	6800      	ldr	r0, [r0, #0]
 800a33a:	9301      	str	r3, [sp, #4]
 800a33c:	f000 f870 	bl	800a420 <_vfiprintf_r>
 800a340:	b002      	add	sp, #8
 800a342:	bc08      	pop	{r3}
 800a344:	b003      	add	sp, #12
 800a346:	4718      	bx	r3
 800a348:	20000010 	.word	0x20000010

0800a34c <memmove>:
 800a34c:	b510      	push	{r4, lr}
 800a34e:	4288      	cmp	r0, r1
 800a350:	d902      	bls.n	800a358 <memmove+0xc>
 800a352:	188b      	adds	r3, r1, r2
 800a354:	4298      	cmp	r0, r3
 800a356:	d303      	bcc.n	800a360 <memmove+0x14>
 800a358:	2300      	movs	r3, #0
 800a35a:	e007      	b.n	800a36c <memmove+0x20>
 800a35c:	5c8b      	ldrb	r3, [r1, r2]
 800a35e:	5483      	strb	r3, [r0, r2]
 800a360:	3a01      	subs	r2, #1
 800a362:	d2fb      	bcs.n	800a35c <memmove+0x10>
 800a364:	bd10      	pop	{r4, pc}
 800a366:	5ccc      	ldrb	r4, [r1, r3]
 800a368:	54c4      	strb	r4, [r0, r3]
 800a36a:	3301      	adds	r3, #1
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d1fa      	bne.n	800a366 <memmove+0x1a>
 800a370:	e7f8      	b.n	800a364 <memmove+0x18>

0800a372 <_realloc_r>:
 800a372:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a374:	0007      	movs	r7, r0
 800a376:	000e      	movs	r6, r1
 800a378:	0014      	movs	r4, r2
 800a37a:	2900      	cmp	r1, #0
 800a37c:	d105      	bne.n	800a38a <_realloc_r+0x18>
 800a37e:	0011      	movs	r1, r2
 800a380:	f7fb fed6 	bl	8006130 <_malloc_r>
 800a384:	0005      	movs	r5, r0
 800a386:	0028      	movs	r0, r5
 800a388:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a38a:	2a00      	cmp	r2, #0
 800a38c:	d103      	bne.n	800a396 <_realloc_r+0x24>
 800a38e:	f7ff fdc9 	bl	8009f24 <_free_r>
 800a392:	0025      	movs	r5, r4
 800a394:	e7f7      	b.n	800a386 <_realloc_r+0x14>
 800a396:	f000 fabf 	bl	800a918 <_malloc_usable_size_r>
 800a39a:	9001      	str	r0, [sp, #4]
 800a39c:	4284      	cmp	r4, r0
 800a39e:	d803      	bhi.n	800a3a8 <_realloc_r+0x36>
 800a3a0:	0035      	movs	r5, r6
 800a3a2:	0843      	lsrs	r3, r0, #1
 800a3a4:	42a3      	cmp	r3, r4
 800a3a6:	d3ee      	bcc.n	800a386 <_realloc_r+0x14>
 800a3a8:	0021      	movs	r1, r4
 800a3aa:	0038      	movs	r0, r7
 800a3ac:	f7fb fec0 	bl	8006130 <_malloc_r>
 800a3b0:	1e05      	subs	r5, r0, #0
 800a3b2:	d0e8      	beq.n	800a386 <_realloc_r+0x14>
 800a3b4:	9b01      	ldr	r3, [sp, #4]
 800a3b6:	0022      	movs	r2, r4
 800a3b8:	429c      	cmp	r4, r3
 800a3ba:	d900      	bls.n	800a3be <_realloc_r+0x4c>
 800a3bc:	001a      	movs	r2, r3
 800a3be:	0031      	movs	r1, r6
 800a3c0:	0028      	movs	r0, r5
 800a3c2:	f7fb fe82 	bl	80060ca <memcpy>
 800a3c6:	0031      	movs	r1, r6
 800a3c8:	0038      	movs	r0, r7
 800a3ca:	f7ff fdab 	bl	8009f24 <_free_r>
 800a3ce:	e7da      	b.n	800a386 <_realloc_r+0x14>

0800a3d0 <__sfputc_r>:
 800a3d0:	6893      	ldr	r3, [r2, #8]
 800a3d2:	b510      	push	{r4, lr}
 800a3d4:	3b01      	subs	r3, #1
 800a3d6:	6093      	str	r3, [r2, #8]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	da04      	bge.n	800a3e6 <__sfputc_r+0x16>
 800a3dc:	6994      	ldr	r4, [r2, #24]
 800a3de:	42a3      	cmp	r3, r4
 800a3e0:	db07      	blt.n	800a3f2 <__sfputc_r+0x22>
 800a3e2:	290a      	cmp	r1, #10
 800a3e4:	d005      	beq.n	800a3f2 <__sfputc_r+0x22>
 800a3e6:	6813      	ldr	r3, [r2, #0]
 800a3e8:	1c58      	adds	r0, r3, #1
 800a3ea:	6010      	str	r0, [r2, #0]
 800a3ec:	7019      	strb	r1, [r3, #0]
 800a3ee:	0008      	movs	r0, r1
 800a3f0:	bd10      	pop	{r4, pc}
 800a3f2:	f000 f94f 	bl	800a694 <__swbuf_r>
 800a3f6:	0001      	movs	r1, r0
 800a3f8:	e7f9      	b.n	800a3ee <__sfputc_r+0x1e>

0800a3fa <__sfputs_r>:
 800a3fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3fc:	0006      	movs	r6, r0
 800a3fe:	000f      	movs	r7, r1
 800a400:	0014      	movs	r4, r2
 800a402:	18d5      	adds	r5, r2, r3
 800a404:	42ac      	cmp	r4, r5
 800a406:	d101      	bne.n	800a40c <__sfputs_r+0x12>
 800a408:	2000      	movs	r0, #0
 800a40a:	e007      	b.n	800a41c <__sfputs_r+0x22>
 800a40c:	7821      	ldrb	r1, [r4, #0]
 800a40e:	003a      	movs	r2, r7
 800a410:	0030      	movs	r0, r6
 800a412:	f7ff ffdd 	bl	800a3d0 <__sfputc_r>
 800a416:	3401      	adds	r4, #1
 800a418:	1c43      	adds	r3, r0, #1
 800a41a:	d1f3      	bne.n	800a404 <__sfputs_r+0xa>
 800a41c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a420 <_vfiprintf_r>:
 800a420:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a422:	b0a1      	sub	sp, #132	; 0x84
 800a424:	0006      	movs	r6, r0
 800a426:	000c      	movs	r4, r1
 800a428:	001f      	movs	r7, r3
 800a42a:	9203      	str	r2, [sp, #12]
 800a42c:	2800      	cmp	r0, #0
 800a42e:	d004      	beq.n	800a43a <_vfiprintf_r+0x1a>
 800a430:	6983      	ldr	r3, [r0, #24]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d101      	bne.n	800a43a <_vfiprintf_r+0x1a>
 800a436:	f7fb fd81 	bl	8005f3c <__sinit>
 800a43a:	4b8e      	ldr	r3, [pc, #568]	; (800a674 <_vfiprintf_r+0x254>)
 800a43c:	429c      	cmp	r4, r3
 800a43e:	d11c      	bne.n	800a47a <_vfiprintf_r+0x5a>
 800a440:	6874      	ldr	r4, [r6, #4]
 800a442:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a444:	07db      	lsls	r3, r3, #31
 800a446:	d405      	bmi.n	800a454 <_vfiprintf_r+0x34>
 800a448:	89a3      	ldrh	r3, [r4, #12]
 800a44a:	059b      	lsls	r3, r3, #22
 800a44c:	d402      	bmi.n	800a454 <_vfiprintf_r+0x34>
 800a44e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a450:	f7fb fe39 	bl	80060c6 <__retarget_lock_acquire_recursive>
 800a454:	89a3      	ldrh	r3, [r4, #12]
 800a456:	071b      	lsls	r3, r3, #28
 800a458:	d502      	bpl.n	800a460 <_vfiprintf_r+0x40>
 800a45a:	6923      	ldr	r3, [r4, #16]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d11d      	bne.n	800a49c <_vfiprintf_r+0x7c>
 800a460:	0021      	movs	r1, r4
 800a462:	0030      	movs	r0, r6
 800a464:	f000 f96c 	bl	800a740 <__swsetup_r>
 800a468:	2800      	cmp	r0, #0
 800a46a:	d017      	beq.n	800a49c <_vfiprintf_r+0x7c>
 800a46c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a46e:	07db      	lsls	r3, r3, #31
 800a470:	d50d      	bpl.n	800a48e <_vfiprintf_r+0x6e>
 800a472:	2001      	movs	r0, #1
 800a474:	4240      	negs	r0, r0
 800a476:	b021      	add	sp, #132	; 0x84
 800a478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a47a:	4b7f      	ldr	r3, [pc, #508]	; (800a678 <_vfiprintf_r+0x258>)
 800a47c:	429c      	cmp	r4, r3
 800a47e:	d101      	bne.n	800a484 <_vfiprintf_r+0x64>
 800a480:	68b4      	ldr	r4, [r6, #8]
 800a482:	e7de      	b.n	800a442 <_vfiprintf_r+0x22>
 800a484:	4b7d      	ldr	r3, [pc, #500]	; (800a67c <_vfiprintf_r+0x25c>)
 800a486:	429c      	cmp	r4, r3
 800a488:	d1db      	bne.n	800a442 <_vfiprintf_r+0x22>
 800a48a:	68f4      	ldr	r4, [r6, #12]
 800a48c:	e7d9      	b.n	800a442 <_vfiprintf_r+0x22>
 800a48e:	89a3      	ldrh	r3, [r4, #12]
 800a490:	059b      	lsls	r3, r3, #22
 800a492:	d4ee      	bmi.n	800a472 <_vfiprintf_r+0x52>
 800a494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a496:	f7fb fe17 	bl	80060c8 <__retarget_lock_release_recursive>
 800a49a:	e7ea      	b.n	800a472 <_vfiprintf_r+0x52>
 800a49c:	2300      	movs	r3, #0
 800a49e:	ad08      	add	r5, sp, #32
 800a4a0:	616b      	str	r3, [r5, #20]
 800a4a2:	3320      	adds	r3, #32
 800a4a4:	766b      	strb	r3, [r5, #25]
 800a4a6:	3310      	adds	r3, #16
 800a4a8:	76ab      	strb	r3, [r5, #26]
 800a4aa:	9707      	str	r7, [sp, #28]
 800a4ac:	9f03      	ldr	r7, [sp, #12]
 800a4ae:	783b      	ldrb	r3, [r7, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d001      	beq.n	800a4b8 <_vfiprintf_r+0x98>
 800a4b4:	2b25      	cmp	r3, #37	; 0x25
 800a4b6:	d14e      	bne.n	800a556 <_vfiprintf_r+0x136>
 800a4b8:	9b03      	ldr	r3, [sp, #12]
 800a4ba:	1afb      	subs	r3, r7, r3
 800a4bc:	9305      	str	r3, [sp, #20]
 800a4be:	9b03      	ldr	r3, [sp, #12]
 800a4c0:	429f      	cmp	r7, r3
 800a4c2:	d00d      	beq.n	800a4e0 <_vfiprintf_r+0xc0>
 800a4c4:	9b05      	ldr	r3, [sp, #20]
 800a4c6:	0021      	movs	r1, r4
 800a4c8:	0030      	movs	r0, r6
 800a4ca:	9a03      	ldr	r2, [sp, #12]
 800a4cc:	f7ff ff95 	bl	800a3fa <__sfputs_r>
 800a4d0:	1c43      	adds	r3, r0, #1
 800a4d2:	d100      	bne.n	800a4d6 <_vfiprintf_r+0xb6>
 800a4d4:	e0b5      	b.n	800a642 <_vfiprintf_r+0x222>
 800a4d6:	696a      	ldr	r2, [r5, #20]
 800a4d8:	9b05      	ldr	r3, [sp, #20]
 800a4da:	4694      	mov	ip, r2
 800a4dc:	4463      	add	r3, ip
 800a4de:	616b      	str	r3, [r5, #20]
 800a4e0:	783b      	ldrb	r3, [r7, #0]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d100      	bne.n	800a4e8 <_vfiprintf_r+0xc8>
 800a4e6:	e0ac      	b.n	800a642 <_vfiprintf_r+0x222>
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	1c7b      	adds	r3, r7, #1
 800a4ec:	9303      	str	r3, [sp, #12]
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	4252      	negs	r2, r2
 800a4f2:	606a      	str	r2, [r5, #4]
 800a4f4:	a904      	add	r1, sp, #16
 800a4f6:	3254      	adds	r2, #84	; 0x54
 800a4f8:	1852      	adds	r2, r2, r1
 800a4fa:	602b      	str	r3, [r5, #0]
 800a4fc:	60eb      	str	r3, [r5, #12]
 800a4fe:	60ab      	str	r3, [r5, #8]
 800a500:	7013      	strb	r3, [r2, #0]
 800a502:	65ab      	str	r3, [r5, #88]	; 0x58
 800a504:	9b03      	ldr	r3, [sp, #12]
 800a506:	2205      	movs	r2, #5
 800a508:	7819      	ldrb	r1, [r3, #0]
 800a50a:	485d      	ldr	r0, [pc, #372]	; (800a680 <_vfiprintf_r+0x260>)
 800a50c:	f7fe fff8 	bl	8009500 <memchr>
 800a510:	9b03      	ldr	r3, [sp, #12]
 800a512:	1c5f      	adds	r7, r3, #1
 800a514:	2800      	cmp	r0, #0
 800a516:	d120      	bne.n	800a55a <_vfiprintf_r+0x13a>
 800a518:	682a      	ldr	r2, [r5, #0]
 800a51a:	06d3      	lsls	r3, r2, #27
 800a51c:	d504      	bpl.n	800a528 <_vfiprintf_r+0x108>
 800a51e:	2353      	movs	r3, #83	; 0x53
 800a520:	a904      	add	r1, sp, #16
 800a522:	185b      	adds	r3, r3, r1
 800a524:	2120      	movs	r1, #32
 800a526:	7019      	strb	r1, [r3, #0]
 800a528:	0713      	lsls	r3, r2, #28
 800a52a:	d504      	bpl.n	800a536 <_vfiprintf_r+0x116>
 800a52c:	2353      	movs	r3, #83	; 0x53
 800a52e:	a904      	add	r1, sp, #16
 800a530:	185b      	adds	r3, r3, r1
 800a532:	212b      	movs	r1, #43	; 0x2b
 800a534:	7019      	strb	r1, [r3, #0]
 800a536:	9b03      	ldr	r3, [sp, #12]
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	2b2a      	cmp	r3, #42	; 0x2a
 800a53c:	d016      	beq.n	800a56c <_vfiprintf_r+0x14c>
 800a53e:	2100      	movs	r1, #0
 800a540:	68eb      	ldr	r3, [r5, #12]
 800a542:	9f03      	ldr	r7, [sp, #12]
 800a544:	783a      	ldrb	r2, [r7, #0]
 800a546:	1c78      	adds	r0, r7, #1
 800a548:	3a30      	subs	r2, #48	; 0x30
 800a54a:	4684      	mov	ip, r0
 800a54c:	2a09      	cmp	r2, #9
 800a54e:	d94f      	bls.n	800a5f0 <_vfiprintf_r+0x1d0>
 800a550:	2900      	cmp	r1, #0
 800a552:	d111      	bne.n	800a578 <_vfiprintf_r+0x158>
 800a554:	e017      	b.n	800a586 <_vfiprintf_r+0x166>
 800a556:	3701      	adds	r7, #1
 800a558:	e7a9      	b.n	800a4ae <_vfiprintf_r+0x8e>
 800a55a:	4b49      	ldr	r3, [pc, #292]	; (800a680 <_vfiprintf_r+0x260>)
 800a55c:	682a      	ldr	r2, [r5, #0]
 800a55e:	1ac0      	subs	r0, r0, r3
 800a560:	2301      	movs	r3, #1
 800a562:	4083      	lsls	r3, r0
 800a564:	4313      	orrs	r3, r2
 800a566:	602b      	str	r3, [r5, #0]
 800a568:	9703      	str	r7, [sp, #12]
 800a56a:	e7cb      	b.n	800a504 <_vfiprintf_r+0xe4>
 800a56c:	9b07      	ldr	r3, [sp, #28]
 800a56e:	1d19      	adds	r1, r3, #4
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	9107      	str	r1, [sp, #28]
 800a574:	2b00      	cmp	r3, #0
 800a576:	db01      	blt.n	800a57c <_vfiprintf_r+0x15c>
 800a578:	930b      	str	r3, [sp, #44]	; 0x2c
 800a57a:	e004      	b.n	800a586 <_vfiprintf_r+0x166>
 800a57c:	425b      	negs	r3, r3
 800a57e:	60eb      	str	r3, [r5, #12]
 800a580:	2302      	movs	r3, #2
 800a582:	4313      	orrs	r3, r2
 800a584:	602b      	str	r3, [r5, #0]
 800a586:	783b      	ldrb	r3, [r7, #0]
 800a588:	2b2e      	cmp	r3, #46	; 0x2e
 800a58a:	d10a      	bne.n	800a5a2 <_vfiprintf_r+0x182>
 800a58c:	787b      	ldrb	r3, [r7, #1]
 800a58e:	2b2a      	cmp	r3, #42	; 0x2a
 800a590:	d137      	bne.n	800a602 <_vfiprintf_r+0x1e2>
 800a592:	9b07      	ldr	r3, [sp, #28]
 800a594:	3702      	adds	r7, #2
 800a596:	1d1a      	adds	r2, r3, #4
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	9207      	str	r2, [sp, #28]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	db2d      	blt.n	800a5fc <_vfiprintf_r+0x1dc>
 800a5a0:	9309      	str	r3, [sp, #36]	; 0x24
 800a5a2:	2203      	movs	r2, #3
 800a5a4:	7839      	ldrb	r1, [r7, #0]
 800a5a6:	4837      	ldr	r0, [pc, #220]	; (800a684 <_vfiprintf_r+0x264>)
 800a5a8:	f7fe ffaa 	bl	8009500 <memchr>
 800a5ac:	2800      	cmp	r0, #0
 800a5ae:	d007      	beq.n	800a5c0 <_vfiprintf_r+0x1a0>
 800a5b0:	4b34      	ldr	r3, [pc, #208]	; (800a684 <_vfiprintf_r+0x264>)
 800a5b2:	682a      	ldr	r2, [r5, #0]
 800a5b4:	1ac0      	subs	r0, r0, r3
 800a5b6:	2340      	movs	r3, #64	; 0x40
 800a5b8:	4083      	lsls	r3, r0
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	3701      	adds	r7, #1
 800a5be:	602b      	str	r3, [r5, #0]
 800a5c0:	7839      	ldrb	r1, [r7, #0]
 800a5c2:	1c7b      	adds	r3, r7, #1
 800a5c4:	2206      	movs	r2, #6
 800a5c6:	4830      	ldr	r0, [pc, #192]	; (800a688 <_vfiprintf_r+0x268>)
 800a5c8:	9303      	str	r3, [sp, #12]
 800a5ca:	7629      	strb	r1, [r5, #24]
 800a5cc:	f7fe ff98 	bl	8009500 <memchr>
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	d045      	beq.n	800a660 <_vfiprintf_r+0x240>
 800a5d4:	4b2d      	ldr	r3, [pc, #180]	; (800a68c <_vfiprintf_r+0x26c>)
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d127      	bne.n	800a62a <_vfiprintf_r+0x20a>
 800a5da:	2207      	movs	r2, #7
 800a5dc:	9b07      	ldr	r3, [sp, #28]
 800a5de:	3307      	adds	r3, #7
 800a5e0:	4393      	bics	r3, r2
 800a5e2:	3308      	adds	r3, #8
 800a5e4:	9307      	str	r3, [sp, #28]
 800a5e6:	696b      	ldr	r3, [r5, #20]
 800a5e8:	9a04      	ldr	r2, [sp, #16]
 800a5ea:	189b      	adds	r3, r3, r2
 800a5ec:	616b      	str	r3, [r5, #20]
 800a5ee:	e75d      	b.n	800a4ac <_vfiprintf_r+0x8c>
 800a5f0:	210a      	movs	r1, #10
 800a5f2:	434b      	muls	r3, r1
 800a5f4:	4667      	mov	r7, ip
 800a5f6:	189b      	adds	r3, r3, r2
 800a5f8:	3909      	subs	r1, #9
 800a5fa:	e7a3      	b.n	800a544 <_vfiprintf_r+0x124>
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	425b      	negs	r3, r3
 800a600:	e7ce      	b.n	800a5a0 <_vfiprintf_r+0x180>
 800a602:	2300      	movs	r3, #0
 800a604:	001a      	movs	r2, r3
 800a606:	3701      	adds	r7, #1
 800a608:	606b      	str	r3, [r5, #4]
 800a60a:	7839      	ldrb	r1, [r7, #0]
 800a60c:	1c78      	adds	r0, r7, #1
 800a60e:	3930      	subs	r1, #48	; 0x30
 800a610:	4684      	mov	ip, r0
 800a612:	2909      	cmp	r1, #9
 800a614:	d903      	bls.n	800a61e <_vfiprintf_r+0x1fe>
 800a616:	2b00      	cmp	r3, #0
 800a618:	d0c3      	beq.n	800a5a2 <_vfiprintf_r+0x182>
 800a61a:	9209      	str	r2, [sp, #36]	; 0x24
 800a61c:	e7c1      	b.n	800a5a2 <_vfiprintf_r+0x182>
 800a61e:	230a      	movs	r3, #10
 800a620:	435a      	muls	r2, r3
 800a622:	4667      	mov	r7, ip
 800a624:	1852      	adds	r2, r2, r1
 800a626:	3b09      	subs	r3, #9
 800a628:	e7ef      	b.n	800a60a <_vfiprintf_r+0x1ea>
 800a62a:	ab07      	add	r3, sp, #28
 800a62c:	9300      	str	r3, [sp, #0]
 800a62e:	0022      	movs	r2, r4
 800a630:	0029      	movs	r1, r5
 800a632:	0030      	movs	r0, r6
 800a634:	4b16      	ldr	r3, [pc, #88]	; (800a690 <_vfiprintf_r+0x270>)
 800a636:	f7fb fe9b 	bl	8006370 <_printf_float>
 800a63a:	9004      	str	r0, [sp, #16]
 800a63c:	9b04      	ldr	r3, [sp, #16]
 800a63e:	3301      	adds	r3, #1
 800a640:	d1d1      	bne.n	800a5e6 <_vfiprintf_r+0x1c6>
 800a642:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a644:	07db      	lsls	r3, r3, #31
 800a646:	d405      	bmi.n	800a654 <_vfiprintf_r+0x234>
 800a648:	89a3      	ldrh	r3, [r4, #12]
 800a64a:	059b      	lsls	r3, r3, #22
 800a64c:	d402      	bmi.n	800a654 <_vfiprintf_r+0x234>
 800a64e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a650:	f7fb fd3a 	bl	80060c8 <__retarget_lock_release_recursive>
 800a654:	89a3      	ldrh	r3, [r4, #12]
 800a656:	065b      	lsls	r3, r3, #25
 800a658:	d500      	bpl.n	800a65c <_vfiprintf_r+0x23c>
 800a65a:	e70a      	b.n	800a472 <_vfiprintf_r+0x52>
 800a65c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a65e:	e70a      	b.n	800a476 <_vfiprintf_r+0x56>
 800a660:	ab07      	add	r3, sp, #28
 800a662:	9300      	str	r3, [sp, #0]
 800a664:	0022      	movs	r2, r4
 800a666:	0029      	movs	r1, r5
 800a668:	0030      	movs	r0, r6
 800a66a:	4b09      	ldr	r3, [pc, #36]	; (800a690 <_vfiprintf_r+0x270>)
 800a66c:	f7fc f932 	bl	80068d4 <_printf_i>
 800a670:	e7e3      	b.n	800a63a <_vfiprintf_r+0x21a>
 800a672:	46c0      	nop			; (mov r8, r8)
 800a674:	0800ab74 	.word	0x0800ab74
 800a678:	0800ab94 	.word	0x0800ab94
 800a67c:	0800ab54 	.word	0x0800ab54
 800a680:	0800afac 	.word	0x0800afac
 800a684:	0800afb2 	.word	0x0800afb2
 800a688:	0800afb6 	.word	0x0800afb6
 800a68c:	08006371 	.word	0x08006371
 800a690:	0800a3fb 	.word	0x0800a3fb

0800a694 <__swbuf_r>:
 800a694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a696:	0005      	movs	r5, r0
 800a698:	000e      	movs	r6, r1
 800a69a:	0014      	movs	r4, r2
 800a69c:	2800      	cmp	r0, #0
 800a69e:	d004      	beq.n	800a6aa <__swbuf_r+0x16>
 800a6a0:	6983      	ldr	r3, [r0, #24]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d101      	bne.n	800a6aa <__swbuf_r+0x16>
 800a6a6:	f7fb fc49 	bl	8005f3c <__sinit>
 800a6aa:	4b22      	ldr	r3, [pc, #136]	; (800a734 <__swbuf_r+0xa0>)
 800a6ac:	429c      	cmp	r4, r3
 800a6ae:	d12e      	bne.n	800a70e <__swbuf_r+0x7a>
 800a6b0:	686c      	ldr	r4, [r5, #4]
 800a6b2:	69a3      	ldr	r3, [r4, #24]
 800a6b4:	60a3      	str	r3, [r4, #8]
 800a6b6:	89a3      	ldrh	r3, [r4, #12]
 800a6b8:	071b      	lsls	r3, r3, #28
 800a6ba:	d532      	bpl.n	800a722 <__swbuf_r+0x8e>
 800a6bc:	6923      	ldr	r3, [r4, #16]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d02f      	beq.n	800a722 <__swbuf_r+0x8e>
 800a6c2:	6823      	ldr	r3, [r4, #0]
 800a6c4:	6922      	ldr	r2, [r4, #16]
 800a6c6:	b2f7      	uxtb	r7, r6
 800a6c8:	1a98      	subs	r0, r3, r2
 800a6ca:	6963      	ldr	r3, [r4, #20]
 800a6cc:	b2f6      	uxtb	r6, r6
 800a6ce:	4283      	cmp	r3, r0
 800a6d0:	dc05      	bgt.n	800a6de <__swbuf_r+0x4a>
 800a6d2:	0021      	movs	r1, r4
 800a6d4:	0028      	movs	r0, r5
 800a6d6:	f7fe fb2b 	bl	8008d30 <_fflush_r>
 800a6da:	2800      	cmp	r0, #0
 800a6dc:	d127      	bne.n	800a72e <__swbuf_r+0x9a>
 800a6de:	68a3      	ldr	r3, [r4, #8]
 800a6e0:	3001      	adds	r0, #1
 800a6e2:	3b01      	subs	r3, #1
 800a6e4:	60a3      	str	r3, [r4, #8]
 800a6e6:	6823      	ldr	r3, [r4, #0]
 800a6e8:	1c5a      	adds	r2, r3, #1
 800a6ea:	6022      	str	r2, [r4, #0]
 800a6ec:	701f      	strb	r7, [r3, #0]
 800a6ee:	6963      	ldr	r3, [r4, #20]
 800a6f0:	4283      	cmp	r3, r0
 800a6f2:	d004      	beq.n	800a6fe <__swbuf_r+0x6a>
 800a6f4:	89a3      	ldrh	r3, [r4, #12]
 800a6f6:	07db      	lsls	r3, r3, #31
 800a6f8:	d507      	bpl.n	800a70a <__swbuf_r+0x76>
 800a6fa:	2e0a      	cmp	r6, #10
 800a6fc:	d105      	bne.n	800a70a <__swbuf_r+0x76>
 800a6fe:	0021      	movs	r1, r4
 800a700:	0028      	movs	r0, r5
 800a702:	f7fe fb15 	bl	8008d30 <_fflush_r>
 800a706:	2800      	cmp	r0, #0
 800a708:	d111      	bne.n	800a72e <__swbuf_r+0x9a>
 800a70a:	0030      	movs	r0, r6
 800a70c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a70e:	4b0a      	ldr	r3, [pc, #40]	; (800a738 <__swbuf_r+0xa4>)
 800a710:	429c      	cmp	r4, r3
 800a712:	d101      	bne.n	800a718 <__swbuf_r+0x84>
 800a714:	68ac      	ldr	r4, [r5, #8]
 800a716:	e7cc      	b.n	800a6b2 <__swbuf_r+0x1e>
 800a718:	4b08      	ldr	r3, [pc, #32]	; (800a73c <__swbuf_r+0xa8>)
 800a71a:	429c      	cmp	r4, r3
 800a71c:	d1c9      	bne.n	800a6b2 <__swbuf_r+0x1e>
 800a71e:	68ec      	ldr	r4, [r5, #12]
 800a720:	e7c7      	b.n	800a6b2 <__swbuf_r+0x1e>
 800a722:	0021      	movs	r1, r4
 800a724:	0028      	movs	r0, r5
 800a726:	f000 f80b 	bl	800a740 <__swsetup_r>
 800a72a:	2800      	cmp	r0, #0
 800a72c:	d0c9      	beq.n	800a6c2 <__swbuf_r+0x2e>
 800a72e:	2601      	movs	r6, #1
 800a730:	4276      	negs	r6, r6
 800a732:	e7ea      	b.n	800a70a <__swbuf_r+0x76>
 800a734:	0800ab74 	.word	0x0800ab74
 800a738:	0800ab94 	.word	0x0800ab94
 800a73c:	0800ab54 	.word	0x0800ab54

0800a740 <__swsetup_r>:
 800a740:	4b37      	ldr	r3, [pc, #220]	; (800a820 <__swsetup_r+0xe0>)
 800a742:	b570      	push	{r4, r5, r6, lr}
 800a744:	681d      	ldr	r5, [r3, #0]
 800a746:	0006      	movs	r6, r0
 800a748:	000c      	movs	r4, r1
 800a74a:	2d00      	cmp	r5, #0
 800a74c:	d005      	beq.n	800a75a <__swsetup_r+0x1a>
 800a74e:	69ab      	ldr	r3, [r5, #24]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d102      	bne.n	800a75a <__swsetup_r+0x1a>
 800a754:	0028      	movs	r0, r5
 800a756:	f7fb fbf1 	bl	8005f3c <__sinit>
 800a75a:	4b32      	ldr	r3, [pc, #200]	; (800a824 <__swsetup_r+0xe4>)
 800a75c:	429c      	cmp	r4, r3
 800a75e:	d10f      	bne.n	800a780 <__swsetup_r+0x40>
 800a760:	686c      	ldr	r4, [r5, #4]
 800a762:	230c      	movs	r3, #12
 800a764:	5ee2      	ldrsh	r2, [r4, r3]
 800a766:	b293      	uxth	r3, r2
 800a768:	0711      	lsls	r1, r2, #28
 800a76a:	d42d      	bmi.n	800a7c8 <__swsetup_r+0x88>
 800a76c:	06d9      	lsls	r1, r3, #27
 800a76e:	d411      	bmi.n	800a794 <__swsetup_r+0x54>
 800a770:	2309      	movs	r3, #9
 800a772:	2001      	movs	r0, #1
 800a774:	6033      	str	r3, [r6, #0]
 800a776:	3337      	adds	r3, #55	; 0x37
 800a778:	4313      	orrs	r3, r2
 800a77a:	81a3      	strh	r3, [r4, #12]
 800a77c:	4240      	negs	r0, r0
 800a77e:	bd70      	pop	{r4, r5, r6, pc}
 800a780:	4b29      	ldr	r3, [pc, #164]	; (800a828 <__swsetup_r+0xe8>)
 800a782:	429c      	cmp	r4, r3
 800a784:	d101      	bne.n	800a78a <__swsetup_r+0x4a>
 800a786:	68ac      	ldr	r4, [r5, #8]
 800a788:	e7eb      	b.n	800a762 <__swsetup_r+0x22>
 800a78a:	4b28      	ldr	r3, [pc, #160]	; (800a82c <__swsetup_r+0xec>)
 800a78c:	429c      	cmp	r4, r3
 800a78e:	d1e8      	bne.n	800a762 <__swsetup_r+0x22>
 800a790:	68ec      	ldr	r4, [r5, #12]
 800a792:	e7e6      	b.n	800a762 <__swsetup_r+0x22>
 800a794:	075b      	lsls	r3, r3, #29
 800a796:	d513      	bpl.n	800a7c0 <__swsetup_r+0x80>
 800a798:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a79a:	2900      	cmp	r1, #0
 800a79c:	d008      	beq.n	800a7b0 <__swsetup_r+0x70>
 800a79e:	0023      	movs	r3, r4
 800a7a0:	3344      	adds	r3, #68	; 0x44
 800a7a2:	4299      	cmp	r1, r3
 800a7a4:	d002      	beq.n	800a7ac <__swsetup_r+0x6c>
 800a7a6:	0030      	movs	r0, r6
 800a7a8:	f7ff fbbc 	bl	8009f24 <_free_r>
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	6363      	str	r3, [r4, #52]	; 0x34
 800a7b0:	2224      	movs	r2, #36	; 0x24
 800a7b2:	89a3      	ldrh	r3, [r4, #12]
 800a7b4:	4393      	bics	r3, r2
 800a7b6:	81a3      	strh	r3, [r4, #12]
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	6063      	str	r3, [r4, #4]
 800a7bc:	6923      	ldr	r3, [r4, #16]
 800a7be:	6023      	str	r3, [r4, #0]
 800a7c0:	2308      	movs	r3, #8
 800a7c2:	89a2      	ldrh	r2, [r4, #12]
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	81a3      	strh	r3, [r4, #12]
 800a7c8:	6923      	ldr	r3, [r4, #16]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d10b      	bne.n	800a7e6 <__swsetup_r+0xa6>
 800a7ce:	21a0      	movs	r1, #160	; 0xa0
 800a7d0:	2280      	movs	r2, #128	; 0x80
 800a7d2:	89a3      	ldrh	r3, [r4, #12]
 800a7d4:	0089      	lsls	r1, r1, #2
 800a7d6:	0092      	lsls	r2, r2, #2
 800a7d8:	400b      	ands	r3, r1
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d003      	beq.n	800a7e6 <__swsetup_r+0xa6>
 800a7de:	0021      	movs	r1, r4
 800a7e0:	0030      	movs	r0, r6
 800a7e2:	f000 f855 	bl	800a890 <__smakebuf_r>
 800a7e6:	220c      	movs	r2, #12
 800a7e8:	5ea3      	ldrsh	r3, [r4, r2]
 800a7ea:	2001      	movs	r0, #1
 800a7ec:	001a      	movs	r2, r3
 800a7ee:	b299      	uxth	r1, r3
 800a7f0:	4002      	ands	r2, r0
 800a7f2:	4203      	tst	r3, r0
 800a7f4:	d00f      	beq.n	800a816 <__swsetup_r+0xd6>
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	60a2      	str	r2, [r4, #8]
 800a7fa:	6962      	ldr	r2, [r4, #20]
 800a7fc:	4252      	negs	r2, r2
 800a7fe:	61a2      	str	r2, [r4, #24]
 800a800:	2000      	movs	r0, #0
 800a802:	6922      	ldr	r2, [r4, #16]
 800a804:	4282      	cmp	r2, r0
 800a806:	d1ba      	bne.n	800a77e <__swsetup_r+0x3e>
 800a808:	060a      	lsls	r2, r1, #24
 800a80a:	d5b8      	bpl.n	800a77e <__swsetup_r+0x3e>
 800a80c:	2240      	movs	r2, #64	; 0x40
 800a80e:	4313      	orrs	r3, r2
 800a810:	81a3      	strh	r3, [r4, #12]
 800a812:	3801      	subs	r0, #1
 800a814:	e7b3      	b.n	800a77e <__swsetup_r+0x3e>
 800a816:	0788      	lsls	r0, r1, #30
 800a818:	d400      	bmi.n	800a81c <__swsetup_r+0xdc>
 800a81a:	6962      	ldr	r2, [r4, #20]
 800a81c:	60a2      	str	r2, [r4, #8]
 800a81e:	e7ef      	b.n	800a800 <__swsetup_r+0xc0>
 800a820:	20000010 	.word	0x20000010
 800a824:	0800ab74 	.word	0x0800ab74
 800a828:	0800ab94 	.word	0x0800ab94
 800a82c:	0800ab54 	.word	0x0800ab54

0800a830 <abort>:
 800a830:	2006      	movs	r0, #6
 800a832:	b510      	push	{r4, lr}
 800a834:	f000 f8a2 	bl	800a97c <raise>
 800a838:	2001      	movs	r0, #1
 800a83a:	f7f8 f87f 	bl	800293c <_exit>
	...

0800a840 <__swhatbuf_r>:
 800a840:	b570      	push	{r4, r5, r6, lr}
 800a842:	000e      	movs	r6, r1
 800a844:	001d      	movs	r5, r3
 800a846:	230e      	movs	r3, #14
 800a848:	5ec9      	ldrsh	r1, [r1, r3]
 800a84a:	0014      	movs	r4, r2
 800a84c:	b096      	sub	sp, #88	; 0x58
 800a84e:	2900      	cmp	r1, #0
 800a850:	da08      	bge.n	800a864 <__swhatbuf_r+0x24>
 800a852:	220c      	movs	r2, #12
 800a854:	5eb3      	ldrsh	r3, [r6, r2]
 800a856:	2200      	movs	r2, #0
 800a858:	602a      	str	r2, [r5, #0]
 800a85a:	061b      	lsls	r3, r3, #24
 800a85c:	d411      	bmi.n	800a882 <__swhatbuf_r+0x42>
 800a85e:	2380      	movs	r3, #128	; 0x80
 800a860:	00db      	lsls	r3, r3, #3
 800a862:	e00f      	b.n	800a884 <__swhatbuf_r+0x44>
 800a864:	466a      	mov	r2, sp
 800a866:	f000 f8a9 	bl	800a9bc <_fstat_r>
 800a86a:	2800      	cmp	r0, #0
 800a86c:	dbf1      	blt.n	800a852 <__swhatbuf_r+0x12>
 800a86e:	23f0      	movs	r3, #240	; 0xf0
 800a870:	9901      	ldr	r1, [sp, #4]
 800a872:	021b      	lsls	r3, r3, #8
 800a874:	4019      	ands	r1, r3
 800a876:	4b05      	ldr	r3, [pc, #20]	; (800a88c <__swhatbuf_r+0x4c>)
 800a878:	18c9      	adds	r1, r1, r3
 800a87a:	424b      	negs	r3, r1
 800a87c:	4159      	adcs	r1, r3
 800a87e:	6029      	str	r1, [r5, #0]
 800a880:	e7ed      	b.n	800a85e <__swhatbuf_r+0x1e>
 800a882:	2340      	movs	r3, #64	; 0x40
 800a884:	2000      	movs	r0, #0
 800a886:	6023      	str	r3, [r4, #0]
 800a888:	b016      	add	sp, #88	; 0x58
 800a88a:	bd70      	pop	{r4, r5, r6, pc}
 800a88c:	ffffe000 	.word	0xffffe000

0800a890 <__smakebuf_r>:
 800a890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a892:	2602      	movs	r6, #2
 800a894:	898b      	ldrh	r3, [r1, #12]
 800a896:	0005      	movs	r5, r0
 800a898:	000c      	movs	r4, r1
 800a89a:	4233      	tst	r3, r6
 800a89c:	d006      	beq.n	800a8ac <__smakebuf_r+0x1c>
 800a89e:	0023      	movs	r3, r4
 800a8a0:	3347      	adds	r3, #71	; 0x47
 800a8a2:	6023      	str	r3, [r4, #0]
 800a8a4:	6123      	str	r3, [r4, #16]
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	6163      	str	r3, [r4, #20]
 800a8aa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a8ac:	466a      	mov	r2, sp
 800a8ae:	ab01      	add	r3, sp, #4
 800a8b0:	f7ff ffc6 	bl	800a840 <__swhatbuf_r>
 800a8b4:	9900      	ldr	r1, [sp, #0]
 800a8b6:	0007      	movs	r7, r0
 800a8b8:	0028      	movs	r0, r5
 800a8ba:	f7fb fc39 	bl	8006130 <_malloc_r>
 800a8be:	2800      	cmp	r0, #0
 800a8c0:	d108      	bne.n	800a8d4 <__smakebuf_r+0x44>
 800a8c2:	220c      	movs	r2, #12
 800a8c4:	5ea3      	ldrsh	r3, [r4, r2]
 800a8c6:	059a      	lsls	r2, r3, #22
 800a8c8:	d4ef      	bmi.n	800a8aa <__smakebuf_r+0x1a>
 800a8ca:	2203      	movs	r2, #3
 800a8cc:	4393      	bics	r3, r2
 800a8ce:	431e      	orrs	r6, r3
 800a8d0:	81a6      	strh	r6, [r4, #12]
 800a8d2:	e7e4      	b.n	800a89e <__smakebuf_r+0xe>
 800a8d4:	4b0f      	ldr	r3, [pc, #60]	; (800a914 <__smakebuf_r+0x84>)
 800a8d6:	62ab      	str	r3, [r5, #40]	; 0x28
 800a8d8:	2380      	movs	r3, #128	; 0x80
 800a8da:	89a2      	ldrh	r2, [r4, #12]
 800a8dc:	6020      	str	r0, [r4, #0]
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	81a3      	strh	r3, [r4, #12]
 800a8e2:	9b00      	ldr	r3, [sp, #0]
 800a8e4:	6120      	str	r0, [r4, #16]
 800a8e6:	6163      	str	r3, [r4, #20]
 800a8e8:	9b01      	ldr	r3, [sp, #4]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d00d      	beq.n	800a90a <__smakebuf_r+0x7a>
 800a8ee:	0028      	movs	r0, r5
 800a8f0:	230e      	movs	r3, #14
 800a8f2:	5ee1      	ldrsh	r1, [r4, r3]
 800a8f4:	f000 f874 	bl	800a9e0 <_isatty_r>
 800a8f8:	2800      	cmp	r0, #0
 800a8fa:	d006      	beq.n	800a90a <__smakebuf_r+0x7a>
 800a8fc:	2203      	movs	r2, #3
 800a8fe:	89a3      	ldrh	r3, [r4, #12]
 800a900:	4393      	bics	r3, r2
 800a902:	001a      	movs	r2, r3
 800a904:	2301      	movs	r3, #1
 800a906:	4313      	orrs	r3, r2
 800a908:	81a3      	strh	r3, [r4, #12]
 800a90a:	89a0      	ldrh	r0, [r4, #12]
 800a90c:	4307      	orrs	r7, r0
 800a90e:	81a7      	strh	r7, [r4, #12]
 800a910:	e7cb      	b.n	800a8aa <__smakebuf_r+0x1a>
 800a912:	46c0      	nop			; (mov r8, r8)
 800a914:	08005ec1 	.word	0x08005ec1

0800a918 <_malloc_usable_size_r>:
 800a918:	1f0b      	subs	r3, r1, #4
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	1f18      	subs	r0, r3, #4
 800a91e:	2b00      	cmp	r3, #0
 800a920:	da01      	bge.n	800a926 <_malloc_usable_size_r+0xe>
 800a922:	580b      	ldr	r3, [r1, r0]
 800a924:	18c0      	adds	r0, r0, r3
 800a926:	4770      	bx	lr

0800a928 <_raise_r>:
 800a928:	b570      	push	{r4, r5, r6, lr}
 800a92a:	0004      	movs	r4, r0
 800a92c:	000d      	movs	r5, r1
 800a92e:	291f      	cmp	r1, #31
 800a930:	d904      	bls.n	800a93c <_raise_r+0x14>
 800a932:	2316      	movs	r3, #22
 800a934:	6003      	str	r3, [r0, #0]
 800a936:	2001      	movs	r0, #1
 800a938:	4240      	negs	r0, r0
 800a93a:	bd70      	pop	{r4, r5, r6, pc}
 800a93c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d004      	beq.n	800a94c <_raise_r+0x24>
 800a942:	008a      	lsls	r2, r1, #2
 800a944:	189b      	adds	r3, r3, r2
 800a946:	681a      	ldr	r2, [r3, #0]
 800a948:	2a00      	cmp	r2, #0
 800a94a:	d108      	bne.n	800a95e <_raise_r+0x36>
 800a94c:	0020      	movs	r0, r4
 800a94e:	f000 f831 	bl	800a9b4 <_getpid_r>
 800a952:	002a      	movs	r2, r5
 800a954:	0001      	movs	r1, r0
 800a956:	0020      	movs	r0, r4
 800a958:	f000 f81a 	bl	800a990 <_kill_r>
 800a95c:	e7ed      	b.n	800a93a <_raise_r+0x12>
 800a95e:	2000      	movs	r0, #0
 800a960:	2a01      	cmp	r2, #1
 800a962:	d0ea      	beq.n	800a93a <_raise_r+0x12>
 800a964:	1c51      	adds	r1, r2, #1
 800a966:	d103      	bne.n	800a970 <_raise_r+0x48>
 800a968:	2316      	movs	r3, #22
 800a96a:	3001      	adds	r0, #1
 800a96c:	6023      	str	r3, [r4, #0]
 800a96e:	e7e4      	b.n	800a93a <_raise_r+0x12>
 800a970:	2400      	movs	r4, #0
 800a972:	0028      	movs	r0, r5
 800a974:	601c      	str	r4, [r3, #0]
 800a976:	4790      	blx	r2
 800a978:	0020      	movs	r0, r4
 800a97a:	e7de      	b.n	800a93a <_raise_r+0x12>

0800a97c <raise>:
 800a97c:	b510      	push	{r4, lr}
 800a97e:	4b03      	ldr	r3, [pc, #12]	; (800a98c <raise+0x10>)
 800a980:	0001      	movs	r1, r0
 800a982:	6818      	ldr	r0, [r3, #0]
 800a984:	f7ff ffd0 	bl	800a928 <_raise_r>
 800a988:	bd10      	pop	{r4, pc}
 800a98a:	46c0      	nop			; (mov r8, r8)
 800a98c:	20000010 	.word	0x20000010

0800a990 <_kill_r>:
 800a990:	2300      	movs	r3, #0
 800a992:	b570      	push	{r4, r5, r6, lr}
 800a994:	4d06      	ldr	r5, [pc, #24]	; (800a9b0 <_kill_r+0x20>)
 800a996:	0004      	movs	r4, r0
 800a998:	0008      	movs	r0, r1
 800a99a:	0011      	movs	r1, r2
 800a99c:	602b      	str	r3, [r5, #0]
 800a99e:	f7f7 ffbd 	bl	800291c <_kill>
 800a9a2:	1c43      	adds	r3, r0, #1
 800a9a4:	d103      	bne.n	800a9ae <_kill_r+0x1e>
 800a9a6:	682b      	ldr	r3, [r5, #0]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d000      	beq.n	800a9ae <_kill_r+0x1e>
 800a9ac:	6023      	str	r3, [r4, #0]
 800a9ae:	bd70      	pop	{r4, r5, r6, pc}
 800a9b0:	20001300 	.word	0x20001300

0800a9b4 <_getpid_r>:
 800a9b4:	b510      	push	{r4, lr}
 800a9b6:	f7f7 ffab 	bl	8002910 <_getpid>
 800a9ba:	bd10      	pop	{r4, pc}

0800a9bc <_fstat_r>:
 800a9bc:	2300      	movs	r3, #0
 800a9be:	b570      	push	{r4, r5, r6, lr}
 800a9c0:	4d06      	ldr	r5, [pc, #24]	; (800a9dc <_fstat_r+0x20>)
 800a9c2:	0004      	movs	r4, r0
 800a9c4:	0008      	movs	r0, r1
 800a9c6:	0011      	movs	r1, r2
 800a9c8:	602b      	str	r3, [r5, #0]
 800a9ca:	f7f8 f806 	bl	80029da <_fstat>
 800a9ce:	1c43      	adds	r3, r0, #1
 800a9d0:	d103      	bne.n	800a9da <_fstat_r+0x1e>
 800a9d2:	682b      	ldr	r3, [r5, #0]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d000      	beq.n	800a9da <_fstat_r+0x1e>
 800a9d8:	6023      	str	r3, [r4, #0]
 800a9da:	bd70      	pop	{r4, r5, r6, pc}
 800a9dc:	20001300 	.word	0x20001300

0800a9e0 <_isatty_r>:
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	b570      	push	{r4, r5, r6, lr}
 800a9e4:	4d06      	ldr	r5, [pc, #24]	; (800aa00 <_isatty_r+0x20>)
 800a9e6:	0004      	movs	r4, r0
 800a9e8:	0008      	movs	r0, r1
 800a9ea:	602b      	str	r3, [r5, #0]
 800a9ec:	f7f8 f803 	bl	80029f6 <_isatty>
 800a9f0:	1c43      	adds	r3, r0, #1
 800a9f2:	d103      	bne.n	800a9fc <_isatty_r+0x1c>
 800a9f4:	682b      	ldr	r3, [r5, #0]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d000      	beq.n	800a9fc <_isatty_r+0x1c>
 800a9fa:	6023      	str	r3, [r4, #0]
 800a9fc:	bd70      	pop	{r4, r5, r6, pc}
 800a9fe:	46c0      	nop			; (mov r8, r8)
 800aa00:	20001300 	.word	0x20001300

0800aa04 <_init>:
 800aa04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa06:	46c0      	nop			; (mov r8, r8)
 800aa08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa0a:	bc08      	pop	{r3}
 800aa0c:	469e      	mov	lr, r3
 800aa0e:	4770      	bx	lr

0800aa10 <_fini>:
 800aa10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa12:	46c0      	nop			; (mov r8, r8)
 800aa14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa16:	bc08      	pop	{r3}
 800aa18:	469e      	mov	lr, r3
 800aa1a:	4770      	bx	lr
