
Project_16_RingBuffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031a0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003260  08003260  00013260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032a0  080032a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080032a0  080032a0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032a0  080032a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032a0  080032a0  000132a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032a4  080032a4  000132a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080032a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  2000000c  080032b4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  080032b4  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009fc1  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b4d  00000000  00000000  00029ff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  0002bb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006e0  00000000  00000000  0002c2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018774  00000000  00000000  0002c998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a5a7  00000000  00000000  0004510c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f76d  00000000  00000000  0004f6b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dee20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018f4  00000000  00000000  000dee70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003248 	.word	0x08003248

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003248 	.word	0x08003248

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000234:	f000 fb7a 	bl	800092c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000238:	f000 f81e 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023c:	f000 f8be 	bl	80003bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000240:	f000 f89e 	bl	8000380 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000244:	f000 f86c 	bl	8000320 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  Ringbuf_Init();
 8000248:	f000 f9c2 	bl	80005d0 <Ringbuf_Init>
  }


  */

  if (waitFor("Hello",6000)!= 1)
 800024c:	4a08      	ldr	r2, [pc, #32]	; (8000270 <main+0x40>)
 800024e:	4b09      	ldr	r3, [pc, #36]	; (8000274 <main+0x44>)
 8000250:	0011      	movs	r1, r2
 8000252:	0018      	movs	r0, r3
 8000254:	f000 f9f8 	bl	8000648 <waitFor>
 8000258:	0003      	movs	r3, r0
 800025a:	2b01      	cmp	r3, #1
 800025c:	d001      	beq.n	8000262 <main+0x32>
  {


	  Error_Handler();
 800025e:	f000 f8d3 	bl	8000408 <Error_Handler>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  HAL_Delay(1000);
 8000262:	23fa      	movs	r3, #250	; 0xfa
 8000264:	009b      	lsls	r3, r3, #2
 8000266:	0018      	movs	r0, r3
 8000268:	f000 fbc4 	bl	80009f4 <HAL_Delay>
 800026c:	e7f9      	b.n	8000262 <main+0x32>
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	00001770 	.word	0x00001770
 8000274:	08003260 	.word	0x08003260

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b590      	push	{r4, r7, lr}
 800027a:	b099      	sub	sp, #100	; 0x64
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	242c      	movs	r4, #44	; 0x2c
 8000280:	193b      	adds	r3, r7, r4
 8000282:	0018      	movs	r0, r3
 8000284:	2334      	movs	r3, #52	; 0x34
 8000286:	001a      	movs	r2, r3
 8000288:	2100      	movs	r1, #0
 800028a:	f002 ffd4 	bl	8003236 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028e:	231c      	movs	r3, #28
 8000290:	18fb      	adds	r3, r7, r3
 8000292:	0018      	movs	r0, r3
 8000294:	2310      	movs	r3, #16
 8000296:	001a      	movs	r2, r3
 8000298:	2100      	movs	r1, #0
 800029a:	f002 ffcc 	bl	8003236 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800029e:	003b      	movs	r3, r7
 80002a0:	0018      	movs	r0, r3
 80002a2:	231c      	movs	r3, #28
 80002a4:	001a      	movs	r2, r3
 80002a6:	2100      	movs	r1, #0
 80002a8:	f002 ffc5 	bl	8003236 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80002ac:	193b      	adds	r3, r7, r4
 80002ae:	2220      	movs	r2, #32
 80002b0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002b2:	193b      	adds	r3, r7, r4
 80002b4:	2201      	movs	r2, #1
 80002b6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002b8:	193b      	adds	r3, r7, r4
 80002ba:	2200      	movs	r2, #0
 80002bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002be:	193b      	adds	r3, r7, r4
 80002c0:	0018      	movs	r0, r3
 80002c2:	f001 f827 	bl	8001314 <HAL_RCC_OscConfig>
 80002c6:	1e03      	subs	r3, r0, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x56>
  {
    Error_Handler();
 80002ca:	f000 f89d 	bl	8000408 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ce:	211c      	movs	r1, #28
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	2207      	movs	r2, #7
 80002d4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	2203      	movs	r2, #3
 80002da:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2200      	movs	r2, #0
 80002e0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2200      	movs	r2, #0
 80002e6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2101      	movs	r1, #1
 80002ec:	0018      	movs	r0, r3
 80002ee:	f001 fb97 	bl	8001a20 <HAL_RCC_ClockConfig>
 80002f2:	1e03      	subs	r3, r0, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002f6:	f000 f887 	bl	8000408 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80002fa:	003b      	movs	r3, r7
 80002fc:	2202      	movs	r2, #2
 80002fe:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000300:	003b      	movs	r3, r7
 8000302:	2200      	movs	r2, #0
 8000304:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000306:	003b      	movs	r3, r7
 8000308:	0018      	movs	r0, r3
 800030a:	f001 fd03 	bl	8001d14 <HAL_RCCEx_PeriphCLKConfig>
 800030e:	1e03      	subs	r3, r0, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000312:	f000 f879 	bl	8000408 <Error_Handler>
  }
}
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	46bd      	mov	sp, r7
 800031a:	b019      	add	sp, #100	; 0x64
 800031c:	bd90      	pop	{r4, r7, pc}
	...

08000320 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000324:	4b14      	ldr	r3, [pc, #80]	; (8000378 <MX_USART2_UART_Init+0x58>)
 8000326:	4a15      	ldr	r2, [pc, #84]	; (800037c <MX_USART2_UART_Init+0x5c>)
 8000328:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800032a:	4b13      	ldr	r3, [pc, #76]	; (8000378 <MX_USART2_UART_Init+0x58>)
 800032c:	2296      	movs	r2, #150	; 0x96
 800032e:	0192      	lsls	r2, r2, #6
 8000330:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000332:	4b11      	ldr	r3, [pc, #68]	; (8000378 <MX_USART2_UART_Init+0x58>)
 8000334:	2200      	movs	r2, #0
 8000336:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000338:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <MX_USART2_UART_Init+0x58>)
 800033a:	2200      	movs	r2, #0
 800033c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800033e:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <MX_USART2_UART_Init+0x58>)
 8000340:	2200      	movs	r2, #0
 8000342:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000344:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <MX_USART2_UART_Init+0x58>)
 8000346:	220c      	movs	r2, #12
 8000348:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800034a:	4b0b      	ldr	r3, [pc, #44]	; (8000378 <MX_USART2_UART_Init+0x58>)
 800034c:	2200      	movs	r2, #0
 800034e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000350:	4b09      	ldr	r3, [pc, #36]	; (8000378 <MX_USART2_UART_Init+0x58>)
 8000352:	2200      	movs	r2, #0
 8000354:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000356:	4b08      	ldr	r3, [pc, #32]	; (8000378 <MX_USART2_UART_Init+0x58>)
 8000358:	2200      	movs	r2, #0
 800035a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800035c:	4b06      	ldr	r3, [pc, #24]	; (8000378 <MX_USART2_UART_Init+0x58>)
 800035e:	2200      	movs	r2, #0
 8000360:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000362:	4b05      	ldr	r3, [pc, #20]	; (8000378 <MX_USART2_UART_Init+0x58>)
 8000364:	0018      	movs	r0, r3
 8000366:	f001 fdd3 	bl	8001f10 <HAL_UART_Init>
 800036a:	1e03      	subs	r3, r0, #0
 800036c:	d001      	beq.n	8000372 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800036e:	f000 f84b 	bl	8000408 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000372:	46c0      	nop			; (mov r8, r8)
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	20000028 	.word	0x20000028
 800037c:	40004400 	.word	0x40004400

08000380 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000386:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <MX_DMA_Init+0x38>)
 8000388:	695a      	ldr	r2, [r3, #20]
 800038a:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <MX_DMA_Init+0x38>)
 800038c:	2101      	movs	r1, #1
 800038e:	430a      	orrs	r2, r1
 8000390:	615a      	str	r2, [r3, #20]
 8000392:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <MX_DMA_Init+0x38>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	2201      	movs	r2, #1
 8000398:	4013      	ands	r3, r2
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 800039e:	2200      	movs	r2, #0
 80003a0:	2100      	movs	r1, #0
 80003a2:	200b      	movs	r0, #11
 80003a4:	f000 fbf6 	bl	8000b94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80003a8:	200b      	movs	r0, #11
 80003aa:	f000 fc08 	bl	8000bbe <HAL_NVIC_EnableIRQ>

}
 80003ae:	46c0      	nop			; (mov r8, r8)
 80003b0:	46bd      	mov	sp, r7
 80003b2:	b002      	add	sp, #8
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	40021000 	.word	0x40021000

080003bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003c2:	4b10      	ldr	r3, [pc, #64]	; (8000404 <MX_GPIO_Init+0x48>)
 80003c4:	695a      	ldr	r2, [r3, #20]
 80003c6:	4b0f      	ldr	r3, [pc, #60]	; (8000404 <MX_GPIO_Init+0x48>)
 80003c8:	2180      	movs	r1, #128	; 0x80
 80003ca:	03c9      	lsls	r1, r1, #15
 80003cc:	430a      	orrs	r2, r1
 80003ce:	615a      	str	r2, [r3, #20]
 80003d0:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <MX_GPIO_Init+0x48>)
 80003d2:	695a      	ldr	r2, [r3, #20]
 80003d4:	2380      	movs	r3, #128	; 0x80
 80003d6:	03db      	lsls	r3, r3, #15
 80003d8:	4013      	ands	r3, r2
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003de:	4b09      	ldr	r3, [pc, #36]	; (8000404 <MX_GPIO_Init+0x48>)
 80003e0:	695a      	ldr	r2, [r3, #20]
 80003e2:	4b08      	ldr	r3, [pc, #32]	; (8000404 <MX_GPIO_Init+0x48>)
 80003e4:	2180      	movs	r1, #128	; 0x80
 80003e6:	0289      	lsls	r1, r1, #10
 80003e8:	430a      	orrs	r2, r1
 80003ea:	615a      	str	r2, [r3, #20]
 80003ec:	4b05      	ldr	r3, [pc, #20]	; (8000404 <MX_GPIO_Init+0x48>)
 80003ee:	695a      	ldr	r2, [r3, #20]
 80003f0:	2380      	movs	r3, #128	; 0x80
 80003f2:	029b      	lsls	r3, r3, #10
 80003f4:	4013      	ands	r3, r2
 80003f6:	603b      	str	r3, [r7, #0]
 80003f8:	683b      	ldr	r3, [r7, #0]

}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	46bd      	mov	sp, r7
 80003fe:	b002      	add	sp, #8
 8000400:	bd80      	pop	{r7, pc}
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	40021000 	.word	0x40021000

08000408 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800040c:	b672      	cpsid	i
}
 800040e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000410:	e7fe      	b.n	8000410 <Error_Handler+0x8>
	...

08000414 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800041a:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <HAL_MspInit+0x44>)
 800041c:	699a      	ldr	r2, [r3, #24]
 800041e:	4b0e      	ldr	r3, [pc, #56]	; (8000458 <HAL_MspInit+0x44>)
 8000420:	2101      	movs	r1, #1
 8000422:	430a      	orrs	r2, r1
 8000424:	619a      	str	r2, [r3, #24]
 8000426:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <HAL_MspInit+0x44>)
 8000428:	699b      	ldr	r3, [r3, #24]
 800042a:	2201      	movs	r2, #1
 800042c:	4013      	ands	r3, r2
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000432:	4b09      	ldr	r3, [pc, #36]	; (8000458 <HAL_MspInit+0x44>)
 8000434:	69da      	ldr	r2, [r3, #28]
 8000436:	4b08      	ldr	r3, [pc, #32]	; (8000458 <HAL_MspInit+0x44>)
 8000438:	2180      	movs	r1, #128	; 0x80
 800043a:	0549      	lsls	r1, r1, #21
 800043c:	430a      	orrs	r2, r1
 800043e:	61da      	str	r2, [r3, #28]
 8000440:	4b05      	ldr	r3, [pc, #20]	; (8000458 <HAL_MspInit+0x44>)
 8000442:	69da      	ldr	r2, [r3, #28]
 8000444:	2380      	movs	r3, #128	; 0x80
 8000446:	055b      	lsls	r3, r3, #21
 8000448:	4013      	ands	r3, r2
 800044a:	603b      	str	r3, [r7, #0]
 800044c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	46bd      	mov	sp, r7
 8000452:	b002      	add	sp, #8
 8000454:	bd80      	pop	{r7, pc}
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	40021000 	.word	0x40021000

0800045c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800045c:	b590      	push	{r4, r7, lr}
 800045e:	b08b      	sub	sp, #44	; 0x2c
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000464:	2414      	movs	r4, #20
 8000466:	193b      	adds	r3, r7, r4
 8000468:	0018      	movs	r0, r3
 800046a:	2314      	movs	r3, #20
 800046c:	001a      	movs	r2, r3
 800046e:	2100      	movs	r1, #0
 8000470:	f002 fee1 	bl	8003236 <memset>
  if(huart->Instance==USART2)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a33      	ldr	r2, [pc, #204]	; (8000548 <HAL_UART_MspInit+0xec>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d160      	bne.n	8000540 <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800047e:	4b33      	ldr	r3, [pc, #204]	; (800054c <HAL_UART_MspInit+0xf0>)
 8000480:	69da      	ldr	r2, [r3, #28]
 8000482:	4b32      	ldr	r3, [pc, #200]	; (800054c <HAL_UART_MspInit+0xf0>)
 8000484:	2180      	movs	r1, #128	; 0x80
 8000486:	0289      	lsls	r1, r1, #10
 8000488:	430a      	orrs	r2, r1
 800048a:	61da      	str	r2, [r3, #28]
 800048c:	4b2f      	ldr	r3, [pc, #188]	; (800054c <HAL_UART_MspInit+0xf0>)
 800048e:	69da      	ldr	r2, [r3, #28]
 8000490:	2380      	movs	r3, #128	; 0x80
 8000492:	029b      	lsls	r3, r3, #10
 8000494:	4013      	ands	r3, r2
 8000496:	613b      	str	r3, [r7, #16]
 8000498:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800049a:	4b2c      	ldr	r3, [pc, #176]	; (800054c <HAL_UART_MspInit+0xf0>)
 800049c:	695a      	ldr	r2, [r3, #20]
 800049e:	4b2b      	ldr	r3, [pc, #172]	; (800054c <HAL_UART_MspInit+0xf0>)
 80004a0:	2180      	movs	r1, #128	; 0x80
 80004a2:	0289      	lsls	r1, r1, #10
 80004a4:	430a      	orrs	r2, r1
 80004a6:	615a      	str	r2, [r3, #20]
 80004a8:	4b28      	ldr	r3, [pc, #160]	; (800054c <HAL_UART_MspInit+0xf0>)
 80004aa:	695a      	ldr	r2, [r3, #20]
 80004ac:	2380      	movs	r3, #128	; 0x80
 80004ae:	029b      	lsls	r3, r3, #10
 80004b0:	4013      	ands	r3, r2
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80004b6:	0021      	movs	r1, r4
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	220c      	movs	r2, #12
 80004bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	2202      	movs	r2, #2
 80004c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	2200      	movs	r2, #0
 80004c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ca:	187b      	adds	r3, r7, r1
 80004cc:	2203      	movs	r2, #3
 80004ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80004d0:	187b      	adds	r3, r7, r1
 80004d2:	2201      	movs	r2, #1
 80004d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d6:	187a      	adds	r2, r7, r1
 80004d8:	2390      	movs	r3, #144	; 0x90
 80004da:	05db      	lsls	r3, r3, #23
 80004dc:	0011      	movs	r1, r2
 80004de:	0018      	movs	r0, r3
 80004e0:	f000 fda0 	bl	8001024 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 80004e4:	4b1a      	ldr	r3, [pc, #104]	; (8000550 <HAL_UART_MspInit+0xf4>)
 80004e6:	4a1b      	ldr	r2, [pc, #108]	; (8000554 <HAL_UART_MspInit+0xf8>)
 80004e8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80004ea:	4b19      	ldr	r3, [pc, #100]	; (8000550 <HAL_UART_MspInit+0xf4>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80004f0:	4b17      	ldr	r3, [pc, #92]	; (8000550 <HAL_UART_MspInit+0xf4>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80004f6:	4b16      	ldr	r3, [pc, #88]	; (8000550 <HAL_UART_MspInit+0xf4>)
 80004f8:	2280      	movs	r2, #128	; 0x80
 80004fa:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80004fc:	4b14      	ldr	r3, [pc, #80]	; (8000550 <HAL_UART_MspInit+0xf4>)
 80004fe:	2200      	movs	r2, #0
 8000500:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000502:	4b13      	ldr	r3, [pc, #76]	; (8000550 <HAL_UART_MspInit+0xf4>)
 8000504:	2200      	movs	r2, #0
 8000506:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000508:	4b11      	ldr	r3, [pc, #68]	; (8000550 <HAL_UART_MspInit+0xf4>)
 800050a:	2200      	movs	r2, #0
 800050c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800050e:	4b10      	ldr	r3, [pc, #64]	; (8000550 <HAL_UART_MspInit+0xf4>)
 8000510:	2200      	movs	r2, #0
 8000512:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000514:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <HAL_UART_MspInit+0xf4>)
 8000516:	0018      	movs	r0, r3
 8000518:	f000 fb6e 	bl	8000bf8 <HAL_DMA_Init>
 800051c:	1e03      	subs	r3, r0, #0
 800051e:	d001      	beq.n	8000524 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8000520:	f7ff ff72 	bl	8000408 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4a0a      	ldr	r2, [pc, #40]	; (8000550 <HAL_UART_MspInit+0xf4>)
 8000528:	671a      	str	r2, [r3, #112]	; 0x70
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <HAL_UART_MspInit+0xf4>)
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000530:	2200      	movs	r2, #0
 8000532:	2100      	movs	r1, #0
 8000534:	201c      	movs	r0, #28
 8000536:	f000 fb2d 	bl	8000b94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800053a:	201c      	movs	r0, #28
 800053c:	f000 fb3f 	bl	8000bbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000540:	46c0      	nop			; (mov r8, r8)
 8000542:	46bd      	mov	sp, r7
 8000544:	b00b      	add	sp, #44	; 0x2c
 8000546:	bd90      	pop	{r4, r7, pc}
 8000548:	40004400 	.word	0x40004400
 800054c:	40021000 	.word	0x40021000
 8000550:	200000ac 	.word	0x200000ac
 8000554:	40020058 	.word	0x40020058

08000558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800055c:	e7fe      	b.n	800055c <NMI_Handler+0x4>

0800055e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800055e:	b580      	push	{r7, lr}
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000562:	e7fe      	b.n	8000562 <HardFault_Handler+0x4>

08000564 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000568:	46c0      	nop			; (mov r8, r8)
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}

0800056e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}

08000578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800057c:	f000 fa1e 	bl	80009bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  TIMEOUT--;
 8000580:	4b03      	ldr	r3, [pc, #12]	; (8000590 <SysTick_Handler+0x18>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	1e5a      	subs	r2, r3, #1
 8000586:	4b02      	ldr	r3, [pc, #8]	; (8000590 <SysTick_Handler+0x18>)
 8000588:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	2000013c 	.word	0x2000013c

08000594 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, 5, 6 and 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 800059a:	0018      	movs	r0, r3
 800059c:	f000 fc57 	bl	8000e4e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 80005a0:	46c0      	nop			; (mov r8, r8)
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	200000ac 	.word	0x200000ac

080005ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80005b0:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <USART2_IRQHandler+0x14>)
 80005b2:	0018      	movs	r0, r3
 80005b4:	f001 fd00 	bl	8001fb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80005b8:	46c0      	nop			; (mov r8, r8)
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	20000028 	.word	0x20000028

080005c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80005c8:	46c0      	nop			; (mov r8, r8)
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <Ringbuf_Init>:
/* Timeout is in milliseconds */
int32_t TIMEOUT = 0;

/* Initialize the Ring Buffer */
void Ringbuf_Init (void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	memset(RxBuf, '\0', RxBuf_SIZE);
 80005d4:	4b14      	ldr	r3, [pc, #80]	; (8000628 <Ringbuf_Init+0x58>)
 80005d6:	2214      	movs	r2, #20
 80005d8:	2100      	movs	r1, #0
 80005da:	0018      	movs	r0, r3
 80005dc:	f002 fe2b 	bl	8003236 <memset>
	memset(MainBuf, '\0', MainBuf_SIZE);
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <Ringbuf_Init+0x5c>)
 80005e2:	2228      	movs	r2, #40	; 0x28
 80005e4:	2100      	movs	r1, #0
 80005e6:	0018      	movs	r0, r3
 80005e8:	f002 fe25 	bl	8003236 <memset>

	Head = Tail = 0;
 80005ec:	4b10      	ldr	r3, [pc, #64]	; (8000630 <Ringbuf_Init+0x60>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	801a      	strh	r2, [r3, #0]
 80005f2:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <Ringbuf_Init+0x60>)
 80005f4:	881a      	ldrh	r2, [r3, #0]
 80005f6:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <Ringbuf_Init+0x64>)
 80005f8:	801a      	strh	r2, [r3, #0]
	oldPos = 0;
 80005fa:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <Ringbuf_Init+0x68>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	801a      	strh	r2, [r3, #0]
	newPos = 0;
 8000600:	4b0e      	ldr	r3, [pc, #56]	; (800063c <Ringbuf_Init+0x6c>)
 8000602:	2200      	movs	r2, #0
 8000604:	801a      	strh	r2, [r3, #0]

  HAL_UARTEx_ReceiveToIdle_DMA(&UART, RxBuf, RxBuf_SIZE);
 8000606:	4908      	ldr	r1, [pc, #32]	; (8000628 <Ringbuf_Init+0x58>)
 8000608:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <Ringbuf_Init+0x70>)
 800060a:	2214      	movs	r2, #20
 800060c:	0018      	movs	r0, r3
 800060e:	f002 fd76 	bl	80030fe <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <Ringbuf_Init+0x74>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <Ringbuf_Init+0x74>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2104      	movs	r1, #4
 800061e:	438a      	bics	r2, r1
 8000620:	601a      	str	r2, [r3, #0]
}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	200000f0 	.word	0x200000f0
 800062c:	20000104 	.word	0x20000104
 8000630:	20000132 	.word	0x20000132
 8000634:	20000130 	.word	0x20000130
 8000638:	2000012c 	.word	0x2000012c
 800063c:	2000012e 	.word	0x2000012e
 8000640:	20000028 	.word	0x20000028
 8000644:	200000ac 	.word	0x200000ac

08000648 <waitFor>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 * return 0, in case of the timeout
 */
int waitFor (char *string, uint32_t Timeout)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	0018      	movs	r0, r3
 800065a:	f7ff fd55 	bl	8000108 <strlen>
 800065e:	0003      	movs	r3, r0
 8000660:	60bb      	str	r3, [r7, #8]

	TIMEOUT = Timeout;
 8000662:	683a      	ldr	r2, [r7, #0]
 8000664:	4b3f      	ldr	r3, [pc, #252]	; (8000764 <waitFor+0x11c>)
 8000666:	601a      	str	r2, [r3, #0]

	while ((Tail==Head)&&TIMEOUT);  // let's wait for the data to show up
 8000668:	46c0      	nop			; (mov r8, r8)
 800066a:	4b3f      	ldr	r3, [pc, #252]	; (8000768 <waitFor+0x120>)
 800066c:	881a      	ldrh	r2, [r3, #0]
 800066e:	4b3f      	ldr	r3, [pc, #252]	; (800076c <waitFor+0x124>)
 8000670:	881b      	ldrh	r3, [r3, #0]
 8000672:	429a      	cmp	r2, r3
 8000674:	d103      	bne.n	800067e <waitFor+0x36>
 8000676:	4b3b      	ldr	r3, [pc, #236]	; (8000764 <waitFor+0x11c>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d1f5      	bne.n	800066a <waitFor+0x22>
	isDataAvailable = 0;
 800067e:	4b3c      	ldr	r3, [pc, #240]	; (8000770 <waitFor+0x128>)
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]

again:

	/* If the data doesn't show up, then return 0 */
	if (TIMEOUT <= 0) return 0;
 8000684:	4b37      	ldr	r3, [pc, #220]	; (8000764 <waitFor+0x11c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	dc1b      	bgt.n	80006c4 <waitFor+0x7c>
 800068c:	2300      	movs	r3, #0
 800068e:	e065      	b.n	800075c <waitFor+0x114>
	/* if the incoming data does not match with the string, we will simply increment the index
	 * And wait for the string to arrive in the incoming data
	 * */
	while (MainBuf[Tail] != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (TIMEOUT <= 0) return 0;
 8000690:	4b34      	ldr	r3, [pc, #208]	; (8000764 <waitFor+0x11c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	dc01      	bgt.n	800069c <waitFor+0x54>
 8000698:	2300      	movs	r3, #0
 800069a:	e05f      	b.n	800075c <waitFor+0x114>


		if (Tail == Head) goto again;
 800069c:	4b32      	ldr	r3, [pc, #200]	; (8000768 <waitFor+0x120>)
 800069e:	881a      	ldrh	r2, [r3, #0]
 80006a0:	4b32      	ldr	r3, [pc, #200]	; (800076c <waitFor+0x124>)
 80006a2:	881b      	ldrh	r3, [r3, #0]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d100      	bne.n	80006aa <waitFor+0x62>
 80006a8:	e7ec      	b.n	8000684 <waitFor+0x3c>
		Tail++;
 80006aa:	4b2f      	ldr	r3, [pc, #188]	; (8000768 <waitFor+0x120>)
 80006ac:	881b      	ldrh	r3, [r3, #0]
 80006ae:	3301      	adds	r3, #1
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	4b2d      	ldr	r3, [pc, #180]	; (8000768 <waitFor+0x120>)
 80006b4:	801a      	strh	r2, [r3, #0]

		if (Tail==MainBuf_SIZE) Tail = 0;
 80006b6:	4b2c      	ldr	r3, [pc, #176]	; (8000768 <waitFor+0x120>)
 80006b8:	881b      	ldrh	r3, [r3, #0]
 80006ba:	2b28      	cmp	r3, #40	; 0x28
 80006bc:	d102      	bne.n	80006c4 <waitFor+0x7c>
 80006be:	4b2a      	ldr	r3, [pc, #168]	; (8000768 <waitFor+0x120>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	801a      	strh	r2, [r3, #0]
	while (MainBuf[Tail] != string[so_far])  // peek in the rx_buffer to see if we get the string
 80006c4:	4b28      	ldr	r3, [pc, #160]	; (8000768 <waitFor+0x120>)
 80006c6:	881b      	ldrh	r3, [r3, #0]
 80006c8:	001a      	movs	r2, r3
 80006ca:	4b2a      	ldr	r3, [pc, #168]	; (8000774 <waitFor+0x12c>)
 80006cc:	5c9a      	ldrb	r2, [r3, r2]
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	6879      	ldr	r1, [r7, #4]
 80006d2:	18cb      	adds	r3, r1, r3
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d1da      	bne.n	8000690 <waitFor+0x48>
	}

	/* If the incoming data does match with the string, we will return 1 to indicate this */
	while (MainBuf[Tail] == string[so_far]) // if we got the first letter of the string
 80006da:	e022      	b.n	8000722 <waitFor+0xda>
	{
		if (TIMEOUT <= 0) return 0;
 80006dc:	4b21      	ldr	r3, [pc, #132]	; (8000764 <waitFor+0x11c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	dc01      	bgt.n	80006e8 <waitFor+0xa0>
 80006e4:	2300      	movs	r3, #0
 80006e6:	e039      	b.n	800075c <waitFor+0x114>
		so_far++;
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	3301      	adds	r3, #1
 80006ec:	60fb      	str	r3, [r7, #12]

		if (Tail == Head) goto again;
 80006ee:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <waitFor+0x120>)
 80006f0:	881a      	ldrh	r2, [r3, #0]
 80006f2:	4b1e      	ldr	r3, [pc, #120]	; (800076c <waitFor+0x124>)
 80006f4:	881b      	ldrh	r3, [r3, #0]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d100      	bne.n	80006fc <waitFor+0xb4>
 80006fa:	e7c3      	b.n	8000684 <waitFor+0x3c>
		Tail++;
 80006fc:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <waitFor+0x120>)
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	3301      	adds	r3, #1
 8000702:	b29a      	uxth	r2, r3
 8000704:	4b18      	ldr	r3, [pc, #96]	; (8000768 <waitFor+0x120>)
 8000706:	801a      	strh	r2, [r3, #0]
		if (Tail==MainBuf_SIZE) Tail = 0;
 8000708:	4b17      	ldr	r3, [pc, #92]	; (8000768 <waitFor+0x120>)
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	2b28      	cmp	r3, #40	; 0x28
 800070e:	d102      	bne.n	8000716 <waitFor+0xce>
 8000710:	4b15      	ldr	r3, [pc, #84]	; (8000768 <waitFor+0x120>)
 8000712:	2200      	movs	r2, #0
 8000714:	801a      	strh	r2, [r3, #0]
		if (so_far == len) return 1;
 8000716:	68fa      	ldr	r2, [r7, #12]
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	429a      	cmp	r2, r3
 800071c:	d101      	bne.n	8000722 <waitFor+0xda>
 800071e:	2301      	movs	r3, #1
 8000720:	e01c      	b.n	800075c <waitFor+0x114>
	while (MainBuf[Tail] == string[so_far]) // if we got the first letter of the string
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <waitFor+0x120>)
 8000724:	881b      	ldrh	r3, [r3, #0]
 8000726:	001a      	movs	r2, r3
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <waitFor+0x12c>)
 800072a:	5c9a      	ldrb	r2, [r3, r2]
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	6879      	ldr	r1, [r7, #4]
 8000730:	18cb      	adds	r3, r1, r3
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	429a      	cmp	r2, r3
 8000736:	d0d1      	beq.n	80006dc <waitFor+0x94>
//	{
//		so_far = 0;
//		goto again;
//	}

	HAL_Delay (100);
 8000738:	2064      	movs	r0, #100	; 0x64
 800073a:	f000 f95b 	bl	80009f4 <HAL_Delay>

	if ((so_far!=len)&&isDataAvailable)
 800073e:	68fa      	ldr	r2, [r7, #12]
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	429a      	cmp	r2, r3
 8000744:	d007      	beq.n	8000756 <waitFor+0x10e>
 8000746:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <waitFor+0x128>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d003      	beq.n	8000756 <waitFor+0x10e>
	{
		isDataAvailable = 0;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <waitFor+0x128>)
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
//		so_far = 0;
		goto again;
 8000754:	e796      	b.n	8000684 <waitFor+0x3c>
	}
	else
	{
		so_far = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
		goto again;
 800075a:	e793      	b.n	8000684 <waitFor+0x3c>
	}


	return 0;
}
 800075c:	0018      	movs	r0, r3
 800075e:	46bd      	mov	sp, r7
 8000760:	b004      	add	sp, #16
 8000762:	bd80      	pop	{r7, pc}
 8000764:	2000013c 	.word	0x2000013c
 8000768:	20000132 	.word	0x20000132
 800076c:	20000130 	.word	0x20000130
 8000770:	20000134 	.word	0x20000134
 8000774:	20000104 	.word	0x20000104

08000778 <HAL_UARTEx_RxEventCallback>:




void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000778:	b590      	push	{r4, r7, lr}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	000a      	movs	r2, r1
 8000782:	1cbb      	adds	r3, r7, #2
 8000784:	801a      	strh	r2, [r3, #0]
		isDataAvailable = 1;
 8000786:	4b4b      	ldr	r3, [pc, #300]	; (80008b4 <HAL_UARTEx_RxEventCallback+0x13c>)
 8000788:	2201      	movs	r2, #1
 800078a:	601a      	str	r2, [r3, #0]

		oldPos = newPos;  // Update the last position before copying new data
 800078c:	4b4a      	ldr	r3, [pc, #296]	; (80008b8 <HAL_UARTEx_RxEventCallback+0x140>)
 800078e:	881a      	ldrh	r2, [r3, #0]
 8000790:	4b4a      	ldr	r3, [pc, #296]	; (80008bc <HAL_UARTEx_RxEventCallback+0x144>)
 8000792:	801a      	strh	r2, [r3, #0]

		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (oldPos+Size > MainBuf_SIZE)  // If the current position + new data size is greater than the main buffer
 8000794:	4b49      	ldr	r3, [pc, #292]	; (80008bc <HAL_UARTEx_RxEventCallback+0x144>)
 8000796:	881b      	ldrh	r3, [r3, #0]
 8000798:	001a      	movs	r2, r3
 800079a:	1cbb      	adds	r3, r7, #2
 800079c:	881b      	ldrh	r3, [r3, #0]
 800079e:	18d3      	adds	r3, r2, r3
 80007a0:	2b28      	cmp	r3, #40	; 0x28
 80007a2:	dd2b      	ble.n	80007fc <HAL_UARTEx_RxEventCallback+0x84>
		{
			uint16_t datatocopy = MainBuf_SIZE-oldPos;  // find out how much space is left in the main buffer
 80007a4:	4b45      	ldr	r3, [pc, #276]	; (80008bc <HAL_UARTEx_RxEventCallback+0x144>)
 80007a6:	881a      	ldrh	r2, [r3, #0]
 80007a8:	240a      	movs	r4, #10
 80007aa:	193b      	adds	r3, r7, r4
 80007ac:	2128      	movs	r1, #40	; 0x28
 80007ae:	1a8a      	subs	r2, r1, r2
 80007b0:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)RxBuf, datatocopy);  // copy data in that remaining space
 80007b2:	4b42      	ldr	r3, [pc, #264]	; (80008bc <HAL_UARTEx_RxEventCallback+0x144>)
 80007b4:	881b      	ldrh	r3, [r3, #0]
 80007b6:	001a      	movs	r2, r3
 80007b8:	4b41      	ldr	r3, [pc, #260]	; (80008c0 <HAL_UARTEx_RxEventCallback+0x148>)
 80007ba:	18d0      	adds	r0, r2, r3
 80007bc:	193b      	adds	r3, r7, r4
 80007be:	881a      	ldrh	r2, [r3, #0]
 80007c0:	4b40      	ldr	r3, [pc, #256]	; (80008c4 <HAL_UARTEx_RxEventCallback+0x14c>)
 80007c2:	0019      	movs	r1, r3
 80007c4:	f002 fd2e 	bl	8003224 <memcpy>

			oldPos = 0;  // point to the start of the buffer
 80007c8:	4b3c      	ldr	r3, [pc, #240]	; (80008bc <HAL_UARTEx_RxEventCallback+0x144>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainBuf, (uint8_t *)RxBuf+datatocopy, (Size-datatocopy));  // copy the remaining data
 80007ce:	193b      	adds	r3, r7, r4
 80007d0:	881a      	ldrh	r2, [r3, #0]
 80007d2:	4b3c      	ldr	r3, [pc, #240]	; (80008c4 <HAL_UARTEx_RxEventCallback+0x14c>)
 80007d4:	18d1      	adds	r1, r2, r3
 80007d6:	1cbb      	adds	r3, r7, #2
 80007d8:	881a      	ldrh	r2, [r3, #0]
 80007da:	193b      	adds	r3, r7, r4
 80007dc:	881b      	ldrh	r3, [r3, #0]
 80007de:	1ad3      	subs	r3, r2, r3
 80007e0:	001a      	movs	r2, r3
 80007e2:	4b37      	ldr	r3, [pc, #220]	; (80008c0 <HAL_UARTEx_RxEventCallback+0x148>)
 80007e4:	0018      	movs	r0, r3
 80007e6:	f002 fd1d 	bl	8003224 <memcpy>
			newPos = (Size-datatocopy);  // update the position
 80007ea:	1cba      	adds	r2, r7, #2
 80007ec:	193b      	adds	r3, r7, r4
 80007ee:	8812      	ldrh	r2, [r2, #0]
 80007f0:	881b      	ldrh	r3, [r3, #0]
 80007f2:	1ad3      	subs	r3, r2, r3
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	4b30      	ldr	r3, [pc, #192]	; (80008b8 <HAL_UARTEx_RxEventCallback+0x140>)
 80007f8:	801a      	strh	r2, [r3, #0]
 80007fa:	e012      	b.n	8000822 <HAL_UARTEx_RxEventCallback+0xaa>
		/* if the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)RxBuf, Size);
 80007fc:	4b2f      	ldr	r3, [pc, #188]	; (80008bc <HAL_UARTEx_RxEventCallback+0x144>)
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	001a      	movs	r2, r3
 8000802:	4b2f      	ldr	r3, [pc, #188]	; (80008c0 <HAL_UARTEx_RxEventCallback+0x148>)
 8000804:	18d0      	adds	r0, r2, r3
 8000806:	1cbb      	adds	r3, r7, #2
 8000808:	881a      	ldrh	r2, [r3, #0]
 800080a:	4b2e      	ldr	r3, [pc, #184]	; (80008c4 <HAL_UARTEx_RxEventCallback+0x14c>)
 800080c:	0019      	movs	r1, r3
 800080e:	f002 fd09 	bl	8003224 <memcpy>
			newPos = Size+oldPos;
 8000812:	4b2a      	ldr	r3, [pc, #168]	; (80008bc <HAL_UARTEx_RxEventCallback+0x144>)
 8000814:	881a      	ldrh	r2, [r3, #0]
 8000816:	1cbb      	adds	r3, r7, #2
 8000818:	881b      	ldrh	r3, [r3, #0]
 800081a:	18d3      	adds	r3, r2, r3
 800081c:	b29a      	uxth	r2, r3
 800081e:	4b26      	ldr	r3, [pc, #152]	; (80008b8 <HAL_UARTEx_RxEventCallback+0x140>)
 8000820:	801a      	strh	r2, [r3, #0]

		/* Update the position of the Head
		 * If the current position + new size is less then the buffer size, Head will update normally
		 * Or else the head will be at the new position from the beginning
		 */
		if (Head+Size < MainBuf_SIZE) Head = Head+Size;
 8000822:	4b29      	ldr	r3, [pc, #164]	; (80008c8 <HAL_UARTEx_RxEventCallback+0x150>)
 8000824:	881b      	ldrh	r3, [r3, #0]
 8000826:	001a      	movs	r2, r3
 8000828:	1cbb      	adds	r3, r7, #2
 800082a:	881b      	ldrh	r3, [r3, #0]
 800082c:	18d3      	adds	r3, r2, r3
 800082e:	2b27      	cmp	r3, #39	; 0x27
 8000830:	dc08      	bgt.n	8000844 <HAL_UARTEx_RxEventCallback+0xcc>
 8000832:	4b25      	ldr	r3, [pc, #148]	; (80008c8 <HAL_UARTEx_RxEventCallback+0x150>)
 8000834:	881a      	ldrh	r2, [r3, #0]
 8000836:	1cbb      	adds	r3, r7, #2
 8000838:	881b      	ldrh	r3, [r3, #0]
 800083a:	18d3      	adds	r3, r2, r3
 800083c:	b29a      	uxth	r2, r3
 800083e:	4b22      	ldr	r3, [pc, #136]	; (80008c8 <HAL_UARTEx_RxEventCallback+0x150>)
 8000840:	801a      	strh	r2, [r3, #0]
 8000842:	e009      	b.n	8000858 <HAL_UARTEx_RxEventCallback+0xe0>
		else Head = Head+Size - MainBuf_SIZE;
 8000844:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <HAL_UARTEx_RxEventCallback+0x150>)
 8000846:	881a      	ldrh	r2, [r3, #0]
 8000848:	1cbb      	adds	r3, r7, #2
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	18d3      	adds	r3, r2, r3
 800084e:	b29b      	uxth	r3, r3
 8000850:	3b28      	subs	r3, #40	; 0x28
 8000852:	b29a      	uxth	r2, r3
 8000854:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <HAL_UARTEx_RxEventCallback+0x150>)
 8000856:	801a      	strh	r2, [r3, #0]

		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&UART, (uint8_t *) RxBuf, RxBuf_SIZE);
 8000858:	491a      	ldr	r1, [pc, #104]	; (80008c4 <HAL_UARTEx_RxEventCallback+0x14c>)
 800085a:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <HAL_UARTEx_RxEventCallback+0x154>)
 800085c:	2214      	movs	r2, #20
 800085e:	0018      	movs	r0, r3
 8000860:	f002 fc4d 	bl	80030fe <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
 8000864:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <HAL_UARTEx_RxEventCallback+0x158>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <HAL_UARTEx_RxEventCallback+0x158>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	2104      	movs	r1, #4
 8000870:	438a      	bics	r2, r1
 8000872:	601a      	str	r2, [r3, #0]
	/****************** PROCESS (Little) THE DATA HERE *********************
	 * This is the PART OF  "isConfirmed" Function
	 */

	/* Let's say we want to check for the keyword "OK" within our incoming DATA */
	for (int i=0; i<Size; i++)
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	e011      	b.n	800089e <HAL_UARTEx_RxEventCallback+0x126>
	{
		if ((RxBuf[i] == 'O') && (RxBuf[i+1] == 'K'))
 800087a:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <HAL_UARTEx_RxEventCallback+0x14c>)
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	18d3      	adds	r3, r2, r3
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b4f      	cmp	r3, #79	; 0x4f
 8000884:	d108      	bne.n	8000898 <HAL_UARTEx_RxEventCallback+0x120>
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	3301      	adds	r3, #1
 800088a:	4a0e      	ldr	r2, [pc, #56]	; (80008c4 <HAL_UARTEx_RxEventCallback+0x14c>)
 800088c:	5cd3      	ldrb	r3, [r2, r3]
 800088e:	2b4b      	cmp	r3, #75	; 0x4b
 8000890:	d102      	bne.n	8000898 <HAL_UARTEx_RxEventCallback+0x120>
		{
			isOK = 1;
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <HAL_UARTEx_RxEventCallback+0x15c>)
 8000894:	2201      	movs	r2, #1
 8000896:	601a      	str	r2, [r3, #0]
	for (int i=0; i<Size; i++)
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	3301      	adds	r3, #1
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	1cbb      	adds	r3, r7, #2
 80008a0:	881b      	ldrh	r3, [r3, #0]
 80008a2:	68fa      	ldr	r2, [r7, #12]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	dbe8      	blt.n	800087a <HAL_UARTEx_RxEventCallback+0x102>
		}
	}
}
 80008a8:	46c0      	nop			; (mov r8, r8)
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	46bd      	mov	sp, r7
 80008ae:	b005      	add	sp, #20
 80008b0:	bd90      	pop	{r4, r7, pc}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	20000134 	.word	0x20000134
 80008b8:	2000012e 	.word	0x2000012e
 80008bc:	2000012c 	.word	0x2000012c
 80008c0:	20000104 	.word	0x20000104
 80008c4:	200000f0 	.word	0x200000f0
 80008c8:	20000130 	.word	0x20000130
 80008cc:	20000028 	.word	0x20000028
 80008d0:	200000ac 	.word	0x200000ac
 80008d4:	20000138 	.word	0x20000138

080008d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008d8:	480d      	ldr	r0, [pc, #52]	; (8000910 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008da:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008dc:	480d      	ldr	r0, [pc, #52]	; (8000914 <LoopForever+0x6>)
  ldr r1, =_edata
 80008de:	490e      	ldr	r1, [pc, #56]	; (8000918 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008e0:	4a0e      	ldr	r2, [pc, #56]	; (800091c <LoopForever+0xe>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e4:	e002      	b.n	80008ec <LoopCopyDataInit>

080008e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ea:	3304      	adds	r3, #4

080008ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f0:	d3f9      	bcc.n	80008e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f2:	4a0b      	ldr	r2, [pc, #44]	; (8000920 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008f4:	4c0b      	ldr	r4, [pc, #44]	; (8000924 <LoopForever+0x16>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f8:	e001      	b.n	80008fe <LoopFillZerobss>

080008fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008fc:	3204      	adds	r2, #4

080008fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000900:	d3fb      	bcc.n	80008fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000902:	f7ff fe5f 	bl	80005c4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000906:	f002 fc69 	bl	80031dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800090a:	f7ff fc91 	bl	8000230 <main>

0800090e <LoopForever>:

LoopForever:
    b LoopForever
 800090e:	e7fe      	b.n	800090e <LoopForever>
  ldr   r0, =_estack
 8000910:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000918:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800091c:	080032a8 	.word	0x080032a8
  ldr r2, =_sbss
 8000920:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000924:	20000144 	.word	0x20000144

08000928 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000928:	e7fe      	b.n	8000928 <ADC1_COMP_IRQHandler>
	...

0800092c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000930:	4b07      	ldr	r3, [pc, #28]	; (8000950 <HAL_Init+0x24>)
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <HAL_Init+0x24>)
 8000936:	2110      	movs	r1, #16
 8000938:	430a      	orrs	r2, r1
 800093a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800093c:	2003      	movs	r0, #3
 800093e:	f000 f809 	bl	8000954 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000942:	f7ff fd67 	bl	8000414 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000946:	2300      	movs	r3, #0
}
 8000948:	0018      	movs	r0, r3
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	40022000 	.word	0x40022000

08000954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800095c:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <HAL_InitTick+0x5c>)
 800095e:	681c      	ldr	r4, [r3, #0]
 8000960:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <HAL_InitTick+0x60>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	0019      	movs	r1, r3
 8000966:	23fa      	movs	r3, #250	; 0xfa
 8000968:	0098      	lsls	r0, r3, #2
 800096a:	f7ff fbd5 	bl	8000118 <__udivsi3>
 800096e:	0003      	movs	r3, r0
 8000970:	0019      	movs	r1, r3
 8000972:	0020      	movs	r0, r4
 8000974:	f7ff fbd0 	bl	8000118 <__udivsi3>
 8000978:	0003      	movs	r3, r0
 800097a:	0018      	movs	r0, r3
 800097c:	f000 f92f 	bl	8000bde <HAL_SYSTICK_Config>
 8000980:	1e03      	subs	r3, r0, #0
 8000982:	d001      	beq.n	8000988 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000984:	2301      	movs	r3, #1
 8000986:	e00f      	b.n	80009a8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2b03      	cmp	r3, #3
 800098c:	d80b      	bhi.n	80009a6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	2301      	movs	r3, #1
 8000992:	425b      	negs	r3, r3
 8000994:	2200      	movs	r2, #0
 8000996:	0018      	movs	r0, r3
 8000998:	f000 f8fc 	bl	8000b94 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_InitTick+0x64>)
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80009a2:	2300      	movs	r3, #0
 80009a4:	e000      	b.n	80009a8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
}
 80009a8:	0018      	movs	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	b003      	add	sp, #12
 80009ae:	bd90      	pop	{r4, r7, pc}
 80009b0:	20000000 	.word	0x20000000
 80009b4:	20000008 	.word	0x20000008
 80009b8:	20000004 	.word	0x20000004

080009bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <HAL_IncTick+0x1c>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	001a      	movs	r2, r3
 80009c6:	4b05      	ldr	r3, [pc, #20]	; (80009dc <HAL_IncTick+0x20>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	18d2      	adds	r2, r2, r3
 80009cc:	4b03      	ldr	r3, [pc, #12]	; (80009dc <HAL_IncTick+0x20>)
 80009ce:	601a      	str	r2, [r3, #0]
}
 80009d0:	46c0      	nop			; (mov r8, r8)
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	20000008 	.word	0x20000008
 80009dc:	20000140 	.word	0x20000140

080009e0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  return uwTick;
 80009e4:	4b02      	ldr	r3, [pc, #8]	; (80009f0 <HAL_GetTick+0x10>)
 80009e6:	681b      	ldr	r3, [r3, #0]
}
 80009e8:	0018      	movs	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	20000140 	.word	0x20000140

080009f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009fc:	f7ff fff0 	bl	80009e0 <HAL_GetTick>
 8000a00:	0003      	movs	r3, r0
 8000a02:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	d005      	beq.n	8000a1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a0e:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <HAL_Delay+0x44>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	001a      	movs	r2, r3
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	189b      	adds	r3, r3, r2
 8000a18:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	f7ff ffe0 	bl	80009e0 <HAL_GetTick>
 8000a20:	0002      	movs	r2, r0
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d8f7      	bhi.n	8000a1c <HAL_Delay+0x28>
  {
  }
}
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	46bd      	mov	sp, r7
 8000a32:	b004      	add	sp, #16
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	20000008 	.word	0x20000008

08000a3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	0002      	movs	r2, r0
 8000a44:	1dfb      	adds	r3, r7, #7
 8000a46:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a48:	1dfb      	adds	r3, r7, #7
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b7f      	cmp	r3, #127	; 0x7f
 8000a4e:	d809      	bhi.n	8000a64 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a50:	1dfb      	adds	r3, r7, #7
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	001a      	movs	r2, r3
 8000a56:	231f      	movs	r3, #31
 8000a58:	401a      	ands	r2, r3
 8000a5a:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <__NVIC_EnableIRQ+0x30>)
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	4091      	lsls	r1, r2
 8000a60:	000a      	movs	r2, r1
 8000a62:	601a      	str	r2, [r3, #0]
  }
}
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b002      	add	sp, #8
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	e000e100 	.word	0xe000e100

08000a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	0002      	movs	r2, r0
 8000a78:	6039      	str	r1, [r7, #0]
 8000a7a:	1dfb      	adds	r3, r7, #7
 8000a7c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a7e:	1dfb      	adds	r3, r7, #7
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b7f      	cmp	r3, #127	; 0x7f
 8000a84:	d828      	bhi.n	8000ad8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a86:	4a2f      	ldr	r2, [pc, #188]	; (8000b44 <__NVIC_SetPriority+0xd4>)
 8000a88:	1dfb      	adds	r3, r7, #7
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	b25b      	sxtb	r3, r3
 8000a8e:	089b      	lsrs	r3, r3, #2
 8000a90:	33c0      	adds	r3, #192	; 0xc0
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	589b      	ldr	r3, [r3, r2]
 8000a96:	1dfa      	adds	r2, r7, #7
 8000a98:	7812      	ldrb	r2, [r2, #0]
 8000a9a:	0011      	movs	r1, r2
 8000a9c:	2203      	movs	r2, #3
 8000a9e:	400a      	ands	r2, r1
 8000aa0:	00d2      	lsls	r2, r2, #3
 8000aa2:	21ff      	movs	r1, #255	; 0xff
 8000aa4:	4091      	lsls	r1, r2
 8000aa6:	000a      	movs	r2, r1
 8000aa8:	43d2      	mvns	r2, r2
 8000aaa:	401a      	ands	r2, r3
 8000aac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	019b      	lsls	r3, r3, #6
 8000ab2:	22ff      	movs	r2, #255	; 0xff
 8000ab4:	401a      	ands	r2, r3
 8000ab6:	1dfb      	adds	r3, r7, #7
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	0018      	movs	r0, r3
 8000abc:	2303      	movs	r3, #3
 8000abe:	4003      	ands	r3, r0
 8000ac0:	00db      	lsls	r3, r3, #3
 8000ac2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac4:	481f      	ldr	r0, [pc, #124]	; (8000b44 <__NVIC_SetPriority+0xd4>)
 8000ac6:	1dfb      	adds	r3, r7, #7
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	b25b      	sxtb	r3, r3
 8000acc:	089b      	lsrs	r3, r3, #2
 8000ace:	430a      	orrs	r2, r1
 8000ad0:	33c0      	adds	r3, #192	; 0xc0
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ad6:	e031      	b.n	8000b3c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad8:	4a1b      	ldr	r2, [pc, #108]	; (8000b48 <__NVIC_SetPriority+0xd8>)
 8000ada:	1dfb      	adds	r3, r7, #7
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	0019      	movs	r1, r3
 8000ae0:	230f      	movs	r3, #15
 8000ae2:	400b      	ands	r3, r1
 8000ae4:	3b08      	subs	r3, #8
 8000ae6:	089b      	lsrs	r3, r3, #2
 8000ae8:	3306      	adds	r3, #6
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	18d3      	adds	r3, r2, r3
 8000aee:	3304      	adds	r3, #4
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	1dfa      	adds	r2, r7, #7
 8000af4:	7812      	ldrb	r2, [r2, #0]
 8000af6:	0011      	movs	r1, r2
 8000af8:	2203      	movs	r2, #3
 8000afa:	400a      	ands	r2, r1
 8000afc:	00d2      	lsls	r2, r2, #3
 8000afe:	21ff      	movs	r1, #255	; 0xff
 8000b00:	4091      	lsls	r1, r2
 8000b02:	000a      	movs	r2, r1
 8000b04:	43d2      	mvns	r2, r2
 8000b06:	401a      	ands	r2, r3
 8000b08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	019b      	lsls	r3, r3, #6
 8000b0e:	22ff      	movs	r2, #255	; 0xff
 8000b10:	401a      	ands	r2, r3
 8000b12:	1dfb      	adds	r3, r7, #7
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	0018      	movs	r0, r3
 8000b18:	2303      	movs	r3, #3
 8000b1a:	4003      	ands	r3, r0
 8000b1c:	00db      	lsls	r3, r3, #3
 8000b1e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b20:	4809      	ldr	r0, [pc, #36]	; (8000b48 <__NVIC_SetPriority+0xd8>)
 8000b22:	1dfb      	adds	r3, r7, #7
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	001c      	movs	r4, r3
 8000b28:	230f      	movs	r3, #15
 8000b2a:	4023      	ands	r3, r4
 8000b2c:	3b08      	subs	r3, #8
 8000b2e:	089b      	lsrs	r3, r3, #2
 8000b30:	430a      	orrs	r2, r1
 8000b32:	3306      	adds	r3, #6
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	18c3      	adds	r3, r0, r3
 8000b38:	3304      	adds	r3, #4
 8000b3a:	601a      	str	r2, [r3, #0]
}
 8000b3c:	46c0      	nop			; (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	b003      	add	sp, #12
 8000b42:	bd90      	pop	{r4, r7, pc}
 8000b44:	e000e100 	.word	0xe000e100
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	1e5a      	subs	r2, r3, #1
 8000b58:	2380      	movs	r3, #128	; 0x80
 8000b5a:	045b      	lsls	r3, r3, #17
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d301      	bcc.n	8000b64 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b60:	2301      	movs	r3, #1
 8000b62:	e010      	b.n	8000b86 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b64:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <SysTick_Config+0x44>)
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	3a01      	subs	r2, #1
 8000b6a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	425b      	negs	r3, r3
 8000b70:	2103      	movs	r1, #3
 8000b72:	0018      	movs	r0, r3
 8000b74:	f7ff ff7c 	bl	8000a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <SysTick_Config+0x44>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b7e:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <SysTick_Config+0x44>)
 8000b80:	2207      	movs	r2, #7
 8000b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	0018      	movs	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	b002      	add	sp, #8
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	e000e010 	.word	0xe000e010

08000b94 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60b9      	str	r1, [r7, #8]
 8000b9c:	607a      	str	r2, [r7, #4]
 8000b9e:	210f      	movs	r1, #15
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	1c02      	adds	r2, r0, #0
 8000ba4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	187b      	adds	r3, r7, r1
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	b25b      	sxtb	r3, r3
 8000bae:	0011      	movs	r1, r2
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f7ff ff5d 	bl	8000a70 <__NVIC_SetPriority>
}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	b004      	add	sp, #16
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	0002      	movs	r2, r0
 8000bc6:	1dfb      	adds	r3, r7, #7
 8000bc8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	b25b      	sxtb	r3, r3
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f7ff ff33 	bl	8000a3c <__NVIC_EnableIRQ>
}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	b002      	add	sp, #8
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	0018      	movs	r0, r3
 8000bea:	f7ff ffaf 	bl	8000b4c <SysTick_Config>
 8000bee:	0003      	movs	r3, r0
}
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b002      	add	sp, #8
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d101      	bne.n	8000c0e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e036      	b.n	8000c7c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2221      	movs	r2, #33	; 0x21
 8000c12:	2102      	movs	r1, #2
 8000c14:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	4a18      	ldr	r2, [pc, #96]	; (8000c84 <HAL_DMA_Init+0x8c>)
 8000c22:	4013      	ands	r3, r2
 8000c24:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	695b      	ldr	r3, [r3, #20]
 8000c40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	69db      	ldr	r3, [r3, #28]
 8000c4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	68fa      	ldr	r2, [r7, #12]
 8000c5a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f000 f9c4 	bl	8000fec <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2200      	movs	r2, #0
 8000c68:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2221      	movs	r2, #33	; 0x21
 8000c6e:	2101      	movs	r1, #1
 8000c70:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2220      	movs	r2, #32
 8000c76:	2100      	movs	r1, #0
 8000c78:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000c7a:	2300      	movs	r3, #0
}  
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	b004      	add	sp, #16
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	ffffc00f 	.word	0xffffc00f

08000c88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
 8000c94:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000c96:	2317      	movs	r3, #23
 8000c98:	18fb      	adds	r3, r7, r3
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	2220      	movs	r2, #32
 8000ca2:	5c9b      	ldrb	r3, [r3, r2]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d101      	bne.n	8000cac <HAL_DMA_Start_IT+0x24>
 8000ca8:	2302      	movs	r3, #2
 8000caa:	e04f      	b.n	8000d4c <HAL_DMA_Start_IT+0xc4>
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2220      	movs	r2, #32
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	2221      	movs	r2, #33	; 0x21
 8000cb8:	5c9b      	ldrb	r3, [r3, r2]
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d13a      	bne.n	8000d36 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	2221      	movs	r2, #33	; 0x21
 8000cc4:	2102      	movs	r1, #2
 8000cc6:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2101      	movs	r1, #1
 8000cda:	438a      	bics	r2, r1
 8000cdc:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	68b9      	ldr	r1, [r7, #8]
 8000ce4:	68f8      	ldr	r0, [r7, #12]
 8000ce6:	f000 f954 	bl	8000f92 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d008      	beq.n	8000d04 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	210e      	movs	r1, #14
 8000cfe:	430a      	orrs	r2, r1
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	e00f      	b.n	8000d24 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	210a      	movs	r1, #10
 8000d10:	430a      	orrs	r2, r1
 8000d12:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2104      	movs	r1, #4
 8000d20:	438a      	bics	r2, r1
 8000d22:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2101      	movs	r1, #1
 8000d30:	430a      	orrs	r2, r1
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	e007      	b.n	8000d46 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	2220      	movs	r2, #32
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000d3e:	2317      	movs	r3, #23
 8000d40:	18fb      	adds	r3, r7, r3
 8000d42:	2202      	movs	r2, #2
 8000d44:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8000d46:	2317      	movs	r3, #23
 8000d48:	18fb      	adds	r3, r7, r3
 8000d4a:	781b      	ldrb	r3, [r3, #0]
} 
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b006      	add	sp, #24
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2221      	movs	r2, #33	; 0x21
 8000d60:	5c9b      	ldrb	r3, [r3, r2]
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d008      	beq.n	8000d7a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2204      	movs	r2, #4
 8000d6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2220      	movs	r2, #32
 8000d72:	2100      	movs	r1, #0
 8000d74:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e020      	b.n	8000dbc <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	210e      	movs	r1, #14
 8000d86:	438a      	bics	r2, r1
 8000d88:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2101      	movs	r1, #1
 8000d96:	438a      	bics	r2, r1
 8000d98:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000da2:	2101      	movs	r1, #1
 8000da4:	4091      	lsls	r1, r2
 8000da6:	000a      	movs	r2, r1
 8000da8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2221      	movs	r2, #33	; 0x21
 8000dae:	2101      	movs	r1, #1
 8000db0:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2220      	movs	r2, #32
 8000db6:	2100      	movs	r1, #0
 8000db8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000dba:	2300      	movs	r3, #0
}
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	b002      	add	sp, #8
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dcc:	210f      	movs	r1, #15
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2221      	movs	r2, #33	; 0x21
 8000dd8:	5c9b      	ldrb	r3, [r3, r2]
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d006      	beq.n	8000dee <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2204      	movs	r2, #4
 8000de4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000de6:	187b      	adds	r3, r7, r1
 8000de8:	2201      	movs	r2, #1
 8000dea:	701a      	strb	r2, [r3, #0]
 8000dec:	e028      	b.n	8000e40 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	210e      	movs	r1, #14
 8000dfa:	438a      	bics	r2, r1
 8000dfc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2101      	movs	r1, #1
 8000e0a:	438a      	bics	r2, r1
 8000e0c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e16:	2101      	movs	r1, #1
 8000e18:	4091      	lsls	r1, r2
 8000e1a:	000a      	movs	r2, r1
 8000e1c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2221      	movs	r2, #33	; 0x21
 8000e22:	2101      	movs	r1, #1
 8000e24:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2220      	movs	r2, #32
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d004      	beq.n	8000e40 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	0010      	movs	r0, r2
 8000e3e:	4798      	blx	r3
    } 
  }
  return status;
 8000e40:	230f      	movs	r3, #15
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	781b      	ldrb	r3, [r3, #0]
}
 8000e46:	0018      	movs	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	b004      	add	sp, #16
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b084      	sub	sp, #16
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	2204      	movs	r2, #4
 8000e6c:	409a      	lsls	r2, r3
 8000e6e:	0013      	movs	r3, r2
 8000e70:	68fa      	ldr	r2, [r7, #12]
 8000e72:	4013      	ands	r3, r2
 8000e74:	d024      	beq.n	8000ec0 <HAL_DMA_IRQHandler+0x72>
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	2204      	movs	r2, #4
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	d020      	beq.n	8000ec0 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2220      	movs	r2, #32
 8000e86:	4013      	ands	r3, r2
 8000e88:	d107      	bne.n	8000e9a <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2104      	movs	r1, #4
 8000e96:	438a      	bics	r2, r1
 8000e98:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ea2:	2104      	movs	r1, #4
 8000ea4:	4091      	lsls	r1, r2
 8000ea6:	000a      	movs	r2, r1
 8000ea8:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d100      	bne.n	8000eb4 <HAL_DMA_IRQHandler+0x66>
 8000eb2:	e06a      	b.n	8000f8a <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	0010      	movs	r0, r2
 8000ebc:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000ebe:	e064      	b.n	8000f8a <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	409a      	lsls	r2, r3
 8000ec8:	0013      	movs	r3, r2
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	d02b      	beq.n	8000f28 <HAL_DMA_IRQHandler+0xda>
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	d027      	beq.n	8000f28 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2220      	movs	r2, #32
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	d10b      	bne.n	8000efc <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	210a      	movs	r1, #10
 8000ef0:	438a      	bics	r2, r1
 8000ef2:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2221      	movs	r2, #33	; 0x21
 8000ef8:	2101      	movs	r1, #1
 8000efa:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f04:	2102      	movs	r1, #2
 8000f06:	4091      	lsls	r1, r2
 8000f08:	000a      	movs	r2, r1
 8000f0a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2220      	movs	r2, #32
 8000f10:	2100      	movs	r1, #0
 8000f12:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d036      	beq.n	8000f8a <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	0010      	movs	r0, r2
 8000f24:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000f26:	e030      	b.n	8000f8a <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2c:	2208      	movs	r2, #8
 8000f2e:	409a      	lsls	r2, r3
 8000f30:	0013      	movs	r3, r2
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	4013      	ands	r3, r2
 8000f36:	d028      	beq.n	8000f8a <HAL_DMA_IRQHandler+0x13c>
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	2208      	movs	r2, #8
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	d024      	beq.n	8000f8a <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	210e      	movs	r1, #14
 8000f4c:	438a      	bics	r2, r1
 8000f4e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f58:	2101      	movs	r1, #1
 8000f5a:	4091      	lsls	r1, r2
 8000f5c:	000a      	movs	r2, r1
 8000f5e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2201      	movs	r2, #1
 8000f64:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2221      	movs	r2, #33	; 0x21
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2220      	movs	r2, #32
 8000f72:	2100      	movs	r1, #0
 8000f74:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d005      	beq.n	8000f8a <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	0010      	movs	r0, r2
 8000f86:	4798      	blx	r3
    }
   }
}  
 8000f88:	e7ff      	b.n	8000f8a <HAL_DMA_IRQHandler+0x13c>
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	b004      	add	sp, #16
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b084      	sub	sp, #16
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	60f8      	str	r0, [r7, #12]
 8000f9a:	60b9      	str	r1, [r7, #8]
 8000f9c:	607a      	str	r2, [r7, #4]
 8000f9e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fa8:	2101      	movs	r1, #1
 8000faa:	4091      	lsls	r1, r2
 8000fac:	000a      	movs	r2, r1
 8000fae:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	683a      	ldr	r2, [r7, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b10      	cmp	r3, #16
 8000fbe:	d108      	bne.n	8000fd2 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	68ba      	ldr	r2, [r7, #8]
 8000fce:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000fd0:	e007      	b.n	8000fe2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	60da      	str	r2, [r3, #12]
}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b004      	add	sp, #16
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a08      	ldr	r2, [pc, #32]	; (800101c <DMA_CalcBaseAndBitshift+0x30>)
 8000ffa:	4694      	mov	ip, r2
 8000ffc:	4463      	add	r3, ip
 8000ffe:	2114      	movs	r1, #20
 8001000:	0018      	movs	r0, r3
 8001002:	f7ff f889 	bl	8000118 <__udivsi3>
 8001006:	0003      	movs	r3, r0
 8001008:	009a      	lsls	r2, r3, #2
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a03      	ldr	r2, [pc, #12]	; (8001020 <DMA_CalcBaseAndBitshift+0x34>)
 8001012:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001014:	46c0      	nop			; (mov r8, r8)
 8001016:	46bd      	mov	sp, r7
 8001018:	b002      	add	sp, #8
 800101a:	bd80      	pop	{r7, pc}
 800101c:	bffdfff8 	.word	0xbffdfff8
 8001020:	40020000 	.word	0x40020000

08001024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001032:	e155      	b.n	80012e0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2101      	movs	r1, #1
 800103a:	697a      	ldr	r2, [r7, #20]
 800103c:	4091      	lsls	r1, r2
 800103e:	000a      	movs	r2, r1
 8001040:	4013      	ands	r3, r2
 8001042:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d100      	bne.n	800104c <HAL_GPIO_Init+0x28>
 800104a:	e146      	b.n	80012da <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	2203      	movs	r2, #3
 8001052:	4013      	ands	r3, r2
 8001054:	2b01      	cmp	r3, #1
 8001056:	d005      	beq.n	8001064 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2203      	movs	r2, #3
 800105e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001060:	2b02      	cmp	r3, #2
 8001062:	d130      	bne.n	80010c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	2203      	movs	r2, #3
 8001070:	409a      	lsls	r2, r3
 8001072:	0013      	movs	r3, r2
 8001074:	43da      	mvns	r2, r3
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	68da      	ldr	r2, [r3, #12]
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	409a      	lsls	r2, r3
 8001086:	0013      	movs	r3, r2
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800109a:	2201      	movs	r2, #1
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	409a      	lsls	r2, r3
 80010a0:	0013      	movs	r3, r2
 80010a2:	43da      	mvns	r2, r3
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	091b      	lsrs	r3, r3, #4
 80010b0:	2201      	movs	r2, #1
 80010b2:	401a      	ands	r2, r3
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	409a      	lsls	r2, r3
 80010b8:	0013      	movs	r3, r2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2203      	movs	r2, #3
 80010cc:	4013      	ands	r3, r2
 80010ce:	2b03      	cmp	r3, #3
 80010d0:	d017      	beq.n	8001102 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	2203      	movs	r2, #3
 80010de:	409a      	lsls	r2, r3
 80010e0:	0013      	movs	r3, r2
 80010e2:	43da      	mvns	r2, r3
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	689a      	ldr	r2, [r3, #8]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	409a      	lsls	r2, r3
 80010f4:	0013      	movs	r3, r2
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2203      	movs	r2, #3
 8001108:	4013      	ands	r3, r2
 800110a:	2b02      	cmp	r3, #2
 800110c:	d123      	bne.n	8001156 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	08da      	lsrs	r2, r3, #3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3208      	adds	r2, #8
 8001116:	0092      	lsls	r2, r2, #2
 8001118:	58d3      	ldr	r3, [r2, r3]
 800111a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	2207      	movs	r2, #7
 8001120:	4013      	ands	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	220f      	movs	r2, #15
 8001126:	409a      	lsls	r2, r3
 8001128:	0013      	movs	r3, r2
 800112a:	43da      	mvns	r2, r3
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	691a      	ldr	r2, [r3, #16]
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	2107      	movs	r1, #7
 800113a:	400b      	ands	r3, r1
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	409a      	lsls	r2, r3
 8001140:	0013      	movs	r3, r2
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	08da      	lsrs	r2, r3, #3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3208      	adds	r2, #8
 8001150:	0092      	lsls	r2, r2, #2
 8001152:	6939      	ldr	r1, [r7, #16]
 8001154:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	2203      	movs	r2, #3
 8001162:	409a      	lsls	r2, r3
 8001164:	0013      	movs	r3, r2
 8001166:	43da      	mvns	r2, r3
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4013      	ands	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2203      	movs	r2, #3
 8001174:	401a      	ands	r2, r3
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	409a      	lsls	r2, r3
 800117c:	0013      	movs	r3, r2
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	23c0      	movs	r3, #192	; 0xc0
 8001190:	029b      	lsls	r3, r3, #10
 8001192:	4013      	ands	r3, r2
 8001194:	d100      	bne.n	8001198 <HAL_GPIO_Init+0x174>
 8001196:	e0a0      	b.n	80012da <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001198:	4b57      	ldr	r3, [pc, #348]	; (80012f8 <HAL_GPIO_Init+0x2d4>)
 800119a:	699a      	ldr	r2, [r3, #24]
 800119c:	4b56      	ldr	r3, [pc, #344]	; (80012f8 <HAL_GPIO_Init+0x2d4>)
 800119e:	2101      	movs	r1, #1
 80011a0:	430a      	orrs	r2, r1
 80011a2:	619a      	str	r2, [r3, #24]
 80011a4:	4b54      	ldr	r3, [pc, #336]	; (80012f8 <HAL_GPIO_Init+0x2d4>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	2201      	movs	r2, #1
 80011aa:	4013      	ands	r3, r2
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011b0:	4a52      	ldr	r2, [pc, #328]	; (80012fc <HAL_GPIO_Init+0x2d8>)
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	089b      	lsrs	r3, r3, #2
 80011b6:	3302      	adds	r3, #2
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	589b      	ldr	r3, [r3, r2]
 80011bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	2203      	movs	r2, #3
 80011c2:	4013      	ands	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	220f      	movs	r2, #15
 80011c8:	409a      	lsls	r2, r3
 80011ca:	0013      	movs	r3, r2
 80011cc:	43da      	mvns	r2, r3
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	4013      	ands	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	2390      	movs	r3, #144	; 0x90
 80011d8:	05db      	lsls	r3, r3, #23
 80011da:	429a      	cmp	r2, r3
 80011dc:	d019      	beq.n	8001212 <HAL_GPIO_Init+0x1ee>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a47      	ldr	r2, [pc, #284]	; (8001300 <HAL_GPIO_Init+0x2dc>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d013      	beq.n	800120e <HAL_GPIO_Init+0x1ea>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a46      	ldr	r2, [pc, #280]	; (8001304 <HAL_GPIO_Init+0x2e0>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d00d      	beq.n	800120a <HAL_GPIO_Init+0x1e6>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a45      	ldr	r2, [pc, #276]	; (8001308 <HAL_GPIO_Init+0x2e4>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d007      	beq.n	8001206 <HAL_GPIO_Init+0x1e2>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a44      	ldr	r2, [pc, #272]	; (800130c <HAL_GPIO_Init+0x2e8>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d101      	bne.n	8001202 <HAL_GPIO_Init+0x1de>
 80011fe:	2304      	movs	r3, #4
 8001200:	e008      	b.n	8001214 <HAL_GPIO_Init+0x1f0>
 8001202:	2305      	movs	r3, #5
 8001204:	e006      	b.n	8001214 <HAL_GPIO_Init+0x1f0>
 8001206:	2303      	movs	r3, #3
 8001208:	e004      	b.n	8001214 <HAL_GPIO_Init+0x1f0>
 800120a:	2302      	movs	r3, #2
 800120c:	e002      	b.n	8001214 <HAL_GPIO_Init+0x1f0>
 800120e:	2301      	movs	r3, #1
 8001210:	e000      	b.n	8001214 <HAL_GPIO_Init+0x1f0>
 8001212:	2300      	movs	r3, #0
 8001214:	697a      	ldr	r2, [r7, #20]
 8001216:	2103      	movs	r1, #3
 8001218:	400a      	ands	r2, r1
 800121a:	0092      	lsls	r2, r2, #2
 800121c:	4093      	lsls	r3, r2
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001224:	4935      	ldr	r1, [pc, #212]	; (80012fc <HAL_GPIO_Init+0x2d8>)
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	089b      	lsrs	r3, r3, #2
 800122a:	3302      	adds	r3, #2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001232:	4b37      	ldr	r3, [pc, #220]	; (8001310 <HAL_GPIO_Init+0x2ec>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	43da      	mvns	r2, r3
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	4013      	ands	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685a      	ldr	r2, [r3, #4]
 8001246:	2380      	movs	r3, #128	; 0x80
 8001248:	025b      	lsls	r3, r3, #9
 800124a:	4013      	ands	r3, r2
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4313      	orrs	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001256:	4b2e      	ldr	r3, [pc, #184]	; (8001310 <HAL_GPIO_Init+0x2ec>)
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800125c:	4b2c      	ldr	r3, [pc, #176]	; (8001310 <HAL_GPIO_Init+0x2ec>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	43da      	mvns	r2, r3
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	4013      	ands	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685a      	ldr	r2, [r3, #4]
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	029b      	lsls	r3, r3, #10
 8001274:	4013      	ands	r3, r2
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	4313      	orrs	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001280:	4b23      	ldr	r3, [pc, #140]	; (8001310 <HAL_GPIO_Init+0x2ec>)
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001286:	4b22      	ldr	r3, [pc, #136]	; (8001310 <HAL_GPIO_Init+0x2ec>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	43da      	mvns	r2, r3
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	4013      	ands	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	2380      	movs	r3, #128	; 0x80
 800129c:	035b      	lsls	r3, r3, #13
 800129e:	4013      	ands	r3, r2
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012aa:	4b19      	ldr	r3, [pc, #100]	; (8001310 <HAL_GPIO_Init+0x2ec>)
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80012b0:	4b17      	ldr	r3, [pc, #92]	; (8001310 <HAL_GPIO_Init+0x2ec>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	43da      	mvns	r2, r3
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	4013      	ands	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	2380      	movs	r3, #128	; 0x80
 80012c6:	039b      	lsls	r3, r3, #14
 80012c8:	4013      	ands	r3, r2
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012d4:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <HAL_GPIO_Init+0x2ec>)
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	3301      	adds	r3, #1
 80012de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	40da      	lsrs	r2, r3
 80012e8:	1e13      	subs	r3, r2, #0
 80012ea:	d000      	beq.n	80012ee <HAL_GPIO_Init+0x2ca>
 80012ec:	e6a2      	b.n	8001034 <HAL_GPIO_Init+0x10>
  } 
}
 80012ee:	46c0      	nop			; (mov r8, r8)
 80012f0:	46c0      	nop			; (mov r8, r8)
 80012f2:	46bd      	mov	sp, r7
 80012f4:	b006      	add	sp, #24
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40010000 	.word	0x40010000
 8001300:	48000400 	.word	0x48000400
 8001304:	48000800 	.word	0x48000800
 8001308:	48000c00 	.word	0x48000c00
 800130c:	48001000 	.word	0x48001000
 8001310:	40010400 	.word	0x40010400

08001314 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d102      	bne.n	8001328 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	f000 fb76 	bl	8001a14 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2201      	movs	r2, #1
 800132e:	4013      	ands	r3, r2
 8001330:	d100      	bne.n	8001334 <HAL_RCC_OscConfig+0x20>
 8001332:	e08e      	b.n	8001452 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001334:	4bc5      	ldr	r3, [pc, #788]	; (800164c <HAL_RCC_OscConfig+0x338>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	220c      	movs	r2, #12
 800133a:	4013      	ands	r3, r2
 800133c:	2b04      	cmp	r3, #4
 800133e:	d00e      	beq.n	800135e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001340:	4bc2      	ldr	r3, [pc, #776]	; (800164c <HAL_RCC_OscConfig+0x338>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	220c      	movs	r2, #12
 8001346:	4013      	ands	r3, r2
 8001348:	2b08      	cmp	r3, #8
 800134a:	d117      	bne.n	800137c <HAL_RCC_OscConfig+0x68>
 800134c:	4bbf      	ldr	r3, [pc, #764]	; (800164c <HAL_RCC_OscConfig+0x338>)
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	23c0      	movs	r3, #192	; 0xc0
 8001352:	025b      	lsls	r3, r3, #9
 8001354:	401a      	ands	r2, r3
 8001356:	2380      	movs	r3, #128	; 0x80
 8001358:	025b      	lsls	r3, r3, #9
 800135a:	429a      	cmp	r2, r3
 800135c:	d10e      	bne.n	800137c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800135e:	4bbb      	ldr	r3, [pc, #748]	; (800164c <HAL_RCC_OscConfig+0x338>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	2380      	movs	r3, #128	; 0x80
 8001364:	029b      	lsls	r3, r3, #10
 8001366:	4013      	ands	r3, r2
 8001368:	d100      	bne.n	800136c <HAL_RCC_OscConfig+0x58>
 800136a:	e071      	b.n	8001450 <HAL_RCC_OscConfig+0x13c>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d000      	beq.n	8001376 <HAL_RCC_OscConfig+0x62>
 8001374:	e06c      	b.n	8001450 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	f000 fb4c 	bl	8001a14 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d107      	bne.n	8001394 <HAL_RCC_OscConfig+0x80>
 8001384:	4bb1      	ldr	r3, [pc, #708]	; (800164c <HAL_RCC_OscConfig+0x338>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4bb0      	ldr	r3, [pc, #704]	; (800164c <HAL_RCC_OscConfig+0x338>)
 800138a:	2180      	movs	r1, #128	; 0x80
 800138c:	0249      	lsls	r1, r1, #9
 800138e:	430a      	orrs	r2, r1
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	e02f      	b.n	80013f4 <HAL_RCC_OscConfig+0xe0>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d10c      	bne.n	80013b6 <HAL_RCC_OscConfig+0xa2>
 800139c:	4bab      	ldr	r3, [pc, #684]	; (800164c <HAL_RCC_OscConfig+0x338>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4baa      	ldr	r3, [pc, #680]	; (800164c <HAL_RCC_OscConfig+0x338>)
 80013a2:	49ab      	ldr	r1, [pc, #684]	; (8001650 <HAL_RCC_OscConfig+0x33c>)
 80013a4:	400a      	ands	r2, r1
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	4ba8      	ldr	r3, [pc, #672]	; (800164c <HAL_RCC_OscConfig+0x338>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4ba7      	ldr	r3, [pc, #668]	; (800164c <HAL_RCC_OscConfig+0x338>)
 80013ae:	49a9      	ldr	r1, [pc, #676]	; (8001654 <HAL_RCC_OscConfig+0x340>)
 80013b0:	400a      	ands	r2, r1
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	e01e      	b.n	80013f4 <HAL_RCC_OscConfig+0xe0>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b05      	cmp	r3, #5
 80013bc:	d10e      	bne.n	80013dc <HAL_RCC_OscConfig+0xc8>
 80013be:	4ba3      	ldr	r3, [pc, #652]	; (800164c <HAL_RCC_OscConfig+0x338>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	4ba2      	ldr	r3, [pc, #648]	; (800164c <HAL_RCC_OscConfig+0x338>)
 80013c4:	2180      	movs	r1, #128	; 0x80
 80013c6:	02c9      	lsls	r1, r1, #11
 80013c8:	430a      	orrs	r2, r1
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	4b9f      	ldr	r3, [pc, #636]	; (800164c <HAL_RCC_OscConfig+0x338>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b9e      	ldr	r3, [pc, #632]	; (800164c <HAL_RCC_OscConfig+0x338>)
 80013d2:	2180      	movs	r1, #128	; 0x80
 80013d4:	0249      	lsls	r1, r1, #9
 80013d6:	430a      	orrs	r2, r1
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	e00b      	b.n	80013f4 <HAL_RCC_OscConfig+0xe0>
 80013dc:	4b9b      	ldr	r3, [pc, #620]	; (800164c <HAL_RCC_OscConfig+0x338>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4b9a      	ldr	r3, [pc, #616]	; (800164c <HAL_RCC_OscConfig+0x338>)
 80013e2:	499b      	ldr	r1, [pc, #620]	; (8001650 <HAL_RCC_OscConfig+0x33c>)
 80013e4:	400a      	ands	r2, r1
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	4b98      	ldr	r3, [pc, #608]	; (800164c <HAL_RCC_OscConfig+0x338>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b97      	ldr	r3, [pc, #604]	; (800164c <HAL_RCC_OscConfig+0x338>)
 80013ee:	4999      	ldr	r1, [pc, #612]	; (8001654 <HAL_RCC_OscConfig+0x340>)
 80013f0:	400a      	ands	r2, r1
 80013f2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d014      	beq.n	8001426 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fc:	f7ff faf0 	bl	80009e0 <HAL_GetTick>
 8001400:	0003      	movs	r3, r0
 8001402:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001406:	f7ff faeb 	bl	80009e0 <HAL_GetTick>
 800140a:	0002      	movs	r2, r0
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b64      	cmp	r3, #100	; 0x64
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e2fd      	b.n	8001a14 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001418:	4b8c      	ldr	r3, [pc, #560]	; (800164c <HAL_RCC_OscConfig+0x338>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	2380      	movs	r3, #128	; 0x80
 800141e:	029b      	lsls	r3, r3, #10
 8001420:	4013      	ands	r3, r2
 8001422:	d0f0      	beq.n	8001406 <HAL_RCC_OscConfig+0xf2>
 8001424:	e015      	b.n	8001452 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001426:	f7ff fadb 	bl	80009e0 <HAL_GetTick>
 800142a:	0003      	movs	r3, r0
 800142c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001430:	f7ff fad6 	bl	80009e0 <HAL_GetTick>
 8001434:	0002      	movs	r2, r0
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b64      	cmp	r3, #100	; 0x64
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e2e8      	b.n	8001a14 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001442:	4b82      	ldr	r3, [pc, #520]	; (800164c <HAL_RCC_OscConfig+0x338>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	2380      	movs	r3, #128	; 0x80
 8001448:	029b      	lsls	r3, r3, #10
 800144a:	4013      	ands	r3, r2
 800144c:	d1f0      	bne.n	8001430 <HAL_RCC_OscConfig+0x11c>
 800144e:	e000      	b.n	8001452 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001450:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2202      	movs	r2, #2
 8001458:	4013      	ands	r3, r2
 800145a:	d100      	bne.n	800145e <HAL_RCC_OscConfig+0x14a>
 800145c:	e06c      	b.n	8001538 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800145e:	4b7b      	ldr	r3, [pc, #492]	; (800164c <HAL_RCC_OscConfig+0x338>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	220c      	movs	r2, #12
 8001464:	4013      	ands	r3, r2
 8001466:	d00e      	beq.n	8001486 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001468:	4b78      	ldr	r3, [pc, #480]	; (800164c <HAL_RCC_OscConfig+0x338>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	220c      	movs	r2, #12
 800146e:	4013      	ands	r3, r2
 8001470:	2b08      	cmp	r3, #8
 8001472:	d11f      	bne.n	80014b4 <HAL_RCC_OscConfig+0x1a0>
 8001474:	4b75      	ldr	r3, [pc, #468]	; (800164c <HAL_RCC_OscConfig+0x338>)
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	23c0      	movs	r3, #192	; 0xc0
 800147a:	025b      	lsls	r3, r3, #9
 800147c:	401a      	ands	r2, r3
 800147e:	2380      	movs	r3, #128	; 0x80
 8001480:	021b      	lsls	r3, r3, #8
 8001482:	429a      	cmp	r2, r3
 8001484:	d116      	bne.n	80014b4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001486:	4b71      	ldr	r3, [pc, #452]	; (800164c <HAL_RCC_OscConfig+0x338>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2202      	movs	r2, #2
 800148c:	4013      	ands	r3, r2
 800148e:	d005      	beq.n	800149c <HAL_RCC_OscConfig+0x188>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d001      	beq.n	800149c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e2bb      	b.n	8001a14 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149c:	4b6b      	ldr	r3, [pc, #428]	; (800164c <HAL_RCC_OscConfig+0x338>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	22f8      	movs	r2, #248	; 0xf8
 80014a2:	4393      	bics	r3, r2
 80014a4:	0019      	movs	r1, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	00da      	lsls	r2, r3, #3
 80014ac:	4b67      	ldr	r3, [pc, #412]	; (800164c <HAL_RCC_OscConfig+0x338>)
 80014ae:	430a      	orrs	r2, r1
 80014b0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014b2:	e041      	b.n	8001538 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d024      	beq.n	8001506 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014bc:	4b63      	ldr	r3, [pc, #396]	; (800164c <HAL_RCC_OscConfig+0x338>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4b62      	ldr	r3, [pc, #392]	; (800164c <HAL_RCC_OscConfig+0x338>)
 80014c2:	2101      	movs	r1, #1
 80014c4:	430a      	orrs	r2, r1
 80014c6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c8:	f7ff fa8a 	bl	80009e0 <HAL_GetTick>
 80014cc:	0003      	movs	r3, r0
 80014ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014d2:	f7ff fa85 	bl	80009e0 <HAL_GetTick>
 80014d6:	0002      	movs	r2, r0
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e297      	b.n	8001a14 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e4:	4b59      	ldr	r3, [pc, #356]	; (800164c <HAL_RCC_OscConfig+0x338>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2202      	movs	r2, #2
 80014ea:	4013      	ands	r3, r2
 80014ec:	d0f1      	beq.n	80014d2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ee:	4b57      	ldr	r3, [pc, #348]	; (800164c <HAL_RCC_OscConfig+0x338>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	22f8      	movs	r2, #248	; 0xf8
 80014f4:	4393      	bics	r3, r2
 80014f6:	0019      	movs	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	00da      	lsls	r2, r3, #3
 80014fe:	4b53      	ldr	r3, [pc, #332]	; (800164c <HAL_RCC_OscConfig+0x338>)
 8001500:	430a      	orrs	r2, r1
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	e018      	b.n	8001538 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001506:	4b51      	ldr	r3, [pc, #324]	; (800164c <HAL_RCC_OscConfig+0x338>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	4b50      	ldr	r3, [pc, #320]	; (800164c <HAL_RCC_OscConfig+0x338>)
 800150c:	2101      	movs	r1, #1
 800150e:	438a      	bics	r2, r1
 8001510:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001512:	f7ff fa65 	bl	80009e0 <HAL_GetTick>
 8001516:	0003      	movs	r3, r0
 8001518:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800151c:	f7ff fa60 	bl	80009e0 <HAL_GetTick>
 8001520:	0002      	movs	r2, r0
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e272      	b.n	8001a14 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800152e:	4b47      	ldr	r3, [pc, #284]	; (800164c <HAL_RCC_OscConfig+0x338>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2202      	movs	r2, #2
 8001534:	4013      	ands	r3, r2
 8001536:	d1f1      	bne.n	800151c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2208      	movs	r2, #8
 800153e:	4013      	ands	r3, r2
 8001540:	d036      	beq.n	80015b0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d019      	beq.n	800157e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800154a:	4b40      	ldr	r3, [pc, #256]	; (800164c <HAL_RCC_OscConfig+0x338>)
 800154c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800154e:	4b3f      	ldr	r3, [pc, #252]	; (800164c <HAL_RCC_OscConfig+0x338>)
 8001550:	2101      	movs	r1, #1
 8001552:	430a      	orrs	r2, r1
 8001554:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001556:	f7ff fa43 	bl	80009e0 <HAL_GetTick>
 800155a:	0003      	movs	r3, r0
 800155c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001560:	f7ff fa3e 	bl	80009e0 <HAL_GetTick>
 8001564:	0002      	movs	r2, r0
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e250      	b.n	8001a14 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001572:	4b36      	ldr	r3, [pc, #216]	; (800164c <HAL_RCC_OscConfig+0x338>)
 8001574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001576:	2202      	movs	r2, #2
 8001578:	4013      	ands	r3, r2
 800157a:	d0f1      	beq.n	8001560 <HAL_RCC_OscConfig+0x24c>
 800157c:	e018      	b.n	80015b0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800157e:	4b33      	ldr	r3, [pc, #204]	; (800164c <HAL_RCC_OscConfig+0x338>)
 8001580:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001582:	4b32      	ldr	r3, [pc, #200]	; (800164c <HAL_RCC_OscConfig+0x338>)
 8001584:	2101      	movs	r1, #1
 8001586:	438a      	bics	r2, r1
 8001588:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158a:	f7ff fa29 	bl	80009e0 <HAL_GetTick>
 800158e:	0003      	movs	r3, r0
 8001590:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001594:	f7ff fa24 	bl	80009e0 <HAL_GetTick>
 8001598:	0002      	movs	r2, r0
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e236      	b.n	8001a14 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a6:	4b29      	ldr	r3, [pc, #164]	; (800164c <HAL_RCC_OscConfig+0x338>)
 80015a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015aa:	2202      	movs	r2, #2
 80015ac:	4013      	ands	r3, r2
 80015ae:	d1f1      	bne.n	8001594 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2204      	movs	r2, #4
 80015b6:	4013      	ands	r3, r2
 80015b8:	d100      	bne.n	80015bc <HAL_RCC_OscConfig+0x2a8>
 80015ba:	e0b5      	b.n	8001728 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015bc:	201f      	movs	r0, #31
 80015be:	183b      	adds	r3, r7, r0
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015c4:	4b21      	ldr	r3, [pc, #132]	; (800164c <HAL_RCC_OscConfig+0x338>)
 80015c6:	69da      	ldr	r2, [r3, #28]
 80015c8:	2380      	movs	r3, #128	; 0x80
 80015ca:	055b      	lsls	r3, r3, #21
 80015cc:	4013      	ands	r3, r2
 80015ce:	d110      	bne.n	80015f2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015d0:	4b1e      	ldr	r3, [pc, #120]	; (800164c <HAL_RCC_OscConfig+0x338>)
 80015d2:	69da      	ldr	r2, [r3, #28]
 80015d4:	4b1d      	ldr	r3, [pc, #116]	; (800164c <HAL_RCC_OscConfig+0x338>)
 80015d6:	2180      	movs	r1, #128	; 0x80
 80015d8:	0549      	lsls	r1, r1, #21
 80015da:	430a      	orrs	r2, r1
 80015dc:	61da      	str	r2, [r3, #28]
 80015de:	4b1b      	ldr	r3, [pc, #108]	; (800164c <HAL_RCC_OscConfig+0x338>)
 80015e0:	69da      	ldr	r2, [r3, #28]
 80015e2:	2380      	movs	r3, #128	; 0x80
 80015e4:	055b      	lsls	r3, r3, #21
 80015e6:	4013      	ands	r3, r2
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015ec:	183b      	adds	r3, r7, r0
 80015ee:	2201      	movs	r2, #1
 80015f0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f2:	4b19      	ldr	r3, [pc, #100]	; (8001658 <HAL_RCC_OscConfig+0x344>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	2380      	movs	r3, #128	; 0x80
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	4013      	ands	r3, r2
 80015fc:	d11a      	bne.n	8001634 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015fe:	4b16      	ldr	r3, [pc, #88]	; (8001658 <HAL_RCC_OscConfig+0x344>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <HAL_RCC_OscConfig+0x344>)
 8001604:	2180      	movs	r1, #128	; 0x80
 8001606:	0049      	lsls	r1, r1, #1
 8001608:	430a      	orrs	r2, r1
 800160a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800160c:	f7ff f9e8 	bl	80009e0 <HAL_GetTick>
 8001610:	0003      	movs	r3, r0
 8001612:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001616:	f7ff f9e3 	bl	80009e0 <HAL_GetTick>
 800161a:	0002      	movs	r2, r0
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b64      	cmp	r3, #100	; 0x64
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e1f5      	b.n	8001a14 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001628:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <HAL_RCC_OscConfig+0x344>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	4013      	ands	r3, r2
 8001632:	d0f0      	beq.n	8001616 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d10f      	bne.n	800165c <HAL_RCC_OscConfig+0x348>
 800163c:	4b03      	ldr	r3, [pc, #12]	; (800164c <HAL_RCC_OscConfig+0x338>)
 800163e:	6a1a      	ldr	r2, [r3, #32]
 8001640:	4b02      	ldr	r3, [pc, #8]	; (800164c <HAL_RCC_OscConfig+0x338>)
 8001642:	2101      	movs	r1, #1
 8001644:	430a      	orrs	r2, r1
 8001646:	621a      	str	r2, [r3, #32]
 8001648:	e036      	b.n	80016b8 <HAL_RCC_OscConfig+0x3a4>
 800164a:	46c0      	nop			; (mov r8, r8)
 800164c:	40021000 	.word	0x40021000
 8001650:	fffeffff 	.word	0xfffeffff
 8001654:	fffbffff 	.word	0xfffbffff
 8001658:	40007000 	.word	0x40007000
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d10c      	bne.n	800167e <HAL_RCC_OscConfig+0x36a>
 8001664:	4bca      	ldr	r3, [pc, #808]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 8001666:	6a1a      	ldr	r2, [r3, #32]
 8001668:	4bc9      	ldr	r3, [pc, #804]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 800166a:	2101      	movs	r1, #1
 800166c:	438a      	bics	r2, r1
 800166e:	621a      	str	r2, [r3, #32]
 8001670:	4bc7      	ldr	r3, [pc, #796]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 8001672:	6a1a      	ldr	r2, [r3, #32]
 8001674:	4bc6      	ldr	r3, [pc, #792]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 8001676:	2104      	movs	r1, #4
 8001678:	438a      	bics	r2, r1
 800167a:	621a      	str	r2, [r3, #32]
 800167c:	e01c      	b.n	80016b8 <HAL_RCC_OscConfig+0x3a4>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	2b05      	cmp	r3, #5
 8001684:	d10c      	bne.n	80016a0 <HAL_RCC_OscConfig+0x38c>
 8001686:	4bc2      	ldr	r3, [pc, #776]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 8001688:	6a1a      	ldr	r2, [r3, #32]
 800168a:	4bc1      	ldr	r3, [pc, #772]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 800168c:	2104      	movs	r1, #4
 800168e:	430a      	orrs	r2, r1
 8001690:	621a      	str	r2, [r3, #32]
 8001692:	4bbf      	ldr	r3, [pc, #764]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 8001694:	6a1a      	ldr	r2, [r3, #32]
 8001696:	4bbe      	ldr	r3, [pc, #760]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 8001698:	2101      	movs	r1, #1
 800169a:	430a      	orrs	r2, r1
 800169c:	621a      	str	r2, [r3, #32]
 800169e:	e00b      	b.n	80016b8 <HAL_RCC_OscConfig+0x3a4>
 80016a0:	4bbb      	ldr	r3, [pc, #748]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 80016a2:	6a1a      	ldr	r2, [r3, #32]
 80016a4:	4bba      	ldr	r3, [pc, #744]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 80016a6:	2101      	movs	r1, #1
 80016a8:	438a      	bics	r2, r1
 80016aa:	621a      	str	r2, [r3, #32]
 80016ac:	4bb8      	ldr	r3, [pc, #736]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 80016ae:	6a1a      	ldr	r2, [r3, #32]
 80016b0:	4bb7      	ldr	r3, [pc, #732]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 80016b2:	2104      	movs	r1, #4
 80016b4:	438a      	bics	r2, r1
 80016b6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d014      	beq.n	80016ea <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c0:	f7ff f98e 	bl	80009e0 <HAL_GetTick>
 80016c4:	0003      	movs	r3, r0
 80016c6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c8:	e009      	b.n	80016de <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ca:	f7ff f989 	bl	80009e0 <HAL_GetTick>
 80016ce:	0002      	movs	r2, r0
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	4aaf      	ldr	r2, [pc, #700]	; (8001994 <HAL_RCC_OscConfig+0x680>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e19a      	b.n	8001a14 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016de:	4bac      	ldr	r3, [pc, #688]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 80016e0:	6a1b      	ldr	r3, [r3, #32]
 80016e2:	2202      	movs	r2, #2
 80016e4:	4013      	ands	r3, r2
 80016e6:	d0f0      	beq.n	80016ca <HAL_RCC_OscConfig+0x3b6>
 80016e8:	e013      	b.n	8001712 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ea:	f7ff f979 	bl	80009e0 <HAL_GetTick>
 80016ee:	0003      	movs	r3, r0
 80016f0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f2:	e009      	b.n	8001708 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016f4:	f7ff f974 	bl	80009e0 <HAL_GetTick>
 80016f8:	0002      	movs	r2, r0
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	4aa5      	ldr	r2, [pc, #660]	; (8001994 <HAL_RCC_OscConfig+0x680>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e185      	b.n	8001a14 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001708:	4ba1      	ldr	r3, [pc, #644]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	2202      	movs	r2, #2
 800170e:	4013      	ands	r3, r2
 8001710:	d1f0      	bne.n	80016f4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001712:	231f      	movs	r3, #31
 8001714:	18fb      	adds	r3, r7, r3
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d105      	bne.n	8001728 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800171c:	4b9c      	ldr	r3, [pc, #624]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 800171e:	69da      	ldr	r2, [r3, #28]
 8001720:	4b9b      	ldr	r3, [pc, #620]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 8001722:	499d      	ldr	r1, [pc, #628]	; (8001998 <HAL_RCC_OscConfig+0x684>)
 8001724:	400a      	ands	r2, r1
 8001726:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2210      	movs	r2, #16
 800172e:	4013      	ands	r3, r2
 8001730:	d063      	beq.n	80017fa <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d12a      	bne.n	8001790 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800173a:	4b95      	ldr	r3, [pc, #596]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 800173c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800173e:	4b94      	ldr	r3, [pc, #592]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 8001740:	2104      	movs	r1, #4
 8001742:	430a      	orrs	r2, r1
 8001744:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001746:	4b92      	ldr	r3, [pc, #584]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 8001748:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800174a:	4b91      	ldr	r3, [pc, #580]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 800174c:	2101      	movs	r1, #1
 800174e:	430a      	orrs	r2, r1
 8001750:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001752:	f7ff f945 	bl	80009e0 <HAL_GetTick>
 8001756:	0003      	movs	r3, r0
 8001758:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800175c:	f7ff f940 	bl	80009e0 <HAL_GetTick>
 8001760:	0002      	movs	r2, r0
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e152      	b.n	8001a14 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800176e:	4b88      	ldr	r3, [pc, #544]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 8001770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001772:	2202      	movs	r2, #2
 8001774:	4013      	ands	r3, r2
 8001776:	d0f1      	beq.n	800175c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001778:	4b85      	ldr	r3, [pc, #532]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 800177a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800177c:	22f8      	movs	r2, #248	; 0xf8
 800177e:	4393      	bics	r3, r2
 8001780:	0019      	movs	r1, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	00da      	lsls	r2, r3, #3
 8001788:	4b81      	ldr	r3, [pc, #516]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 800178a:	430a      	orrs	r2, r1
 800178c:	635a      	str	r2, [r3, #52]	; 0x34
 800178e:	e034      	b.n	80017fa <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	695b      	ldr	r3, [r3, #20]
 8001794:	3305      	adds	r3, #5
 8001796:	d111      	bne.n	80017bc <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001798:	4b7d      	ldr	r3, [pc, #500]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 800179a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800179c:	4b7c      	ldr	r3, [pc, #496]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 800179e:	2104      	movs	r1, #4
 80017a0:	438a      	bics	r2, r1
 80017a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80017a4:	4b7a      	ldr	r3, [pc, #488]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 80017a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017a8:	22f8      	movs	r2, #248	; 0xf8
 80017aa:	4393      	bics	r3, r2
 80017ac:	0019      	movs	r1, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	00da      	lsls	r2, r3, #3
 80017b4:	4b76      	ldr	r3, [pc, #472]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 80017b6:	430a      	orrs	r2, r1
 80017b8:	635a      	str	r2, [r3, #52]	; 0x34
 80017ba:	e01e      	b.n	80017fa <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80017bc:	4b74      	ldr	r3, [pc, #464]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 80017be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017c0:	4b73      	ldr	r3, [pc, #460]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 80017c2:	2104      	movs	r1, #4
 80017c4:	430a      	orrs	r2, r1
 80017c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80017c8:	4b71      	ldr	r3, [pc, #452]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 80017ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017cc:	4b70      	ldr	r3, [pc, #448]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 80017ce:	2101      	movs	r1, #1
 80017d0:	438a      	bics	r2, r1
 80017d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d4:	f7ff f904 	bl	80009e0 <HAL_GetTick>
 80017d8:	0003      	movs	r3, r0
 80017da:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80017de:	f7ff f8ff 	bl	80009e0 <HAL_GetTick>
 80017e2:	0002      	movs	r2, r0
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e111      	b.n	8001a14 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017f0:	4b67      	ldr	r3, [pc, #412]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 80017f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f4:	2202      	movs	r2, #2
 80017f6:	4013      	ands	r3, r2
 80017f8:	d1f1      	bne.n	80017de <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2220      	movs	r2, #32
 8001800:	4013      	ands	r3, r2
 8001802:	d05c      	beq.n	80018be <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001804:	4b62      	ldr	r3, [pc, #392]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	220c      	movs	r2, #12
 800180a:	4013      	ands	r3, r2
 800180c:	2b0c      	cmp	r3, #12
 800180e:	d00e      	beq.n	800182e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001810:	4b5f      	ldr	r3, [pc, #380]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	220c      	movs	r2, #12
 8001816:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001818:	2b08      	cmp	r3, #8
 800181a:	d114      	bne.n	8001846 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800181c:	4b5c      	ldr	r3, [pc, #368]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	23c0      	movs	r3, #192	; 0xc0
 8001822:	025b      	lsls	r3, r3, #9
 8001824:	401a      	ands	r2, r3
 8001826:	23c0      	movs	r3, #192	; 0xc0
 8001828:	025b      	lsls	r3, r3, #9
 800182a:	429a      	cmp	r2, r3
 800182c:	d10b      	bne.n	8001846 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800182e:	4b58      	ldr	r3, [pc, #352]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 8001830:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001832:	2380      	movs	r3, #128	; 0x80
 8001834:	025b      	lsls	r3, r3, #9
 8001836:	4013      	ands	r3, r2
 8001838:	d040      	beq.n	80018bc <HAL_RCC_OscConfig+0x5a8>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d03c      	beq.n	80018bc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e0e6      	b.n	8001a14 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a1b      	ldr	r3, [r3, #32]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d01b      	beq.n	8001886 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800184e:	4b50      	ldr	r3, [pc, #320]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 8001850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001852:	4b4f      	ldr	r3, [pc, #316]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 8001854:	2180      	movs	r1, #128	; 0x80
 8001856:	0249      	lsls	r1, r1, #9
 8001858:	430a      	orrs	r2, r1
 800185a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185c:	f7ff f8c0 	bl	80009e0 <HAL_GetTick>
 8001860:	0003      	movs	r3, r0
 8001862:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001866:	f7ff f8bb 	bl	80009e0 <HAL_GetTick>
 800186a:	0002      	movs	r2, r0
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e0cd      	b.n	8001a14 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001878:	4b45      	ldr	r3, [pc, #276]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 800187a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800187c:	2380      	movs	r3, #128	; 0x80
 800187e:	025b      	lsls	r3, r3, #9
 8001880:	4013      	ands	r3, r2
 8001882:	d0f0      	beq.n	8001866 <HAL_RCC_OscConfig+0x552>
 8001884:	e01b      	b.n	80018be <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001886:	4b42      	ldr	r3, [pc, #264]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 8001888:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800188a:	4b41      	ldr	r3, [pc, #260]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 800188c:	4943      	ldr	r1, [pc, #268]	; (800199c <HAL_RCC_OscConfig+0x688>)
 800188e:	400a      	ands	r2, r1
 8001890:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001892:	f7ff f8a5 	bl	80009e0 <HAL_GetTick>
 8001896:	0003      	movs	r3, r0
 8001898:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800189c:	f7ff f8a0 	bl	80009e0 <HAL_GetTick>
 80018a0:	0002      	movs	r2, r0
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e0b2      	b.n	8001a14 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80018ae:	4b38      	ldr	r3, [pc, #224]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 80018b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018b2:	2380      	movs	r3, #128	; 0x80
 80018b4:	025b      	lsls	r3, r3, #9
 80018b6:	4013      	ands	r3, r2
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0x588>
 80018ba:	e000      	b.n	80018be <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80018bc:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d100      	bne.n	80018c8 <HAL_RCC_OscConfig+0x5b4>
 80018c6:	e0a4      	b.n	8001a12 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018c8:	4b31      	ldr	r3, [pc, #196]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	220c      	movs	r2, #12
 80018ce:	4013      	ands	r3, r2
 80018d0:	2b08      	cmp	r3, #8
 80018d2:	d100      	bne.n	80018d6 <HAL_RCC_OscConfig+0x5c2>
 80018d4:	e078      	b.n	80019c8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d14c      	bne.n	8001978 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018de:	4b2c      	ldr	r3, [pc, #176]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	4b2b      	ldr	r3, [pc, #172]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 80018e4:	492e      	ldr	r1, [pc, #184]	; (80019a0 <HAL_RCC_OscConfig+0x68c>)
 80018e6:	400a      	ands	r2, r1
 80018e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ea:	f7ff f879 	bl	80009e0 <HAL_GetTick>
 80018ee:	0003      	movs	r3, r0
 80018f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f4:	f7ff f874 	bl	80009e0 <HAL_GetTick>
 80018f8:	0002      	movs	r2, r0
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e086      	b.n	8001a14 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001906:	4b22      	ldr	r3, [pc, #136]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	2380      	movs	r3, #128	; 0x80
 800190c:	049b      	lsls	r3, r3, #18
 800190e:	4013      	ands	r3, r2
 8001910:	d1f0      	bne.n	80018f4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001912:	4b1f      	ldr	r3, [pc, #124]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 8001914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001916:	220f      	movs	r2, #15
 8001918:	4393      	bics	r3, r2
 800191a:	0019      	movs	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001920:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 8001922:	430a      	orrs	r2, r1
 8001924:	62da      	str	r2, [r3, #44]	; 0x2c
 8001926:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	4a1e      	ldr	r2, [pc, #120]	; (80019a4 <HAL_RCC_OscConfig+0x690>)
 800192c:	4013      	ands	r3, r2
 800192e:	0019      	movs	r1, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001938:	431a      	orrs	r2, r3
 800193a:	4b15      	ldr	r3, [pc, #84]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 800193c:	430a      	orrs	r2, r1
 800193e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001940:	4b13      	ldr	r3, [pc, #76]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4b12      	ldr	r3, [pc, #72]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 8001946:	2180      	movs	r1, #128	; 0x80
 8001948:	0449      	lsls	r1, r1, #17
 800194a:	430a      	orrs	r2, r1
 800194c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194e:	f7ff f847 	bl	80009e0 <HAL_GetTick>
 8001952:	0003      	movs	r3, r0
 8001954:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001958:	f7ff f842 	bl	80009e0 <HAL_GetTick>
 800195c:	0002      	movs	r2, r0
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e054      	b.n	8001a14 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800196a:	4b09      	ldr	r3, [pc, #36]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	2380      	movs	r3, #128	; 0x80
 8001970:	049b      	lsls	r3, r3, #18
 8001972:	4013      	ands	r3, r2
 8001974:	d0f0      	beq.n	8001958 <HAL_RCC_OscConfig+0x644>
 8001976:	e04c      	b.n	8001a12 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001978:	4b05      	ldr	r3, [pc, #20]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4b04      	ldr	r3, [pc, #16]	; (8001990 <HAL_RCC_OscConfig+0x67c>)
 800197e:	4908      	ldr	r1, [pc, #32]	; (80019a0 <HAL_RCC_OscConfig+0x68c>)
 8001980:	400a      	ands	r2, r1
 8001982:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001984:	f7ff f82c 	bl	80009e0 <HAL_GetTick>
 8001988:	0003      	movs	r3, r0
 800198a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800198c:	e015      	b.n	80019ba <HAL_RCC_OscConfig+0x6a6>
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	40021000 	.word	0x40021000
 8001994:	00001388 	.word	0x00001388
 8001998:	efffffff 	.word	0xefffffff
 800199c:	fffeffff 	.word	0xfffeffff
 80019a0:	feffffff 	.word	0xfeffffff
 80019a4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a8:	f7ff f81a 	bl	80009e0 <HAL_GetTick>
 80019ac:	0002      	movs	r2, r0
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e02c      	b.n	8001a14 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ba:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <HAL_RCC_OscConfig+0x708>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	2380      	movs	r3, #128	; 0x80
 80019c0:	049b      	lsls	r3, r3, #18
 80019c2:	4013      	ands	r3, r2
 80019c4:	d1f0      	bne.n	80019a8 <HAL_RCC_OscConfig+0x694>
 80019c6:	e024      	b.n	8001a12 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d101      	bne.n	80019d4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e01f      	b.n	8001a14 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <HAL_RCC_OscConfig+0x708>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <HAL_RCC_OscConfig+0x708>)
 80019dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019de:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	23c0      	movs	r3, #192	; 0xc0
 80019e4:	025b      	lsls	r3, r3, #9
 80019e6:	401a      	ands	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d10e      	bne.n	8001a0e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	220f      	movs	r2, #15
 80019f4:	401a      	ands	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d107      	bne.n	8001a0e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	23f0      	movs	r3, #240	; 0xf0
 8001a02:	039b      	lsls	r3, r3, #14
 8001a04:	401a      	ands	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d001      	beq.n	8001a12 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e000      	b.n	8001a14 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	0018      	movs	r0, r3
 8001a16:	46bd      	mov	sp, r7
 8001a18:	b008      	add	sp, #32
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40021000 	.word	0x40021000

08001a20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d101      	bne.n	8001a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e0bf      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a34:	4b61      	ldr	r3, [pc, #388]	; (8001bbc <HAL_RCC_ClockConfig+0x19c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d911      	bls.n	8001a66 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a42:	4b5e      	ldr	r3, [pc, #376]	; (8001bbc <HAL_RCC_ClockConfig+0x19c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2201      	movs	r2, #1
 8001a48:	4393      	bics	r3, r2
 8001a4a:	0019      	movs	r1, r3
 8001a4c:	4b5b      	ldr	r3, [pc, #364]	; (8001bbc <HAL_RCC_ClockConfig+0x19c>)
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	430a      	orrs	r2, r1
 8001a52:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a54:	4b59      	ldr	r3, [pc, #356]	; (8001bbc <HAL_RCC_ClockConfig+0x19c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d001      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e0a6      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d015      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2204      	movs	r2, #4
 8001a76:	4013      	ands	r3, r2
 8001a78:	d006      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a7a:	4b51      	ldr	r3, [pc, #324]	; (8001bc0 <HAL_RCC_ClockConfig+0x1a0>)
 8001a7c:	685a      	ldr	r2, [r3, #4]
 8001a7e:	4b50      	ldr	r3, [pc, #320]	; (8001bc0 <HAL_RCC_ClockConfig+0x1a0>)
 8001a80:	21e0      	movs	r1, #224	; 0xe0
 8001a82:	00c9      	lsls	r1, r1, #3
 8001a84:	430a      	orrs	r2, r1
 8001a86:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a88:	4b4d      	ldr	r3, [pc, #308]	; (8001bc0 <HAL_RCC_ClockConfig+0x1a0>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	22f0      	movs	r2, #240	; 0xf0
 8001a8e:	4393      	bics	r3, r2
 8001a90:	0019      	movs	r1, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	4b4a      	ldr	r3, [pc, #296]	; (8001bc0 <HAL_RCC_ClockConfig+0x1a0>)
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d04c      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d107      	bne.n	8001abe <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aae:	4b44      	ldr	r3, [pc, #272]	; (8001bc0 <HAL_RCC_ClockConfig+0x1a0>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	2380      	movs	r3, #128	; 0x80
 8001ab4:	029b      	lsls	r3, r3, #10
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d120      	bne.n	8001afc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e07a      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d107      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac6:	4b3e      	ldr	r3, [pc, #248]	; (8001bc0 <HAL_RCC_ClockConfig+0x1a0>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	2380      	movs	r3, #128	; 0x80
 8001acc:	049b      	lsls	r3, r3, #18
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d114      	bne.n	8001afc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e06e      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	d107      	bne.n	8001aee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001ade:	4b38      	ldr	r3, [pc, #224]	; (8001bc0 <HAL_RCC_ClockConfig+0x1a0>)
 8001ae0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ae2:	2380      	movs	r3, #128	; 0x80
 8001ae4:	025b      	lsls	r3, r3, #9
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d108      	bne.n	8001afc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e062      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aee:	4b34      	ldr	r3, [pc, #208]	; (8001bc0 <HAL_RCC_ClockConfig+0x1a0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2202      	movs	r2, #2
 8001af4:	4013      	ands	r3, r2
 8001af6:	d101      	bne.n	8001afc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e05b      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001afc:	4b30      	ldr	r3, [pc, #192]	; (8001bc0 <HAL_RCC_ClockConfig+0x1a0>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2203      	movs	r2, #3
 8001b02:	4393      	bics	r3, r2
 8001b04:	0019      	movs	r1, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	4b2d      	ldr	r3, [pc, #180]	; (8001bc0 <HAL_RCC_ClockConfig+0x1a0>)
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b10:	f7fe ff66 	bl	80009e0 <HAL_GetTick>
 8001b14:	0003      	movs	r3, r0
 8001b16:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b18:	e009      	b.n	8001b2e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b1a:	f7fe ff61 	bl	80009e0 <HAL_GetTick>
 8001b1e:	0002      	movs	r2, r0
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	4a27      	ldr	r2, [pc, #156]	; (8001bc4 <HAL_RCC_ClockConfig+0x1a4>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e042      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b2e:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <HAL_RCC_ClockConfig+0x1a0>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	220c      	movs	r2, #12
 8001b34:	401a      	ands	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d1ec      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b40:	4b1e      	ldr	r3, [pc, #120]	; (8001bbc <HAL_RCC_ClockConfig+0x19c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2201      	movs	r2, #1
 8001b46:	4013      	ands	r3, r2
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d211      	bcs.n	8001b72 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4e:	4b1b      	ldr	r3, [pc, #108]	; (8001bbc <HAL_RCC_ClockConfig+0x19c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2201      	movs	r2, #1
 8001b54:	4393      	bics	r3, r2
 8001b56:	0019      	movs	r1, r3
 8001b58:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <HAL_RCC_ClockConfig+0x19c>)
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b60:	4b16      	ldr	r3, [pc, #88]	; (8001bbc <HAL_RCC_ClockConfig+0x19c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2201      	movs	r2, #1
 8001b66:	4013      	ands	r3, r2
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d001      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e020      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2204      	movs	r2, #4
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d009      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b7c:	4b10      	ldr	r3, [pc, #64]	; (8001bc0 <HAL_RCC_ClockConfig+0x1a0>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	4a11      	ldr	r2, [pc, #68]	; (8001bc8 <HAL_RCC_ClockConfig+0x1a8>)
 8001b82:	4013      	ands	r3, r2
 8001b84:	0019      	movs	r1, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68da      	ldr	r2, [r3, #12]
 8001b8a:	4b0d      	ldr	r3, [pc, #52]	; (8001bc0 <HAL_RCC_ClockConfig+0x1a0>)
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b90:	f000 f820 	bl	8001bd4 <HAL_RCC_GetSysClockFreq>
 8001b94:	0001      	movs	r1, r0
 8001b96:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <HAL_RCC_ClockConfig+0x1a0>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	091b      	lsrs	r3, r3, #4
 8001b9c:	220f      	movs	r2, #15
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	4a0a      	ldr	r2, [pc, #40]	; (8001bcc <HAL_RCC_ClockConfig+0x1ac>)
 8001ba2:	5cd3      	ldrb	r3, [r2, r3]
 8001ba4:	000a      	movs	r2, r1
 8001ba6:	40da      	lsrs	r2, r3
 8001ba8:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b0>)
 8001baa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001bac:	2003      	movs	r0, #3
 8001bae:	f7fe fed1 	bl	8000954 <HAL_InitTick>
  
  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	b004      	add	sp, #16
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40022000 	.word	0x40022000
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	00001388 	.word	0x00001388
 8001bc8:	fffff8ff 	.word	0xfffff8ff
 8001bcc:	08003288 	.word	0x08003288
 8001bd0:	20000000 	.word	0x20000000

08001bd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd4:	b590      	push	{r4, r7, lr}
 8001bd6:	b08f      	sub	sp, #60	; 0x3c
 8001bd8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001bda:	2314      	movs	r3, #20
 8001bdc:	18fb      	adds	r3, r7, r3
 8001bde:	4a38      	ldr	r2, [pc, #224]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0xec>)
 8001be0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001be2:	c313      	stmia	r3!, {r0, r1, r4}
 8001be4:	6812      	ldr	r2, [r2, #0]
 8001be6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001be8:	1d3b      	adds	r3, r7, #4
 8001bea:	4a36      	ldr	r2, [pc, #216]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001bec:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001bee:	c313      	stmia	r3!, {r0, r1, r4}
 8001bf0:	6812      	ldr	r2, [r2, #0]
 8001bf2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8001c00:	2300      	movs	r3, #0
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001c08:	4b2f      	ldr	r3, [pc, #188]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c10:	220c      	movs	r2, #12
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b0c      	cmp	r3, #12
 8001c16:	d047      	beq.n	8001ca8 <HAL_RCC_GetSysClockFreq+0xd4>
 8001c18:	d849      	bhi.n	8001cae <HAL_RCC_GetSysClockFreq+0xda>
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	d002      	beq.n	8001c24 <HAL_RCC_GetSysClockFreq+0x50>
 8001c1e:	2b08      	cmp	r3, #8
 8001c20:	d003      	beq.n	8001c2a <HAL_RCC_GetSysClockFreq+0x56>
 8001c22:	e044      	b.n	8001cae <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c24:	4b29      	ldr	r3, [pc, #164]	; (8001ccc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c26:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c28:	e044      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c2c:	0c9b      	lsrs	r3, r3, #18
 8001c2e:	220f      	movs	r2, #15
 8001c30:	4013      	ands	r3, r2
 8001c32:	2214      	movs	r2, #20
 8001c34:	18ba      	adds	r2, r7, r2
 8001c36:	5cd3      	ldrb	r3, [r2, r3]
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001c3a:	4b23      	ldr	r3, [pc, #140]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3e:	220f      	movs	r2, #15
 8001c40:	4013      	ands	r3, r2
 8001c42:	1d3a      	adds	r2, r7, #4
 8001c44:	5cd3      	ldrb	r3, [r2, r3]
 8001c46:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001c48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c4a:	23c0      	movs	r3, #192	; 0xc0
 8001c4c:	025b      	lsls	r3, r3, #9
 8001c4e:	401a      	ands	r2, r3
 8001c50:	2380      	movs	r3, #128	; 0x80
 8001c52:	025b      	lsls	r3, r3, #9
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d109      	bne.n	8001c6c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c5a:	481c      	ldr	r0, [pc, #112]	; (8001ccc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c5c:	f7fe fa5c 	bl	8000118 <__udivsi3>
 8001c60:	0003      	movs	r3, r0
 8001c62:	001a      	movs	r2, r3
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	4353      	muls	r3, r2
 8001c68:	637b      	str	r3, [r7, #52]	; 0x34
 8001c6a:	e01a      	b.n	8001ca2 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c6e:	23c0      	movs	r3, #192	; 0xc0
 8001c70:	025b      	lsls	r3, r3, #9
 8001c72:	401a      	ands	r2, r3
 8001c74:	23c0      	movs	r3, #192	; 0xc0
 8001c76:	025b      	lsls	r3, r3, #9
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d109      	bne.n	8001c90 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c7e:	4814      	ldr	r0, [pc, #80]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c80:	f7fe fa4a 	bl	8000118 <__udivsi3>
 8001c84:	0003      	movs	r3, r0
 8001c86:	001a      	movs	r2, r3
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	4353      	muls	r3, r2
 8001c8c:	637b      	str	r3, [r7, #52]	; 0x34
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c92:	480e      	ldr	r0, [pc, #56]	; (8001ccc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c94:	f7fe fa40 	bl	8000118 <__udivsi3>
 8001c98:	0003      	movs	r3, r0
 8001c9a:	001a      	movs	r2, r3
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	4353      	muls	r3, r2
 8001ca0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ca4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ca6:	e005      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001ca8:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001caa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cac:	e002      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cae:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cb0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cb2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	b00f      	add	sp, #60	; 0x3c
 8001cbc:	bd90      	pop	{r4, r7, pc}
 8001cbe:	46c0      	nop			; (mov r8, r8)
 8001cc0:	08003268 	.word	0x08003268
 8001cc4:	08003278 	.word	0x08003278
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	007a1200 	.word	0x007a1200
 8001cd0:	02dc6c00 	.word	0x02dc6c00

08001cd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cd8:	4b02      	ldr	r3, [pc, #8]	; (8001ce4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cda:	681b      	ldr	r3, [r3, #0]
}
 8001cdc:	0018      	movs	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	20000000 	.word	0x20000000

08001ce8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001cec:	f7ff fff2 	bl	8001cd4 <HAL_RCC_GetHCLKFreq>
 8001cf0:	0001      	movs	r1, r0
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	0a1b      	lsrs	r3, r3, #8
 8001cf8:	2207      	movs	r2, #7
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	4a04      	ldr	r2, [pc, #16]	; (8001d10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cfe:	5cd3      	ldrb	r3, [r2, r3]
 8001d00:	40d9      	lsrs	r1, r3
 8001d02:	000b      	movs	r3, r1
}    
 8001d04:	0018      	movs	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	46c0      	nop			; (mov r8, r8)
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	08003298 	.word	0x08003298

08001d14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	2380      	movs	r3, #128	; 0x80
 8001d2a:	025b      	lsls	r3, r3, #9
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d100      	bne.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001d30:	e08e      	b.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001d32:	2017      	movs	r0, #23
 8001d34:	183b      	adds	r3, r7, r0
 8001d36:	2200      	movs	r2, #0
 8001d38:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d3a:	4b6e      	ldr	r3, [pc, #440]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d3c:	69da      	ldr	r2, [r3, #28]
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	055b      	lsls	r3, r3, #21
 8001d42:	4013      	ands	r3, r2
 8001d44:	d110      	bne.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d46:	4b6b      	ldr	r3, [pc, #428]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d48:	69da      	ldr	r2, [r3, #28]
 8001d4a:	4b6a      	ldr	r3, [pc, #424]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d4c:	2180      	movs	r1, #128	; 0x80
 8001d4e:	0549      	lsls	r1, r1, #21
 8001d50:	430a      	orrs	r2, r1
 8001d52:	61da      	str	r2, [r3, #28]
 8001d54:	4b67      	ldr	r3, [pc, #412]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d56:	69da      	ldr	r2, [r3, #28]
 8001d58:	2380      	movs	r3, #128	; 0x80
 8001d5a:	055b      	lsls	r3, r3, #21
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d62:	183b      	adds	r3, r7, r0
 8001d64:	2201      	movs	r2, #1
 8001d66:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d68:	4b63      	ldr	r3, [pc, #396]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	2380      	movs	r3, #128	; 0x80
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	4013      	ands	r3, r2
 8001d72:	d11a      	bne.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d74:	4b60      	ldr	r3, [pc, #384]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b5f      	ldr	r3, [pc, #380]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d7a:	2180      	movs	r1, #128	; 0x80
 8001d7c:	0049      	lsls	r1, r1, #1
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d82:	f7fe fe2d 	bl	80009e0 <HAL_GetTick>
 8001d86:	0003      	movs	r3, r0
 8001d88:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8a:	e008      	b.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d8c:	f7fe fe28 	bl	80009e0 <HAL_GetTick>
 8001d90:	0002      	movs	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b64      	cmp	r3, #100	; 0x64
 8001d98:	d901      	bls.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e0a6      	b.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9e:	4b56      	ldr	r3, [pc, #344]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	2380      	movs	r3, #128	; 0x80
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	4013      	ands	r3, r2
 8001da8:	d0f0      	beq.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001daa:	4b52      	ldr	r3, [pc, #328]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001dac:	6a1a      	ldr	r2, [r3, #32]
 8001dae:	23c0      	movs	r3, #192	; 0xc0
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4013      	ands	r3, r2
 8001db4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d034      	beq.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	23c0      	movs	r3, #192	; 0xc0
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d02c      	beq.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001dcc:	4b49      	ldr	r3, [pc, #292]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	4a4a      	ldr	r2, [pc, #296]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001dd6:	4b47      	ldr	r3, [pc, #284]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001dd8:	6a1a      	ldr	r2, [r3, #32]
 8001dda:	4b46      	ldr	r3, [pc, #280]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ddc:	2180      	movs	r1, #128	; 0x80
 8001dde:	0249      	lsls	r1, r1, #9
 8001de0:	430a      	orrs	r2, r1
 8001de2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001de4:	4b43      	ldr	r3, [pc, #268]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001de6:	6a1a      	ldr	r2, [r3, #32]
 8001de8:	4b42      	ldr	r3, [pc, #264]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001dea:	4945      	ldr	r1, [pc, #276]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001dec:	400a      	ands	r2, r1
 8001dee:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001df0:	4b40      	ldr	r3, [pc, #256]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d013      	beq.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfe:	f7fe fdef 	bl	80009e0 <HAL_GetTick>
 8001e02:	0003      	movs	r3, r0
 8001e04:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e06:	e009      	b.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e08:	f7fe fdea 	bl	80009e0 <HAL_GetTick>
 8001e0c:	0002      	movs	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	4a3c      	ldr	r2, [pc, #240]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e067      	b.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e1c:	4b35      	ldr	r3, [pc, #212]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	2202      	movs	r2, #2
 8001e22:	4013      	ands	r3, r2
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e26:	4b33      	ldr	r3, [pc, #204]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	4a34      	ldr	r2, [pc, #208]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	0019      	movs	r1, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	4b2f      	ldr	r3, [pc, #188]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e36:	430a      	orrs	r2, r1
 8001e38:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e3a:	2317      	movs	r3, #23
 8001e3c:	18fb      	adds	r3, r7, r3
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d105      	bne.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e44:	4b2b      	ldr	r3, [pc, #172]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e46:	69da      	ldr	r2, [r3, #28]
 8001e48:	4b2a      	ldr	r3, [pc, #168]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e4a:	492f      	ldr	r1, [pc, #188]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001e4c:	400a      	ands	r2, r1
 8001e4e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2201      	movs	r2, #1
 8001e56:	4013      	ands	r3, r2
 8001e58:	d009      	beq.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e5a:	4b26      	ldr	r3, [pc, #152]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	2203      	movs	r2, #3
 8001e60:	4393      	bics	r3, r2
 8001e62:	0019      	movs	r1, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	4b22      	ldr	r3, [pc, #136]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2202      	movs	r2, #2
 8001e74:	4013      	ands	r3, r2
 8001e76:	d009      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e78:	4b1e      	ldr	r3, [pc, #120]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7c:	4a23      	ldr	r2, [pc, #140]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	0019      	movs	r1, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68da      	ldr	r2, [r3, #12]
 8001e86:	4b1b      	ldr	r3, [pc, #108]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2220      	movs	r2, #32
 8001e92:	4013      	ands	r3, r2
 8001e94:	d009      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e96:	4b17      	ldr	r3, [pc, #92]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	2210      	movs	r2, #16
 8001e9c:	4393      	bics	r3, r2
 8001e9e:	0019      	movs	r1, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691a      	ldr	r2, [r3, #16]
 8001ea4:	4b13      	ldr	r3, [pc, #76]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	2380      	movs	r3, #128	; 0x80
 8001eb0:	029b      	lsls	r3, r3, #10
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d009      	beq.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001eb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	2280      	movs	r2, #128	; 0x80
 8001ebc:	4393      	bics	r3, r2
 8001ebe:	0019      	movs	r1, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	699a      	ldr	r2, [r3, #24]
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	2380      	movs	r3, #128	; 0x80
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d009      	beq.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001ed6:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	2240      	movs	r2, #64	; 0x40
 8001edc:	4393      	bics	r3, r2
 8001ede:	0019      	movs	r1, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	695a      	ldr	r2, [r3, #20]
 8001ee4:	4b03      	ldr	r3, [pc, #12]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	0018      	movs	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	b006      	add	sp, #24
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	40007000 	.word	0x40007000
 8001efc:	fffffcff 	.word	0xfffffcff
 8001f00:	fffeffff 	.word	0xfffeffff
 8001f04:	00001388 	.word	0x00001388
 8001f08:	efffffff 	.word	0xefffffff
 8001f0c:	fffcffff 	.word	0xfffcffff

08001f10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e044      	b.n	8001fac <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d107      	bne.n	8001f3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2274      	movs	r2, #116	; 0x74
 8001f2e:	2100      	movs	r1, #0
 8001f30:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	0018      	movs	r0, r3
 8001f36:	f7fe fa91 	bl	800045c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2224      	movs	r2, #36	; 0x24
 8001f3e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	438a      	bics	r2, r1
 8001f4e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	0018      	movs	r0, r3
 8001f54:	f000 fb28 	bl	80025a8 <UART_SetConfig>
 8001f58:	0003      	movs	r3, r0
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d101      	bne.n	8001f62 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e024      	b.n	8001fac <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f000 fca3 	bl	80028b8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	490d      	ldr	r1, [pc, #52]	; (8001fb4 <HAL_UART_Init+0xa4>)
 8001f7e:	400a      	ands	r2, r1
 8001f80:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	212a      	movs	r1, #42	; 0x2a
 8001f8e:	438a      	bics	r2, r1
 8001f90:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	f000 fd3b 	bl	8002a20 <UART_CheckIdleState>
 8001faa:	0003      	movs	r3, r0
}
 8001fac:	0018      	movs	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	b002      	add	sp, #8
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	ffffb7ff 	.word	0xffffb7ff

08001fb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001fb8:	b590      	push	{r4, r7, lr}
 8001fba:	b0ab      	sub	sp, #172	; 0xac
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	22a4      	movs	r2, #164	; 0xa4
 8001fc8:	18b9      	adds	r1, r7, r2
 8001fca:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	20a0      	movs	r0, #160	; 0xa0
 8001fd4:	1839      	adds	r1, r7, r0
 8001fd6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	219c      	movs	r1, #156	; 0x9c
 8001fe0:	1879      	adds	r1, r7, r1
 8001fe2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001fe4:	0011      	movs	r1, r2
 8001fe6:	18bb      	adds	r3, r7, r2
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a99      	ldr	r2, [pc, #612]	; (8002250 <HAL_UART_IRQHandler+0x298>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	2298      	movs	r2, #152	; 0x98
 8001ff0:	18bc      	adds	r4, r7, r2
 8001ff2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8001ff4:	18bb      	adds	r3, r7, r2
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d114      	bne.n	8002026 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001ffc:	187b      	adds	r3, r7, r1
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2220      	movs	r2, #32
 8002002:	4013      	ands	r3, r2
 8002004:	d00f      	beq.n	8002026 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002006:	183b      	adds	r3, r7, r0
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2220      	movs	r2, #32
 800200c:	4013      	ands	r3, r2
 800200e:	d00a      	beq.n	8002026 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002014:	2b00      	cmp	r3, #0
 8002016:	d100      	bne.n	800201a <HAL_UART_IRQHandler+0x62>
 8002018:	e296      	b.n	8002548 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	0010      	movs	r0, r2
 8002022:	4798      	blx	r3
      }
      return;
 8002024:	e290      	b.n	8002548 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002026:	2398      	movs	r3, #152	; 0x98
 8002028:	18fb      	adds	r3, r7, r3
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d100      	bne.n	8002032 <HAL_UART_IRQHandler+0x7a>
 8002030:	e114      	b.n	800225c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002032:	239c      	movs	r3, #156	; 0x9c
 8002034:	18fb      	adds	r3, r7, r3
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2201      	movs	r2, #1
 800203a:	4013      	ands	r3, r2
 800203c:	d106      	bne.n	800204c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800203e:	23a0      	movs	r3, #160	; 0xa0
 8002040:	18fb      	adds	r3, r7, r3
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a83      	ldr	r2, [pc, #524]	; (8002254 <HAL_UART_IRQHandler+0x29c>)
 8002046:	4013      	ands	r3, r2
 8002048:	d100      	bne.n	800204c <HAL_UART_IRQHandler+0x94>
 800204a:	e107      	b.n	800225c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800204c:	23a4      	movs	r3, #164	; 0xa4
 800204e:	18fb      	adds	r3, r7, r3
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2201      	movs	r2, #1
 8002054:	4013      	ands	r3, r2
 8002056:	d012      	beq.n	800207e <HAL_UART_IRQHandler+0xc6>
 8002058:	23a0      	movs	r3, #160	; 0xa0
 800205a:	18fb      	adds	r3, r7, r3
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	2380      	movs	r3, #128	; 0x80
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	4013      	ands	r3, r2
 8002064:	d00b      	beq.n	800207e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2201      	movs	r2, #1
 800206c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2280      	movs	r2, #128	; 0x80
 8002072:	589b      	ldr	r3, [r3, r2]
 8002074:	2201      	movs	r2, #1
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2180      	movs	r1, #128	; 0x80
 800207c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800207e:	23a4      	movs	r3, #164	; 0xa4
 8002080:	18fb      	adds	r3, r7, r3
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2202      	movs	r2, #2
 8002086:	4013      	ands	r3, r2
 8002088:	d011      	beq.n	80020ae <HAL_UART_IRQHandler+0xf6>
 800208a:	239c      	movs	r3, #156	; 0x9c
 800208c:	18fb      	adds	r3, r7, r3
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2201      	movs	r2, #1
 8002092:	4013      	ands	r3, r2
 8002094:	d00b      	beq.n	80020ae <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2202      	movs	r2, #2
 800209c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2280      	movs	r2, #128	; 0x80
 80020a2:	589b      	ldr	r3, [r3, r2]
 80020a4:	2204      	movs	r2, #4
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2180      	movs	r1, #128	; 0x80
 80020ac:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80020ae:	23a4      	movs	r3, #164	; 0xa4
 80020b0:	18fb      	adds	r3, r7, r3
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2204      	movs	r2, #4
 80020b6:	4013      	ands	r3, r2
 80020b8:	d011      	beq.n	80020de <HAL_UART_IRQHandler+0x126>
 80020ba:	239c      	movs	r3, #156	; 0x9c
 80020bc:	18fb      	adds	r3, r7, r3
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2201      	movs	r2, #1
 80020c2:	4013      	ands	r3, r2
 80020c4:	d00b      	beq.n	80020de <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2204      	movs	r2, #4
 80020cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2280      	movs	r2, #128	; 0x80
 80020d2:	589b      	ldr	r3, [r3, r2]
 80020d4:	2202      	movs	r2, #2
 80020d6:	431a      	orrs	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2180      	movs	r1, #128	; 0x80
 80020dc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80020de:	23a4      	movs	r3, #164	; 0xa4
 80020e0:	18fb      	adds	r3, r7, r3
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2208      	movs	r2, #8
 80020e6:	4013      	ands	r3, r2
 80020e8:	d017      	beq.n	800211a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80020ea:	23a0      	movs	r3, #160	; 0xa0
 80020ec:	18fb      	adds	r3, r7, r3
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2220      	movs	r2, #32
 80020f2:	4013      	ands	r3, r2
 80020f4:	d105      	bne.n	8002102 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80020f6:	239c      	movs	r3, #156	; 0x9c
 80020f8:	18fb      	adds	r3, r7, r3
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2201      	movs	r2, #1
 80020fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002100:	d00b      	beq.n	800211a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2208      	movs	r2, #8
 8002108:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2280      	movs	r2, #128	; 0x80
 800210e:	589b      	ldr	r3, [r3, r2]
 8002110:	2208      	movs	r2, #8
 8002112:	431a      	orrs	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2180      	movs	r1, #128	; 0x80
 8002118:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800211a:	23a4      	movs	r3, #164	; 0xa4
 800211c:	18fb      	adds	r3, r7, r3
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	2380      	movs	r3, #128	; 0x80
 8002122:	011b      	lsls	r3, r3, #4
 8002124:	4013      	ands	r3, r2
 8002126:	d013      	beq.n	8002150 <HAL_UART_IRQHandler+0x198>
 8002128:	23a0      	movs	r3, #160	; 0xa0
 800212a:	18fb      	adds	r3, r7, r3
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	2380      	movs	r3, #128	; 0x80
 8002130:	04db      	lsls	r3, r3, #19
 8002132:	4013      	ands	r3, r2
 8002134:	d00c      	beq.n	8002150 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2280      	movs	r2, #128	; 0x80
 800213c:	0112      	lsls	r2, r2, #4
 800213e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2280      	movs	r2, #128	; 0x80
 8002144:	589b      	ldr	r3, [r3, r2]
 8002146:	2220      	movs	r2, #32
 8002148:	431a      	orrs	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2180      	movs	r1, #128	; 0x80
 800214e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2280      	movs	r2, #128	; 0x80
 8002154:	589b      	ldr	r3, [r3, r2]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d100      	bne.n	800215c <HAL_UART_IRQHandler+0x1a4>
 800215a:	e1f7      	b.n	800254c <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800215c:	23a4      	movs	r3, #164	; 0xa4
 800215e:	18fb      	adds	r3, r7, r3
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2220      	movs	r2, #32
 8002164:	4013      	ands	r3, r2
 8002166:	d00e      	beq.n	8002186 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002168:	23a0      	movs	r3, #160	; 0xa0
 800216a:	18fb      	adds	r3, r7, r3
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2220      	movs	r2, #32
 8002170:	4013      	ands	r3, r2
 8002172:	d008      	beq.n	8002186 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002178:	2b00      	cmp	r3, #0
 800217a:	d004      	beq.n	8002186 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	0010      	movs	r0, r2
 8002184:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2280      	movs	r2, #128	; 0x80
 800218a:	589b      	ldr	r3, [r3, r2]
 800218c:	2194      	movs	r1, #148	; 0x94
 800218e:	187a      	adds	r2, r7, r1
 8002190:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2240      	movs	r2, #64	; 0x40
 800219a:	4013      	ands	r3, r2
 800219c:	2b40      	cmp	r3, #64	; 0x40
 800219e:	d004      	beq.n	80021aa <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80021a0:	187b      	adds	r3, r7, r1
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2228      	movs	r2, #40	; 0x28
 80021a6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80021a8:	d047      	beq.n	800223a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	0018      	movs	r0, r3
 80021ae:	f000 fe09 	bl	8002dc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	2240      	movs	r2, #64	; 0x40
 80021ba:	4013      	ands	r3, r2
 80021bc:	2b40      	cmp	r3, #64	; 0x40
 80021be:	d137      	bne.n	8002230 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021c0:	f3ef 8310 	mrs	r3, PRIMASK
 80021c4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80021c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021c8:	2090      	movs	r0, #144	; 0x90
 80021ca:	183a      	adds	r2, r7, r0
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	2301      	movs	r3, #1
 80021d0:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021d4:	f383 8810 	msr	PRIMASK, r3
}
 80021d8:	46c0      	nop			; (mov r8, r8)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2140      	movs	r1, #64	; 0x40
 80021e6:	438a      	bics	r2, r1
 80021e8:	609a      	str	r2, [r3, #8]
 80021ea:	183b      	adds	r3, r7, r0
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021f2:	f383 8810 	msr	PRIMASK, r3
}
 80021f6:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d012      	beq.n	8002226 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002204:	4a14      	ldr	r2, [pc, #80]	; (8002258 <HAL_UART_IRQHandler+0x2a0>)
 8002206:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220c:	0018      	movs	r0, r3
 800220e:	f7fe fdd9 	bl	8000dc4 <HAL_DMA_Abort_IT>
 8002212:	1e03      	subs	r3, r0, #0
 8002214:	d01a      	beq.n	800224c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002220:	0018      	movs	r0, r3
 8002222:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002224:	e012      	b.n	800224c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	0018      	movs	r0, r3
 800222a:	f000 f9b5 	bl	8002598 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800222e:	e00d      	b.n	800224c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	0018      	movs	r0, r3
 8002234:	f000 f9b0 	bl	8002598 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002238:	e008      	b.n	800224c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	0018      	movs	r0, r3
 800223e:	f000 f9ab 	bl	8002598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2280      	movs	r2, #128	; 0x80
 8002246:	2100      	movs	r1, #0
 8002248:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800224a:	e17f      	b.n	800254c <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800224c:	46c0      	nop			; (mov r8, r8)
    return;
 800224e:	e17d      	b.n	800254c <HAL_UART_IRQHandler+0x594>
 8002250:	0000080f 	.word	0x0000080f
 8002254:	04000120 	.word	0x04000120
 8002258:	0800306b 	.word	0x0800306b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002260:	2b01      	cmp	r3, #1
 8002262:	d000      	beq.n	8002266 <HAL_UART_IRQHandler+0x2ae>
 8002264:	e131      	b.n	80024ca <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002266:	23a4      	movs	r3, #164	; 0xa4
 8002268:	18fb      	adds	r3, r7, r3
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2210      	movs	r2, #16
 800226e:	4013      	ands	r3, r2
 8002270:	d100      	bne.n	8002274 <HAL_UART_IRQHandler+0x2bc>
 8002272:	e12a      	b.n	80024ca <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002274:	23a0      	movs	r3, #160	; 0xa0
 8002276:	18fb      	adds	r3, r7, r3
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2210      	movs	r2, #16
 800227c:	4013      	ands	r3, r2
 800227e:	d100      	bne.n	8002282 <HAL_UART_IRQHandler+0x2ca>
 8002280:	e123      	b.n	80024ca <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2210      	movs	r2, #16
 8002288:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	2240      	movs	r2, #64	; 0x40
 8002292:	4013      	ands	r3, r2
 8002294:	2b40      	cmp	r3, #64	; 0x40
 8002296:	d000      	beq.n	800229a <HAL_UART_IRQHandler+0x2e2>
 8002298:	e09b      	b.n	80023d2 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	217e      	movs	r1, #126	; 0x7e
 80022a4:	187b      	adds	r3, r7, r1
 80022a6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80022a8:	187b      	adds	r3, r7, r1
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d100      	bne.n	80022b2 <HAL_UART_IRQHandler+0x2fa>
 80022b0:	e14e      	b.n	8002550 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2258      	movs	r2, #88	; 0x58
 80022b6:	5a9b      	ldrh	r3, [r3, r2]
 80022b8:	187a      	adds	r2, r7, r1
 80022ba:	8812      	ldrh	r2, [r2, #0]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d300      	bcc.n	80022c2 <HAL_UART_IRQHandler+0x30a>
 80022c0:	e146      	b.n	8002550 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	187a      	adds	r2, r7, r1
 80022c6:	215a      	movs	r1, #90	; 0x5a
 80022c8:	8812      	ldrh	r2, [r2, #0]
 80022ca:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	2b20      	cmp	r3, #32
 80022d4:	d06e      	beq.n	80023b4 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022d6:	f3ef 8310 	mrs	r3, PRIMASK
 80022da:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80022dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80022de:	67bb      	str	r3, [r7, #120]	; 0x78
 80022e0:	2301      	movs	r3, #1
 80022e2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022e6:	f383 8810 	msr	PRIMASK, r3
}
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	499a      	ldr	r1, [pc, #616]	; (8002560 <HAL_UART_IRQHandler+0x5a8>)
 80022f8:	400a      	ands	r2, r1
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022fe:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002302:	f383 8810 	msr	PRIMASK, r3
}
 8002306:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002308:	f3ef 8310 	mrs	r3, PRIMASK
 800230c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800230e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002310:	677b      	str	r3, [r7, #116]	; 0x74
 8002312:	2301      	movs	r3, #1
 8002314:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002318:	f383 8810 	msr	PRIMASK, r3
}
 800231c:	46c0      	nop			; (mov r8, r8)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2101      	movs	r1, #1
 800232a:	438a      	bics	r2, r1
 800232c:	609a      	str	r2, [r3, #8]
 800232e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002330:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002334:	f383 8810 	msr	PRIMASK, r3
}
 8002338:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800233a:	f3ef 8310 	mrs	r3, PRIMASK
 800233e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002340:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002342:	673b      	str	r3, [r7, #112]	; 0x70
 8002344:	2301      	movs	r3, #1
 8002346:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800234a:	f383 8810 	msr	PRIMASK, r3
}
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2140      	movs	r1, #64	; 0x40
 800235c:	438a      	bics	r2, r1
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002362:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002366:	f383 8810 	msr	PRIMASK, r3
}
 800236a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2220      	movs	r2, #32
 8002370:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002378:	f3ef 8310 	mrs	r3, PRIMASK
 800237c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800237e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002380:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002382:	2301      	movs	r3, #1
 8002384:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002386:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002388:	f383 8810 	msr	PRIMASK, r3
}
 800238c:	46c0      	nop			; (mov r8, r8)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2110      	movs	r1, #16
 800239a:	438a      	bics	r2, r1
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023a4:	f383 8810 	msr	PRIMASK, r3
}
 80023a8:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ae:	0018      	movs	r0, r3
 80023b0:	f7fe fcd0 	bl	8000d54 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2258      	movs	r2, #88	; 0x58
 80023b8:	5a9a      	ldrh	r2, [r3, r2]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	215a      	movs	r1, #90	; 0x5a
 80023be:	5a5b      	ldrh	r3, [r3, r1]
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	0011      	movs	r1, r2
 80023ca:	0018      	movs	r0, r3
 80023cc:	f7fe f9d4 	bl	8000778 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80023d0:	e0be      	b.n	8002550 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2258      	movs	r2, #88	; 0x58
 80023d6:	5a99      	ldrh	r1, [r3, r2]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	225a      	movs	r2, #90	; 0x5a
 80023dc:	5a9b      	ldrh	r3, [r3, r2]
 80023de:	b29a      	uxth	r2, r3
 80023e0:	208e      	movs	r0, #142	; 0x8e
 80023e2:	183b      	adds	r3, r7, r0
 80023e4:	1a8a      	subs	r2, r1, r2
 80023e6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	225a      	movs	r2, #90	; 0x5a
 80023ec:	5a9b      	ldrh	r3, [r3, r2]
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d100      	bne.n	80023f6 <HAL_UART_IRQHandler+0x43e>
 80023f4:	e0ae      	b.n	8002554 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80023f6:	183b      	adds	r3, r7, r0
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d100      	bne.n	8002400 <HAL_UART_IRQHandler+0x448>
 80023fe:	e0a9      	b.n	8002554 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002400:	f3ef 8310 	mrs	r3, PRIMASK
 8002404:	60fb      	str	r3, [r7, #12]
  return(result);
 8002406:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002408:	2488      	movs	r4, #136	; 0x88
 800240a:	193a      	adds	r2, r7, r4
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	2301      	movs	r3, #1
 8002410:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	f383 8810 	msr	PRIMASK, r3
}
 8002418:	46c0      	nop			; (mov r8, r8)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	494f      	ldr	r1, [pc, #316]	; (8002564 <HAL_UART_IRQHandler+0x5ac>)
 8002426:	400a      	ands	r2, r1
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	193b      	adds	r3, r7, r4
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f383 8810 	msr	PRIMASK, r3
}
 8002436:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002438:	f3ef 8310 	mrs	r3, PRIMASK
 800243c:	61bb      	str	r3, [r7, #24]
  return(result);
 800243e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002440:	2484      	movs	r4, #132	; 0x84
 8002442:	193a      	adds	r2, r7, r4
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	2301      	movs	r3, #1
 8002448:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	f383 8810 	msr	PRIMASK, r3
}
 8002450:	46c0      	nop			; (mov r8, r8)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2101      	movs	r1, #1
 800245e:	438a      	bics	r2, r1
 8002460:	609a      	str	r2, [r3, #8]
 8002462:	193b      	adds	r3, r7, r4
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	f383 8810 	msr	PRIMASK, r3
}
 800246e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2220      	movs	r2, #32
 8002474:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002482:	f3ef 8310 	mrs	r3, PRIMASK
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800248a:	2480      	movs	r4, #128	; 0x80
 800248c:	193a      	adds	r2, r7, r4
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	2301      	movs	r3, #1
 8002492:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002496:	f383 8810 	msr	PRIMASK, r3
}
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2110      	movs	r1, #16
 80024a8:	438a      	bics	r2, r1
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	193b      	adds	r3, r7, r4
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b4:	f383 8810 	msr	PRIMASK, r3
}
 80024b8:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80024ba:	183b      	adds	r3, r7, r0
 80024bc:	881a      	ldrh	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	0011      	movs	r1, r2
 80024c2:	0018      	movs	r0, r3
 80024c4:	f7fe f958 	bl	8000778 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80024c8:	e044      	b.n	8002554 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80024ca:	23a4      	movs	r3, #164	; 0xa4
 80024cc:	18fb      	adds	r3, r7, r3
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	2380      	movs	r3, #128	; 0x80
 80024d2:	035b      	lsls	r3, r3, #13
 80024d4:	4013      	ands	r3, r2
 80024d6:	d010      	beq.n	80024fa <HAL_UART_IRQHandler+0x542>
 80024d8:	239c      	movs	r3, #156	; 0x9c
 80024da:	18fb      	adds	r3, r7, r3
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	2380      	movs	r3, #128	; 0x80
 80024e0:	03db      	lsls	r3, r3, #15
 80024e2:	4013      	ands	r3, r2
 80024e4:	d009      	beq.n	80024fa <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2280      	movs	r2, #128	; 0x80
 80024ec:	0352      	lsls	r2, r2, #13
 80024ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	0018      	movs	r0, r3
 80024f4:	f000 fdfb 	bl	80030ee <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80024f8:	e02f      	b.n	800255a <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80024fa:	23a4      	movs	r3, #164	; 0xa4
 80024fc:	18fb      	adds	r3, r7, r3
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2280      	movs	r2, #128	; 0x80
 8002502:	4013      	ands	r3, r2
 8002504:	d00f      	beq.n	8002526 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002506:	23a0      	movs	r3, #160	; 0xa0
 8002508:	18fb      	adds	r3, r7, r3
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2280      	movs	r2, #128	; 0x80
 800250e:	4013      	ands	r3, r2
 8002510:	d009      	beq.n	8002526 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002516:	2b00      	cmp	r3, #0
 8002518:	d01e      	beq.n	8002558 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	0010      	movs	r0, r2
 8002522:	4798      	blx	r3
    }
    return;
 8002524:	e018      	b.n	8002558 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002526:	23a4      	movs	r3, #164	; 0xa4
 8002528:	18fb      	adds	r3, r7, r3
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2240      	movs	r2, #64	; 0x40
 800252e:	4013      	ands	r3, r2
 8002530:	d013      	beq.n	800255a <HAL_UART_IRQHandler+0x5a2>
 8002532:	23a0      	movs	r3, #160	; 0xa0
 8002534:	18fb      	adds	r3, r7, r3
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2240      	movs	r2, #64	; 0x40
 800253a:	4013      	ands	r3, r2
 800253c:	d00d      	beq.n	800255a <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	0018      	movs	r0, r3
 8002542:	f000 fda9 	bl	8003098 <UART_EndTransmit_IT>
    return;
 8002546:	e008      	b.n	800255a <HAL_UART_IRQHandler+0x5a2>
      return;
 8002548:	46c0      	nop			; (mov r8, r8)
 800254a:	e006      	b.n	800255a <HAL_UART_IRQHandler+0x5a2>
    return;
 800254c:	46c0      	nop			; (mov r8, r8)
 800254e:	e004      	b.n	800255a <HAL_UART_IRQHandler+0x5a2>
      return;
 8002550:	46c0      	nop			; (mov r8, r8)
 8002552:	e002      	b.n	800255a <HAL_UART_IRQHandler+0x5a2>
      return;
 8002554:	46c0      	nop			; (mov r8, r8)
 8002556:	e000      	b.n	800255a <HAL_UART_IRQHandler+0x5a2>
    return;
 8002558:	46c0      	nop			; (mov r8, r8)
  }

}
 800255a:	46bd      	mov	sp, r7
 800255c:	b02b      	add	sp, #172	; 0xac
 800255e:	bd90      	pop	{r4, r7, pc}
 8002560:	fffffeff 	.word	0xfffffeff
 8002564:	fffffedf 	.word	0xfffffedf

08002568 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002570:	46c0      	nop			; (mov r8, r8)
 8002572:	46bd      	mov	sp, r7
 8002574:	b002      	add	sp, #8
 8002576:	bd80      	pop	{r7, pc}

08002578 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002580:	46c0      	nop			; (mov r8, r8)
 8002582:	46bd      	mov	sp, r7
 8002584:	b002      	add	sp, #8
 8002586:	bd80      	pop	{r7, pc}

08002588 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002590:	46c0      	nop			; (mov r8, r8)
 8002592:	46bd      	mov	sp, r7
 8002594:	b002      	add	sp, #8
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80025a0:	46c0      	nop			; (mov r8, r8)
 80025a2:	46bd      	mov	sp, r7
 80025a4:	b002      	add	sp, #8
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80025b0:	231e      	movs	r3, #30
 80025b2:	18fb      	adds	r3, r7, r3
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	431a      	orrs	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4aaf      	ldr	r2, [pc, #700]	; (8002894 <UART_SetConfig+0x2ec>)
 80025d8:	4013      	ands	r3, r2
 80025da:	0019      	movs	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	4aaa      	ldr	r2, [pc, #680]	; (8002898 <UART_SetConfig+0x2f0>)
 80025ee:	4013      	ands	r3, r2
 80025f0:	0019      	movs	r1, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68da      	ldr	r2, [r3, #12]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	4313      	orrs	r3, r2
 800260c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	4aa1      	ldr	r2, [pc, #644]	; (800289c <UART_SetConfig+0x2f4>)
 8002616:	4013      	ands	r3, r2
 8002618:	0019      	movs	r1, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	430a      	orrs	r2, r1
 8002622:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a9d      	ldr	r2, [pc, #628]	; (80028a0 <UART_SetConfig+0x2f8>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d127      	bne.n	800267e <UART_SetConfig+0xd6>
 800262e:	4b9d      	ldr	r3, [pc, #628]	; (80028a4 <UART_SetConfig+0x2fc>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	2203      	movs	r2, #3
 8002634:	4013      	ands	r3, r2
 8002636:	2b03      	cmp	r3, #3
 8002638:	d00d      	beq.n	8002656 <UART_SetConfig+0xae>
 800263a:	d81b      	bhi.n	8002674 <UART_SetConfig+0xcc>
 800263c:	2b02      	cmp	r3, #2
 800263e:	d014      	beq.n	800266a <UART_SetConfig+0xc2>
 8002640:	d818      	bhi.n	8002674 <UART_SetConfig+0xcc>
 8002642:	2b00      	cmp	r3, #0
 8002644:	d002      	beq.n	800264c <UART_SetConfig+0xa4>
 8002646:	2b01      	cmp	r3, #1
 8002648:	d00a      	beq.n	8002660 <UART_SetConfig+0xb8>
 800264a:	e013      	b.n	8002674 <UART_SetConfig+0xcc>
 800264c:	231f      	movs	r3, #31
 800264e:	18fb      	adds	r3, r7, r3
 8002650:	2200      	movs	r2, #0
 8002652:	701a      	strb	r2, [r3, #0]
 8002654:	e065      	b.n	8002722 <UART_SetConfig+0x17a>
 8002656:	231f      	movs	r3, #31
 8002658:	18fb      	adds	r3, r7, r3
 800265a:	2202      	movs	r2, #2
 800265c:	701a      	strb	r2, [r3, #0]
 800265e:	e060      	b.n	8002722 <UART_SetConfig+0x17a>
 8002660:	231f      	movs	r3, #31
 8002662:	18fb      	adds	r3, r7, r3
 8002664:	2204      	movs	r2, #4
 8002666:	701a      	strb	r2, [r3, #0]
 8002668:	e05b      	b.n	8002722 <UART_SetConfig+0x17a>
 800266a:	231f      	movs	r3, #31
 800266c:	18fb      	adds	r3, r7, r3
 800266e:	2208      	movs	r2, #8
 8002670:	701a      	strb	r2, [r3, #0]
 8002672:	e056      	b.n	8002722 <UART_SetConfig+0x17a>
 8002674:	231f      	movs	r3, #31
 8002676:	18fb      	adds	r3, r7, r3
 8002678:	2210      	movs	r2, #16
 800267a:	701a      	strb	r2, [r3, #0]
 800267c:	e051      	b.n	8002722 <UART_SetConfig+0x17a>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a89      	ldr	r2, [pc, #548]	; (80028a8 <UART_SetConfig+0x300>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d134      	bne.n	80026f2 <UART_SetConfig+0x14a>
 8002688:	4b86      	ldr	r3, [pc, #536]	; (80028a4 <UART_SetConfig+0x2fc>)
 800268a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800268c:	23c0      	movs	r3, #192	; 0xc0
 800268e:	029b      	lsls	r3, r3, #10
 8002690:	4013      	ands	r3, r2
 8002692:	22c0      	movs	r2, #192	; 0xc0
 8002694:	0292      	lsls	r2, r2, #10
 8002696:	4293      	cmp	r3, r2
 8002698:	d017      	beq.n	80026ca <UART_SetConfig+0x122>
 800269a:	22c0      	movs	r2, #192	; 0xc0
 800269c:	0292      	lsls	r2, r2, #10
 800269e:	4293      	cmp	r3, r2
 80026a0:	d822      	bhi.n	80026e8 <UART_SetConfig+0x140>
 80026a2:	2280      	movs	r2, #128	; 0x80
 80026a4:	0292      	lsls	r2, r2, #10
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d019      	beq.n	80026de <UART_SetConfig+0x136>
 80026aa:	2280      	movs	r2, #128	; 0x80
 80026ac:	0292      	lsls	r2, r2, #10
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d81a      	bhi.n	80026e8 <UART_SetConfig+0x140>
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d004      	beq.n	80026c0 <UART_SetConfig+0x118>
 80026b6:	2280      	movs	r2, #128	; 0x80
 80026b8:	0252      	lsls	r2, r2, #9
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d00a      	beq.n	80026d4 <UART_SetConfig+0x12c>
 80026be:	e013      	b.n	80026e8 <UART_SetConfig+0x140>
 80026c0:	231f      	movs	r3, #31
 80026c2:	18fb      	adds	r3, r7, r3
 80026c4:	2200      	movs	r2, #0
 80026c6:	701a      	strb	r2, [r3, #0]
 80026c8:	e02b      	b.n	8002722 <UART_SetConfig+0x17a>
 80026ca:	231f      	movs	r3, #31
 80026cc:	18fb      	adds	r3, r7, r3
 80026ce:	2202      	movs	r2, #2
 80026d0:	701a      	strb	r2, [r3, #0]
 80026d2:	e026      	b.n	8002722 <UART_SetConfig+0x17a>
 80026d4:	231f      	movs	r3, #31
 80026d6:	18fb      	adds	r3, r7, r3
 80026d8:	2204      	movs	r2, #4
 80026da:	701a      	strb	r2, [r3, #0]
 80026dc:	e021      	b.n	8002722 <UART_SetConfig+0x17a>
 80026de:	231f      	movs	r3, #31
 80026e0:	18fb      	adds	r3, r7, r3
 80026e2:	2208      	movs	r2, #8
 80026e4:	701a      	strb	r2, [r3, #0]
 80026e6:	e01c      	b.n	8002722 <UART_SetConfig+0x17a>
 80026e8:	231f      	movs	r3, #31
 80026ea:	18fb      	adds	r3, r7, r3
 80026ec:	2210      	movs	r2, #16
 80026ee:	701a      	strb	r2, [r3, #0]
 80026f0:	e017      	b.n	8002722 <UART_SetConfig+0x17a>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a6d      	ldr	r2, [pc, #436]	; (80028ac <UART_SetConfig+0x304>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d104      	bne.n	8002706 <UART_SetConfig+0x15e>
 80026fc:	231f      	movs	r3, #31
 80026fe:	18fb      	adds	r3, r7, r3
 8002700:	2200      	movs	r2, #0
 8002702:	701a      	strb	r2, [r3, #0]
 8002704:	e00d      	b.n	8002722 <UART_SetConfig+0x17a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a69      	ldr	r2, [pc, #420]	; (80028b0 <UART_SetConfig+0x308>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d104      	bne.n	800271a <UART_SetConfig+0x172>
 8002710:	231f      	movs	r3, #31
 8002712:	18fb      	adds	r3, r7, r3
 8002714:	2200      	movs	r2, #0
 8002716:	701a      	strb	r2, [r3, #0]
 8002718:	e003      	b.n	8002722 <UART_SetConfig+0x17a>
 800271a:	231f      	movs	r3, #31
 800271c:	18fb      	adds	r3, r7, r3
 800271e:	2210      	movs	r2, #16
 8002720:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69da      	ldr	r2, [r3, #28]
 8002726:	2380      	movs	r3, #128	; 0x80
 8002728:	021b      	lsls	r3, r3, #8
 800272a:	429a      	cmp	r2, r3
 800272c:	d15d      	bne.n	80027ea <UART_SetConfig+0x242>
  {
    switch (clocksource)
 800272e:	231f      	movs	r3, #31
 8002730:	18fb      	adds	r3, r7, r3
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b08      	cmp	r3, #8
 8002736:	d015      	beq.n	8002764 <UART_SetConfig+0x1bc>
 8002738:	dc18      	bgt.n	800276c <UART_SetConfig+0x1c4>
 800273a:	2b04      	cmp	r3, #4
 800273c:	d00d      	beq.n	800275a <UART_SetConfig+0x1b2>
 800273e:	dc15      	bgt.n	800276c <UART_SetConfig+0x1c4>
 8002740:	2b00      	cmp	r3, #0
 8002742:	d002      	beq.n	800274a <UART_SetConfig+0x1a2>
 8002744:	2b02      	cmp	r3, #2
 8002746:	d005      	beq.n	8002754 <UART_SetConfig+0x1ac>
 8002748:	e010      	b.n	800276c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800274a:	f7ff facd 	bl	8001ce8 <HAL_RCC_GetPCLK1Freq>
 800274e:	0003      	movs	r3, r0
 8002750:	61bb      	str	r3, [r7, #24]
        break;
 8002752:	e012      	b.n	800277a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002754:	4b57      	ldr	r3, [pc, #348]	; (80028b4 <UART_SetConfig+0x30c>)
 8002756:	61bb      	str	r3, [r7, #24]
        break;
 8002758:	e00f      	b.n	800277a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800275a:	f7ff fa3b 	bl	8001bd4 <HAL_RCC_GetSysClockFreq>
 800275e:	0003      	movs	r3, r0
 8002760:	61bb      	str	r3, [r7, #24]
        break;
 8002762:	e00a      	b.n	800277a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002764:	2380      	movs	r3, #128	; 0x80
 8002766:	021b      	lsls	r3, r3, #8
 8002768:	61bb      	str	r3, [r7, #24]
        break;
 800276a:	e006      	b.n	800277a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800276c:	2300      	movs	r3, #0
 800276e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002770:	231e      	movs	r3, #30
 8002772:	18fb      	adds	r3, r7, r3
 8002774:	2201      	movs	r2, #1
 8002776:	701a      	strb	r2, [r3, #0]
        break;
 8002778:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d100      	bne.n	8002782 <UART_SetConfig+0x1da>
 8002780:	e07b      	b.n	800287a <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	005a      	lsls	r2, r3, #1
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	085b      	lsrs	r3, r3, #1
 800278c:	18d2      	adds	r2, r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	0019      	movs	r1, r3
 8002794:	0010      	movs	r0, r2
 8002796:	f7fd fcbf 	bl	8000118 <__udivsi3>
 800279a:	0003      	movs	r3, r0
 800279c:	b29b      	uxth	r3, r3
 800279e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	2b0f      	cmp	r3, #15
 80027a4:	d91c      	bls.n	80027e0 <UART_SetConfig+0x238>
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	2380      	movs	r3, #128	; 0x80
 80027aa:	025b      	lsls	r3, r3, #9
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d217      	bcs.n	80027e0 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	200e      	movs	r0, #14
 80027b6:	183b      	adds	r3, r7, r0
 80027b8:	210f      	movs	r1, #15
 80027ba:	438a      	bics	r2, r1
 80027bc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	085b      	lsrs	r3, r3, #1
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	2207      	movs	r2, #7
 80027c6:	4013      	ands	r3, r2
 80027c8:	b299      	uxth	r1, r3
 80027ca:	183b      	adds	r3, r7, r0
 80027cc:	183a      	adds	r2, r7, r0
 80027ce:	8812      	ldrh	r2, [r2, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	183a      	adds	r2, r7, r0
 80027da:	8812      	ldrh	r2, [r2, #0]
 80027dc:	60da      	str	r2, [r3, #12]
 80027de:	e04c      	b.n	800287a <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80027e0:	231e      	movs	r3, #30
 80027e2:	18fb      	adds	r3, r7, r3
 80027e4:	2201      	movs	r2, #1
 80027e6:	701a      	strb	r2, [r3, #0]
 80027e8:	e047      	b.n	800287a <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80027ea:	231f      	movs	r3, #31
 80027ec:	18fb      	adds	r3, r7, r3
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b08      	cmp	r3, #8
 80027f2:	d015      	beq.n	8002820 <UART_SetConfig+0x278>
 80027f4:	dc18      	bgt.n	8002828 <UART_SetConfig+0x280>
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d00d      	beq.n	8002816 <UART_SetConfig+0x26e>
 80027fa:	dc15      	bgt.n	8002828 <UART_SetConfig+0x280>
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d002      	beq.n	8002806 <UART_SetConfig+0x25e>
 8002800:	2b02      	cmp	r3, #2
 8002802:	d005      	beq.n	8002810 <UART_SetConfig+0x268>
 8002804:	e010      	b.n	8002828 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002806:	f7ff fa6f 	bl	8001ce8 <HAL_RCC_GetPCLK1Freq>
 800280a:	0003      	movs	r3, r0
 800280c:	61bb      	str	r3, [r7, #24]
        break;
 800280e:	e012      	b.n	8002836 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002810:	4b28      	ldr	r3, [pc, #160]	; (80028b4 <UART_SetConfig+0x30c>)
 8002812:	61bb      	str	r3, [r7, #24]
        break;
 8002814:	e00f      	b.n	8002836 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002816:	f7ff f9dd 	bl	8001bd4 <HAL_RCC_GetSysClockFreq>
 800281a:	0003      	movs	r3, r0
 800281c:	61bb      	str	r3, [r7, #24]
        break;
 800281e:	e00a      	b.n	8002836 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002820:	2380      	movs	r3, #128	; 0x80
 8002822:	021b      	lsls	r3, r3, #8
 8002824:	61bb      	str	r3, [r7, #24]
        break;
 8002826:	e006      	b.n	8002836 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8002828:	2300      	movs	r3, #0
 800282a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800282c:	231e      	movs	r3, #30
 800282e:	18fb      	adds	r3, r7, r3
 8002830:	2201      	movs	r2, #1
 8002832:	701a      	strb	r2, [r3, #0]
        break;
 8002834:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d01e      	beq.n	800287a <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	085a      	lsrs	r2, r3, #1
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	18d2      	adds	r2, r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	0019      	movs	r1, r3
 800284c:	0010      	movs	r0, r2
 800284e:	f7fd fc63 	bl	8000118 <__udivsi3>
 8002852:	0003      	movs	r3, r0
 8002854:	b29b      	uxth	r3, r3
 8002856:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	2b0f      	cmp	r3, #15
 800285c:	d909      	bls.n	8002872 <UART_SetConfig+0x2ca>
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	2380      	movs	r3, #128	; 0x80
 8002862:	025b      	lsls	r3, r3, #9
 8002864:	429a      	cmp	r2, r3
 8002866:	d204      	bcs.n	8002872 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	60da      	str	r2, [r3, #12]
 8002870:	e003      	b.n	800287a <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8002872:	231e      	movs	r3, #30
 8002874:	18fb      	adds	r3, r7, r3
 8002876:	2201      	movs	r2, #1
 8002878:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002886:	231e      	movs	r3, #30
 8002888:	18fb      	adds	r3, r7, r3
 800288a:	781b      	ldrb	r3, [r3, #0]
}
 800288c:	0018      	movs	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	b008      	add	sp, #32
 8002892:	bd80      	pop	{r7, pc}
 8002894:	efff69f3 	.word	0xefff69f3
 8002898:	ffffcfff 	.word	0xffffcfff
 800289c:	fffff4ff 	.word	0xfffff4ff
 80028a0:	40013800 	.word	0x40013800
 80028a4:	40021000 	.word	0x40021000
 80028a8:	40004400 	.word	0x40004400
 80028ac:	40004800 	.word	0x40004800
 80028b0:	40004c00 	.word	0x40004c00
 80028b4:	007a1200 	.word	0x007a1200

080028b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	2201      	movs	r2, #1
 80028c6:	4013      	ands	r3, r2
 80028c8:	d00b      	beq.n	80028e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	4a4a      	ldr	r2, [pc, #296]	; (80029fc <UART_AdvFeatureConfig+0x144>)
 80028d2:	4013      	ands	r3, r2
 80028d4:	0019      	movs	r1, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	430a      	orrs	r2, r1
 80028e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e6:	2202      	movs	r2, #2
 80028e8:	4013      	ands	r3, r2
 80028ea:	d00b      	beq.n	8002904 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	4a43      	ldr	r2, [pc, #268]	; (8002a00 <UART_AdvFeatureConfig+0x148>)
 80028f4:	4013      	ands	r3, r2
 80028f6:	0019      	movs	r1, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	430a      	orrs	r2, r1
 8002902:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	2204      	movs	r2, #4
 800290a:	4013      	ands	r3, r2
 800290c:	d00b      	beq.n	8002926 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	4a3b      	ldr	r2, [pc, #236]	; (8002a04 <UART_AdvFeatureConfig+0x14c>)
 8002916:	4013      	ands	r3, r2
 8002918:	0019      	movs	r1, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	2208      	movs	r2, #8
 800292c:	4013      	ands	r3, r2
 800292e:	d00b      	beq.n	8002948 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	4a34      	ldr	r2, [pc, #208]	; (8002a08 <UART_AdvFeatureConfig+0x150>)
 8002938:	4013      	ands	r3, r2
 800293a:	0019      	movs	r1, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	2210      	movs	r2, #16
 800294e:	4013      	ands	r3, r2
 8002950:	d00b      	beq.n	800296a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	4a2c      	ldr	r2, [pc, #176]	; (8002a0c <UART_AdvFeatureConfig+0x154>)
 800295a:	4013      	ands	r3, r2
 800295c:	0019      	movs	r1, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	2220      	movs	r2, #32
 8002970:	4013      	ands	r3, r2
 8002972:	d00b      	beq.n	800298c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	4a25      	ldr	r2, [pc, #148]	; (8002a10 <UART_AdvFeatureConfig+0x158>)
 800297c:	4013      	ands	r3, r2
 800297e:	0019      	movs	r1, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	430a      	orrs	r2, r1
 800298a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	2240      	movs	r2, #64	; 0x40
 8002992:	4013      	ands	r3, r2
 8002994:	d01d      	beq.n	80029d2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	4a1d      	ldr	r2, [pc, #116]	; (8002a14 <UART_AdvFeatureConfig+0x15c>)
 800299e:	4013      	ands	r3, r2
 80029a0:	0019      	movs	r1, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029b2:	2380      	movs	r3, #128	; 0x80
 80029b4:	035b      	lsls	r3, r3, #13
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d10b      	bne.n	80029d2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	4a15      	ldr	r2, [pc, #84]	; (8002a18 <UART_AdvFeatureConfig+0x160>)
 80029c2:	4013      	ands	r3, r2
 80029c4:	0019      	movs	r1, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	2280      	movs	r2, #128	; 0x80
 80029d8:	4013      	ands	r3, r2
 80029da:	d00b      	beq.n	80029f4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	4a0e      	ldr	r2, [pc, #56]	; (8002a1c <UART_AdvFeatureConfig+0x164>)
 80029e4:	4013      	ands	r3, r2
 80029e6:	0019      	movs	r1, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	605a      	str	r2, [r3, #4]
  }
}
 80029f4:	46c0      	nop			; (mov r8, r8)
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b002      	add	sp, #8
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	fffdffff 	.word	0xfffdffff
 8002a00:	fffeffff 	.word	0xfffeffff
 8002a04:	fffbffff 	.word	0xfffbffff
 8002a08:	ffff7fff 	.word	0xffff7fff
 8002a0c:	ffffefff 	.word	0xffffefff
 8002a10:	ffffdfff 	.word	0xffffdfff
 8002a14:	ffefffff 	.word	0xffefffff
 8002a18:	ff9fffff 	.word	0xff9fffff
 8002a1c:	fff7ffff 	.word	0xfff7ffff

08002a20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af02      	add	r7, sp, #8
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2280      	movs	r2, #128	; 0x80
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002a30:	f7fd ffd6 	bl	80009e0 <HAL_GetTick>
 8002a34:	0003      	movs	r3, r0
 8002a36:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2208      	movs	r2, #8
 8002a40:	4013      	ands	r3, r2
 8002a42:	2b08      	cmp	r3, #8
 8002a44:	d10c      	bne.n	8002a60 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2280      	movs	r2, #128	; 0x80
 8002a4a:	0391      	lsls	r1, r2, #14
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	4a17      	ldr	r2, [pc, #92]	; (8002aac <UART_CheckIdleState+0x8c>)
 8002a50:	9200      	str	r2, [sp, #0]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f000 f82c 	bl	8002ab0 <UART_WaitOnFlagUntilTimeout>
 8002a58:	1e03      	subs	r3, r0, #0
 8002a5a:	d001      	beq.n	8002a60 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e021      	b.n	8002aa4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2204      	movs	r2, #4
 8002a68:	4013      	ands	r3, r2
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d10c      	bne.n	8002a88 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2280      	movs	r2, #128	; 0x80
 8002a72:	03d1      	lsls	r1, r2, #15
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	4a0d      	ldr	r2, [pc, #52]	; (8002aac <UART_CheckIdleState+0x8c>)
 8002a78:	9200      	str	r2, [sp, #0]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f000 f818 	bl	8002ab0 <UART_WaitOnFlagUntilTimeout>
 8002a80:	1e03      	subs	r3, r0, #0
 8002a82:	d001      	beq.n	8002a88 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e00d      	b.n	8002aa4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2220      	movs	r2, #32
 8002a92:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2274      	movs	r2, #116	; 0x74
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b004      	add	sp, #16
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	01ffffff 	.word	0x01ffffff

08002ab0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b094      	sub	sp, #80	; 0x50
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	603b      	str	r3, [r7, #0]
 8002abc:	1dfb      	adds	r3, r7, #7
 8002abe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ac0:	e0a3      	b.n	8002c0a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ac2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	d100      	bne.n	8002aca <UART_WaitOnFlagUntilTimeout+0x1a>
 8002ac8:	e09f      	b.n	8002c0a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aca:	f7fd ff89 	bl	80009e0 <HAL_GetTick>
 8002ace:	0002      	movs	r2, r0
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d302      	bcc.n	8002ae0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ada:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d13d      	bne.n	8002b5c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ae0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ae8:	647b      	str	r3, [r7, #68]	; 0x44
 8002aea:	2301      	movs	r3, #1
 8002aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af0:	f383 8810 	msr	PRIMASK, r3
}
 8002af4:	46c0      	nop			; (mov r8, r8)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	494c      	ldr	r1, [pc, #304]	; (8002c34 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002b02:	400a      	ands	r2, r1
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b08:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0c:	f383 8810 	msr	PRIMASK, r3
}
 8002b10:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b12:	f3ef 8310 	mrs	r3, PRIMASK
 8002b16:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b1a:	643b      	str	r3, [r7, #64]	; 0x40
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b22:	f383 8810 	msr	PRIMASK, r3
}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689a      	ldr	r2, [r3, #8]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2101      	movs	r1, #1
 8002b34:	438a      	bics	r2, r1
 8002b36:	609a      	str	r2, [r3, #8]
 8002b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b3e:	f383 8810 	msr	PRIMASK, r3
}
 8002b42:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2220      	movs	r2, #32
 8002b48:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2274      	movs	r2, #116	; 0x74
 8002b54:	2100      	movs	r1, #0
 8002b56:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e067      	b.n	8002c2c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2204      	movs	r2, #4
 8002b64:	4013      	ands	r3, r2
 8002b66:	d050      	beq.n	8002c0a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	69da      	ldr	r2, [r3, #28]
 8002b6e:	2380      	movs	r3, #128	; 0x80
 8002b70:	011b      	lsls	r3, r3, #4
 8002b72:	401a      	ands	r2, r3
 8002b74:	2380      	movs	r3, #128	; 0x80
 8002b76:	011b      	lsls	r3, r3, #4
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d146      	bne.n	8002c0a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2280      	movs	r2, #128	; 0x80
 8002b82:	0112      	lsls	r2, r2, #4
 8002b84:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b86:	f3ef 8310 	mrs	r3, PRIMASK
 8002b8a:	613b      	str	r3, [r7, #16]
  return(result);
 8002b8c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b90:	2301      	movs	r3, #1
 8002b92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f383 8810 	msr	PRIMASK, r3
}
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4923      	ldr	r1, [pc, #140]	; (8002c34 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002ba8:	400a      	ands	r2, r1
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	f383 8810 	msr	PRIMASK, r3
}
 8002bb6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bb8:	f3ef 8310 	mrs	r3, PRIMASK
 8002bbc:	61fb      	str	r3, [r7, #28]
  return(result);
 8002bbe:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	f383 8810 	msr	PRIMASK, r3
}
 8002bcc:	46c0      	nop			; (mov r8, r8)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2101      	movs	r1, #1
 8002bda:	438a      	bics	r2, r1
 8002bdc:	609a      	str	r2, [r3, #8]
 8002bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	f383 8810 	msr	PRIMASK, r3
}
 8002be8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2220      	movs	r2, #32
 8002bee:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2280      	movs	r2, #128	; 0x80
 8002bfa:	2120      	movs	r1, #32
 8002bfc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2274      	movs	r2, #116	; 0x74
 8002c02:	2100      	movs	r1, #0
 8002c04:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e010      	b.n	8002c2c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	69db      	ldr	r3, [r3, #28]
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	4013      	ands	r3, r2
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	425a      	negs	r2, r3
 8002c1a:	4153      	adcs	r3, r2
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	001a      	movs	r2, r3
 8002c20:	1dfb      	adds	r3, r7, #7
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d100      	bne.n	8002c2a <UART_WaitOnFlagUntilTimeout+0x17a>
 8002c28:	e74b      	b.n	8002ac2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	b014      	add	sp, #80	; 0x50
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	fffffe5f 	.word	0xfffffe5f

08002c38 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b090      	sub	sp, #64	; 0x40
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	1dbb      	adds	r3, r7, #6
 8002c44:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	1dba      	adds	r2, r7, #6
 8002c50:	2158      	movs	r1, #88	; 0x58
 8002c52:	8812      	ldrh	r2, [r2, #0]
 8002c54:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2280      	movs	r2, #128	; 0x80
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2222      	movs	r2, #34	; 0x22
 8002c62:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d02b      	beq.n	8002cc4 <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c70:	4a3f      	ldr	r2, [pc, #252]	; (8002d70 <UART_Start_Receive_DMA+0x138>)
 8002c72:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c78:	4a3e      	ldr	r2, [pc, #248]	; (8002d74 <UART_Start_Receive_DMA+0x13c>)
 8002c7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c80:	4a3d      	ldr	r2, [pc, #244]	; (8002d78 <UART_Start_Receive_DMA+0x140>)
 8002c82:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c88:	2200      	movs	r2, #0
 8002c8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	3324      	adds	r3, #36	; 0x24
 8002c96:	0019      	movs	r1, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9c:	001a      	movs	r2, r3
 8002c9e:	1dbb      	adds	r3, r7, #6
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	f7fd fff1 	bl	8000c88 <HAL_DMA_Start_IT>
 8002ca6:	1e03      	subs	r3, r0, #0
 8002ca8:	d00c      	beq.n	8002cc4 <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2280      	movs	r2, #128	; 0x80
 8002cae:	2110      	movs	r1, #16
 8002cb0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2274      	movs	r2, #116	; 0x74
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e050      	b.n	8002d66 <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2274      	movs	r2, #116	; 0x74
 8002cc8:	2100      	movs	r1, #0
 8002cca:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ccc:	f3ef 8310 	mrs	r3, PRIMASK
 8002cd0:	613b      	str	r3, [r7, #16]
  return(result);
 8002cd2:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f383 8810 	msr	PRIMASK, r3
}
 8002ce0:	46c0      	nop			; (mov r8, r8)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2180      	movs	r1, #128	; 0x80
 8002cee:	0049      	lsls	r1, r1, #1
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cf6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	f383 8810 	msr	PRIMASK, r3
}
 8002cfe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d00:	f3ef 8310 	mrs	r3, PRIMASK
 8002d04:	61fb      	str	r3, [r7, #28]
  return(result);
 8002d06:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d08:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	f383 8810 	msr	PRIMASK, r3
}
 8002d14:	46c0      	nop			; (mov r8, r8)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2101      	movs	r1, #1
 8002d22:	430a      	orrs	r2, r1
 8002d24:	609a      	str	r2, [r3, #8]
 8002d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	f383 8810 	msr	PRIMASK, r3
}
 8002d30:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d32:	f3ef 8310 	mrs	r3, PRIMASK
 8002d36:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002d38:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d42:	f383 8810 	msr	PRIMASK, r3
}
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2140      	movs	r1, #64	; 0x40
 8002d54:	430a      	orrs	r2, r1
 8002d56:	609a      	str	r2, [r3, #8]
 8002d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d5a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5e:	f383 8810 	msr	PRIMASK, r3
}
 8002d62:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	0018      	movs	r0, r3
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	b010      	add	sp, #64	; 0x40
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	46c0      	nop			; (mov r8, r8)
 8002d70:	08002e89 	.word	0x08002e89
 8002d74:	08002fad 	.word	0x08002fad
 8002d78:	08002fe9 	.word	0x08002fe9

08002d7c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d84:	f3ef 8310 	mrs	r3, PRIMASK
 8002d88:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d8a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002d8c:	617b      	str	r3, [r7, #20]
 8002d8e:	2301      	movs	r3, #1
 8002d90:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f383 8810 	msr	PRIMASK, r3
}
 8002d98:	46c0      	nop			; (mov r8, r8)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	21c0      	movs	r1, #192	; 0xc0
 8002da6:	438a      	bics	r2, r1
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	f383 8810 	msr	PRIMASK, r3
}
 8002db4:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2220      	movs	r2, #32
 8002dba:	679a      	str	r2, [r3, #120]	; 0x78
}
 8002dbc:	46c0      	nop			; (mov r8, r8)
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	b006      	add	sp, #24
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08e      	sub	sp, #56	; 0x38
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dcc:	f3ef 8310 	mrs	r3, PRIMASK
 8002dd0:	617b      	str	r3, [r7, #20]
  return(result);
 8002dd2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dd4:	637b      	str	r3, [r7, #52]	; 0x34
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	f383 8810 	msr	PRIMASK, r3
}
 8002de0:	46c0      	nop			; (mov r8, r8)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4925      	ldr	r1, [pc, #148]	; (8002e84 <UART_EndRxTransfer+0xc0>)
 8002dee:	400a      	ands	r2, r1
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	f383 8810 	msr	PRIMASK, r3
}
 8002dfc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8002e02:	623b      	str	r3, [r7, #32]
  return(result);
 8002e04:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e06:	633b      	str	r3, [r7, #48]	; 0x30
 8002e08:	2301      	movs	r3, #1
 8002e0a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	f383 8810 	msr	PRIMASK, r3
}
 8002e12:	46c0      	nop			; (mov r8, r8)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2101      	movs	r1, #1
 8002e20:	438a      	bics	r2, r1
 8002e22:	609a      	str	r2, [r3, #8]
 8002e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e26:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2a:	f383 8810 	msr	PRIMASK, r3
}
 8002e2e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d118      	bne.n	8002e6a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e38:	f3ef 8310 	mrs	r3, PRIMASK
 8002e3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e3e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e42:	2301      	movs	r3, #1
 8002e44:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f383 8810 	msr	PRIMASK, r3
}
 8002e4c:	46c0      	nop			; (mov r8, r8)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2110      	movs	r1, #16
 8002e5a:	438a      	bics	r2, r1
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	f383 8810 	msr	PRIMASK, r3
}
 8002e68:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002e7c:	46c0      	nop			; (mov r8, r8)
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	b00e      	add	sp, #56	; 0x38
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	fffffedf 	.word	0xfffffedf

08002e88 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b094      	sub	sp, #80	; 0x50
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	2b20      	cmp	r3, #32
 8002e9c:	d06e      	beq.n	8002f7c <UART_DMAReceiveCplt+0xf4>
  {
    huart->RxXferCount = 0U;
 8002e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ea0:	225a      	movs	r2, #90	; 0x5a
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ea6:	f3ef 8310 	mrs	r3, PRIMASK
 8002eaa:	61bb      	str	r3, [r7, #24]
  return(result);
 8002eac:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002eae:	64bb      	str	r3, [r7, #72]	; 0x48
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	f383 8810 	msr	PRIMASK, r3
}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4938      	ldr	r1, [pc, #224]	; (8002fa8 <UART_DMAReceiveCplt+0x120>)
 8002ec8:	400a      	ands	r2, r1
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ece:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	f383 8810 	msr	PRIMASK, r3
}
 8002ed6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ed8:	f3ef 8310 	mrs	r3, PRIMASK
 8002edc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ee0:	647b      	str	r3, [r7, #68]	; 0x44
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee8:	f383 8810 	msr	PRIMASK, r3
}
 8002eec:	46c0      	nop			; (mov r8, r8)
 8002eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2101      	movs	r1, #1
 8002efa:	438a      	bics	r2, r1
 8002efc:	609a      	str	r2, [r3, #8]
 8002efe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f04:	f383 8810 	msr	PRIMASK, r3
}
 8002f08:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f0a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f0e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f12:	643b      	str	r3, [r7, #64]	; 0x40
 8002f14:	2301      	movs	r3, #1
 8002f16:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f1a:	f383 8810 	msr	PRIMASK, r3
}
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2140      	movs	r1, #64	; 0x40
 8002f2c:	438a      	bics	r2, r1
 8002f2e:	609a      	str	r2, [r3, #8]
 8002f30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f32:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f36:	f383 8810 	msr	PRIMASK, r3
}
 8002f3a:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f3e:	2220      	movs	r2, #32
 8002f40:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d118      	bne.n	8002f7c <UART_DMAReceiveCplt+0xf4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f4a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f4e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f50:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f54:	2301      	movs	r3, #1
 8002f56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	f383 8810 	msr	PRIMASK, r3
}
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2110      	movs	r1, #16
 8002f6c:	438a      	bics	r2, r1
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f383 8810 	msr	PRIMASK, r3
}
 8002f7a:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d108      	bne.n	8002f96 <UART_DMAReceiveCplt+0x10e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f86:	2258      	movs	r2, #88	; 0x58
 8002f88:	5a9a      	ldrh	r2, [r3, r2]
 8002f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f8c:	0011      	movs	r1, r2
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f7fd fbf2 	bl	8000778 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f94:	e003      	b.n	8002f9e <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 8002f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f7ff faed 	bl	8002578 <HAL_UART_RxCpltCallback>
}
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	b014      	add	sp, #80	; 0x50
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	fffffeff 	.word	0xfffffeff

08002fac <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d10a      	bne.n	8002fd8 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2258      	movs	r2, #88	; 0x58
 8002fc6:	5a9b      	ldrh	r3, [r3, r2]
 8002fc8:	085b      	lsrs	r3, r3, #1
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	0011      	movs	r1, r2
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	f7fd fbd1 	bl	8000778 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002fd6:	e003      	b.n	8002fe0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	0018      	movs	r0, r3
 8002fdc:	f7ff fad4 	bl	8002588 <HAL_UART_RxHalfCpltCallback>
}
 8002fe0:	46c0      	nop			; (mov r8, r8)
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	b004      	add	sp, #16
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ffa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003000:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	2280      	movs	r2, #128	; 0x80
 800300a:	4013      	ands	r3, r2
 800300c:	2b80      	cmp	r3, #128	; 0x80
 800300e:	d10a      	bne.n	8003026 <UART_DMAError+0x3e>
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	2b21      	cmp	r3, #33	; 0x21
 8003014:	d107      	bne.n	8003026 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2252      	movs	r2, #82	; 0x52
 800301a:	2100      	movs	r1, #0
 800301c:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	0018      	movs	r0, r3
 8003022:	f7ff feab 	bl	8002d7c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	2240      	movs	r2, #64	; 0x40
 800302e:	4013      	ands	r3, r2
 8003030:	2b40      	cmp	r3, #64	; 0x40
 8003032:	d10a      	bne.n	800304a <UART_DMAError+0x62>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2b22      	cmp	r3, #34	; 0x22
 8003038:	d107      	bne.n	800304a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	225a      	movs	r2, #90	; 0x5a
 800303e:	2100      	movs	r1, #0
 8003040:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	0018      	movs	r0, r3
 8003046:	f7ff febd 	bl	8002dc4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2280      	movs	r2, #128	; 0x80
 800304e:	589b      	ldr	r3, [r3, r2]
 8003050:	2210      	movs	r2, #16
 8003052:	431a      	orrs	r2, r3
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	2180      	movs	r1, #128	; 0x80
 8003058:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	0018      	movs	r0, r3
 800305e:	f7ff fa9b 	bl	8002598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	46bd      	mov	sp, r7
 8003066:	b006      	add	sp, #24
 8003068:	bd80      	pop	{r7, pc}

0800306a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b084      	sub	sp, #16
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	225a      	movs	r2, #90	; 0x5a
 800307c:	2100      	movs	r1, #0
 800307e:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2252      	movs	r2, #82	; 0x52
 8003084:	2100      	movs	r1, #0
 8003086:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	0018      	movs	r0, r3
 800308c:	f7ff fa84 	bl	8002598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003090:	46c0      	nop			; (mov r8, r8)
 8003092:	46bd      	mov	sp, r7
 8003094:	b004      	add	sp, #16
 8003096:	bd80      	pop	{r7, pc}

08003098 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030a0:	f3ef 8310 	mrs	r3, PRIMASK
 80030a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80030a6:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80030a8:	617b      	str	r3, [r7, #20]
 80030aa:	2301      	movs	r3, #1
 80030ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f383 8810 	msr	PRIMASK, r3
}
 80030b4:	46c0      	nop			; (mov r8, r8)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2140      	movs	r1, #64	; 0x40
 80030c2:	438a      	bics	r2, r1
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	f383 8810 	msr	PRIMASK, r3
}
 80030d0:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2220      	movs	r2, #32
 80030d6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	0018      	movs	r0, r3
 80030e2:	f7ff fa41 	bl	8002568 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	46bd      	mov	sp, r7
 80030ea:	b006      	add	sp, #24
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b082      	sub	sp, #8
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80030f6:	46c0      	nop			; (mov r8, r8)
 80030f8:	46bd      	mov	sp, r7
 80030fa:	b002      	add	sp, #8
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030fe:	b5b0      	push	{r4, r5, r7, lr}
 8003100:	b08a      	sub	sp, #40	; 0x28
 8003102:	af00      	add	r7, sp, #0
 8003104:	60f8      	str	r0, [r7, #12]
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	1dbb      	adds	r3, r7, #6
 800310a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003110:	2b20      	cmp	r3, #32
 8003112:	d15e      	bne.n	80031d2 <HAL_UARTEx_ReceiveToIdle_DMA+0xd4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800311a:	1dbb      	adds	r3, r7, #6
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e056      	b.n	80031d4 <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	2380      	movs	r3, #128	; 0x80
 800312c:	015b      	lsls	r3, r3, #5
 800312e:	429a      	cmp	r2, r3
 8003130:	d109      	bne.n	8003146 <HAL_UARTEx_ReceiveToIdle_DMA+0x48>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d105      	bne.n	8003146 <HAL_UARTEx_ReceiveToIdle_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2201      	movs	r2, #1
 800313e:	4013      	ands	r3, r2
 8003140:	d001      	beq.n	8003146 <HAL_UARTEx_ReceiveToIdle_DMA+0x48>
      {
        return  HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e046      	b.n	80031d4 <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
      }
    }

    __HAL_LOCK(huart);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2274      	movs	r2, #116	; 0x74
 800314a:	5c9b      	ldrb	r3, [r3, r2]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d101      	bne.n	8003154 <HAL_UARTEx_ReceiveToIdle_DMA+0x56>
 8003150:	2302      	movs	r3, #2
 8003152:	e03f      	b.n	80031d4 <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2274      	movs	r2, #116	; 0x74
 8003158:	2101      	movs	r1, #1
 800315a:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2201      	movs	r2, #1
 8003160:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003162:	2527      	movs	r5, #39	; 0x27
 8003164:	197c      	adds	r4, r7, r5
 8003166:	1dbb      	adds	r3, r7, #6
 8003168:	881a      	ldrh	r2, [r3, #0]
 800316a:	68b9      	ldr	r1, [r7, #8]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	0018      	movs	r0, r3
 8003170:	f7ff fd62 	bl	8002c38 <UART_Start_Receive_DMA>
 8003174:	0003      	movs	r3, r0
 8003176:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003178:	197b      	adds	r3, r7, r5
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d124      	bne.n	80031ca <HAL_UARTEx_ReceiveToIdle_DMA+0xcc>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003184:	2b01      	cmp	r3, #1
 8003186:	d11c      	bne.n	80031c2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc4>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2210      	movs	r2, #16
 800318e:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003190:	f3ef 8310 	mrs	r3, PRIMASK
 8003194:	617b      	str	r3, [r7, #20]
  return(result);
 8003196:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003198:	623b      	str	r3, [r7, #32]
 800319a:	2301      	movs	r3, #1
 800319c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	f383 8810 	msr	PRIMASK, r3
}
 80031a4:	46c0      	nop			; (mov r8, r8)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2110      	movs	r1, #16
 80031b2:	430a      	orrs	r2, r1
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	f383 8810 	msr	PRIMASK, r3
}
 80031c0:	e003      	b.n	80031ca <HAL_UARTEx_ReceiveToIdle_DMA+0xcc>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80031c2:	2327      	movs	r3, #39	; 0x27
 80031c4:	18fb      	adds	r3, r7, r3
 80031c6:	2201      	movs	r2, #1
 80031c8:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 80031ca:	2327      	movs	r3, #39	; 0x27
 80031cc:	18fb      	adds	r3, r7, r3
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	e000      	b.n	80031d4 <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
  }
  else
  {
    return HAL_BUSY;
 80031d2:	2302      	movs	r3, #2
  }
}
 80031d4:	0018      	movs	r0, r3
 80031d6:	46bd      	mov	sp, r7
 80031d8:	b00a      	add	sp, #40	; 0x28
 80031da:	bdb0      	pop	{r4, r5, r7, pc}

080031dc <__libc_init_array>:
 80031dc:	b570      	push	{r4, r5, r6, lr}
 80031de:	2600      	movs	r6, #0
 80031e0:	4d0c      	ldr	r5, [pc, #48]	; (8003214 <__libc_init_array+0x38>)
 80031e2:	4c0d      	ldr	r4, [pc, #52]	; (8003218 <__libc_init_array+0x3c>)
 80031e4:	1b64      	subs	r4, r4, r5
 80031e6:	10a4      	asrs	r4, r4, #2
 80031e8:	42a6      	cmp	r6, r4
 80031ea:	d109      	bne.n	8003200 <__libc_init_array+0x24>
 80031ec:	2600      	movs	r6, #0
 80031ee:	f000 f82b 	bl	8003248 <_init>
 80031f2:	4d0a      	ldr	r5, [pc, #40]	; (800321c <__libc_init_array+0x40>)
 80031f4:	4c0a      	ldr	r4, [pc, #40]	; (8003220 <__libc_init_array+0x44>)
 80031f6:	1b64      	subs	r4, r4, r5
 80031f8:	10a4      	asrs	r4, r4, #2
 80031fa:	42a6      	cmp	r6, r4
 80031fc:	d105      	bne.n	800320a <__libc_init_array+0x2e>
 80031fe:	bd70      	pop	{r4, r5, r6, pc}
 8003200:	00b3      	lsls	r3, r6, #2
 8003202:	58eb      	ldr	r3, [r5, r3]
 8003204:	4798      	blx	r3
 8003206:	3601      	adds	r6, #1
 8003208:	e7ee      	b.n	80031e8 <__libc_init_array+0xc>
 800320a:	00b3      	lsls	r3, r6, #2
 800320c:	58eb      	ldr	r3, [r5, r3]
 800320e:	4798      	blx	r3
 8003210:	3601      	adds	r6, #1
 8003212:	e7f2      	b.n	80031fa <__libc_init_array+0x1e>
 8003214:	080032a0 	.word	0x080032a0
 8003218:	080032a0 	.word	0x080032a0
 800321c:	080032a0 	.word	0x080032a0
 8003220:	080032a4 	.word	0x080032a4

08003224 <memcpy>:
 8003224:	2300      	movs	r3, #0
 8003226:	b510      	push	{r4, lr}
 8003228:	429a      	cmp	r2, r3
 800322a:	d100      	bne.n	800322e <memcpy+0xa>
 800322c:	bd10      	pop	{r4, pc}
 800322e:	5ccc      	ldrb	r4, [r1, r3]
 8003230:	54c4      	strb	r4, [r0, r3]
 8003232:	3301      	adds	r3, #1
 8003234:	e7f8      	b.n	8003228 <memcpy+0x4>

08003236 <memset>:
 8003236:	0003      	movs	r3, r0
 8003238:	1882      	adds	r2, r0, r2
 800323a:	4293      	cmp	r3, r2
 800323c:	d100      	bne.n	8003240 <memset+0xa>
 800323e:	4770      	bx	lr
 8003240:	7019      	strb	r1, [r3, #0]
 8003242:	3301      	adds	r3, #1
 8003244:	e7f9      	b.n	800323a <memset+0x4>
	...

08003248 <_init>:
 8003248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800324e:	bc08      	pop	{r3}
 8003250:	469e      	mov	lr, r3
 8003252:	4770      	bx	lr

08003254 <_fini>:
 8003254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800325a:	bc08      	pop	{r3}
 800325c:	469e      	mov	lr, r3
 800325e:	4770      	bx	lr
