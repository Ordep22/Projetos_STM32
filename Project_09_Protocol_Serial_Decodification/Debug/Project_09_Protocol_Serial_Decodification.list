
Project_09_Protocol_Serial_Decodification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003830  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080038f0  080038f0  000138f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800398c  0800398c  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  0800398c  0800398c  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800398c  0800398c  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800398c  0800398c  0001398c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003990  08003990  00013990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08003994  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000094  08003a28  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08003a28  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a490  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bb5  00000000  00000000  0002a54c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d8  00000000  00000000  0002c108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000720  00000000  00000000  0002c8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ea8  00000000  00000000  0002d000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a8f2  00000000  00000000  00046ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092185  00000000  00000000  0005179a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e391f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f90  00000000  00000000  000e3970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000094 	.word	0x20000094
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080038d8 	.word	0x080038d8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000098 	.word	0x20000098
 8000104:	080038d8 	.word	0x080038d8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <PiscaLed>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

int  PiscaLed (int NumPiscadas, int TempoDelay)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
	//pesquisar sobre funções, e qual é a diferença da uma fuunção void para uma int, char....



	for (int i = 0; i < NumPiscadas + 1; i++)
 800022a:	2300      	movs	r3, #0
 800022c:	60fb      	str	r3, [r7, #12]
 800022e:	e018      	b.n	8000262 <PiscaLed+0x42>
	{

		HAL_GPIO_WritePin(GPIOA,LED02_Pin,GPIO_PIN_SET);
 8000230:	2390      	movs	r3, #144	; 0x90
 8000232:	05db      	lsls	r3, r3, #23
 8000234:	2201      	movs	r2, #1
 8000236:	2120      	movs	r1, #32
 8000238:	0018      	movs	r0, r3
 800023a:	f000 ff13 	bl	8001064 <HAL_GPIO_WritePin>
		HAL_Delay(TempoDelay);
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	0018      	movs	r0, r3
 8000242:	f000 fc17 	bl	8000a74 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA,LED02_Pin,GPIO_PIN_RESET);
 8000246:	2390      	movs	r3, #144	; 0x90
 8000248:	05db      	lsls	r3, r3, #23
 800024a:	2200      	movs	r2, #0
 800024c:	2120      	movs	r1, #32
 800024e:	0018      	movs	r0, r3
 8000250:	f000 ff08 	bl	8001064 <HAL_GPIO_WritePin>
		HAL_Delay(TempoDelay);
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	0018      	movs	r0, r3
 8000258:	f000 fc0c 	bl	8000a74 <HAL_Delay>
	for (int i = 0; i < NumPiscadas + 1; i++)
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	3301      	adds	r3, #1
 8000260:	60fb      	str	r3, [r7, #12]
 8000262:	687a      	ldr	r2, [r7, #4]
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	429a      	cmp	r2, r3
 8000268:	dae2      	bge.n	8000230 <PiscaLed+0x10>

	}

	return 0;
 800026a:	2300      	movs	r3, #0


}
 800026c:	0018      	movs	r0, r3
 800026e:	46bd      	mov	sp, r7
 8000270:	b004      	add	sp, #16
 8000272:	bd80      	pop	{r7, pc}

08000274 <Protocolo>:
volatile char V_Estagio; //Variável de cintrole do switch case
volatile char V_Estagio_Protocolo;


void Protocolo(uint8_t *a)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
//Quan a função é declarada e logo abaixo é chamda não é necessário montar um projeto

	  fflush(stdin);
 800027c:	4ba1      	ldr	r3, [pc, #644]	; (8000504 <Protocolo+0x290>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	685b      	ldr	r3, [r3, #4]
 8000282:	0018      	movs	r0, r3
 8000284:	f003 f842 	bl	800330c <fflush>
	  uint8_t CheckSum;

	  short int  contador = 0;
 8000288:	230e      	movs	r3, #14
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	2200      	movs	r2, #0
 800028e:	801a      	strh	r2, [r3, #0]

	  switch(V_Estagio_Protocolo)
 8000290:	4b9d      	ldr	r3, [pc, #628]	; (8000508 <Protocolo+0x294>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	b2db      	uxtb	r3, r3
 8000296:	2b06      	cmp	r3, #6
 8000298:	d003      	beq.n	80002a2 <Protocolo+0x2e>
 800029a:	2b08      	cmp	r3, #8
 800029c:	d100      	bne.n	80002a0 <Protocolo+0x2c>
 800029e:	e0c7      	b.n	8000430 <Protocolo+0x1bc>
 80002a0:	e11c      	b.n	80004dc <Protocolo+0x268>

	  	//Nesta estapa são verificados os elementos do cabecalho
	    case(CABECALHO):
	    {

		  switch(V_Estagio)
 80002a2:	4b9a      	ldr	r3, [pc, #616]	; (800050c <Protocolo+0x298>)
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	2b03      	cmp	r3, #3
 80002aa:	d100      	bne.n	80002ae <Protocolo+0x3a>
 80002ac:	e08f      	b.n	80003ce <Protocolo+0x15a>
 80002ae:	dd00      	ble.n	80002b2 <Protocolo+0x3e>
 80002b0:	e0be      	b.n	8000430 <Protocolo+0x1bc>
 80002b2:	2b02      	cmp	r3, #2
 80002b4:	d05d      	beq.n	8000372 <Protocolo+0xfe>
 80002b6:	dd00      	ble.n	80002ba <Protocolo+0x46>
 80002b8:	e0ba      	b.n	8000430 <Protocolo+0x1bc>
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d002      	beq.n	80002c4 <Protocolo+0x50>
 80002be:	2b01      	cmp	r3, #1
 80002c0:	d029      	beq.n	8000316 <Protocolo+0xa2>
 80002c2:	e0b5      	b.n	8000430 <Protocolo+0x1bc>
		  {

			  case ESTAGIO_PREPROSSEAMENTO:
			  {

				  if((a[0] == 'L')){
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	2b4c      	cmp	r3, #76	; 0x4c
 80002ca:	d10f      	bne.n	80002ec <Protocolo+0x78>

					 V_Estagio  = ESTAGIO_01;
 80002cc:	4b8f      	ldr	r3, [pc, #572]	; (800050c <Protocolo+0x298>)
 80002ce:	2201      	movs	r2, #1
 80002d0:	701a      	strb	r2, [r3, #0]
					 HAL_UART_Transmit(&huart2,&a[0],1,100);
 80002d2:	6879      	ldr	r1, [r7, #4]
 80002d4:	488e      	ldr	r0, [pc, #568]	; (8000510 <Protocolo+0x29c>)
 80002d6:	2364      	movs	r3, #100	; 0x64
 80002d8:	2201      	movs	r2, #1
 80002da:	f001 fd33 	bl	8001d44 <HAL_UART_Transmit>
					 contador +=1;
 80002de:	210e      	movs	r1, #14
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	881b      	ldrh	r3, [r3, #0]
 80002e4:	3301      	adds	r3, #1
 80002e6:	b29a      	uxth	r2, r3
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	801a      	strh	r2, [r3, #0]



				  }

				  if ((a[0] != 'L' ) && (a[0] != '\0') )
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	2b4c      	cmp	r3, #76	; 0x4c
 80002f2:	d010      	beq.n	8000316 <Protocolo+0xa2>
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d00c      	beq.n	8000316 <Protocolo+0xa2>
				  {

					  HAL_UART_Transmit(&huart2,&a[0],1,100);
 80002fc:	6879      	ldr	r1, [r7, #4]
 80002fe:	4884      	ldr	r0, [pc, #528]	; (8000510 <Protocolo+0x29c>)
 8000300:	2364      	movs	r3, #100	; 0x64
 8000302:	2201      	movs	r2, #1
 8000304:	f001 fd1e 	bl	8001d44 <HAL_UART_Transmit>
					  HAL_UART_Transmit(&huart2,ErroCabecalho,sizeof(ErroCabecalho)-1,100);
 8000308:	4982      	ldr	r1, [pc, #520]	; (8000514 <Protocolo+0x2a0>)
 800030a:	4881      	ldr	r0, [pc, #516]	; (8000510 <Protocolo+0x29c>)
 800030c:	2364      	movs	r3, #100	; 0x64
 800030e:	2220      	movs	r2, #32
 8000310:	f001 fd18 	bl	8001d44 <HAL_UART_Transmit>
					  break;
 8000314:	e08c      	b.n	8000430 <Protocolo+0x1bc>
			  }

			  case ESTAGIO_01:
			  {

				  if((a[1] == 'U'))
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	3301      	adds	r3, #1
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	2b55      	cmp	r3, #85	; 0x55
 800031e:	d110      	bne.n	8000342 <Protocolo+0xce>
				  {

					  V_Estagio  = ESTAGIO_02;
 8000320:	4b7a      	ldr	r3, [pc, #488]	; (800050c <Protocolo+0x298>)
 8000322:	2202      	movs	r2, #2
 8000324:	701a      	strb	r2, [r3, #0]
					  HAL_UART_Transmit(&huart2,&a[1],1,100);
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	1c59      	adds	r1, r3, #1
 800032a:	4879      	ldr	r0, [pc, #484]	; (8000510 <Protocolo+0x29c>)
 800032c:	2364      	movs	r3, #100	; 0x64
 800032e:	2201      	movs	r2, #1
 8000330:	f001 fd08 	bl	8001d44 <HAL_UART_Transmit>
					  contador +=1;
 8000334:	210e      	movs	r1, #14
 8000336:	187b      	adds	r3, r7, r1
 8000338:	881b      	ldrh	r3, [r3, #0]
 800033a:	3301      	adds	r3, #1
 800033c:	b29a      	uxth	r2, r3
 800033e:	187b      	adds	r3, r7, r1
 8000340:	801a      	strh	r2, [r3, #0]

				  }

				  if ((a[1] != 'U') && (a[1] != '\0'))
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	3301      	adds	r3, #1
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	2b55      	cmp	r3, #85	; 0x55
 800034a:	d012      	beq.n	8000372 <Protocolo+0xfe>
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	3301      	adds	r3, #1
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d00d      	beq.n	8000372 <Protocolo+0xfe>
				  {
					  HAL_UART_Transmit(&huart2,&a[1],1,100);
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	1c59      	adds	r1, r3, #1
 800035a:	486d      	ldr	r0, [pc, #436]	; (8000510 <Protocolo+0x29c>)
 800035c:	2364      	movs	r3, #100	; 0x64
 800035e:	2201      	movs	r2, #1
 8000360:	f001 fcf0 	bl	8001d44 <HAL_UART_Transmit>
					  HAL_UART_Transmit(&huart2,ErroCabecalho,sizeof(ErroCabecalho)-1,100);
 8000364:	496b      	ldr	r1, [pc, #428]	; (8000514 <Protocolo+0x2a0>)
 8000366:	486a      	ldr	r0, [pc, #424]	; (8000510 <Protocolo+0x29c>)
 8000368:	2364      	movs	r3, #100	; 0x64
 800036a:	2220      	movs	r2, #32
 800036c:	f001 fcea 	bl	8001d44 <HAL_UART_Transmit>
					  break;
 8000370:	e05e      	b.n	8000430 <Protocolo+0x1bc>
				  }
			  }
			  case ESTAGIO_02:
			  {
				  if((a[2] == 'P'))
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	3302      	adds	r3, #2
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	2b50      	cmp	r3, #80	; 0x50
 800037a:	d110      	bne.n	800039e <Protocolo+0x12a>
				  {

					  V_Estagio  = ESTAGIO_03;
 800037c:	4b63      	ldr	r3, [pc, #396]	; (800050c <Protocolo+0x298>)
 800037e:	2203      	movs	r2, #3
 8000380:	701a      	strb	r2, [r3, #0]
					  HAL_UART_Transmit(&huart2,&a[2],1,100);
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	1c99      	adds	r1, r3, #2
 8000386:	4862      	ldr	r0, [pc, #392]	; (8000510 <Protocolo+0x29c>)
 8000388:	2364      	movs	r3, #100	; 0x64
 800038a:	2201      	movs	r2, #1
 800038c:	f001 fcda 	bl	8001d44 <HAL_UART_Transmit>
					  contador +=1;
 8000390:	210e      	movs	r1, #14
 8000392:	187b      	adds	r3, r7, r1
 8000394:	881b      	ldrh	r3, [r3, #0]
 8000396:	3301      	adds	r3, #1
 8000398:	b29a      	uxth	r2, r3
 800039a:	187b      	adds	r3, r7, r1
 800039c:	801a      	strh	r2, [r3, #0]
				  }

				  if ((a[2] != 'P') && (a[2] != '\0'))
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	3302      	adds	r3, #2
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	2b50      	cmp	r3, #80	; 0x50
 80003a6:	d012      	beq.n	80003ce <Protocolo+0x15a>
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	3302      	adds	r3, #2
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d00d      	beq.n	80003ce <Protocolo+0x15a>

				  {
					  HAL_UART_Transmit(&huart2,&a[2],1,100);
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	1c99      	adds	r1, r3, #2
 80003b6:	4856      	ldr	r0, [pc, #344]	; (8000510 <Protocolo+0x29c>)
 80003b8:	2364      	movs	r3, #100	; 0x64
 80003ba:	2201      	movs	r2, #1
 80003bc:	f001 fcc2 	bl	8001d44 <HAL_UART_Transmit>
					  HAL_UART_Transmit(&huart2,ErroCabecalho,sizeof(ErroCabecalho)-1,100);
 80003c0:	4954      	ldr	r1, [pc, #336]	; (8000514 <Protocolo+0x2a0>)
 80003c2:	4853      	ldr	r0, [pc, #332]	; (8000510 <Protocolo+0x29c>)
 80003c4:	2364      	movs	r3, #100	; 0x64
 80003c6:	2220      	movs	r2, #32
 80003c8:	f001 fcbc 	bl	8001d44 <HAL_UART_Transmit>
					  break;
 80003cc:	e030      	b.n	8000430 <Protocolo+0x1bc>

			  }
			  case ESTAGIO_03:

			  {
				  if((a[3] == 'A'))
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	3303      	adds	r3, #3
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	2b41      	cmp	r3, #65	; 0x41
 80003d6:	d113      	bne.n	8000400 <Protocolo+0x18c>

				  {
					  V_Estagio  = ESTAGIO_PREPROSSEAMENTO;
 80003d8:	4b4c      	ldr	r3, [pc, #304]	; (800050c <Protocolo+0x298>)
 80003da:	2200      	movs	r2, #0
 80003dc:	701a      	strb	r2, [r3, #0]
					  //V_Estagio_Protocolo = TAMANHO;
					  V_Estagio_Protocolo = COMANDO; //Provavelmente vai sair desse ponto
 80003de:	4b4a      	ldr	r3, [pc, #296]	; (8000508 <Protocolo+0x294>)
 80003e0:	2208      	movs	r2, #8
 80003e2:	701a      	strb	r2, [r3, #0]
					  HAL_UART_Transmit(&huart2,&a[3],1,100);
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	1cd9      	adds	r1, r3, #3
 80003e8:	4849      	ldr	r0, [pc, #292]	; (8000510 <Protocolo+0x29c>)
 80003ea:	2364      	movs	r3, #100	; 0x64
 80003ec:	2201      	movs	r2, #1
 80003ee:	f001 fca9 	bl	8001d44 <HAL_UART_Transmit>
					  contador +=1;
 80003f2:	210e      	movs	r1, #14
 80003f4:	187b      	adds	r3, r7, r1
 80003f6:	881b      	ldrh	r3, [r3, #0]
 80003f8:	3301      	adds	r3, #1
 80003fa:	b29a      	uxth	r2, r3
 80003fc:	187b      	adds	r3, r7, r1
 80003fe:	801a      	strh	r2, [r3, #0]

				  }

				  if ((a[3] != 'A') && (a[3] != '\0'))
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	3303      	adds	r3, #3
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	2b41      	cmp	r3, #65	; 0x41
 8000408:	d012      	beq.n	8000430 <Protocolo+0x1bc>
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	3303      	adds	r3, #3
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d00d      	beq.n	8000430 <Protocolo+0x1bc>

				  {
					  HAL_UART_Transmit(&huart2,&a[3],1,100);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	1cd9      	adds	r1, r3, #3
 8000418:	483d      	ldr	r0, [pc, #244]	; (8000510 <Protocolo+0x29c>)
 800041a:	2364      	movs	r3, #100	; 0x64
 800041c:	2201      	movs	r2, #1
 800041e:	f001 fc91 	bl	8001d44 <HAL_UART_Transmit>
					  HAL_UART_Transmit(&huart2,ErroCabecalho,sizeof(ErroCabecalho)-1,100);
 8000422:	493c      	ldr	r1, [pc, #240]	; (8000514 <Protocolo+0x2a0>)
 8000424:	483a      	ldr	r0, [pc, #232]	; (8000510 <Protocolo+0x29c>)
 8000426:	2364      	movs	r3, #100	; 0x64
 8000428:	2220      	movs	r2, #32
 800042a:	f001 fc8b 	bl	8001d44 <HAL_UART_Transmit>
					  break;
 800042e:	46c0      	nop			; (mov r8, r8)

		  case(COMANDO):
		  {

			  //Acende LED02
			  if (a[5] == 0)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	3305      	adds	r3, #5
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	2b00      	cmp	r3, #0
 8000438:	d117      	bne.n	800046a <Protocolo+0x1f6>
			  {

				  V_Estagio_Protocolo =  CABECALHO;
 800043a:	4b33      	ldr	r3, [pc, #204]	; (8000508 <Protocolo+0x294>)
 800043c:	2206      	movs	r2, #6
 800043e:	701a      	strb	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2,&a[5],1,100);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	1d59      	adds	r1, r3, #5
 8000444:	4832      	ldr	r0, [pc, #200]	; (8000510 <Protocolo+0x29c>)
 8000446:	2364      	movs	r3, #100	; 0x64
 8000448:	2201      	movs	r2, #1
 800044a:	f001 fc7b 	bl	8001d44 <HAL_UART_Transmit>
				  comand_high;
 800044e:	2390      	movs	r3, #144	; 0x90
 8000450:	05db      	lsls	r3, r3, #23
 8000452:	2201      	movs	r2, #1
 8000454:	2120      	movs	r1, #32
 8000456:	0018      	movs	r0, r3
 8000458:	f000 fe04 	bl	8001064 <HAL_GPIO_WritePin>
				  contador +=1;
 800045c:	210e      	movs	r1, #14
 800045e:	187b      	adds	r3, r7, r1
 8000460:	881b      	ldrh	r3, [r3, #0]
 8000462:	3301      	adds	r3, #1
 8000464:	b29a      	uxth	r2, r3
 8000466:	187b      	adds	r3, r7, r1
 8000468:	801a      	strh	r2, [r3, #0]

			  }

			  //Apaga LED02
			  if (a[5] == 1)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	3305      	adds	r3, #5
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b01      	cmp	r3, #1
 8000472:	d117      	bne.n	80004a4 <Protocolo+0x230>
			  {

				  V_Estagio_Protocolo =  CABECALHO;
 8000474:	4b24      	ldr	r3, [pc, #144]	; (8000508 <Protocolo+0x294>)
 8000476:	2206      	movs	r2, #6
 8000478:	701a      	strb	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2,&a[5],1,100);
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	1d59      	adds	r1, r3, #5
 800047e:	4824      	ldr	r0, [pc, #144]	; (8000510 <Protocolo+0x29c>)
 8000480:	2364      	movs	r3, #100	; 0x64
 8000482:	2201      	movs	r2, #1
 8000484:	f001 fc5e 	bl	8001d44 <HAL_UART_Transmit>
				  comand_low;
 8000488:	2390      	movs	r3, #144	; 0x90
 800048a:	05db      	lsls	r3, r3, #23
 800048c:	2200      	movs	r2, #0
 800048e:	2120      	movs	r1, #32
 8000490:	0018      	movs	r0, r3
 8000492:	f000 fde7 	bl	8001064 <HAL_GPIO_WritePin>
				  contador +=1;
 8000496:	210e      	movs	r1, #14
 8000498:	187b      	adds	r3, r7, r1
 800049a:	881b      	ldrh	r3, [r3, #0]
 800049c:	3301      	adds	r3, #1
 800049e:	b29a      	uxth	r2, r3
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	801a      	strh	r2, [r3, #0]

			  }

			  //Pisca LED02 N vezes
			  if (a[5] == 2)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	3305      	adds	r3, #5
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d116      	bne.n	80004dc <Protocolo+0x268>
			  {

				  V_Estagio_Protocolo =  CABECALHO;
 80004ae:	4b16      	ldr	r3, [pc, #88]	; (8000508 <Protocolo+0x294>)
 80004b0:	2206      	movs	r2, #6
 80004b2:	701a      	strb	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2,&a[5],1,100);
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	1d59      	adds	r1, r3, #5
 80004b8:	4815      	ldr	r0, [pc, #84]	; (8000510 <Protocolo+0x29c>)
 80004ba:	2364      	movs	r3, #100	; 0x64
 80004bc:	2201      	movs	r2, #1
 80004be:	f001 fc41 	bl	8001d44 <HAL_UART_Transmit>
				  PiscaLed(4, 500);
 80004c2:	23fa      	movs	r3, #250	; 0xfa
 80004c4:	005b      	lsls	r3, r3, #1
 80004c6:	0019      	movs	r1, r3
 80004c8:	2004      	movs	r0, #4
 80004ca:	f7ff fea9 	bl	8000220 <PiscaLed>
				  contador +=1;
 80004ce:	210e      	movs	r1, #14
 80004d0:	187b      	adds	r3, r7, r1
 80004d2:	881b      	ldrh	r3, [r3, #0]
 80004d4:	3301      	adds	r3, #1
 80004d6:	b29a      	uxth	r2, r3
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	801a      	strh	r2, [r3, #0]

	}


	//Esse fora é para zerar todas as informações presentes no vetor a
	for (int i = 0; i < 20; i ++ )
 80004dc:	2300      	movs	r3, #0
 80004de:	60bb      	str	r3, [r7, #8]
 80004e0:	e007      	b.n	80004f2 <Protocolo+0x27e>
	{

		a[i] = 0;
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	687a      	ldr	r2, [r7, #4]
 80004e6:	18d3      	adds	r3, r2, r3
 80004e8:	2200      	movs	r2, #0
 80004ea:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 20; i ++ )
 80004ec:	68bb      	ldr	r3, [r7, #8]
 80004ee:	3301      	adds	r3, #1
 80004f0:	60bb      	str	r3, [r7, #8]
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	2b13      	cmp	r3, #19
 80004f6:	ddf4      	ble.n	80004e2 <Protocolo+0x26e>


	}

}
 80004f8:	46c0      	nop			; (mov r8, r8)
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	b004      	add	sp, #16
 8000500:	bd80      	pop	{r7, pc}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	20000030 	.word	0x20000030
 8000508:	20000135 	.word	0x20000135
 800050c:	20000134 	.word	0x20000134
 8000510:	200000b0 	.word	0x200000b0
 8000514:	20000000 	.word	0x20000000

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
	//Verifica o status de recebimento da serial
	//HAL_StatusTypeDef status;



	V_Estagio  = ESTAGIO_PREPROSSEAMENTO;
 800051e:	4b15      	ldr	r3, [pc, #84]	; (8000574 <main+0x5c>)
 8000520:	2200      	movs	r2, #0
 8000522:	701a      	strb	r2, [r3, #0]
	V_Estagio_Protocolo = CABECALHO;
 8000524:	4b14      	ldr	r3, [pc, #80]	; (8000578 <main+0x60>)
 8000526:	2206      	movs	r2, #6
 8000528:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052a:	f000 fa3f 	bl	80009ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052e:	f000 f827 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000532:	f000 f8ad 	bl	8000690 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000536:	f000 f87b 	bl	8000630 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

	 //Variável que recebe as informações da serial
	 uint8_t rx_buffer[10] = {0};
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	3304      	adds	r3, #4
 8000542:	2206      	movs	r2, #6
 8000544:	2100      	movs	r1, #0
 8000546:	0018      	movs	r0, r3
 8000548:	f003 f81f 	bl	800358a <memset>


     HAL_UART_Receive_IT(&huart2,rx_buffer,10);
 800054c:	1d39      	adds	r1, r7, #4
 800054e:	4b0b      	ldr	r3, [pc, #44]	; (800057c <main+0x64>)
 8000550:	220a      	movs	r2, #10
 8000552:	0018      	movs	r0, r3
 8000554:	f001 fc9f 	bl	8001e96 <HAL_UART_Receive_IT>





	 if (rx_buffer[0] != 0 && rx_buffer[7] != 0)
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d0ec      	beq.n	800053a <main+0x22>
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	79db      	ldrb	r3, [r3, #7]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d0e8      	beq.n	800053a <main+0x22>

	 {
		 Protocolo(rx_buffer);
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	0018      	movs	r0, r3
 800056c:	f7ff fe82 	bl	8000274 <Protocolo>
  {
 8000570:	e7e3      	b.n	800053a <main+0x22>
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	20000134 	.word	0x20000134
 8000578:	20000135 	.word	0x20000135
 800057c:	200000b0 	.word	0x200000b0

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b590      	push	{r4, r7, lr}
 8000582:	b099      	sub	sp, #100	; 0x64
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	242c      	movs	r4, #44	; 0x2c
 8000588:	193b      	adds	r3, r7, r4
 800058a:	0018      	movs	r0, r3
 800058c:	2334      	movs	r3, #52	; 0x34
 800058e:	001a      	movs	r2, r3
 8000590:	2100      	movs	r1, #0
 8000592:	f002 fffa 	bl	800358a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000596:	231c      	movs	r3, #28
 8000598:	18fb      	adds	r3, r7, r3
 800059a:	0018      	movs	r0, r3
 800059c:	2310      	movs	r3, #16
 800059e:	001a      	movs	r2, r3
 80005a0:	2100      	movs	r1, #0
 80005a2:	f002 fff2 	bl	800358a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005a6:	003b      	movs	r3, r7
 80005a8:	0018      	movs	r0, r3
 80005aa:	231c      	movs	r3, #28
 80005ac:	001a      	movs	r2, r3
 80005ae:	2100      	movs	r1, #0
 80005b0:	f002 ffeb 	bl	800358a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b4:	0021      	movs	r1, r4
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2202      	movs	r2, #2
 80005ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	2201      	movs	r2, #1
 80005c0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	2210      	movs	r2, #16
 80005c6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	2200      	movs	r2, #0
 80005cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	0018      	movs	r0, r3
 80005d2:	f000 fd65 	bl	80010a0 <HAL_RCC_OscConfig>
 80005d6:	1e03      	subs	r3, r0, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80005da:	f000 f891 	bl	8000700 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005de:	211c      	movs	r1, #28
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	2207      	movs	r2, #7
 80005e4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2200      	movs	r2, #0
 80005ea:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2100      	movs	r1, #0
 80005fc:	0018      	movs	r0, r3
 80005fe:	f001 f8d5 	bl	80017ac <HAL_RCC_ClockConfig>
 8000602:	1e03      	subs	r3, r0, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000606:	f000 f87b 	bl	8000700 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800060a:	003b      	movs	r3, r7
 800060c:	2202      	movs	r2, #2
 800060e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000610:	003b      	movs	r3, r7
 8000612:	2200      	movs	r2, #0
 8000614:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000616:	003b      	movs	r3, r7
 8000618:	0018      	movs	r0, r3
 800061a:	f001 fa41 	bl	8001aa0 <HAL_RCCEx_PeriphCLKConfig>
 800061e:	1e03      	subs	r3, r0, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000622:	f000 f86d 	bl	8000700 <Error_Handler>
  }
}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	46bd      	mov	sp, r7
 800062a:	b019      	add	sp, #100	; 0x64
 800062c:	bd90      	pop	{r4, r7, pc}
	...

08000630 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000634:	4b14      	ldr	r3, [pc, #80]	; (8000688 <MX_USART2_UART_Init+0x58>)
 8000636:	4a15      	ldr	r2, [pc, #84]	; (800068c <MX_USART2_UART_Init+0x5c>)
 8000638:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800063a:	4b13      	ldr	r3, [pc, #76]	; (8000688 <MX_USART2_UART_Init+0x58>)
 800063c:	2296      	movs	r2, #150	; 0x96
 800063e:	0192      	lsls	r2, r2, #6
 8000640:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_USART2_UART_Init+0x58>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_USART2_UART_Init+0x58>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MX_USART2_UART_Init+0x58>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_USART2_UART_Init+0x58>)
 8000656:	220c      	movs	r2, #12
 8000658:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065a:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <MX_USART2_UART_Init+0x58>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MX_USART2_UART_Init+0x58>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000666:	4b08      	ldr	r3, [pc, #32]	; (8000688 <MX_USART2_UART_Init+0x58>)
 8000668:	2200      	movs	r2, #0
 800066a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_USART2_UART_Init+0x58>)
 800066e:	2200      	movs	r2, #0
 8000670:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000672:	4b05      	ldr	r3, [pc, #20]	; (8000688 <MX_USART2_UART_Init+0x58>)
 8000674:	0018      	movs	r0, r3
 8000676:	f001 fb11 	bl	8001c9c <HAL_UART_Init>
 800067a:	1e03      	subs	r3, r0, #0
 800067c:	d001      	beq.n	8000682 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800067e:	f000 f83f 	bl	8000700 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	200000b0 	.word	0x200000b0
 800068c:	40004400 	.word	0x40004400

08000690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	0018      	movs	r0, r3
 800069a:	2314      	movs	r3, #20
 800069c:	001a      	movs	r2, r3
 800069e:	2100      	movs	r1, #0
 80006a0:	f002 ff73 	bl	800358a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a4:	4b15      	ldr	r3, [pc, #84]	; (80006fc <MX_GPIO_Init+0x6c>)
 80006a6:	695a      	ldr	r2, [r3, #20]
 80006a8:	4b14      	ldr	r3, [pc, #80]	; (80006fc <MX_GPIO_Init+0x6c>)
 80006aa:	2180      	movs	r1, #128	; 0x80
 80006ac:	0289      	lsls	r1, r1, #10
 80006ae:	430a      	orrs	r2, r1
 80006b0:	615a      	str	r2, [r3, #20]
 80006b2:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_GPIO_Init+0x6c>)
 80006b4:	695a      	ldr	r2, [r3, #20]
 80006b6:	2380      	movs	r3, #128	; 0x80
 80006b8:	029b      	lsls	r3, r3, #10
 80006ba:	4013      	ands	r3, r2
 80006bc:	603b      	str	r3, [r7, #0]
 80006be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED02_GPIO_Port, LED02_Pin, GPIO_PIN_RESET);
 80006c0:	2390      	movs	r3, #144	; 0x90
 80006c2:	05db      	lsls	r3, r3, #23
 80006c4:	2200      	movs	r2, #0
 80006c6:	2120      	movs	r1, #32
 80006c8:	0018      	movs	r0, r3
 80006ca:	f000 fccb 	bl	8001064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED02_Pin */
  GPIO_InitStruct.Pin = LED02_Pin;
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	2220      	movs	r2, #32
 80006d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	2201      	movs	r2, #1
 80006d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED02_GPIO_Port, &GPIO_InitStruct);
 80006e6:	1d3a      	adds	r2, r7, #4
 80006e8:	2390      	movs	r3, #144	; 0x90
 80006ea:	05db      	lsls	r3, r3, #23
 80006ec:	0011      	movs	r1, r2
 80006ee:	0018      	movs	r0, r3
 80006f0:	f000 fb40 	bl	8000d74 <HAL_GPIO_Init>

}
 80006f4:	46c0      	nop			; (mov r8, r8)
 80006f6:	46bd      	mov	sp, r7
 80006f8:	b006      	add	sp, #24
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40021000 	.word	0x40021000

08000700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000704:	b672      	cpsid	i
}
 8000706:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000708:	e7fe      	b.n	8000708 <Error_Handler+0x8>
	...

0800070c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <HAL_MspInit+0x44>)
 8000714:	699a      	ldr	r2, [r3, #24]
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <HAL_MspInit+0x44>)
 8000718:	2101      	movs	r1, #1
 800071a:	430a      	orrs	r2, r1
 800071c:	619a      	str	r2, [r3, #24]
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <HAL_MspInit+0x44>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	2201      	movs	r2, #1
 8000724:	4013      	ands	r3, r2
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <HAL_MspInit+0x44>)
 800072c:	69da      	ldr	r2, [r3, #28]
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <HAL_MspInit+0x44>)
 8000730:	2180      	movs	r1, #128	; 0x80
 8000732:	0549      	lsls	r1, r1, #21
 8000734:	430a      	orrs	r2, r1
 8000736:	61da      	str	r2, [r3, #28]
 8000738:	4b05      	ldr	r3, [pc, #20]	; (8000750 <HAL_MspInit+0x44>)
 800073a:	69da      	ldr	r2, [r3, #28]
 800073c:	2380      	movs	r3, #128	; 0x80
 800073e:	055b      	lsls	r3, r3, #21
 8000740:	4013      	ands	r3, r2
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	46bd      	mov	sp, r7
 800074a:	b002      	add	sp, #8
 800074c:	bd80      	pop	{r7, pc}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	40021000 	.word	0x40021000

08000754 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b08b      	sub	sp, #44	; 0x2c
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	2414      	movs	r4, #20
 800075e:	193b      	adds	r3, r7, r4
 8000760:	0018      	movs	r0, r3
 8000762:	2314      	movs	r3, #20
 8000764:	001a      	movs	r2, r3
 8000766:	2100      	movs	r1, #0
 8000768:	f002 ff0f 	bl	800358a <memset>
  if(huart->Instance==USART2)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a20      	ldr	r2, [pc, #128]	; (80007f4 <HAL_UART_MspInit+0xa0>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d13a      	bne.n	80007ec <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000776:	4b20      	ldr	r3, [pc, #128]	; (80007f8 <HAL_UART_MspInit+0xa4>)
 8000778:	69da      	ldr	r2, [r3, #28]
 800077a:	4b1f      	ldr	r3, [pc, #124]	; (80007f8 <HAL_UART_MspInit+0xa4>)
 800077c:	2180      	movs	r1, #128	; 0x80
 800077e:	0289      	lsls	r1, r1, #10
 8000780:	430a      	orrs	r2, r1
 8000782:	61da      	str	r2, [r3, #28]
 8000784:	4b1c      	ldr	r3, [pc, #112]	; (80007f8 <HAL_UART_MspInit+0xa4>)
 8000786:	69da      	ldr	r2, [r3, #28]
 8000788:	2380      	movs	r3, #128	; 0x80
 800078a:	029b      	lsls	r3, r3, #10
 800078c:	4013      	ands	r3, r2
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <HAL_UART_MspInit+0xa4>)
 8000794:	695a      	ldr	r2, [r3, #20]
 8000796:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <HAL_UART_MspInit+0xa4>)
 8000798:	2180      	movs	r1, #128	; 0x80
 800079a:	0289      	lsls	r1, r1, #10
 800079c:	430a      	orrs	r2, r1
 800079e:	615a      	str	r2, [r3, #20]
 80007a0:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <HAL_UART_MspInit+0xa4>)
 80007a2:	695a      	ldr	r2, [r3, #20]
 80007a4:	2380      	movs	r3, #128	; 0x80
 80007a6:	029b      	lsls	r3, r3, #10
 80007a8:	4013      	ands	r3, r2
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = TX02_Pin|RX02_Pin;
 80007ae:	0021      	movs	r1, r4
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	220c      	movs	r2, #12
 80007b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	2202      	movs	r2, #2
 80007ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	2203      	movs	r2, #3
 80007c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2201      	movs	r2, #1
 80007cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ce:	187a      	adds	r2, r7, r1
 80007d0:	2390      	movs	r3, #144	; 0x90
 80007d2:	05db      	lsls	r3, r3, #23
 80007d4:	0011      	movs	r1, r2
 80007d6:	0018      	movs	r0, r3
 80007d8:	f000 facc 	bl	8000d74 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80007dc:	2200      	movs	r2, #0
 80007de:	2100      	movs	r1, #0
 80007e0:	201c      	movs	r0, #28
 80007e2:	f000 fa17 	bl	8000c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007e6:	201c      	movs	r0, #28
 80007e8:	f000 fa29 	bl	8000c3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007ec:	46c0      	nop			; (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	b00b      	add	sp, #44	; 0x2c
 80007f2:	bd90      	pop	{r4, r7, pc}
 80007f4:	40004400 	.word	0x40004400
 80007f8:	40021000 	.word	0x40021000

080007fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000800:	e7fe      	b.n	8000800 <NMI_Handler+0x4>

08000802 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000806:	e7fe      	b.n	8000806 <HardFault_Handler+0x4>

08000808 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000820:	f000 f90c 	bl	8000a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000824:	46c0      	nop			; (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000830:	4b03      	ldr	r3, [pc, #12]	; (8000840 <USART2_IRQHandler+0x14>)
 8000832:	0018      	movs	r0, r3
 8000834:	f001 fb90 	bl	8001f58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	200000b0 	.word	0x200000b0

08000844 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	e00a      	b.n	800086c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000856:	e000      	b.n	800085a <_read+0x16>
 8000858:	bf00      	nop
 800085a:	0001      	movs	r1, r0
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	1c5a      	adds	r2, r3, #1
 8000860:	60ba      	str	r2, [r7, #8]
 8000862:	b2ca      	uxtb	r2, r1
 8000864:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	3301      	adds	r3, #1
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	697a      	ldr	r2, [r7, #20]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	429a      	cmp	r2, r3
 8000872:	dbf0      	blt.n	8000856 <_read+0x12>
	}

return len;
 8000874:	687b      	ldr	r3, [r7, #4]
}
 8000876:	0018      	movs	r0, r3
 8000878:	46bd      	mov	sp, r7
 800087a:	b006      	add	sp, #24
 800087c:	bd80      	pop	{r7, pc}

0800087e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b086      	sub	sp, #24
 8000882:	af00      	add	r7, sp, #0
 8000884:	60f8      	str	r0, [r7, #12]
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
 800088e:	e009      	b.n	80008a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	1c5a      	adds	r2, r3, #1
 8000894:	60ba      	str	r2, [r7, #8]
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	0018      	movs	r0, r3
 800089a:	e000      	b.n	800089e <_write+0x20>
 800089c:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	3301      	adds	r3, #1
 80008a2:	617b      	str	r3, [r7, #20]
 80008a4:	697a      	ldr	r2, [r7, #20]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	dbf1      	blt.n	8000890 <_write+0x12>
	}
	return len;
 80008ac:	687b      	ldr	r3, [r7, #4]
}
 80008ae:	0018      	movs	r0, r3
 80008b0:	46bd      	mov	sp, r7
 80008b2:	b006      	add	sp, #24
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <_close>:

int _close(int file)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
	return -1;
 80008be:	2301      	movs	r3, #1
 80008c0:	425b      	negs	r3, r3
}
 80008c2:	0018      	movs	r0, r3
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b002      	add	sp, #8
 80008c8:	bd80      	pop	{r7, pc}

080008ca <_lseek>:
{
	return 1;
}

int _lseek(int file, int ptr, int dir)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b084      	sub	sp, #16
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	60f8      	str	r0, [r7, #12]
 80008d2:	60b9      	str	r1, [r7, #8]
 80008d4:	607a      	str	r2, [r7, #4]
	return 0;
 80008d6:	2300      	movs	r3, #0
}
 80008d8:	0018      	movs	r0, r3
 80008da:	46bd      	mov	sp, r7
 80008dc:	b004      	add	sp, #16
 80008de:	bd80      	pop	{r7, pc}

080008e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008e8:	4a14      	ldr	r2, [pc, #80]	; (800093c <_sbrk+0x5c>)
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <_sbrk+0x60>)
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008f4:	4b13      	ldr	r3, [pc, #76]	; (8000944 <_sbrk+0x64>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d102      	bne.n	8000902 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <_sbrk+0x64>)
 80008fe:	4a12      	ldr	r2, [pc, #72]	; (8000948 <_sbrk+0x68>)
 8000900:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <_sbrk+0x64>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	18d3      	adds	r3, r2, r3
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	429a      	cmp	r2, r3
 800090e:	d207      	bcs.n	8000920 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000910:	f002 fc2a 	bl	8003168 <__errno>
 8000914:	0003      	movs	r3, r0
 8000916:	220c      	movs	r2, #12
 8000918:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800091a:	2301      	movs	r3, #1
 800091c:	425b      	negs	r3, r3
 800091e:	e009      	b.n	8000934 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <_sbrk+0x64>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000926:	4b07      	ldr	r3, [pc, #28]	; (8000944 <_sbrk+0x64>)
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	18d2      	adds	r2, r2, r3
 800092e:	4b05      	ldr	r3, [pc, #20]	; (8000944 <_sbrk+0x64>)
 8000930:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000932:	68fb      	ldr	r3, [r7, #12]
}
 8000934:	0018      	movs	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	b006      	add	sp, #24
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20004000 	.word	0x20004000
 8000940:	00000400 	.word	0x00000400
 8000944:	20000138 	.word	0x20000138
 8000948:	20000150 	.word	0x20000150

0800094c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000950:	46c0      	nop			; (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000958:	480d      	ldr	r0, [pc, #52]	; (8000990 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800095a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800095c:	480d      	ldr	r0, [pc, #52]	; (8000994 <LoopForever+0x6>)
  ldr r1, =_edata
 800095e:	490e      	ldr	r1, [pc, #56]	; (8000998 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000960:	4a0e      	ldr	r2, [pc, #56]	; (800099c <LoopForever+0xe>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000964:	e002      	b.n	800096c <LoopCopyDataInit>

08000966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096a:	3304      	adds	r3, #4

0800096c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800096c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000970:	d3f9      	bcc.n	8000966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000972:	4a0b      	ldr	r2, [pc, #44]	; (80009a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000974:	4c0b      	ldr	r4, [pc, #44]	; (80009a4 <LoopForever+0x16>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000978:	e001      	b.n	800097e <LoopFillZerobss>

0800097a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800097c:	3204      	adds	r2, #4

0800097e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000980:	d3fb      	bcc.n	800097a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000982:	f7ff ffe3 	bl	800094c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000986:	f002 fdd9 	bl	800353c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800098a:	f7ff fdc5 	bl	8000518 <main>

0800098e <LoopForever>:

LoopForever:
    b LoopForever
 800098e:	e7fe      	b.n	800098e <LoopForever>
  ldr   r0, =_estack
 8000990:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000998:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 800099c:	08003994 	.word	0x08003994
  ldr r2, =_sbss
 80009a0:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80009a4:	20000150 	.word	0x20000150

080009a8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009a8:	e7fe      	b.n	80009a8 <ADC1_COMP_IRQHandler>
	...

080009ac <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <HAL_Init+0x24>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_Init+0x24>)
 80009b6:	2110      	movs	r1, #16
 80009b8:	430a      	orrs	r2, r1
 80009ba:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80009bc:	2003      	movs	r0, #3
 80009be:	f000 f809 	bl	80009d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c2:	f7ff fea3 	bl	800070c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c6:	2300      	movs	r3, #0
}
 80009c8:	0018      	movs	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	40022000 	.word	0x40022000

080009d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d4:	b590      	push	{r4, r7, lr}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <HAL_InitTick+0x5c>)
 80009de:	681c      	ldr	r4, [r3, #0]
 80009e0:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <HAL_InitTick+0x60>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	0019      	movs	r1, r3
 80009e6:	23fa      	movs	r3, #250	; 0xfa
 80009e8:	0098      	lsls	r0, r3, #2
 80009ea:	f7ff fb8d 	bl	8000108 <__udivsi3>
 80009ee:	0003      	movs	r3, r0
 80009f0:	0019      	movs	r1, r3
 80009f2:	0020      	movs	r0, r4
 80009f4:	f7ff fb88 	bl	8000108 <__udivsi3>
 80009f8:	0003      	movs	r3, r0
 80009fa:	0018      	movs	r0, r3
 80009fc:	f000 f92f 	bl	8000c5e <HAL_SYSTICK_Config>
 8000a00:	1e03      	subs	r3, r0, #0
 8000a02:	d001      	beq.n	8000a08 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a04:	2301      	movs	r3, #1
 8000a06:	e00f      	b.n	8000a28 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2b03      	cmp	r3, #3
 8000a0c:	d80b      	bhi.n	8000a26 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a0e:	6879      	ldr	r1, [r7, #4]
 8000a10:	2301      	movs	r3, #1
 8000a12:	425b      	negs	r3, r3
 8000a14:	2200      	movs	r2, #0
 8000a16:	0018      	movs	r0, r3
 8000a18:	f000 f8fc 	bl	8000c14 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_InitTick+0x64>)
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a22:	2300      	movs	r3, #0
 8000a24:	e000      	b.n	8000a28 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
}
 8000a28:	0018      	movs	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	b003      	add	sp, #12
 8000a2e:	bd90      	pop	{r4, r7, pc}
 8000a30:	20000024 	.word	0x20000024
 8000a34:	2000002c 	.word	0x2000002c
 8000a38:	20000028 	.word	0x20000028

08000a3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <HAL_IncTick+0x1c>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	001a      	movs	r2, r3
 8000a46:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <HAL_IncTick+0x20>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	18d2      	adds	r2, r2, r3
 8000a4c:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <HAL_IncTick+0x20>)
 8000a4e:	601a      	str	r2, [r3, #0]
}
 8000a50:	46c0      	nop			; (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	2000002c 	.word	0x2000002c
 8000a5c:	2000013c 	.word	0x2000013c

08000a60 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  return uwTick;
 8000a64:	4b02      	ldr	r3, [pc, #8]	; (8000a70 <HAL_GetTick+0x10>)
 8000a66:	681b      	ldr	r3, [r3, #0]
}
 8000a68:	0018      	movs	r0, r3
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	2000013c 	.word	0x2000013c

08000a74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a7c:	f7ff fff0 	bl	8000a60 <HAL_GetTick>
 8000a80:	0003      	movs	r3, r0
 8000a82:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	d005      	beq.n	8000a9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <HAL_Delay+0x44>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	001a      	movs	r2, r3
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	189b      	adds	r3, r3, r2
 8000a98:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	f7ff ffe0 	bl	8000a60 <HAL_GetTick>
 8000aa0:	0002      	movs	r2, r0
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	68fa      	ldr	r2, [r7, #12]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d8f7      	bhi.n	8000a9c <HAL_Delay+0x28>
  {
  }
}
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	b004      	add	sp, #16
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	2000002c 	.word	0x2000002c

08000abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	0002      	movs	r2, r0
 8000ac4:	1dfb      	adds	r3, r7, #7
 8000ac6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ac8:	1dfb      	adds	r3, r7, #7
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b7f      	cmp	r3, #127	; 0x7f
 8000ace:	d809      	bhi.n	8000ae4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ad0:	1dfb      	adds	r3, r7, #7
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	001a      	movs	r2, r3
 8000ad6:	231f      	movs	r3, #31
 8000ad8:	401a      	ands	r2, r3
 8000ada:	4b04      	ldr	r3, [pc, #16]	; (8000aec <__NVIC_EnableIRQ+0x30>)
 8000adc:	2101      	movs	r1, #1
 8000ade:	4091      	lsls	r1, r2
 8000ae0:	000a      	movs	r2, r1
 8000ae2:	601a      	str	r2, [r3, #0]
  }
}
 8000ae4:	46c0      	nop			; (mov r8, r8)
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	b002      	add	sp, #8
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	e000e100 	.word	0xe000e100

08000af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af0:	b590      	push	{r4, r7, lr}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	0002      	movs	r2, r0
 8000af8:	6039      	str	r1, [r7, #0]
 8000afa:	1dfb      	adds	r3, r7, #7
 8000afc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000afe:	1dfb      	adds	r3, r7, #7
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b7f      	cmp	r3, #127	; 0x7f
 8000b04:	d828      	bhi.n	8000b58 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b06:	4a2f      	ldr	r2, [pc, #188]	; (8000bc4 <__NVIC_SetPriority+0xd4>)
 8000b08:	1dfb      	adds	r3, r7, #7
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	b25b      	sxtb	r3, r3
 8000b0e:	089b      	lsrs	r3, r3, #2
 8000b10:	33c0      	adds	r3, #192	; 0xc0
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	589b      	ldr	r3, [r3, r2]
 8000b16:	1dfa      	adds	r2, r7, #7
 8000b18:	7812      	ldrb	r2, [r2, #0]
 8000b1a:	0011      	movs	r1, r2
 8000b1c:	2203      	movs	r2, #3
 8000b1e:	400a      	ands	r2, r1
 8000b20:	00d2      	lsls	r2, r2, #3
 8000b22:	21ff      	movs	r1, #255	; 0xff
 8000b24:	4091      	lsls	r1, r2
 8000b26:	000a      	movs	r2, r1
 8000b28:	43d2      	mvns	r2, r2
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	019b      	lsls	r3, r3, #6
 8000b32:	22ff      	movs	r2, #255	; 0xff
 8000b34:	401a      	ands	r2, r3
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	4003      	ands	r3, r0
 8000b40:	00db      	lsls	r3, r3, #3
 8000b42:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b44:	481f      	ldr	r0, [pc, #124]	; (8000bc4 <__NVIC_SetPriority+0xd4>)
 8000b46:	1dfb      	adds	r3, r7, #7
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	b25b      	sxtb	r3, r3
 8000b4c:	089b      	lsrs	r3, r3, #2
 8000b4e:	430a      	orrs	r2, r1
 8000b50:	33c0      	adds	r3, #192	; 0xc0
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b56:	e031      	b.n	8000bbc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b58:	4a1b      	ldr	r2, [pc, #108]	; (8000bc8 <__NVIC_SetPriority+0xd8>)
 8000b5a:	1dfb      	adds	r3, r7, #7
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	0019      	movs	r1, r3
 8000b60:	230f      	movs	r3, #15
 8000b62:	400b      	ands	r3, r1
 8000b64:	3b08      	subs	r3, #8
 8000b66:	089b      	lsrs	r3, r3, #2
 8000b68:	3306      	adds	r3, #6
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	18d3      	adds	r3, r2, r3
 8000b6e:	3304      	adds	r3, #4
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	1dfa      	adds	r2, r7, #7
 8000b74:	7812      	ldrb	r2, [r2, #0]
 8000b76:	0011      	movs	r1, r2
 8000b78:	2203      	movs	r2, #3
 8000b7a:	400a      	ands	r2, r1
 8000b7c:	00d2      	lsls	r2, r2, #3
 8000b7e:	21ff      	movs	r1, #255	; 0xff
 8000b80:	4091      	lsls	r1, r2
 8000b82:	000a      	movs	r2, r1
 8000b84:	43d2      	mvns	r2, r2
 8000b86:	401a      	ands	r2, r3
 8000b88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	019b      	lsls	r3, r3, #6
 8000b8e:	22ff      	movs	r2, #255	; 0xff
 8000b90:	401a      	ands	r2, r3
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	0018      	movs	r0, r3
 8000b98:	2303      	movs	r3, #3
 8000b9a:	4003      	ands	r3, r0
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ba0:	4809      	ldr	r0, [pc, #36]	; (8000bc8 <__NVIC_SetPriority+0xd8>)
 8000ba2:	1dfb      	adds	r3, r7, #7
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	001c      	movs	r4, r3
 8000ba8:	230f      	movs	r3, #15
 8000baa:	4023      	ands	r3, r4
 8000bac:	3b08      	subs	r3, #8
 8000bae:	089b      	lsrs	r3, r3, #2
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	3306      	adds	r3, #6
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	18c3      	adds	r3, r0, r3
 8000bb8:	3304      	adds	r3, #4
 8000bba:	601a      	str	r2, [r3, #0]
}
 8000bbc:	46c0      	nop			; (mov r8, r8)
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	b003      	add	sp, #12
 8000bc2:	bd90      	pop	{r4, r7, pc}
 8000bc4:	e000e100 	.word	0xe000e100
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	1e5a      	subs	r2, r3, #1
 8000bd8:	2380      	movs	r3, #128	; 0x80
 8000bda:	045b      	lsls	r3, r3, #17
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d301      	bcc.n	8000be4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000be0:	2301      	movs	r3, #1
 8000be2:	e010      	b.n	8000c06 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000be4:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <SysTick_Config+0x44>)
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	3a01      	subs	r2, #1
 8000bea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bec:	2301      	movs	r3, #1
 8000bee:	425b      	negs	r3, r3
 8000bf0:	2103      	movs	r1, #3
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f7ff ff7c 	bl	8000af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <SysTick_Config+0x44>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bfe:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <SysTick_Config+0x44>)
 8000c00:	2207      	movs	r2, #7
 8000c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	0018      	movs	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	b002      	add	sp, #8
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	e000e010 	.word	0xe000e010

08000c14 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60b9      	str	r1, [r7, #8]
 8000c1c:	607a      	str	r2, [r7, #4]
 8000c1e:	210f      	movs	r1, #15
 8000c20:	187b      	adds	r3, r7, r1
 8000c22:	1c02      	adds	r2, r0, #0
 8000c24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	187b      	adds	r3, r7, r1
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	b25b      	sxtb	r3, r3
 8000c2e:	0011      	movs	r1, r2
 8000c30:	0018      	movs	r0, r3
 8000c32:	f7ff ff5d 	bl	8000af0 <__NVIC_SetPriority>
}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	b004      	add	sp, #16
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	0002      	movs	r2, r0
 8000c46:	1dfb      	adds	r3, r7, #7
 8000c48:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	b25b      	sxtb	r3, r3
 8000c50:	0018      	movs	r0, r3
 8000c52:	f7ff ff33 	bl	8000abc <__NVIC_EnableIRQ>
}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	b002      	add	sp, #8
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f7ff ffaf 	bl	8000bcc <SysTick_Config>
 8000c6e:	0003      	movs	r3, r0
}
 8000c70:	0018      	movs	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	b002      	add	sp, #8
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2221      	movs	r2, #33	; 0x21
 8000c84:	5c9b      	ldrb	r3, [r3, r2]
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d008      	beq.n	8000c9e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2204      	movs	r2, #4
 8000c90:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2220      	movs	r2, #32
 8000c96:	2100      	movs	r1, #0
 8000c98:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e020      	b.n	8000ce0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	210e      	movs	r1, #14
 8000caa:	438a      	bics	r2, r1
 8000cac:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2101      	movs	r1, #1
 8000cba:	438a      	bics	r2, r1
 8000cbc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	4091      	lsls	r1, r2
 8000cca:	000a      	movs	r2, r1
 8000ccc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2221      	movs	r2, #33	; 0x21
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2220      	movs	r2, #32
 8000cda:	2100      	movs	r1, #0
 8000cdc:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000cde:	2300      	movs	r3, #0
}
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	b002      	add	sp, #8
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cf0:	210f      	movs	r1, #15
 8000cf2:	187b      	adds	r3, r7, r1
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2221      	movs	r2, #33	; 0x21
 8000cfc:	5c9b      	ldrb	r3, [r3, r2]
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d006      	beq.n	8000d12 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2204      	movs	r2, #4
 8000d08:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d0a:	187b      	adds	r3, r7, r1
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	701a      	strb	r2, [r3, #0]
 8000d10:	e028      	b.n	8000d64 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	210e      	movs	r1, #14
 8000d1e:	438a      	bics	r2, r1
 8000d20:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	438a      	bics	r2, r1
 8000d30:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	4091      	lsls	r1, r2
 8000d3e:	000a      	movs	r2, r1
 8000d40:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2221      	movs	r2, #33	; 0x21
 8000d46:	2101      	movs	r1, #1
 8000d48:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2220      	movs	r2, #32
 8000d4e:	2100      	movs	r1, #0
 8000d50:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d004      	beq.n	8000d64 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	0010      	movs	r0, r2
 8000d62:	4798      	blx	r3
    } 
  }
  return status;
 8000d64:	230f      	movs	r3, #15
 8000d66:	18fb      	adds	r3, r7, r3
 8000d68:	781b      	ldrb	r3, [r3, #0]
}
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b004      	add	sp, #16
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d82:	e155      	b.n	8001030 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2101      	movs	r1, #1
 8000d8a:	697a      	ldr	r2, [r7, #20]
 8000d8c:	4091      	lsls	r1, r2
 8000d8e:	000a      	movs	r2, r1
 8000d90:	4013      	ands	r3, r2
 8000d92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d100      	bne.n	8000d9c <HAL_GPIO_Init+0x28>
 8000d9a:	e146      	b.n	800102a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2203      	movs	r2, #3
 8000da2:	4013      	ands	r3, r2
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d005      	beq.n	8000db4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	2203      	movs	r2, #3
 8000dae:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d130      	bne.n	8000e16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	409a      	lsls	r2, r3
 8000dc2:	0013      	movs	r3, r2
 8000dc4:	43da      	mvns	r2, r3
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	68da      	ldr	r2, [r3, #12]
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	409a      	lsls	r2, r3
 8000dd6:	0013      	movs	r3, r2
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dea:	2201      	movs	r2, #1
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	409a      	lsls	r2, r3
 8000df0:	0013      	movs	r3, r2
 8000df2:	43da      	mvns	r2, r3
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	091b      	lsrs	r3, r3, #4
 8000e00:	2201      	movs	r2, #1
 8000e02:	401a      	ands	r2, r3
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	409a      	lsls	r2, r3
 8000e08:	0013      	movs	r3, r2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	2b03      	cmp	r3, #3
 8000e20:	d017      	beq.n	8000e52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	68db      	ldr	r3, [r3, #12]
 8000e26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	409a      	lsls	r2, r3
 8000e30:	0013      	movs	r3, r2
 8000e32:	43da      	mvns	r2, r3
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	4013      	ands	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	689a      	ldr	r2, [r3, #8]
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	409a      	lsls	r2, r3
 8000e44:	0013      	movs	r3, r2
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2203      	movs	r2, #3
 8000e58:	4013      	ands	r3, r2
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d123      	bne.n	8000ea6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	08da      	lsrs	r2, r3, #3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3208      	adds	r2, #8
 8000e66:	0092      	lsls	r2, r2, #2
 8000e68:	58d3      	ldr	r3, [r2, r3]
 8000e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	2207      	movs	r2, #7
 8000e70:	4013      	ands	r3, r2
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	220f      	movs	r2, #15
 8000e76:	409a      	lsls	r2, r3
 8000e78:	0013      	movs	r3, r2
 8000e7a:	43da      	mvns	r2, r3
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	691a      	ldr	r2, [r3, #16]
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	2107      	movs	r1, #7
 8000e8a:	400b      	ands	r3, r1
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	409a      	lsls	r2, r3
 8000e90:	0013      	movs	r3, r2
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	08da      	lsrs	r2, r3, #3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3208      	adds	r2, #8
 8000ea0:	0092      	lsls	r2, r2, #2
 8000ea2:	6939      	ldr	r1, [r7, #16]
 8000ea4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	409a      	lsls	r2, r3
 8000eb4:	0013      	movs	r3, r2
 8000eb6:	43da      	mvns	r2, r3
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	401a      	ands	r2, r3
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	409a      	lsls	r2, r3
 8000ecc:	0013      	movs	r3, r2
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685a      	ldr	r2, [r3, #4]
 8000ede:	23c0      	movs	r3, #192	; 0xc0
 8000ee0:	029b      	lsls	r3, r3, #10
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	d100      	bne.n	8000ee8 <HAL_GPIO_Init+0x174>
 8000ee6:	e0a0      	b.n	800102a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee8:	4b57      	ldr	r3, [pc, #348]	; (8001048 <HAL_GPIO_Init+0x2d4>)
 8000eea:	699a      	ldr	r2, [r3, #24]
 8000eec:	4b56      	ldr	r3, [pc, #344]	; (8001048 <HAL_GPIO_Init+0x2d4>)
 8000eee:	2101      	movs	r1, #1
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	619a      	str	r2, [r3, #24]
 8000ef4:	4b54      	ldr	r3, [pc, #336]	; (8001048 <HAL_GPIO_Init+0x2d4>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	2201      	movs	r2, #1
 8000efa:	4013      	ands	r3, r2
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f00:	4a52      	ldr	r2, [pc, #328]	; (800104c <HAL_GPIO_Init+0x2d8>)
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	089b      	lsrs	r3, r3, #2
 8000f06:	3302      	adds	r3, #2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	589b      	ldr	r3, [r3, r2]
 8000f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	2203      	movs	r2, #3
 8000f12:	4013      	ands	r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	220f      	movs	r2, #15
 8000f18:	409a      	lsls	r2, r3
 8000f1a:	0013      	movs	r3, r2
 8000f1c:	43da      	mvns	r2, r3
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	2390      	movs	r3, #144	; 0x90
 8000f28:	05db      	lsls	r3, r3, #23
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d019      	beq.n	8000f62 <HAL_GPIO_Init+0x1ee>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a47      	ldr	r2, [pc, #284]	; (8001050 <HAL_GPIO_Init+0x2dc>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d013      	beq.n	8000f5e <HAL_GPIO_Init+0x1ea>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a46      	ldr	r2, [pc, #280]	; (8001054 <HAL_GPIO_Init+0x2e0>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d00d      	beq.n	8000f5a <HAL_GPIO_Init+0x1e6>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a45      	ldr	r2, [pc, #276]	; (8001058 <HAL_GPIO_Init+0x2e4>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d007      	beq.n	8000f56 <HAL_GPIO_Init+0x1e2>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a44      	ldr	r2, [pc, #272]	; (800105c <HAL_GPIO_Init+0x2e8>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d101      	bne.n	8000f52 <HAL_GPIO_Init+0x1de>
 8000f4e:	2304      	movs	r3, #4
 8000f50:	e008      	b.n	8000f64 <HAL_GPIO_Init+0x1f0>
 8000f52:	2305      	movs	r3, #5
 8000f54:	e006      	b.n	8000f64 <HAL_GPIO_Init+0x1f0>
 8000f56:	2303      	movs	r3, #3
 8000f58:	e004      	b.n	8000f64 <HAL_GPIO_Init+0x1f0>
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	e002      	b.n	8000f64 <HAL_GPIO_Init+0x1f0>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e000      	b.n	8000f64 <HAL_GPIO_Init+0x1f0>
 8000f62:	2300      	movs	r3, #0
 8000f64:	697a      	ldr	r2, [r7, #20]
 8000f66:	2103      	movs	r1, #3
 8000f68:	400a      	ands	r2, r1
 8000f6a:	0092      	lsls	r2, r2, #2
 8000f6c:	4093      	lsls	r3, r2
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f74:	4935      	ldr	r1, [pc, #212]	; (800104c <HAL_GPIO_Init+0x2d8>)
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	089b      	lsrs	r3, r3, #2
 8000f7a:	3302      	adds	r3, #2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f82:	4b37      	ldr	r3, [pc, #220]	; (8001060 <HAL_GPIO_Init+0x2ec>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	43da      	mvns	r2, r3
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685a      	ldr	r2, [r3, #4]
 8000f96:	2380      	movs	r3, #128	; 0x80
 8000f98:	025b      	lsls	r3, r3, #9
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fa6:	4b2e      	ldr	r3, [pc, #184]	; (8001060 <HAL_GPIO_Init+0x2ec>)
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000fac:	4b2c      	ldr	r3, [pc, #176]	; (8001060 <HAL_GPIO_Init+0x2ec>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	43da      	mvns	r2, r3
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685a      	ldr	r2, [r3, #4]
 8000fc0:	2380      	movs	r3, #128	; 0x80
 8000fc2:	029b      	lsls	r3, r3, #10
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fd0:	4b23      	ldr	r3, [pc, #140]	; (8001060 <HAL_GPIO_Init+0x2ec>)
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fd6:	4b22      	ldr	r3, [pc, #136]	; (8001060 <HAL_GPIO_Init+0x2ec>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	43da      	mvns	r2, r3
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685a      	ldr	r2, [r3, #4]
 8000fea:	2380      	movs	r3, #128	; 0x80
 8000fec:	035b      	lsls	r3, r3, #13
 8000fee:	4013      	ands	r3, r2
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ffa:	4b19      	ldr	r3, [pc, #100]	; (8001060 <HAL_GPIO_Init+0x2ec>)
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001000:	4b17      	ldr	r3, [pc, #92]	; (8001060 <HAL_GPIO_Init+0x2ec>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	43da      	mvns	r2, r3
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685a      	ldr	r2, [r3, #4]
 8001014:	2380      	movs	r3, #128	; 0x80
 8001016:	039b      	lsls	r3, r3, #14
 8001018:	4013      	ands	r3, r2
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	4313      	orrs	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001024:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <HAL_GPIO_Init+0x2ec>)
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	3301      	adds	r3, #1
 800102e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	40da      	lsrs	r2, r3
 8001038:	1e13      	subs	r3, r2, #0
 800103a:	d000      	beq.n	800103e <HAL_GPIO_Init+0x2ca>
 800103c:	e6a2      	b.n	8000d84 <HAL_GPIO_Init+0x10>
  } 
}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	46c0      	nop			; (mov r8, r8)
 8001042:	46bd      	mov	sp, r7
 8001044:	b006      	add	sp, #24
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40021000 	.word	0x40021000
 800104c:	40010000 	.word	0x40010000
 8001050:	48000400 	.word	0x48000400
 8001054:	48000800 	.word	0x48000800
 8001058:	48000c00 	.word	0x48000c00
 800105c:	48001000 	.word	0x48001000
 8001060:	40010400 	.word	0x40010400

08001064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	0008      	movs	r0, r1
 800106e:	0011      	movs	r1, r2
 8001070:	1cbb      	adds	r3, r7, #2
 8001072:	1c02      	adds	r2, r0, #0
 8001074:	801a      	strh	r2, [r3, #0]
 8001076:	1c7b      	adds	r3, r7, #1
 8001078:	1c0a      	adds	r2, r1, #0
 800107a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800107c:	1c7b      	adds	r3, r7, #1
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d004      	beq.n	800108e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001084:	1cbb      	adds	r3, r7, #2
 8001086:	881a      	ldrh	r2, [r3, #0]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800108c:	e003      	b.n	8001096 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800108e:	1cbb      	adds	r3, r7, #2
 8001090:	881a      	ldrh	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	46bd      	mov	sp, r7
 800109a:	b002      	add	sp, #8
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d102      	bne.n	80010b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	f000 fb76 	bl	80017a0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2201      	movs	r2, #1
 80010ba:	4013      	ands	r3, r2
 80010bc:	d100      	bne.n	80010c0 <HAL_RCC_OscConfig+0x20>
 80010be:	e08e      	b.n	80011de <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010c0:	4bc5      	ldr	r3, [pc, #788]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	220c      	movs	r2, #12
 80010c6:	4013      	ands	r3, r2
 80010c8:	2b04      	cmp	r3, #4
 80010ca:	d00e      	beq.n	80010ea <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010cc:	4bc2      	ldr	r3, [pc, #776]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	220c      	movs	r2, #12
 80010d2:	4013      	ands	r3, r2
 80010d4:	2b08      	cmp	r3, #8
 80010d6:	d117      	bne.n	8001108 <HAL_RCC_OscConfig+0x68>
 80010d8:	4bbf      	ldr	r3, [pc, #764]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	23c0      	movs	r3, #192	; 0xc0
 80010de:	025b      	lsls	r3, r3, #9
 80010e0:	401a      	ands	r2, r3
 80010e2:	2380      	movs	r3, #128	; 0x80
 80010e4:	025b      	lsls	r3, r3, #9
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d10e      	bne.n	8001108 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ea:	4bbb      	ldr	r3, [pc, #748]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	2380      	movs	r3, #128	; 0x80
 80010f0:	029b      	lsls	r3, r3, #10
 80010f2:	4013      	ands	r3, r2
 80010f4:	d100      	bne.n	80010f8 <HAL_RCC_OscConfig+0x58>
 80010f6:	e071      	b.n	80011dc <HAL_RCC_OscConfig+0x13c>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d000      	beq.n	8001102 <HAL_RCC_OscConfig+0x62>
 8001100:	e06c      	b.n	80011dc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	f000 fb4c 	bl	80017a0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d107      	bne.n	8001120 <HAL_RCC_OscConfig+0x80>
 8001110:	4bb1      	ldr	r3, [pc, #708]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4bb0      	ldr	r3, [pc, #704]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 8001116:	2180      	movs	r1, #128	; 0x80
 8001118:	0249      	lsls	r1, r1, #9
 800111a:	430a      	orrs	r2, r1
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	e02f      	b.n	8001180 <HAL_RCC_OscConfig+0xe0>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d10c      	bne.n	8001142 <HAL_RCC_OscConfig+0xa2>
 8001128:	4bab      	ldr	r3, [pc, #684]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4baa      	ldr	r3, [pc, #680]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 800112e:	49ab      	ldr	r1, [pc, #684]	; (80013dc <HAL_RCC_OscConfig+0x33c>)
 8001130:	400a      	ands	r2, r1
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	4ba8      	ldr	r3, [pc, #672]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4ba7      	ldr	r3, [pc, #668]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 800113a:	49a9      	ldr	r1, [pc, #676]	; (80013e0 <HAL_RCC_OscConfig+0x340>)
 800113c:	400a      	ands	r2, r1
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	e01e      	b.n	8001180 <HAL_RCC_OscConfig+0xe0>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	2b05      	cmp	r3, #5
 8001148:	d10e      	bne.n	8001168 <HAL_RCC_OscConfig+0xc8>
 800114a:	4ba3      	ldr	r3, [pc, #652]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	4ba2      	ldr	r3, [pc, #648]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 8001150:	2180      	movs	r1, #128	; 0x80
 8001152:	02c9      	lsls	r1, r1, #11
 8001154:	430a      	orrs	r2, r1
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	4b9f      	ldr	r3, [pc, #636]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4b9e      	ldr	r3, [pc, #632]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 800115e:	2180      	movs	r1, #128	; 0x80
 8001160:	0249      	lsls	r1, r1, #9
 8001162:	430a      	orrs	r2, r1
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	e00b      	b.n	8001180 <HAL_RCC_OscConfig+0xe0>
 8001168:	4b9b      	ldr	r3, [pc, #620]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4b9a      	ldr	r3, [pc, #616]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 800116e:	499b      	ldr	r1, [pc, #620]	; (80013dc <HAL_RCC_OscConfig+0x33c>)
 8001170:	400a      	ands	r2, r1
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	4b98      	ldr	r3, [pc, #608]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	4b97      	ldr	r3, [pc, #604]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 800117a:	4999      	ldr	r1, [pc, #612]	; (80013e0 <HAL_RCC_OscConfig+0x340>)
 800117c:	400a      	ands	r2, r1
 800117e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d014      	beq.n	80011b2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001188:	f7ff fc6a 	bl	8000a60 <HAL_GetTick>
 800118c:	0003      	movs	r3, r0
 800118e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001190:	e008      	b.n	80011a4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001192:	f7ff fc65 	bl	8000a60 <HAL_GetTick>
 8001196:	0002      	movs	r2, r0
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	2b64      	cmp	r3, #100	; 0x64
 800119e:	d901      	bls.n	80011a4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e2fd      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a4:	4b8c      	ldr	r3, [pc, #560]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	2380      	movs	r3, #128	; 0x80
 80011aa:	029b      	lsls	r3, r3, #10
 80011ac:	4013      	ands	r3, r2
 80011ae:	d0f0      	beq.n	8001192 <HAL_RCC_OscConfig+0xf2>
 80011b0:	e015      	b.n	80011de <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b2:	f7ff fc55 	bl	8000a60 <HAL_GetTick>
 80011b6:	0003      	movs	r3, r0
 80011b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011bc:	f7ff fc50 	bl	8000a60 <HAL_GetTick>
 80011c0:	0002      	movs	r2, r0
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b64      	cmp	r3, #100	; 0x64
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e2e8      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ce:	4b82      	ldr	r3, [pc, #520]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	2380      	movs	r3, #128	; 0x80
 80011d4:	029b      	lsls	r3, r3, #10
 80011d6:	4013      	ands	r3, r2
 80011d8:	d1f0      	bne.n	80011bc <HAL_RCC_OscConfig+0x11c>
 80011da:	e000      	b.n	80011de <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011dc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2202      	movs	r2, #2
 80011e4:	4013      	ands	r3, r2
 80011e6:	d100      	bne.n	80011ea <HAL_RCC_OscConfig+0x14a>
 80011e8:	e06c      	b.n	80012c4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011ea:	4b7b      	ldr	r3, [pc, #492]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	220c      	movs	r2, #12
 80011f0:	4013      	ands	r3, r2
 80011f2:	d00e      	beq.n	8001212 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011f4:	4b78      	ldr	r3, [pc, #480]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	220c      	movs	r2, #12
 80011fa:	4013      	ands	r3, r2
 80011fc:	2b08      	cmp	r3, #8
 80011fe:	d11f      	bne.n	8001240 <HAL_RCC_OscConfig+0x1a0>
 8001200:	4b75      	ldr	r3, [pc, #468]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	23c0      	movs	r3, #192	; 0xc0
 8001206:	025b      	lsls	r3, r3, #9
 8001208:	401a      	ands	r2, r3
 800120a:	2380      	movs	r3, #128	; 0x80
 800120c:	021b      	lsls	r3, r3, #8
 800120e:	429a      	cmp	r2, r3
 8001210:	d116      	bne.n	8001240 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001212:	4b71      	ldr	r3, [pc, #452]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2202      	movs	r2, #2
 8001218:	4013      	ands	r3, r2
 800121a:	d005      	beq.n	8001228 <HAL_RCC_OscConfig+0x188>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d001      	beq.n	8001228 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e2bb      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001228:	4b6b      	ldr	r3, [pc, #428]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	22f8      	movs	r2, #248	; 0xf8
 800122e:	4393      	bics	r3, r2
 8001230:	0019      	movs	r1, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	00da      	lsls	r2, r3, #3
 8001238:	4b67      	ldr	r3, [pc, #412]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 800123a:	430a      	orrs	r2, r1
 800123c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123e:	e041      	b.n	80012c4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d024      	beq.n	8001292 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001248:	4b63      	ldr	r3, [pc, #396]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	4b62      	ldr	r3, [pc, #392]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 800124e:	2101      	movs	r1, #1
 8001250:	430a      	orrs	r2, r1
 8001252:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001254:	f7ff fc04 	bl	8000a60 <HAL_GetTick>
 8001258:	0003      	movs	r3, r0
 800125a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800125c:	e008      	b.n	8001270 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800125e:	f7ff fbff 	bl	8000a60 <HAL_GetTick>
 8001262:	0002      	movs	r2, r0
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d901      	bls.n	8001270 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e297      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001270:	4b59      	ldr	r3, [pc, #356]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2202      	movs	r2, #2
 8001276:	4013      	ands	r3, r2
 8001278:	d0f1      	beq.n	800125e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800127a:	4b57      	ldr	r3, [pc, #348]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	22f8      	movs	r2, #248	; 0xf8
 8001280:	4393      	bics	r3, r2
 8001282:	0019      	movs	r1, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	691b      	ldr	r3, [r3, #16]
 8001288:	00da      	lsls	r2, r3, #3
 800128a:	4b53      	ldr	r3, [pc, #332]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 800128c:	430a      	orrs	r2, r1
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	e018      	b.n	80012c4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001292:	4b51      	ldr	r3, [pc, #324]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	4b50      	ldr	r3, [pc, #320]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 8001298:	2101      	movs	r1, #1
 800129a:	438a      	bics	r2, r1
 800129c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129e:	f7ff fbdf 	bl	8000a60 <HAL_GetTick>
 80012a2:	0003      	movs	r3, r0
 80012a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012a8:	f7ff fbda 	bl	8000a60 <HAL_GetTick>
 80012ac:	0002      	movs	r2, r0
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e272      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ba:	4b47      	ldr	r3, [pc, #284]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2202      	movs	r2, #2
 80012c0:	4013      	ands	r3, r2
 80012c2:	d1f1      	bne.n	80012a8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2208      	movs	r2, #8
 80012ca:	4013      	ands	r3, r2
 80012cc:	d036      	beq.n	800133c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d019      	beq.n	800130a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012d6:	4b40      	ldr	r3, [pc, #256]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 80012d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012da:	4b3f      	ldr	r3, [pc, #252]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 80012dc:	2101      	movs	r1, #1
 80012de:	430a      	orrs	r2, r1
 80012e0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e2:	f7ff fbbd 	bl	8000a60 <HAL_GetTick>
 80012e6:	0003      	movs	r3, r0
 80012e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ec:	f7ff fbb8 	bl	8000a60 <HAL_GetTick>
 80012f0:	0002      	movs	r2, r0
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e250      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fe:	4b36      	ldr	r3, [pc, #216]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 8001300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001302:	2202      	movs	r2, #2
 8001304:	4013      	ands	r3, r2
 8001306:	d0f1      	beq.n	80012ec <HAL_RCC_OscConfig+0x24c>
 8001308:	e018      	b.n	800133c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800130a:	4b33      	ldr	r3, [pc, #204]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 800130c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800130e:	4b32      	ldr	r3, [pc, #200]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 8001310:	2101      	movs	r1, #1
 8001312:	438a      	bics	r2, r1
 8001314:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001316:	f7ff fba3 	bl	8000a60 <HAL_GetTick>
 800131a:	0003      	movs	r3, r0
 800131c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001320:	f7ff fb9e 	bl	8000a60 <HAL_GetTick>
 8001324:	0002      	movs	r2, r0
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e236      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001332:	4b29      	ldr	r3, [pc, #164]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 8001334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001336:	2202      	movs	r2, #2
 8001338:	4013      	ands	r3, r2
 800133a:	d1f1      	bne.n	8001320 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2204      	movs	r2, #4
 8001342:	4013      	ands	r3, r2
 8001344:	d100      	bne.n	8001348 <HAL_RCC_OscConfig+0x2a8>
 8001346:	e0b5      	b.n	80014b4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001348:	201f      	movs	r0, #31
 800134a:	183b      	adds	r3, r7, r0
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001350:	4b21      	ldr	r3, [pc, #132]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 8001352:	69da      	ldr	r2, [r3, #28]
 8001354:	2380      	movs	r3, #128	; 0x80
 8001356:	055b      	lsls	r3, r3, #21
 8001358:	4013      	ands	r3, r2
 800135a:	d110      	bne.n	800137e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800135c:	4b1e      	ldr	r3, [pc, #120]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 800135e:	69da      	ldr	r2, [r3, #28]
 8001360:	4b1d      	ldr	r3, [pc, #116]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 8001362:	2180      	movs	r1, #128	; 0x80
 8001364:	0549      	lsls	r1, r1, #21
 8001366:	430a      	orrs	r2, r1
 8001368:	61da      	str	r2, [r3, #28]
 800136a:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 800136c:	69da      	ldr	r2, [r3, #28]
 800136e:	2380      	movs	r3, #128	; 0x80
 8001370:	055b      	lsls	r3, r3, #21
 8001372:	4013      	ands	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001378:	183b      	adds	r3, r7, r0
 800137a:	2201      	movs	r2, #1
 800137c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800137e:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <HAL_RCC_OscConfig+0x344>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	2380      	movs	r3, #128	; 0x80
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	4013      	ands	r3, r2
 8001388:	d11a      	bne.n	80013c0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800138a:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <HAL_RCC_OscConfig+0x344>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <HAL_RCC_OscConfig+0x344>)
 8001390:	2180      	movs	r1, #128	; 0x80
 8001392:	0049      	lsls	r1, r1, #1
 8001394:	430a      	orrs	r2, r1
 8001396:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001398:	f7ff fb62 	bl	8000a60 <HAL_GetTick>
 800139c:	0003      	movs	r3, r0
 800139e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013a2:	f7ff fb5d 	bl	8000a60 <HAL_GetTick>
 80013a6:	0002      	movs	r2, r0
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b64      	cmp	r3, #100	; 0x64
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e1f5      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b4:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <HAL_RCC_OscConfig+0x344>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	2380      	movs	r3, #128	; 0x80
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	4013      	ands	r3, r2
 80013be:	d0f0      	beq.n	80013a2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d10f      	bne.n	80013e8 <HAL_RCC_OscConfig+0x348>
 80013c8:	4b03      	ldr	r3, [pc, #12]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 80013ca:	6a1a      	ldr	r2, [r3, #32]
 80013cc:	4b02      	ldr	r3, [pc, #8]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 80013ce:	2101      	movs	r1, #1
 80013d0:	430a      	orrs	r2, r1
 80013d2:	621a      	str	r2, [r3, #32]
 80013d4:	e036      	b.n	8001444 <HAL_RCC_OscConfig+0x3a4>
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	40021000 	.word	0x40021000
 80013dc:	fffeffff 	.word	0xfffeffff
 80013e0:	fffbffff 	.word	0xfffbffff
 80013e4:	40007000 	.word	0x40007000
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d10c      	bne.n	800140a <HAL_RCC_OscConfig+0x36a>
 80013f0:	4bca      	ldr	r3, [pc, #808]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80013f2:	6a1a      	ldr	r2, [r3, #32]
 80013f4:	4bc9      	ldr	r3, [pc, #804]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80013f6:	2101      	movs	r1, #1
 80013f8:	438a      	bics	r2, r1
 80013fa:	621a      	str	r2, [r3, #32]
 80013fc:	4bc7      	ldr	r3, [pc, #796]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80013fe:	6a1a      	ldr	r2, [r3, #32]
 8001400:	4bc6      	ldr	r3, [pc, #792]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001402:	2104      	movs	r1, #4
 8001404:	438a      	bics	r2, r1
 8001406:	621a      	str	r2, [r3, #32]
 8001408:	e01c      	b.n	8001444 <HAL_RCC_OscConfig+0x3a4>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	2b05      	cmp	r3, #5
 8001410:	d10c      	bne.n	800142c <HAL_RCC_OscConfig+0x38c>
 8001412:	4bc2      	ldr	r3, [pc, #776]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001414:	6a1a      	ldr	r2, [r3, #32]
 8001416:	4bc1      	ldr	r3, [pc, #772]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001418:	2104      	movs	r1, #4
 800141a:	430a      	orrs	r2, r1
 800141c:	621a      	str	r2, [r3, #32]
 800141e:	4bbf      	ldr	r3, [pc, #764]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001420:	6a1a      	ldr	r2, [r3, #32]
 8001422:	4bbe      	ldr	r3, [pc, #760]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001424:	2101      	movs	r1, #1
 8001426:	430a      	orrs	r2, r1
 8001428:	621a      	str	r2, [r3, #32]
 800142a:	e00b      	b.n	8001444 <HAL_RCC_OscConfig+0x3a4>
 800142c:	4bbb      	ldr	r3, [pc, #748]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 800142e:	6a1a      	ldr	r2, [r3, #32]
 8001430:	4bba      	ldr	r3, [pc, #744]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001432:	2101      	movs	r1, #1
 8001434:	438a      	bics	r2, r1
 8001436:	621a      	str	r2, [r3, #32]
 8001438:	4bb8      	ldr	r3, [pc, #736]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 800143a:	6a1a      	ldr	r2, [r3, #32]
 800143c:	4bb7      	ldr	r3, [pc, #732]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 800143e:	2104      	movs	r1, #4
 8001440:	438a      	bics	r2, r1
 8001442:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d014      	beq.n	8001476 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144c:	f7ff fb08 	bl	8000a60 <HAL_GetTick>
 8001450:	0003      	movs	r3, r0
 8001452:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001454:	e009      	b.n	800146a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001456:	f7ff fb03 	bl	8000a60 <HAL_GetTick>
 800145a:	0002      	movs	r2, r0
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	4aaf      	ldr	r2, [pc, #700]	; (8001720 <HAL_RCC_OscConfig+0x680>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e19a      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800146a:	4bac      	ldr	r3, [pc, #688]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 800146c:	6a1b      	ldr	r3, [r3, #32]
 800146e:	2202      	movs	r2, #2
 8001470:	4013      	ands	r3, r2
 8001472:	d0f0      	beq.n	8001456 <HAL_RCC_OscConfig+0x3b6>
 8001474:	e013      	b.n	800149e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001476:	f7ff faf3 	bl	8000a60 <HAL_GetTick>
 800147a:	0003      	movs	r3, r0
 800147c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800147e:	e009      	b.n	8001494 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001480:	f7ff faee 	bl	8000a60 <HAL_GetTick>
 8001484:	0002      	movs	r2, r0
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	4aa5      	ldr	r2, [pc, #660]	; (8001720 <HAL_RCC_OscConfig+0x680>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e185      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001494:	4ba1      	ldr	r3, [pc, #644]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	2202      	movs	r2, #2
 800149a:	4013      	ands	r3, r2
 800149c:	d1f0      	bne.n	8001480 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800149e:	231f      	movs	r3, #31
 80014a0:	18fb      	adds	r3, r7, r3
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d105      	bne.n	80014b4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014a8:	4b9c      	ldr	r3, [pc, #624]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80014aa:	69da      	ldr	r2, [r3, #28]
 80014ac:	4b9b      	ldr	r3, [pc, #620]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80014ae:	499d      	ldr	r1, [pc, #628]	; (8001724 <HAL_RCC_OscConfig+0x684>)
 80014b0:	400a      	ands	r2, r1
 80014b2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2210      	movs	r2, #16
 80014ba:	4013      	ands	r3, r2
 80014bc:	d063      	beq.n	8001586 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d12a      	bne.n	800151c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80014c6:	4b95      	ldr	r3, [pc, #596]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80014c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014ca:	4b94      	ldr	r3, [pc, #592]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80014cc:	2104      	movs	r1, #4
 80014ce:	430a      	orrs	r2, r1
 80014d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80014d2:	4b92      	ldr	r3, [pc, #584]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80014d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014d6:	4b91      	ldr	r3, [pc, #580]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80014d8:	2101      	movs	r1, #1
 80014da:	430a      	orrs	r2, r1
 80014dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014de:	f7ff fabf 	bl	8000a60 <HAL_GetTick>
 80014e2:	0003      	movs	r3, r0
 80014e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80014e8:	f7ff faba 	bl	8000a60 <HAL_GetTick>
 80014ec:	0002      	movs	r2, r0
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e152      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80014fa:	4b88      	ldr	r3, [pc, #544]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80014fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014fe:	2202      	movs	r2, #2
 8001500:	4013      	ands	r3, r2
 8001502:	d0f1      	beq.n	80014e8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001504:	4b85      	ldr	r3, [pc, #532]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001508:	22f8      	movs	r2, #248	; 0xf8
 800150a:	4393      	bics	r3, r2
 800150c:	0019      	movs	r1, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	00da      	lsls	r2, r3, #3
 8001514:	4b81      	ldr	r3, [pc, #516]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001516:	430a      	orrs	r2, r1
 8001518:	635a      	str	r2, [r3, #52]	; 0x34
 800151a:	e034      	b.n	8001586 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	695b      	ldr	r3, [r3, #20]
 8001520:	3305      	adds	r3, #5
 8001522:	d111      	bne.n	8001548 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001524:	4b7d      	ldr	r3, [pc, #500]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001526:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001528:	4b7c      	ldr	r3, [pc, #496]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 800152a:	2104      	movs	r1, #4
 800152c:	438a      	bics	r2, r1
 800152e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001530:	4b7a      	ldr	r3, [pc, #488]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001534:	22f8      	movs	r2, #248	; 0xf8
 8001536:	4393      	bics	r3, r2
 8001538:	0019      	movs	r1, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	00da      	lsls	r2, r3, #3
 8001540:	4b76      	ldr	r3, [pc, #472]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001542:	430a      	orrs	r2, r1
 8001544:	635a      	str	r2, [r3, #52]	; 0x34
 8001546:	e01e      	b.n	8001586 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001548:	4b74      	ldr	r3, [pc, #464]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 800154a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800154c:	4b73      	ldr	r3, [pc, #460]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 800154e:	2104      	movs	r1, #4
 8001550:	430a      	orrs	r2, r1
 8001552:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001554:	4b71      	ldr	r3, [pc, #452]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001556:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001558:	4b70      	ldr	r3, [pc, #448]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 800155a:	2101      	movs	r1, #1
 800155c:	438a      	bics	r2, r1
 800155e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001560:	f7ff fa7e 	bl	8000a60 <HAL_GetTick>
 8001564:	0003      	movs	r3, r0
 8001566:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800156a:	f7ff fa79 	bl	8000a60 <HAL_GetTick>
 800156e:	0002      	movs	r2, r0
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e111      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800157c:	4b67      	ldr	r3, [pc, #412]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 800157e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001580:	2202      	movs	r2, #2
 8001582:	4013      	ands	r3, r2
 8001584:	d1f1      	bne.n	800156a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2220      	movs	r2, #32
 800158c:	4013      	ands	r3, r2
 800158e:	d05c      	beq.n	800164a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001590:	4b62      	ldr	r3, [pc, #392]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	220c      	movs	r2, #12
 8001596:	4013      	ands	r3, r2
 8001598:	2b0c      	cmp	r3, #12
 800159a:	d00e      	beq.n	80015ba <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800159c:	4b5f      	ldr	r3, [pc, #380]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	220c      	movs	r2, #12
 80015a2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80015a4:	2b08      	cmp	r3, #8
 80015a6:	d114      	bne.n	80015d2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80015a8:	4b5c      	ldr	r3, [pc, #368]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	23c0      	movs	r3, #192	; 0xc0
 80015ae:	025b      	lsls	r3, r3, #9
 80015b0:	401a      	ands	r2, r3
 80015b2:	23c0      	movs	r3, #192	; 0xc0
 80015b4:	025b      	lsls	r3, r3, #9
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d10b      	bne.n	80015d2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80015ba:	4b58      	ldr	r3, [pc, #352]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80015bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015be:	2380      	movs	r3, #128	; 0x80
 80015c0:	025b      	lsls	r3, r3, #9
 80015c2:	4013      	ands	r3, r2
 80015c4:	d040      	beq.n	8001648 <HAL_RCC_OscConfig+0x5a8>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a1b      	ldr	r3, [r3, #32]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d03c      	beq.n	8001648 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e0e6      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a1b      	ldr	r3, [r3, #32]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d01b      	beq.n	8001612 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80015da:	4b50      	ldr	r3, [pc, #320]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80015dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015de:	4b4f      	ldr	r3, [pc, #316]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80015e0:	2180      	movs	r1, #128	; 0x80
 80015e2:	0249      	lsls	r1, r1, #9
 80015e4:	430a      	orrs	r2, r1
 80015e6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e8:	f7ff fa3a 	bl	8000a60 <HAL_GetTick>
 80015ec:	0003      	movs	r3, r0
 80015ee:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015f2:	f7ff fa35 	bl	8000a60 <HAL_GetTick>
 80015f6:	0002      	movs	r2, r0
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e0cd      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001604:	4b45      	ldr	r3, [pc, #276]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001606:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001608:	2380      	movs	r3, #128	; 0x80
 800160a:	025b      	lsls	r3, r3, #9
 800160c:	4013      	ands	r3, r2
 800160e:	d0f0      	beq.n	80015f2 <HAL_RCC_OscConfig+0x552>
 8001610:	e01b      	b.n	800164a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001612:	4b42      	ldr	r3, [pc, #264]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001616:	4b41      	ldr	r3, [pc, #260]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001618:	4943      	ldr	r1, [pc, #268]	; (8001728 <HAL_RCC_OscConfig+0x688>)
 800161a:	400a      	ands	r2, r1
 800161c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161e:	f7ff fa1f 	bl	8000a60 <HAL_GetTick>
 8001622:	0003      	movs	r3, r0
 8001624:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001628:	f7ff fa1a 	bl	8000a60 <HAL_GetTick>
 800162c:	0002      	movs	r2, r0
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e0b2      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800163a:	4b38      	ldr	r3, [pc, #224]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 800163c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800163e:	2380      	movs	r3, #128	; 0x80
 8001640:	025b      	lsls	r3, r3, #9
 8001642:	4013      	ands	r3, r2
 8001644:	d1f0      	bne.n	8001628 <HAL_RCC_OscConfig+0x588>
 8001646:	e000      	b.n	800164a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001648:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164e:	2b00      	cmp	r3, #0
 8001650:	d100      	bne.n	8001654 <HAL_RCC_OscConfig+0x5b4>
 8001652:	e0a4      	b.n	800179e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001654:	4b31      	ldr	r3, [pc, #196]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	220c      	movs	r2, #12
 800165a:	4013      	ands	r3, r2
 800165c:	2b08      	cmp	r3, #8
 800165e:	d100      	bne.n	8001662 <HAL_RCC_OscConfig+0x5c2>
 8001660:	e078      	b.n	8001754 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001666:	2b02      	cmp	r3, #2
 8001668:	d14c      	bne.n	8001704 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166a:	4b2c      	ldr	r3, [pc, #176]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	4b2b      	ldr	r3, [pc, #172]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001670:	492e      	ldr	r1, [pc, #184]	; (800172c <HAL_RCC_OscConfig+0x68c>)
 8001672:	400a      	ands	r2, r1
 8001674:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001676:	f7ff f9f3 	bl	8000a60 <HAL_GetTick>
 800167a:	0003      	movs	r3, r0
 800167c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001680:	f7ff f9ee 	bl	8000a60 <HAL_GetTick>
 8001684:	0002      	movs	r2, r0
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e086      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001692:	4b22      	ldr	r3, [pc, #136]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	2380      	movs	r3, #128	; 0x80
 8001698:	049b      	lsls	r3, r3, #18
 800169a:	4013      	ands	r3, r2
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800169e:	4b1f      	ldr	r3, [pc, #124]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80016a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a2:	220f      	movs	r2, #15
 80016a4:	4393      	bics	r3, r2
 80016a6:	0019      	movs	r1, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016ac:	4b1b      	ldr	r3, [pc, #108]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80016ae:	430a      	orrs	r2, r1
 80016b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80016b2:	4b1a      	ldr	r3, [pc, #104]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	4a1e      	ldr	r2, [pc, #120]	; (8001730 <HAL_RCC_OscConfig+0x690>)
 80016b8:	4013      	ands	r3, r2
 80016ba:	0019      	movs	r1, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c4:	431a      	orrs	r2, r3
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80016c8:	430a      	orrs	r2, r1
 80016ca:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016cc:	4b13      	ldr	r3, [pc, #76]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80016d2:	2180      	movs	r1, #128	; 0x80
 80016d4:	0449      	lsls	r1, r1, #17
 80016d6:	430a      	orrs	r2, r1
 80016d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016da:	f7ff f9c1 	bl	8000a60 <HAL_GetTick>
 80016de:	0003      	movs	r3, r0
 80016e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e4:	f7ff f9bc 	bl	8000a60 <HAL_GetTick>
 80016e8:	0002      	movs	r2, r0
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e054      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	2380      	movs	r3, #128	; 0x80
 80016fc:	049b      	lsls	r3, r3, #18
 80016fe:	4013      	ands	r3, r2
 8001700:	d0f0      	beq.n	80016e4 <HAL_RCC_OscConfig+0x644>
 8001702:	e04c      	b.n	800179e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4b04      	ldr	r3, [pc, #16]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 800170a:	4908      	ldr	r1, [pc, #32]	; (800172c <HAL_RCC_OscConfig+0x68c>)
 800170c:	400a      	ands	r2, r1
 800170e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001710:	f7ff f9a6 	bl	8000a60 <HAL_GetTick>
 8001714:	0003      	movs	r3, r0
 8001716:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001718:	e015      	b.n	8001746 <HAL_RCC_OscConfig+0x6a6>
 800171a:	46c0      	nop			; (mov r8, r8)
 800171c:	40021000 	.word	0x40021000
 8001720:	00001388 	.word	0x00001388
 8001724:	efffffff 	.word	0xefffffff
 8001728:	fffeffff 	.word	0xfffeffff
 800172c:	feffffff 	.word	0xfeffffff
 8001730:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001734:	f7ff f994 	bl	8000a60 <HAL_GetTick>
 8001738:	0002      	movs	r2, r0
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e02c      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001746:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <HAL_RCC_OscConfig+0x708>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	2380      	movs	r3, #128	; 0x80
 800174c:	049b      	lsls	r3, r3, #18
 800174e:	4013      	ands	r3, r2
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0x694>
 8001752:	e024      	b.n	800179e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001758:	2b01      	cmp	r3, #1
 800175a:	d101      	bne.n	8001760 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e01f      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <HAL_RCC_OscConfig+0x708>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001766:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <HAL_RCC_OscConfig+0x708>)
 8001768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	23c0      	movs	r3, #192	; 0xc0
 8001770:	025b      	lsls	r3, r3, #9
 8001772:	401a      	ands	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001778:	429a      	cmp	r2, r3
 800177a:	d10e      	bne.n	800179a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	220f      	movs	r2, #15
 8001780:	401a      	ands	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001786:	429a      	cmp	r2, r3
 8001788:	d107      	bne.n	800179a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	23f0      	movs	r3, #240	; 0xf0
 800178e:	039b      	lsls	r3, r3, #14
 8001790:	401a      	ands	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001796:	429a      	cmp	r2, r3
 8001798:	d001      	beq.n	800179e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e000      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	0018      	movs	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	b008      	add	sp, #32
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40021000 	.word	0x40021000

080017ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e0bf      	b.n	8001940 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017c0:	4b61      	ldr	r3, [pc, #388]	; (8001948 <HAL_RCC_ClockConfig+0x19c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2201      	movs	r2, #1
 80017c6:	4013      	ands	r3, r2
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d911      	bls.n	80017f2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ce:	4b5e      	ldr	r3, [pc, #376]	; (8001948 <HAL_RCC_ClockConfig+0x19c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2201      	movs	r2, #1
 80017d4:	4393      	bics	r3, r2
 80017d6:	0019      	movs	r1, r3
 80017d8:	4b5b      	ldr	r3, [pc, #364]	; (8001948 <HAL_RCC_ClockConfig+0x19c>)
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	430a      	orrs	r2, r1
 80017de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e0:	4b59      	ldr	r3, [pc, #356]	; (8001948 <HAL_RCC_ClockConfig+0x19c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2201      	movs	r2, #1
 80017e6:	4013      	ands	r3, r2
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d001      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e0a6      	b.n	8001940 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2202      	movs	r2, #2
 80017f8:	4013      	ands	r3, r2
 80017fa:	d015      	beq.n	8001828 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2204      	movs	r2, #4
 8001802:	4013      	ands	r3, r2
 8001804:	d006      	beq.n	8001814 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001806:	4b51      	ldr	r3, [pc, #324]	; (800194c <HAL_RCC_ClockConfig+0x1a0>)
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	4b50      	ldr	r3, [pc, #320]	; (800194c <HAL_RCC_ClockConfig+0x1a0>)
 800180c:	21e0      	movs	r1, #224	; 0xe0
 800180e:	00c9      	lsls	r1, r1, #3
 8001810:	430a      	orrs	r2, r1
 8001812:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001814:	4b4d      	ldr	r3, [pc, #308]	; (800194c <HAL_RCC_ClockConfig+0x1a0>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	22f0      	movs	r2, #240	; 0xf0
 800181a:	4393      	bics	r3, r2
 800181c:	0019      	movs	r1, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689a      	ldr	r2, [r3, #8]
 8001822:	4b4a      	ldr	r3, [pc, #296]	; (800194c <HAL_RCC_ClockConfig+0x1a0>)
 8001824:	430a      	orrs	r2, r1
 8001826:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2201      	movs	r2, #1
 800182e:	4013      	ands	r3, r2
 8001830:	d04c      	beq.n	80018cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d107      	bne.n	800184a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800183a:	4b44      	ldr	r3, [pc, #272]	; (800194c <HAL_RCC_ClockConfig+0x1a0>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	2380      	movs	r3, #128	; 0x80
 8001840:	029b      	lsls	r3, r3, #10
 8001842:	4013      	ands	r3, r2
 8001844:	d120      	bne.n	8001888 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e07a      	b.n	8001940 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d107      	bne.n	8001862 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001852:	4b3e      	ldr	r3, [pc, #248]	; (800194c <HAL_RCC_ClockConfig+0x1a0>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	2380      	movs	r3, #128	; 0x80
 8001858:	049b      	lsls	r3, r3, #18
 800185a:	4013      	ands	r3, r2
 800185c:	d114      	bne.n	8001888 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e06e      	b.n	8001940 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b03      	cmp	r3, #3
 8001868:	d107      	bne.n	800187a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800186a:	4b38      	ldr	r3, [pc, #224]	; (800194c <HAL_RCC_ClockConfig+0x1a0>)
 800186c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	025b      	lsls	r3, r3, #9
 8001872:	4013      	ands	r3, r2
 8001874:	d108      	bne.n	8001888 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e062      	b.n	8001940 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187a:	4b34      	ldr	r3, [pc, #208]	; (800194c <HAL_RCC_ClockConfig+0x1a0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2202      	movs	r2, #2
 8001880:	4013      	ands	r3, r2
 8001882:	d101      	bne.n	8001888 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e05b      	b.n	8001940 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001888:	4b30      	ldr	r3, [pc, #192]	; (800194c <HAL_RCC_ClockConfig+0x1a0>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2203      	movs	r2, #3
 800188e:	4393      	bics	r3, r2
 8001890:	0019      	movs	r1, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	4b2d      	ldr	r3, [pc, #180]	; (800194c <HAL_RCC_ClockConfig+0x1a0>)
 8001898:	430a      	orrs	r2, r1
 800189a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800189c:	f7ff f8e0 	bl	8000a60 <HAL_GetTick>
 80018a0:	0003      	movs	r3, r0
 80018a2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a4:	e009      	b.n	80018ba <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a6:	f7ff f8db 	bl	8000a60 <HAL_GetTick>
 80018aa:	0002      	movs	r2, r0
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	4a27      	ldr	r2, [pc, #156]	; (8001950 <HAL_RCC_ClockConfig+0x1a4>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e042      	b.n	8001940 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ba:	4b24      	ldr	r3, [pc, #144]	; (800194c <HAL_RCC_ClockConfig+0x1a0>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	220c      	movs	r2, #12
 80018c0:	401a      	ands	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d1ec      	bne.n	80018a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018cc:	4b1e      	ldr	r3, [pc, #120]	; (8001948 <HAL_RCC_ClockConfig+0x19c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2201      	movs	r2, #1
 80018d2:	4013      	ands	r3, r2
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d211      	bcs.n	80018fe <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018da:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <HAL_RCC_ClockConfig+0x19c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2201      	movs	r2, #1
 80018e0:	4393      	bics	r3, r2
 80018e2:	0019      	movs	r1, r3
 80018e4:	4b18      	ldr	r3, [pc, #96]	; (8001948 <HAL_RCC_ClockConfig+0x19c>)
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ec:	4b16      	ldr	r3, [pc, #88]	; (8001948 <HAL_RCC_ClockConfig+0x19c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2201      	movs	r2, #1
 80018f2:	4013      	ands	r3, r2
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d001      	beq.n	80018fe <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e020      	b.n	8001940 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2204      	movs	r2, #4
 8001904:	4013      	ands	r3, r2
 8001906:	d009      	beq.n	800191c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001908:	4b10      	ldr	r3, [pc, #64]	; (800194c <HAL_RCC_ClockConfig+0x1a0>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	4a11      	ldr	r2, [pc, #68]	; (8001954 <HAL_RCC_ClockConfig+0x1a8>)
 800190e:	4013      	ands	r3, r2
 8001910:	0019      	movs	r1, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68da      	ldr	r2, [r3, #12]
 8001916:	4b0d      	ldr	r3, [pc, #52]	; (800194c <HAL_RCC_ClockConfig+0x1a0>)
 8001918:	430a      	orrs	r2, r1
 800191a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800191c:	f000 f820 	bl	8001960 <HAL_RCC_GetSysClockFreq>
 8001920:	0001      	movs	r1, r0
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <HAL_RCC_ClockConfig+0x1a0>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	091b      	lsrs	r3, r3, #4
 8001928:	220f      	movs	r2, #15
 800192a:	4013      	ands	r3, r2
 800192c:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <HAL_RCC_ClockConfig+0x1ac>)
 800192e:	5cd3      	ldrb	r3, [r2, r3]
 8001930:	000a      	movs	r2, r1
 8001932:	40da      	lsrs	r2, r3
 8001934:	4b09      	ldr	r3, [pc, #36]	; (800195c <HAL_RCC_ClockConfig+0x1b0>)
 8001936:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001938:	2003      	movs	r0, #3
 800193a:	f7ff f84b 	bl	80009d4 <HAL_InitTick>
  
  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	0018      	movs	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	b004      	add	sp, #16
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40022000 	.word	0x40022000
 800194c:	40021000 	.word	0x40021000
 8001950:	00001388 	.word	0x00001388
 8001954:	fffff8ff 	.word	0xfffff8ff
 8001958:	08003910 	.word	0x08003910
 800195c:	20000024 	.word	0x20000024

08001960 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001960:	b590      	push	{r4, r7, lr}
 8001962:	b08f      	sub	sp, #60	; 0x3c
 8001964:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001966:	2314      	movs	r3, #20
 8001968:	18fb      	adds	r3, r7, r3
 800196a:	4a38      	ldr	r2, [pc, #224]	; (8001a4c <HAL_RCC_GetSysClockFreq+0xec>)
 800196c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800196e:	c313      	stmia	r3!, {r0, r1, r4}
 8001970:	6812      	ldr	r2, [r2, #0]
 8001972:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001974:	1d3b      	adds	r3, r7, #4
 8001976:	4a36      	ldr	r2, [pc, #216]	; (8001a50 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001978:	ca13      	ldmia	r2!, {r0, r1, r4}
 800197a:	c313      	stmia	r3!, {r0, r1, r4}
 800197c:	6812      	ldr	r2, [r2, #0]
 800197e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001984:	2300      	movs	r3, #0
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
 8001988:	2300      	movs	r3, #0
 800198a:	637b      	str	r3, [r7, #52]	; 0x34
 800198c:	2300      	movs	r3, #0
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001994:	4b2f      	ldr	r3, [pc, #188]	; (8001a54 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800199a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800199c:	220c      	movs	r2, #12
 800199e:	4013      	ands	r3, r2
 80019a0:	2b0c      	cmp	r3, #12
 80019a2:	d047      	beq.n	8001a34 <HAL_RCC_GetSysClockFreq+0xd4>
 80019a4:	d849      	bhi.n	8001a3a <HAL_RCC_GetSysClockFreq+0xda>
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d002      	beq.n	80019b0 <HAL_RCC_GetSysClockFreq+0x50>
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d003      	beq.n	80019b6 <HAL_RCC_GetSysClockFreq+0x56>
 80019ae:	e044      	b.n	8001a3a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019b0:	4b29      	ldr	r3, [pc, #164]	; (8001a58 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019b2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019b4:	e044      	b.n	8001a40 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80019b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b8:	0c9b      	lsrs	r3, r3, #18
 80019ba:	220f      	movs	r2, #15
 80019bc:	4013      	ands	r3, r2
 80019be:	2214      	movs	r2, #20
 80019c0:	18ba      	adds	r2, r7, r2
 80019c2:	5cd3      	ldrb	r3, [r2, r3]
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80019c6:	4b23      	ldr	r3, [pc, #140]	; (8001a54 <HAL_RCC_GetSysClockFreq+0xf4>)
 80019c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ca:	220f      	movs	r2, #15
 80019cc:	4013      	ands	r3, r2
 80019ce:	1d3a      	adds	r2, r7, #4
 80019d0:	5cd3      	ldrb	r3, [r2, r3]
 80019d2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80019d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019d6:	23c0      	movs	r3, #192	; 0xc0
 80019d8:	025b      	lsls	r3, r3, #9
 80019da:	401a      	ands	r2, r3
 80019dc:	2380      	movs	r3, #128	; 0x80
 80019de:	025b      	lsls	r3, r3, #9
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d109      	bne.n	80019f8 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019e6:	481c      	ldr	r0, [pc, #112]	; (8001a58 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019e8:	f7fe fb8e 	bl	8000108 <__udivsi3>
 80019ec:	0003      	movs	r3, r0
 80019ee:	001a      	movs	r2, r3
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	4353      	muls	r3, r2
 80019f4:	637b      	str	r3, [r7, #52]	; 0x34
 80019f6:	e01a      	b.n	8001a2e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80019f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019fa:	23c0      	movs	r3, #192	; 0xc0
 80019fc:	025b      	lsls	r3, r3, #9
 80019fe:	401a      	ands	r2, r3
 8001a00:	23c0      	movs	r3, #192	; 0xc0
 8001a02:	025b      	lsls	r3, r3, #9
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d109      	bne.n	8001a1c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a0a:	4814      	ldr	r0, [pc, #80]	; (8001a5c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a0c:	f7fe fb7c 	bl	8000108 <__udivsi3>
 8001a10:	0003      	movs	r3, r0
 8001a12:	001a      	movs	r2, r3
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	4353      	muls	r3, r2
 8001a18:	637b      	str	r3, [r7, #52]	; 0x34
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a1e:	480e      	ldr	r0, [pc, #56]	; (8001a58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a20:	f7fe fb72 	bl	8000108 <__udivsi3>
 8001a24:	0003      	movs	r3, r0
 8001a26:	001a      	movs	r2, r3
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	4353      	muls	r3, r2
 8001a2c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a30:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a32:	e005      	b.n	8001a40 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001a34:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a36:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a38:	e002      	b.n	8001a40 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a3a:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a3c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a3e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001a42:	0018      	movs	r0, r3
 8001a44:	46bd      	mov	sp, r7
 8001a46:	b00f      	add	sp, #60	; 0x3c
 8001a48:	bd90      	pop	{r4, r7, pc}
 8001a4a:	46c0      	nop			; (mov r8, r8)
 8001a4c:	080038f0 	.word	0x080038f0
 8001a50:	08003900 	.word	0x08003900
 8001a54:	40021000 	.word	0x40021000
 8001a58:	007a1200 	.word	0x007a1200
 8001a5c:	02dc6c00 	.word	0x02dc6c00

08001a60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a64:	4b02      	ldr	r3, [pc, #8]	; (8001a70 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a66:	681b      	ldr	r3, [r3, #0]
}
 8001a68:	0018      	movs	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	20000024 	.word	0x20000024

08001a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001a78:	f7ff fff2 	bl	8001a60 <HAL_RCC_GetHCLKFreq>
 8001a7c:	0001      	movs	r1, r0
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	0a1b      	lsrs	r3, r3, #8
 8001a84:	2207      	movs	r2, #7
 8001a86:	4013      	ands	r3, r2
 8001a88:	4a04      	ldr	r2, [pc, #16]	; (8001a9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a8a:	5cd3      	ldrb	r3, [r2, r3]
 8001a8c:	40d9      	lsrs	r1, r3
 8001a8e:	000b      	movs	r3, r1
}    
 8001a90:	0018      	movs	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	08003920 	.word	0x08003920

08001aa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	2380      	movs	r3, #128	; 0x80
 8001ab6:	025b      	lsls	r3, r3, #9
 8001ab8:	4013      	ands	r3, r2
 8001aba:	d100      	bne.n	8001abe <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001abc:	e08e      	b.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001abe:	2017      	movs	r0, #23
 8001ac0:	183b      	adds	r3, r7, r0
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ac6:	4b6e      	ldr	r3, [pc, #440]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ac8:	69da      	ldr	r2, [r3, #28]
 8001aca:	2380      	movs	r3, #128	; 0x80
 8001acc:	055b      	lsls	r3, r3, #21
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d110      	bne.n	8001af4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ad2:	4b6b      	ldr	r3, [pc, #428]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ad4:	69da      	ldr	r2, [r3, #28]
 8001ad6:	4b6a      	ldr	r3, [pc, #424]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ad8:	2180      	movs	r1, #128	; 0x80
 8001ada:	0549      	lsls	r1, r1, #21
 8001adc:	430a      	orrs	r2, r1
 8001ade:	61da      	str	r2, [r3, #28]
 8001ae0:	4b67      	ldr	r3, [pc, #412]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ae2:	69da      	ldr	r2, [r3, #28]
 8001ae4:	2380      	movs	r3, #128	; 0x80
 8001ae6:	055b      	lsls	r3, r3, #21
 8001ae8:	4013      	ands	r3, r2
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aee:	183b      	adds	r3, r7, r0
 8001af0:	2201      	movs	r2, #1
 8001af2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af4:	4b63      	ldr	r3, [pc, #396]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	2380      	movs	r3, #128	; 0x80
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	4013      	ands	r3, r2
 8001afe:	d11a      	bne.n	8001b36 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b00:	4b60      	ldr	r3, [pc, #384]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b5f      	ldr	r3, [pc, #380]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b06:	2180      	movs	r1, #128	; 0x80
 8001b08:	0049      	lsls	r1, r1, #1
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b0e:	f7fe ffa7 	bl	8000a60 <HAL_GetTick>
 8001b12:	0003      	movs	r3, r0
 8001b14:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b16:	e008      	b.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b18:	f7fe ffa2 	bl	8000a60 <HAL_GetTick>
 8001b1c:	0002      	movs	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b64      	cmp	r3, #100	; 0x64
 8001b24:	d901      	bls.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e0a6      	b.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2a:	4b56      	ldr	r3, [pc, #344]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	2380      	movs	r3, #128	; 0x80
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	4013      	ands	r3, r2
 8001b34:	d0f0      	beq.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b36:	4b52      	ldr	r3, [pc, #328]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b38:	6a1a      	ldr	r2, [r3, #32]
 8001b3a:	23c0      	movs	r3, #192	; 0xc0
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4013      	ands	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d034      	beq.n	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	23c0      	movs	r3, #192	; 0xc0
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4013      	ands	r3, r2
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d02c      	beq.n	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b58:	4b49      	ldr	r3, [pc, #292]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	4a4a      	ldr	r2, [pc, #296]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b62:	4b47      	ldr	r3, [pc, #284]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b64:	6a1a      	ldr	r2, [r3, #32]
 8001b66:	4b46      	ldr	r3, [pc, #280]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b68:	2180      	movs	r1, #128	; 0x80
 8001b6a:	0249      	lsls	r1, r1, #9
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b70:	4b43      	ldr	r3, [pc, #268]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b72:	6a1a      	ldr	r2, [r3, #32]
 8001b74:	4b42      	ldr	r3, [pc, #264]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b76:	4945      	ldr	r1, [pc, #276]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001b78:	400a      	ands	r2, r1
 8001b7a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001b7c:	4b40      	ldr	r3, [pc, #256]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2201      	movs	r2, #1
 8001b86:	4013      	ands	r3, r2
 8001b88:	d013      	beq.n	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8a:	f7fe ff69 	bl	8000a60 <HAL_GetTick>
 8001b8e:	0003      	movs	r3, r0
 8001b90:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b92:	e009      	b.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b94:	f7fe ff64 	bl	8000a60 <HAL_GetTick>
 8001b98:	0002      	movs	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	4a3c      	ldr	r2, [pc, #240]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e067      	b.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba8:	4b35      	ldr	r3, [pc, #212]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	2202      	movs	r2, #2
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d0f0      	beq.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bb2:	4b33      	ldr	r3, [pc, #204]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
 8001bb6:	4a34      	ldr	r2, [pc, #208]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	0019      	movs	r1, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	4b2f      	ldr	r3, [pc, #188]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bc6:	2317      	movs	r3, #23
 8001bc8:	18fb      	adds	r3, r7, r3
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d105      	bne.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd0:	4b2b      	ldr	r3, [pc, #172]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bd2:	69da      	ldr	r2, [r3, #28]
 8001bd4:	4b2a      	ldr	r3, [pc, #168]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bd6:	492f      	ldr	r1, [pc, #188]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001bd8:	400a      	ands	r2, r1
 8001bda:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2201      	movs	r2, #1
 8001be2:	4013      	ands	r3, r2
 8001be4:	d009      	beq.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001be6:	4b26      	ldr	r3, [pc, #152]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	2203      	movs	r2, #3
 8001bec:	4393      	bics	r3, r2
 8001bee:	0019      	movs	r1, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	4b22      	ldr	r3, [pc, #136]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	4013      	ands	r3, r2
 8001c02:	d009      	beq.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c04:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c08:	4a23      	ldr	r2, [pc, #140]	; (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	0019      	movs	r1, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68da      	ldr	r2, [r3, #12]
 8001c12:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c14:	430a      	orrs	r2, r1
 8001c16:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d009      	beq.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c22:	4b17      	ldr	r3, [pc, #92]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	2210      	movs	r2, #16
 8001c28:	4393      	bics	r3, r2
 8001c2a:	0019      	movs	r1, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	691a      	ldr	r2, [r3, #16]
 8001c30:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c32:	430a      	orrs	r2, r1
 8001c34:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	2380      	movs	r3, #128	; 0x80
 8001c3c:	029b      	lsls	r3, r3, #10
 8001c3e:	4013      	ands	r3, r2
 8001c40:	d009      	beq.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c42:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	2280      	movs	r2, #128	; 0x80
 8001c48:	4393      	bics	r3, r2
 8001c4a:	0019      	movs	r1, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	699a      	ldr	r2, [r3, #24]
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c52:	430a      	orrs	r2, r1
 8001c54:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	2380      	movs	r3, #128	; 0x80
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d009      	beq.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001c62:	4b07      	ldr	r3, [pc, #28]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	2240      	movs	r2, #64	; 0x40
 8001c68:	4393      	bics	r3, r2
 8001c6a:	0019      	movs	r1, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	695a      	ldr	r2, [r3, #20]
 8001c70:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c72:	430a      	orrs	r2, r1
 8001c74:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	0018      	movs	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	b006      	add	sp, #24
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40021000 	.word	0x40021000
 8001c84:	40007000 	.word	0x40007000
 8001c88:	fffffcff 	.word	0xfffffcff
 8001c8c:	fffeffff 	.word	0xfffeffff
 8001c90:	00001388 	.word	0x00001388
 8001c94:	efffffff 	.word	0xefffffff
 8001c98:	fffcffff 	.word	0xfffcffff

08001c9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e044      	b.n	8001d38 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d107      	bne.n	8001cc6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2274      	movs	r2, #116	; 0x74
 8001cba:	2100      	movs	r1, #0
 8001cbc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	f7fe fd47 	bl	8000754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2224      	movs	r2, #36	; 0x24
 8001cca:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	438a      	bics	r2, r1
 8001cda:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	0018      	movs	r0, r3
 8001ce0:	f000 fc36 	bl	8002550 <UART_SetConfig>
 8001ce4:	0003      	movs	r3, r0
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d101      	bne.n	8001cee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e024      	b.n	8001d38 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	f000 fdb1 	bl	8002860 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	490d      	ldr	r1, [pc, #52]	; (8001d40 <HAL_UART_Init+0xa4>)
 8001d0a:	400a      	ands	r2, r1
 8001d0c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	212a      	movs	r1, #42	; 0x2a
 8001d1a:	438a      	bics	r2, r1
 8001d1c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2101      	movs	r1, #1
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	0018      	movs	r0, r3
 8001d32:	f000 fe49 	bl	80029c8 <UART_CheckIdleState>
 8001d36:	0003      	movs	r3, r0
}
 8001d38:	0018      	movs	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	b002      	add	sp, #8
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	ffffb7ff 	.word	0xffffb7ff

08001d44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08a      	sub	sp, #40	; 0x28
 8001d48:	af02      	add	r7, sp, #8
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	603b      	str	r3, [r7, #0]
 8001d50:	1dbb      	adds	r3, r7, #6
 8001d52:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d58:	2b20      	cmp	r3, #32
 8001d5a:	d000      	beq.n	8001d5e <HAL_UART_Transmit+0x1a>
 8001d5c:	e096      	b.n	8001e8c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_UART_Transmit+0x28>
 8001d64:	1dbb      	adds	r3, r7, #6
 8001d66:	881b      	ldrh	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e08e      	b.n	8001e8e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	2380      	movs	r3, #128	; 0x80
 8001d76:	015b      	lsls	r3, r3, #5
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d109      	bne.n	8001d90 <HAL_UART_Transmit+0x4c>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d105      	bne.n	8001d90 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	2201      	movs	r2, #1
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d001      	beq.n	8001d90 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e07e      	b.n	8001e8e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2274      	movs	r2, #116	; 0x74
 8001d94:	5c9b      	ldrb	r3, [r3, r2]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d101      	bne.n	8001d9e <HAL_UART_Transmit+0x5a>
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	e077      	b.n	8001e8e <HAL_UART_Transmit+0x14a>
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2274      	movs	r2, #116	; 0x74
 8001da2:	2101      	movs	r1, #1
 8001da4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2280      	movs	r2, #128	; 0x80
 8001daa:	2100      	movs	r1, #0
 8001dac:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2221      	movs	r2, #33	; 0x21
 8001db2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001db4:	f7fe fe54 	bl	8000a60 <HAL_GetTick>
 8001db8:	0003      	movs	r3, r0
 8001dba:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	1dba      	adds	r2, r7, #6
 8001dc0:	2150      	movs	r1, #80	; 0x50
 8001dc2:	8812      	ldrh	r2, [r2, #0]
 8001dc4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	1dba      	adds	r2, r7, #6
 8001dca:	2152      	movs	r1, #82	; 0x52
 8001dcc:	8812      	ldrh	r2, [r2, #0]
 8001dce:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	2380      	movs	r3, #128	; 0x80
 8001dd6:	015b      	lsls	r3, r3, #5
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d108      	bne.n	8001dee <HAL_UART_Transmit+0xaa>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d104      	bne.n	8001dee <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	61bb      	str	r3, [r7, #24]
 8001dec:	e003      	b.n	8001df6 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2274      	movs	r2, #116	; 0x74
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8001dfe:	e02d      	b.n	8001e5c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	0013      	movs	r3, r2
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2180      	movs	r1, #128	; 0x80
 8001e0e:	f000 fe23 	bl	8002a58 <UART_WaitOnFlagUntilTimeout>
 8001e12:	1e03      	subs	r3, r0, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e039      	b.n	8001e8e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d10b      	bne.n	8001e38 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	881a      	ldrh	r2, [r3, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	05d2      	lsls	r2, r2, #23
 8001e2a:	0dd2      	lsrs	r2, r2, #23
 8001e2c:	b292      	uxth	r2, r2
 8001e2e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	3302      	adds	r3, #2
 8001e34:	61bb      	str	r3, [r7, #24]
 8001e36:	e008      	b.n	8001e4a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	781a      	ldrb	r2, [r3, #0]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	b292      	uxth	r2, r2
 8001e42:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	3301      	adds	r3, #1
 8001e48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2252      	movs	r2, #82	; 0x52
 8001e4e:	5a9b      	ldrh	r3, [r3, r2]
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	3b01      	subs	r3, #1
 8001e54:	b299      	uxth	r1, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2252      	movs	r2, #82	; 0x52
 8001e5a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2252      	movs	r2, #82	; 0x52
 8001e60:	5a9b      	ldrh	r3, [r3, r2]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1cb      	bne.n	8001e00 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	0013      	movs	r3, r2
 8001e72:	2200      	movs	r2, #0
 8001e74:	2140      	movs	r1, #64	; 0x40
 8001e76:	f000 fdef 	bl	8002a58 <UART_WaitOnFlagUntilTimeout>
 8001e7a:	1e03      	subs	r3, r0, #0
 8001e7c:	d001      	beq.n	8001e82 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e005      	b.n	8001e8e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2220      	movs	r2, #32
 8001e86:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	e000      	b.n	8001e8e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001e8c:	2302      	movs	r3, #2
  }
}
 8001e8e:	0018      	movs	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	b008      	add	sp, #32
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b088      	sub	sp, #32
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	60f8      	str	r0, [r7, #12]
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	1dbb      	adds	r3, r7, #6
 8001ea2:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ea8:	2b20      	cmp	r3, #32
 8001eaa:	d150      	bne.n	8001f4e <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_UART_Receive_IT+0x24>
 8001eb2:	1dbb      	adds	r3, r7, #6
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e048      	b.n	8001f50 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	2380      	movs	r3, #128	; 0x80
 8001ec4:	015b      	lsls	r3, r3, #5
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d109      	bne.n	8001ede <HAL_UART_Receive_IT+0x48>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d105      	bne.n	8001ede <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d001      	beq.n	8001ede <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e038      	b.n	8001f50 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2274      	movs	r2, #116	; 0x74
 8001ee2:	5c9b      	ldrb	r3, [r3, r2]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d101      	bne.n	8001eec <HAL_UART_Receive_IT+0x56>
 8001ee8:	2302      	movs	r3, #2
 8001eea:	e031      	b.n	8001f50 <HAL_UART_Receive_IT+0xba>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2274      	movs	r2, #116	; 0x74
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	2380      	movs	r3, #128	; 0x80
 8001f02:	041b      	lsls	r3, r3, #16
 8001f04:	4013      	ands	r3, r2
 8001f06:	d019      	beq.n	8001f3c <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f08:	f3ef 8310 	mrs	r3, PRIMASK
 8001f0c:	613b      	str	r3, [r7, #16]
  return(result);
 8001f0e:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001f10:	61fb      	str	r3, [r7, #28]
 8001f12:	2301      	movs	r3, #1
 8001f14:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f383 8810 	msr	PRIMASK, r3
}
 8001f1c:	46c0      	nop			; (mov r8, r8)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2180      	movs	r1, #128	; 0x80
 8001f2a:	04c9      	lsls	r1, r1, #19
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	f383 8810 	msr	PRIMASK, r3
}
 8001f3a:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001f3c:	1dbb      	adds	r3, r7, #6
 8001f3e:	881a      	ldrh	r2, [r3, #0]
 8001f40:	68b9      	ldr	r1, [r7, #8]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	0018      	movs	r0, r3
 8001f46:	f000 fe4b 	bl	8002be0 <UART_Start_Receive_IT>
 8001f4a:	0003      	movs	r3, r0
 8001f4c:	e000      	b.n	8001f50 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8001f4e:	2302      	movs	r3, #2
  }
}
 8001f50:	0018      	movs	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	b008      	add	sp, #32
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f58:	b590      	push	{r4, r7, lr}
 8001f5a:	b0ab      	sub	sp, #172	; 0xac
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	22a4      	movs	r2, #164	; 0xa4
 8001f68:	18b9      	adds	r1, r7, r2
 8001f6a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	20a0      	movs	r0, #160	; 0xa0
 8001f74:	1839      	adds	r1, r7, r0
 8001f76:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	219c      	movs	r1, #156	; 0x9c
 8001f80:	1879      	adds	r1, r7, r1
 8001f82:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001f84:	0011      	movs	r1, r2
 8001f86:	18bb      	adds	r3, r7, r2
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a99      	ldr	r2, [pc, #612]	; (80021f0 <HAL_UART_IRQHandler+0x298>)
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2298      	movs	r2, #152	; 0x98
 8001f90:	18bc      	adds	r4, r7, r2
 8001f92:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8001f94:	18bb      	adds	r3, r7, r2
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d114      	bne.n	8001fc6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001f9c:	187b      	adds	r3, r7, r1
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2220      	movs	r2, #32
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d00f      	beq.n	8001fc6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001fa6:	183b      	adds	r3, r7, r0
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2220      	movs	r2, #32
 8001fac:	4013      	ands	r3, r2
 8001fae:	d00a      	beq.n	8001fc6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d100      	bne.n	8001fba <HAL_UART_IRQHandler+0x62>
 8001fb8:	e296      	b.n	80024e8 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	0010      	movs	r0, r2
 8001fc2:	4798      	blx	r3
      }
      return;
 8001fc4:	e290      	b.n	80024e8 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001fc6:	2398      	movs	r3, #152	; 0x98
 8001fc8:	18fb      	adds	r3, r7, r3
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d100      	bne.n	8001fd2 <HAL_UART_IRQHandler+0x7a>
 8001fd0:	e114      	b.n	80021fc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001fd2:	239c      	movs	r3, #156	; 0x9c
 8001fd4:	18fb      	adds	r3, r7, r3
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d106      	bne.n	8001fec <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001fde:	23a0      	movs	r3, #160	; 0xa0
 8001fe0:	18fb      	adds	r3, r7, r3
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a83      	ldr	r2, [pc, #524]	; (80021f4 <HAL_UART_IRQHandler+0x29c>)
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d100      	bne.n	8001fec <HAL_UART_IRQHandler+0x94>
 8001fea:	e107      	b.n	80021fc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001fec:	23a4      	movs	r3, #164	; 0xa4
 8001fee:	18fb      	adds	r3, r7, r3
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d012      	beq.n	800201e <HAL_UART_IRQHandler+0xc6>
 8001ff8:	23a0      	movs	r3, #160	; 0xa0
 8001ffa:	18fb      	adds	r3, r7, r3
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	2380      	movs	r3, #128	; 0x80
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	4013      	ands	r3, r2
 8002004:	d00b      	beq.n	800201e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2201      	movs	r2, #1
 800200c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2280      	movs	r2, #128	; 0x80
 8002012:	589b      	ldr	r3, [r3, r2]
 8002014:	2201      	movs	r2, #1
 8002016:	431a      	orrs	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2180      	movs	r1, #128	; 0x80
 800201c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800201e:	23a4      	movs	r3, #164	; 0xa4
 8002020:	18fb      	adds	r3, r7, r3
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2202      	movs	r2, #2
 8002026:	4013      	ands	r3, r2
 8002028:	d011      	beq.n	800204e <HAL_UART_IRQHandler+0xf6>
 800202a:	239c      	movs	r3, #156	; 0x9c
 800202c:	18fb      	adds	r3, r7, r3
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2201      	movs	r2, #1
 8002032:	4013      	ands	r3, r2
 8002034:	d00b      	beq.n	800204e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2202      	movs	r2, #2
 800203c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2280      	movs	r2, #128	; 0x80
 8002042:	589b      	ldr	r3, [r3, r2]
 8002044:	2204      	movs	r2, #4
 8002046:	431a      	orrs	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2180      	movs	r1, #128	; 0x80
 800204c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800204e:	23a4      	movs	r3, #164	; 0xa4
 8002050:	18fb      	adds	r3, r7, r3
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2204      	movs	r2, #4
 8002056:	4013      	ands	r3, r2
 8002058:	d011      	beq.n	800207e <HAL_UART_IRQHandler+0x126>
 800205a:	239c      	movs	r3, #156	; 0x9c
 800205c:	18fb      	adds	r3, r7, r3
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2201      	movs	r2, #1
 8002062:	4013      	ands	r3, r2
 8002064:	d00b      	beq.n	800207e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2204      	movs	r2, #4
 800206c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2280      	movs	r2, #128	; 0x80
 8002072:	589b      	ldr	r3, [r3, r2]
 8002074:	2202      	movs	r2, #2
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2180      	movs	r1, #128	; 0x80
 800207c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800207e:	23a4      	movs	r3, #164	; 0xa4
 8002080:	18fb      	adds	r3, r7, r3
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2208      	movs	r2, #8
 8002086:	4013      	ands	r3, r2
 8002088:	d017      	beq.n	80020ba <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800208a:	23a0      	movs	r3, #160	; 0xa0
 800208c:	18fb      	adds	r3, r7, r3
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2220      	movs	r2, #32
 8002092:	4013      	ands	r3, r2
 8002094:	d105      	bne.n	80020a2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002096:	239c      	movs	r3, #156	; 0x9c
 8002098:	18fb      	adds	r3, r7, r3
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2201      	movs	r2, #1
 800209e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80020a0:	d00b      	beq.n	80020ba <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2208      	movs	r2, #8
 80020a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2280      	movs	r2, #128	; 0x80
 80020ae:	589b      	ldr	r3, [r3, r2]
 80020b0:	2208      	movs	r2, #8
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2180      	movs	r1, #128	; 0x80
 80020b8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80020ba:	23a4      	movs	r3, #164	; 0xa4
 80020bc:	18fb      	adds	r3, r7, r3
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	2380      	movs	r3, #128	; 0x80
 80020c2:	011b      	lsls	r3, r3, #4
 80020c4:	4013      	ands	r3, r2
 80020c6:	d013      	beq.n	80020f0 <HAL_UART_IRQHandler+0x198>
 80020c8:	23a0      	movs	r3, #160	; 0xa0
 80020ca:	18fb      	adds	r3, r7, r3
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	2380      	movs	r3, #128	; 0x80
 80020d0:	04db      	lsls	r3, r3, #19
 80020d2:	4013      	ands	r3, r2
 80020d4:	d00c      	beq.n	80020f0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2280      	movs	r2, #128	; 0x80
 80020dc:	0112      	lsls	r2, r2, #4
 80020de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2280      	movs	r2, #128	; 0x80
 80020e4:	589b      	ldr	r3, [r3, r2]
 80020e6:	2220      	movs	r2, #32
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2180      	movs	r1, #128	; 0x80
 80020ee:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2280      	movs	r2, #128	; 0x80
 80020f4:	589b      	ldr	r3, [r3, r2]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d100      	bne.n	80020fc <HAL_UART_IRQHandler+0x1a4>
 80020fa:	e1f7      	b.n	80024ec <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80020fc:	23a4      	movs	r3, #164	; 0xa4
 80020fe:	18fb      	adds	r3, r7, r3
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2220      	movs	r2, #32
 8002104:	4013      	ands	r3, r2
 8002106:	d00e      	beq.n	8002126 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002108:	23a0      	movs	r3, #160	; 0xa0
 800210a:	18fb      	adds	r3, r7, r3
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2220      	movs	r2, #32
 8002110:	4013      	ands	r3, r2
 8002112:	d008      	beq.n	8002126 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002118:	2b00      	cmp	r3, #0
 800211a:	d004      	beq.n	8002126 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	0010      	movs	r0, r2
 8002124:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2280      	movs	r2, #128	; 0x80
 800212a:	589b      	ldr	r3, [r3, r2]
 800212c:	2194      	movs	r1, #148	; 0x94
 800212e:	187a      	adds	r2, r7, r1
 8002130:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2240      	movs	r2, #64	; 0x40
 800213a:	4013      	ands	r3, r2
 800213c:	2b40      	cmp	r3, #64	; 0x40
 800213e:	d004      	beq.n	800214a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002140:	187b      	adds	r3, r7, r1
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2228      	movs	r2, #40	; 0x28
 8002146:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002148:	d047      	beq.n	80021da <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	0018      	movs	r0, r3
 800214e:	f000 fdf7 	bl	8002d40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2240      	movs	r2, #64	; 0x40
 800215a:	4013      	ands	r3, r2
 800215c:	2b40      	cmp	r3, #64	; 0x40
 800215e:	d137      	bne.n	80021d0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002160:	f3ef 8310 	mrs	r3, PRIMASK
 8002164:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002166:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002168:	2090      	movs	r0, #144	; 0x90
 800216a:	183a      	adds	r2, r7, r0
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	2301      	movs	r3, #1
 8002170:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002172:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002174:	f383 8810 	msr	PRIMASK, r3
}
 8002178:	46c0      	nop			; (mov r8, r8)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2140      	movs	r1, #64	; 0x40
 8002186:	438a      	bics	r2, r1
 8002188:	609a      	str	r2, [r3, #8]
 800218a:	183b      	adds	r3, r7, r0
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002190:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002192:	f383 8810 	msr	PRIMASK, r3
}
 8002196:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219c:	2b00      	cmp	r3, #0
 800219e:	d012      	beq.n	80021c6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a4:	4a14      	ldr	r2, [pc, #80]	; (80021f8 <HAL_UART_IRQHandler+0x2a0>)
 80021a6:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ac:	0018      	movs	r0, r3
 80021ae:	f7fe fd9b 	bl	8000ce8 <HAL_DMA_Abort_IT>
 80021b2:	1e03      	subs	r3, r0, #0
 80021b4:	d01a      	beq.n	80021ec <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c0:	0018      	movs	r0, r3
 80021c2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021c4:	e012      	b.n	80021ec <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	0018      	movs	r0, r3
 80021ca:	f000 f9ad 	bl	8002528 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021ce:	e00d      	b.n	80021ec <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	0018      	movs	r0, r3
 80021d4:	f000 f9a8 	bl	8002528 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021d8:	e008      	b.n	80021ec <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	0018      	movs	r0, r3
 80021de:	f000 f9a3 	bl	8002528 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2280      	movs	r2, #128	; 0x80
 80021e6:	2100      	movs	r1, #0
 80021e8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80021ea:	e17f      	b.n	80024ec <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021ec:	46c0      	nop			; (mov r8, r8)
    return;
 80021ee:	e17d      	b.n	80024ec <HAL_UART_IRQHandler+0x594>
 80021f0:	0000080f 	.word	0x0000080f
 80021f4:	04000120 	.word	0x04000120
 80021f8:	08002e05 	.word	0x08002e05

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002200:	2b01      	cmp	r3, #1
 8002202:	d000      	beq.n	8002206 <HAL_UART_IRQHandler+0x2ae>
 8002204:	e131      	b.n	800246a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002206:	23a4      	movs	r3, #164	; 0xa4
 8002208:	18fb      	adds	r3, r7, r3
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2210      	movs	r2, #16
 800220e:	4013      	ands	r3, r2
 8002210:	d100      	bne.n	8002214 <HAL_UART_IRQHandler+0x2bc>
 8002212:	e12a      	b.n	800246a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002214:	23a0      	movs	r3, #160	; 0xa0
 8002216:	18fb      	adds	r3, r7, r3
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2210      	movs	r2, #16
 800221c:	4013      	ands	r3, r2
 800221e:	d100      	bne.n	8002222 <HAL_UART_IRQHandler+0x2ca>
 8002220:	e123      	b.n	800246a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2210      	movs	r2, #16
 8002228:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	2240      	movs	r2, #64	; 0x40
 8002232:	4013      	ands	r3, r2
 8002234:	2b40      	cmp	r3, #64	; 0x40
 8002236:	d000      	beq.n	800223a <HAL_UART_IRQHandler+0x2e2>
 8002238:	e09b      	b.n	8002372 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	217e      	movs	r1, #126	; 0x7e
 8002244:	187b      	adds	r3, r7, r1
 8002246:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002248:	187b      	adds	r3, r7, r1
 800224a:	881b      	ldrh	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d100      	bne.n	8002252 <HAL_UART_IRQHandler+0x2fa>
 8002250:	e14e      	b.n	80024f0 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2258      	movs	r2, #88	; 0x58
 8002256:	5a9b      	ldrh	r3, [r3, r2]
 8002258:	187a      	adds	r2, r7, r1
 800225a:	8812      	ldrh	r2, [r2, #0]
 800225c:	429a      	cmp	r2, r3
 800225e:	d300      	bcc.n	8002262 <HAL_UART_IRQHandler+0x30a>
 8002260:	e146      	b.n	80024f0 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	187a      	adds	r2, r7, r1
 8002266:	215a      	movs	r1, #90	; 0x5a
 8002268:	8812      	ldrh	r2, [r2, #0]
 800226a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	2b20      	cmp	r3, #32
 8002274:	d06e      	beq.n	8002354 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002276:	f3ef 8310 	mrs	r3, PRIMASK
 800227a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800227c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800227e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002280:	2301      	movs	r3, #1
 8002282:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002286:	f383 8810 	msr	PRIMASK, r3
}
 800228a:	46c0      	nop			; (mov r8, r8)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	499a      	ldr	r1, [pc, #616]	; (8002500 <HAL_UART_IRQHandler+0x5a8>)
 8002298:	400a      	ands	r2, r1
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800229e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a2:	f383 8810 	msr	PRIMASK, r3
}
 80022a6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022a8:	f3ef 8310 	mrs	r3, PRIMASK
 80022ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80022ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022b0:	677b      	str	r3, [r7, #116]	; 0x74
 80022b2:	2301      	movs	r3, #1
 80022b4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022b8:	f383 8810 	msr	PRIMASK, r3
}
 80022bc:	46c0      	nop			; (mov r8, r8)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2101      	movs	r1, #1
 80022ca:	438a      	bics	r2, r1
 80022cc:	609a      	str	r2, [r3, #8]
 80022ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022d0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022d4:	f383 8810 	msr	PRIMASK, r3
}
 80022d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022da:	f3ef 8310 	mrs	r3, PRIMASK
 80022de:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80022e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022e2:	673b      	str	r3, [r7, #112]	; 0x70
 80022e4:	2301      	movs	r3, #1
 80022e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022ea:	f383 8810 	msr	PRIMASK, r3
}
 80022ee:	46c0      	nop			; (mov r8, r8)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2140      	movs	r1, #64	; 0x40
 80022fc:	438a      	bics	r2, r1
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002302:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002306:	f383 8810 	msr	PRIMASK, r3
}
 800230a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2220      	movs	r2, #32
 8002310:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002318:	f3ef 8310 	mrs	r3, PRIMASK
 800231c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800231e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002320:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002322:	2301      	movs	r3, #1
 8002324:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002326:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002328:	f383 8810 	msr	PRIMASK, r3
}
 800232c:	46c0      	nop			; (mov r8, r8)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2110      	movs	r1, #16
 800233a:	438a      	bics	r2, r1
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002340:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002344:	f383 8810 	msr	PRIMASK, r3
}
 8002348:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234e:	0018      	movs	r0, r3
 8002350:	f7fe fc92 	bl	8000c78 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2258      	movs	r2, #88	; 0x58
 8002358:	5a9a      	ldrh	r2, [r3, r2]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	215a      	movs	r1, #90	; 0x5a
 800235e:	5a5b      	ldrh	r3, [r3, r1]
 8002360:	b29b      	uxth	r3, r3
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	b29a      	uxth	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	0011      	movs	r1, r2
 800236a:	0018      	movs	r0, r3
 800236c:	f000 f8e4 	bl	8002538 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002370:	e0be      	b.n	80024f0 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2258      	movs	r2, #88	; 0x58
 8002376:	5a99      	ldrh	r1, [r3, r2]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	225a      	movs	r2, #90	; 0x5a
 800237c:	5a9b      	ldrh	r3, [r3, r2]
 800237e:	b29a      	uxth	r2, r3
 8002380:	208e      	movs	r0, #142	; 0x8e
 8002382:	183b      	adds	r3, r7, r0
 8002384:	1a8a      	subs	r2, r1, r2
 8002386:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	225a      	movs	r2, #90	; 0x5a
 800238c:	5a9b      	ldrh	r3, [r3, r2]
 800238e:	b29b      	uxth	r3, r3
 8002390:	2b00      	cmp	r3, #0
 8002392:	d100      	bne.n	8002396 <HAL_UART_IRQHandler+0x43e>
 8002394:	e0ae      	b.n	80024f4 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8002396:	183b      	adds	r3, r7, r0
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d100      	bne.n	80023a0 <HAL_UART_IRQHandler+0x448>
 800239e:	e0a9      	b.n	80024f4 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023a0:	f3ef 8310 	mrs	r3, PRIMASK
 80023a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80023a6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023a8:	2488      	movs	r4, #136	; 0x88
 80023aa:	193a      	adds	r2, r7, r4
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	2301      	movs	r3, #1
 80023b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	f383 8810 	msr	PRIMASK, r3
}
 80023b8:	46c0      	nop			; (mov r8, r8)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	494f      	ldr	r1, [pc, #316]	; (8002504 <HAL_UART_IRQHandler+0x5ac>)
 80023c6:	400a      	ands	r2, r1
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	193b      	adds	r3, r7, r4
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	f383 8810 	msr	PRIMASK, r3
}
 80023d6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023d8:	f3ef 8310 	mrs	r3, PRIMASK
 80023dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80023de:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023e0:	2484      	movs	r4, #132	; 0x84
 80023e2:	193a      	adds	r2, r7, r4
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	2301      	movs	r3, #1
 80023e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	f383 8810 	msr	PRIMASK, r3
}
 80023f0:	46c0      	nop			; (mov r8, r8)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2101      	movs	r1, #1
 80023fe:	438a      	bics	r2, r1
 8002400:	609a      	str	r2, [r3, #8]
 8002402:	193b      	adds	r3, r7, r4
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	f383 8810 	msr	PRIMASK, r3
}
 800240e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2220      	movs	r2, #32
 8002414:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002422:	f3ef 8310 	mrs	r3, PRIMASK
 8002426:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800242a:	2480      	movs	r4, #128	; 0x80
 800242c:	193a      	adds	r2, r7, r4
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	2301      	movs	r3, #1
 8002432:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002436:	f383 8810 	msr	PRIMASK, r3
}
 800243a:	46c0      	nop			; (mov r8, r8)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2110      	movs	r1, #16
 8002448:	438a      	bics	r2, r1
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	193b      	adds	r3, r7, r4
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002454:	f383 8810 	msr	PRIMASK, r3
}
 8002458:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800245a:	183b      	adds	r3, r7, r0
 800245c:	881a      	ldrh	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	0011      	movs	r1, r2
 8002462:	0018      	movs	r0, r3
 8002464:	f000 f868 	bl	8002538 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002468:	e044      	b.n	80024f4 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800246a:	23a4      	movs	r3, #164	; 0xa4
 800246c:	18fb      	adds	r3, r7, r3
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	2380      	movs	r3, #128	; 0x80
 8002472:	035b      	lsls	r3, r3, #13
 8002474:	4013      	ands	r3, r2
 8002476:	d010      	beq.n	800249a <HAL_UART_IRQHandler+0x542>
 8002478:	239c      	movs	r3, #156	; 0x9c
 800247a:	18fb      	adds	r3, r7, r3
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	2380      	movs	r3, #128	; 0x80
 8002480:	03db      	lsls	r3, r3, #15
 8002482:	4013      	ands	r3, r2
 8002484:	d009      	beq.n	800249a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2280      	movs	r2, #128	; 0x80
 800248c:	0352      	lsls	r2, r2, #13
 800248e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	0018      	movs	r0, r3
 8002494:	f000 fe60 	bl	8003158 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002498:	e02f      	b.n	80024fa <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800249a:	23a4      	movs	r3, #164	; 0xa4
 800249c:	18fb      	adds	r3, r7, r3
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2280      	movs	r2, #128	; 0x80
 80024a2:	4013      	ands	r3, r2
 80024a4:	d00f      	beq.n	80024c6 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80024a6:	23a0      	movs	r3, #160	; 0xa0
 80024a8:	18fb      	adds	r3, r7, r3
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2280      	movs	r2, #128	; 0x80
 80024ae:	4013      	ands	r3, r2
 80024b0:	d009      	beq.n	80024c6 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d01e      	beq.n	80024f8 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	0010      	movs	r0, r2
 80024c2:	4798      	blx	r3
    }
    return;
 80024c4:	e018      	b.n	80024f8 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80024c6:	23a4      	movs	r3, #164	; 0xa4
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2240      	movs	r2, #64	; 0x40
 80024ce:	4013      	ands	r3, r2
 80024d0:	d013      	beq.n	80024fa <HAL_UART_IRQHandler+0x5a2>
 80024d2:	23a0      	movs	r3, #160	; 0xa0
 80024d4:	18fb      	adds	r3, r7, r3
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2240      	movs	r2, #64	; 0x40
 80024da:	4013      	ands	r3, r2
 80024dc:	d00d      	beq.n	80024fa <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	0018      	movs	r0, r3
 80024e2:	f000 fca6 	bl	8002e32 <UART_EndTransmit_IT>
    return;
 80024e6:	e008      	b.n	80024fa <HAL_UART_IRQHandler+0x5a2>
      return;
 80024e8:	46c0      	nop			; (mov r8, r8)
 80024ea:	e006      	b.n	80024fa <HAL_UART_IRQHandler+0x5a2>
    return;
 80024ec:	46c0      	nop			; (mov r8, r8)
 80024ee:	e004      	b.n	80024fa <HAL_UART_IRQHandler+0x5a2>
      return;
 80024f0:	46c0      	nop			; (mov r8, r8)
 80024f2:	e002      	b.n	80024fa <HAL_UART_IRQHandler+0x5a2>
      return;
 80024f4:	46c0      	nop			; (mov r8, r8)
 80024f6:	e000      	b.n	80024fa <HAL_UART_IRQHandler+0x5a2>
    return;
 80024f8:	46c0      	nop			; (mov r8, r8)
  }

}
 80024fa:	46bd      	mov	sp, r7
 80024fc:	b02b      	add	sp, #172	; 0xac
 80024fe:	bd90      	pop	{r4, r7, pc}
 8002500:	fffffeff 	.word	0xfffffeff
 8002504:	fffffedf 	.word	0xfffffedf

08002508 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002510:	46c0      	nop			; (mov r8, r8)
 8002512:	46bd      	mov	sp, r7
 8002514:	b002      	add	sp, #8
 8002516:	bd80      	pop	{r7, pc}

08002518 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002520:	46c0      	nop			; (mov r8, r8)
 8002522:	46bd      	mov	sp, r7
 8002524:	b002      	add	sp, #8
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002530:	46c0      	nop			; (mov r8, r8)
 8002532:	46bd      	mov	sp, r7
 8002534:	b002      	add	sp, #8
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	000a      	movs	r2, r1
 8002542:	1cbb      	adds	r3, r7, #2
 8002544:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	46bd      	mov	sp, r7
 800254a:	b002      	add	sp, #8
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b088      	sub	sp, #32
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002558:	231e      	movs	r3, #30
 800255a:	18fb      	adds	r3, r7, r3
 800255c:	2200      	movs	r2, #0
 800255e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	431a      	orrs	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	4313      	orrs	r3, r2
 8002576:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4aaf      	ldr	r2, [pc, #700]	; (800283c <UART_SetConfig+0x2ec>)
 8002580:	4013      	ands	r3, r2
 8002582:	0019      	movs	r1, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	697a      	ldr	r2, [r7, #20]
 800258a:	430a      	orrs	r2, r1
 800258c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	4aaa      	ldr	r2, [pc, #680]	; (8002840 <UART_SetConfig+0x2f0>)
 8002596:	4013      	ands	r3, r2
 8002598:	0019      	movs	r1, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	4aa1      	ldr	r2, [pc, #644]	; (8002844 <UART_SetConfig+0x2f4>)
 80025be:	4013      	ands	r3, r2
 80025c0:	0019      	movs	r1, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a9d      	ldr	r2, [pc, #628]	; (8002848 <UART_SetConfig+0x2f8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d127      	bne.n	8002626 <UART_SetConfig+0xd6>
 80025d6:	4b9d      	ldr	r3, [pc, #628]	; (800284c <UART_SetConfig+0x2fc>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	2203      	movs	r2, #3
 80025dc:	4013      	ands	r3, r2
 80025de:	2b03      	cmp	r3, #3
 80025e0:	d00d      	beq.n	80025fe <UART_SetConfig+0xae>
 80025e2:	d81b      	bhi.n	800261c <UART_SetConfig+0xcc>
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d014      	beq.n	8002612 <UART_SetConfig+0xc2>
 80025e8:	d818      	bhi.n	800261c <UART_SetConfig+0xcc>
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d002      	beq.n	80025f4 <UART_SetConfig+0xa4>
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d00a      	beq.n	8002608 <UART_SetConfig+0xb8>
 80025f2:	e013      	b.n	800261c <UART_SetConfig+0xcc>
 80025f4:	231f      	movs	r3, #31
 80025f6:	18fb      	adds	r3, r7, r3
 80025f8:	2200      	movs	r2, #0
 80025fa:	701a      	strb	r2, [r3, #0]
 80025fc:	e065      	b.n	80026ca <UART_SetConfig+0x17a>
 80025fe:	231f      	movs	r3, #31
 8002600:	18fb      	adds	r3, r7, r3
 8002602:	2202      	movs	r2, #2
 8002604:	701a      	strb	r2, [r3, #0]
 8002606:	e060      	b.n	80026ca <UART_SetConfig+0x17a>
 8002608:	231f      	movs	r3, #31
 800260a:	18fb      	adds	r3, r7, r3
 800260c:	2204      	movs	r2, #4
 800260e:	701a      	strb	r2, [r3, #0]
 8002610:	e05b      	b.n	80026ca <UART_SetConfig+0x17a>
 8002612:	231f      	movs	r3, #31
 8002614:	18fb      	adds	r3, r7, r3
 8002616:	2208      	movs	r2, #8
 8002618:	701a      	strb	r2, [r3, #0]
 800261a:	e056      	b.n	80026ca <UART_SetConfig+0x17a>
 800261c:	231f      	movs	r3, #31
 800261e:	18fb      	adds	r3, r7, r3
 8002620:	2210      	movs	r2, #16
 8002622:	701a      	strb	r2, [r3, #0]
 8002624:	e051      	b.n	80026ca <UART_SetConfig+0x17a>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a89      	ldr	r2, [pc, #548]	; (8002850 <UART_SetConfig+0x300>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d134      	bne.n	800269a <UART_SetConfig+0x14a>
 8002630:	4b86      	ldr	r3, [pc, #536]	; (800284c <UART_SetConfig+0x2fc>)
 8002632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002634:	23c0      	movs	r3, #192	; 0xc0
 8002636:	029b      	lsls	r3, r3, #10
 8002638:	4013      	ands	r3, r2
 800263a:	22c0      	movs	r2, #192	; 0xc0
 800263c:	0292      	lsls	r2, r2, #10
 800263e:	4293      	cmp	r3, r2
 8002640:	d017      	beq.n	8002672 <UART_SetConfig+0x122>
 8002642:	22c0      	movs	r2, #192	; 0xc0
 8002644:	0292      	lsls	r2, r2, #10
 8002646:	4293      	cmp	r3, r2
 8002648:	d822      	bhi.n	8002690 <UART_SetConfig+0x140>
 800264a:	2280      	movs	r2, #128	; 0x80
 800264c:	0292      	lsls	r2, r2, #10
 800264e:	4293      	cmp	r3, r2
 8002650:	d019      	beq.n	8002686 <UART_SetConfig+0x136>
 8002652:	2280      	movs	r2, #128	; 0x80
 8002654:	0292      	lsls	r2, r2, #10
 8002656:	4293      	cmp	r3, r2
 8002658:	d81a      	bhi.n	8002690 <UART_SetConfig+0x140>
 800265a:	2b00      	cmp	r3, #0
 800265c:	d004      	beq.n	8002668 <UART_SetConfig+0x118>
 800265e:	2280      	movs	r2, #128	; 0x80
 8002660:	0252      	lsls	r2, r2, #9
 8002662:	4293      	cmp	r3, r2
 8002664:	d00a      	beq.n	800267c <UART_SetConfig+0x12c>
 8002666:	e013      	b.n	8002690 <UART_SetConfig+0x140>
 8002668:	231f      	movs	r3, #31
 800266a:	18fb      	adds	r3, r7, r3
 800266c:	2200      	movs	r2, #0
 800266e:	701a      	strb	r2, [r3, #0]
 8002670:	e02b      	b.n	80026ca <UART_SetConfig+0x17a>
 8002672:	231f      	movs	r3, #31
 8002674:	18fb      	adds	r3, r7, r3
 8002676:	2202      	movs	r2, #2
 8002678:	701a      	strb	r2, [r3, #0]
 800267a:	e026      	b.n	80026ca <UART_SetConfig+0x17a>
 800267c:	231f      	movs	r3, #31
 800267e:	18fb      	adds	r3, r7, r3
 8002680:	2204      	movs	r2, #4
 8002682:	701a      	strb	r2, [r3, #0]
 8002684:	e021      	b.n	80026ca <UART_SetConfig+0x17a>
 8002686:	231f      	movs	r3, #31
 8002688:	18fb      	adds	r3, r7, r3
 800268a:	2208      	movs	r2, #8
 800268c:	701a      	strb	r2, [r3, #0]
 800268e:	e01c      	b.n	80026ca <UART_SetConfig+0x17a>
 8002690:	231f      	movs	r3, #31
 8002692:	18fb      	adds	r3, r7, r3
 8002694:	2210      	movs	r2, #16
 8002696:	701a      	strb	r2, [r3, #0]
 8002698:	e017      	b.n	80026ca <UART_SetConfig+0x17a>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a6d      	ldr	r2, [pc, #436]	; (8002854 <UART_SetConfig+0x304>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d104      	bne.n	80026ae <UART_SetConfig+0x15e>
 80026a4:	231f      	movs	r3, #31
 80026a6:	18fb      	adds	r3, r7, r3
 80026a8:	2200      	movs	r2, #0
 80026aa:	701a      	strb	r2, [r3, #0]
 80026ac:	e00d      	b.n	80026ca <UART_SetConfig+0x17a>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a69      	ldr	r2, [pc, #420]	; (8002858 <UART_SetConfig+0x308>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d104      	bne.n	80026c2 <UART_SetConfig+0x172>
 80026b8:	231f      	movs	r3, #31
 80026ba:	18fb      	adds	r3, r7, r3
 80026bc:	2200      	movs	r2, #0
 80026be:	701a      	strb	r2, [r3, #0]
 80026c0:	e003      	b.n	80026ca <UART_SetConfig+0x17a>
 80026c2:	231f      	movs	r3, #31
 80026c4:	18fb      	adds	r3, r7, r3
 80026c6:	2210      	movs	r2, #16
 80026c8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69da      	ldr	r2, [r3, #28]
 80026ce:	2380      	movs	r3, #128	; 0x80
 80026d0:	021b      	lsls	r3, r3, #8
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d15d      	bne.n	8002792 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 80026d6:	231f      	movs	r3, #31
 80026d8:	18fb      	adds	r3, r7, r3
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b08      	cmp	r3, #8
 80026de:	d015      	beq.n	800270c <UART_SetConfig+0x1bc>
 80026e0:	dc18      	bgt.n	8002714 <UART_SetConfig+0x1c4>
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d00d      	beq.n	8002702 <UART_SetConfig+0x1b2>
 80026e6:	dc15      	bgt.n	8002714 <UART_SetConfig+0x1c4>
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d002      	beq.n	80026f2 <UART_SetConfig+0x1a2>
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d005      	beq.n	80026fc <UART_SetConfig+0x1ac>
 80026f0:	e010      	b.n	8002714 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026f2:	f7ff f9bf 	bl	8001a74 <HAL_RCC_GetPCLK1Freq>
 80026f6:	0003      	movs	r3, r0
 80026f8:	61bb      	str	r3, [r7, #24]
        break;
 80026fa:	e012      	b.n	8002722 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026fc:	4b57      	ldr	r3, [pc, #348]	; (800285c <UART_SetConfig+0x30c>)
 80026fe:	61bb      	str	r3, [r7, #24]
        break;
 8002700:	e00f      	b.n	8002722 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002702:	f7ff f92d 	bl	8001960 <HAL_RCC_GetSysClockFreq>
 8002706:	0003      	movs	r3, r0
 8002708:	61bb      	str	r3, [r7, #24]
        break;
 800270a:	e00a      	b.n	8002722 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800270c:	2380      	movs	r3, #128	; 0x80
 800270e:	021b      	lsls	r3, r3, #8
 8002710:	61bb      	str	r3, [r7, #24]
        break;
 8002712:	e006      	b.n	8002722 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002714:	2300      	movs	r3, #0
 8002716:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002718:	231e      	movs	r3, #30
 800271a:	18fb      	adds	r3, r7, r3
 800271c:	2201      	movs	r2, #1
 800271e:	701a      	strb	r2, [r3, #0]
        break;
 8002720:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d100      	bne.n	800272a <UART_SetConfig+0x1da>
 8002728:	e07b      	b.n	8002822 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	005a      	lsls	r2, r3, #1
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	085b      	lsrs	r3, r3, #1
 8002734:	18d2      	adds	r2, r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	0019      	movs	r1, r3
 800273c:	0010      	movs	r0, r2
 800273e:	f7fd fce3 	bl	8000108 <__udivsi3>
 8002742:	0003      	movs	r3, r0
 8002744:	b29b      	uxth	r3, r3
 8002746:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	2b0f      	cmp	r3, #15
 800274c:	d91c      	bls.n	8002788 <UART_SetConfig+0x238>
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	2380      	movs	r3, #128	; 0x80
 8002752:	025b      	lsls	r3, r3, #9
 8002754:	429a      	cmp	r2, r3
 8002756:	d217      	bcs.n	8002788 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	b29a      	uxth	r2, r3
 800275c:	200e      	movs	r0, #14
 800275e:	183b      	adds	r3, r7, r0
 8002760:	210f      	movs	r1, #15
 8002762:	438a      	bics	r2, r1
 8002764:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	085b      	lsrs	r3, r3, #1
 800276a:	b29b      	uxth	r3, r3
 800276c:	2207      	movs	r2, #7
 800276e:	4013      	ands	r3, r2
 8002770:	b299      	uxth	r1, r3
 8002772:	183b      	adds	r3, r7, r0
 8002774:	183a      	adds	r2, r7, r0
 8002776:	8812      	ldrh	r2, [r2, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	183a      	adds	r2, r7, r0
 8002782:	8812      	ldrh	r2, [r2, #0]
 8002784:	60da      	str	r2, [r3, #12]
 8002786:	e04c      	b.n	8002822 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8002788:	231e      	movs	r3, #30
 800278a:	18fb      	adds	r3, r7, r3
 800278c:	2201      	movs	r2, #1
 800278e:	701a      	strb	r2, [r3, #0]
 8002790:	e047      	b.n	8002822 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002792:	231f      	movs	r3, #31
 8002794:	18fb      	adds	r3, r7, r3
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b08      	cmp	r3, #8
 800279a:	d015      	beq.n	80027c8 <UART_SetConfig+0x278>
 800279c:	dc18      	bgt.n	80027d0 <UART_SetConfig+0x280>
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d00d      	beq.n	80027be <UART_SetConfig+0x26e>
 80027a2:	dc15      	bgt.n	80027d0 <UART_SetConfig+0x280>
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d002      	beq.n	80027ae <UART_SetConfig+0x25e>
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d005      	beq.n	80027b8 <UART_SetConfig+0x268>
 80027ac:	e010      	b.n	80027d0 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027ae:	f7ff f961 	bl	8001a74 <HAL_RCC_GetPCLK1Freq>
 80027b2:	0003      	movs	r3, r0
 80027b4:	61bb      	str	r3, [r7, #24]
        break;
 80027b6:	e012      	b.n	80027de <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027b8:	4b28      	ldr	r3, [pc, #160]	; (800285c <UART_SetConfig+0x30c>)
 80027ba:	61bb      	str	r3, [r7, #24]
        break;
 80027bc:	e00f      	b.n	80027de <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027be:	f7ff f8cf 	bl	8001960 <HAL_RCC_GetSysClockFreq>
 80027c2:	0003      	movs	r3, r0
 80027c4:	61bb      	str	r3, [r7, #24]
        break;
 80027c6:	e00a      	b.n	80027de <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027c8:	2380      	movs	r3, #128	; 0x80
 80027ca:	021b      	lsls	r3, r3, #8
 80027cc:	61bb      	str	r3, [r7, #24]
        break;
 80027ce:	e006      	b.n	80027de <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80027d4:	231e      	movs	r3, #30
 80027d6:	18fb      	adds	r3, r7, r3
 80027d8:	2201      	movs	r2, #1
 80027da:	701a      	strb	r2, [r3, #0]
        break;
 80027dc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d01e      	beq.n	8002822 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	085a      	lsrs	r2, r3, #1
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	18d2      	adds	r2, r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	0019      	movs	r1, r3
 80027f4:	0010      	movs	r0, r2
 80027f6:	f7fd fc87 	bl	8000108 <__udivsi3>
 80027fa:	0003      	movs	r3, r0
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	2b0f      	cmp	r3, #15
 8002804:	d909      	bls.n	800281a <UART_SetConfig+0x2ca>
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	2380      	movs	r3, #128	; 0x80
 800280a:	025b      	lsls	r3, r3, #9
 800280c:	429a      	cmp	r2, r3
 800280e:	d204      	bcs.n	800281a <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	60da      	str	r2, [r3, #12]
 8002818:	e003      	b.n	8002822 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 800281a:	231e      	movs	r3, #30
 800281c:	18fb      	adds	r3, r7, r3
 800281e:	2201      	movs	r2, #1
 8002820:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800282e:	231e      	movs	r3, #30
 8002830:	18fb      	adds	r3, r7, r3
 8002832:	781b      	ldrb	r3, [r3, #0]
}
 8002834:	0018      	movs	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	b008      	add	sp, #32
 800283a:	bd80      	pop	{r7, pc}
 800283c:	efff69f3 	.word	0xefff69f3
 8002840:	ffffcfff 	.word	0xffffcfff
 8002844:	fffff4ff 	.word	0xfffff4ff
 8002848:	40013800 	.word	0x40013800
 800284c:	40021000 	.word	0x40021000
 8002850:	40004400 	.word	0x40004400
 8002854:	40004800 	.word	0x40004800
 8002858:	40004c00 	.word	0x40004c00
 800285c:	007a1200 	.word	0x007a1200

08002860 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286c:	2201      	movs	r2, #1
 800286e:	4013      	ands	r3, r2
 8002870:	d00b      	beq.n	800288a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	4a4a      	ldr	r2, [pc, #296]	; (80029a4 <UART_AdvFeatureConfig+0x144>)
 800287a:	4013      	ands	r3, r2
 800287c:	0019      	movs	r1, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	430a      	orrs	r2, r1
 8002888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	2202      	movs	r2, #2
 8002890:	4013      	ands	r3, r2
 8002892:	d00b      	beq.n	80028ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	4a43      	ldr	r2, [pc, #268]	; (80029a8 <UART_AdvFeatureConfig+0x148>)
 800289c:	4013      	ands	r3, r2
 800289e:	0019      	movs	r1, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	2204      	movs	r2, #4
 80028b2:	4013      	ands	r3, r2
 80028b4:	d00b      	beq.n	80028ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	4a3b      	ldr	r2, [pc, #236]	; (80029ac <UART_AdvFeatureConfig+0x14c>)
 80028be:	4013      	ands	r3, r2
 80028c0:	0019      	movs	r1, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	2208      	movs	r2, #8
 80028d4:	4013      	ands	r3, r2
 80028d6:	d00b      	beq.n	80028f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	4a34      	ldr	r2, [pc, #208]	; (80029b0 <UART_AdvFeatureConfig+0x150>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	0019      	movs	r1, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	2210      	movs	r2, #16
 80028f6:	4013      	ands	r3, r2
 80028f8:	d00b      	beq.n	8002912 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	4a2c      	ldr	r2, [pc, #176]	; (80029b4 <UART_AdvFeatureConfig+0x154>)
 8002902:	4013      	ands	r3, r2
 8002904:	0019      	movs	r1, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	430a      	orrs	r2, r1
 8002910:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	2220      	movs	r2, #32
 8002918:	4013      	ands	r3, r2
 800291a:	d00b      	beq.n	8002934 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	4a25      	ldr	r2, [pc, #148]	; (80029b8 <UART_AdvFeatureConfig+0x158>)
 8002924:	4013      	ands	r3, r2
 8002926:	0019      	movs	r1, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	430a      	orrs	r2, r1
 8002932:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	2240      	movs	r2, #64	; 0x40
 800293a:	4013      	ands	r3, r2
 800293c:	d01d      	beq.n	800297a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	4a1d      	ldr	r2, [pc, #116]	; (80029bc <UART_AdvFeatureConfig+0x15c>)
 8002946:	4013      	ands	r3, r2
 8002948:	0019      	movs	r1, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800295a:	2380      	movs	r3, #128	; 0x80
 800295c:	035b      	lsls	r3, r3, #13
 800295e:	429a      	cmp	r2, r3
 8002960:	d10b      	bne.n	800297a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	4a15      	ldr	r2, [pc, #84]	; (80029c0 <UART_AdvFeatureConfig+0x160>)
 800296a:	4013      	ands	r3, r2
 800296c:	0019      	movs	r1, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	2280      	movs	r2, #128	; 0x80
 8002980:	4013      	ands	r3, r2
 8002982:	d00b      	beq.n	800299c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	4a0e      	ldr	r2, [pc, #56]	; (80029c4 <UART_AdvFeatureConfig+0x164>)
 800298c:	4013      	ands	r3, r2
 800298e:	0019      	movs	r1, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	605a      	str	r2, [r3, #4]
  }
}
 800299c:	46c0      	nop			; (mov r8, r8)
 800299e:	46bd      	mov	sp, r7
 80029a0:	b002      	add	sp, #8
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	fffdffff 	.word	0xfffdffff
 80029a8:	fffeffff 	.word	0xfffeffff
 80029ac:	fffbffff 	.word	0xfffbffff
 80029b0:	ffff7fff 	.word	0xffff7fff
 80029b4:	ffffefff 	.word	0xffffefff
 80029b8:	ffffdfff 	.word	0xffffdfff
 80029bc:	ffefffff 	.word	0xffefffff
 80029c0:	ff9fffff 	.word	0xff9fffff
 80029c4:	fff7ffff 	.word	0xfff7ffff

080029c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af02      	add	r7, sp, #8
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2280      	movs	r2, #128	; 0x80
 80029d4:	2100      	movs	r1, #0
 80029d6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80029d8:	f7fe f842 	bl	8000a60 <HAL_GetTick>
 80029dc:	0003      	movs	r3, r0
 80029de:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2208      	movs	r2, #8
 80029e8:	4013      	ands	r3, r2
 80029ea:	2b08      	cmp	r3, #8
 80029ec:	d10c      	bne.n	8002a08 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2280      	movs	r2, #128	; 0x80
 80029f2:	0391      	lsls	r1, r2, #14
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	4a17      	ldr	r2, [pc, #92]	; (8002a54 <UART_CheckIdleState+0x8c>)
 80029f8:	9200      	str	r2, [sp, #0]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f000 f82c 	bl	8002a58 <UART_WaitOnFlagUntilTimeout>
 8002a00:	1e03      	subs	r3, r0, #0
 8002a02:	d001      	beq.n	8002a08 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e021      	b.n	8002a4c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2204      	movs	r2, #4
 8002a10:	4013      	ands	r3, r2
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d10c      	bne.n	8002a30 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2280      	movs	r2, #128	; 0x80
 8002a1a:	03d1      	lsls	r1, r2, #15
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	4a0d      	ldr	r2, [pc, #52]	; (8002a54 <UART_CheckIdleState+0x8c>)
 8002a20:	9200      	str	r2, [sp, #0]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f000 f818 	bl	8002a58 <UART_WaitOnFlagUntilTimeout>
 8002a28:	1e03      	subs	r3, r0, #0
 8002a2a:	d001      	beq.n	8002a30 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e00d      	b.n	8002a4c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2220      	movs	r2, #32
 8002a34:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2220      	movs	r2, #32
 8002a3a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2274      	movs	r2, #116	; 0x74
 8002a46:	2100      	movs	r1, #0
 8002a48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	b004      	add	sp, #16
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	01ffffff 	.word	0x01ffffff

08002a58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b094      	sub	sp, #80	; 0x50
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	603b      	str	r3, [r7, #0]
 8002a64:	1dfb      	adds	r3, r7, #7
 8002a66:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a68:	e0a3      	b.n	8002bb2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	d100      	bne.n	8002a72 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002a70:	e09f      	b.n	8002bb2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a72:	f7fd fff5 	bl	8000a60 <HAL_GetTick>
 8002a76:	0002      	movs	r2, r0
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d302      	bcc.n	8002a88 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d13d      	bne.n	8002b04 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a88:	f3ef 8310 	mrs	r3, PRIMASK
 8002a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a90:	647b      	str	r3, [r7, #68]	; 0x44
 8002a92:	2301      	movs	r3, #1
 8002a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a98:	f383 8810 	msr	PRIMASK, r3
}
 8002a9c:	46c0      	nop			; (mov r8, r8)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	494c      	ldr	r1, [pc, #304]	; (8002bdc <UART_WaitOnFlagUntilTimeout+0x184>)
 8002aaa:	400a      	ands	r2, r1
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ab0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab4:	f383 8810 	msr	PRIMASK, r3
}
 8002ab8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aba:	f3ef 8310 	mrs	r3, PRIMASK
 8002abe:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ac2:	643b      	str	r3, [r7, #64]	; 0x40
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aca:	f383 8810 	msr	PRIMASK, r3
}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689a      	ldr	r2, [r3, #8]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2101      	movs	r1, #1
 8002adc:	438a      	bics	r2, r1
 8002ade:	609a      	str	r2, [r3, #8]
 8002ae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ae6:	f383 8810 	msr	PRIMASK, r3
}
 8002aea:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2220      	movs	r2, #32
 8002af0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2220      	movs	r2, #32
 8002af6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2274      	movs	r2, #116	; 0x74
 8002afc:	2100      	movs	r1, #0
 8002afe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e067      	b.n	8002bd4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2204      	movs	r2, #4
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d050      	beq.n	8002bb2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	69da      	ldr	r2, [r3, #28]
 8002b16:	2380      	movs	r3, #128	; 0x80
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	401a      	ands	r2, r3
 8002b1c:	2380      	movs	r3, #128	; 0x80
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d146      	bne.n	8002bb2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2280      	movs	r2, #128	; 0x80
 8002b2a:	0112      	lsls	r2, r2, #4
 8002b2c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b2e:	f3ef 8310 	mrs	r3, PRIMASK
 8002b32:	613b      	str	r3, [r7, #16]
  return(result);
 8002b34:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b38:	2301      	movs	r3, #1
 8002b3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f383 8810 	msr	PRIMASK, r3
}
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4923      	ldr	r1, [pc, #140]	; (8002bdc <UART_WaitOnFlagUntilTimeout+0x184>)
 8002b50:	400a      	ands	r2, r1
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b56:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	f383 8810 	msr	PRIMASK, r3
}
 8002b5e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b60:	f3ef 8310 	mrs	r3, PRIMASK
 8002b64:	61fb      	str	r3, [r7, #28]
  return(result);
 8002b66:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b68:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	f383 8810 	msr	PRIMASK, r3
}
 8002b74:	46c0      	nop			; (mov r8, r8)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2101      	movs	r1, #1
 8002b82:	438a      	bics	r2, r1
 8002b84:	609a      	str	r2, [r3, #8]
 8002b86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b88:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	f383 8810 	msr	PRIMASK, r3
}
 8002b90:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2220      	movs	r2, #32
 8002b96:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2280      	movs	r2, #128	; 0x80
 8002ba2:	2120      	movs	r1, #32
 8002ba4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2274      	movs	r2, #116	; 0x74
 8002baa:	2100      	movs	r1, #0
 8002bac:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e010      	b.n	8002bd4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	425a      	negs	r2, r3
 8002bc2:	4153      	adcs	r3, r2
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	001a      	movs	r2, r3
 8002bc8:	1dfb      	adds	r3, r7, #7
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d100      	bne.n	8002bd2 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002bd0:	e74b      	b.n	8002a6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	b014      	add	sp, #80	; 0x50
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	fffffe5f 	.word	0xfffffe5f

08002be0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08c      	sub	sp, #48	; 0x30
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	1dbb      	adds	r3, r7, #6
 8002bec:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	68ba      	ldr	r2, [r7, #8]
 8002bf2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	1dba      	adds	r2, r7, #6
 8002bf8:	2158      	movs	r1, #88	; 0x58
 8002bfa:	8812      	ldrh	r2, [r2, #0]
 8002bfc:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	1dba      	adds	r2, r7, #6
 8002c02:	215a      	movs	r1, #90	; 0x5a
 8002c04:	8812      	ldrh	r2, [r2, #0]
 8002c06:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	2380      	movs	r3, #128	; 0x80
 8002c14:	015b      	lsls	r3, r3, #5
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d10d      	bne.n	8002c36 <UART_Start_Receive_IT+0x56>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d104      	bne.n	8002c2c <UART_Start_Receive_IT+0x4c>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	225c      	movs	r2, #92	; 0x5c
 8002c26:	4943      	ldr	r1, [pc, #268]	; (8002d34 <UART_Start_Receive_IT+0x154>)
 8002c28:	5299      	strh	r1, [r3, r2]
 8002c2a:	e02e      	b.n	8002c8a <UART_Start_Receive_IT+0xaa>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	225c      	movs	r2, #92	; 0x5c
 8002c30:	21ff      	movs	r1, #255	; 0xff
 8002c32:	5299      	strh	r1, [r3, r2]
 8002c34:	e029      	b.n	8002c8a <UART_Start_Receive_IT+0xaa>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10d      	bne.n	8002c5a <UART_Start_Receive_IT+0x7a>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d104      	bne.n	8002c50 <UART_Start_Receive_IT+0x70>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	225c      	movs	r2, #92	; 0x5c
 8002c4a:	21ff      	movs	r1, #255	; 0xff
 8002c4c:	5299      	strh	r1, [r3, r2]
 8002c4e:	e01c      	b.n	8002c8a <UART_Start_Receive_IT+0xaa>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	225c      	movs	r2, #92	; 0x5c
 8002c54:	217f      	movs	r1, #127	; 0x7f
 8002c56:	5299      	strh	r1, [r3, r2]
 8002c58:	e017      	b.n	8002c8a <UART_Start_Receive_IT+0xaa>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	2380      	movs	r3, #128	; 0x80
 8002c60:	055b      	lsls	r3, r3, #21
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d10d      	bne.n	8002c82 <UART_Start_Receive_IT+0xa2>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d104      	bne.n	8002c78 <UART_Start_Receive_IT+0x98>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	225c      	movs	r2, #92	; 0x5c
 8002c72:	217f      	movs	r1, #127	; 0x7f
 8002c74:	5299      	strh	r1, [r3, r2]
 8002c76:	e008      	b.n	8002c8a <UART_Start_Receive_IT+0xaa>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	225c      	movs	r2, #92	; 0x5c
 8002c7c:	213f      	movs	r1, #63	; 0x3f
 8002c7e:	5299      	strh	r1, [r3, r2]
 8002c80:	e003      	b.n	8002c8a <UART_Start_Receive_IT+0xaa>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	225c      	movs	r2, #92	; 0x5c
 8002c86:	2100      	movs	r1, #0
 8002c88:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2280      	movs	r2, #128	; 0x80
 8002c8e:	2100      	movs	r1, #0
 8002c90:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2222      	movs	r2, #34	; 0x22
 8002c96:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c98:	f3ef 8310 	mrs	r3, PRIMASK
 8002c9c:	61fb      	str	r3, [r7, #28]
  return(result);
 8002c9e:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	f383 8810 	msr	PRIMASK, r3
}
 8002cac:	46c0      	nop			; (mov r8, r8)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2101      	movs	r1, #1
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	609a      	str	r2, [r3, #8]
 8002cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	f383 8810 	msr	PRIMASK, r3
}
 8002cc8:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	689a      	ldr	r2, [r3, #8]
 8002cce:	2380      	movs	r3, #128	; 0x80
 8002cd0:	015b      	lsls	r3, r3, #5
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d107      	bne.n	8002ce6 <UART_Start_Receive_IT+0x106>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d103      	bne.n	8002ce6 <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	4a15      	ldr	r2, [pc, #84]	; (8002d38 <UART_Start_Receive_IT+0x158>)
 8002ce2:	665a      	str	r2, [r3, #100]	; 0x64
 8002ce4:	e002      	b.n	8002cec <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	4a14      	ldr	r2, [pc, #80]	; (8002d3c <UART_Start_Receive_IT+0x15c>)
 8002cea:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2274      	movs	r2, #116	; 0x74
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cf4:	f3ef 8310 	mrs	r3, PRIMASK
 8002cf8:	613b      	str	r3, [r7, #16]
  return(result);
 8002cfa:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cfe:	2301      	movs	r3, #1
 8002d00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f383 8810 	msr	PRIMASK, r3
}
 8002d08:	46c0      	nop			; (mov r8, r8)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2190      	movs	r1, #144	; 0x90
 8002d16:	0049      	lsls	r1, r1, #1
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	f383 8810 	msr	PRIMASK, r3
}
 8002d26:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	b00c      	add	sp, #48	; 0x30
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	46c0      	nop			; (mov r8, r8)
 8002d34:	000001ff 	.word	0x000001ff
 8002d38:	08002ff1 	.word	0x08002ff1
 8002d3c:	08002e89 	.word	0x08002e89

08002d40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b08e      	sub	sp, #56	; 0x38
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d48:	f3ef 8310 	mrs	r3, PRIMASK
 8002d4c:	617b      	str	r3, [r7, #20]
  return(result);
 8002d4e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d50:	637b      	str	r3, [r7, #52]	; 0x34
 8002d52:	2301      	movs	r3, #1
 8002d54:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	f383 8810 	msr	PRIMASK, r3
}
 8002d5c:	46c0      	nop			; (mov r8, r8)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4925      	ldr	r1, [pc, #148]	; (8002e00 <UART_EndRxTransfer+0xc0>)
 8002d6a:	400a      	ands	r2, r1
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	f383 8810 	msr	PRIMASK, r3
}
 8002d78:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d7a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d7e:	623b      	str	r3, [r7, #32]
  return(result);
 8002d80:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d82:	633b      	str	r3, [r7, #48]	; 0x30
 8002d84:	2301      	movs	r3, #1
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	f383 8810 	msr	PRIMASK, r3
}
 8002d8e:	46c0      	nop			; (mov r8, r8)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	438a      	bics	r2, r1
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da6:	f383 8810 	msr	PRIMASK, r3
}
 8002daa:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d118      	bne.n	8002de6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002db4:	f3ef 8310 	mrs	r3, PRIMASK
 8002db8:	60bb      	str	r3, [r7, #8]
  return(result);
 8002dba:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f383 8810 	msr	PRIMASK, r3
}
 8002dc8:	46c0      	nop			; (mov r8, r8)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2110      	movs	r1, #16
 8002dd6:	438a      	bics	r2, r1
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ddc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	f383 8810 	msr	PRIMASK, r3
}
 8002de4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2220      	movs	r2, #32
 8002dea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002df8:	46c0      	nop			; (mov r8, r8)
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	b00e      	add	sp, #56	; 0x38
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	fffffedf 	.word	0xfffffedf

08002e04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	225a      	movs	r2, #90	; 0x5a
 8002e16:	2100      	movs	r1, #0
 8002e18:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2252      	movs	r2, #82	; 0x52
 8002e1e:	2100      	movs	r1, #0
 8002e20:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	0018      	movs	r0, r3
 8002e26:	f7ff fb7f 	bl	8002528 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	b004      	add	sp, #16
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b086      	sub	sp, #24
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e3a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e3e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e40:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	2301      	movs	r3, #1
 8002e46:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f383 8810 	msr	PRIMASK, r3
}
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2140      	movs	r1, #64	; 0x40
 8002e5c:	438a      	bics	r2, r1
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	f383 8810 	msr	PRIMASK, r3
}
 8002e6a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f7ff fb44 	bl	8002508 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e80:	46c0      	nop			; (mov r8, r8)
 8002e82:	46bd      	mov	sp, r7
 8002e84:	b006      	add	sp, #24
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b090      	sub	sp, #64	; 0x40
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8002e90:	203e      	movs	r0, #62	; 0x3e
 8002e92:	183b      	adds	r3, r7, r0
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	215c      	movs	r1, #92	; 0x5c
 8002e98:	5a52      	ldrh	r2, [r2, r1]
 8002e9a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ea0:	2b22      	cmp	r3, #34	; 0x22
 8002ea2:	d000      	beq.n	8002ea6 <UART_RxISR_8BIT+0x1e>
 8002ea4:	e095      	b.n	8002fd2 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	213c      	movs	r1, #60	; 0x3c
 8002eac:	187b      	adds	r3, r7, r1
 8002eae:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002eb0:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002eb2:	187b      	adds	r3, r7, r1
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	183b      	adds	r3, r7, r0
 8002eba:	881b      	ldrh	r3, [r3, #0]
 8002ebc:	b2d9      	uxtb	r1, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec2:	400a      	ands	r2, r1
 8002ec4:	b2d2      	uxtb	r2, r2
 8002ec6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ecc:	1c5a      	adds	r2, r3, #1
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	225a      	movs	r2, #90	; 0x5a
 8002ed6:	5a9b      	ldrh	r3, [r3, r2]
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b299      	uxth	r1, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	225a      	movs	r2, #90	; 0x5a
 8002ee2:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	225a      	movs	r2, #90	; 0x5a
 8002ee8:	5a9b      	ldrh	r3, [r3, r2]
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d178      	bne.n	8002fe2 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ef0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ef4:	61bb      	str	r3, [r7, #24]
  return(result);
 8002ef6:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ef8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002efa:	2301      	movs	r3, #1
 8002efc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	f383 8810 	msr	PRIMASK, r3
}
 8002f04:	46c0      	nop			; (mov r8, r8)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4936      	ldr	r1, [pc, #216]	; (8002fec <UART_RxISR_8BIT+0x164>)
 8002f12:	400a      	ands	r2, r1
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f18:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
 8002f1c:	f383 8810 	msr	PRIMASK, r3
}
 8002f20:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f22:	f3ef 8310 	mrs	r3, PRIMASK
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f2a:	637b      	str	r3, [r7, #52]	; 0x34
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f32:	f383 8810 	msr	PRIMASK, r3
}
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2101      	movs	r1, #1
 8002f44:	438a      	bics	r2, r1
 8002f46:	609a      	str	r2, [r3, #8]
 8002f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f4e:	f383 8810 	msr	PRIMASK, r3
}
 8002f52:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2220      	movs	r2, #32
 8002f58:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d12f      	bne.n	8002fc8 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f6e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f72:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f74:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f76:	633b      	str	r3, [r7, #48]	; 0x30
 8002f78:	2301      	movs	r3, #1
 8002f7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	f383 8810 	msr	PRIMASK, r3
}
 8002f82:	46c0      	nop			; (mov r8, r8)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2110      	movs	r1, #16
 8002f90:	438a      	bics	r2, r1
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	f383 8810 	msr	PRIMASK, r3
}
 8002f9e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	2210      	movs	r2, #16
 8002fa8:	4013      	ands	r3, r2
 8002faa:	2b10      	cmp	r3, #16
 8002fac:	d103      	bne.n	8002fb6 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2210      	movs	r2, #16
 8002fb4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2258      	movs	r2, #88	; 0x58
 8002fba:	5a9a      	ldrh	r2, [r3, r2]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	0011      	movs	r1, r2
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	f7ff fab9 	bl	8002538 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002fc6:	e00c      	b.n	8002fe2 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	0018      	movs	r0, r3
 8002fcc:	f7ff faa4 	bl	8002518 <HAL_UART_RxCpltCallback>
}
 8002fd0:	e007      	b.n	8002fe2 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	699a      	ldr	r2, [r3, #24]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2108      	movs	r1, #8
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	619a      	str	r2, [r3, #24]
}
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	b010      	add	sp, #64	; 0x40
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	fffffedf 	.word	0xfffffedf

08002ff0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b090      	sub	sp, #64	; 0x40
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002ff8:	203e      	movs	r0, #62	; 0x3e
 8002ffa:	183b      	adds	r3, r7, r0
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	215c      	movs	r1, #92	; 0x5c
 8003000:	5a52      	ldrh	r2, [r2, r1]
 8003002:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003008:	2b22      	cmp	r3, #34	; 0x22
 800300a:	d000      	beq.n	800300e <UART_RxISR_16BIT+0x1e>
 800300c:	e095      	b.n	800313a <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	213c      	movs	r1, #60	; 0x3c
 8003014:	187b      	adds	r3, r7, r1
 8003016:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003018:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301e:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8003020:	187b      	adds	r3, r7, r1
 8003022:	183a      	adds	r2, r7, r0
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	8812      	ldrh	r2, [r2, #0]
 8003028:	4013      	ands	r3, r2
 800302a:	b29a      	uxth	r2, r3
 800302c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800302e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003034:	1c9a      	adds	r2, r3, #2
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	225a      	movs	r2, #90	; 0x5a
 800303e:	5a9b      	ldrh	r3, [r3, r2]
 8003040:	b29b      	uxth	r3, r3
 8003042:	3b01      	subs	r3, #1
 8003044:	b299      	uxth	r1, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	225a      	movs	r2, #90	; 0x5a
 800304a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	225a      	movs	r2, #90	; 0x5a
 8003050:	5a9b      	ldrh	r3, [r3, r2]
 8003052:	b29b      	uxth	r3, r3
 8003054:	2b00      	cmp	r3, #0
 8003056:	d178      	bne.n	800314a <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003058:	f3ef 8310 	mrs	r3, PRIMASK
 800305c:	617b      	str	r3, [r7, #20]
  return(result);
 800305e:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003060:	637b      	str	r3, [r7, #52]	; 0x34
 8003062:	2301      	movs	r3, #1
 8003064:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	f383 8810 	msr	PRIMASK, r3
}
 800306c:	46c0      	nop			; (mov r8, r8)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4936      	ldr	r1, [pc, #216]	; (8003154 <UART_RxISR_16BIT+0x164>)
 800307a:	400a      	ands	r2, r1
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003080:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	f383 8810 	msr	PRIMASK, r3
}
 8003088:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800308a:	f3ef 8310 	mrs	r3, PRIMASK
 800308e:	623b      	str	r3, [r7, #32]
  return(result);
 8003090:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003092:	633b      	str	r3, [r7, #48]	; 0x30
 8003094:	2301      	movs	r3, #1
 8003096:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	f383 8810 	msr	PRIMASK, r3
}
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689a      	ldr	r2, [r3, #8]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2101      	movs	r1, #1
 80030ac:	438a      	bics	r2, r1
 80030ae:	609a      	str	r2, [r3, #8]
 80030b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b6:	f383 8810 	msr	PRIMASK, r3
}
 80030ba:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2220      	movs	r2, #32
 80030c0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d12f      	bne.n	8003130 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030d6:	f3ef 8310 	mrs	r3, PRIMASK
 80030da:	60bb      	str	r3, [r7, #8]
  return(result);
 80030dc:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030e0:	2301      	movs	r3, #1
 80030e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f383 8810 	msr	PRIMASK, r3
}
 80030ea:	46c0      	nop			; (mov r8, r8)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2110      	movs	r1, #16
 80030f8:	438a      	bics	r2, r1
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	f383 8810 	msr	PRIMASK, r3
}
 8003106:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	2210      	movs	r2, #16
 8003110:	4013      	ands	r3, r2
 8003112:	2b10      	cmp	r3, #16
 8003114:	d103      	bne.n	800311e <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2210      	movs	r2, #16
 800311c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2258      	movs	r2, #88	; 0x58
 8003122:	5a9a      	ldrh	r2, [r3, r2]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	0011      	movs	r1, r2
 8003128:	0018      	movs	r0, r3
 800312a:	f7ff fa05 	bl	8002538 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800312e:	e00c      	b.n	800314a <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	0018      	movs	r0, r3
 8003134:	f7ff f9f0 	bl	8002518 <HAL_UART_RxCpltCallback>
}
 8003138:	e007      	b.n	800314a <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	699a      	ldr	r2, [r3, #24]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2108      	movs	r1, #8
 8003146:	430a      	orrs	r2, r1
 8003148:	619a      	str	r2, [r3, #24]
}
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	46bd      	mov	sp, r7
 800314e:	b010      	add	sp, #64	; 0x40
 8003150:	bd80      	pop	{r7, pc}
 8003152:	46c0      	nop			; (mov r8, r8)
 8003154:	fffffedf 	.word	0xfffffedf

08003158 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003160:	46c0      	nop			; (mov r8, r8)
 8003162:	46bd      	mov	sp, r7
 8003164:	b002      	add	sp, #8
 8003166:	bd80      	pop	{r7, pc}

08003168 <__errno>:
 8003168:	4b01      	ldr	r3, [pc, #4]	; (8003170 <__errno+0x8>)
 800316a:	6818      	ldr	r0, [r3, #0]
 800316c:	4770      	bx	lr
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	20000030 	.word	0x20000030

08003174 <__sflush_r>:
 8003174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003176:	898b      	ldrh	r3, [r1, #12]
 8003178:	0005      	movs	r5, r0
 800317a:	000c      	movs	r4, r1
 800317c:	071a      	lsls	r2, r3, #28
 800317e:	d45f      	bmi.n	8003240 <__sflush_r+0xcc>
 8003180:	684a      	ldr	r2, [r1, #4]
 8003182:	2a00      	cmp	r2, #0
 8003184:	dc04      	bgt.n	8003190 <__sflush_r+0x1c>
 8003186:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003188:	2a00      	cmp	r2, #0
 800318a:	dc01      	bgt.n	8003190 <__sflush_r+0x1c>
 800318c:	2000      	movs	r0, #0
 800318e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003190:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003192:	2f00      	cmp	r7, #0
 8003194:	d0fa      	beq.n	800318c <__sflush_r+0x18>
 8003196:	2200      	movs	r2, #0
 8003198:	2180      	movs	r1, #128	; 0x80
 800319a:	682e      	ldr	r6, [r5, #0]
 800319c:	602a      	str	r2, [r5, #0]
 800319e:	001a      	movs	r2, r3
 80031a0:	0149      	lsls	r1, r1, #5
 80031a2:	400a      	ands	r2, r1
 80031a4:	420b      	tst	r3, r1
 80031a6:	d034      	beq.n	8003212 <__sflush_r+0x9e>
 80031a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80031aa:	89a3      	ldrh	r3, [r4, #12]
 80031ac:	075b      	lsls	r3, r3, #29
 80031ae:	d506      	bpl.n	80031be <__sflush_r+0x4a>
 80031b0:	6863      	ldr	r3, [r4, #4]
 80031b2:	1ac0      	subs	r0, r0, r3
 80031b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <__sflush_r+0x4a>
 80031ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031bc:	1ac0      	subs	r0, r0, r3
 80031be:	0002      	movs	r2, r0
 80031c0:	6a21      	ldr	r1, [r4, #32]
 80031c2:	2300      	movs	r3, #0
 80031c4:	0028      	movs	r0, r5
 80031c6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80031c8:	47b8      	blx	r7
 80031ca:	89a1      	ldrh	r1, [r4, #12]
 80031cc:	1c43      	adds	r3, r0, #1
 80031ce:	d106      	bne.n	80031de <__sflush_r+0x6a>
 80031d0:	682b      	ldr	r3, [r5, #0]
 80031d2:	2b1d      	cmp	r3, #29
 80031d4:	d831      	bhi.n	800323a <__sflush_r+0xc6>
 80031d6:	4a2c      	ldr	r2, [pc, #176]	; (8003288 <__sflush_r+0x114>)
 80031d8:	40da      	lsrs	r2, r3
 80031da:	07d3      	lsls	r3, r2, #31
 80031dc:	d52d      	bpl.n	800323a <__sflush_r+0xc6>
 80031de:	2300      	movs	r3, #0
 80031e0:	6063      	str	r3, [r4, #4]
 80031e2:	6923      	ldr	r3, [r4, #16]
 80031e4:	6023      	str	r3, [r4, #0]
 80031e6:	04cb      	lsls	r3, r1, #19
 80031e8:	d505      	bpl.n	80031f6 <__sflush_r+0x82>
 80031ea:	1c43      	adds	r3, r0, #1
 80031ec:	d102      	bne.n	80031f4 <__sflush_r+0x80>
 80031ee:	682b      	ldr	r3, [r5, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d100      	bne.n	80031f6 <__sflush_r+0x82>
 80031f4:	6560      	str	r0, [r4, #84]	; 0x54
 80031f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80031f8:	602e      	str	r6, [r5, #0]
 80031fa:	2900      	cmp	r1, #0
 80031fc:	d0c6      	beq.n	800318c <__sflush_r+0x18>
 80031fe:	0023      	movs	r3, r4
 8003200:	3344      	adds	r3, #68	; 0x44
 8003202:	4299      	cmp	r1, r3
 8003204:	d002      	beq.n	800320c <__sflush_r+0x98>
 8003206:	0028      	movs	r0, r5
 8003208:	f000 f9c8 	bl	800359c <_free_r>
 800320c:	2000      	movs	r0, #0
 800320e:	6360      	str	r0, [r4, #52]	; 0x34
 8003210:	e7bd      	b.n	800318e <__sflush_r+0x1a>
 8003212:	2301      	movs	r3, #1
 8003214:	0028      	movs	r0, r5
 8003216:	6a21      	ldr	r1, [r4, #32]
 8003218:	47b8      	blx	r7
 800321a:	1c43      	adds	r3, r0, #1
 800321c:	d1c5      	bne.n	80031aa <__sflush_r+0x36>
 800321e:	682b      	ldr	r3, [r5, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0c2      	beq.n	80031aa <__sflush_r+0x36>
 8003224:	2b1d      	cmp	r3, #29
 8003226:	d001      	beq.n	800322c <__sflush_r+0xb8>
 8003228:	2b16      	cmp	r3, #22
 800322a:	d101      	bne.n	8003230 <__sflush_r+0xbc>
 800322c:	602e      	str	r6, [r5, #0]
 800322e:	e7ad      	b.n	800318c <__sflush_r+0x18>
 8003230:	2340      	movs	r3, #64	; 0x40
 8003232:	89a2      	ldrh	r2, [r4, #12]
 8003234:	4313      	orrs	r3, r2
 8003236:	81a3      	strh	r3, [r4, #12]
 8003238:	e7a9      	b.n	800318e <__sflush_r+0x1a>
 800323a:	2340      	movs	r3, #64	; 0x40
 800323c:	430b      	orrs	r3, r1
 800323e:	e7fa      	b.n	8003236 <__sflush_r+0xc2>
 8003240:	690f      	ldr	r7, [r1, #16]
 8003242:	2f00      	cmp	r7, #0
 8003244:	d0a2      	beq.n	800318c <__sflush_r+0x18>
 8003246:	680a      	ldr	r2, [r1, #0]
 8003248:	600f      	str	r7, [r1, #0]
 800324a:	1bd2      	subs	r2, r2, r7
 800324c:	9201      	str	r2, [sp, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	079b      	lsls	r3, r3, #30
 8003252:	d100      	bne.n	8003256 <__sflush_r+0xe2>
 8003254:	694a      	ldr	r2, [r1, #20]
 8003256:	60a2      	str	r2, [r4, #8]
 8003258:	9b01      	ldr	r3, [sp, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	dc00      	bgt.n	8003260 <__sflush_r+0xec>
 800325e:	e795      	b.n	800318c <__sflush_r+0x18>
 8003260:	003a      	movs	r2, r7
 8003262:	0028      	movs	r0, r5
 8003264:	9b01      	ldr	r3, [sp, #4]
 8003266:	6a21      	ldr	r1, [r4, #32]
 8003268:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800326a:	47b0      	blx	r6
 800326c:	2800      	cmp	r0, #0
 800326e:	dc06      	bgt.n	800327e <__sflush_r+0x10a>
 8003270:	2340      	movs	r3, #64	; 0x40
 8003272:	2001      	movs	r0, #1
 8003274:	89a2      	ldrh	r2, [r4, #12]
 8003276:	4240      	negs	r0, r0
 8003278:	4313      	orrs	r3, r2
 800327a:	81a3      	strh	r3, [r4, #12]
 800327c:	e787      	b.n	800318e <__sflush_r+0x1a>
 800327e:	9b01      	ldr	r3, [sp, #4]
 8003280:	183f      	adds	r7, r7, r0
 8003282:	1a1b      	subs	r3, r3, r0
 8003284:	9301      	str	r3, [sp, #4]
 8003286:	e7e7      	b.n	8003258 <__sflush_r+0xe4>
 8003288:	20400001 	.word	0x20400001

0800328c <_fflush_r>:
 800328c:	690b      	ldr	r3, [r1, #16]
 800328e:	b570      	push	{r4, r5, r6, lr}
 8003290:	0005      	movs	r5, r0
 8003292:	000c      	movs	r4, r1
 8003294:	2b00      	cmp	r3, #0
 8003296:	d102      	bne.n	800329e <_fflush_r+0x12>
 8003298:	2500      	movs	r5, #0
 800329a:	0028      	movs	r0, r5
 800329c:	bd70      	pop	{r4, r5, r6, pc}
 800329e:	2800      	cmp	r0, #0
 80032a0:	d004      	beq.n	80032ac <_fflush_r+0x20>
 80032a2:	6983      	ldr	r3, [r0, #24]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <_fflush_r+0x20>
 80032a8:	f000 f8a8 	bl	80033fc <__sinit>
 80032ac:	4b14      	ldr	r3, [pc, #80]	; (8003300 <_fflush_r+0x74>)
 80032ae:	429c      	cmp	r4, r3
 80032b0:	d11b      	bne.n	80032ea <_fflush_r+0x5e>
 80032b2:	686c      	ldr	r4, [r5, #4]
 80032b4:	220c      	movs	r2, #12
 80032b6:	5ea3      	ldrsh	r3, [r4, r2]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0ed      	beq.n	8003298 <_fflush_r+0xc>
 80032bc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80032be:	07d2      	lsls	r2, r2, #31
 80032c0:	d404      	bmi.n	80032cc <_fflush_r+0x40>
 80032c2:	059b      	lsls	r3, r3, #22
 80032c4:	d402      	bmi.n	80032cc <_fflush_r+0x40>
 80032c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032c8:	f000 f95d 	bl	8003586 <__retarget_lock_acquire_recursive>
 80032cc:	0028      	movs	r0, r5
 80032ce:	0021      	movs	r1, r4
 80032d0:	f7ff ff50 	bl	8003174 <__sflush_r>
 80032d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032d6:	0005      	movs	r5, r0
 80032d8:	07db      	lsls	r3, r3, #31
 80032da:	d4de      	bmi.n	800329a <_fflush_r+0xe>
 80032dc:	89a3      	ldrh	r3, [r4, #12]
 80032de:	059b      	lsls	r3, r3, #22
 80032e0:	d4db      	bmi.n	800329a <_fflush_r+0xe>
 80032e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032e4:	f000 f950 	bl	8003588 <__retarget_lock_release_recursive>
 80032e8:	e7d7      	b.n	800329a <_fflush_r+0xe>
 80032ea:	4b06      	ldr	r3, [pc, #24]	; (8003304 <_fflush_r+0x78>)
 80032ec:	429c      	cmp	r4, r3
 80032ee:	d101      	bne.n	80032f4 <_fflush_r+0x68>
 80032f0:	68ac      	ldr	r4, [r5, #8]
 80032f2:	e7df      	b.n	80032b4 <_fflush_r+0x28>
 80032f4:	4b04      	ldr	r3, [pc, #16]	; (8003308 <_fflush_r+0x7c>)
 80032f6:	429c      	cmp	r4, r3
 80032f8:	d1dc      	bne.n	80032b4 <_fflush_r+0x28>
 80032fa:	68ec      	ldr	r4, [r5, #12]
 80032fc:	e7da      	b.n	80032b4 <_fflush_r+0x28>
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	08003948 	.word	0x08003948
 8003304:	08003968 	.word	0x08003968
 8003308:	08003928 	.word	0x08003928

0800330c <fflush>:
 800330c:	0001      	movs	r1, r0
 800330e:	b510      	push	{r4, lr}
 8003310:	2800      	cmp	r0, #0
 8003312:	d105      	bne.n	8003320 <fflush+0x14>
 8003314:	4b05      	ldr	r3, [pc, #20]	; (800332c <fflush+0x20>)
 8003316:	4906      	ldr	r1, [pc, #24]	; (8003330 <fflush+0x24>)
 8003318:	6818      	ldr	r0, [r3, #0]
 800331a:	f000 f8ef 	bl	80034fc <_fwalk_reent>
 800331e:	bd10      	pop	{r4, pc}
 8003320:	4b04      	ldr	r3, [pc, #16]	; (8003334 <fflush+0x28>)
 8003322:	6818      	ldr	r0, [r3, #0]
 8003324:	f7ff ffb2 	bl	800328c <_fflush_r>
 8003328:	e7f9      	b.n	800331e <fflush+0x12>
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	08003988 	.word	0x08003988
 8003330:	0800328d 	.word	0x0800328d
 8003334:	20000030 	.word	0x20000030

08003338 <std>:
 8003338:	2300      	movs	r3, #0
 800333a:	b510      	push	{r4, lr}
 800333c:	0004      	movs	r4, r0
 800333e:	6003      	str	r3, [r0, #0]
 8003340:	6043      	str	r3, [r0, #4]
 8003342:	6083      	str	r3, [r0, #8]
 8003344:	8181      	strh	r1, [r0, #12]
 8003346:	6643      	str	r3, [r0, #100]	; 0x64
 8003348:	0019      	movs	r1, r3
 800334a:	81c2      	strh	r2, [r0, #14]
 800334c:	6103      	str	r3, [r0, #16]
 800334e:	6143      	str	r3, [r0, #20]
 8003350:	6183      	str	r3, [r0, #24]
 8003352:	2208      	movs	r2, #8
 8003354:	305c      	adds	r0, #92	; 0x5c
 8003356:	f000 f918 	bl	800358a <memset>
 800335a:	4b05      	ldr	r3, [pc, #20]	; (8003370 <std+0x38>)
 800335c:	6224      	str	r4, [r4, #32]
 800335e:	6263      	str	r3, [r4, #36]	; 0x24
 8003360:	4b04      	ldr	r3, [pc, #16]	; (8003374 <std+0x3c>)
 8003362:	62a3      	str	r3, [r4, #40]	; 0x28
 8003364:	4b04      	ldr	r3, [pc, #16]	; (8003378 <std+0x40>)
 8003366:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003368:	4b04      	ldr	r3, [pc, #16]	; (800337c <std+0x44>)
 800336a:	6323      	str	r3, [r4, #48]	; 0x30
 800336c:	bd10      	pop	{r4, pc}
 800336e:	46c0      	nop			; (mov r8, r8)
 8003370:	08003785 	.word	0x08003785
 8003374:	080037ad 	.word	0x080037ad
 8003378:	080037e5 	.word	0x080037e5
 800337c:	08003811 	.word	0x08003811

08003380 <_cleanup_r>:
 8003380:	b510      	push	{r4, lr}
 8003382:	4902      	ldr	r1, [pc, #8]	; (800338c <_cleanup_r+0xc>)
 8003384:	f000 f8ba 	bl	80034fc <_fwalk_reent>
 8003388:	bd10      	pop	{r4, pc}
 800338a:	46c0      	nop			; (mov r8, r8)
 800338c:	0800328d 	.word	0x0800328d

08003390 <__sfmoreglue>:
 8003390:	b570      	push	{r4, r5, r6, lr}
 8003392:	2568      	movs	r5, #104	; 0x68
 8003394:	1e4a      	subs	r2, r1, #1
 8003396:	4355      	muls	r5, r2
 8003398:	000e      	movs	r6, r1
 800339a:	0029      	movs	r1, r5
 800339c:	3174      	adds	r1, #116	; 0x74
 800339e:	f000 f969 	bl	8003674 <_malloc_r>
 80033a2:	1e04      	subs	r4, r0, #0
 80033a4:	d008      	beq.n	80033b8 <__sfmoreglue+0x28>
 80033a6:	2100      	movs	r1, #0
 80033a8:	002a      	movs	r2, r5
 80033aa:	6001      	str	r1, [r0, #0]
 80033ac:	6046      	str	r6, [r0, #4]
 80033ae:	300c      	adds	r0, #12
 80033b0:	60a0      	str	r0, [r4, #8]
 80033b2:	3268      	adds	r2, #104	; 0x68
 80033b4:	f000 f8e9 	bl	800358a <memset>
 80033b8:	0020      	movs	r0, r4
 80033ba:	bd70      	pop	{r4, r5, r6, pc}

080033bc <__sfp_lock_acquire>:
 80033bc:	b510      	push	{r4, lr}
 80033be:	4802      	ldr	r0, [pc, #8]	; (80033c8 <__sfp_lock_acquire+0xc>)
 80033c0:	f000 f8e1 	bl	8003586 <__retarget_lock_acquire_recursive>
 80033c4:	bd10      	pop	{r4, pc}
 80033c6:	46c0      	nop			; (mov r8, r8)
 80033c8:	20000141 	.word	0x20000141

080033cc <__sfp_lock_release>:
 80033cc:	b510      	push	{r4, lr}
 80033ce:	4802      	ldr	r0, [pc, #8]	; (80033d8 <__sfp_lock_release+0xc>)
 80033d0:	f000 f8da 	bl	8003588 <__retarget_lock_release_recursive>
 80033d4:	bd10      	pop	{r4, pc}
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	20000141 	.word	0x20000141

080033dc <__sinit_lock_acquire>:
 80033dc:	b510      	push	{r4, lr}
 80033de:	4802      	ldr	r0, [pc, #8]	; (80033e8 <__sinit_lock_acquire+0xc>)
 80033e0:	f000 f8d1 	bl	8003586 <__retarget_lock_acquire_recursive>
 80033e4:	bd10      	pop	{r4, pc}
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	20000142 	.word	0x20000142

080033ec <__sinit_lock_release>:
 80033ec:	b510      	push	{r4, lr}
 80033ee:	4802      	ldr	r0, [pc, #8]	; (80033f8 <__sinit_lock_release+0xc>)
 80033f0:	f000 f8ca 	bl	8003588 <__retarget_lock_release_recursive>
 80033f4:	bd10      	pop	{r4, pc}
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	20000142 	.word	0x20000142

080033fc <__sinit>:
 80033fc:	b513      	push	{r0, r1, r4, lr}
 80033fe:	0004      	movs	r4, r0
 8003400:	f7ff ffec 	bl	80033dc <__sinit_lock_acquire>
 8003404:	69a3      	ldr	r3, [r4, #24]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d002      	beq.n	8003410 <__sinit+0x14>
 800340a:	f7ff ffef 	bl	80033ec <__sinit_lock_release>
 800340e:	bd13      	pop	{r0, r1, r4, pc}
 8003410:	64a3      	str	r3, [r4, #72]	; 0x48
 8003412:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003414:	6523      	str	r3, [r4, #80]	; 0x50
 8003416:	4b13      	ldr	r3, [pc, #76]	; (8003464 <__sinit+0x68>)
 8003418:	4a13      	ldr	r2, [pc, #76]	; (8003468 <__sinit+0x6c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	62a2      	str	r2, [r4, #40]	; 0x28
 800341e:	9301      	str	r3, [sp, #4]
 8003420:	42a3      	cmp	r3, r4
 8003422:	d101      	bne.n	8003428 <__sinit+0x2c>
 8003424:	2301      	movs	r3, #1
 8003426:	61a3      	str	r3, [r4, #24]
 8003428:	0020      	movs	r0, r4
 800342a:	f000 f81f 	bl	800346c <__sfp>
 800342e:	6060      	str	r0, [r4, #4]
 8003430:	0020      	movs	r0, r4
 8003432:	f000 f81b 	bl	800346c <__sfp>
 8003436:	60a0      	str	r0, [r4, #8]
 8003438:	0020      	movs	r0, r4
 800343a:	f000 f817 	bl	800346c <__sfp>
 800343e:	2200      	movs	r2, #0
 8003440:	2104      	movs	r1, #4
 8003442:	60e0      	str	r0, [r4, #12]
 8003444:	6860      	ldr	r0, [r4, #4]
 8003446:	f7ff ff77 	bl	8003338 <std>
 800344a:	2201      	movs	r2, #1
 800344c:	2109      	movs	r1, #9
 800344e:	68a0      	ldr	r0, [r4, #8]
 8003450:	f7ff ff72 	bl	8003338 <std>
 8003454:	2202      	movs	r2, #2
 8003456:	2112      	movs	r1, #18
 8003458:	68e0      	ldr	r0, [r4, #12]
 800345a:	f7ff ff6d 	bl	8003338 <std>
 800345e:	2301      	movs	r3, #1
 8003460:	61a3      	str	r3, [r4, #24]
 8003462:	e7d2      	b.n	800340a <__sinit+0xe>
 8003464:	08003988 	.word	0x08003988
 8003468:	08003381 	.word	0x08003381

0800346c <__sfp>:
 800346c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800346e:	0007      	movs	r7, r0
 8003470:	f7ff ffa4 	bl	80033bc <__sfp_lock_acquire>
 8003474:	4b1f      	ldr	r3, [pc, #124]	; (80034f4 <__sfp+0x88>)
 8003476:	681e      	ldr	r6, [r3, #0]
 8003478:	69b3      	ldr	r3, [r6, #24]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d102      	bne.n	8003484 <__sfp+0x18>
 800347e:	0030      	movs	r0, r6
 8003480:	f7ff ffbc 	bl	80033fc <__sinit>
 8003484:	3648      	adds	r6, #72	; 0x48
 8003486:	68b4      	ldr	r4, [r6, #8]
 8003488:	6873      	ldr	r3, [r6, #4]
 800348a:	3b01      	subs	r3, #1
 800348c:	d504      	bpl.n	8003498 <__sfp+0x2c>
 800348e:	6833      	ldr	r3, [r6, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d022      	beq.n	80034da <__sfp+0x6e>
 8003494:	6836      	ldr	r6, [r6, #0]
 8003496:	e7f6      	b.n	8003486 <__sfp+0x1a>
 8003498:	220c      	movs	r2, #12
 800349a:	5ea5      	ldrsh	r5, [r4, r2]
 800349c:	2d00      	cmp	r5, #0
 800349e:	d11a      	bne.n	80034d6 <__sfp+0x6a>
 80034a0:	0020      	movs	r0, r4
 80034a2:	4b15      	ldr	r3, [pc, #84]	; (80034f8 <__sfp+0x8c>)
 80034a4:	3058      	adds	r0, #88	; 0x58
 80034a6:	60e3      	str	r3, [r4, #12]
 80034a8:	6665      	str	r5, [r4, #100]	; 0x64
 80034aa:	f000 f86b 	bl	8003584 <__retarget_lock_init_recursive>
 80034ae:	f7ff ff8d 	bl	80033cc <__sfp_lock_release>
 80034b2:	0020      	movs	r0, r4
 80034b4:	2208      	movs	r2, #8
 80034b6:	0029      	movs	r1, r5
 80034b8:	6025      	str	r5, [r4, #0]
 80034ba:	60a5      	str	r5, [r4, #8]
 80034bc:	6065      	str	r5, [r4, #4]
 80034be:	6125      	str	r5, [r4, #16]
 80034c0:	6165      	str	r5, [r4, #20]
 80034c2:	61a5      	str	r5, [r4, #24]
 80034c4:	305c      	adds	r0, #92	; 0x5c
 80034c6:	f000 f860 	bl	800358a <memset>
 80034ca:	6365      	str	r5, [r4, #52]	; 0x34
 80034cc:	63a5      	str	r5, [r4, #56]	; 0x38
 80034ce:	64a5      	str	r5, [r4, #72]	; 0x48
 80034d0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80034d2:	0020      	movs	r0, r4
 80034d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034d6:	3468      	adds	r4, #104	; 0x68
 80034d8:	e7d7      	b.n	800348a <__sfp+0x1e>
 80034da:	2104      	movs	r1, #4
 80034dc:	0038      	movs	r0, r7
 80034de:	f7ff ff57 	bl	8003390 <__sfmoreglue>
 80034e2:	1e04      	subs	r4, r0, #0
 80034e4:	6030      	str	r0, [r6, #0]
 80034e6:	d1d5      	bne.n	8003494 <__sfp+0x28>
 80034e8:	f7ff ff70 	bl	80033cc <__sfp_lock_release>
 80034ec:	230c      	movs	r3, #12
 80034ee:	603b      	str	r3, [r7, #0]
 80034f0:	e7ef      	b.n	80034d2 <__sfp+0x66>
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	08003988 	.word	0x08003988
 80034f8:	ffff0001 	.word	0xffff0001

080034fc <_fwalk_reent>:
 80034fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034fe:	0004      	movs	r4, r0
 8003500:	0006      	movs	r6, r0
 8003502:	2700      	movs	r7, #0
 8003504:	9101      	str	r1, [sp, #4]
 8003506:	3448      	adds	r4, #72	; 0x48
 8003508:	6863      	ldr	r3, [r4, #4]
 800350a:	68a5      	ldr	r5, [r4, #8]
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	9b00      	ldr	r3, [sp, #0]
 8003510:	3b01      	subs	r3, #1
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	d504      	bpl.n	8003520 <_fwalk_reent+0x24>
 8003516:	6824      	ldr	r4, [r4, #0]
 8003518:	2c00      	cmp	r4, #0
 800351a:	d1f5      	bne.n	8003508 <_fwalk_reent+0xc>
 800351c:	0038      	movs	r0, r7
 800351e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003520:	89ab      	ldrh	r3, [r5, #12]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d908      	bls.n	8003538 <_fwalk_reent+0x3c>
 8003526:	220e      	movs	r2, #14
 8003528:	5eab      	ldrsh	r3, [r5, r2]
 800352a:	3301      	adds	r3, #1
 800352c:	d004      	beq.n	8003538 <_fwalk_reent+0x3c>
 800352e:	0029      	movs	r1, r5
 8003530:	0030      	movs	r0, r6
 8003532:	9b01      	ldr	r3, [sp, #4]
 8003534:	4798      	blx	r3
 8003536:	4307      	orrs	r7, r0
 8003538:	3568      	adds	r5, #104	; 0x68
 800353a:	e7e8      	b.n	800350e <_fwalk_reent+0x12>

0800353c <__libc_init_array>:
 800353c:	b570      	push	{r4, r5, r6, lr}
 800353e:	2600      	movs	r6, #0
 8003540:	4d0c      	ldr	r5, [pc, #48]	; (8003574 <__libc_init_array+0x38>)
 8003542:	4c0d      	ldr	r4, [pc, #52]	; (8003578 <__libc_init_array+0x3c>)
 8003544:	1b64      	subs	r4, r4, r5
 8003546:	10a4      	asrs	r4, r4, #2
 8003548:	42a6      	cmp	r6, r4
 800354a:	d109      	bne.n	8003560 <__libc_init_array+0x24>
 800354c:	2600      	movs	r6, #0
 800354e:	f000 f9c3 	bl	80038d8 <_init>
 8003552:	4d0a      	ldr	r5, [pc, #40]	; (800357c <__libc_init_array+0x40>)
 8003554:	4c0a      	ldr	r4, [pc, #40]	; (8003580 <__libc_init_array+0x44>)
 8003556:	1b64      	subs	r4, r4, r5
 8003558:	10a4      	asrs	r4, r4, #2
 800355a:	42a6      	cmp	r6, r4
 800355c:	d105      	bne.n	800356a <__libc_init_array+0x2e>
 800355e:	bd70      	pop	{r4, r5, r6, pc}
 8003560:	00b3      	lsls	r3, r6, #2
 8003562:	58eb      	ldr	r3, [r5, r3]
 8003564:	4798      	blx	r3
 8003566:	3601      	adds	r6, #1
 8003568:	e7ee      	b.n	8003548 <__libc_init_array+0xc>
 800356a:	00b3      	lsls	r3, r6, #2
 800356c:	58eb      	ldr	r3, [r5, r3]
 800356e:	4798      	blx	r3
 8003570:	3601      	adds	r6, #1
 8003572:	e7f2      	b.n	800355a <__libc_init_array+0x1e>
 8003574:	0800398c 	.word	0x0800398c
 8003578:	0800398c 	.word	0x0800398c
 800357c:	0800398c 	.word	0x0800398c
 8003580:	08003990 	.word	0x08003990

08003584 <__retarget_lock_init_recursive>:
 8003584:	4770      	bx	lr

08003586 <__retarget_lock_acquire_recursive>:
 8003586:	4770      	bx	lr

08003588 <__retarget_lock_release_recursive>:
 8003588:	4770      	bx	lr

0800358a <memset>:
 800358a:	0003      	movs	r3, r0
 800358c:	1882      	adds	r2, r0, r2
 800358e:	4293      	cmp	r3, r2
 8003590:	d100      	bne.n	8003594 <memset+0xa>
 8003592:	4770      	bx	lr
 8003594:	7019      	strb	r1, [r3, #0]
 8003596:	3301      	adds	r3, #1
 8003598:	e7f9      	b.n	800358e <memset+0x4>
	...

0800359c <_free_r>:
 800359c:	b570      	push	{r4, r5, r6, lr}
 800359e:	0005      	movs	r5, r0
 80035a0:	2900      	cmp	r1, #0
 80035a2:	d010      	beq.n	80035c6 <_free_r+0x2a>
 80035a4:	1f0c      	subs	r4, r1, #4
 80035a6:	6823      	ldr	r3, [r4, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	da00      	bge.n	80035ae <_free_r+0x12>
 80035ac:	18e4      	adds	r4, r4, r3
 80035ae:	0028      	movs	r0, r5
 80035b0:	f000 f96e 	bl	8003890 <__malloc_lock>
 80035b4:	4a1d      	ldr	r2, [pc, #116]	; (800362c <_free_r+0x90>)
 80035b6:	6813      	ldr	r3, [r2, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d105      	bne.n	80035c8 <_free_r+0x2c>
 80035bc:	6063      	str	r3, [r4, #4]
 80035be:	6014      	str	r4, [r2, #0]
 80035c0:	0028      	movs	r0, r5
 80035c2:	f000 f96d 	bl	80038a0 <__malloc_unlock>
 80035c6:	bd70      	pop	{r4, r5, r6, pc}
 80035c8:	42a3      	cmp	r3, r4
 80035ca:	d908      	bls.n	80035de <_free_r+0x42>
 80035cc:	6821      	ldr	r1, [r4, #0]
 80035ce:	1860      	adds	r0, r4, r1
 80035d0:	4283      	cmp	r3, r0
 80035d2:	d1f3      	bne.n	80035bc <_free_r+0x20>
 80035d4:	6818      	ldr	r0, [r3, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	1841      	adds	r1, r0, r1
 80035da:	6021      	str	r1, [r4, #0]
 80035dc:	e7ee      	b.n	80035bc <_free_r+0x20>
 80035de:	001a      	movs	r2, r3
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <_free_r+0x4e>
 80035e6:	42a3      	cmp	r3, r4
 80035e8:	d9f9      	bls.n	80035de <_free_r+0x42>
 80035ea:	6811      	ldr	r1, [r2, #0]
 80035ec:	1850      	adds	r0, r2, r1
 80035ee:	42a0      	cmp	r0, r4
 80035f0:	d10b      	bne.n	800360a <_free_r+0x6e>
 80035f2:	6820      	ldr	r0, [r4, #0]
 80035f4:	1809      	adds	r1, r1, r0
 80035f6:	1850      	adds	r0, r2, r1
 80035f8:	6011      	str	r1, [r2, #0]
 80035fa:	4283      	cmp	r3, r0
 80035fc:	d1e0      	bne.n	80035c0 <_free_r+0x24>
 80035fe:	6818      	ldr	r0, [r3, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	1841      	adds	r1, r0, r1
 8003604:	6011      	str	r1, [r2, #0]
 8003606:	6053      	str	r3, [r2, #4]
 8003608:	e7da      	b.n	80035c0 <_free_r+0x24>
 800360a:	42a0      	cmp	r0, r4
 800360c:	d902      	bls.n	8003614 <_free_r+0x78>
 800360e:	230c      	movs	r3, #12
 8003610:	602b      	str	r3, [r5, #0]
 8003612:	e7d5      	b.n	80035c0 <_free_r+0x24>
 8003614:	6821      	ldr	r1, [r4, #0]
 8003616:	1860      	adds	r0, r4, r1
 8003618:	4283      	cmp	r3, r0
 800361a:	d103      	bne.n	8003624 <_free_r+0x88>
 800361c:	6818      	ldr	r0, [r3, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	1841      	adds	r1, r0, r1
 8003622:	6021      	str	r1, [r4, #0]
 8003624:	6063      	str	r3, [r4, #4]
 8003626:	6054      	str	r4, [r2, #4]
 8003628:	e7ca      	b.n	80035c0 <_free_r+0x24>
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	20000144 	.word	0x20000144

08003630 <sbrk_aligned>:
 8003630:	b570      	push	{r4, r5, r6, lr}
 8003632:	4e0f      	ldr	r6, [pc, #60]	; (8003670 <sbrk_aligned+0x40>)
 8003634:	000d      	movs	r5, r1
 8003636:	6831      	ldr	r1, [r6, #0]
 8003638:	0004      	movs	r4, r0
 800363a:	2900      	cmp	r1, #0
 800363c:	d102      	bne.n	8003644 <sbrk_aligned+0x14>
 800363e:	f000 f88f 	bl	8003760 <_sbrk_r>
 8003642:	6030      	str	r0, [r6, #0]
 8003644:	0029      	movs	r1, r5
 8003646:	0020      	movs	r0, r4
 8003648:	f000 f88a 	bl	8003760 <_sbrk_r>
 800364c:	1c43      	adds	r3, r0, #1
 800364e:	d00a      	beq.n	8003666 <sbrk_aligned+0x36>
 8003650:	2303      	movs	r3, #3
 8003652:	1cc5      	adds	r5, r0, #3
 8003654:	439d      	bics	r5, r3
 8003656:	42a8      	cmp	r0, r5
 8003658:	d007      	beq.n	800366a <sbrk_aligned+0x3a>
 800365a:	1a29      	subs	r1, r5, r0
 800365c:	0020      	movs	r0, r4
 800365e:	f000 f87f 	bl	8003760 <_sbrk_r>
 8003662:	1c43      	adds	r3, r0, #1
 8003664:	d101      	bne.n	800366a <sbrk_aligned+0x3a>
 8003666:	2501      	movs	r5, #1
 8003668:	426d      	negs	r5, r5
 800366a:	0028      	movs	r0, r5
 800366c:	bd70      	pop	{r4, r5, r6, pc}
 800366e:	46c0      	nop			; (mov r8, r8)
 8003670:	20000148 	.word	0x20000148

08003674 <_malloc_r>:
 8003674:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003676:	2203      	movs	r2, #3
 8003678:	1ccb      	adds	r3, r1, #3
 800367a:	4393      	bics	r3, r2
 800367c:	3308      	adds	r3, #8
 800367e:	0006      	movs	r6, r0
 8003680:	001f      	movs	r7, r3
 8003682:	2b0c      	cmp	r3, #12
 8003684:	d232      	bcs.n	80036ec <_malloc_r+0x78>
 8003686:	270c      	movs	r7, #12
 8003688:	42b9      	cmp	r1, r7
 800368a:	d831      	bhi.n	80036f0 <_malloc_r+0x7c>
 800368c:	0030      	movs	r0, r6
 800368e:	f000 f8ff 	bl	8003890 <__malloc_lock>
 8003692:	4d32      	ldr	r5, [pc, #200]	; (800375c <_malloc_r+0xe8>)
 8003694:	682b      	ldr	r3, [r5, #0]
 8003696:	001c      	movs	r4, r3
 8003698:	2c00      	cmp	r4, #0
 800369a:	d12e      	bne.n	80036fa <_malloc_r+0x86>
 800369c:	0039      	movs	r1, r7
 800369e:	0030      	movs	r0, r6
 80036a0:	f7ff ffc6 	bl	8003630 <sbrk_aligned>
 80036a4:	0004      	movs	r4, r0
 80036a6:	1c43      	adds	r3, r0, #1
 80036a8:	d11e      	bne.n	80036e8 <_malloc_r+0x74>
 80036aa:	682c      	ldr	r4, [r5, #0]
 80036ac:	0025      	movs	r5, r4
 80036ae:	2d00      	cmp	r5, #0
 80036b0:	d14a      	bne.n	8003748 <_malloc_r+0xd4>
 80036b2:	6823      	ldr	r3, [r4, #0]
 80036b4:	0029      	movs	r1, r5
 80036b6:	18e3      	adds	r3, r4, r3
 80036b8:	0030      	movs	r0, r6
 80036ba:	9301      	str	r3, [sp, #4]
 80036bc:	f000 f850 	bl	8003760 <_sbrk_r>
 80036c0:	9b01      	ldr	r3, [sp, #4]
 80036c2:	4283      	cmp	r3, r0
 80036c4:	d143      	bne.n	800374e <_malloc_r+0xda>
 80036c6:	6823      	ldr	r3, [r4, #0]
 80036c8:	3703      	adds	r7, #3
 80036ca:	1aff      	subs	r7, r7, r3
 80036cc:	2303      	movs	r3, #3
 80036ce:	439f      	bics	r7, r3
 80036d0:	3708      	adds	r7, #8
 80036d2:	2f0c      	cmp	r7, #12
 80036d4:	d200      	bcs.n	80036d8 <_malloc_r+0x64>
 80036d6:	270c      	movs	r7, #12
 80036d8:	0039      	movs	r1, r7
 80036da:	0030      	movs	r0, r6
 80036dc:	f7ff ffa8 	bl	8003630 <sbrk_aligned>
 80036e0:	1c43      	adds	r3, r0, #1
 80036e2:	d034      	beq.n	800374e <_malloc_r+0xda>
 80036e4:	6823      	ldr	r3, [r4, #0]
 80036e6:	19df      	adds	r7, r3, r7
 80036e8:	6027      	str	r7, [r4, #0]
 80036ea:	e013      	b.n	8003714 <_malloc_r+0xa0>
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	dacb      	bge.n	8003688 <_malloc_r+0x14>
 80036f0:	230c      	movs	r3, #12
 80036f2:	2500      	movs	r5, #0
 80036f4:	6033      	str	r3, [r6, #0]
 80036f6:	0028      	movs	r0, r5
 80036f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80036fa:	6822      	ldr	r2, [r4, #0]
 80036fc:	1bd1      	subs	r1, r2, r7
 80036fe:	d420      	bmi.n	8003742 <_malloc_r+0xce>
 8003700:	290b      	cmp	r1, #11
 8003702:	d917      	bls.n	8003734 <_malloc_r+0xc0>
 8003704:	19e2      	adds	r2, r4, r7
 8003706:	6027      	str	r7, [r4, #0]
 8003708:	42a3      	cmp	r3, r4
 800370a:	d111      	bne.n	8003730 <_malloc_r+0xbc>
 800370c:	602a      	str	r2, [r5, #0]
 800370e:	6863      	ldr	r3, [r4, #4]
 8003710:	6011      	str	r1, [r2, #0]
 8003712:	6053      	str	r3, [r2, #4]
 8003714:	0030      	movs	r0, r6
 8003716:	0025      	movs	r5, r4
 8003718:	f000 f8c2 	bl	80038a0 <__malloc_unlock>
 800371c:	2207      	movs	r2, #7
 800371e:	350b      	adds	r5, #11
 8003720:	1d23      	adds	r3, r4, #4
 8003722:	4395      	bics	r5, r2
 8003724:	1aea      	subs	r2, r5, r3
 8003726:	429d      	cmp	r5, r3
 8003728:	d0e5      	beq.n	80036f6 <_malloc_r+0x82>
 800372a:	1b5b      	subs	r3, r3, r5
 800372c:	50a3      	str	r3, [r4, r2]
 800372e:	e7e2      	b.n	80036f6 <_malloc_r+0x82>
 8003730:	605a      	str	r2, [r3, #4]
 8003732:	e7ec      	b.n	800370e <_malloc_r+0x9a>
 8003734:	6862      	ldr	r2, [r4, #4]
 8003736:	42a3      	cmp	r3, r4
 8003738:	d101      	bne.n	800373e <_malloc_r+0xca>
 800373a:	602a      	str	r2, [r5, #0]
 800373c:	e7ea      	b.n	8003714 <_malloc_r+0xa0>
 800373e:	605a      	str	r2, [r3, #4]
 8003740:	e7e8      	b.n	8003714 <_malloc_r+0xa0>
 8003742:	0023      	movs	r3, r4
 8003744:	6864      	ldr	r4, [r4, #4]
 8003746:	e7a7      	b.n	8003698 <_malloc_r+0x24>
 8003748:	002c      	movs	r4, r5
 800374a:	686d      	ldr	r5, [r5, #4]
 800374c:	e7af      	b.n	80036ae <_malloc_r+0x3a>
 800374e:	230c      	movs	r3, #12
 8003750:	0030      	movs	r0, r6
 8003752:	6033      	str	r3, [r6, #0]
 8003754:	f000 f8a4 	bl	80038a0 <__malloc_unlock>
 8003758:	e7cd      	b.n	80036f6 <_malloc_r+0x82>
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	20000144 	.word	0x20000144

08003760 <_sbrk_r>:
 8003760:	2300      	movs	r3, #0
 8003762:	b570      	push	{r4, r5, r6, lr}
 8003764:	4d06      	ldr	r5, [pc, #24]	; (8003780 <_sbrk_r+0x20>)
 8003766:	0004      	movs	r4, r0
 8003768:	0008      	movs	r0, r1
 800376a:	602b      	str	r3, [r5, #0]
 800376c:	f7fd f8b8 	bl	80008e0 <_sbrk>
 8003770:	1c43      	adds	r3, r0, #1
 8003772:	d103      	bne.n	800377c <_sbrk_r+0x1c>
 8003774:	682b      	ldr	r3, [r5, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d000      	beq.n	800377c <_sbrk_r+0x1c>
 800377a:	6023      	str	r3, [r4, #0]
 800377c:	bd70      	pop	{r4, r5, r6, pc}
 800377e:	46c0      	nop			; (mov r8, r8)
 8003780:	2000014c 	.word	0x2000014c

08003784 <__sread>:
 8003784:	b570      	push	{r4, r5, r6, lr}
 8003786:	000c      	movs	r4, r1
 8003788:	250e      	movs	r5, #14
 800378a:	5f49      	ldrsh	r1, [r1, r5]
 800378c:	f000 f890 	bl	80038b0 <_read_r>
 8003790:	2800      	cmp	r0, #0
 8003792:	db03      	blt.n	800379c <__sread+0x18>
 8003794:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003796:	181b      	adds	r3, r3, r0
 8003798:	6563      	str	r3, [r4, #84]	; 0x54
 800379a:	bd70      	pop	{r4, r5, r6, pc}
 800379c:	89a3      	ldrh	r3, [r4, #12]
 800379e:	4a02      	ldr	r2, [pc, #8]	; (80037a8 <__sread+0x24>)
 80037a0:	4013      	ands	r3, r2
 80037a2:	81a3      	strh	r3, [r4, #12]
 80037a4:	e7f9      	b.n	800379a <__sread+0x16>
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	ffffefff 	.word	0xffffefff

080037ac <__swrite>:
 80037ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ae:	001f      	movs	r7, r3
 80037b0:	898b      	ldrh	r3, [r1, #12]
 80037b2:	0005      	movs	r5, r0
 80037b4:	000c      	movs	r4, r1
 80037b6:	0016      	movs	r6, r2
 80037b8:	05db      	lsls	r3, r3, #23
 80037ba:	d505      	bpl.n	80037c8 <__swrite+0x1c>
 80037bc:	230e      	movs	r3, #14
 80037be:	5ec9      	ldrsh	r1, [r1, r3]
 80037c0:	2200      	movs	r2, #0
 80037c2:	2302      	movs	r3, #2
 80037c4:	f000 f850 	bl	8003868 <_lseek_r>
 80037c8:	89a3      	ldrh	r3, [r4, #12]
 80037ca:	4a05      	ldr	r2, [pc, #20]	; (80037e0 <__swrite+0x34>)
 80037cc:	0028      	movs	r0, r5
 80037ce:	4013      	ands	r3, r2
 80037d0:	81a3      	strh	r3, [r4, #12]
 80037d2:	0032      	movs	r2, r6
 80037d4:	230e      	movs	r3, #14
 80037d6:	5ee1      	ldrsh	r1, [r4, r3]
 80037d8:	003b      	movs	r3, r7
 80037da:	f000 f81f 	bl	800381c <_write_r>
 80037de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037e0:	ffffefff 	.word	0xffffefff

080037e4 <__sseek>:
 80037e4:	b570      	push	{r4, r5, r6, lr}
 80037e6:	000c      	movs	r4, r1
 80037e8:	250e      	movs	r5, #14
 80037ea:	5f49      	ldrsh	r1, [r1, r5]
 80037ec:	f000 f83c 	bl	8003868 <_lseek_r>
 80037f0:	89a3      	ldrh	r3, [r4, #12]
 80037f2:	1c42      	adds	r2, r0, #1
 80037f4:	d103      	bne.n	80037fe <__sseek+0x1a>
 80037f6:	4a05      	ldr	r2, [pc, #20]	; (800380c <__sseek+0x28>)
 80037f8:	4013      	ands	r3, r2
 80037fa:	81a3      	strh	r3, [r4, #12]
 80037fc:	bd70      	pop	{r4, r5, r6, pc}
 80037fe:	2280      	movs	r2, #128	; 0x80
 8003800:	0152      	lsls	r2, r2, #5
 8003802:	4313      	orrs	r3, r2
 8003804:	81a3      	strh	r3, [r4, #12]
 8003806:	6560      	str	r0, [r4, #84]	; 0x54
 8003808:	e7f8      	b.n	80037fc <__sseek+0x18>
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	ffffefff 	.word	0xffffefff

08003810 <__sclose>:
 8003810:	b510      	push	{r4, lr}
 8003812:	230e      	movs	r3, #14
 8003814:	5ec9      	ldrsh	r1, [r1, r3]
 8003816:	f000 f815 	bl	8003844 <_close_r>
 800381a:	bd10      	pop	{r4, pc}

0800381c <_write_r>:
 800381c:	b570      	push	{r4, r5, r6, lr}
 800381e:	0004      	movs	r4, r0
 8003820:	0008      	movs	r0, r1
 8003822:	0011      	movs	r1, r2
 8003824:	001a      	movs	r2, r3
 8003826:	2300      	movs	r3, #0
 8003828:	4d05      	ldr	r5, [pc, #20]	; (8003840 <_write_r+0x24>)
 800382a:	602b      	str	r3, [r5, #0]
 800382c:	f7fd f827 	bl	800087e <_write>
 8003830:	1c43      	adds	r3, r0, #1
 8003832:	d103      	bne.n	800383c <_write_r+0x20>
 8003834:	682b      	ldr	r3, [r5, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d000      	beq.n	800383c <_write_r+0x20>
 800383a:	6023      	str	r3, [r4, #0]
 800383c:	bd70      	pop	{r4, r5, r6, pc}
 800383e:	46c0      	nop			; (mov r8, r8)
 8003840:	2000014c 	.word	0x2000014c

08003844 <_close_r>:
 8003844:	2300      	movs	r3, #0
 8003846:	b570      	push	{r4, r5, r6, lr}
 8003848:	4d06      	ldr	r5, [pc, #24]	; (8003864 <_close_r+0x20>)
 800384a:	0004      	movs	r4, r0
 800384c:	0008      	movs	r0, r1
 800384e:	602b      	str	r3, [r5, #0]
 8003850:	f7fd f831 	bl	80008b6 <_close>
 8003854:	1c43      	adds	r3, r0, #1
 8003856:	d103      	bne.n	8003860 <_close_r+0x1c>
 8003858:	682b      	ldr	r3, [r5, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d000      	beq.n	8003860 <_close_r+0x1c>
 800385e:	6023      	str	r3, [r4, #0]
 8003860:	bd70      	pop	{r4, r5, r6, pc}
 8003862:	46c0      	nop			; (mov r8, r8)
 8003864:	2000014c 	.word	0x2000014c

08003868 <_lseek_r>:
 8003868:	b570      	push	{r4, r5, r6, lr}
 800386a:	0004      	movs	r4, r0
 800386c:	0008      	movs	r0, r1
 800386e:	0011      	movs	r1, r2
 8003870:	001a      	movs	r2, r3
 8003872:	2300      	movs	r3, #0
 8003874:	4d05      	ldr	r5, [pc, #20]	; (800388c <_lseek_r+0x24>)
 8003876:	602b      	str	r3, [r5, #0]
 8003878:	f7fd f827 	bl	80008ca <_lseek>
 800387c:	1c43      	adds	r3, r0, #1
 800387e:	d103      	bne.n	8003888 <_lseek_r+0x20>
 8003880:	682b      	ldr	r3, [r5, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d000      	beq.n	8003888 <_lseek_r+0x20>
 8003886:	6023      	str	r3, [r4, #0]
 8003888:	bd70      	pop	{r4, r5, r6, pc}
 800388a:	46c0      	nop			; (mov r8, r8)
 800388c:	2000014c 	.word	0x2000014c

08003890 <__malloc_lock>:
 8003890:	b510      	push	{r4, lr}
 8003892:	4802      	ldr	r0, [pc, #8]	; (800389c <__malloc_lock+0xc>)
 8003894:	f7ff fe77 	bl	8003586 <__retarget_lock_acquire_recursive>
 8003898:	bd10      	pop	{r4, pc}
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	20000140 	.word	0x20000140

080038a0 <__malloc_unlock>:
 80038a0:	b510      	push	{r4, lr}
 80038a2:	4802      	ldr	r0, [pc, #8]	; (80038ac <__malloc_unlock+0xc>)
 80038a4:	f7ff fe70 	bl	8003588 <__retarget_lock_release_recursive>
 80038a8:	bd10      	pop	{r4, pc}
 80038aa:	46c0      	nop			; (mov r8, r8)
 80038ac:	20000140 	.word	0x20000140

080038b0 <_read_r>:
 80038b0:	b570      	push	{r4, r5, r6, lr}
 80038b2:	0004      	movs	r4, r0
 80038b4:	0008      	movs	r0, r1
 80038b6:	0011      	movs	r1, r2
 80038b8:	001a      	movs	r2, r3
 80038ba:	2300      	movs	r3, #0
 80038bc:	4d05      	ldr	r5, [pc, #20]	; (80038d4 <_read_r+0x24>)
 80038be:	602b      	str	r3, [r5, #0]
 80038c0:	f7fc ffc0 	bl	8000844 <_read>
 80038c4:	1c43      	adds	r3, r0, #1
 80038c6:	d103      	bne.n	80038d0 <_read_r+0x20>
 80038c8:	682b      	ldr	r3, [r5, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d000      	beq.n	80038d0 <_read_r+0x20>
 80038ce:	6023      	str	r3, [r4, #0]
 80038d0:	bd70      	pop	{r4, r5, r6, pc}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	2000014c 	.word	0x2000014c

080038d8 <_init>:
 80038d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038de:	bc08      	pop	{r3}
 80038e0:	469e      	mov	lr, r3
 80038e2:	4770      	bx	lr

080038e4 <_fini>:
 80038e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ea:	bc08      	pop	{r3}
 80038ec:	469e      	mov	lr, r3
 80038ee:	4770      	bx	lr
