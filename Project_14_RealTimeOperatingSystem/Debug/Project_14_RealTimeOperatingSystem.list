
Project_14_RealTimeOperatingSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004860  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08004920  08004920  00014920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049f0  080049f0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080049f0  080049f0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049f0  080049f0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049f0  080049f0  000149f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049f4  080049f4  000149f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080049f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a34  20000010  08004a08  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a44  08004a08  00021a44  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000152c1  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c8c  00000000  00000000  000352f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  00037f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d8  00000000  00000000  00039278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000297f  00000000  00000000  0003a450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b08  00000000  00000000  0003cdcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0feb  00000000  00000000  000518d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f28c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000446c  00000000  00000000  000f2914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004908 	.word	0x08004908

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08004908 	.word	0x08004908

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fa5a 	bl	80006dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f828 	bl	800027c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8ae 	bl	800038c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000230:	f000 f87c 	bl	800032c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000234:	f002 f914 	bl	8002460 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Blink01 */
  Blink01Handle = osThreadNew(StartBlink01, NULL, &Blink01_attributes);
 8000238:	4a0a      	ldr	r2, [pc, #40]	; (8000264 <main+0x44>)
 800023a:	4b0b      	ldr	r3, [pc, #44]	; (8000268 <main+0x48>)
 800023c:	2100      	movs	r1, #0
 800023e:	0018      	movs	r0, r3
 8000240:	f002 f968 	bl	8002514 <osThreadNew>
 8000244:	0002      	movs	r2, r0
 8000246:	4b09      	ldr	r3, [pc, #36]	; (800026c <main+0x4c>)
 8000248:	601a      	str	r2, [r3, #0]

  /* creation of Blink02 */
  Blink02Handle = osThreadNew(StartBlink02, NULL, &Blink02_attributes);
 800024a:	4a09      	ldr	r2, [pc, #36]	; (8000270 <main+0x50>)
 800024c:	4b09      	ldr	r3, [pc, #36]	; (8000274 <main+0x54>)
 800024e:	2100      	movs	r1, #0
 8000250:	0018      	movs	r0, r3
 8000252:	f002 f95f 	bl	8002514 <osThreadNew>
 8000256:	0002      	movs	r2, r0
 8000258:	4b07      	ldr	r3, [pc, #28]	; (8000278 <main+0x58>)
 800025a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800025c:	f002 f92c 	bl	80024b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000260:	e7fe      	b.n	8000260 <main+0x40>
 8000262:	46c0      	nop			; (mov r8, r8)
 8000264:	08004968 	.word	0x08004968
 8000268:	080003fd 	.word	0x080003fd
 800026c:	200000b0 	.word	0x200000b0
 8000270:	0800498c 	.word	0x0800498c
 8000274:	08000419 	.word	0x08000419
 8000278:	200000b4 	.word	0x200000b4

0800027c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027c:	b590      	push	{r4, r7, lr}
 800027e:	b099      	sub	sp, #100	; 0x64
 8000280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000282:	242c      	movs	r4, #44	; 0x2c
 8000284:	193b      	adds	r3, r7, r4
 8000286:	0018      	movs	r0, r3
 8000288:	2334      	movs	r3, #52	; 0x34
 800028a:	001a      	movs	r2, r3
 800028c:	2100      	movs	r1, #0
 800028e:	f004 fb32 	bl	80048f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000292:	231c      	movs	r3, #28
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	0018      	movs	r0, r3
 8000298:	2310      	movs	r3, #16
 800029a:	001a      	movs	r2, r3
 800029c:	2100      	movs	r1, #0
 800029e:	f004 fb2a 	bl	80048f6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002a2:	003b      	movs	r3, r7
 80002a4:	0018      	movs	r0, r3
 80002a6:	231c      	movs	r3, #28
 80002a8:	001a      	movs	r2, r3
 80002aa:	2100      	movs	r1, #0
 80002ac:	f004 fb23 	bl	80048f6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b0:	0021      	movs	r1, r4
 80002b2:	187b      	adds	r3, r7, r1
 80002b4:	2202      	movs	r2, #2
 80002b6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	2201      	movs	r2, #1
 80002bc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	2210      	movs	r2, #16
 80002c2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	2200      	movs	r2, #0
 80002c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	0018      	movs	r0, r3
 80002ce:	f000 fc93 	bl	8000bf8 <HAL_RCC_OscConfig>
 80002d2:	1e03      	subs	r3, r0, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002d6:	f000 f8bf 	bl	8000458 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002da:	211c      	movs	r1, #28
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2207      	movs	r2, #7
 80002e0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2200      	movs	r2, #0
 80002e6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2200      	movs	r2, #0
 80002ec:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2200      	movs	r2, #0
 80002f2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2100      	movs	r1, #0
 80002f8:	0018      	movs	r0, r3
 80002fa:	f001 f803 	bl	8001304 <HAL_RCC_ClockConfig>
 80002fe:	1e03      	subs	r3, r0, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000302:	f000 f8a9 	bl	8000458 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000306:	003b      	movs	r3, r7
 8000308:	2202      	movs	r2, #2
 800030a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800030c:	003b      	movs	r3, r7
 800030e:	2200      	movs	r2, #0
 8000310:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000312:	003b      	movs	r3, r7
 8000314:	0018      	movs	r0, r3
 8000316:	f001 f999 	bl	800164c <HAL_RCCEx_PeriphCLKConfig>
 800031a:	1e03      	subs	r3, r0, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800031e:	f000 f89b 	bl	8000458 <Error_Handler>
  }
}
 8000322:	46c0      	nop			; (mov r8, r8)
 8000324:	46bd      	mov	sp, r7
 8000326:	b019      	add	sp, #100	; 0x64
 8000328:	bd90      	pop	{r4, r7, pc}
	...

0800032c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000330:	4b14      	ldr	r3, [pc, #80]	; (8000384 <MX_USART2_UART_Init+0x58>)
 8000332:	4a15      	ldr	r2, [pc, #84]	; (8000388 <MX_USART2_UART_Init+0x5c>)
 8000334:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000336:	4b13      	ldr	r3, [pc, #76]	; (8000384 <MX_USART2_UART_Init+0x58>)
 8000338:	2296      	movs	r2, #150	; 0x96
 800033a:	0192      	lsls	r2, r2, #6
 800033c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800033e:	4b11      	ldr	r3, [pc, #68]	; (8000384 <MX_USART2_UART_Init+0x58>)
 8000340:	2200      	movs	r2, #0
 8000342:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000344:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <MX_USART2_UART_Init+0x58>)
 8000346:	2200      	movs	r2, #0
 8000348:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800034a:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <MX_USART2_UART_Init+0x58>)
 800034c:	2200      	movs	r2, #0
 800034e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000350:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <MX_USART2_UART_Init+0x58>)
 8000352:	220c      	movs	r2, #12
 8000354:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000356:	4b0b      	ldr	r3, [pc, #44]	; (8000384 <MX_USART2_UART_Init+0x58>)
 8000358:	2200      	movs	r2, #0
 800035a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800035c:	4b09      	ldr	r3, [pc, #36]	; (8000384 <MX_USART2_UART_Init+0x58>)
 800035e:	2200      	movs	r2, #0
 8000360:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000362:	4b08      	ldr	r3, [pc, #32]	; (8000384 <MX_USART2_UART_Init+0x58>)
 8000364:	2200      	movs	r2, #0
 8000366:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <MX_USART2_UART_Init+0x58>)
 800036a:	2200      	movs	r2, #0
 800036c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800036e:	4b05      	ldr	r3, [pc, #20]	; (8000384 <MX_USART2_UART_Init+0x58>)
 8000370:	0018      	movs	r0, r3
 8000372:	f001 fcd9 	bl	8001d28 <HAL_UART_Init>
 8000376:	1e03      	subs	r3, r0, #0
 8000378:	d001      	beq.n	800037e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800037a:	f000 f86d 	bl	8000458 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800037e:	46c0      	nop			; (mov r8, r8)
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	2000002c 	.word	0x2000002c
 8000388:	40004400 	.word	0x40004400

0800038c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b086      	sub	sp, #24
 8000390:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	0018      	movs	r0, r3
 8000396:	2314      	movs	r3, #20
 8000398:	001a      	movs	r2, r3
 800039a:	2100      	movs	r1, #0
 800039c:	f004 faab 	bl	80048f6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a0:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <MX_GPIO_Init+0x6c>)
 80003a2:	695a      	ldr	r2, [r3, #20]
 80003a4:	4b14      	ldr	r3, [pc, #80]	; (80003f8 <MX_GPIO_Init+0x6c>)
 80003a6:	2180      	movs	r1, #128	; 0x80
 80003a8:	0289      	lsls	r1, r1, #10
 80003aa:	430a      	orrs	r2, r1
 80003ac:	615a      	str	r2, [r3, #20]
 80003ae:	4b12      	ldr	r3, [pc, #72]	; (80003f8 <MX_GPIO_Init+0x6c>)
 80003b0:	695a      	ldr	r2, [r3, #20]
 80003b2:	2380      	movs	r3, #128	; 0x80
 80003b4:	029b      	lsls	r3, r3, #10
 80003b6:	4013      	ands	r3, r2
 80003b8:	603b      	str	r3, [r7, #0]
 80003ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED02_GPIO_Port, LED02_Pin, GPIO_PIN_RESET);
 80003bc:	2390      	movs	r3, #144	; 0x90
 80003be:	05db      	lsls	r3, r3, #23
 80003c0:	2200      	movs	r2, #0
 80003c2:	2120      	movs	r1, #32
 80003c4:	0018      	movs	r0, r3
 80003c6:	f000 fbdf 	bl	8000b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED02_Pin */
  GPIO_InitStruct.Pin = LED02_Pin;
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	2220      	movs	r2, #32
 80003ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	2201      	movs	r2, #1
 80003d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003dc:	1d3b      	adds	r3, r7, #4
 80003de:	2200      	movs	r2, #0
 80003e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED02_GPIO_Port, &GPIO_InitStruct);
 80003e2:	1d3a      	adds	r2, r7, #4
 80003e4:	2390      	movs	r3, #144	; 0x90
 80003e6:	05db      	lsls	r3, r3, #23
 80003e8:	0011      	movs	r1, r2
 80003ea:	0018      	movs	r0, r3
 80003ec:	f000 fa54 	bl	8000898 <HAL_GPIO_Init>

}
 80003f0:	46c0      	nop			; (mov r8, r8)
 80003f2:	46bd      	mov	sp, r7
 80003f4:	b006      	add	sp, #24
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	40021000 	.word	0x40021000

080003fc <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000404:	2390      	movs	r3, #144	; 0x90
 8000406:	05db      	lsls	r3, r3, #23
 8000408:	2120      	movs	r1, #32
 800040a:	0018      	movs	r0, r3
 800040c:	f000 fbd9 	bl	8000bc2 <HAL_GPIO_TogglePin>
    osDelay(1);
 8000410:	2001      	movs	r0, #1
 8000412:	f002 f927 	bl	8002664 <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000416:	e7f5      	b.n	8000404 <StartBlink01+0x8>

08000418 <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000420:	2390      	movs	r3, #144	; 0x90
 8000422:	05db      	lsls	r3, r3, #23
 8000424:	2120      	movs	r1, #32
 8000426:	0018      	movs	r0, r3
 8000428:	f000 fbcb 	bl	8000bc2 <HAL_GPIO_TogglePin>
	  osDelay(1);
 800042c:	2001      	movs	r0, #1
 800042e:	f002 f919 	bl	8002664 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000432:	e7f5      	b.n	8000420 <StartBlink02+0x8>

08000434 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a04      	ldr	r2, [pc, #16]	; (8000454 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000442:	4293      	cmp	r3, r2
 8000444:	d101      	bne.n	800044a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000446:	f000 f95d 	bl	8000704 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	46bd      	mov	sp, r7
 800044e:	b002      	add	sp, #8
 8000450:	bd80      	pop	{r7, pc}
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	40001000 	.word	0x40001000

08000458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800045c:	b672      	cpsid	i
}
 800045e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000460:	e7fe      	b.n	8000460 <Error_Handler+0x8>
	...

08000464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800046a:	4b12      	ldr	r3, [pc, #72]	; (80004b4 <HAL_MspInit+0x50>)
 800046c:	699a      	ldr	r2, [r3, #24]
 800046e:	4b11      	ldr	r3, [pc, #68]	; (80004b4 <HAL_MspInit+0x50>)
 8000470:	2101      	movs	r1, #1
 8000472:	430a      	orrs	r2, r1
 8000474:	619a      	str	r2, [r3, #24]
 8000476:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <HAL_MspInit+0x50>)
 8000478:	699b      	ldr	r3, [r3, #24]
 800047a:	2201      	movs	r2, #1
 800047c:	4013      	ands	r3, r2
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000482:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <HAL_MspInit+0x50>)
 8000484:	69da      	ldr	r2, [r3, #28]
 8000486:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <HAL_MspInit+0x50>)
 8000488:	2180      	movs	r1, #128	; 0x80
 800048a:	0549      	lsls	r1, r1, #21
 800048c:	430a      	orrs	r2, r1
 800048e:	61da      	str	r2, [r3, #28]
 8000490:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <HAL_MspInit+0x50>)
 8000492:	69da      	ldr	r2, [r3, #28]
 8000494:	2380      	movs	r3, #128	; 0x80
 8000496:	055b      	lsls	r3, r3, #21
 8000498:	4013      	ands	r3, r2
 800049a:	603b      	str	r3, [r7, #0]
 800049c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800049e:	2302      	movs	r3, #2
 80004a0:	425b      	negs	r3, r3
 80004a2:	2200      	movs	r2, #0
 80004a4:	2103      	movs	r1, #3
 80004a6:	0018      	movs	r0, r3
 80004a8:	f000 f9d0 	bl	800084c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ac:	46c0      	nop			; (mov r8, r8)
 80004ae:	46bd      	mov	sp, r7
 80004b0:	b002      	add	sp, #8
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	40021000 	.word	0x40021000

080004b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004b8:	b590      	push	{r4, r7, lr}
 80004ba:	b08b      	sub	sp, #44	; 0x2c
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c0:	2414      	movs	r4, #20
 80004c2:	193b      	adds	r3, r7, r4
 80004c4:	0018      	movs	r0, r3
 80004c6:	2314      	movs	r3, #20
 80004c8:	001a      	movs	r2, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	f004 fa13 	bl	80048f6 <memset>
  if(huart->Instance==USART2)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a1c      	ldr	r2, [pc, #112]	; (8000548 <HAL_UART_MspInit+0x90>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d132      	bne.n	8000540 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004da:	4b1c      	ldr	r3, [pc, #112]	; (800054c <HAL_UART_MspInit+0x94>)
 80004dc:	69da      	ldr	r2, [r3, #28]
 80004de:	4b1b      	ldr	r3, [pc, #108]	; (800054c <HAL_UART_MspInit+0x94>)
 80004e0:	2180      	movs	r1, #128	; 0x80
 80004e2:	0289      	lsls	r1, r1, #10
 80004e4:	430a      	orrs	r2, r1
 80004e6:	61da      	str	r2, [r3, #28]
 80004e8:	4b18      	ldr	r3, [pc, #96]	; (800054c <HAL_UART_MspInit+0x94>)
 80004ea:	69da      	ldr	r2, [r3, #28]
 80004ec:	2380      	movs	r3, #128	; 0x80
 80004ee:	029b      	lsls	r3, r3, #10
 80004f0:	4013      	ands	r3, r2
 80004f2:	613b      	str	r3, [r7, #16]
 80004f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f6:	4b15      	ldr	r3, [pc, #84]	; (800054c <HAL_UART_MspInit+0x94>)
 80004f8:	695a      	ldr	r2, [r3, #20]
 80004fa:	4b14      	ldr	r3, [pc, #80]	; (800054c <HAL_UART_MspInit+0x94>)
 80004fc:	2180      	movs	r1, #128	; 0x80
 80004fe:	0289      	lsls	r1, r1, #10
 8000500:	430a      	orrs	r2, r1
 8000502:	615a      	str	r2, [r3, #20]
 8000504:	4b11      	ldr	r3, [pc, #68]	; (800054c <HAL_UART_MspInit+0x94>)
 8000506:	695a      	ldr	r2, [r3, #20]
 8000508:	2380      	movs	r3, #128	; 0x80
 800050a:	029b      	lsls	r3, r3, #10
 800050c:	4013      	ands	r3, r2
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = TX02_Pin|Rx02_Pin;
 8000512:	0021      	movs	r1, r4
 8000514:	187b      	adds	r3, r7, r1
 8000516:	220c      	movs	r2, #12
 8000518:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800051a:	187b      	adds	r3, r7, r1
 800051c:	2202      	movs	r2, #2
 800051e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	187b      	adds	r3, r7, r1
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000526:	187b      	adds	r3, r7, r1
 8000528:	2203      	movs	r2, #3
 800052a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2201      	movs	r2, #1
 8000530:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000532:	187a      	adds	r2, r7, r1
 8000534:	2390      	movs	r3, #144	; 0x90
 8000536:	05db      	lsls	r3, r3, #23
 8000538:	0011      	movs	r1, r2
 800053a:	0018      	movs	r0, r3
 800053c:	f000 f9ac 	bl	8000898 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000540:	46c0      	nop			; (mov r8, r8)
 8000542:	46bd      	mov	sp, r7
 8000544:	b00b      	add	sp, #44	; 0x2c
 8000546:	bd90      	pop	{r4, r7, pc}
 8000548:	40004400 	.word	0x40004400
 800054c:	40021000 	.word	0x40021000

08000550 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000550:	b5b0      	push	{r4, r5, r7, lr}
 8000552:	b08c      	sub	sp, #48	; 0x30
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000558:	2300      	movs	r3, #0
 800055a:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t              uwPrescalerValue = 0U;
 800055c:	2300      	movs	r3, #0
 800055e:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000560:	4b37      	ldr	r3, [pc, #220]	; (8000640 <HAL_InitTick+0xf0>)
 8000562:	69da      	ldr	r2, [r3, #28]
 8000564:	4b36      	ldr	r3, [pc, #216]	; (8000640 <HAL_InitTick+0xf0>)
 8000566:	2110      	movs	r1, #16
 8000568:	430a      	orrs	r2, r1
 800056a:	61da      	str	r2, [r3, #28]
 800056c:	4b34      	ldr	r3, [pc, #208]	; (8000640 <HAL_InitTick+0xf0>)
 800056e:	69db      	ldr	r3, [r3, #28]
 8000570:	2210      	movs	r2, #16
 8000572:	4013      	ands	r3, r2
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000578:	230c      	movs	r3, #12
 800057a:	18fa      	adds	r2, r7, r3
 800057c:	2410      	movs	r4, #16
 800057e:	193b      	adds	r3, r7, r4
 8000580:	0011      	movs	r1, r2
 8000582:	0018      	movs	r0, r3
 8000584:	f001 f838 	bl	80015f8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000588:	193b      	adds	r3, r7, r4
 800058a:	68db      	ldr	r3, [r3, #12]
 800058c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800058e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000590:	2b00      	cmp	r3, #0
 8000592:	d104      	bne.n	800059e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000594:	f001 f81a 	bl	80015cc <HAL_RCC_GetPCLK1Freq>
 8000598:	0003      	movs	r3, r0
 800059a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800059c:	e004      	b.n	80005a8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800059e:	f001 f815 	bl	80015cc <HAL_RCC_GetPCLK1Freq>
 80005a2:	0003      	movs	r3, r0
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005aa:	4926      	ldr	r1, [pc, #152]	; (8000644 <HAL_InitTick+0xf4>)
 80005ac:	0018      	movs	r0, r3
 80005ae:	f7ff fdab 	bl	8000108 <__udivsi3>
 80005b2:	0003      	movs	r3, r0
 80005b4:	3b01      	subs	r3, #1
 80005b6:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80005b8:	4b23      	ldr	r3, [pc, #140]	; (8000648 <HAL_InitTick+0xf8>)
 80005ba:	4a24      	ldr	r2, [pc, #144]	; (800064c <HAL_InitTick+0xfc>)
 80005bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80005be:	4b22      	ldr	r3, [pc, #136]	; (8000648 <HAL_InitTick+0xf8>)
 80005c0:	4a23      	ldr	r2, [pc, #140]	; (8000650 <HAL_InitTick+0x100>)
 80005c2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80005c4:	4b20      	ldr	r3, [pc, #128]	; (8000648 <HAL_InitTick+0xf8>)
 80005c6:	6a3a      	ldr	r2, [r7, #32]
 80005c8:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 80005ca:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <HAL_InitTick+0xf8>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005d0:	4b1d      	ldr	r3, [pc, #116]	; (8000648 <HAL_InitTick+0xf8>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005d6:	4b1c      	ldr	r3, [pc, #112]	; (8000648 <HAL_InitTick+0xf8>)
 80005d8:	2200      	movs	r2, #0
 80005da:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80005dc:	252b      	movs	r5, #43	; 0x2b
 80005de:	197c      	adds	r4, r7, r5
 80005e0:	4b19      	ldr	r3, [pc, #100]	; (8000648 <HAL_InitTick+0xf8>)
 80005e2:	0018      	movs	r0, r3
 80005e4:	f001 f930 	bl	8001848 <HAL_TIM_Base_Init>
 80005e8:	0003      	movs	r3, r0
 80005ea:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80005ec:	197b      	adds	r3, r7, r5
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d11e      	bne.n	8000632 <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80005f4:	197c      	adds	r4, r7, r5
 80005f6:	4b14      	ldr	r3, [pc, #80]	; (8000648 <HAL_InitTick+0xf8>)
 80005f8:	0018      	movs	r0, r3
 80005fa:	f001 f97d 	bl	80018f8 <HAL_TIM_Base_Start_IT>
 80005fe:	0003      	movs	r3, r0
 8000600:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8000602:	197b      	adds	r3, r7, r5
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d113      	bne.n	8000632 <HAL_InitTick+0xe2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800060a:	2011      	movs	r0, #17
 800060c:	f000 f933 	bl	8000876 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2b03      	cmp	r3, #3
 8000614:	d809      	bhi.n	800062a <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2200      	movs	r2, #0
 800061a:	0019      	movs	r1, r3
 800061c:	2011      	movs	r0, #17
 800061e:	f000 f915 	bl	800084c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <HAL_InitTick+0x104>)
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	e003      	b.n	8000632 <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 800062a:	232b      	movs	r3, #43	; 0x2b
 800062c:	18fb      	adds	r3, r7, r3
 800062e:	2201      	movs	r2, #1
 8000630:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8000632:	232b      	movs	r3, #43	; 0x2b
 8000634:	18fb      	adds	r3, r7, r3
 8000636:	781b      	ldrb	r3, [r3, #0]
}
 8000638:	0018      	movs	r0, r3
 800063a:	46bd      	mov	sp, r7
 800063c:	b00c      	add	sp, #48	; 0x30
 800063e:	bdb0      	pop	{r4, r5, r7, pc}
 8000640:	40021000 	.word	0x40021000
 8000644:	000f4240 	.word	0x000f4240
 8000648:	200000b8 	.word	0x200000b8
 800064c:	40001000 	.word	0x40001000
 8000650:	000003e7 	.word	0x000003e7
 8000654:	20000004 	.word	0x20000004

08000658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800065c:	e7fe      	b.n	800065c <NMI_Handler+0x4>

0800065e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000662:	e7fe      	b.n	8000662 <HardFault_Handler+0x4>

08000664 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000668:	4b03      	ldr	r3, [pc, #12]	; (8000678 <TIM6_DAC_IRQHandler+0x14>)
 800066a:	0018      	movs	r0, r3
 800066c:	f001 f996 	bl	800199c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000670:	46c0      	nop			; (mov r8, r8)
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	200000b8 	.word	0x200000b8

0800067c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000680:	46c0      	nop			; (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000688:	480d      	ldr	r0, [pc, #52]	; (80006c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800068a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800068c:	480d      	ldr	r0, [pc, #52]	; (80006c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800068e:	490e      	ldr	r1, [pc, #56]	; (80006c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000690:	4a0e      	ldr	r2, [pc, #56]	; (80006cc <LoopForever+0xe>)
  movs r3, #0
 8000692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000694:	e002      	b.n	800069c <LoopCopyDataInit>

08000696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800069a:	3304      	adds	r3, #4

0800069c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800069c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800069e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a0:	d3f9      	bcc.n	8000696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006a2:	4a0b      	ldr	r2, [pc, #44]	; (80006d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006a4:	4c0b      	ldr	r4, [pc, #44]	; (80006d4 <LoopForever+0x16>)
  movs r3, #0
 80006a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a8:	e001      	b.n	80006ae <LoopFillZerobss>

080006aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ac:	3204      	adds	r2, #4

080006ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b0:	d3fb      	bcc.n	80006aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006b2:	f7ff ffe3 	bl	800067c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80006b6:	f004 f8f1 	bl	800489c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ba:	f7ff fdb1 	bl	8000220 <main>

080006be <LoopForever>:

LoopForever:
    b LoopForever
 80006be:	e7fe      	b.n	80006be <LoopForever>
  ldr   r0, =_estack
 80006c0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80006c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80006cc:	080049f8 	.word	0x080049f8
  ldr r2, =_sbss
 80006d0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80006d4:	20001a44 	.word	0x20001a44

080006d8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d8:	e7fe      	b.n	80006d8 <ADC1_COMP_IRQHandler>
	...

080006dc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e0:	4b07      	ldr	r3, [pc, #28]	; (8000700 <HAL_Init+0x24>)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <HAL_Init+0x24>)
 80006e6:	2110      	movs	r1, #16
 80006e8:	430a      	orrs	r2, r1
 80006ea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80006ec:	2003      	movs	r0, #3
 80006ee:	f7ff ff2f 	bl	8000550 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006f2:	f7ff feb7 	bl	8000464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006f6:	2300      	movs	r3, #0
}
 80006f8:	0018      	movs	r0, r3
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	40022000 	.word	0x40022000

08000704 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000708:	4b05      	ldr	r3, [pc, #20]	; (8000720 <HAL_IncTick+0x1c>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	001a      	movs	r2, r3
 800070e:	4b05      	ldr	r3, [pc, #20]	; (8000724 <HAL_IncTick+0x20>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	18d2      	adds	r2, r2, r3
 8000714:	4b03      	ldr	r3, [pc, #12]	; (8000724 <HAL_IncTick+0x20>)
 8000716:	601a      	str	r2, [r3, #0]
}
 8000718:	46c0      	nop			; (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	20000008 	.word	0x20000008
 8000724:	20000100 	.word	0x20000100

08000728 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  return uwTick;
 800072c:	4b02      	ldr	r3, [pc, #8]	; (8000738 <HAL_GetTick+0x10>)
 800072e:	681b      	ldr	r3, [r3, #0]
}
 8000730:	0018      	movs	r0, r3
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	20000100 	.word	0x20000100

0800073c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	0002      	movs	r2, r0
 8000744:	1dfb      	adds	r3, r7, #7
 8000746:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000748:	1dfb      	adds	r3, r7, #7
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b7f      	cmp	r3, #127	; 0x7f
 800074e:	d809      	bhi.n	8000764 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000750:	1dfb      	adds	r3, r7, #7
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	001a      	movs	r2, r3
 8000756:	231f      	movs	r3, #31
 8000758:	401a      	ands	r2, r3
 800075a:	4b04      	ldr	r3, [pc, #16]	; (800076c <__NVIC_EnableIRQ+0x30>)
 800075c:	2101      	movs	r1, #1
 800075e:	4091      	lsls	r1, r2
 8000760:	000a      	movs	r2, r1
 8000762:	601a      	str	r2, [r3, #0]
  }
}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	b002      	add	sp, #8
 800076a:	bd80      	pop	{r7, pc}
 800076c:	e000e100 	.word	0xe000e100

08000770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000770:	b590      	push	{r4, r7, lr}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	0002      	movs	r2, r0
 8000778:	6039      	str	r1, [r7, #0]
 800077a:	1dfb      	adds	r3, r7, #7
 800077c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800077e:	1dfb      	adds	r3, r7, #7
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b7f      	cmp	r3, #127	; 0x7f
 8000784:	d828      	bhi.n	80007d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000786:	4a2f      	ldr	r2, [pc, #188]	; (8000844 <__NVIC_SetPriority+0xd4>)
 8000788:	1dfb      	adds	r3, r7, #7
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	b25b      	sxtb	r3, r3
 800078e:	089b      	lsrs	r3, r3, #2
 8000790:	33c0      	adds	r3, #192	; 0xc0
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	589b      	ldr	r3, [r3, r2]
 8000796:	1dfa      	adds	r2, r7, #7
 8000798:	7812      	ldrb	r2, [r2, #0]
 800079a:	0011      	movs	r1, r2
 800079c:	2203      	movs	r2, #3
 800079e:	400a      	ands	r2, r1
 80007a0:	00d2      	lsls	r2, r2, #3
 80007a2:	21ff      	movs	r1, #255	; 0xff
 80007a4:	4091      	lsls	r1, r2
 80007a6:	000a      	movs	r2, r1
 80007a8:	43d2      	mvns	r2, r2
 80007aa:	401a      	ands	r2, r3
 80007ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	019b      	lsls	r3, r3, #6
 80007b2:	22ff      	movs	r2, #255	; 0xff
 80007b4:	401a      	ands	r2, r3
 80007b6:	1dfb      	adds	r3, r7, #7
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	0018      	movs	r0, r3
 80007bc:	2303      	movs	r3, #3
 80007be:	4003      	ands	r3, r0
 80007c0:	00db      	lsls	r3, r3, #3
 80007c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007c4:	481f      	ldr	r0, [pc, #124]	; (8000844 <__NVIC_SetPriority+0xd4>)
 80007c6:	1dfb      	adds	r3, r7, #7
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	b25b      	sxtb	r3, r3
 80007cc:	089b      	lsrs	r3, r3, #2
 80007ce:	430a      	orrs	r2, r1
 80007d0:	33c0      	adds	r3, #192	; 0xc0
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007d6:	e031      	b.n	800083c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007d8:	4a1b      	ldr	r2, [pc, #108]	; (8000848 <__NVIC_SetPriority+0xd8>)
 80007da:	1dfb      	adds	r3, r7, #7
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	0019      	movs	r1, r3
 80007e0:	230f      	movs	r3, #15
 80007e2:	400b      	ands	r3, r1
 80007e4:	3b08      	subs	r3, #8
 80007e6:	089b      	lsrs	r3, r3, #2
 80007e8:	3306      	adds	r3, #6
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	18d3      	adds	r3, r2, r3
 80007ee:	3304      	adds	r3, #4
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	1dfa      	adds	r2, r7, #7
 80007f4:	7812      	ldrb	r2, [r2, #0]
 80007f6:	0011      	movs	r1, r2
 80007f8:	2203      	movs	r2, #3
 80007fa:	400a      	ands	r2, r1
 80007fc:	00d2      	lsls	r2, r2, #3
 80007fe:	21ff      	movs	r1, #255	; 0xff
 8000800:	4091      	lsls	r1, r2
 8000802:	000a      	movs	r2, r1
 8000804:	43d2      	mvns	r2, r2
 8000806:	401a      	ands	r2, r3
 8000808:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	019b      	lsls	r3, r3, #6
 800080e:	22ff      	movs	r2, #255	; 0xff
 8000810:	401a      	ands	r2, r3
 8000812:	1dfb      	adds	r3, r7, #7
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	0018      	movs	r0, r3
 8000818:	2303      	movs	r3, #3
 800081a:	4003      	ands	r3, r0
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000820:	4809      	ldr	r0, [pc, #36]	; (8000848 <__NVIC_SetPriority+0xd8>)
 8000822:	1dfb      	adds	r3, r7, #7
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	001c      	movs	r4, r3
 8000828:	230f      	movs	r3, #15
 800082a:	4023      	ands	r3, r4
 800082c:	3b08      	subs	r3, #8
 800082e:	089b      	lsrs	r3, r3, #2
 8000830:	430a      	orrs	r2, r1
 8000832:	3306      	adds	r3, #6
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	18c3      	adds	r3, r0, r3
 8000838:	3304      	adds	r3, #4
 800083a:	601a      	str	r2, [r3, #0]
}
 800083c:	46c0      	nop			; (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	b003      	add	sp, #12
 8000842:	bd90      	pop	{r4, r7, pc}
 8000844:	e000e100 	.word	0xe000e100
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	60b9      	str	r1, [r7, #8]
 8000854:	607a      	str	r2, [r7, #4]
 8000856:	210f      	movs	r1, #15
 8000858:	187b      	adds	r3, r7, r1
 800085a:	1c02      	adds	r2, r0, #0
 800085c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800085e:	68ba      	ldr	r2, [r7, #8]
 8000860:	187b      	adds	r3, r7, r1
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b25b      	sxtb	r3, r3
 8000866:	0011      	movs	r1, r2
 8000868:	0018      	movs	r0, r3
 800086a:	f7ff ff81 	bl	8000770 <__NVIC_SetPriority>
}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	b004      	add	sp, #16
 8000874:	bd80      	pop	{r7, pc}

08000876 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b082      	sub	sp, #8
 800087a:	af00      	add	r7, sp, #0
 800087c:	0002      	movs	r2, r0
 800087e:	1dfb      	adds	r3, r7, #7
 8000880:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	b25b      	sxtb	r3, r3
 8000888:	0018      	movs	r0, r3
 800088a:	f7ff ff57 	bl	800073c <__NVIC_EnableIRQ>
}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	46bd      	mov	sp, r7
 8000892:	b002      	add	sp, #8
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008a6:	e155      	b.n	8000b54 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2101      	movs	r1, #1
 80008ae:	697a      	ldr	r2, [r7, #20]
 80008b0:	4091      	lsls	r1, r2
 80008b2:	000a      	movs	r2, r1
 80008b4:	4013      	ands	r3, r2
 80008b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d100      	bne.n	80008c0 <HAL_GPIO_Init+0x28>
 80008be:	e146      	b.n	8000b4e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	2203      	movs	r2, #3
 80008c6:	4013      	ands	r3, r2
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d005      	beq.n	80008d8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	2203      	movs	r2, #3
 80008d2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80008d4:	2b02      	cmp	r3, #2
 80008d6:	d130      	bne.n	800093a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	2203      	movs	r2, #3
 80008e4:	409a      	lsls	r2, r3
 80008e6:	0013      	movs	r3, r2
 80008e8:	43da      	mvns	r2, r3
 80008ea:	693b      	ldr	r3, [r7, #16]
 80008ec:	4013      	ands	r3, r2
 80008ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	68da      	ldr	r2, [r3, #12]
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	409a      	lsls	r2, r3
 80008fa:	0013      	movs	r3, r2
 80008fc:	693a      	ldr	r2, [r7, #16]
 80008fe:	4313      	orrs	r3, r2
 8000900:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	693a      	ldr	r2, [r7, #16]
 8000906:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800090e:	2201      	movs	r2, #1
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	409a      	lsls	r2, r3
 8000914:	0013      	movs	r3, r2
 8000916:	43da      	mvns	r2, r3
 8000918:	693b      	ldr	r3, [r7, #16]
 800091a:	4013      	ands	r3, r2
 800091c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	091b      	lsrs	r3, r3, #4
 8000924:	2201      	movs	r2, #1
 8000926:	401a      	ands	r2, r3
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	409a      	lsls	r2, r3
 800092c:	0013      	movs	r3, r2
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	4313      	orrs	r3, r2
 8000932:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	2203      	movs	r2, #3
 8000940:	4013      	ands	r3, r2
 8000942:	2b03      	cmp	r3, #3
 8000944:	d017      	beq.n	8000976 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	68db      	ldr	r3, [r3, #12]
 800094a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	2203      	movs	r2, #3
 8000952:	409a      	lsls	r2, r3
 8000954:	0013      	movs	r3, r2
 8000956:	43da      	mvns	r2, r3
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	4013      	ands	r3, r2
 800095c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	689a      	ldr	r2, [r3, #8]
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	409a      	lsls	r2, r3
 8000968:	0013      	movs	r3, r2
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	4313      	orrs	r3, r2
 800096e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	2203      	movs	r2, #3
 800097c:	4013      	ands	r3, r2
 800097e:	2b02      	cmp	r3, #2
 8000980:	d123      	bne.n	80009ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	08da      	lsrs	r2, r3, #3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	3208      	adds	r2, #8
 800098a:	0092      	lsls	r2, r2, #2
 800098c:	58d3      	ldr	r3, [r2, r3]
 800098e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	2207      	movs	r2, #7
 8000994:	4013      	ands	r3, r2
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	220f      	movs	r2, #15
 800099a:	409a      	lsls	r2, r3
 800099c:	0013      	movs	r3, r2
 800099e:	43da      	mvns	r2, r3
 80009a0:	693b      	ldr	r3, [r7, #16]
 80009a2:	4013      	ands	r3, r2
 80009a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	691a      	ldr	r2, [r3, #16]
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	2107      	movs	r1, #7
 80009ae:	400b      	ands	r3, r1
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	409a      	lsls	r2, r3
 80009b4:	0013      	movs	r3, r2
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	08da      	lsrs	r2, r3, #3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	3208      	adds	r2, #8
 80009c4:	0092      	lsls	r2, r2, #2
 80009c6:	6939      	ldr	r1, [r7, #16]
 80009c8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	2203      	movs	r2, #3
 80009d6:	409a      	lsls	r2, r3
 80009d8:	0013      	movs	r3, r2
 80009da:	43da      	mvns	r2, r3
 80009dc:	693b      	ldr	r3, [r7, #16]
 80009de:	4013      	ands	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	2203      	movs	r2, #3
 80009e8:	401a      	ands	r2, r3
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	409a      	lsls	r2, r3
 80009f0:	0013      	movs	r3, r2
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685a      	ldr	r2, [r3, #4]
 8000a02:	23c0      	movs	r3, #192	; 0xc0
 8000a04:	029b      	lsls	r3, r3, #10
 8000a06:	4013      	ands	r3, r2
 8000a08:	d100      	bne.n	8000a0c <HAL_GPIO_Init+0x174>
 8000a0a:	e0a0      	b.n	8000b4e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0c:	4b57      	ldr	r3, [pc, #348]	; (8000b6c <HAL_GPIO_Init+0x2d4>)
 8000a0e:	699a      	ldr	r2, [r3, #24]
 8000a10:	4b56      	ldr	r3, [pc, #344]	; (8000b6c <HAL_GPIO_Init+0x2d4>)
 8000a12:	2101      	movs	r1, #1
 8000a14:	430a      	orrs	r2, r1
 8000a16:	619a      	str	r2, [r3, #24]
 8000a18:	4b54      	ldr	r3, [pc, #336]	; (8000b6c <HAL_GPIO_Init+0x2d4>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	4013      	ands	r3, r2
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a24:	4a52      	ldr	r2, [pc, #328]	; (8000b70 <HAL_GPIO_Init+0x2d8>)
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	089b      	lsrs	r3, r3, #2
 8000a2a:	3302      	adds	r3, #2
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	589b      	ldr	r3, [r3, r2]
 8000a30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	2203      	movs	r2, #3
 8000a36:	4013      	ands	r3, r2
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	220f      	movs	r2, #15
 8000a3c:	409a      	lsls	r2, r3
 8000a3e:	0013      	movs	r3, r2
 8000a40:	43da      	mvns	r2, r3
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	4013      	ands	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	2390      	movs	r3, #144	; 0x90
 8000a4c:	05db      	lsls	r3, r3, #23
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	d019      	beq.n	8000a86 <HAL_GPIO_Init+0x1ee>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a47      	ldr	r2, [pc, #284]	; (8000b74 <HAL_GPIO_Init+0x2dc>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d013      	beq.n	8000a82 <HAL_GPIO_Init+0x1ea>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a46      	ldr	r2, [pc, #280]	; (8000b78 <HAL_GPIO_Init+0x2e0>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d00d      	beq.n	8000a7e <HAL_GPIO_Init+0x1e6>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a45      	ldr	r2, [pc, #276]	; (8000b7c <HAL_GPIO_Init+0x2e4>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d007      	beq.n	8000a7a <HAL_GPIO_Init+0x1e2>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a44      	ldr	r2, [pc, #272]	; (8000b80 <HAL_GPIO_Init+0x2e8>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d101      	bne.n	8000a76 <HAL_GPIO_Init+0x1de>
 8000a72:	2304      	movs	r3, #4
 8000a74:	e008      	b.n	8000a88 <HAL_GPIO_Init+0x1f0>
 8000a76:	2305      	movs	r3, #5
 8000a78:	e006      	b.n	8000a88 <HAL_GPIO_Init+0x1f0>
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	e004      	b.n	8000a88 <HAL_GPIO_Init+0x1f0>
 8000a7e:	2302      	movs	r3, #2
 8000a80:	e002      	b.n	8000a88 <HAL_GPIO_Init+0x1f0>
 8000a82:	2301      	movs	r3, #1
 8000a84:	e000      	b.n	8000a88 <HAL_GPIO_Init+0x1f0>
 8000a86:	2300      	movs	r3, #0
 8000a88:	697a      	ldr	r2, [r7, #20]
 8000a8a:	2103      	movs	r1, #3
 8000a8c:	400a      	ands	r2, r1
 8000a8e:	0092      	lsls	r2, r2, #2
 8000a90:	4093      	lsls	r3, r2
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a98:	4935      	ldr	r1, [pc, #212]	; (8000b70 <HAL_GPIO_Init+0x2d8>)
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	089b      	lsrs	r3, r3, #2
 8000a9e:	3302      	adds	r3, #2
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000aa6:	4b37      	ldr	r3, [pc, #220]	; (8000b84 <HAL_GPIO_Init+0x2ec>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	43da      	mvns	r2, r3
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685a      	ldr	r2, [r3, #4]
 8000aba:	2380      	movs	r3, #128	; 0x80
 8000abc:	025b      	lsls	r3, r3, #9
 8000abe:	4013      	ands	r3, r2
 8000ac0:	d003      	beq.n	8000aca <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000aca:	4b2e      	ldr	r3, [pc, #184]	; (8000b84 <HAL_GPIO_Init+0x2ec>)
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000ad0:	4b2c      	ldr	r3, [pc, #176]	; (8000b84 <HAL_GPIO_Init+0x2ec>)
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	43da      	mvns	r2, r3
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	4013      	ands	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685a      	ldr	r2, [r3, #4]
 8000ae4:	2380      	movs	r3, #128	; 0x80
 8000ae6:	029b      	lsls	r3, r3, #10
 8000ae8:	4013      	ands	r3, r2
 8000aea:	d003      	beq.n	8000af4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000af4:	4b23      	ldr	r3, [pc, #140]	; (8000b84 <HAL_GPIO_Init+0x2ec>)
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000afa:	4b22      	ldr	r3, [pc, #136]	; (8000b84 <HAL_GPIO_Init+0x2ec>)
 8000afc:	689b      	ldr	r3, [r3, #8]
 8000afe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	43da      	mvns	r2, r3
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	4013      	ands	r3, r2
 8000b08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685a      	ldr	r2, [r3, #4]
 8000b0e:	2380      	movs	r3, #128	; 0x80
 8000b10:	035b      	lsls	r3, r3, #13
 8000b12:	4013      	ands	r3, r2
 8000b14:	d003      	beq.n	8000b1e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b1e:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <HAL_GPIO_Init+0x2ec>)
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000b24:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <HAL_GPIO_Init+0x2ec>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	43da      	mvns	r2, r3
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	4013      	ands	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685a      	ldr	r2, [r3, #4]
 8000b38:	2380      	movs	r3, #128	; 0x80
 8000b3a:	039b      	lsls	r3, r3, #14
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	d003      	beq.n	8000b48 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b48:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <HAL_GPIO_Init+0x2ec>)
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	3301      	adds	r3, #1
 8000b52:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	40da      	lsrs	r2, r3
 8000b5c:	1e13      	subs	r3, r2, #0
 8000b5e:	d000      	beq.n	8000b62 <HAL_GPIO_Init+0x2ca>
 8000b60:	e6a2      	b.n	80008a8 <HAL_GPIO_Init+0x10>
  } 
}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	46c0      	nop			; (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b006      	add	sp, #24
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	40010000 	.word	0x40010000
 8000b74:	48000400 	.word	0x48000400
 8000b78:	48000800 	.word	0x48000800
 8000b7c:	48000c00 	.word	0x48000c00
 8000b80:	48001000 	.word	0x48001000
 8000b84:	40010400 	.word	0x40010400

08000b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	0008      	movs	r0, r1
 8000b92:	0011      	movs	r1, r2
 8000b94:	1cbb      	adds	r3, r7, #2
 8000b96:	1c02      	adds	r2, r0, #0
 8000b98:	801a      	strh	r2, [r3, #0]
 8000b9a:	1c7b      	adds	r3, r7, #1
 8000b9c:	1c0a      	adds	r2, r1, #0
 8000b9e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ba0:	1c7b      	adds	r3, r7, #1
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d004      	beq.n	8000bb2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ba8:	1cbb      	adds	r3, r7, #2
 8000baa:	881a      	ldrh	r2, [r3, #0]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000bb0:	e003      	b.n	8000bba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bb2:	1cbb      	adds	r3, r7, #2
 8000bb4:	881a      	ldrh	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	b002      	add	sp, #8
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b084      	sub	sp, #16
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
 8000bca:	000a      	movs	r2, r1
 8000bcc:	1cbb      	adds	r3, r7, #2
 8000bce:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	695b      	ldr	r3, [r3, #20]
 8000bd4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bd6:	1cbb      	adds	r3, r7, #2
 8000bd8:	881b      	ldrh	r3, [r3, #0]
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	041a      	lsls	r2, r3, #16
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	43db      	mvns	r3, r3
 8000be4:	1cb9      	adds	r1, r7, #2
 8000be6:	8809      	ldrh	r1, [r1, #0]
 8000be8:	400b      	ands	r3, r1
 8000bea:	431a      	orrs	r2, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	619a      	str	r2, [r3, #24]
}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b004      	add	sp, #16
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d102      	bne.n	8000c0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	f000 fb76 	bl	80012f8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2201      	movs	r2, #1
 8000c12:	4013      	ands	r3, r2
 8000c14:	d100      	bne.n	8000c18 <HAL_RCC_OscConfig+0x20>
 8000c16:	e08e      	b.n	8000d36 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c18:	4bc5      	ldr	r3, [pc, #788]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	220c      	movs	r2, #12
 8000c1e:	4013      	ands	r3, r2
 8000c20:	2b04      	cmp	r3, #4
 8000c22:	d00e      	beq.n	8000c42 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c24:	4bc2      	ldr	r3, [pc, #776]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	220c      	movs	r2, #12
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	2b08      	cmp	r3, #8
 8000c2e:	d117      	bne.n	8000c60 <HAL_RCC_OscConfig+0x68>
 8000c30:	4bbf      	ldr	r3, [pc, #764]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000c32:	685a      	ldr	r2, [r3, #4]
 8000c34:	23c0      	movs	r3, #192	; 0xc0
 8000c36:	025b      	lsls	r3, r3, #9
 8000c38:	401a      	ands	r2, r3
 8000c3a:	2380      	movs	r3, #128	; 0x80
 8000c3c:	025b      	lsls	r3, r3, #9
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d10e      	bne.n	8000c60 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c42:	4bbb      	ldr	r3, [pc, #748]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	2380      	movs	r3, #128	; 0x80
 8000c48:	029b      	lsls	r3, r3, #10
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	d100      	bne.n	8000c50 <HAL_RCC_OscConfig+0x58>
 8000c4e:	e071      	b.n	8000d34 <HAL_RCC_OscConfig+0x13c>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d000      	beq.n	8000c5a <HAL_RCC_OscConfig+0x62>
 8000c58:	e06c      	b.n	8000d34 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	f000 fb4c 	bl	80012f8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d107      	bne.n	8000c78 <HAL_RCC_OscConfig+0x80>
 8000c68:	4bb1      	ldr	r3, [pc, #708]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	4bb0      	ldr	r3, [pc, #704]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000c6e:	2180      	movs	r1, #128	; 0x80
 8000c70:	0249      	lsls	r1, r1, #9
 8000c72:	430a      	orrs	r2, r1
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	e02f      	b.n	8000cd8 <HAL_RCC_OscConfig+0xe0>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d10c      	bne.n	8000c9a <HAL_RCC_OscConfig+0xa2>
 8000c80:	4bab      	ldr	r3, [pc, #684]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	4baa      	ldr	r3, [pc, #680]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000c86:	49ab      	ldr	r1, [pc, #684]	; (8000f34 <HAL_RCC_OscConfig+0x33c>)
 8000c88:	400a      	ands	r2, r1
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	4ba8      	ldr	r3, [pc, #672]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	4ba7      	ldr	r3, [pc, #668]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000c92:	49a9      	ldr	r1, [pc, #676]	; (8000f38 <HAL_RCC_OscConfig+0x340>)
 8000c94:	400a      	ands	r2, r1
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	e01e      	b.n	8000cd8 <HAL_RCC_OscConfig+0xe0>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	2b05      	cmp	r3, #5
 8000ca0:	d10e      	bne.n	8000cc0 <HAL_RCC_OscConfig+0xc8>
 8000ca2:	4ba3      	ldr	r3, [pc, #652]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	4ba2      	ldr	r3, [pc, #648]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000ca8:	2180      	movs	r1, #128	; 0x80
 8000caa:	02c9      	lsls	r1, r1, #11
 8000cac:	430a      	orrs	r2, r1
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	4b9f      	ldr	r3, [pc, #636]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b9e      	ldr	r3, [pc, #632]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000cb6:	2180      	movs	r1, #128	; 0x80
 8000cb8:	0249      	lsls	r1, r1, #9
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	e00b      	b.n	8000cd8 <HAL_RCC_OscConfig+0xe0>
 8000cc0:	4b9b      	ldr	r3, [pc, #620]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b9a      	ldr	r3, [pc, #616]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000cc6:	499b      	ldr	r1, [pc, #620]	; (8000f34 <HAL_RCC_OscConfig+0x33c>)
 8000cc8:	400a      	ands	r2, r1
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	4b98      	ldr	r3, [pc, #608]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4b97      	ldr	r3, [pc, #604]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000cd2:	4999      	ldr	r1, [pc, #612]	; (8000f38 <HAL_RCC_OscConfig+0x340>)
 8000cd4:	400a      	ands	r2, r1
 8000cd6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d014      	beq.n	8000d0a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ce0:	f7ff fd22 	bl	8000728 <HAL_GetTick>
 8000ce4:	0003      	movs	r3, r0
 8000ce6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ce8:	e008      	b.n	8000cfc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cea:	f7ff fd1d 	bl	8000728 <HAL_GetTick>
 8000cee:	0002      	movs	r2, r0
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	1ad3      	subs	r3, r2, r3
 8000cf4:	2b64      	cmp	r3, #100	; 0x64
 8000cf6:	d901      	bls.n	8000cfc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	e2fd      	b.n	80012f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cfc:	4b8c      	ldr	r3, [pc, #560]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	2380      	movs	r3, #128	; 0x80
 8000d02:	029b      	lsls	r3, r3, #10
 8000d04:	4013      	ands	r3, r2
 8000d06:	d0f0      	beq.n	8000cea <HAL_RCC_OscConfig+0xf2>
 8000d08:	e015      	b.n	8000d36 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d0a:	f7ff fd0d 	bl	8000728 <HAL_GetTick>
 8000d0e:	0003      	movs	r3, r0
 8000d10:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d12:	e008      	b.n	8000d26 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d14:	f7ff fd08 	bl	8000728 <HAL_GetTick>
 8000d18:	0002      	movs	r2, r0
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	2b64      	cmp	r3, #100	; 0x64
 8000d20:	d901      	bls.n	8000d26 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000d22:	2303      	movs	r3, #3
 8000d24:	e2e8      	b.n	80012f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d26:	4b82      	ldr	r3, [pc, #520]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	2380      	movs	r3, #128	; 0x80
 8000d2c:	029b      	lsls	r3, r3, #10
 8000d2e:	4013      	ands	r3, r2
 8000d30:	d1f0      	bne.n	8000d14 <HAL_RCC_OscConfig+0x11c>
 8000d32:	e000      	b.n	8000d36 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d34:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	d100      	bne.n	8000d42 <HAL_RCC_OscConfig+0x14a>
 8000d40:	e06c      	b.n	8000e1c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d42:	4b7b      	ldr	r3, [pc, #492]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	220c      	movs	r2, #12
 8000d48:	4013      	ands	r3, r2
 8000d4a:	d00e      	beq.n	8000d6a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d4c:	4b78      	ldr	r3, [pc, #480]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	220c      	movs	r2, #12
 8000d52:	4013      	ands	r3, r2
 8000d54:	2b08      	cmp	r3, #8
 8000d56:	d11f      	bne.n	8000d98 <HAL_RCC_OscConfig+0x1a0>
 8000d58:	4b75      	ldr	r3, [pc, #468]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000d5a:	685a      	ldr	r2, [r3, #4]
 8000d5c:	23c0      	movs	r3, #192	; 0xc0
 8000d5e:	025b      	lsls	r3, r3, #9
 8000d60:	401a      	ands	r2, r3
 8000d62:	2380      	movs	r3, #128	; 0x80
 8000d64:	021b      	lsls	r3, r3, #8
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d116      	bne.n	8000d98 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d6a:	4b71      	ldr	r3, [pc, #452]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2202      	movs	r2, #2
 8000d70:	4013      	ands	r3, r2
 8000d72:	d005      	beq.n	8000d80 <HAL_RCC_OscConfig+0x188>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d001      	beq.n	8000d80 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	e2bb      	b.n	80012f8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d80:	4b6b      	ldr	r3, [pc, #428]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	22f8      	movs	r2, #248	; 0xf8
 8000d86:	4393      	bics	r3, r2
 8000d88:	0019      	movs	r1, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	691b      	ldr	r3, [r3, #16]
 8000d8e:	00da      	lsls	r2, r3, #3
 8000d90:	4b67      	ldr	r3, [pc, #412]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000d92:	430a      	orrs	r2, r1
 8000d94:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d96:	e041      	b.n	8000e1c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d024      	beq.n	8000dea <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000da0:	4b63      	ldr	r3, [pc, #396]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4b62      	ldr	r3, [pc, #392]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000da6:	2101      	movs	r1, #1
 8000da8:	430a      	orrs	r2, r1
 8000daa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dac:	f7ff fcbc 	bl	8000728 <HAL_GetTick>
 8000db0:	0003      	movs	r3, r0
 8000db2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000db4:	e008      	b.n	8000dc8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000db6:	f7ff fcb7 	bl	8000728 <HAL_GetTick>
 8000dba:	0002      	movs	r2, r0
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d901      	bls.n	8000dc8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	e297      	b.n	80012f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dc8:	4b59      	ldr	r3, [pc, #356]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2202      	movs	r2, #2
 8000dce:	4013      	ands	r3, r2
 8000dd0:	d0f1      	beq.n	8000db6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dd2:	4b57      	ldr	r3, [pc, #348]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	22f8      	movs	r2, #248	; 0xf8
 8000dd8:	4393      	bics	r3, r2
 8000dda:	0019      	movs	r1, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	691b      	ldr	r3, [r3, #16]
 8000de0:	00da      	lsls	r2, r3, #3
 8000de2:	4b53      	ldr	r3, [pc, #332]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000de4:	430a      	orrs	r2, r1
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	e018      	b.n	8000e1c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dea:	4b51      	ldr	r3, [pc, #324]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	4b50      	ldr	r3, [pc, #320]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000df0:	2101      	movs	r1, #1
 8000df2:	438a      	bics	r2, r1
 8000df4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df6:	f7ff fc97 	bl	8000728 <HAL_GetTick>
 8000dfa:	0003      	movs	r3, r0
 8000dfc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dfe:	e008      	b.n	8000e12 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e00:	f7ff fc92 	bl	8000728 <HAL_GetTick>
 8000e04:	0002      	movs	r2, r0
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d901      	bls.n	8000e12 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	e272      	b.n	80012f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e12:	4b47      	ldr	r3, [pc, #284]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2202      	movs	r2, #2
 8000e18:	4013      	ands	r3, r2
 8000e1a:	d1f1      	bne.n	8000e00 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2208      	movs	r2, #8
 8000e22:	4013      	ands	r3, r2
 8000e24:	d036      	beq.n	8000e94 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d019      	beq.n	8000e62 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e2e:	4b40      	ldr	r3, [pc, #256]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000e30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e32:	4b3f      	ldr	r3, [pc, #252]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000e34:	2101      	movs	r1, #1
 8000e36:	430a      	orrs	r2, r1
 8000e38:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e3a:	f7ff fc75 	bl	8000728 <HAL_GetTick>
 8000e3e:	0003      	movs	r3, r0
 8000e40:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e42:	e008      	b.n	8000e56 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e44:	f7ff fc70 	bl	8000728 <HAL_GetTick>
 8000e48:	0002      	movs	r2, r0
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d901      	bls.n	8000e56 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000e52:	2303      	movs	r3, #3
 8000e54:	e250      	b.n	80012f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e56:	4b36      	ldr	r3, [pc, #216]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	d0f1      	beq.n	8000e44 <HAL_RCC_OscConfig+0x24c>
 8000e60:	e018      	b.n	8000e94 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e62:	4b33      	ldr	r3, [pc, #204]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000e64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e66:	4b32      	ldr	r3, [pc, #200]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000e68:	2101      	movs	r1, #1
 8000e6a:	438a      	bics	r2, r1
 8000e6c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e6e:	f7ff fc5b 	bl	8000728 <HAL_GetTick>
 8000e72:	0003      	movs	r3, r0
 8000e74:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e76:	e008      	b.n	8000e8a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e78:	f7ff fc56 	bl	8000728 <HAL_GetTick>
 8000e7c:	0002      	movs	r2, r0
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d901      	bls.n	8000e8a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8000e86:	2303      	movs	r3, #3
 8000e88:	e236      	b.n	80012f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e8a:	4b29      	ldr	r3, [pc, #164]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8e:	2202      	movs	r2, #2
 8000e90:	4013      	ands	r3, r2
 8000e92:	d1f1      	bne.n	8000e78 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2204      	movs	r2, #4
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	d100      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x2a8>
 8000e9e:	e0b5      	b.n	800100c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ea0:	201f      	movs	r0, #31
 8000ea2:	183b      	adds	r3, r7, r0
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ea8:	4b21      	ldr	r3, [pc, #132]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000eaa:	69da      	ldr	r2, [r3, #28]
 8000eac:	2380      	movs	r3, #128	; 0x80
 8000eae:	055b      	lsls	r3, r3, #21
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	d110      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eb4:	4b1e      	ldr	r3, [pc, #120]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000eb6:	69da      	ldr	r2, [r3, #28]
 8000eb8:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000eba:	2180      	movs	r1, #128	; 0x80
 8000ebc:	0549      	lsls	r1, r1, #21
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	61da      	str	r2, [r3, #28]
 8000ec2:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000ec4:	69da      	ldr	r2, [r3, #28]
 8000ec6:	2380      	movs	r3, #128	; 0x80
 8000ec8:	055b      	lsls	r3, r3, #21
 8000eca:	4013      	ands	r3, r2
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000ed0:	183b      	adds	r3, r7, r0
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ed6:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <HAL_RCC_OscConfig+0x344>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	2380      	movs	r3, #128	; 0x80
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	4013      	ands	r3, r2
 8000ee0:	d11a      	bne.n	8000f18 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ee2:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <HAL_RCC_OscConfig+0x344>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <HAL_RCC_OscConfig+0x344>)
 8000ee8:	2180      	movs	r1, #128	; 0x80
 8000eea:	0049      	lsls	r1, r1, #1
 8000eec:	430a      	orrs	r2, r1
 8000eee:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ef0:	f7ff fc1a 	bl	8000728 <HAL_GetTick>
 8000ef4:	0003      	movs	r3, r0
 8000ef6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ef8:	e008      	b.n	8000f0c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000efa:	f7ff fc15 	bl	8000728 <HAL_GetTick>
 8000efe:	0002      	movs	r2, r0
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	2b64      	cmp	r3, #100	; 0x64
 8000f06:	d901      	bls.n	8000f0c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e1f5      	b.n	80012f8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <HAL_RCC_OscConfig+0x344>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	2380      	movs	r3, #128	; 0x80
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	4013      	ands	r3, r2
 8000f16:	d0f0      	beq.n	8000efa <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d10f      	bne.n	8000f40 <HAL_RCC_OscConfig+0x348>
 8000f20:	4b03      	ldr	r3, [pc, #12]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000f22:	6a1a      	ldr	r2, [r3, #32]
 8000f24:	4b02      	ldr	r3, [pc, #8]	; (8000f30 <HAL_RCC_OscConfig+0x338>)
 8000f26:	2101      	movs	r1, #1
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	621a      	str	r2, [r3, #32]
 8000f2c:	e036      	b.n	8000f9c <HAL_RCC_OscConfig+0x3a4>
 8000f2e:	46c0      	nop			; (mov r8, r8)
 8000f30:	40021000 	.word	0x40021000
 8000f34:	fffeffff 	.word	0xfffeffff
 8000f38:	fffbffff 	.word	0xfffbffff
 8000f3c:	40007000 	.word	0x40007000
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d10c      	bne.n	8000f62 <HAL_RCC_OscConfig+0x36a>
 8000f48:	4bca      	ldr	r3, [pc, #808]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 8000f4a:	6a1a      	ldr	r2, [r3, #32]
 8000f4c:	4bc9      	ldr	r3, [pc, #804]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 8000f4e:	2101      	movs	r1, #1
 8000f50:	438a      	bics	r2, r1
 8000f52:	621a      	str	r2, [r3, #32]
 8000f54:	4bc7      	ldr	r3, [pc, #796]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 8000f56:	6a1a      	ldr	r2, [r3, #32]
 8000f58:	4bc6      	ldr	r3, [pc, #792]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 8000f5a:	2104      	movs	r1, #4
 8000f5c:	438a      	bics	r2, r1
 8000f5e:	621a      	str	r2, [r3, #32]
 8000f60:	e01c      	b.n	8000f9c <HAL_RCC_OscConfig+0x3a4>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	2b05      	cmp	r3, #5
 8000f68:	d10c      	bne.n	8000f84 <HAL_RCC_OscConfig+0x38c>
 8000f6a:	4bc2      	ldr	r3, [pc, #776]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 8000f6c:	6a1a      	ldr	r2, [r3, #32]
 8000f6e:	4bc1      	ldr	r3, [pc, #772]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 8000f70:	2104      	movs	r1, #4
 8000f72:	430a      	orrs	r2, r1
 8000f74:	621a      	str	r2, [r3, #32]
 8000f76:	4bbf      	ldr	r3, [pc, #764]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 8000f78:	6a1a      	ldr	r2, [r3, #32]
 8000f7a:	4bbe      	ldr	r3, [pc, #760]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	621a      	str	r2, [r3, #32]
 8000f82:	e00b      	b.n	8000f9c <HAL_RCC_OscConfig+0x3a4>
 8000f84:	4bbb      	ldr	r3, [pc, #748]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 8000f86:	6a1a      	ldr	r2, [r3, #32]
 8000f88:	4bba      	ldr	r3, [pc, #744]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	438a      	bics	r2, r1
 8000f8e:	621a      	str	r2, [r3, #32]
 8000f90:	4bb8      	ldr	r3, [pc, #736]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 8000f92:	6a1a      	ldr	r2, [r3, #32]
 8000f94:	4bb7      	ldr	r3, [pc, #732]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 8000f96:	2104      	movs	r1, #4
 8000f98:	438a      	bics	r2, r1
 8000f9a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d014      	beq.n	8000fce <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fa4:	f7ff fbc0 	bl	8000728 <HAL_GetTick>
 8000fa8:	0003      	movs	r3, r0
 8000faa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fac:	e009      	b.n	8000fc2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fae:	f7ff fbbb 	bl	8000728 <HAL_GetTick>
 8000fb2:	0002      	movs	r2, r0
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	4aaf      	ldr	r2, [pc, #700]	; (8001278 <HAL_RCC_OscConfig+0x680>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d901      	bls.n	8000fc2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e19a      	b.n	80012f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fc2:	4bac      	ldr	r3, [pc, #688]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 8000fc4:	6a1b      	ldr	r3, [r3, #32]
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	4013      	ands	r3, r2
 8000fca:	d0f0      	beq.n	8000fae <HAL_RCC_OscConfig+0x3b6>
 8000fcc:	e013      	b.n	8000ff6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fce:	f7ff fbab 	bl	8000728 <HAL_GetTick>
 8000fd2:	0003      	movs	r3, r0
 8000fd4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fd6:	e009      	b.n	8000fec <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fd8:	f7ff fba6 	bl	8000728 <HAL_GetTick>
 8000fdc:	0002      	movs	r2, r0
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	4aa5      	ldr	r2, [pc, #660]	; (8001278 <HAL_RCC_OscConfig+0x680>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d901      	bls.n	8000fec <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e185      	b.n	80012f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fec:	4ba1      	ldr	r3, [pc, #644]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 8000fee:	6a1b      	ldr	r3, [r3, #32]
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	d1f0      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000ff6:	231f      	movs	r3, #31
 8000ff8:	18fb      	adds	r3, r7, r3
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d105      	bne.n	800100c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001000:	4b9c      	ldr	r3, [pc, #624]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 8001002:	69da      	ldr	r2, [r3, #28]
 8001004:	4b9b      	ldr	r3, [pc, #620]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 8001006:	499d      	ldr	r1, [pc, #628]	; (800127c <HAL_RCC_OscConfig+0x684>)
 8001008:	400a      	ands	r2, r1
 800100a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2210      	movs	r2, #16
 8001012:	4013      	ands	r3, r2
 8001014:	d063      	beq.n	80010de <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d12a      	bne.n	8001074 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800101e:	4b95      	ldr	r3, [pc, #596]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 8001020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001022:	4b94      	ldr	r3, [pc, #592]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 8001024:	2104      	movs	r1, #4
 8001026:	430a      	orrs	r2, r1
 8001028:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800102a:	4b92      	ldr	r3, [pc, #584]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 800102c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800102e:	4b91      	ldr	r3, [pc, #580]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 8001030:	2101      	movs	r1, #1
 8001032:	430a      	orrs	r2, r1
 8001034:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001036:	f7ff fb77 	bl	8000728 <HAL_GetTick>
 800103a:	0003      	movs	r3, r0
 800103c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800103e:	e008      	b.n	8001052 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001040:	f7ff fb72 	bl	8000728 <HAL_GetTick>
 8001044:	0002      	movs	r2, r0
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b02      	cmp	r3, #2
 800104c:	d901      	bls.n	8001052 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e152      	b.n	80012f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001052:	4b88      	ldr	r3, [pc, #544]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 8001054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001056:	2202      	movs	r2, #2
 8001058:	4013      	ands	r3, r2
 800105a:	d0f1      	beq.n	8001040 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800105c:	4b85      	ldr	r3, [pc, #532]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 800105e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001060:	22f8      	movs	r2, #248	; 0xf8
 8001062:	4393      	bics	r3, r2
 8001064:	0019      	movs	r1, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	00da      	lsls	r2, r3, #3
 800106c:	4b81      	ldr	r3, [pc, #516]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 800106e:	430a      	orrs	r2, r1
 8001070:	635a      	str	r2, [r3, #52]	; 0x34
 8001072:	e034      	b.n	80010de <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	3305      	adds	r3, #5
 800107a:	d111      	bne.n	80010a0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800107c:	4b7d      	ldr	r3, [pc, #500]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 800107e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001080:	4b7c      	ldr	r3, [pc, #496]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 8001082:	2104      	movs	r1, #4
 8001084:	438a      	bics	r2, r1
 8001086:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001088:	4b7a      	ldr	r3, [pc, #488]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 800108a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800108c:	22f8      	movs	r2, #248	; 0xf8
 800108e:	4393      	bics	r3, r2
 8001090:	0019      	movs	r1, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	699b      	ldr	r3, [r3, #24]
 8001096:	00da      	lsls	r2, r3, #3
 8001098:	4b76      	ldr	r3, [pc, #472]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 800109a:	430a      	orrs	r2, r1
 800109c:	635a      	str	r2, [r3, #52]	; 0x34
 800109e:	e01e      	b.n	80010de <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010a0:	4b74      	ldr	r3, [pc, #464]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 80010a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010a4:	4b73      	ldr	r3, [pc, #460]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 80010a6:	2104      	movs	r1, #4
 80010a8:	430a      	orrs	r2, r1
 80010aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80010ac:	4b71      	ldr	r3, [pc, #452]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 80010ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010b0:	4b70      	ldr	r3, [pc, #448]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 80010b2:	2101      	movs	r1, #1
 80010b4:	438a      	bics	r2, r1
 80010b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010b8:	f7ff fb36 	bl	8000728 <HAL_GetTick>
 80010bc:	0003      	movs	r3, r0
 80010be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80010c0:	e008      	b.n	80010d4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010c2:	f7ff fb31 	bl	8000728 <HAL_GetTick>
 80010c6:	0002      	movs	r2, r0
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e111      	b.n	80012f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80010d4:	4b67      	ldr	r3, [pc, #412]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 80010d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010d8:	2202      	movs	r2, #2
 80010da:	4013      	ands	r3, r2
 80010dc:	d1f1      	bne.n	80010c2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2220      	movs	r2, #32
 80010e4:	4013      	ands	r3, r2
 80010e6:	d05c      	beq.n	80011a2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80010e8:	4b62      	ldr	r3, [pc, #392]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	220c      	movs	r2, #12
 80010ee:	4013      	ands	r3, r2
 80010f0:	2b0c      	cmp	r3, #12
 80010f2:	d00e      	beq.n	8001112 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80010f4:	4b5f      	ldr	r3, [pc, #380]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	220c      	movs	r2, #12
 80010fa:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80010fc:	2b08      	cmp	r3, #8
 80010fe:	d114      	bne.n	800112a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001100:	4b5c      	ldr	r3, [pc, #368]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	23c0      	movs	r3, #192	; 0xc0
 8001106:	025b      	lsls	r3, r3, #9
 8001108:	401a      	ands	r2, r3
 800110a:	23c0      	movs	r3, #192	; 0xc0
 800110c:	025b      	lsls	r3, r3, #9
 800110e:	429a      	cmp	r2, r3
 8001110:	d10b      	bne.n	800112a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001112:	4b58      	ldr	r3, [pc, #352]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 8001114:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	025b      	lsls	r3, r3, #9
 800111a:	4013      	ands	r3, r2
 800111c:	d040      	beq.n	80011a0 <HAL_RCC_OscConfig+0x5a8>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a1b      	ldr	r3, [r3, #32]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d03c      	beq.n	80011a0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e0e6      	b.n	80012f8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6a1b      	ldr	r3, [r3, #32]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d01b      	beq.n	800116a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001132:	4b50      	ldr	r3, [pc, #320]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 8001134:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001136:	4b4f      	ldr	r3, [pc, #316]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 8001138:	2180      	movs	r1, #128	; 0x80
 800113a:	0249      	lsls	r1, r1, #9
 800113c:	430a      	orrs	r2, r1
 800113e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001140:	f7ff faf2 	bl	8000728 <HAL_GetTick>
 8001144:	0003      	movs	r3, r0
 8001146:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001148:	e008      	b.n	800115c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800114a:	f7ff faed 	bl	8000728 <HAL_GetTick>
 800114e:	0002      	movs	r2, r0
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	2b02      	cmp	r3, #2
 8001156:	d901      	bls.n	800115c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	e0cd      	b.n	80012f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800115c:	4b45      	ldr	r3, [pc, #276]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 800115e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001160:	2380      	movs	r3, #128	; 0x80
 8001162:	025b      	lsls	r3, r3, #9
 8001164:	4013      	ands	r3, r2
 8001166:	d0f0      	beq.n	800114a <HAL_RCC_OscConfig+0x552>
 8001168:	e01b      	b.n	80011a2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800116a:	4b42      	ldr	r3, [pc, #264]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 800116c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800116e:	4b41      	ldr	r3, [pc, #260]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 8001170:	4943      	ldr	r1, [pc, #268]	; (8001280 <HAL_RCC_OscConfig+0x688>)
 8001172:	400a      	ands	r2, r1
 8001174:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001176:	f7ff fad7 	bl	8000728 <HAL_GetTick>
 800117a:	0003      	movs	r3, r0
 800117c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001180:	f7ff fad2 	bl	8000728 <HAL_GetTick>
 8001184:	0002      	movs	r2, r0
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e0b2      	b.n	80012f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001192:	4b38      	ldr	r3, [pc, #224]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 8001194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001196:	2380      	movs	r3, #128	; 0x80
 8001198:	025b      	lsls	r3, r3, #9
 800119a:	4013      	ands	r3, r2
 800119c:	d1f0      	bne.n	8001180 <HAL_RCC_OscConfig+0x588>
 800119e:	e000      	b.n	80011a2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80011a0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d100      	bne.n	80011ac <HAL_RCC_OscConfig+0x5b4>
 80011aa:	e0a4      	b.n	80012f6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011ac:	4b31      	ldr	r3, [pc, #196]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	220c      	movs	r2, #12
 80011b2:	4013      	ands	r3, r2
 80011b4:	2b08      	cmp	r3, #8
 80011b6:	d100      	bne.n	80011ba <HAL_RCC_OscConfig+0x5c2>
 80011b8:	e078      	b.n	80012ac <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d14c      	bne.n	800125c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011c2:	4b2c      	ldr	r3, [pc, #176]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	4b2b      	ldr	r3, [pc, #172]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 80011c8:	492e      	ldr	r1, [pc, #184]	; (8001284 <HAL_RCC_OscConfig+0x68c>)
 80011ca:	400a      	ands	r2, r1
 80011cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ce:	f7ff faab 	bl	8000728 <HAL_GetTick>
 80011d2:	0003      	movs	r3, r0
 80011d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011d8:	f7ff faa6 	bl	8000728 <HAL_GetTick>
 80011dc:	0002      	movs	r2, r0
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e086      	b.n	80012f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ea:	4b22      	ldr	r3, [pc, #136]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	2380      	movs	r3, #128	; 0x80
 80011f0:	049b      	lsls	r3, r3, #18
 80011f2:	4013      	ands	r3, r2
 80011f4:	d1f0      	bne.n	80011d8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011f6:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 80011f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fa:	220f      	movs	r2, #15
 80011fc:	4393      	bics	r3, r2
 80011fe:	0019      	movs	r1, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001204:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 8001206:	430a      	orrs	r2, r1
 8001208:	62da      	str	r2, [r3, #44]	; 0x2c
 800120a:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	4a1e      	ldr	r2, [pc, #120]	; (8001288 <HAL_RCC_OscConfig+0x690>)
 8001210:	4013      	ands	r3, r2
 8001212:	0019      	movs	r1, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121c:	431a      	orrs	r2, r3
 800121e:	4b15      	ldr	r3, [pc, #84]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 8001220:	430a      	orrs	r2, r1
 8001222:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001224:	4b13      	ldr	r3, [pc, #76]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 800122a:	2180      	movs	r1, #128	; 0x80
 800122c:	0449      	lsls	r1, r1, #17
 800122e:	430a      	orrs	r2, r1
 8001230:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001232:	f7ff fa79 	bl	8000728 <HAL_GetTick>
 8001236:	0003      	movs	r3, r0
 8001238:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800123a:	e008      	b.n	800124e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800123c:	f7ff fa74 	bl	8000728 <HAL_GetTick>
 8001240:	0002      	movs	r2, r0
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e054      	b.n	80012f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	2380      	movs	r3, #128	; 0x80
 8001254:	049b      	lsls	r3, r3, #18
 8001256:	4013      	ands	r3, r2
 8001258:	d0f0      	beq.n	800123c <HAL_RCC_OscConfig+0x644>
 800125a:	e04c      	b.n	80012f6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800125c:	4b05      	ldr	r3, [pc, #20]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4b04      	ldr	r3, [pc, #16]	; (8001274 <HAL_RCC_OscConfig+0x67c>)
 8001262:	4908      	ldr	r1, [pc, #32]	; (8001284 <HAL_RCC_OscConfig+0x68c>)
 8001264:	400a      	ands	r2, r1
 8001266:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001268:	f7ff fa5e 	bl	8000728 <HAL_GetTick>
 800126c:	0003      	movs	r3, r0
 800126e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001270:	e015      	b.n	800129e <HAL_RCC_OscConfig+0x6a6>
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	40021000 	.word	0x40021000
 8001278:	00001388 	.word	0x00001388
 800127c:	efffffff 	.word	0xefffffff
 8001280:	fffeffff 	.word	0xfffeffff
 8001284:	feffffff 	.word	0xfeffffff
 8001288:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800128c:	f7ff fa4c 	bl	8000728 <HAL_GetTick>
 8001290:	0002      	movs	r2, r0
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b02      	cmp	r3, #2
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e02c      	b.n	80012f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <HAL_RCC_OscConfig+0x708>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	2380      	movs	r3, #128	; 0x80
 80012a4:	049b      	lsls	r3, r3, #18
 80012a6:	4013      	ands	r3, r2
 80012a8:	d1f0      	bne.n	800128c <HAL_RCC_OscConfig+0x694>
 80012aa:	e024      	b.n	80012f6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d101      	bne.n	80012b8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e01f      	b.n	80012f8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <HAL_RCC_OscConfig+0x708>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80012be:	4b10      	ldr	r3, [pc, #64]	; (8001300 <HAL_RCC_OscConfig+0x708>)
 80012c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012c4:	697a      	ldr	r2, [r7, #20]
 80012c6:	23c0      	movs	r3, #192	; 0xc0
 80012c8:	025b      	lsls	r3, r3, #9
 80012ca:	401a      	ands	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d10e      	bne.n	80012f2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	220f      	movs	r2, #15
 80012d8:	401a      	ands	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012de:	429a      	cmp	r2, r3
 80012e0:	d107      	bne.n	80012f2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	23f0      	movs	r3, #240	; 0xf0
 80012e6:	039b      	lsls	r3, r3, #14
 80012e8:	401a      	ands	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d001      	beq.n	80012f6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e000      	b.n	80012f8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	0018      	movs	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	b008      	add	sp, #32
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40021000 	.word	0x40021000

08001304 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d101      	bne.n	8001318 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e0bf      	b.n	8001498 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001318:	4b61      	ldr	r3, [pc, #388]	; (80014a0 <HAL_RCC_ClockConfig+0x19c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2201      	movs	r2, #1
 800131e:	4013      	ands	r3, r2
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	429a      	cmp	r2, r3
 8001324:	d911      	bls.n	800134a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001326:	4b5e      	ldr	r3, [pc, #376]	; (80014a0 <HAL_RCC_ClockConfig+0x19c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2201      	movs	r2, #1
 800132c:	4393      	bics	r3, r2
 800132e:	0019      	movs	r1, r3
 8001330:	4b5b      	ldr	r3, [pc, #364]	; (80014a0 <HAL_RCC_ClockConfig+0x19c>)
 8001332:	683a      	ldr	r2, [r7, #0]
 8001334:	430a      	orrs	r2, r1
 8001336:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001338:	4b59      	ldr	r3, [pc, #356]	; (80014a0 <HAL_RCC_ClockConfig+0x19c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2201      	movs	r2, #1
 800133e:	4013      	ands	r3, r2
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	429a      	cmp	r2, r3
 8001344:	d001      	beq.n	800134a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e0a6      	b.n	8001498 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2202      	movs	r2, #2
 8001350:	4013      	ands	r3, r2
 8001352:	d015      	beq.n	8001380 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2204      	movs	r2, #4
 800135a:	4013      	ands	r3, r2
 800135c:	d006      	beq.n	800136c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800135e:	4b51      	ldr	r3, [pc, #324]	; (80014a4 <HAL_RCC_ClockConfig+0x1a0>)
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	4b50      	ldr	r3, [pc, #320]	; (80014a4 <HAL_RCC_ClockConfig+0x1a0>)
 8001364:	21e0      	movs	r1, #224	; 0xe0
 8001366:	00c9      	lsls	r1, r1, #3
 8001368:	430a      	orrs	r2, r1
 800136a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800136c:	4b4d      	ldr	r3, [pc, #308]	; (80014a4 <HAL_RCC_ClockConfig+0x1a0>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	22f0      	movs	r2, #240	; 0xf0
 8001372:	4393      	bics	r3, r2
 8001374:	0019      	movs	r1, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689a      	ldr	r2, [r3, #8]
 800137a:	4b4a      	ldr	r3, [pc, #296]	; (80014a4 <HAL_RCC_ClockConfig+0x1a0>)
 800137c:	430a      	orrs	r2, r1
 800137e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2201      	movs	r2, #1
 8001386:	4013      	ands	r3, r2
 8001388:	d04c      	beq.n	8001424 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d107      	bne.n	80013a2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001392:	4b44      	ldr	r3, [pc, #272]	; (80014a4 <HAL_RCC_ClockConfig+0x1a0>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	2380      	movs	r3, #128	; 0x80
 8001398:	029b      	lsls	r3, r3, #10
 800139a:	4013      	ands	r3, r2
 800139c:	d120      	bne.n	80013e0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e07a      	b.n	8001498 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d107      	bne.n	80013ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013aa:	4b3e      	ldr	r3, [pc, #248]	; (80014a4 <HAL_RCC_ClockConfig+0x1a0>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	2380      	movs	r3, #128	; 0x80
 80013b0:	049b      	lsls	r3, r3, #18
 80013b2:	4013      	ands	r3, r2
 80013b4:	d114      	bne.n	80013e0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e06e      	b.n	8001498 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b03      	cmp	r3, #3
 80013c0:	d107      	bne.n	80013d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80013c2:	4b38      	ldr	r3, [pc, #224]	; (80014a4 <HAL_RCC_ClockConfig+0x1a0>)
 80013c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013c6:	2380      	movs	r3, #128	; 0x80
 80013c8:	025b      	lsls	r3, r3, #9
 80013ca:	4013      	ands	r3, r2
 80013cc:	d108      	bne.n	80013e0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e062      	b.n	8001498 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d2:	4b34      	ldr	r3, [pc, #208]	; (80014a4 <HAL_RCC_ClockConfig+0x1a0>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2202      	movs	r2, #2
 80013d8:	4013      	ands	r3, r2
 80013da:	d101      	bne.n	80013e0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e05b      	b.n	8001498 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013e0:	4b30      	ldr	r3, [pc, #192]	; (80014a4 <HAL_RCC_ClockConfig+0x1a0>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2203      	movs	r2, #3
 80013e6:	4393      	bics	r3, r2
 80013e8:	0019      	movs	r1, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	4b2d      	ldr	r3, [pc, #180]	; (80014a4 <HAL_RCC_ClockConfig+0x1a0>)
 80013f0:	430a      	orrs	r2, r1
 80013f2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013f4:	f7ff f998 	bl	8000728 <HAL_GetTick>
 80013f8:	0003      	movs	r3, r0
 80013fa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013fc:	e009      	b.n	8001412 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013fe:	f7ff f993 	bl	8000728 <HAL_GetTick>
 8001402:	0002      	movs	r2, r0
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	4a27      	ldr	r2, [pc, #156]	; (80014a8 <HAL_RCC_ClockConfig+0x1a4>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e042      	b.n	8001498 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001412:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <HAL_RCC_ClockConfig+0x1a0>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	220c      	movs	r2, #12
 8001418:	401a      	ands	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	429a      	cmp	r2, r3
 8001422:	d1ec      	bne.n	80013fe <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001424:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <HAL_RCC_ClockConfig+0x19c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2201      	movs	r2, #1
 800142a:	4013      	ands	r3, r2
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	429a      	cmp	r2, r3
 8001430:	d211      	bcs.n	8001456 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001432:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <HAL_RCC_ClockConfig+0x19c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2201      	movs	r2, #1
 8001438:	4393      	bics	r3, r2
 800143a:	0019      	movs	r1, r3
 800143c:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <HAL_RCC_ClockConfig+0x19c>)
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	430a      	orrs	r2, r1
 8001442:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001444:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <HAL_RCC_ClockConfig+0x19c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2201      	movs	r2, #1
 800144a:	4013      	ands	r3, r2
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	429a      	cmp	r2, r3
 8001450:	d001      	beq.n	8001456 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e020      	b.n	8001498 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2204      	movs	r2, #4
 800145c:	4013      	ands	r3, r2
 800145e:	d009      	beq.n	8001474 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001460:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <HAL_RCC_ClockConfig+0x1a0>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	4a11      	ldr	r2, [pc, #68]	; (80014ac <HAL_RCC_ClockConfig+0x1a8>)
 8001466:	4013      	ands	r3, r2
 8001468:	0019      	movs	r1, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	68da      	ldr	r2, [r3, #12]
 800146e:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <HAL_RCC_ClockConfig+0x1a0>)
 8001470:	430a      	orrs	r2, r1
 8001472:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001474:	f000 f820 	bl	80014b8 <HAL_RCC_GetSysClockFreq>
 8001478:	0001      	movs	r1, r0
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <HAL_RCC_ClockConfig+0x1a0>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	091b      	lsrs	r3, r3, #4
 8001480:	220f      	movs	r2, #15
 8001482:	4013      	ands	r3, r2
 8001484:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <HAL_RCC_ClockConfig+0x1ac>)
 8001486:	5cd3      	ldrb	r3, [r2, r3]
 8001488:	000a      	movs	r2, r1
 800148a:	40da      	lsrs	r2, r3
 800148c:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <HAL_RCC_ClockConfig+0x1b0>)
 800148e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001490:	2003      	movs	r0, #3
 8001492:	f7ff f85d 	bl	8000550 <HAL_InitTick>
  
  return HAL_OK;
 8001496:	2300      	movs	r3, #0
}
 8001498:	0018      	movs	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	b004      	add	sp, #16
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40022000 	.word	0x40022000
 80014a4:	40021000 	.word	0x40021000
 80014a8:	00001388 	.word	0x00001388
 80014ac:	fffff8ff 	.word	0xfffff8ff
 80014b0:	080049b0 	.word	0x080049b0
 80014b4:	20000000 	.word	0x20000000

080014b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014b8:	b590      	push	{r4, r7, lr}
 80014ba:	b08f      	sub	sp, #60	; 0x3c
 80014bc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80014be:	2314      	movs	r3, #20
 80014c0:	18fb      	adds	r3, r7, r3
 80014c2:	4a38      	ldr	r2, [pc, #224]	; (80015a4 <HAL_RCC_GetSysClockFreq+0xec>)
 80014c4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80014c6:	c313      	stmia	r3!, {r0, r1, r4}
 80014c8:	6812      	ldr	r2, [r2, #0]
 80014ca:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	4a36      	ldr	r2, [pc, #216]	; (80015a8 <HAL_RCC_GetSysClockFreq+0xf0>)
 80014d0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80014d2:	c313      	stmia	r3!, {r0, r1, r4}
 80014d4:	6812      	ldr	r2, [r2, #0]
 80014d6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014d8:	2300      	movs	r3, #0
 80014da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014dc:	2300      	movs	r3, #0
 80014de:	62bb      	str	r3, [r7, #40]	; 0x28
 80014e0:	2300      	movs	r3, #0
 80014e2:	637b      	str	r3, [r7, #52]	; 0x34
 80014e4:	2300      	movs	r3, #0
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80014e8:	2300      	movs	r3, #0
 80014ea:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80014ec:	4b2f      	ldr	r3, [pc, #188]	; (80015ac <HAL_RCC_GetSysClockFreq+0xf4>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f4:	220c      	movs	r2, #12
 80014f6:	4013      	ands	r3, r2
 80014f8:	2b0c      	cmp	r3, #12
 80014fa:	d047      	beq.n	800158c <HAL_RCC_GetSysClockFreq+0xd4>
 80014fc:	d849      	bhi.n	8001592 <HAL_RCC_GetSysClockFreq+0xda>
 80014fe:	2b04      	cmp	r3, #4
 8001500:	d002      	beq.n	8001508 <HAL_RCC_GetSysClockFreq+0x50>
 8001502:	2b08      	cmp	r3, #8
 8001504:	d003      	beq.n	800150e <HAL_RCC_GetSysClockFreq+0x56>
 8001506:	e044      	b.n	8001592 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001508:	4b29      	ldr	r3, [pc, #164]	; (80015b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800150a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800150c:	e044      	b.n	8001598 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800150e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001510:	0c9b      	lsrs	r3, r3, #18
 8001512:	220f      	movs	r2, #15
 8001514:	4013      	ands	r3, r2
 8001516:	2214      	movs	r2, #20
 8001518:	18ba      	adds	r2, r7, r2
 800151a:	5cd3      	ldrb	r3, [r2, r3]
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800151e:	4b23      	ldr	r3, [pc, #140]	; (80015ac <HAL_RCC_GetSysClockFreq+0xf4>)
 8001520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001522:	220f      	movs	r2, #15
 8001524:	4013      	ands	r3, r2
 8001526:	1d3a      	adds	r2, r7, #4
 8001528:	5cd3      	ldrb	r3, [r2, r3]
 800152a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800152c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800152e:	23c0      	movs	r3, #192	; 0xc0
 8001530:	025b      	lsls	r3, r3, #9
 8001532:	401a      	ands	r2, r3
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	025b      	lsls	r3, r3, #9
 8001538:	429a      	cmp	r2, r3
 800153a:	d109      	bne.n	8001550 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800153c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800153e:	481c      	ldr	r0, [pc, #112]	; (80015b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001540:	f7fe fde2 	bl	8000108 <__udivsi3>
 8001544:	0003      	movs	r3, r0
 8001546:	001a      	movs	r2, r3
 8001548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154a:	4353      	muls	r3, r2
 800154c:	637b      	str	r3, [r7, #52]	; 0x34
 800154e:	e01a      	b.n	8001586 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001552:	23c0      	movs	r3, #192	; 0xc0
 8001554:	025b      	lsls	r3, r3, #9
 8001556:	401a      	ands	r2, r3
 8001558:	23c0      	movs	r3, #192	; 0xc0
 800155a:	025b      	lsls	r3, r3, #9
 800155c:	429a      	cmp	r2, r3
 800155e:	d109      	bne.n	8001574 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001560:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001562:	4814      	ldr	r0, [pc, #80]	; (80015b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001564:	f7fe fdd0 	bl	8000108 <__udivsi3>
 8001568:	0003      	movs	r3, r0
 800156a:	001a      	movs	r2, r3
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	4353      	muls	r3, r2
 8001570:	637b      	str	r3, [r7, #52]	; 0x34
 8001572:	e008      	b.n	8001586 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001574:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001576:	480e      	ldr	r0, [pc, #56]	; (80015b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001578:	f7fe fdc6 	bl	8000108 <__udivsi3>
 800157c:	0003      	movs	r3, r0
 800157e:	001a      	movs	r2, r3
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	4353      	muls	r3, r2
 8001584:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001588:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800158a:	e005      	b.n	8001598 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800158c:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800158e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001590:	e002      	b.n	8001598 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001592:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001594:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001596:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800159a:	0018      	movs	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	b00f      	add	sp, #60	; 0x3c
 80015a0:	bd90      	pop	{r4, r7, pc}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	08004930 	.word	0x08004930
 80015a8:	08004940 	.word	0x08004940
 80015ac:	40021000 	.word	0x40021000
 80015b0:	007a1200 	.word	0x007a1200
 80015b4:	02dc6c00 	.word	0x02dc6c00

080015b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015bc:	4b02      	ldr	r3, [pc, #8]	; (80015c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80015be:	681b      	ldr	r3, [r3, #0]
}
 80015c0:	0018      	movs	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	20000000 	.word	0x20000000

080015cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80015d0:	f7ff fff2 	bl	80015b8 <HAL_RCC_GetHCLKFreq>
 80015d4:	0001      	movs	r1, r0
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	0a1b      	lsrs	r3, r3, #8
 80015dc:	2207      	movs	r2, #7
 80015de:	4013      	ands	r3, r2
 80015e0:	4a04      	ldr	r2, [pc, #16]	; (80015f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80015e2:	5cd3      	ldrb	r3, [r2, r3]
 80015e4:	40d9      	lsrs	r1, r3
 80015e6:	000b      	movs	r3, r1
}    
 80015e8:	0018      	movs	r0, r3
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	40021000 	.word	0x40021000
 80015f4:	080049c0 	.word	0x080049c0

080015f8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2207      	movs	r2, #7
 8001606:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001608:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <HAL_RCC_GetClockConfig+0x4c>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2203      	movs	r2, #3
 800160e:	401a      	ands	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001614:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <HAL_RCC_GetClockConfig+0x4c>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	22f0      	movs	r2, #240	; 0xf0
 800161a:	401a      	ands	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8001620:	4b08      	ldr	r3, [pc, #32]	; (8001644 <HAL_RCC_GetClockConfig+0x4c>)
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	23e0      	movs	r3, #224	; 0xe0
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	401a      	ands	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_RCC_GetClockConfig+0x50>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2201      	movs	r2, #1
 8001634:	401a      	ands	r2, r3
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	601a      	str	r2, [r3, #0]
}
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	46bd      	mov	sp, r7
 800163e:	b002      	add	sp, #8
 8001640:	bd80      	pop	{r7, pc}
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	40021000 	.word	0x40021000
 8001648:	40022000 	.word	0x40022000

0800164c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001654:	2300      	movs	r3, #0
 8001656:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	2380      	movs	r3, #128	; 0x80
 8001662:	025b      	lsls	r3, r3, #9
 8001664:	4013      	ands	r3, r2
 8001666:	d100      	bne.n	800166a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001668:	e08e      	b.n	8001788 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800166a:	2017      	movs	r0, #23
 800166c:	183b      	adds	r3, r7, r0
 800166e:	2200      	movs	r2, #0
 8001670:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001672:	4b6e      	ldr	r3, [pc, #440]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001674:	69da      	ldr	r2, [r3, #28]
 8001676:	2380      	movs	r3, #128	; 0x80
 8001678:	055b      	lsls	r3, r3, #21
 800167a:	4013      	ands	r3, r2
 800167c:	d110      	bne.n	80016a0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	4b6b      	ldr	r3, [pc, #428]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001680:	69da      	ldr	r2, [r3, #28]
 8001682:	4b6a      	ldr	r3, [pc, #424]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001684:	2180      	movs	r1, #128	; 0x80
 8001686:	0549      	lsls	r1, r1, #21
 8001688:	430a      	orrs	r2, r1
 800168a:	61da      	str	r2, [r3, #28]
 800168c:	4b67      	ldr	r3, [pc, #412]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800168e:	69da      	ldr	r2, [r3, #28]
 8001690:	2380      	movs	r3, #128	; 0x80
 8001692:	055b      	lsls	r3, r3, #21
 8001694:	4013      	ands	r3, r2
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800169a:	183b      	adds	r3, r7, r0
 800169c:	2201      	movs	r2, #1
 800169e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a0:	4b63      	ldr	r3, [pc, #396]	; (8001830 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	2380      	movs	r3, #128	; 0x80
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	4013      	ands	r3, r2
 80016aa:	d11a      	bne.n	80016e2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ac:	4b60      	ldr	r3, [pc, #384]	; (8001830 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b5f      	ldr	r3, [pc, #380]	; (8001830 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80016b2:	2180      	movs	r1, #128	; 0x80
 80016b4:	0049      	lsls	r1, r1, #1
 80016b6:	430a      	orrs	r2, r1
 80016b8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ba:	f7ff f835 	bl	8000728 <HAL_GetTick>
 80016be:	0003      	movs	r3, r0
 80016c0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c2:	e008      	b.n	80016d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016c4:	f7ff f830 	bl	8000728 <HAL_GetTick>
 80016c8:	0002      	movs	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b64      	cmp	r3, #100	; 0x64
 80016d0:	d901      	bls.n	80016d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e0a6      	b.n	8001824 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d6:	4b56      	ldr	r3, [pc, #344]	; (8001830 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	2380      	movs	r3, #128	; 0x80
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	4013      	ands	r3, r2
 80016e0:	d0f0      	beq.n	80016c4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80016e2:	4b52      	ldr	r3, [pc, #328]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80016e4:	6a1a      	ldr	r2, [r3, #32]
 80016e6:	23c0      	movs	r3, #192	; 0xc0
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4013      	ands	r3, r2
 80016ec:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d034      	beq.n	800175e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	23c0      	movs	r3, #192	; 0xc0
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4013      	ands	r3, r2
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	429a      	cmp	r2, r3
 8001702:	d02c      	beq.n	800175e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001704:	4b49      	ldr	r3, [pc, #292]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	4a4a      	ldr	r2, [pc, #296]	; (8001834 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800170a:	4013      	ands	r3, r2
 800170c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800170e:	4b47      	ldr	r3, [pc, #284]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001710:	6a1a      	ldr	r2, [r3, #32]
 8001712:	4b46      	ldr	r3, [pc, #280]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001714:	2180      	movs	r1, #128	; 0x80
 8001716:	0249      	lsls	r1, r1, #9
 8001718:	430a      	orrs	r2, r1
 800171a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800171c:	4b43      	ldr	r3, [pc, #268]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800171e:	6a1a      	ldr	r2, [r3, #32]
 8001720:	4b42      	ldr	r3, [pc, #264]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001722:	4945      	ldr	r1, [pc, #276]	; (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001724:	400a      	ands	r2, r1
 8001726:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001728:	4b40      	ldr	r3, [pc, #256]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2201      	movs	r2, #1
 8001732:	4013      	ands	r3, r2
 8001734:	d013      	beq.n	800175e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001736:	f7fe fff7 	bl	8000728 <HAL_GetTick>
 800173a:	0003      	movs	r3, r0
 800173c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800173e:	e009      	b.n	8001754 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001740:	f7fe fff2 	bl	8000728 <HAL_GetTick>
 8001744:	0002      	movs	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	4a3c      	ldr	r2, [pc, #240]	; (800183c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d901      	bls.n	8001754 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e067      	b.n	8001824 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001754:	4b35      	ldr	r3, [pc, #212]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001756:	6a1b      	ldr	r3, [r3, #32]
 8001758:	2202      	movs	r2, #2
 800175a:	4013      	ands	r3, r2
 800175c:	d0f0      	beq.n	8001740 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800175e:	4b33      	ldr	r3, [pc, #204]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001760:	6a1b      	ldr	r3, [r3, #32]
 8001762:	4a34      	ldr	r2, [pc, #208]	; (8001834 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001764:	4013      	ands	r3, r2
 8001766:	0019      	movs	r1, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	4b2f      	ldr	r3, [pc, #188]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800176e:	430a      	orrs	r2, r1
 8001770:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001772:	2317      	movs	r3, #23
 8001774:	18fb      	adds	r3, r7, r3
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d105      	bne.n	8001788 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800177c:	4b2b      	ldr	r3, [pc, #172]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800177e:	69da      	ldr	r2, [r3, #28]
 8001780:	4b2a      	ldr	r3, [pc, #168]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001782:	492f      	ldr	r1, [pc, #188]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001784:	400a      	ands	r2, r1
 8001786:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2201      	movs	r2, #1
 800178e:	4013      	ands	r3, r2
 8001790:	d009      	beq.n	80017a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001792:	4b26      	ldr	r3, [pc, #152]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	2203      	movs	r2, #3
 8001798:	4393      	bics	r3, r2
 800179a:	0019      	movs	r1, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	4b22      	ldr	r3, [pc, #136]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017a2:	430a      	orrs	r2, r1
 80017a4:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2202      	movs	r2, #2
 80017ac:	4013      	ands	r3, r2
 80017ae:	d009      	beq.n	80017c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80017b0:	4b1e      	ldr	r3, [pc, #120]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b4:	4a23      	ldr	r2, [pc, #140]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017b6:	4013      	ands	r3, r2
 80017b8:	0019      	movs	r1, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68da      	ldr	r2, [r3, #12]
 80017be:	4b1b      	ldr	r3, [pc, #108]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017c0:	430a      	orrs	r2, r1
 80017c2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2220      	movs	r2, #32
 80017ca:	4013      	ands	r3, r2
 80017cc:	d009      	beq.n	80017e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80017ce:	4b17      	ldr	r3, [pc, #92]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	2210      	movs	r2, #16
 80017d4:	4393      	bics	r3, r2
 80017d6:	0019      	movs	r1, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	691a      	ldr	r2, [r3, #16]
 80017dc:	4b13      	ldr	r3, [pc, #76]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017de:	430a      	orrs	r2, r1
 80017e0:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	2380      	movs	r3, #128	; 0x80
 80017e8:	029b      	lsls	r3, r3, #10
 80017ea:	4013      	ands	r3, r2
 80017ec:	d009      	beq.n	8001802 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80017ee:	4b0f      	ldr	r3, [pc, #60]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	2280      	movs	r2, #128	; 0x80
 80017f4:	4393      	bics	r3, r2
 80017f6:	0019      	movs	r1, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	699a      	ldr	r2, [r3, #24]
 80017fc:	4b0b      	ldr	r3, [pc, #44]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017fe:	430a      	orrs	r2, r1
 8001800:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	2380      	movs	r3, #128	; 0x80
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	4013      	ands	r3, r2
 800180c:	d009      	beq.n	8001822 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800180e:	4b07      	ldr	r3, [pc, #28]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	2240      	movs	r2, #64	; 0x40
 8001814:	4393      	bics	r3, r2
 8001816:	0019      	movs	r1, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	695a      	ldr	r2, [r3, #20]
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800181e:	430a      	orrs	r2, r1
 8001820:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	0018      	movs	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	b006      	add	sp, #24
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40021000 	.word	0x40021000
 8001830:	40007000 	.word	0x40007000
 8001834:	fffffcff 	.word	0xfffffcff
 8001838:	fffeffff 	.word	0xfffeffff
 800183c:	00001388 	.word	0x00001388
 8001840:	efffffff 	.word	0xefffffff
 8001844:	fffcffff 	.word	0xfffcffff

08001848 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e042      	b.n	80018e0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	223d      	movs	r2, #61	; 0x3d
 800185e:	5c9b      	ldrb	r3, [r3, r2]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d107      	bne.n	8001876 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	223c      	movs	r2, #60	; 0x3c
 800186a:	2100      	movs	r1, #0
 800186c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	0018      	movs	r0, r3
 8001872:	f000 f839 	bl	80018e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	223d      	movs	r2, #61	; 0x3d
 800187a:	2102      	movs	r1, #2
 800187c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	3304      	adds	r3, #4
 8001886:	0019      	movs	r1, r3
 8001888:	0010      	movs	r0, r2
 800188a:	f000 f9bd 	bl	8001c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2246      	movs	r2, #70	; 0x46
 8001892:	2101      	movs	r1, #1
 8001894:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	223e      	movs	r2, #62	; 0x3e
 800189a:	2101      	movs	r1, #1
 800189c:	5499      	strb	r1, [r3, r2]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	223f      	movs	r2, #63	; 0x3f
 80018a2:	2101      	movs	r1, #1
 80018a4:	5499      	strb	r1, [r3, r2]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2240      	movs	r2, #64	; 0x40
 80018aa:	2101      	movs	r1, #1
 80018ac:	5499      	strb	r1, [r3, r2]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2241      	movs	r2, #65	; 0x41
 80018b2:	2101      	movs	r1, #1
 80018b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2242      	movs	r2, #66	; 0x42
 80018ba:	2101      	movs	r1, #1
 80018bc:	5499      	strb	r1, [r3, r2]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2243      	movs	r2, #67	; 0x43
 80018c2:	2101      	movs	r1, #1
 80018c4:	5499      	strb	r1, [r3, r2]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2244      	movs	r2, #68	; 0x44
 80018ca:	2101      	movs	r1, #1
 80018cc:	5499      	strb	r1, [r3, r2]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2245      	movs	r2, #69	; 0x45
 80018d2:	2101      	movs	r1, #1
 80018d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	223d      	movs	r2, #61	; 0x3d
 80018da:	2101      	movs	r1, #1
 80018dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	0018      	movs	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	b002      	add	sp, #8
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80018f0:	46c0      	nop			; (mov r8, r8)
 80018f2:	46bd      	mov	sp, r7
 80018f4:	b002      	add	sp, #8
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	223d      	movs	r2, #61	; 0x3d
 8001904:	5c9b      	ldrb	r3, [r3, r2]
 8001906:	b2db      	uxtb	r3, r3
 8001908:	2b01      	cmp	r3, #1
 800190a:	d001      	beq.n	8001910 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e03b      	b.n	8001988 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	223d      	movs	r2, #61	; 0x3d
 8001914:	2102      	movs	r1, #2
 8001916:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68da      	ldr	r2, [r3, #12]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2101      	movs	r1, #1
 8001924:	430a      	orrs	r2, r1
 8001926:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a18      	ldr	r2, [pc, #96]	; (8001990 <HAL_TIM_Base_Start_IT+0x98>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d00f      	beq.n	8001952 <HAL_TIM_Base_Start_IT+0x5a>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	2380      	movs	r3, #128	; 0x80
 8001938:	05db      	lsls	r3, r3, #23
 800193a:	429a      	cmp	r2, r3
 800193c:	d009      	beq.n	8001952 <HAL_TIM_Base_Start_IT+0x5a>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a14      	ldr	r2, [pc, #80]	; (8001994 <HAL_TIM_Base_Start_IT+0x9c>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d004      	beq.n	8001952 <HAL_TIM_Base_Start_IT+0x5a>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a12      	ldr	r2, [pc, #72]	; (8001998 <HAL_TIM_Base_Start_IT+0xa0>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d111      	bne.n	8001976 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	2207      	movs	r2, #7
 800195a:	4013      	ands	r3, r2
 800195c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2b06      	cmp	r3, #6
 8001962:	d010      	beq.n	8001986 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2101      	movs	r1, #1
 8001970:	430a      	orrs	r2, r1
 8001972:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001974:	e007      	b.n	8001986 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2101      	movs	r1, #1
 8001982:	430a      	orrs	r2, r1
 8001984:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	0018      	movs	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	b004      	add	sp, #16
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40012c00 	.word	0x40012c00
 8001994:	40000400 	.word	0x40000400
 8001998:	40014000 	.word	0x40014000

0800199c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	2202      	movs	r2, #2
 80019ac:	4013      	ands	r3, r2
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d124      	bne.n	80019fc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	2202      	movs	r2, #2
 80019ba:	4013      	ands	r3, r2
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d11d      	bne.n	80019fc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2203      	movs	r2, #3
 80019c6:	4252      	negs	r2, r2
 80019c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2201      	movs	r2, #1
 80019ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	2203      	movs	r2, #3
 80019d8:	4013      	ands	r3, r2
 80019da:	d004      	beq.n	80019e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	0018      	movs	r0, r3
 80019e0:	f000 f8fa 	bl	8001bd8 <HAL_TIM_IC_CaptureCallback>
 80019e4:	e007      	b.n	80019f6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	0018      	movs	r0, r3
 80019ea:	f000 f8ed 	bl	8001bc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	0018      	movs	r0, r3
 80019f2:	f000 f8f9 	bl	8001be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	2204      	movs	r2, #4
 8001a04:	4013      	ands	r3, r2
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	d125      	bne.n	8001a56 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	2204      	movs	r2, #4
 8001a12:	4013      	ands	r3, r2
 8001a14:	2b04      	cmp	r3, #4
 8001a16:	d11e      	bne.n	8001a56 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2205      	movs	r2, #5
 8001a1e:	4252      	negs	r2, r2
 8001a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2202      	movs	r2, #2
 8001a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	699a      	ldr	r2, [r3, #24]
 8001a2e:	23c0      	movs	r3, #192	; 0xc0
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4013      	ands	r3, r2
 8001a34:	d004      	beq.n	8001a40 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	0018      	movs	r0, r3
 8001a3a:	f000 f8cd 	bl	8001bd8 <HAL_TIM_IC_CaptureCallback>
 8001a3e:	e007      	b.n	8001a50 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	0018      	movs	r0, r3
 8001a44:	f000 f8c0 	bl	8001bc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	f000 f8cc 	bl	8001be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	2208      	movs	r2, #8
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d124      	bne.n	8001aae <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	2208      	movs	r2, #8
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	2b08      	cmp	r3, #8
 8001a70:	d11d      	bne.n	8001aae <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2209      	movs	r2, #9
 8001a78:	4252      	negs	r2, r2
 8001a7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2204      	movs	r2, #4
 8001a80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	2203      	movs	r2, #3
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	d004      	beq.n	8001a98 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	0018      	movs	r0, r3
 8001a92:	f000 f8a1 	bl	8001bd8 <HAL_TIM_IC_CaptureCallback>
 8001a96:	e007      	b.n	8001aa8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	f000 f894 	bl	8001bc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	f000 f8a0 	bl	8001be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	2210      	movs	r2, #16
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	2b10      	cmp	r3, #16
 8001aba:	d125      	bne.n	8001b08 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	2210      	movs	r2, #16
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	2b10      	cmp	r3, #16
 8001ac8:	d11e      	bne.n	8001b08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2211      	movs	r2, #17
 8001ad0:	4252      	negs	r2, r2
 8001ad2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2208      	movs	r2, #8
 8001ad8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	69da      	ldr	r2, [r3, #28]
 8001ae0:	23c0      	movs	r3, #192	; 0xc0
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	d004      	beq.n	8001af2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	0018      	movs	r0, r3
 8001aec:	f000 f874 	bl	8001bd8 <HAL_TIM_IC_CaptureCallback>
 8001af0:	e007      	b.n	8001b02 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	0018      	movs	r0, r3
 8001af6:	f000 f867 	bl	8001bc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	0018      	movs	r0, r3
 8001afe:	f000 f873 	bl	8001be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	4013      	ands	r3, r2
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d10f      	bne.n	8001b36 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	4013      	ands	r3, r2
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d108      	bne.n	8001b36 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2202      	movs	r2, #2
 8001b2a:	4252      	negs	r2, r2
 8001b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	0018      	movs	r0, r3
 8001b32:	f7fe fc7f 	bl	8000434 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	2280      	movs	r2, #128	; 0x80
 8001b3e:	4013      	ands	r3, r2
 8001b40:	2b80      	cmp	r3, #128	; 0x80
 8001b42:	d10f      	bne.n	8001b64 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	2280      	movs	r2, #128	; 0x80
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	2b80      	cmp	r3, #128	; 0x80
 8001b50:	d108      	bne.n	8001b64 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2281      	movs	r2, #129	; 0x81
 8001b58:	4252      	negs	r2, r2
 8001b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f000 f8da 	bl	8001d18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	2240      	movs	r2, #64	; 0x40
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	2b40      	cmp	r3, #64	; 0x40
 8001b70:	d10f      	bne.n	8001b92 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	2240      	movs	r2, #64	; 0x40
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2b40      	cmp	r3, #64	; 0x40
 8001b7e:	d108      	bne.n	8001b92 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2241      	movs	r2, #65	; 0x41
 8001b86:	4252      	negs	r2, r2
 8001b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f000 f833 	bl	8001bf8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	2220      	movs	r2, #32
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	2b20      	cmp	r3, #32
 8001b9e:	d10f      	bne.n	8001bc0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	2220      	movs	r2, #32
 8001ba8:	4013      	ands	r3, r2
 8001baa:	2b20      	cmp	r3, #32
 8001bac:	d108      	bne.n	8001bc0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2221      	movs	r2, #33	; 0x21
 8001bb4:	4252      	negs	r2, r2
 8001bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	0018      	movs	r0, r3
 8001bbc:	f000 f8a4 	bl	8001d08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001bc0:	46c0      	nop			; (mov r8, r8)
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	b002      	add	sp, #8
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001bd0:	46c0      	nop			; (mov r8, r8)
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	b002      	add	sp, #8
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001be0:	46c0      	nop			; (mov r8, r8)
 8001be2:	46bd      	mov	sp, r7
 8001be4:	b002      	add	sp, #8
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001bf0:	46c0      	nop			; (mov r8, r8)
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	b002      	add	sp, #8
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c00:	46c0      	nop			; (mov r8, r8)
 8001c02:	46bd      	mov	sp, r7
 8001c04:	b002      	add	sp, #8
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a34      	ldr	r2, [pc, #208]	; (8001cec <TIM_Base_SetConfig+0xe4>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d008      	beq.n	8001c32 <TIM_Base_SetConfig+0x2a>
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	2380      	movs	r3, #128	; 0x80
 8001c24:	05db      	lsls	r3, r3, #23
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d003      	beq.n	8001c32 <TIM_Base_SetConfig+0x2a>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a30      	ldr	r2, [pc, #192]	; (8001cf0 <TIM_Base_SetConfig+0xe8>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d108      	bne.n	8001c44 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2270      	movs	r2, #112	; 0x70
 8001c36:	4393      	bics	r3, r2
 8001c38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a29      	ldr	r2, [pc, #164]	; (8001cec <TIM_Base_SetConfig+0xe4>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d018      	beq.n	8001c7e <TIM_Base_SetConfig+0x76>
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	2380      	movs	r3, #128	; 0x80
 8001c50:	05db      	lsls	r3, r3, #23
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d013      	beq.n	8001c7e <TIM_Base_SetConfig+0x76>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a25      	ldr	r2, [pc, #148]	; (8001cf0 <TIM_Base_SetConfig+0xe8>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d00f      	beq.n	8001c7e <TIM_Base_SetConfig+0x76>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a24      	ldr	r2, [pc, #144]	; (8001cf4 <TIM_Base_SetConfig+0xec>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d00b      	beq.n	8001c7e <TIM_Base_SetConfig+0x76>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a23      	ldr	r2, [pc, #140]	; (8001cf8 <TIM_Base_SetConfig+0xf0>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d007      	beq.n	8001c7e <TIM_Base_SetConfig+0x76>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a22      	ldr	r2, [pc, #136]	; (8001cfc <TIM_Base_SetConfig+0xf4>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d003      	beq.n	8001c7e <TIM_Base_SetConfig+0x76>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a21      	ldr	r2, [pc, #132]	; (8001d00 <TIM_Base_SetConfig+0xf8>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d108      	bne.n	8001c90 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	4a20      	ldr	r2, [pc, #128]	; (8001d04 <TIM_Base_SetConfig+0xfc>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2280      	movs	r2, #128	; 0x80
 8001c94:	4393      	bics	r3, r2
 8001c96:	001a      	movs	r2, r3
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a0c      	ldr	r2, [pc, #48]	; (8001cec <TIM_Base_SetConfig+0xe4>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d00b      	beq.n	8001cd6 <TIM_Base_SetConfig+0xce>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a0d      	ldr	r2, [pc, #52]	; (8001cf8 <TIM_Base_SetConfig+0xf0>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d007      	beq.n	8001cd6 <TIM_Base_SetConfig+0xce>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a0c      	ldr	r2, [pc, #48]	; (8001cfc <TIM_Base_SetConfig+0xf4>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d003      	beq.n	8001cd6 <TIM_Base_SetConfig+0xce>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <TIM_Base_SetConfig+0xf8>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d103      	bne.n	8001cde <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	691a      	ldr	r2, [r3, #16]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	615a      	str	r2, [r3, #20]
}
 8001ce4:	46c0      	nop			; (mov r8, r8)
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b004      	add	sp, #16
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40012c00 	.word	0x40012c00
 8001cf0:	40000400 	.word	0x40000400
 8001cf4:	40002000 	.word	0x40002000
 8001cf8:	40014000 	.word	0x40014000
 8001cfc:	40014400 	.word	0x40014400
 8001d00:	40014800 	.word	0x40014800
 8001d04:	fffffcff 	.word	0xfffffcff

08001d08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d10:	46c0      	nop			; (mov r8, r8)
 8001d12:	46bd      	mov	sp, r7
 8001d14:	b002      	add	sp, #8
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d20:	46c0      	nop			; (mov r8, r8)
 8001d22:	46bd      	mov	sp, r7
 8001d24:	b002      	add	sp, #8
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e044      	b.n	8001dc4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d107      	bne.n	8001d52 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2274      	movs	r2, #116	; 0x74
 8001d46:	2100      	movs	r1, #0
 8001d48:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	f7fe fbb3 	bl	80004b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2224      	movs	r2, #36	; 0x24
 8001d56:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2101      	movs	r1, #1
 8001d64:	438a      	bics	r2, r1
 8001d66:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	f000 f830 	bl	8001dd0 <UART_SetConfig>
 8001d70:	0003      	movs	r3, r0
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e024      	b.n	8001dc4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	0018      	movs	r0, r3
 8001d86:	f000 f9ab 	bl	80020e0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	490d      	ldr	r1, [pc, #52]	; (8001dcc <HAL_UART_Init+0xa4>)
 8001d96:	400a      	ands	r2, r1
 8001d98:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	212a      	movs	r1, #42	; 0x2a
 8001da6:	438a      	bics	r2, r1
 8001da8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2101      	movs	r1, #1
 8001db6:	430a      	orrs	r2, r1
 8001db8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	f000 fa43 	bl	8002248 <UART_CheckIdleState>
 8001dc2:	0003      	movs	r3, r0
}
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	b002      	add	sp, #8
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	ffffb7ff 	.word	0xffffb7ff

08001dd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b088      	sub	sp, #32
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001dd8:	231e      	movs	r3, #30
 8001dda:	18fb      	adds	r3, r7, r3
 8001ddc:	2200      	movs	r2, #0
 8001dde:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	431a      	orrs	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4aaf      	ldr	r2, [pc, #700]	; (80020bc <UART_SetConfig+0x2ec>)
 8001e00:	4013      	ands	r3, r2
 8001e02:	0019      	movs	r1, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	4aaa      	ldr	r2, [pc, #680]	; (80020c0 <UART_SetConfig+0x2f0>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	0019      	movs	r1, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	4aa1      	ldr	r2, [pc, #644]	; (80020c4 <UART_SetConfig+0x2f4>)
 8001e3e:	4013      	ands	r3, r2
 8001e40:	0019      	movs	r1, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a9d      	ldr	r2, [pc, #628]	; (80020c8 <UART_SetConfig+0x2f8>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d127      	bne.n	8001ea6 <UART_SetConfig+0xd6>
 8001e56:	4b9d      	ldr	r3, [pc, #628]	; (80020cc <UART_SetConfig+0x2fc>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	2203      	movs	r2, #3
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	2b03      	cmp	r3, #3
 8001e60:	d00d      	beq.n	8001e7e <UART_SetConfig+0xae>
 8001e62:	d81b      	bhi.n	8001e9c <UART_SetConfig+0xcc>
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d014      	beq.n	8001e92 <UART_SetConfig+0xc2>
 8001e68:	d818      	bhi.n	8001e9c <UART_SetConfig+0xcc>
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d002      	beq.n	8001e74 <UART_SetConfig+0xa4>
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d00a      	beq.n	8001e88 <UART_SetConfig+0xb8>
 8001e72:	e013      	b.n	8001e9c <UART_SetConfig+0xcc>
 8001e74:	231f      	movs	r3, #31
 8001e76:	18fb      	adds	r3, r7, r3
 8001e78:	2200      	movs	r2, #0
 8001e7a:	701a      	strb	r2, [r3, #0]
 8001e7c:	e065      	b.n	8001f4a <UART_SetConfig+0x17a>
 8001e7e:	231f      	movs	r3, #31
 8001e80:	18fb      	adds	r3, r7, r3
 8001e82:	2202      	movs	r2, #2
 8001e84:	701a      	strb	r2, [r3, #0]
 8001e86:	e060      	b.n	8001f4a <UART_SetConfig+0x17a>
 8001e88:	231f      	movs	r3, #31
 8001e8a:	18fb      	adds	r3, r7, r3
 8001e8c:	2204      	movs	r2, #4
 8001e8e:	701a      	strb	r2, [r3, #0]
 8001e90:	e05b      	b.n	8001f4a <UART_SetConfig+0x17a>
 8001e92:	231f      	movs	r3, #31
 8001e94:	18fb      	adds	r3, r7, r3
 8001e96:	2208      	movs	r2, #8
 8001e98:	701a      	strb	r2, [r3, #0]
 8001e9a:	e056      	b.n	8001f4a <UART_SetConfig+0x17a>
 8001e9c:	231f      	movs	r3, #31
 8001e9e:	18fb      	adds	r3, r7, r3
 8001ea0:	2210      	movs	r2, #16
 8001ea2:	701a      	strb	r2, [r3, #0]
 8001ea4:	e051      	b.n	8001f4a <UART_SetConfig+0x17a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a89      	ldr	r2, [pc, #548]	; (80020d0 <UART_SetConfig+0x300>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d134      	bne.n	8001f1a <UART_SetConfig+0x14a>
 8001eb0:	4b86      	ldr	r3, [pc, #536]	; (80020cc <UART_SetConfig+0x2fc>)
 8001eb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eb4:	23c0      	movs	r3, #192	; 0xc0
 8001eb6:	029b      	lsls	r3, r3, #10
 8001eb8:	4013      	ands	r3, r2
 8001eba:	22c0      	movs	r2, #192	; 0xc0
 8001ebc:	0292      	lsls	r2, r2, #10
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d017      	beq.n	8001ef2 <UART_SetConfig+0x122>
 8001ec2:	22c0      	movs	r2, #192	; 0xc0
 8001ec4:	0292      	lsls	r2, r2, #10
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d822      	bhi.n	8001f10 <UART_SetConfig+0x140>
 8001eca:	2280      	movs	r2, #128	; 0x80
 8001ecc:	0292      	lsls	r2, r2, #10
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d019      	beq.n	8001f06 <UART_SetConfig+0x136>
 8001ed2:	2280      	movs	r2, #128	; 0x80
 8001ed4:	0292      	lsls	r2, r2, #10
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d81a      	bhi.n	8001f10 <UART_SetConfig+0x140>
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d004      	beq.n	8001ee8 <UART_SetConfig+0x118>
 8001ede:	2280      	movs	r2, #128	; 0x80
 8001ee0:	0252      	lsls	r2, r2, #9
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d00a      	beq.n	8001efc <UART_SetConfig+0x12c>
 8001ee6:	e013      	b.n	8001f10 <UART_SetConfig+0x140>
 8001ee8:	231f      	movs	r3, #31
 8001eea:	18fb      	adds	r3, r7, r3
 8001eec:	2200      	movs	r2, #0
 8001eee:	701a      	strb	r2, [r3, #0]
 8001ef0:	e02b      	b.n	8001f4a <UART_SetConfig+0x17a>
 8001ef2:	231f      	movs	r3, #31
 8001ef4:	18fb      	adds	r3, r7, r3
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	701a      	strb	r2, [r3, #0]
 8001efa:	e026      	b.n	8001f4a <UART_SetConfig+0x17a>
 8001efc:	231f      	movs	r3, #31
 8001efe:	18fb      	adds	r3, r7, r3
 8001f00:	2204      	movs	r2, #4
 8001f02:	701a      	strb	r2, [r3, #0]
 8001f04:	e021      	b.n	8001f4a <UART_SetConfig+0x17a>
 8001f06:	231f      	movs	r3, #31
 8001f08:	18fb      	adds	r3, r7, r3
 8001f0a:	2208      	movs	r2, #8
 8001f0c:	701a      	strb	r2, [r3, #0]
 8001f0e:	e01c      	b.n	8001f4a <UART_SetConfig+0x17a>
 8001f10:	231f      	movs	r3, #31
 8001f12:	18fb      	adds	r3, r7, r3
 8001f14:	2210      	movs	r2, #16
 8001f16:	701a      	strb	r2, [r3, #0]
 8001f18:	e017      	b.n	8001f4a <UART_SetConfig+0x17a>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a6d      	ldr	r2, [pc, #436]	; (80020d4 <UART_SetConfig+0x304>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d104      	bne.n	8001f2e <UART_SetConfig+0x15e>
 8001f24:	231f      	movs	r3, #31
 8001f26:	18fb      	adds	r3, r7, r3
 8001f28:	2200      	movs	r2, #0
 8001f2a:	701a      	strb	r2, [r3, #0]
 8001f2c:	e00d      	b.n	8001f4a <UART_SetConfig+0x17a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a69      	ldr	r2, [pc, #420]	; (80020d8 <UART_SetConfig+0x308>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d104      	bne.n	8001f42 <UART_SetConfig+0x172>
 8001f38:	231f      	movs	r3, #31
 8001f3a:	18fb      	adds	r3, r7, r3
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
 8001f40:	e003      	b.n	8001f4a <UART_SetConfig+0x17a>
 8001f42:	231f      	movs	r3, #31
 8001f44:	18fb      	adds	r3, r7, r3
 8001f46:	2210      	movs	r2, #16
 8001f48:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69da      	ldr	r2, [r3, #28]
 8001f4e:	2380      	movs	r3, #128	; 0x80
 8001f50:	021b      	lsls	r3, r3, #8
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d15d      	bne.n	8002012 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8001f56:	231f      	movs	r3, #31
 8001f58:	18fb      	adds	r3, r7, r3
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	d015      	beq.n	8001f8c <UART_SetConfig+0x1bc>
 8001f60:	dc18      	bgt.n	8001f94 <UART_SetConfig+0x1c4>
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	d00d      	beq.n	8001f82 <UART_SetConfig+0x1b2>
 8001f66:	dc15      	bgt.n	8001f94 <UART_SetConfig+0x1c4>
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d002      	beq.n	8001f72 <UART_SetConfig+0x1a2>
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d005      	beq.n	8001f7c <UART_SetConfig+0x1ac>
 8001f70:	e010      	b.n	8001f94 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f72:	f7ff fb2b 	bl	80015cc <HAL_RCC_GetPCLK1Freq>
 8001f76:	0003      	movs	r3, r0
 8001f78:	61bb      	str	r3, [r7, #24]
        break;
 8001f7a:	e012      	b.n	8001fa2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001f7c:	4b57      	ldr	r3, [pc, #348]	; (80020dc <UART_SetConfig+0x30c>)
 8001f7e:	61bb      	str	r3, [r7, #24]
        break;
 8001f80:	e00f      	b.n	8001fa2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001f82:	f7ff fa99 	bl	80014b8 <HAL_RCC_GetSysClockFreq>
 8001f86:	0003      	movs	r3, r0
 8001f88:	61bb      	str	r3, [r7, #24]
        break;
 8001f8a:	e00a      	b.n	8001fa2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001f8c:	2380      	movs	r3, #128	; 0x80
 8001f8e:	021b      	lsls	r3, r3, #8
 8001f90:	61bb      	str	r3, [r7, #24]
        break;
 8001f92:	e006      	b.n	8001fa2 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8001f94:	2300      	movs	r3, #0
 8001f96:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001f98:	231e      	movs	r3, #30
 8001f9a:	18fb      	adds	r3, r7, r3
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	701a      	strb	r2, [r3, #0]
        break;
 8001fa0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d100      	bne.n	8001faa <UART_SetConfig+0x1da>
 8001fa8:	e07b      	b.n	80020a2 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	005a      	lsls	r2, r3, #1
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	085b      	lsrs	r3, r3, #1
 8001fb4:	18d2      	adds	r2, r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	0019      	movs	r1, r3
 8001fbc:	0010      	movs	r0, r2
 8001fbe:	f7fe f8a3 	bl	8000108 <__udivsi3>
 8001fc2:	0003      	movs	r3, r0
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	2b0f      	cmp	r3, #15
 8001fcc:	d91c      	bls.n	8002008 <UART_SetConfig+0x238>
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	2380      	movs	r3, #128	; 0x80
 8001fd2:	025b      	lsls	r3, r3, #9
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d217      	bcs.n	8002008 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	200e      	movs	r0, #14
 8001fde:	183b      	adds	r3, r7, r0
 8001fe0:	210f      	movs	r1, #15
 8001fe2:	438a      	bics	r2, r1
 8001fe4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	085b      	lsrs	r3, r3, #1
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	2207      	movs	r2, #7
 8001fee:	4013      	ands	r3, r2
 8001ff0:	b299      	uxth	r1, r3
 8001ff2:	183b      	adds	r3, r7, r0
 8001ff4:	183a      	adds	r2, r7, r0
 8001ff6:	8812      	ldrh	r2, [r2, #0]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	183a      	adds	r2, r7, r0
 8002002:	8812      	ldrh	r2, [r2, #0]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	e04c      	b.n	80020a2 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8002008:	231e      	movs	r3, #30
 800200a:	18fb      	adds	r3, r7, r3
 800200c:	2201      	movs	r2, #1
 800200e:	701a      	strb	r2, [r3, #0]
 8002010:	e047      	b.n	80020a2 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002012:	231f      	movs	r3, #31
 8002014:	18fb      	adds	r3, r7, r3
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b08      	cmp	r3, #8
 800201a:	d015      	beq.n	8002048 <UART_SetConfig+0x278>
 800201c:	dc18      	bgt.n	8002050 <UART_SetConfig+0x280>
 800201e:	2b04      	cmp	r3, #4
 8002020:	d00d      	beq.n	800203e <UART_SetConfig+0x26e>
 8002022:	dc15      	bgt.n	8002050 <UART_SetConfig+0x280>
 8002024:	2b00      	cmp	r3, #0
 8002026:	d002      	beq.n	800202e <UART_SetConfig+0x25e>
 8002028:	2b02      	cmp	r3, #2
 800202a:	d005      	beq.n	8002038 <UART_SetConfig+0x268>
 800202c:	e010      	b.n	8002050 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800202e:	f7ff facd 	bl	80015cc <HAL_RCC_GetPCLK1Freq>
 8002032:	0003      	movs	r3, r0
 8002034:	61bb      	str	r3, [r7, #24]
        break;
 8002036:	e012      	b.n	800205e <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002038:	4b28      	ldr	r3, [pc, #160]	; (80020dc <UART_SetConfig+0x30c>)
 800203a:	61bb      	str	r3, [r7, #24]
        break;
 800203c:	e00f      	b.n	800205e <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800203e:	f7ff fa3b 	bl	80014b8 <HAL_RCC_GetSysClockFreq>
 8002042:	0003      	movs	r3, r0
 8002044:	61bb      	str	r3, [r7, #24]
        break;
 8002046:	e00a      	b.n	800205e <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002048:	2380      	movs	r3, #128	; 0x80
 800204a:	021b      	lsls	r3, r3, #8
 800204c:	61bb      	str	r3, [r7, #24]
        break;
 800204e:	e006      	b.n	800205e <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8002050:	2300      	movs	r3, #0
 8002052:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002054:	231e      	movs	r3, #30
 8002056:	18fb      	adds	r3, r7, r3
 8002058:	2201      	movs	r2, #1
 800205a:	701a      	strb	r2, [r3, #0]
        break;
 800205c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d01e      	beq.n	80020a2 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	085a      	lsrs	r2, r3, #1
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	18d2      	adds	r2, r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	0019      	movs	r1, r3
 8002074:	0010      	movs	r0, r2
 8002076:	f7fe f847 	bl	8000108 <__udivsi3>
 800207a:	0003      	movs	r3, r0
 800207c:	b29b      	uxth	r3, r3
 800207e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	2b0f      	cmp	r3, #15
 8002084:	d909      	bls.n	800209a <UART_SetConfig+0x2ca>
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	025b      	lsls	r3, r3, #9
 800208c:	429a      	cmp	r2, r3
 800208e:	d204      	bcs.n	800209a <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	60da      	str	r2, [r3, #12]
 8002098:	e003      	b.n	80020a2 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 800209a:	231e      	movs	r3, #30
 800209c:	18fb      	adds	r3, r7, r3
 800209e:	2201      	movs	r2, #1
 80020a0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80020ae:	231e      	movs	r3, #30
 80020b0:	18fb      	adds	r3, r7, r3
 80020b2:	781b      	ldrb	r3, [r3, #0]
}
 80020b4:	0018      	movs	r0, r3
 80020b6:	46bd      	mov	sp, r7
 80020b8:	b008      	add	sp, #32
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	efff69f3 	.word	0xefff69f3
 80020c0:	ffffcfff 	.word	0xffffcfff
 80020c4:	fffff4ff 	.word	0xfffff4ff
 80020c8:	40013800 	.word	0x40013800
 80020cc:	40021000 	.word	0x40021000
 80020d0:	40004400 	.word	0x40004400
 80020d4:	40004800 	.word	0x40004800
 80020d8:	40004c00 	.word	0x40004c00
 80020dc:	007a1200 	.word	0x007a1200

080020e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	2201      	movs	r2, #1
 80020ee:	4013      	ands	r3, r2
 80020f0:	d00b      	beq.n	800210a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	4a4a      	ldr	r2, [pc, #296]	; (8002224 <UART_AdvFeatureConfig+0x144>)
 80020fa:	4013      	ands	r3, r2
 80020fc:	0019      	movs	r1, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	430a      	orrs	r2, r1
 8002108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210e:	2202      	movs	r2, #2
 8002110:	4013      	ands	r3, r2
 8002112:	d00b      	beq.n	800212c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	4a43      	ldr	r2, [pc, #268]	; (8002228 <UART_AdvFeatureConfig+0x148>)
 800211c:	4013      	ands	r3, r2
 800211e:	0019      	movs	r1, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002130:	2204      	movs	r2, #4
 8002132:	4013      	ands	r3, r2
 8002134:	d00b      	beq.n	800214e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	4a3b      	ldr	r2, [pc, #236]	; (800222c <UART_AdvFeatureConfig+0x14c>)
 800213e:	4013      	ands	r3, r2
 8002140:	0019      	movs	r1, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002152:	2208      	movs	r2, #8
 8002154:	4013      	ands	r3, r2
 8002156:	d00b      	beq.n	8002170 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	4a34      	ldr	r2, [pc, #208]	; (8002230 <UART_AdvFeatureConfig+0x150>)
 8002160:	4013      	ands	r3, r2
 8002162:	0019      	movs	r1, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	430a      	orrs	r2, r1
 800216e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002174:	2210      	movs	r2, #16
 8002176:	4013      	ands	r3, r2
 8002178:	d00b      	beq.n	8002192 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	4a2c      	ldr	r2, [pc, #176]	; (8002234 <UART_AdvFeatureConfig+0x154>)
 8002182:	4013      	ands	r3, r2
 8002184:	0019      	movs	r1, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002196:	2220      	movs	r2, #32
 8002198:	4013      	ands	r3, r2
 800219a:	d00b      	beq.n	80021b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	4a25      	ldr	r2, [pc, #148]	; (8002238 <UART_AdvFeatureConfig+0x158>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	0019      	movs	r1, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	2240      	movs	r2, #64	; 0x40
 80021ba:	4013      	ands	r3, r2
 80021bc:	d01d      	beq.n	80021fa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	4a1d      	ldr	r2, [pc, #116]	; (800223c <UART_AdvFeatureConfig+0x15c>)
 80021c6:	4013      	ands	r3, r2
 80021c8:	0019      	movs	r1, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021da:	2380      	movs	r3, #128	; 0x80
 80021dc:	035b      	lsls	r3, r3, #13
 80021de:	429a      	cmp	r2, r3
 80021e0:	d10b      	bne.n	80021fa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	4a15      	ldr	r2, [pc, #84]	; (8002240 <UART_AdvFeatureConfig+0x160>)
 80021ea:	4013      	ands	r3, r2
 80021ec:	0019      	movs	r1, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	430a      	orrs	r2, r1
 80021f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	2280      	movs	r2, #128	; 0x80
 8002200:	4013      	ands	r3, r2
 8002202:	d00b      	beq.n	800221c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	4a0e      	ldr	r2, [pc, #56]	; (8002244 <UART_AdvFeatureConfig+0x164>)
 800220c:	4013      	ands	r3, r2
 800220e:	0019      	movs	r1, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	605a      	str	r2, [r3, #4]
  }
}
 800221c:	46c0      	nop			; (mov r8, r8)
 800221e:	46bd      	mov	sp, r7
 8002220:	b002      	add	sp, #8
 8002222:	bd80      	pop	{r7, pc}
 8002224:	fffdffff 	.word	0xfffdffff
 8002228:	fffeffff 	.word	0xfffeffff
 800222c:	fffbffff 	.word	0xfffbffff
 8002230:	ffff7fff 	.word	0xffff7fff
 8002234:	ffffefff 	.word	0xffffefff
 8002238:	ffffdfff 	.word	0xffffdfff
 800223c:	ffefffff 	.word	0xffefffff
 8002240:	ff9fffff 	.word	0xff9fffff
 8002244:	fff7ffff 	.word	0xfff7ffff

08002248 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af02      	add	r7, sp, #8
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2280      	movs	r2, #128	; 0x80
 8002254:	2100      	movs	r1, #0
 8002256:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002258:	f7fe fa66 	bl	8000728 <HAL_GetTick>
 800225c:	0003      	movs	r3, r0
 800225e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2208      	movs	r2, #8
 8002268:	4013      	ands	r3, r2
 800226a:	2b08      	cmp	r3, #8
 800226c:	d10c      	bne.n	8002288 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2280      	movs	r2, #128	; 0x80
 8002272:	0391      	lsls	r1, r2, #14
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	4a17      	ldr	r2, [pc, #92]	; (80022d4 <UART_CheckIdleState+0x8c>)
 8002278:	9200      	str	r2, [sp, #0]
 800227a:	2200      	movs	r2, #0
 800227c:	f000 f82c 	bl	80022d8 <UART_WaitOnFlagUntilTimeout>
 8002280:	1e03      	subs	r3, r0, #0
 8002282:	d001      	beq.n	8002288 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e021      	b.n	80022cc <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2204      	movs	r2, #4
 8002290:	4013      	ands	r3, r2
 8002292:	2b04      	cmp	r3, #4
 8002294:	d10c      	bne.n	80022b0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2280      	movs	r2, #128	; 0x80
 800229a:	03d1      	lsls	r1, r2, #15
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	4a0d      	ldr	r2, [pc, #52]	; (80022d4 <UART_CheckIdleState+0x8c>)
 80022a0:	9200      	str	r2, [sp, #0]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f000 f818 	bl	80022d8 <UART_WaitOnFlagUntilTimeout>
 80022a8:	1e03      	subs	r3, r0, #0
 80022aa:	d001      	beq.n	80022b0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e00d      	b.n	80022cc <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2220      	movs	r2, #32
 80022b4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2220      	movs	r2, #32
 80022ba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2274      	movs	r2, #116	; 0x74
 80022c6:	2100      	movs	r1, #0
 80022c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	0018      	movs	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	b004      	add	sp, #16
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	01ffffff 	.word	0x01ffffff

080022d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b094      	sub	sp, #80	; 0x50
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	603b      	str	r3, [r7, #0]
 80022e4:	1dfb      	adds	r3, r7, #7
 80022e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022e8:	e0a3      	b.n	8002432 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022ec:	3301      	adds	r3, #1
 80022ee:	d100      	bne.n	80022f2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80022f0:	e09f      	b.n	8002432 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022f2:	f7fe fa19 	bl	8000728 <HAL_GetTick>
 80022f6:	0002      	movs	r2, r0
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80022fe:	429a      	cmp	r2, r3
 8002300:	d302      	bcc.n	8002308 <UART_WaitOnFlagUntilTimeout+0x30>
 8002302:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002304:	2b00      	cmp	r3, #0
 8002306:	d13d      	bne.n	8002384 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002308:	f3ef 8310 	mrs	r3, PRIMASK
 800230c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800230e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002310:	647b      	str	r3, [r7, #68]	; 0x44
 8002312:	2301      	movs	r3, #1
 8002314:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002318:	f383 8810 	msr	PRIMASK, r3
}
 800231c:	46c0      	nop			; (mov r8, r8)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	494c      	ldr	r1, [pc, #304]	; (800245c <UART_WaitOnFlagUntilTimeout+0x184>)
 800232a:	400a      	ands	r2, r1
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002330:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002334:	f383 8810 	msr	PRIMASK, r3
}
 8002338:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800233a:	f3ef 8310 	mrs	r3, PRIMASK
 800233e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002342:	643b      	str	r3, [r7, #64]	; 0x40
 8002344:	2301      	movs	r3, #1
 8002346:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800234a:	f383 8810 	msr	PRIMASK, r3
}
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2101      	movs	r1, #1
 800235c:	438a      	bics	r2, r1
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002362:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002366:	f383 8810 	msr	PRIMASK, r3
}
 800236a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2220      	movs	r2, #32
 8002370:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2220      	movs	r2, #32
 8002376:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2274      	movs	r2, #116	; 0x74
 800237c:	2100      	movs	r1, #0
 800237e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e067      	b.n	8002454 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2204      	movs	r2, #4
 800238c:	4013      	ands	r3, r2
 800238e:	d050      	beq.n	8002432 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	69da      	ldr	r2, [r3, #28]
 8002396:	2380      	movs	r3, #128	; 0x80
 8002398:	011b      	lsls	r3, r3, #4
 800239a:	401a      	ands	r2, r3
 800239c:	2380      	movs	r3, #128	; 0x80
 800239e:	011b      	lsls	r3, r3, #4
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d146      	bne.n	8002432 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2280      	movs	r2, #128	; 0x80
 80023aa:	0112      	lsls	r2, r2, #4
 80023ac:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023ae:	f3ef 8310 	mrs	r3, PRIMASK
 80023b2:	613b      	str	r3, [r7, #16]
  return(result);
 80023b4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023b8:	2301      	movs	r3, #1
 80023ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f383 8810 	msr	PRIMASK, r3
}
 80023c2:	46c0      	nop			; (mov r8, r8)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4923      	ldr	r1, [pc, #140]	; (800245c <UART_WaitOnFlagUntilTimeout+0x184>)
 80023d0:	400a      	ands	r2, r1
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	f383 8810 	msr	PRIMASK, r3
}
 80023de:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023e0:	f3ef 8310 	mrs	r3, PRIMASK
 80023e4:	61fb      	str	r3, [r7, #28]
  return(result);
 80023e6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80023ea:	2301      	movs	r3, #1
 80023ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023ee:	6a3b      	ldr	r3, [r7, #32]
 80023f0:	f383 8810 	msr	PRIMASK, r3
}
 80023f4:	46c0      	nop			; (mov r8, r8)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2101      	movs	r1, #1
 8002402:	438a      	bics	r2, r1
 8002404:	609a      	str	r2, [r3, #8]
 8002406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	f383 8810 	msr	PRIMASK, r3
}
 8002410:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2220      	movs	r2, #32
 8002416:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2220      	movs	r2, #32
 800241c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2280      	movs	r2, #128	; 0x80
 8002422:	2120      	movs	r1, #32
 8002424:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2274      	movs	r2, #116	; 0x74
 800242a:	2100      	movs	r1, #0
 800242c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e010      	b.n	8002454 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	68ba      	ldr	r2, [r7, #8]
 800243a:	4013      	ands	r3, r2
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	425a      	negs	r2, r3
 8002442:	4153      	adcs	r3, r2
 8002444:	b2db      	uxtb	r3, r3
 8002446:	001a      	movs	r2, r3
 8002448:	1dfb      	adds	r3, r7, #7
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	429a      	cmp	r2, r3
 800244e:	d100      	bne.n	8002452 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002450:	e74b      	b.n	80022ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	0018      	movs	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	b014      	add	sp, #80	; 0x50
 800245a:	bd80      	pop	{r7, pc}
 800245c:	fffffe5f 	.word	0xfffffe5f

08002460 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002466:	f3ef 8305 	mrs	r3, IPSR
 800246a:	60bb      	str	r3, [r7, #8]
  return(result);
 800246c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800246e:	2b00      	cmp	r3, #0
 8002470:	d109      	bne.n	8002486 <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002472:	f3ef 8310 	mrs	r3, PRIMASK
 8002476:	607b      	str	r3, [r7, #4]
  return(result);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d007      	beq.n	800248e <osKernelInitialize+0x2e>
 800247e:	4b0d      	ldr	r3, [pc, #52]	; (80024b4 <osKernelInitialize+0x54>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b02      	cmp	r3, #2
 8002484:	d103      	bne.n	800248e <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8002486:	2306      	movs	r3, #6
 8002488:	425b      	negs	r3, r3
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	e00c      	b.n	80024a8 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 800248e:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <osKernelInitialize+0x54>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d105      	bne.n	80024a2 <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002496:	4b07      	ldr	r3, [pc, #28]	; (80024b4 <osKernelInitialize+0x54>)
 8002498:	2201      	movs	r2, #1
 800249a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800249c:	2300      	movs	r3, #0
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	e002      	b.n	80024a8 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 80024a2:	2301      	movs	r3, #1
 80024a4:	425b      	negs	r3, r3
 80024a6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80024a8:	68fb      	ldr	r3, [r7, #12]
}
 80024aa:	0018      	movs	r0, r3
 80024ac:	46bd      	mov	sp, r7
 80024ae:	b004      	add	sp, #16
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	20000104 	.word	0x20000104

080024b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024be:	f3ef 8305 	mrs	r3, IPSR
 80024c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80024c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d109      	bne.n	80024de <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024ca:	f3ef 8310 	mrs	r3, PRIMASK
 80024ce:	607b      	str	r3, [r7, #4]
  return(result);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d007      	beq.n	80024e6 <osKernelStart+0x2e>
 80024d6:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <osKernelStart+0x58>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d103      	bne.n	80024e6 <osKernelStart+0x2e>
    stat = osErrorISR;
 80024de:	2306      	movs	r3, #6
 80024e0:	425b      	negs	r3, r3
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	e00e      	b.n	8002504 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 80024e6:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <osKernelStart+0x58>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d107      	bne.n	80024fe <osKernelStart+0x46>
      KernelState = osKernelRunning;
 80024ee:	4b08      	ldr	r3, [pc, #32]	; (8002510 <osKernelStart+0x58>)
 80024f0:	2202      	movs	r2, #2
 80024f2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80024f4:	f000 ff7e 	bl	80033f4 <vTaskStartScheduler>
      stat = osOK;
 80024f8:	2300      	movs	r3, #0
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	e002      	b.n	8002504 <osKernelStart+0x4c>
    } else {
      stat = osError;
 80024fe:	2301      	movs	r3, #1
 8002500:	425b      	negs	r3, r3
 8002502:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002504:	68fb      	ldr	r3, [r7, #12]
}
 8002506:	0018      	movs	r0, r3
 8002508:	46bd      	mov	sp, r7
 800250a:	b004      	add	sp, #16
 800250c:	bd80      	pop	{r7, pc}
 800250e:	46c0      	nop			; (mov r8, r8)
 8002510:	20000104 	.word	0x20000104

08002514 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002514:	b5b0      	push	{r4, r5, r7, lr}
 8002516:	b090      	sub	sp, #64	; 0x40
 8002518:	af04      	add	r7, sp, #16
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002520:	2300      	movs	r3, #0
 8002522:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002524:	f3ef 8305 	mrs	r3, IPSR
 8002528:	61fb      	str	r3, [r7, #28]
  return(result);
 800252a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800252c:	2b00      	cmp	r3, #0
 800252e:	d000      	beq.n	8002532 <osThreadNew+0x1e>
 8002530:	e090      	b.n	8002654 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002532:	f3ef 8310 	mrs	r3, PRIMASK
 8002536:	61bb      	str	r3, [r7, #24]
  return(result);
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d004      	beq.n	8002548 <osThreadNew+0x34>
 800253e:	4b48      	ldr	r3, [pc, #288]	; (8002660 <osThreadNew+0x14c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2b02      	cmp	r3, #2
 8002544:	d100      	bne.n	8002548 <osThreadNew+0x34>
 8002546:	e085      	b.n	8002654 <osThreadNew+0x140>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d100      	bne.n	8002550 <osThreadNew+0x3c>
 800254e:	e081      	b.n	8002654 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 8002550:	2380      	movs	r3, #128	; 0x80
 8002552:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8002554:	2318      	movs	r3, #24
 8002556:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 8002558:	2117      	movs	r1, #23
 800255a:	187b      	adds	r3, r7, r1
 800255c:	2200      	movs	r2, #0
 800255e:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 8002560:	187b      	adds	r3, r7, r1
 8002562:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 8002564:	2301      	movs	r3, #1
 8002566:	425b      	negs	r3, r3
 8002568:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d044      	beq.n	80025fa <osThreadNew+0xe6>
      if (attr->name != NULL) {
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <osThreadNew+0x6a>
        name = attr->name;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d002      	beq.n	800258c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	2b00      	cmp	r3, #0
 8002590:	d007      	beq.n	80025a2 <osThreadNew+0x8e>
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	2b38      	cmp	r3, #56	; 0x38
 8002596:	d804      	bhi.n	80025a2 <osThreadNew+0x8e>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	4013      	ands	r3, r2
 80025a0:	d001      	beq.n	80025a6 <osThreadNew+0x92>
        return (NULL);
 80025a2:	2300      	movs	r3, #0
 80025a4:	e057      	b.n	8002656 <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	089b      	lsrs	r3, r3, #2
 80025b4:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00e      	beq.n	80025dc <osThreadNew+0xc8>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	2b5b      	cmp	r3, #91	; 0x5b
 80025c4:	d90a      	bls.n	80025dc <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d006      	beq.n	80025dc <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <osThreadNew+0xc8>
        mem = 1;
 80025d6:	2301      	movs	r3, #1
 80025d8:	623b      	str	r3, [r7, #32]
 80025da:	e010      	b.n	80025fe <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10c      	bne.n	80025fe <osThreadNew+0xea>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d108      	bne.n	80025fe <osThreadNew+0xea>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d104      	bne.n	80025fe <osThreadNew+0xea>
          mem = 0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	623b      	str	r3, [r7, #32]
 80025f8:	e001      	b.n	80025fe <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80025fe:	6a3b      	ldr	r3, [r7, #32]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d112      	bne.n	800262a <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800260c:	68bd      	ldr	r5, [r7, #8]
 800260e:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002610:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	9302      	str	r3, [sp, #8]
 8002616:	9201      	str	r2, [sp, #4]
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	002b      	movs	r3, r5
 800261e:	0022      	movs	r2, r4
 8002620:	f000 fd49 	bl	80030b6 <xTaskCreateStatic>
 8002624:	0003      	movs	r3, r0
 8002626:	613b      	str	r3, [r7, #16]
 8002628:	e014      	b.n	8002654 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d111      	bne.n	8002654 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002632:	b29a      	uxth	r2, r3
 8002634:	68bc      	ldr	r4, [r7, #8]
 8002636:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	2310      	movs	r3, #16
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	9301      	str	r3, [sp, #4]
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	0023      	movs	r3, r4
 8002646:	f000 fd79 	bl	800313c <xTaskCreate>
 800264a:	0003      	movs	r3, r0
 800264c:	2b01      	cmp	r3, #1
 800264e:	d001      	beq.n	8002654 <osThreadNew+0x140>
          hTask = NULL;
 8002650:	2300      	movs	r3, #0
 8002652:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002654:	693b      	ldr	r3, [r7, #16]
}
 8002656:	0018      	movs	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	b00c      	add	sp, #48	; 0x30
 800265c:	bdb0      	pop	{r4, r5, r7, pc}
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	20000104 	.word	0x20000104

08002664 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800266c:	f3ef 8305 	mrs	r3, IPSR
 8002670:	613b      	str	r3, [r7, #16]
  return(result);
 8002672:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002674:	2b00      	cmp	r3, #0
 8002676:	d109      	bne.n	800268c <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002678:	f3ef 8310 	mrs	r3, PRIMASK
 800267c:	60fb      	str	r3, [r7, #12]
  return(result);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d007      	beq.n	8002694 <osDelay+0x30>
 8002684:	4b0a      	ldr	r3, [pc, #40]	; (80026b0 <osDelay+0x4c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b02      	cmp	r3, #2
 800268a:	d103      	bne.n	8002694 <osDelay+0x30>
    stat = osErrorISR;
 800268c:	2306      	movs	r3, #6
 800268e:	425b      	negs	r3, r3
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	e008      	b.n	80026a6 <osDelay+0x42>
  }
  else {
    stat = osOK;
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <osDelay+0x42>
      vTaskDelay(ticks);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	0018      	movs	r0, r3
 80026a2:	f000 fe81 	bl	80033a8 <vTaskDelay>
    }
  }

  return (stat);
 80026a6:	697b      	ldr	r3, [r7, #20]
}
 80026a8:	0018      	movs	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	b006      	add	sp, #24
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	20000104 	.word	0x20000104

080026b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4a06      	ldr	r2, [pc, #24]	; (80026dc <vApplicationGetIdleTaskMemory+0x28>)
 80026c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	4a05      	ldr	r2, [pc, #20]	; (80026e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80026ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2280      	movs	r2, #128	; 0x80
 80026d0:	601a      	str	r2, [r3, #0]
}
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	46bd      	mov	sp, r7
 80026d6:	b004      	add	sp, #16
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	46c0      	nop			; (mov r8, r8)
 80026dc:	20000108 	.word	0x20000108
 80026e0:	20000164 	.word	0x20000164

080026e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4a06      	ldr	r2, [pc, #24]	; (800270c <vApplicationGetTimerTaskMemory+0x28>)
 80026f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	4a05      	ldr	r2, [pc, #20]	; (8002710 <vApplicationGetTimerTaskMemory+0x2c>)
 80026fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2280      	movs	r2, #128	; 0x80
 8002700:	0052      	lsls	r2, r2, #1
 8002702:	601a      	str	r2, [r3, #0]
}
 8002704:	46c0      	nop			; (mov r8, r8)
 8002706:	46bd      	mov	sp, r7
 8002708:	b004      	add	sp, #16
 800270a:	bd80      	pop	{r7, pc}
 800270c:	20000364 	.word	0x20000364
 8002710:	200003c0 	.word	0x200003c0

08002714 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3308      	adds	r3, #8
 8002720:	001a      	movs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	4252      	negs	r2, r2
 800272c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	3308      	adds	r3, #8
 8002732:	001a      	movs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3308      	adds	r3, #8
 800273c:	001a      	movs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002748:	46c0      	nop			; (mov r8, r8)
 800274a:	46bd      	mov	sp, r7
 800274c:	b002      	add	sp, #8
 800274e:	bd80      	pop	{r7, pc}

08002750 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	46bd      	mov	sp, r7
 8002762:	b002      	add	sp, #8
 8002764:	bd80      	pop	{r7, pc}

08002766 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b084      	sub	sp, #16
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
 800276e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	1c5a      	adds	r2, r3, #1
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	601a      	str	r2, [r3, #0]
}
 80027a2:	46c0      	nop			; (mov r8, r8)
 80027a4:	46bd      	mov	sp, r7
 80027a6:	b004      	add	sp, #16
 80027a8:	bd80      	pop	{r7, pc}

080027aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b084      	sub	sp, #16
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
 80027b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	3301      	adds	r3, #1
 80027be:	d103      	bne.n	80027c8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	e00c      	b.n	80027e2 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3308      	adds	r3, #8
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	e002      	b.n	80027d6 <vListInsert+0x2c>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d2f6      	bcs.n	80027d0 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	1c5a      	adds	r2, r3, #1
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	601a      	str	r2, [r3, #0]
}
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	46bd      	mov	sp, r7
 8002812:	b004      	add	sp, #16
 8002814:	bd80      	pop	{r7, pc}

08002816 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b084      	sub	sp, #16
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6892      	ldr	r2, [r2, #8]
 800282c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6852      	ldr	r2, [r2, #4]
 8002836:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	429a      	cmp	r2, r3
 8002840:	d103      	bne.n	800284a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	1e5a      	subs	r2, r3, #1
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
}
 800285e:	0018      	movs	r0, r3
 8002860:	46bd      	mov	sp, r7
 8002862:	b004      	add	sp, #16
 8002864:	bd80      	pop	{r7, pc}

08002866 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b084      	sub	sp, #16
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <xQueueGenericReset+0x18>
 800287a:	b672      	cpsid	i
 800287c:	e7fe      	b.n	800287c <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800287e:	f001 fdcf 	bl	8004420 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	434b      	muls	r3, r1
 8002890:	18d2      	adds	r2, r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ac:	1e59      	subs	r1, r3, #1
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	434b      	muls	r3, r1
 80028b4:	18d2      	adds	r2, r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2244      	movs	r2, #68	; 0x44
 80028be:	21ff      	movs	r1, #255	; 0xff
 80028c0:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2245      	movs	r2, #69	; 0x45
 80028c6:	21ff      	movs	r1, #255	; 0xff
 80028c8:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10d      	bne.n	80028ec <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d013      	beq.n	8002900 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	3310      	adds	r3, #16
 80028dc:	0018      	movs	r0, r3
 80028de:	f000 ffcd 	bl	800387c <xTaskRemoveFromEventList>
 80028e2:	1e03      	subs	r3, r0, #0
 80028e4:	d00c      	beq.n	8002900 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80028e6:	f001 fd8b 	bl	8004400 <vPortYield>
 80028ea:	e009      	b.n	8002900 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	3310      	adds	r3, #16
 80028f0:	0018      	movs	r0, r3
 80028f2:	f7ff ff0f 	bl	8002714 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	3324      	adds	r3, #36	; 0x24
 80028fa:	0018      	movs	r0, r3
 80028fc:	f7ff ff0a 	bl	8002714 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002900:	f001 fda0 	bl	8004444 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002904:	2301      	movs	r3, #1
}
 8002906:	0018      	movs	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	b004      	add	sp, #16
 800290c:	bd80      	pop	{r7, pc}

0800290e <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800290e:	b590      	push	{r4, r7, lr}
 8002910:	b089      	sub	sp, #36	; 0x24
 8002912:	af02      	add	r7, sp, #8
 8002914:	60f8      	str	r0, [r7, #12]
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	607a      	str	r2, [r7, #4]
 800291a:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <xQueueGenericCreateStatic+0x18>
 8002922:	b672      	cpsid	i
 8002924:	e7fe      	b.n	8002924 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <xQueueGenericCreateStatic+0x22>
 800292c:	b672      	cpsid	i
 800292e:	e7fe      	b.n	800292e <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d002      	beq.n	800293c <xQueueGenericCreateStatic+0x2e>
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <xQueueGenericCreateStatic+0x32>
 800293c:	2301      	movs	r3, #1
 800293e:	e000      	b.n	8002942 <xQueueGenericCreateStatic+0x34>
 8002940:	2300      	movs	r3, #0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <xQueueGenericCreateStatic+0x3c>
 8002946:	b672      	cpsid	i
 8002948:	e7fe      	b.n	8002948 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d102      	bne.n	8002956 <xQueueGenericCreateStatic+0x48>
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <xQueueGenericCreateStatic+0x4c>
 8002956:	2301      	movs	r3, #1
 8002958:	e000      	b.n	800295c <xQueueGenericCreateStatic+0x4e>
 800295a:	2300      	movs	r3, #0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <xQueueGenericCreateStatic+0x56>
 8002960:	b672      	cpsid	i
 8002962:	e7fe      	b.n	8002962 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002964:	2350      	movs	r3, #80	; 0x50
 8002966:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	2b50      	cmp	r3, #80	; 0x50
 800296c:	d001      	beq.n	8002972 <xQueueGenericCreateStatic+0x64>
 800296e:	b672      	cpsid	i
 8002970:	e7fe      	b.n	8002970 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00e      	beq.n	800299a <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	2246      	movs	r2, #70	; 0x46
 8002980:	2101      	movs	r1, #1
 8002982:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002984:	2328      	movs	r3, #40	; 0x28
 8002986:	18fb      	adds	r3, r7, r3
 8002988:	781c      	ldrb	r4, [r3, #0]
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	68b9      	ldr	r1, [r7, #8]
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	0023      	movs	r3, r4
 8002996:	f000 f805 	bl	80029a4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800299a:	697b      	ldr	r3, [r7, #20]
	}
 800299c:	0018      	movs	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	b007      	add	sp, #28
 80029a2:	bd90      	pop	{r4, r7, pc}

080029a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
 80029b0:	001a      	movs	r2, r3
 80029b2:	1cfb      	adds	r3, r7, #3
 80029b4:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d103      	bne.n	80029c4 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	e002      	b.n	80029ca <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	2101      	movs	r1, #1
 80029da:	0018      	movs	r0, r3
 80029dc:	f7ff ff43 	bl	8002866 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	1cfa      	adds	r2, r7, #3
 80029e4:	214c      	movs	r1, #76	; 0x4c
 80029e6:	7812      	ldrb	r2, [r2, #0]
 80029e8:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	46bd      	mov	sp, r7
 80029ee:	b004      	add	sp, #16
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b08a      	sub	sp, #40	; 0x28
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	60f8      	str	r0, [r7, #12]
 80029fa:	60b9      	str	r1, [r7, #8]
 80029fc:	607a      	str	r2, [r7, #4]
 80029fe:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002a00:	2300      	movs	r3, #0
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <xQueueGenericSend+0x20>
 8002a0e:	b672      	cpsid	i
 8002a10:	e7fe      	b.n	8002a10 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d103      	bne.n	8002a20 <xQueueGenericSend+0x2e>
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <xQueueGenericSend+0x32>
 8002a20:	2301      	movs	r3, #1
 8002a22:	e000      	b.n	8002a26 <xQueueGenericSend+0x34>
 8002a24:	2300      	movs	r3, #0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <xQueueGenericSend+0x3c>
 8002a2a:	b672      	cpsid	i
 8002a2c:	e7fe      	b.n	8002a2c <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d103      	bne.n	8002a3c <xQueueGenericSend+0x4a>
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d101      	bne.n	8002a40 <xQueueGenericSend+0x4e>
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e000      	b.n	8002a42 <xQueueGenericSend+0x50>
 8002a40:	2300      	movs	r3, #0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <xQueueGenericSend+0x58>
 8002a46:	b672      	cpsid	i
 8002a48:	e7fe      	b.n	8002a48 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a4a:	f001 f8af 	bl	8003bac <xTaskGetSchedulerState>
 8002a4e:	1e03      	subs	r3, r0, #0
 8002a50:	d102      	bne.n	8002a58 <xQueueGenericSend+0x66>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <xQueueGenericSend+0x6a>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <xQueueGenericSend+0x6c>
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <xQueueGenericSend+0x74>
 8002a62:	b672      	cpsid	i
 8002a64:	e7fe      	b.n	8002a64 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a66:	f001 fcdb 	bl	8004420 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
 8002a6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d302      	bcc.n	8002a7c <xQueueGenericSend+0x8a>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d11e      	bne.n	8002aba <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	68b9      	ldr	r1, [r7, #8]
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	0018      	movs	r0, r3
 8002a84:	f000 f99f 	bl	8002dc6 <prvCopyDataToQueue>
 8002a88:	0003      	movs	r3, r0
 8002a8a:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d009      	beq.n	8002aa8 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	3324      	adds	r3, #36	; 0x24
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f000 feef 	bl	800387c <xTaskRemoveFromEventList>
 8002a9e:	1e03      	subs	r3, r0, #0
 8002aa0:	d007      	beq.n	8002ab2 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002aa2:	f001 fcad 	bl	8004400 <vPortYield>
 8002aa6:	e004      	b.n	8002ab2 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002aae:	f001 fca7 	bl	8004400 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002ab2:	f001 fcc7 	bl	8004444 <vPortExitCritical>
				return pdPASS;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e05b      	b.n	8002b72 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d103      	bne.n	8002ac8 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ac0:	f001 fcc0 	bl	8004444 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	e054      	b.n	8002b72 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d106      	bne.n	8002adc <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ace:	2314      	movs	r3, #20
 8002ad0:	18fb      	adds	r3, r7, r3
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f000 ff2e 	bl	8003934 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002adc:	f001 fcb2 	bl	8004444 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ae0:	f000 fcdc 	bl	800349c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ae4:	f001 fc9c 	bl	8004420 <vPortEnterCritical>
 8002ae8:	6a3b      	ldr	r3, [r7, #32]
 8002aea:	2244      	movs	r2, #68	; 0x44
 8002aec:	5c9b      	ldrb	r3, [r3, r2]
 8002aee:	b25b      	sxtb	r3, r3
 8002af0:	3301      	adds	r3, #1
 8002af2:	d103      	bne.n	8002afc <xQueueGenericSend+0x10a>
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	2244      	movs	r2, #68	; 0x44
 8002af8:	2100      	movs	r1, #0
 8002afa:	5499      	strb	r1, [r3, r2]
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	2245      	movs	r2, #69	; 0x45
 8002b00:	5c9b      	ldrb	r3, [r3, r2]
 8002b02:	b25b      	sxtb	r3, r3
 8002b04:	3301      	adds	r3, #1
 8002b06:	d103      	bne.n	8002b10 <xQueueGenericSend+0x11e>
 8002b08:	6a3b      	ldr	r3, [r7, #32]
 8002b0a:	2245      	movs	r2, #69	; 0x45
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	5499      	strb	r1, [r3, r2]
 8002b10:	f001 fc98 	bl	8004444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b14:	1d3a      	adds	r2, r7, #4
 8002b16:	2314      	movs	r3, #20
 8002b18:	18fb      	adds	r3, r7, r3
 8002b1a:	0011      	movs	r1, r2
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	f000 ff1d 	bl	800395c <xTaskCheckForTimeOut>
 8002b22:	1e03      	subs	r3, r0, #0
 8002b24:	d11e      	bne.n	8002b64 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	0018      	movs	r0, r3
 8002b2a:	f000 fa51 	bl	8002fd0 <prvIsQueueFull>
 8002b2e:	1e03      	subs	r3, r0, #0
 8002b30:	d011      	beq.n	8002b56 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b32:	6a3b      	ldr	r3, [r7, #32]
 8002b34:	3310      	adds	r3, #16
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	0011      	movs	r1, r2
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f000 fe5a 	bl	80037f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002b40:	6a3b      	ldr	r3, [r7, #32]
 8002b42:	0018      	movs	r0, r3
 8002b44:	f000 f9d0 	bl	8002ee8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002b48:	f000 fcb4 	bl	80034b4 <xTaskResumeAll>
 8002b4c:	1e03      	subs	r3, r0, #0
 8002b4e:	d18a      	bne.n	8002a66 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8002b50:	f001 fc56 	bl	8004400 <vPortYield>
 8002b54:	e787      	b.n	8002a66 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	0018      	movs	r0, r3
 8002b5a:	f000 f9c5 	bl	8002ee8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b5e:	f000 fca9 	bl	80034b4 <xTaskResumeAll>
 8002b62:	e780      	b.n	8002a66 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	0018      	movs	r0, r3
 8002b68:	f000 f9be 	bl	8002ee8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b6c:	f000 fca2 	bl	80034b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002b70:	2300      	movs	r3, #0
		}
	}
}
 8002b72:	0018      	movs	r0, r3
 8002b74:	46bd      	mov	sp, r7
 8002b76:	b00a      	add	sp, #40	; 0x28
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002b7a:	b590      	push	{r4, r7, lr}
 8002b7c:	b089      	sub	sp, #36	; 0x24
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	60f8      	str	r0, [r7, #12]
 8002b82:	60b9      	str	r1, [r7, #8]
 8002b84:	607a      	str	r2, [r7, #4]
 8002b86:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <xQueueGenericSendFromISR+0x1c>
 8002b92:	b672      	cpsid	i
 8002b94:	e7fe      	b.n	8002b94 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d103      	bne.n	8002ba4 <xQueueGenericSendFromISR+0x2a>
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <xQueueGenericSendFromISR+0x2e>
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e000      	b.n	8002baa <xQueueGenericSendFromISR+0x30>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <xQueueGenericSendFromISR+0x38>
 8002bae:	b672      	cpsid	i
 8002bb0:	e7fe      	b.n	8002bb0 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d103      	bne.n	8002bc0 <xQueueGenericSendFromISR+0x46>
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d101      	bne.n	8002bc4 <xQueueGenericSendFromISR+0x4a>
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e000      	b.n	8002bc6 <xQueueGenericSendFromISR+0x4c>
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <xQueueGenericSendFromISR+0x54>
 8002bca:	b672      	cpsid	i
 8002bcc:	e7fe      	b.n	8002bcc <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002bce:	f001 fc51 	bl	8004474 <ulSetInterruptMaskFromISR>
 8002bd2:	0003      	movs	r3, r0
 8002bd4:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d302      	bcc.n	8002be8 <xQueueGenericSendFromISR+0x6e>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d12e      	bne.n	8002c46 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002be8:	2413      	movs	r4, #19
 8002bea:	193b      	adds	r3, r7, r4
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	2145      	movs	r1, #69	; 0x45
 8002bf0:	5c52      	ldrb	r2, [r2, r1]
 8002bf2:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	68b9      	ldr	r1, [r7, #8]
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	f000 f8e3 	bl	8002dc6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002c00:	193b      	adds	r3, r7, r4
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	b25b      	sxtb	r3, r3
 8002c06:	3301      	adds	r3, #1
 8002c08:	d111      	bne.n	8002c2e <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d016      	beq.n	8002c40 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	3324      	adds	r3, #36	; 0x24
 8002c16:	0018      	movs	r0, r3
 8002c18:	f000 fe30 	bl	800387c <xTaskRemoveFromEventList>
 8002c1c:	1e03      	subs	r3, r0, #0
 8002c1e:	d00f      	beq.n	8002c40 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00c      	beq.n	8002c40 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	e008      	b.n	8002c40 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002c2e:	2313      	movs	r3, #19
 8002c30:	18fb      	adds	r3, r7, r3
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	3301      	adds	r3, #1
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	b259      	sxtb	r1, r3
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	2245      	movs	r2, #69	; 0x45
 8002c3e:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8002c40:	2301      	movs	r3, #1
 8002c42:	61fb      	str	r3, [r7, #28]
		{
 8002c44:	e001      	b.n	8002c4a <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f001 fc17 	bl	8004480 <vClearInterruptMaskFromISR>

	return xReturn;
 8002c52:	69fb      	ldr	r3, [r7, #28]
}
 8002c54:	0018      	movs	r0, r3
 8002c56:	46bd      	mov	sp, r7
 8002c58:	b009      	add	sp, #36	; 0x24
 8002c5a:	bd90      	pop	{r4, r7, pc}

08002c5c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b08a      	sub	sp, #40	; 0x28
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <xQueueReceive+0x1e>
 8002c76:	b672      	cpsid	i
 8002c78:	e7fe      	b.n	8002c78 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d103      	bne.n	8002c88 <xQueueReceive+0x2c>
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <xQueueReceive+0x30>
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e000      	b.n	8002c8e <xQueueReceive+0x32>
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <xQueueReceive+0x3a>
 8002c92:	b672      	cpsid	i
 8002c94:	e7fe      	b.n	8002c94 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c96:	f000 ff89 	bl	8003bac <xTaskGetSchedulerState>
 8002c9a:	1e03      	subs	r3, r0, #0
 8002c9c:	d102      	bne.n	8002ca4 <xQueueReceive+0x48>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <xQueueReceive+0x4c>
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e000      	b.n	8002caa <xQueueReceive+0x4e>
 8002ca8:	2300      	movs	r3, #0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <xQueueReceive+0x56>
 8002cae:	b672      	cpsid	i
 8002cb0:	e7fe      	b.n	8002cb0 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002cb2:	f001 fbb5 	bl	8004420 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cba:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d01a      	beq.n	8002cf8 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	0011      	movs	r1, r2
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f000 f8e7 	bl	8002e9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	1e5a      	subs	r2, r3, #1
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cd6:	6a3b      	ldr	r3, [r7, #32]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d008      	beq.n	8002cf0 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cde:	6a3b      	ldr	r3, [r7, #32]
 8002ce0:	3310      	adds	r3, #16
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	f000 fdca 	bl	800387c <xTaskRemoveFromEventList>
 8002ce8:	1e03      	subs	r3, r0, #0
 8002cea:	d001      	beq.n	8002cf0 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002cec:	f001 fb88 	bl	8004400 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002cf0:	f001 fba8 	bl	8004444 <vPortExitCritical>
				return pdPASS;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e062      	b.n	8002dbe <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d103      	bne.n	8002d06 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002cfe:	f001 fba1 	bl	8004444 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002d02:	2300      	movs	r3, #0
 8002d04:	e05b      	b.n	8002dbe <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d106      	bne.n	8002d1a <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d0c:	2314      	movs	r3, #20
 8002d0e:	18fb      	adds	r3, r7, r3
 8002d10:	0018      	movs	r0, r3
 8002d12:	f000 fe0f 	bl	8003934 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d16:	2301      	movs	r3, #1
 8002d18:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d1a:	f001 fb93 	bl	8004444 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d1e:	f000 fbbd 	bl	800349c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d22:	f001 fb7d 	bl	8004420 <vPortEnterCritical>
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	2244      	movs	r2, #68	; 0x44
 8002d2a:	5c9b      	ldrb	r3, [r3, r2]
 8002d2c:	b25b      	sxtb	r3, r3
 8002d2e:	3301      	adds	r3, #1
 8002d30:	d103      	bne.n	8002d3a <xQueueReceive+0xde>
 8002d32:	6a3b      	ldr	r3, [r7, #32]
 8002d34:	2244      	movs	r2, #68	; 0x44
 8002d36:	2100      	movs	r1, #0
 8002d38:	5499      	strb	r1, [r3, r2]
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	2245      	movs	r2, #69	; 0x45
 8002d3e:	5c9b      	ldrb	r3, [r3, r2]
 8002d40:	b25b      	sxtb	r3, r3
 8002d42:	3301      	adds	r3, #1
 8002d44:	d103      	bne.n	8002d4e <xQueueReceive+0xf2>
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	2245      	movs	r2, #69	; 0x45
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	5499      	strb	r1, [r3, r2]
 8002d4e:	f001 fb79 	bl	8004444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d52:	1d3a      	adds	r2, r7, #4
 8002d54:	2314      	movs	r3, #20
 8002d56:	18fb      	adds	r3, r7, r3
 8002d58:	0011      	movs	r1, r2
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f000 fdfe 	bl	800395c <xTaskCheckForTimeOut>
 8002d60:	1e03      	subs	r3, r0, #0
 8002d62:	d11e      	bne.n	8002da2 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	0018      	movs	r0, r3
 8002d68:	f000 f91c 	bl	8002fa4 <prvIsQueueEmpty>
 8002d6c:	1e03      	subs	r3, r0, #0
 8002d6e:	d011      	beq.n	8002d94 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	3324      	adds	r3, #36	; 0x24
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	0011      	movs	r1, r2
 8002d78:	0018      	movs	r0, r3
 8002d7a:	f000 fd3b 	bl	80037f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	0018      	movs	r0, r3
 8002d82:	f000 f8b1 	bl	8002ee8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002d86:	f000 fb95 	bl	80034b4 <xTaskResumeAll>
 8002d8a:	1e03      	subs	r3, r0, #0
 8002d8c:	d191      	bne.n	8002cb2 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8002d8e:	f001 fb37 	bl	8004400 <vPortYield>
 8002d92:	e78e      	b.n	8002cb2 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	0018      	movs	r0, r3
 8002d98:	f000 f8a6 	bl	8002ee8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d9c:	f000 fb8a 	bl	80034b4 <xTaskResumeAll>
 8002da0:	e787      	b.n	8002cb2 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	0018      	movs	r0, r3
 8002da6:	f000 f89f 	bl	8002ee8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002daa:	f000 fb83 	bl	80034b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	0018      	movs	r0, r3
 8002db2:	f000 f8f7 	bl	8002fa4 <prvIsQueueEmpty>
 8002db6:	1e03      	subs	r3, r0, #0
 8002db8:	d100      	bne.n	8002dbc <xQueueReceive+0x160>
 8002dba:	e77a      	b.n	8002cb2 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002dbc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	b00a      	add	sp, #40	; 0x28
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b086      	sub	sp, #24
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	60f8      	str	r0, [r7, #12]
 8002dce:	60b9      	str	r1, [r7, #8]
 8002dd0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dda:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10e      	bne.n	8002e02 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d14e      	bne.n	8002e8a <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	0018      	movs	r0, r3
 8002df2:	f000 fef7 	bl	8003be4 <xTaskPriorityDisinherit>
 8002df6:	0003      	movs	r3, r0
 8002df8:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	605a      	str	r2, [r3, #4]
 8002e00:	e043      	b.n	8002e8a <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d119      	bne.n	8002e3c <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6898      	ldr	r0, [r3, #8]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	0019      	movs	r1, r3
 8002e14:	f001 fd66 	bl	80048e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	18d2      	adds	r2, r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	689a      	ldr	r2, [r3, #8]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d32b      	bcc.n	8002e8a <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	609a      	str	r2, [r3, #8]
 8002e3a:	e026      	b.n	8002e8a <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	68d8      	ldr	r0, [r3, #12]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	0019      	movs	r1, r3
 8002e48:	f001 fd4c 	bl	80048e4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	68da      	ldr	r2, [r3, #12]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	425b      	negs	r3, r3
 8002e56:	18d2      	adds	r2, r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d207      	bcs.n	8002e78 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	425b      	negs	r3, r3
 8002e72:	18d2      	adds	r2, r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d105      	bne.n	8002e8a <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	3b01      	subs	r3, #1
 8002e88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1c5a      	adds	r2, r3, #1
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002e92:	697b      	ldr	r3, [r7, #20]
}
 8002e94:	0018      	movs	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	b006      	add	sp, #24
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d018      	beq.n	8002ee0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68da      	ldr	r2, [r3, #12]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	18d2      	adds	r2, r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68da      	ldr	r2, [r3, #12]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d303      	bcc.n	8002ed0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68d9      	ldr	r1, [r3, #12]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	0018      	movs	r0, r3
 8002edc:	f001 fd02 	bl	80048e4 <memcpy>
	}
}
 8002ee0:	46c0      	nop			; (mov r8, r8)
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b002      	add	sp, #8
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002ef0:	f001 fa96 	bl	8004420 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002ef4:	230f      	movs	r3, #15
 8002ef6:	18fb      	adds	r3, r7, r3
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	2145      	movs	r1, #69	; 0x45
 8002efc:	5c52      	ldrb	r2, [r2, r1]
 8002efe:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f00:	e013      	b.n	8002f2a <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d016      	beq.n	8002f38 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	3324      	adds	r3, #36	; 0x24
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f000 fcb4 	bl	800387c <xTaskRemoveFromEventList>
 8002f14:	1e03      	subs	r3, r0, #0
 8002f16:	d001      	beq.n	8002f1c <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002f18:	f000 fd70 	bl	80039fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002f1c:	210f      	movs	r1, #15
 8002f1e:	187b      	adds	r3, r7, r1
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	187b      	adds	r3, r7, r1
 8002f28:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f2a:	230f      	movs	r3, #15
 8002f2c:	18fb      	adds	r3, r7, r3
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	b25b      	sxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	dce5      	bgt.n	8002f02 <prvUnlockQueue+0x1a>
 8002f36:	e000      	b.n	8002f3a <prvUnlockQueue+0x52>
					break;
 8002f38:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2245      	movs	r2, #69	; 0x45
 8002f3e:	21ff      	movs	r1, #255	; 0xff
 8002f40:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8002f42:	f001 fa7f 	bl	8004444 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002f46:	f001 fa6b 	bl	8004420 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002f4a:	230e      	movs	r3, #14
 8002f4c:	18fb      	adds	r3, r7, r3
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	2144      	movs	r1, #68	; 0x44
 8002f52:	5c52      	ldrb	r2, [r2, r1]
 8002f54:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f56:	e013      	b.n	8002f80 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d016      	beq.n	8002f8e <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3310      	adds	r3, #16
 8002f64:	0018      	movs	r0, r3
 8002f66:	f000 fc89 	bl	800387c <xTaskRemoveFromEventList>
 8002f6a:	1e03      	subs	r3, r0, #0
 8002f6c:	d001      	beq.n	8002f72 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8002f6e:	f000 fd45 	bl	80039fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002f72:	210e      	movs	r1, #14
 8002f74:	187b      	adds	r3, r7, r1
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	187b      	adds	r3, r7, r1
 8002f7e:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f80:	230e      	movs	r3, #14
 8002f82:	18fb      	adds	r3, r7, r3
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	b25b      	sxtb	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	dce5      	bgt.n	8002f58 <prvUnlockQueue+0x70>
 8002f8c:	e000      	b.n	8002f90 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8002f8e:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2244      	movs	r2, #68	; 0x44
 8002f94:	21ff      	movs	r1, #255	; 0xff
 8002f96:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8002f98:	f001 fa54 	bl	8004444 <vPortExitCritical>
}
 8002f9c:	46c0      	nop			; (mov r8, r8)
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b004      	add	sp, #16
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002fac:	f001 fa38 	bl	8004420 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d102      	bne.n	8002fbe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	e001      	b.n	8002fc2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002fc2:	f001 fa3f 	bl	8004444 <vPortExitCritical>

	return xReturn;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
}
 8002fc8:	0018      	movs	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	b004      	add	sp, #16
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002fd8:	f001 fa22 	bl	8004420 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d102      	bne.n	8002fee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	e001      	b.n	8002ff2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ff2:	f001 fa27 	bl	8004444 <vPortExitCritical>

	return xReturn;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
}
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	b004      	add	sp, #16
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800300a:	2300      	movs	r3, #0
 800300c:	60fb      	str	r3, [r7, #12]
 800300e:	e015      	b.n	800303c <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003010:	4b0e      	ldr	r3, [pc, #56]	; (800304c <vQueueAddToRegistry+0x4c>)
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	00d2      	lsls	r2, r2, #3
 8003016:	58d3      	ldr	r3, [r2, r3]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10c      	bne.n	8003036 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800301c:	4b0b      	ldr	r3, [pc, #44]	; (800304c <vQueueAddToRegistry+0x4c>)
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	00d2      	lsls	r2, r2, #3
 8003022:	6839      	ldr	r1, [r7, #0]
 8003024:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003026:	4a09      	ldr	r2, [pc, #36]	; (800304c <vQueueAddToRegistry+0x4c>)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	18d3      	adds	r3, r2, r3
 800302e:	3304      	adds	r3, #4
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003034:	e006      	b.n	8003044 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	3301      	adds	r3, #1
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2b07      	cmp	r3, #7
 8003040:	d9e6      	bls.n	8003010 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	46c0      	nop			; (mov r8, r8)
 8003046:	46bd      	mov	sp, r7
 8003048:	b004      	add	sp, #16
 800304a:	bd80      	pop	{r7, pc}
 800304c:	200007c0 	.word	0x200007c0

08003050 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003060:	f001 f9de 	bl	8004420 <vPortEnterCritical>
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	2244      	movs	r2, #68	; 0x44
 8003068:	5c9b      	ldrb	r3, [r3, r2]
 800306a:	b25b      	sxtb	r3, r3
 800306c:	3301      	adds	r3, #1
 800306e:	d103      	bne.n	8003078 <vQueueWaitForMessageRestricted+0x28>
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	2244      	movs	r2, #68	; 0x44
 8003074:	2100      	movs	r1, #0
 8003076:	5499      	strb	r1, [r3, r2]
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	2245      	movs	r2, #69	; 0x45
 800307c:	5c9b      	ldrb	r3, [r3, r2]
 800307e:	b25b      	sxtb	r3, r3
 8003080:	3301      	adds	r3, #1
 8003082:	d103      	bne.n	800308c <vQueueWaitForMessageRestricted+0x3c>
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	2245      	movs	r2, #69	; 0x45
 8003088:	2100      	movs	r1, #0
 800308a:	5499      	strb	r1, [r3, r2]
 800308c:	f001 f9da 	bl	8004444 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003094:	2b00      	cmp	r3, #0
 8003096:	d106      	bne.n	80030a6 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	3324      	adds	r3, #36	; 0x24
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	68b9      	ldr	r1, [r7, #8]
 80030a0:	0018      	movs	r0, r3
 80030a2:	f000 fbc5 	bl	8003830 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	0018      	movs	r0, r3
 80030aa:	f7ff ff1d 	bl	8002ee8 <prvUnlockQueue>
	}
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	46bd      	mov	sp, r7
 80030b2:	b006      	add	sp, #24
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80030b6:	b590      	push	{r4, r7, lr}
 80030b8:	b08d      	sub	sp, #52	; 0x34
 80030ba:	af04      	add	r7, sp, #16
 80030bc:	60f8      	str	r0, [r7, #12]
 80030be:	60b9      	str	r1, [r7, #8]
 80030c0:	607a      	str	r2, [r7, #4]
 80030c2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80030c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <xTaskCreateStatic+0x18>
 80030ca:	b672      	cpsid	i
 80030cc:	e7fe      	b.n	80030cc <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80030ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <xTaskCreateStatic+0x22>
 80030d4:	b672      	cpsid	i
 80030d6:	e7fe      	b.n	80030d6 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80030d8:	235c      	movs	r3, #92	; 0x5c
 80030da:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	2b5c      	cmp	r3, #92	; 0x5c
 80030e0:	d001      	beq.n	80030e6 <xTaskCreateStatic+0x30>
 80030e2:	b672      	cpsid	i
 80030e4:	e7fe      	b.n	80030e4 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80030e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d020      	beq.n	800312e <xTaskCreateStatic+0x78>
 80030ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d01d      	beq.n	800312e <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80030f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f4:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030fa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	2259      	movs	r2, #89	; 0x59
 8003100:	2102      	movs	r1, #2
 8003102:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003104:	683c      	ldr	r4, [r7, #0]
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	68b9      	ldr	r1, [r7, #8]
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	2300      	movs	r3, #0
 800310e:	9303      	str	r3, [sp, #12]
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	9302      	str	r3, [sp, #8]
 8003114:	2318      	movs	r3, #24
 8003116:	18fb      	adds	r3, r7, r3
 8003118:	9301      	str	r3, [sp, #4]
 800311a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	0023      	movs	r3, r4
 8003120:	f000 f858 	bl	80031d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	0018      	movs	r0, r3
 8003128:	f000 f8d6 	bl	80032d8 <prvAddNewTaskToReadyList>
 800312c:	e001      	b.n	8003132 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 800312e:	2300      	movs	r3, #0
 8003130:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003132:	69bb      	ldr	r3, [r7, #24]
	}
 8003134:	0018      	movs	r0, r3
 8003136:	46bd      	mov	sp, r7
 8003138:	b009      	add	sp, #36	; 0x24
 800313a:	bd90      	pop	{r4, r7, pc}

0800313c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800313c:	b590      	push	{r4, r7, lr}
 800313e:	b08d      	sub	sp, #52	; 0x34
 8003140:	af04      	add	r7, sp, #16
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	603b      	str	r3, [r7, #0]
 8003148:	1dbb      	adds	r3, r7, #6
 800314a:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800314c:	1dbb      	adds	r3, r7, #6
 800314e:	881b      	ldrh	r3, [r3, #0]
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	0018      	movs	r0, r3
 8003154:	f001 f9fc 	bl	8004550 <pvPortMalloc>
 8003158:	0003      	movs	r3, r0
 800315a:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d010      	beq.n	8003184 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003162:	205c      	movs	r0, #92	; 0x5c
 8003164:	f001 f9f4 	bl	8004550 <pvPortMalloc>
 8003168:	0003      	movs	r3, r0
 800316a:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	631a      	str	r2, [r3, #48]	; 0x30
 8003178:	e006      	b.n	8003188 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	0018      	movs	r0, r3
 800317e:	f001 fa8d 	bl	800469c <vPortFree>
 8003182:	e001      	b.n	8003188 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003184:	2300      	movs	r3, #0
 8003186:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d01a      	beq.n	80031c4 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	2259      	movs	r2, #89	; 0x59
 8003192:	2100      	movs	r1, #0
 8003194:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003196:	1dbb      	adds	r3, r7, #6
 8003198:	881a      	ldrh	r2, [r3, #0]
 800319a:	683c      	ldr	r4, [r7, #0]
 800319c:	68b9      	ldr	r1, [r7, #8]
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	2300      	movs	r3, #0
 80031a2:	9303      	str	r3, [sp, #12]
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	9302      	str	r3, [sp, #8]
 80031a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031aa:	9301      	str	r3, [sp, #4]
 80031ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	0023      	movs	r3, r4
 80031b2:	f000 f80f 	bl	80031d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	0018      	movs	r0, r3
 80031ba:	f000 f88d 	bl	80032d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80031be:	2301      	movs	r3, #1
 80031c0:	61bb      	str	r3, [r7, #24]
 80031c2:	e002      	b.n	80031ca <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80031c4:	2301      	movs	r3, #1
 80031c6:	425b      	negs	r3, r3
 80031c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80031ca:	69bb      	ldr	r3, [r7, #24]
	}
 80031cc:	0018      	movs	r0, r3
 80031ce:	46bd      	mov	sp, r7
 80031d0:	b009      	add	sp, #36	; 0x24
 80031d2:	bd90      	pop	{r4, r7, pc}

080031d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
 80031e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80031e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	001a      	movs	r2, r3
 80031ec:	21a5      	movs	r1, #165	; 0xa5
 80031ee:	f001 fb82 	bl	80048f6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80031f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4936      	ldr	r1, [pc, #216]	; (80032d4 <prvInitialiseNewTask+0x100>)
 80031fa:	468c      	mov	ip, r1
 80031fc:	4463      	add	r3, ip
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	18d3      	adds	r3, r2, r3
 8003202:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	2207      	movs	r2, #7
 8003208:	4393      	bics	r3, r2
 800320a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	2207      	movs	r2, #7
 8003210:	4013      	ands	r3, r2
 8003212:	d001      	beq.n	8003218 <prvInitialiseNewTask+0x44>
 8003214:	b672      	cpsid	i
 8003216:	e7fe      	b.n	8003216 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003218:	2300      	movs	r3, #0
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	e013      	b.n	8003246 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	18d3      	adds	r3, r2, r3
 8003224:	7818      	ldrb	r0, [r3, #0]
 8003226:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003228:	2134      	movs	r1, #52	; 0x34
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	18d3      	adds	r3, r2, r3
 800322e:	185b      	adds	r3, r3, r1
 8003230:	1c02      	adds	r2, r0, #0
 8003232:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	18d3      	adds	r3, r2, r3
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d006      	beq.n	800324e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	3301      	adds	r3, #1
 8003244:	617b      	str	r3, [r7, #20]
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	2b0f      	cmp	r3, #15
 800324a:	d9e8      	bls.n	800321e <prvInitialiseNewTask+0x4a>
 800324c:	e000      	b.n	8003250 <prvInitialiseNewTask+0x7c>
		{
			break;
 800324e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003252:	2243      	movs	r2, #67	; 0x43
 8003254:	2100      	movs	r1, #0
 8003256:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	2b37      	cmp	r3, #55	; 0x37
 800325c:	d901      	bls.n	8003262 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800325e:	2337      	movs	r3, #55	; 0x37
 8003260:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003264:	6a3a      	ldr	r2, [r7, #32]
 8003266:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326a:	6a3a      	ldr	r2, [r7, #32]
 800326c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800326e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003270:	2200      	movs	r2, #0
 8003272:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003276:	3304      	adds	r3, #4
 8003278:	0018      	movs	r0, r3
 800327a:	f7ff fa69 	bl	8002750 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800327e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003280:	3318      	adds	r3, #24
 8003282:	0018      	movs	r0, r3
 8003284:	f7ff fa64 	bl	8002750 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800328c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800328e:	6a3b      	ldr	r3, [r7, #32]
 8003290:	2238      	movs	r2, #56	; 0x38
 8003292:	1ad2      	subs	r2, r2, r3
 8003294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003296:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800329c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800329e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a0:	2200      	movs	r2, #0
 80032a2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80032a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a6:	2258      	movs	r2, #88	; 0x58
 80032a8:	2100      	movs	r1, #0
 80032aa:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	68f9      	ldr	r1, [r7, #12]
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	0018      	movs	r0, r3
 80032b4:	f001 f816 	bl	80042e4 <pxPortInitialiseStack>
 80032b8:	0002      	movs	r2, r0
 80032ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032bc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d002      	beq.n	80032ca <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032ca:	46c0      	nop			; (mov r8, r8)
 80032cc:	46bd      	mov	sp, r7
 80032ce:	b006      	add	sp, #24
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	46c0      	nop			; (mov r8, r8)
 80032d4:	3fffffff 	.word	0x3fffffff

080032d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80032e0:	f001 f89e 	bl	8004420 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80032e4:	4b2a      	ldr	r3, [pc, #168]	; (8003390 <prvAddNewTaskToReadyList+0xb8>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	4b29      	ldr	r3, [pc, #164]	; (8003390 <prvAddNewTaskToReadyList+0xb8>)
 80032ec:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80032ee:	4b29      	ldr	r3, [pc, #164]	; (8003394 <prvAddNewTaskToReadyList+0xbc>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d109      	bne.n	800330a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80032f6:	4b27      	ldr	r3, [pc, #156]	; (8003394 <prvAddNewTaskToReadyList+0xbc>)
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80032fc:	4b24      	ldr	r3, [pc, #144]	; (8003390 <prvAddNewTaskToReadyList+0xb8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d110      	bne.n	8003326 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003304:	f000 fb94 	bl	8003a30 <prvInitialiseTaskLists>
 8003308:	e00d      	b.n	8003326 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800330a:	4b23      	ldr	r3, [pc, #140]	; (8003398 <prvAddNewTaskToReadyList+0xc0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d109      	bne.n	8003326 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003312:	4b20      	ldr	r3, [pc, #128]	; (8003394 <prvAddNewTaskToReadyList+0xbc>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331c:	429a      	cmp	r2, r3
 800331e:	d802      	bhi.n	8003326 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003320:	4b1c      	ldr	r3, [pc, #112]	; (8003394 <prvAddNewTaskToReadyList+0xbc>)
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003326:	4b1d      	ldr	r3, [pc, #116]	; (800339c <prvAddNewTaskToReadyList+0xc4>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	1c5a      	adds	r2, r3, #1
 800332c:	4b1b      	ldr	r3, [pc, #108]	; (800339c <prvAddNewTaskToReadyList+0xc4>)
 800332e:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003330:	4b1a      	ldr	r3, [pc, #104]	; (800339c <prvAddNewTaskToReadyList+0xc4>)
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800333c:	4b18      	ldr	r3, [pc, #96]	; (80033a0 <prvAddNewTaskToReadyList+0xc8>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d903      	bls.n	800334c <prvAddNewTaskToReadyList+0x74>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003348:	4b15      	ldr	r3, [pc, #84]	; (80033a0 <prvAddNewTaskToReadyList+0xc8>)
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003350:	0013      	movs	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	189b      	adds	r3, r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4a12      	ldr	r2, [pc, #72]	; (80033a4 <prvAddNewTaskToReadyList+0xcc>)
 800335a:	189a      	adds	r2, r3, r2
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	3304      	adds	r3, #4
 8003360:	0019      	movs	r1, r3
 8003362:	0010      	movs	r0, r2
 8003364:	f7ff f9ff 	bl	8002766 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003368:	f001 f86c 	bl	8004444 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800336c:	4b0a      	ldr	r3, [pc, #40]	; (8003398 <prvAddNewTaskToReadyList+0xc0>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d008      	beq.n	8003386 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003374:	4b07      	ldr	r3, [pc, #28]	; (8003394 <prvAddNewTaskToReadyList+0xbc>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337e:	429a      	cmp	r2, r3
 8003380:	d201      	bcs.n	8003386 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003382:	f001 f83d 	bl	8004400 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	46bd      	mov	sp, r7
 800338a:	b002      	add	sp, #8
 800338c:	bd80      	pop	{r7, pc}
 800338e:	46c0      	nop			; (mov r8, r8)
 8003390:	20000cd4 	.word	0x20000cd4
 8003394:	20000800 	.word	0x20000800
 8003398:	20000ce0 	.word	0x20000ce0
 800339c:	20000cf0 	.word	0x20000cf0
 80033a0:	20000cdc 	.word	0x20000cdc
 80033a4:	20000804 	.word	0x20000804

080033a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80033b0:	2300      	movs	r3, #0
 80033b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d010      	beq.n	80033dc <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80033ba:	4b0d      	ldr	r3, [pc, #52]	; (80033f0 <vTaskDelay+0x48>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <vTaskDelay+0x1e>
 80033c2:	b672      	cpsid	i
 80033c4:	e7fe      	b.n	80033c4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80033c6:	f000 f869 	bl	800349c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2100      	movs	r1, #0
 80033ce:	0018      	movs	r0, r3
 80033d0:	f000 fc64 	bl	8003c9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80033d4:	f000 f86e 	bl	80034b4 <xTaskResumeAll>
 80033d8:	0003      	movs	r3, r0
 80033da:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80033e2:	f001 f80d 	bl	8004400 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	46bd      	mov	sp, r7
 80033ea:	b004      	add	sp, #16
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	20000cfc 	.word	0x20000cfc

080033f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80033f4:	b590      	push	{r4, r7, lr}
 80033f6:	b089      	sub	sp, #36	; 0x24
 80033f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003402:	003a      	movs	r2, r7
 8003404:	1d39      	adds	r1, r7, #4
 8003406:	2308      	movs	r3, #8
 8003408:	18fb      	adds	r3, r7, r3
 800340a:	0018      	movs	r0, r3
 800340c:	f7ff f952 	bl	80026b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003410:	683c      	ldr	r4, [r7, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68ba      	ldr	r2, [r7, #8]
 8003416:	491b      	ldr	r1, [pc, #108]	; (8003484 <vTaskStartScheduler+0x90>)
 8003418:	481b      	ldr	r0, [pc, #108]	; (8003488 <vTaskStartScheduler+0x94>)
 800341a:	9202      	str	r2, [sp, #8]
 800341c:	9301      	str	r3, [sp, #4]
 800341e:	2300      	movs	r3, #0
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	2300      	movs	r3, #0
 8003424:	0022      	movs	r2, r4
 8003426:	f7ff fe46 	bl	80030b6 <xTaskCreateStatic>
 800342a:	0002      	movs	r2, r0
 800342c:	4b17      	ldr	r3, [pc, #92]	; (800348c <vTaskStartScheduler+0x98>)
 800342e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003430:	4b16      	ldr	r3, [pc, #88]	; (800348c <vTaskStartScheduler+0x98>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d002      	beq.n	800343e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003438:	2301      	movs	r3, #1
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	e001      	b.n	8003442 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800343e:	2300      	movs	r3, #0
 8003440:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d103      	bne.n	8003450 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8003448:	f000 fc7c 	bl	8003d44 <xTimerCreateTimerTask>
 800344c:	0003      	movs	r3, r0
 800344e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d10d      	bne.n	8003472 <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8003456:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003458:	4b0d      	ldr	r3, [pc, #52]	; (8003490 <vTaskStartScheduler+0x9c>)
 800345a:	2201      	movs	r2, #1
 800345c:	4252      	negs	r2, r2
 800345e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003460:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <vTaskStartScheduler+0xa0>)
 8003462:	2201      	movs	r2, #1
 8003464:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003466:	4b0c      	ldr	r3, [pc, #48]	; (8003498 <vTaskStartScheduler+0xa4>)
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800346c:	f000 ffa4 	bl	80043b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003470:	e004      	b.n	800347c <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	3301      	adds	r3, #1
 8003476:	d101      	bne.n	800347c <vTaskStartScheduler+0x88>
 8003478:	b672      	cpsid	i
 800347a:	e7fe      	b.n	800347a <vTaskStartScheduler+0x86>
}
 800347c:	46c0      	nop			; (mov r8, r8)
 800347e:	46bd      	mov	sp, r7
 8003480:	b005      	add	sp, #20
 8003482:	bd90      	pop	{r4, r7, pc}
 8003484:	08004950 	.word	0x08004950
 8003488:	08003a11 	.word	0x08003a11
 800348c:	20000cf8 	.word	0x20000cf8
 8003490:	20000cf4 	.word	0x20000cf4
 8003494:	20000ce0 	.word	0x20000ce0
 8003498:	20000cd8 	.word	0x20000cd8

0800349c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80034a0:	4b03      	ldr	r3, [pc, #12]	; (80034b0 <vTaskSuspendAll+0x14>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	4b02      	ldr	r3, [pc, #8]	; (80034b0 <vTaskSuspendAll+0x14>)
 80034a8:	601a      	str	r2, [r3, #0]
}
 80034aa:	46c0      	nop			; (mov r8, r8)
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	20000cfc 	.word	0x20000cfc

080034b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80034ba:	2300      	movs	r3, #0
 80034bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80034be:	2300      	movs	r3, #0
 80034c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80034c2:	4b3a      	ldr	r3, [pc, #232]	; (80035ac <xTaskResumeAll+0xf8>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <xTaskResumeAll+0x1a>
 80034ca:	b672      	cpsid	i
 80034cc:	e7fe      	b.n	80034cc <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80034ce:	f000 ffa7 	bl	8004420 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80034d2:	4b36      	ldr	r3, [pc, #216]	; (80035ac <xTaskResumeAll+0xf8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	1e5a      	subs	r2, r3, #1
 80034d8:	4b34      	ldr	r3, [pc, #208]	; (80035ac <xTaskResumeAll+0xf8>)
 80034da:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034dc:	4b33      	ldr	r3, [pc, #204]	; (80035ac <xTaskResumeAll+0xf8>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d15b      	bne.n	800359c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80034e4:	4b32      	ldr	r3, [pc, #200]	; (80035b0 <xTaskResumeAll+0xfc>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d057      	beq.n	800359c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034ec:	e02f      	b.n	800354e <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80034ee:	4b31      	ldr	r3, [pc, #196]	; (80035b4 <xTaskResumeAll+0x100>)
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	3318      	adds	r3, #24
 80034fa:	0018      	movs	r0, r3
 80034fc:	f7ff f98b 	bl	8002816 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	3304      	adds	r3, #4
 8003504:	0018      	movs	r0, r3
 8003506:	f7ff f986 	bl	8002816 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800350e:	4b2a      	ldr	r3, [pc, #168]	; (80035b8 <xTaskResumeAll+0x104>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	429a      	cmp	r2, r3
 8003514:	d903      	bls.n	800351e <xTaskResumeAll+0x6a>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800351a:	4b27      	ldr	r3, [pc, #156]	; (80035b8 <xTaskResumeAll+0x104>)
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003522:	0013      	movs	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	189b      	adds	r3, r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4a24      	ldr	r2, [pc, #144]	; (80035bc <xTaskResumeAll+0x108>)
 800352c:	189a      	adds	r2, r3, r2
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	3304      	adds	r3, #4
 8003532:	0019      	movs	r1, r3
 8003534:	0010      	movs	r0, r2
 8003536:	f7ff f916 	bl	8002766 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800353e:	4b20      	ldr	r3, [pc, #128]	; (80035c0 <xTaskResumeAll+0x10c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003544:	429a      	cmp	r2, r3
 8003546:	d302      	bcc.n	800354e <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8003548:	4b1e      	ldr	r3, [pc, #120]	; (80035c4 <xTaskResumeAll+0x110>)
 800354a:	2201      	movs	r2, #1
 800354c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800354e:	4b19      	ldr	r3, [pc, #100]	; (80035b4 <xTaskResumeAll+0x100>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1cb      	bne.n	80034ee <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800355c:	f000 fb02 	bl	8003b64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003560:	4b19      	ldr	r3, [pc, #100]	; (80035c8 <xTaskResumeAll+0x114>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00f      	beq.n	800358c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800356c:	f000 f83c 	bl	80035e8 <xTaskIncrementTick>
 8003570:	1e03      	subs	r3, r0, #0
 8003572:	d002      	beq.n	800357a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8003574:	4b13      	ldr	r3, [pc, #76]	; (80035c4 <xTaskResumeAll+0x110>)
 8003576:	2201      	movs	r2, #1
 8003578:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	3b01      	subs	r3, #1
 800357e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f2      	bne.n	800356c <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8003586:	4b10      	ldr	r3, [pc, #64]	; (80035c8 <xTaskResumeAll+0x114>)
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800358c:	4b0d      	ldr	r3, [pc, #52]	; (80035c4 <xTaskResumeAll+0x110>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003594:	2301      	movs	r3, #1
 8003596:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003598:	f000 ff32 	bl	8004400 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800359c:	f000 ff52 	bl	8004444 <vPortExitCritical>

	return xAlreadyYielded;
 80035a0:	68bb      	ldr	r3, [r7, #8]
}
 80035a2:	0018      	movs	r0, r3
 80035a4:	46bd      	mov	sp, r7
 80035a6:	b004      	add	sp, #16
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	20000cfc 	.word	0x20000cfc
 80035b0:	20000cd4 	.word	0x20000cd4
 80035b4:	20000c94 	.word	0x20000c94
 80035b8:	20000cdc 	.word	0x20000cdc
 80035bc:	20000804 	.word	0x20000804
 80035c0:	20000800 	.word	0x20000800
 80035c4:	20000ce8 	.word	0x20000ce8
 80035c8:	20000ce4 	.word	0x20000ce4

080035cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80035d2:	4b04      	ldr	r3, [pc, #16]	; (80035e4 <xTaskGetTickCount+0x18>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80035d8:	687b      	ldr	r3, [r7, #4]
}
 80035da:	0018      	movs	r0, r3
 80035dc:	46bd      	mov	sp, r7
 80035de:	b002      	add	sp, #8
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	46c0      	nop			; (mov r8, r8)
 80035e4:	20000cd8 	.word	0x20000cd8

080035e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80035ee:	2300      	movs	r3, #0
 80035f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035f2:	4b4c      	ldr	r3, [pc, #304]	; (8003724 <xTaskIncrementTick+0x13c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d000      	beq.n	80035fc <xTaskIncrementTick+0x14>
 80035fa:	e083      	b.n	8003704 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80035fc:	4b4a      	ldr	r3, [pc, #296]	; (8003728 <xTaskIncrementTick+0x140>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	3301      	adds	r3, #1
 8003602:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003604:	4b48      	ldr	r3, [pc, #288]	; (8003728 <xTaskIncrementTick+0x140>)
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d117      	bne.n	8003640 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8003610:	4b46      	ldr	r3, [pc, #280]	; (800372c <xTaskIncrementTick+0x144>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <xTaskIncrementTick+0x36>
 800361a:	b672      	cpsid	i
 800361c:	e7fe      	b.n	800361c <xTaskIncrementTick+0x34>
 800361e:	4b43      	ldr	r3, [pc, #268]	; (800372c <xTaskIncrementTick+0x144>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	4b42      	ldr	r3, [pc, #264]	; (8003730 <xTaskIncrementTick+0x148>)
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	4b40      	ldr	r3, [pc, #256]	; (800372c <xTaskIncrementTick+0x144>)
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	4b40      	ldr	r3, [pc, #256]	; (8003730 <xTaskIncrementTick+0x148>)
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	4b40      	ldr	r3, [pc, #256]	; (8003734 <xTaskIncrementTick+0x14c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	4b3e      	ldr	r3, [pc, #248]	; (8003734 <xTaskIncrementTick+0x14c>)
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	f000 fa92 	bl	8003b64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003640:	4b3d      	ldr	r3, [pc, #244]	; (8003738 <xTaskIncrementTick+0x150>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	429a      	cmp	r2, r3
 8003648:	d34e      	bcc.n	80036e8 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800364a:	4b38      	ldr	r3, [pc, #224]	; (800372c <xTaskIncrementTick+0x144>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <xTaskIncrementTick+0x70>
 8003654:	2301      	movs	r3, #1
 8003656:	e000      	b.n	800365a <xTaskIncrementTick+0x72>
 8003658:	2300      	movs	r3, #0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d004      	beq.n	8003668 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800365e:	4b36      	ldr	r3, [pc, #216]	; (8003738 <xTaskIncrementTick+0x150>)
 8003660:	2201      	movs	r2, #1
 8003662:	4252      	negs	r2, r2
 8003664:	601a      	str	r2, [r3, #0]
					break;
 8003666:	e03f      	b.n	80036e8 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003668:	4b30      	ldr	r3, [pc, #192]	; (800372c <xTaskIncrementTick+0x144>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	429a      	cmp	r2, r3
 800367e:	d203      	bcs.n	8003688 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003680:	4b2d      	ldr	r3, [pc, #180]	; (8003738 <xTaskIncrementTick+0x150>)
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	601a      	str	r2, [r3, #0]
						break;
 8003686:	e02f      	b.n	80036e8 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	3304      	adds	r3, #4
 800368c:	0018      	movs	r0, r3
 800368e:	f7ff f8c2 	bl	8002816 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003696:	2b00      	cmp	r3, #0
 8003698:	d004      	beq.n	80036a4 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	3318      	adds	r3, #24
 800369e:	0018      	movs	r0, r3
 80036a0:	f7ff f8b9 	bl	8002816 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a8:	4b24      	ldr	r3, [pc, #144]	; (800373c <xTaskIncrementTick+0x154>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d903      	bls.n	80036b8 <xTaskIncrementTick+0xd0>
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b4:	4b21      	ldr	r3, [pc, #132]	; (800373c <xTaskIncrementTick+0x154>)
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036bc:	0013      	movs	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	189b      	adds	r3, r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4a1e      	ldr	r2, [pc, #120]	; (8003740 <xTaskIncrementTick+0x158>)
 80036c6:	189a      	adds	r2, r3, r2
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	3304      	adds	r3, #4
 80036cc:	0019      	movs	r1, r3
 80036ce:	0010      	movs	r0, r2
 80036d0:	f7ff f849 	bl	8002766 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d8:	4b1a      	ldr	r3, [pc, #104]	; (8003744 <xTaskIncrementTick+0x15c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036de:	429a      	cmp	r2, r3
 80036e0:	d3b3      	bcc.n	800364a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80036e2:	2301      	movs	r3, #1
 80036e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036e6:	e7b0      	b.n	800364a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80036e8:	4b16      	ldr	r3, [pc, #88]	; (8003744 <xTaskIncrementTick+0x15c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ee:	4914      	ldr	r1, [pc, #80]	; (8003740 <xTaskIncrementTick+0x158>)
 80036f0:	0013      	movs	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	189b      	adds	r3, r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	585b      	ldr	r3, [r3, r1]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d907      	bls.n	800370e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80036fe:	2301      	movs	r3, #1
 8003700:	617b      	str	r3, [r7, #20]
 8003702:	e004      	b.n	800370e <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003704:	4b10      	ldr	r3, [pc, #64]	; (8003748 <xTaskIncrementTick+0x160>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	1c5a      	adds	r2, r3, #1
 800370a:	4b0f      	ldr	r3, [pc, #60]	; (8003748 <xTaskIncrementTick+0x160>)
 800370c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800370e:	4b0f      	ldr	r3, [pc, #60]	; (800374c <xTaskIncrementTick+0x164>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8003716:	2301      	movs	r3, #1
 8003718:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800371a:	697b      	ldr	r3, [r7, #20]
}
 800371c:	0018      	movs	r0, r3
 800371e:	46bd      	mov	sp, r7
 8003720:	b006      	add	sp, #24
 8003722:	bd80      	pop	{r7, pc}
 8003724:	20000cfc 	.word	0x20000cfc
 8003728:	20000cd8 	.word	0x20000cd8
 800372c:	20000c8c 	.word	0x20000c8c
 8003730:	20000c90 	.word	0x20000c90
 8003734:	20000cec 	.word	0x20000cec
 8003738:	20000cf4 	.word	0x20000cf4
 800373c:	20000cdc 	.word	0x20000cdc
 8003740:	20000804 	.word	0x20000804
 8003744:	20000800 	.word	0x20000800
 8003748:	20000ce4 	.word	0x20000ce4
 800374c:	20000ce8 	.word	0x20000ce8

08003750 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003756:	4b22      	ldr	r3, [pc, #136]	; (80037e0 <vTaskSwitchContext+0x90>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800375e:	4b21      	ldr	r3, [pc, #132]	; (80037e4 <vTaskSwitchContext+0x94>)
 8003760:	2201      	movs	r2, #1
 8003762:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003764:	e037      	b.n	80037d6 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8003766:	4b1f      	ldr	r3, [pc, #124]	; (80037e4 <vTaskSwitchContext+0x94>)
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800376c:	4b1e      	ldr	r3, [pc, #120]	; (80037e8 <vTaskSwitchContext+0x98>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	607b      	str	r3, [r7, #4]
 8003772:	e007      	b.n	8003784 <vTaskSwitchContext+0x34>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <vTaskSwitchContext+0x2e>
 800377a:	b672      	cpsid	i
 800377c:	e7fe      	b.n	800377c <vTaskSwitchContext+0x2c>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3b01      	subs	r3, #1
 8003782:	607b      	str	r3, [r7, #4]
 8003784:	4919      	ldr	r1, [pc, #100]	; (80037ec <vTaskSwitchContext+0x9c>)
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	0013      	movs	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	189b      	adds	r3, r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	585b      	ldr	r3, [r3, r1]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0ee      	beq.n	8003774 <vTaskSwitchContext+0x24>
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	0013      	movs	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	189b      	adds	r3, r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4a12      	ldr	r2, [pc, #72]	; (80037ec <vTaskSwitchContext+0x9c>)
 80037a2:	189b      	adds	r3, r3, r2
 80037a4:	603b      	str	r3, [r7, #0]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	605a      	str	r2, [r3, #4]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	3308      	adds	r3, #8
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d104      	bne.n	80037c6 <vTaskSwitchContext+0x76>
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	605a      	str	r2, [r3, #4]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	4b08      	ldr	r3, [pc, #32]	; (80037f0 <vTaskSwitchContext+0xa0>)
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	4b05      	ldr	r3, [pc, #20]	; (80037e8 <vTaskSwitchContext+0x98>)
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	601a      	str	r2, [r3, #0]
}
 80037d6:	46c0      	nop			; (mov r8, r8)
 80037d8:	46bd      	mov	sp, r7
 80037da:	b002      	add	sp, #8
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	46c0      	nop			; (mov r8, r8)
 80037e0:	20000cfc 	.word	0x20000cfc
 80037e4:	20000ce8 	.word	0x20000ce8
 80037e8:	20000cdc 	.word	0x20000cdc
 80037ec:	20000804 	.word	0x20000804
 80037f0:	20000800 	.word	0x20000800

080037f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <vTaskPlaceOnEventList+0x14>
 8003804:	b672      	cpsid	i
 8003806:	e7fe      	b.n	8003806 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003808:	4b08      	ldr	r3, [pc, #32]	; (800382c <vTaskPlaceOnEventList+0x38>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	3318      	adds	r3, #24
 800380e:	001a      	movs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	0011      	movs	r1, r2
 8003814:	0018      	movs	r0, r3
 8003816:	f7fe ffc8 	bl	80027aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2101      	movs	r1, #1
 800381e:	0018      	movs	r0, r3
 8003820:	f000 fa3c 	bl	8003c9c <prvAddCurrentTaskToDelayedList>
}
 8003824:	46c0      	nop			; (mov r8, r8)
 8003826:	46bd      	mov	sp, r7
 8003828:	b002      	add	sp, #8
 800382a:	bd80      	pop	{r7, pc}
 800382c:	20000800 	.word	0x20000800

08003830 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <vTaskPlaceOnEventListRestricted+0x16>
 8003842:	b672      	cpsid	i
 8003844:	e7fe      	b.n	8003844 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003846:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <vTaskPlaceOnEventListRestricted+0x48>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	3318      	adds	r3, #24
 800384c:	001a      	movs	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	0011      	movs	r1, r2
 8003852:	0018      	movs	r0, r3
 8003854:	f7fe ff87 	bl	8002766 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800385e:	2301      	movs	r3, #1
 8003860:	425b      	negs	r3, r3
 8003862:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	0011      	movs	r1, r2
 800386a:	0018      	movs	r0, r3
 800386c:	f000 fa16 	bl	8003c9c <prvAddCurrentTaskToDelayedList>
	}
 8003870:	46c0      	nop			; (mov r8, r8)
 8003872:	46bd      	mov	sp, r7
 8003874:	b004      	add	sp, #16
 8003876:	bd80      	pop	{r7, pc}
 8003878:	20000800 	.word	0x20000800

0800387c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <xTaskRemoveFromEventList+0x1a>
 8003892:	b672      	cpsid	i
 8003894:	e7fe      	b.n	8003894 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	3318      	adds	r3, #24
 800389a:	0018      	movs	r0, r3
 800389c:	f7fe ffbb 	bl	8002816 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038a0:	4b1e      	ldr	r3, [pc, #120]	; (800391c <xTaskRemoveFromEventList+0xa0>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d11d      	bne.n	80038e4 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	3304      	adds	r3, #4
 80038ac:	0018      	movs	r0, r3
 80038ae:	f7fe ffb2 	bl	8002816 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b6:	4b1a      	ldr	r3, [pc, #104]	; (8003920 <xTaskRemoveFromEventList+0xa4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d903      	bls.n	80038c6 <xTaskRemoveFromEventList+0x4a>
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c2:	4b17      	ldr	r3, [pc, #92]	; (8003920 <xTaskRemoveFromEventList+0xa4>)
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ca:	0013      	movs	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	189b      	adds	r3, r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4a14      	ldr	r2, [pc, #80]	; (8003924 <xTaskRemoveFromEventList+0xa8>)
 80038d4:	189a      	adds	r2, r3, r2
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	3304      	adds	r3, #4
 80038da:	0019      	movs	r1, r3
 80038dc:	0010      	movs	r0, r2
 80038de:	f7fe ff42 	bl	8002766 <vListInsertEnd>
 80038e2:	e007      	b.n	80038f4 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	3318      	adds	r3, #24
 80038e8:	001a      	movs	r2, r3
 80038ea:	4b0f      	ldr	r3, [pc, #60]	; (8003928 <xTaskRemoveFromEventList+0xac>)
 80038ec:	0011      	movs	r1, r2
 80038ee:	0018      	movs	r0, r3
 80038f0:	f7fe ff39 	bl	8002766 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f8:	4b0c      	ldr	r3, [pc, #48]	; (800392c <xTaskRemoveFromEventList+0xb0>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fe:	429a      	cmp	r2, r3
 8003900:	d905      	bls.n	800390e <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003902:	2301      	movs	r3, #1
 8003904:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003906:	4b0a      	ldr	r3, [pc, #40]	; (8003930 <xTaskRemoveFromEventList+0xb4>)
 8003908:	2201      	movs	r2, #1
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	e001      	b.n	8003912 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800390e:	2300      	movs	r3, #0
 8003910:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003912:	68fb      	ldr	r3, [r7, #12]
}
 8003914:	0018      	movs	r0, r3
 8003916:	46bd      	mov	sp, r7
 8003918:	b004      	add	sp, #16
 800391a:	bd80      	pop	{r7, pc}
 800391c:	20000cfc 	.word	0x20000cfc
 8003920:	20000cdc 	.word	0x20000cdc
 8003924:	20000804 	.word	0x20000804
 8003928:	20000c94 	.word	0x20000c94
 800392c:	20000800 	.word	0x20000800
 8003930:	20000ce8 	.word	0x20000ce8

08003934 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800393c:	4b05      	ldr	r3, [pc, #20]	; (8003954 <vTaskInternalSetTimeOutState+0x20>)
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003944:	4b04      	ldr	r3, [pc, #16]	; (8003958 <vTaskInternalSetTimeOutState+0x24>)
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	605a      	str	r2, [r3, #4]
}
 800394c:	46c0      	nop			; (mov r8, r8)
 800394e:	46bd      	mov	sp, r7
 8003950:	b002      	add	sp, #8
 8003952:	bd80      	pop	{r7, pc}
 8003954:	20000cec 	.word	0x20000cec
 8003958:	20000cd8 	.word	0x20000cd8

0800395c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <xTaskCheckForTimeOut+0x14>
 800396c:	b672      	cpsid	i
 800396e:	e7fe      	b.n	800396e <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <xTaskCheckForTimeOut+0x1e>
 8003976:	b672      	cpsid	i
 8003978:	e7fe      	b.n	8003978 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800397a:	f000 fd51 	bl	8004420 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800397e:	4b1d      	ldr	r3, [pc, #116]	; (80039f4 <xTaskCheckForTimeOut+0x98>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	3301      	adds	r3, #1
 8003994:	d102      	bne.n	800399c <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003996:	2300      	movs	r3, #0
 8003998:	617b      	str	r3, [r7, #20]
 800399a:	e024      	b.n	80039e6 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	4b15      	ldr	r3, [pc, #84]	; (80039f8 <xTaskCheckForTimeOut+0x9c>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d007      	beq.n	80039b8 <xTaskCheckForTimeOut+0x5c>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d302      	bcc.n	80039b8 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80039b2:	2301      	movs	r3, #1
 80039b4:	617b      	str	r3, [r7, #20]
 80039b6:	e016      	b.n	80039e6 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d20c      	bcs.n	80039dc <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	1ad2      	subs	r2, r2, r3
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	0018      	movs	r0, r3
 80039d2:	f7ff ffaf 	bl	8003934 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80039d6:	2300      	movs	r3, #0
 80039d8:	617b      	str	r3, [r7, #20]
 80039da:	e004      	b.n	80039e6 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	2200      	movs	r2, #0
 80039e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80039e2:	2301      	movs	r3, #1
 80039e4:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80039e6:	f000 fd2d 	bl	8004444 <vPortExitCritical>

	return xReturn;
 80039ea:	697b      	ldr	r3, [r7, #20]
}
 80039ec:	0018      	movs	r0, r3
 80039ee:	46bd      	mov	sp, r7
 80039f0:	b006      	add	sp, #24
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	20000cd8 	.word	0x20000cd8
 80039f8:	20000cec 	.word	0x20000cec

080039fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003a00:	4b02      	ldr	r3, [pc, #8]	; (8003a0c <vTaskMissedYield+0x10>)
 8003a02:	2201      	movs	r2, #1
 8003a04:	601a      	str	r2, [r3, #0]
}
 8003a06:	46c0      	nop			; (mov r8, r8)
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	20000ce8 	.word	0x20000ce8

08003a10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003a18:	f000 f84e 	bl	8003ab8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a1c:	4b03      	ldr	r3, [pc, #12]	; (8003a2c <prvIdleTask+0x1c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d9f9      	bls.n	8003a18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003a24:	f000 fcec 	bl	8004400 <vPortYield>
		prvCheckTasksWaitingTermination();
 8003a28:	e7f6      	b.n	8003a18 <prvIdleTask+0x8>
 8003a2a:	46c0      	nop			; (mov r8, r8)
 8003a2c:	20000804 	.word	0x20000804

08003a30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a36:	2300      	movs	r3, #0
 8003a38:	607b      	str	r3, [r7, #4]
 8003a3a:	e00c      	b.n	8003a56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	0013      	movs	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	189b      	adds	r3, r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	4a14      	ldr	r2, [pc, #80]	; (8003a98 <prvInitialiseTaskLists+0x68>)
 8003a48:	189b      	adds	r3, r3, r2
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f7fe fe62 	bl	8002714 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3301      	adds	r3, #1
 8003a54:	607b      	str	r3, [r7, #4]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b37      	cmp	r3, #55	; 0x37
 8003a5a:	d9ef      	bls.n	8003a3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003a5c:	4b0f      	ldr	r3, [pc, #60]	; (8003a9c <prvInitialiseTaskLists+0x6c>)
 8003a5e:	0018      	movs	r0, r3
 8003a60:	f7fe fe58 	bl	8002714 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a64:	4b0e      	ldr	r3, [pc, #56]	; (8003aa0 <prvInitialiseTaskLists+0x70>)
 8003a66:	0018      	movs	r0, r3
 8003a68:	f7fe fe54 	bl	8002714 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a6c:	4b0d      	ldr	r3, [pc, #52]	; (8003aa4 <prvInitialiseTaskLists+0x74>)
 8003a6e:	0018      	movs	r0, r3
 8003a70:	f7fe fe50 	bl	8002714 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a74:	4b0c      	ldr	r3, [pc, #48]	; (8003aa8 <prvInitialiseTaskLists+0x78>)
 8003a76:	0018      	movs	r0, r3
 8003a78:	f7fe fe4c 	bl	8002714 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a7c:	4b0b      	ldr	r3, [pc, #44]	; (8003aac <prvInitialiseTaskLists+0x7c>)
 8003a7e:	0018      	movs	r0, r3
 8003a80:	f7fe fe48 	bl	8002714 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a84:	4b0a      	ldr	r3, [pc, #40]	; (8003ab0 <prvInitialiseTaskLists+0x80>)
 8003a86:	4a05      	ldr	r2, [pc, #20]	; (8003a9c <prvInitialiseTaskLists+0x6c>)
 8003a88:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a8a:	4b0a      	ldr	r3, [pc, #40]	; (8003ab4 <prvInitialiseTaskLists+0x84>)
 8003a8c:	4a04      	ldr	r2, [pc, #16]	; (8003aa0 <prvInitialiseTaskLists+0x70>)
 8003a8e:	601a      	str	r2, [r3, #0]
}
 8003a90:	46c0      	nop			; (mov r8, r8)
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b002      	add	sp, #8
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	20000804 	.word	0x20000804
 8003a9c:	20000c64 	.word	0x20000c64
 8003aa0:	20000c78 	.word	0x20000c78
 8003aa4:	20000c94 	.word	0x20000c94
 8003aa8:	20000ca8 	.word	0x20000ca8
 8003aac:	20000cc0 	.word	0x20000cc0
 8003ab0:	20000c8c 	.word	0x20000c8c
 8003ab4:	20000c90 	.word	0x20000c90

08003ab8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003abe:	e01a      	b.n	8003af6 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8003ac0:	f000 fcae 	bl	8004420 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003ac4:	4b10      	ldr	r3, [pc, #64]	; (8003b08 <prvCheckTasksWaitingTermination+0x50>)
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3304      	adds	r3, #4
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	f7fe fea0 	bl	8002816 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003ad6:	4b0d      	ldr	r3, [pc, #52]	; (8003b0c <prvCheckTasksWaitingTermination+0x54>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	1e5a      	subs	r2, r3, #1
 8003adc:	4b0b      	ldr	r3, [pc, #44]	; (8003b0c <prvCheckTasksWaitingTermination+0x54>)
 8003ade:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ae0:	4b0b      	ldr	r3, [pc, #44]	; (8003b10 <prvCheckTasksWaitingTermination+0x58>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	1e5a      	subs	r2, r3, #1
 8003ae6:	4b0a      	ldr	r3, [pc, #40]	; (8003b10 <prvCheckTasksWaitingTermination+0x58>)
 8003ae8:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8003aea:	f000 fcab 	bl	8004444 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	0018      	movs	r0, r3
 8003af2:	f000 f80f 	bl	8003b14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003af6:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <prvCheckTasksWaitingTermination+0x58>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1e0      	bne.n	8003ac0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003afe:	46c0      	nop			; (mov r8, r8)
 8003b00:	46c0      	nop			; (mov r8, r8)
 8003b02:	46bd      	mov	sp, r7
 8003b04:	b002      	add	sp, #8
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	20000ca8 	.word	0x20000ca8
 8003b0c:	20000cd4 	.word	0x20000cd4
 8003b10:	20000cbc 	.word	0x20000cbc

08003b14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2259      	movs	r2, #89	; 0x59
 8003b20:	5c9b      	ldrb	r3, [r3, r2]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d109      	bne.n	8003b3a <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	f000 fdb6 	bl	800469c <vPortFree>
				vPortFree( pxTCB );
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	0018      	movs	r0, r3
 8003b34:	f000 fdb2 	bl	800469c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003b38:	e010      	b.n	8003b5c <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2259      	movs	r2, #89	; 0x59
 8003b3e:	5c9b      	ldrb	r3, [r3, r2]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d104      	bne.n	8003b4e <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	0018      	movs	r0, r3
 8003b48:	f000 fda8 	bl	800469c <vPortFree>
	}
 8003b4c:	e006      	b.n	8003b5c <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2259      	movs	r2, #89	; 0x59
 8003b52:	5c9b      	ldrb	r3, [r3, r2]
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d001      	beq.n	8003b5c <prvDeleteTCB+0x48>
 8003b58:	b672      	cpsid	i
 8003b5a:	e7fe      	b.n	8003b5a <prvDeleteTCB+0x46>
	}
 8003b5c:	46c0      	nop			; (mov r8, r8)
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	b002      	add	sp, #8
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b6a:	4b0e      	ldr	r3, [pc, #56]	; (8003ba4 <prvResetNextTaskUnblockTime+0x40>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <prvResetNextTaskUnblockTime+0x14>
 8003b74:	2301      	movs	r3, #1
 8003b76:	e000      	b.n	8003b7a <prvResetNextTaskUnblockTime+0x16>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d004      	beq.n	8003b88 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ba8 <prvResetNextTaskUnblockTime+0x44>)
 8003b80:	2201      	movs	r2, #1
 8003b82:	4252      	negs	r2, r2
 8003b84:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003b86:	e008      	b.n	8003b9a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b88:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <prvResetNextTaskUnblockTime+0x40>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	4b04      	ldr	r3, [pc, #16]	; (8003ba8 <prvResetNextTaskUnblockTime+0x44>)
 8003b98:	601a      	str	r2, [r3, #0]
}
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	b002      	add	sp, #8
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	46c0      	nop			; (mov r8, r8)
 8003ba4:	20000c8c 	.word	0x20000c8c
 8003ba8:	20000cf4 	.word	0x20000cf4

08003bac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003bb2:	4b0a      	ldr	r3, [pc, #40]	; (8003bdc <xTaskGetSchedulerState+0x30>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d102      	bne.n	8003bc0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	607b      	str	r3, [r7, #4]
 8003bbe:	e008      	b.n	8003bd2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bc0:	4b07      	ldr	r3, [pc, #28]	; (8003be0 <xTaskGetSchedulerState+0x34>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d102      	bne.n	8003bce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003bc8:	2302      	movs	r3, #2
 8003bca:	607b      	str	r3, [r7, #4]
 8003bcc:	e001      	b.n	8003bd2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003bd2:	687b      	ldr	r3, [r7, #4]
	}
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	b002      	add	sp, #8
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	20000ce0 	.word	0x20000ce0
 8003be0:	20000cfc 	.word	0x20000cfc

08003be4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d044      	beq.n	8003c84 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003bfa:	4b25      	ldr	r3, [pc, #148]	; (8003c90 <xTaskPriorityDisinherit+0xac>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d001      	beq.n	8003c08 <xTaskPriorityDisinherit+0x24>
 8003c04:	b672      	cpsid	i
 8003c06:	e7fe      	b.n	8003c06 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <xTaskPriorityDisinherit+0x30>
 8003c10:	b672      	cpsid	i
 8003c12:	e7fe      	b.n	8003c12 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c18:	1e5a      	subs	r2, r3, #1
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d02c      	beq.n	8003c84 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d128      	bne.n	8003c84 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	3304      	adds	r3, #4
 8003c36:	0018      	movs	r0, r3
 8003c38:	f7fe fded 	bl	8002816 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	2238      	movs	r2, #56	; 0x38
 8003c4a:	1ad2      	subs	r2, r2, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c54:	4b0f      	ldr	r3, [pc, #60]	; (8003c94 <xTaskPriorityDisinherit+0xb0>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d903      	bls.n	8003c64 <xTaskPriorityDisinherit+0x80>
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c60:	4b0c      	ldr	r3, [pc, #48]	; (8003c94 <xTaskPriorityDisinherit+0xb0>)
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c68:	0013      	movs	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	189b      	adds	r3, r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4a09      	ldr	r2, [pc, #36]	; (8003c98 <xTaskPriorityDisinherit+0xb4>)
 8003c72:	189a      	adds	r2, r3, r2
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	3304      	adds	r3, #4
 8003c78:	0019      	movs	r1, r3
 8003c7a:	0010      	movs	r0, r2
 8003c7c:	f7fe fd73 	bl	8002766 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003c80:	2301      	movs	r3, #1
 8003c82:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003c84:	68fb      	ldr	r3, [r7, #12]
	}
 8003c86:	0018      	movs	r0, r3
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	b004      	add	sp, #16
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	46c0      	nop			; (mov r8, r8)
 8003c90:	20000800 	.word	0x20000800
 8003c94:	20000cdc 	.word	0x20000cdc
 8003c98:	20000804 	.word	0x20000804

08003c9c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003ca6:	4b21      	ldr	r3, [pc, #132]	; (8003d2c <prvAddCurrentTaskToDelayedList+0x90>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cac:	4b20      	ldr	r3, [pc, #128]	; (8003d30 <prvAddCurrentTaskToDelayedList+0x94>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	f7fe fdaf 	bl	8002816 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	d10b      	bne.n	8003cd6 <prvAddCurrentTaskToDelayedList+0x3a>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d008      	beq.n	8003cd6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cc4:	4b1a      	ldr	r3, [pc, #104]	; (8003d30 <prvAddCurrentTaskToDelayedList+0x94>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	1d1a      	adds	r2, r3, #4
 8003cca:	4b1a      	ldr	r3, [pc, #104]	; (8003d34 <prvAddCurrentTaskToDelayedList+0x98>)
 8003ccc:	0011      	movs	r1, r2
 8003cce:	0018      	movs	r0, r3
 8003cd0:	f7fe fd49 	bl	8002766 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003cd4:	e026      	b.n	8003d24 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	18d3      	adds	r3, r2, r3
 8003cdc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003cde:	4b14      	ldr	r3, [pc, #80]	; (8003d30 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003ce6:	68ba      	ldr	r2, [r7, #8]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d209      	bcs.n	8003d02 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cee:	4b12      	ldr	r3, [pc, #72]	; (8003d38 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	4b0f      	ldr	r3, [pc, #60]	; (8003d30 <prvAddCurrentTaskToDelayedList+0x94>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	3304      	adds	r3, #4
 8003cf8:	0019      	movs	r1, r3
 8003cfa:	0010      	movs	r0, r2
 8003cfc:	f7fe fd55 	bl	80027aa <vListInsert>
}
 8003d00:	e010      	b.n	8003d24 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d02:	4b0e      	ldr	r3, [pc, #56]	; (8003d3c <prvAddCurrentTaskToDelayedList+0xa0>)
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	4b0a      	ldr	r3, [pc, #40]	; (8003d30 <prvAddCurrentTaskToDelayedList+0x94>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	3304      	adds	r3, #4
 8003d0c:	0019      	movs	r1, r3
 8003d0e:	0010      	movs	r0, r2
 8003d10:	f7fe fd4b 	bl	80027aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003d14:	4b0a      	ldr	r3, [pc, #40]	; (8003d40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d202      	bcs.n	8003d24 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003d1e:	4b08      	ldr	r3, [pc, #32]	; (8003d40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	601a      	str	r2, [r3, #0]
}
 8003d24:	46c0      	nop			; (mov r8, r8)
 8003d26:	46bd      	mov	sp, r7
 8003d28:	b004      	add	sp, #16
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	20000cd8 	.word	0x20000cd8
 8003d30:	20000800 	.word	0x20000800
 8003d34:	20000cc0 	.word	0x20000cc0
 8003d38:	20000c90 	.word	0x20000c90
 8003d3c:	20000c8c 	.word	0x20000c8c
 8003d40:	20000cf4 	.word	0x20000cf4

08003d44 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003d44:	b590      	push	{r4, r7, lr}
 8003d46:	b089      	sub	sp, #36	; 0x24
 8003d48:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003d4e:	f000 fa87 	bl	8004260 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003d52:	4b17      	ldr	r3, [pc, #92]	; (8003db0 <xTimerCreateTimerTask+0x6c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d020      	beq.n	8003d9c <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003d62:	003a      	movs	r2, r7
 8003d64:	1d39      	adds	r1, r7, #4
 8003d66:	2308      	movs	r3, #8
 8003d68:	18fb      	adds	r3, r7, r3
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	f7fe fcba 	bl	80026e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003d70:	683c      	ldr	r4, [r7, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68ba      	ldr	r2, [r7, #8]
 8003d76:	490f      	ldr	r1, [pc, #60]	; (8003db4 <xTimerCreateTimerTask+0x70>)
 8003d78:	480f      	ldr	r0, [pc, #60]	; (8003db8 <xTimerCreateTimerTask+0x74>)
 8003d7a:	9202      	str	r2, [sp, #8]
 8003d7c:	9301      	str	r3, [sp, #4]
 8003d7e:	2302      	movs	r3, #2
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	2300      	movs	r3, #0
 8003d84:	0022      	movs	r2, r4
 8003d86:	f7ff f996 	bl	80030b6 <xTaskCreateStatic>
 8003d8a:	0002      	movs	r2, r0
 8003d8c:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <xTimerCreateTimerTask+0x78>)
 8003d8e:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003d90:	4b0a      	ldr	r3, [pc, #40]	; (8003dbc <xTimerCreateTimerTask+0x78>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <xTimerCreateTimerTask+0x62>
 8003da2:	b672      	cpsid	i
 8003da4:	e7fe      	b.n	8003da4 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8003da6:	68fb      	ldr	r3, [r7, #12]
}
 8003da8:	0018      	movs	r0, r3
 8003daa:	46bd      	mov	sp, r7
 8003dac:	b005      	add	sp, #20
 8003dae:	bd90      	pop	{r4, r7, pc}
 8003db0:	20000d30 	.word	0x20000d30
 8003db4:	08004958 	.word	0x08004958
 8003db8:	08003ec5 	.word	0x08003ec5
 8003dbc:	20000d34 	.word	0x20000d34

08003dc0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003dc0:	b590      	push	{r4, r7, lr}
 8003dc2:	b08b      	sub	sp, #44	; 0x2c
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
 8003dcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <xTimerGenericCommand+0x1c>
 8003dd8:	b672      	cpsid	i
 8003dda:	e7fe      	b.n	8003dda <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003ddc:	4b1c      	ldr	r3, [pc, #112]	; (8003e50 <xTimerGenericCommand+0x90>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d030      	beq.n	8003e46 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003de4:	2414      	movs	r4, #20
 8003de6:	193b      	adds	r3, r7, r4
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003dec:	193b      	adds	r3, r7, r4
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003df2:	193b      	adds	r3, r7, r4
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b05      	cmp	r3, #5
 8003dfc:	dc19      	bgt.n	8003e32 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003dfe:	f7ff fed5 	bl	8003bac <xTaskGetSchedulerState>
 8003e02:	0003      	movs	r3, r0
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d109      	bne.n	8003e1c <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003e08:	4b11      	ldr	r3, [pc, #68]	; (8003e50 <xTimerGenericCommand+0x90>)
 8003e0a:	6818      	ldr	r0, [r3, #0]
 8003e0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e0e:	1939      	adds	r1, r7, r4
 8003e10:	2300      	movs	r3, #0
 8003e12:	f7fe fdee 	bl	80029f2 <xQueueGenericSend>
 8003e16:	0003      	movs	r3, r0
 8003e18:	627b      	str	r3, [r7, #36]	; 0x24
 8003e1a:	e014      	b.n	8003e46 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003e1c:	4b0c      	ldr	r3, [pc, #48]	; (8003e50 <xTimerGenericCommand+0x90>)
 8003e1e:	6818      	ldr	r0, [r3, #0]
 8003e20:	2314      	movs	r3, #20
 8003e22:	18f9      	adds	r1, r7, r3
 8003e24:	2300      	movs	r3, #0
 8003e26:	2200      	movs	r2, #0
 8003e28:	f7fe fde3 	bl	80029f2 <xQueueGenericSend>
 8003e2c:	0003      	movs	r3, r0
 8003e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e30:	e009      	b.n	8003e46 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003e32:	4b07      	ldr	r3, [pc, #28]	; (8003e50 <xTimerGenericCommand+0x90>)
 8003e34:	6818      	ldr	r0, [r3, #0]
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	2314      	movs	r3, #20
 8003e3a:	18f9      	adds	r1, r7, r3
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	f7fe fe9c 	bl	8002b7a <xQueueGenericSendFromISR>
 8003e42:	0003      	movs	r3, r0
 8003e44:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e48:	0018      	movs	r0, r3
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	b00b      	add	sp, #44	; 0x2c
 8003e4e:	bd90      	pop	{r4, r7, pc}
 8003e50:	20000d30 	.word	0x20000d30

08003e54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af02      	add	r7, sp, #8
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e5e:	4b18      	ldr	r3, [pc, #96]	; (8003ec0 <prvProcessExpiredTimer+0x6c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	f7fe fcd2 	bl	8002816 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d119      	bne.n	8003eae <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	699a      	ldr	r2, [r3, #24]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	18d1      	adds	r1, r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f000 f8b6 	bl	8003ff8 <prvInsertTimerInActiveList>
 8003e8c:	1e03      	subs	r3, r0, #0
 8003e8e:	d00e      	beq.n	8003eae <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	2300      	movs	r3, #0
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	2300      	movs	r3, #0
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	f7ff ff90 	bl	8003dc0 <xTimerGenericCommand>
 8003ea0:	0003      	movs	r3, r0
 8003ea2:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <prvProcessExpiredTimer+0x5a>
 8003eaa:	b672      	cpsid	i
 8003eac:	e7fe      	b.n	8003eac <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	0010      	movs	r0, r2
 8003eb6:	4798      	blx	r3
}
 8003eb8:	46c0      	nop			; (mov r8, r8)
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	b004      	add	sp, #16
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	20000d28 	.word	0x20000d28

08003ec4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ecc:	2308      	movs	r3, #8
 8003ece:	18fb      	adds	r3, r7, r3
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	f000 f851 	bl	8003f78 <prvGetNextExpireTime>
 8003ed6:	0003      	movs	r3, r0
 8003ed8:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	0011      	movs	r1, r2
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	f000 f803 	bl	8003eec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003ee6:	f000 f8c9 	bl	800407c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003eea:	e7ef      	b.n	8003ecc <prvTimerTask+0x8>

08003eec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003ef6:	f7ff fad1 	bl	800349c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003efa:	2308      	movs	r3, #8
 8003efc:	18fb      	adds	r3, r7, r3
 8003efe:	0018      	movs	r0, r3
 8003f00:	f000 f85a 	bl	8003fb8 <prvSampleTimeNow>
 8003f04:	0003      	movs	r3, r0
 8003f06:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d129      	bne.n	8003f62 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10c      	bne.n	8003f2e <prvProcessTimerOrBlockTask+0x42>
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d808      	bhi.n	8003f2e <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8003f1c:	f7ff faca 	bl	80034b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	0011      	movs	r1, r2
 8003f26:	0018      	movs	r0, r3
 8003f28:	f7ff ff94 	bl	8003e54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003f2c:	e01b      	b.n	8003f66 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d006      	beq.n	8003f42 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003f34:	4b0e      	ldr	r3, [pc, #56]	; (8003f70 <prvProcessTimerOrBlockTask+0x84>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	425a      	negs	r2, r3
 8003f3c:	4153      	adcs	r3, r2
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003f42:	4b0c      	ldr	r3, [pc, #48]	; (8003f74 <prvProcessTimerOrBlockTask+0x88>)
 8003f44:	6818      	ldr	r0, [r3, #0]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	0019      	movs	r1, r3
 8003f50:	f7ff f87e 	bl	8003050 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003f54:	f7ff faae 	bl	80034b4 <xTaskResumeAll>
 8003f58:	1e03      	subs	r3, r0, #0
 8003f5a:	d104      	bne.n	8003f66 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8003f5c:	f000 fa50 	bl	8004400 <vPortYield>
}
 8003f60:	e001      	b.n	8003f66 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8003f62:	f7ff faa7 	bl	80034b4 <xTaskResumeAll>
}
 8003f66:	46c0      	nop			; (mov r8, r8)
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	b004      	add	sp, #16
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	46c0      	nop			; (mov r8, r8)
 8003f70:	20000d2c 	.word	0x20000d2c
 8003f74:	20000d30 	.word	0x20000d30

08003f78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003f80:	4b0c      	ldr	r3, [pc, #48]	; (8003fb4 <prvGetNextExpireTime+0x3c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	425a      	negs	r2, r3
 8003f88:	4153      	adcs	r3, r2
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	001a      	movs	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d105      	bne.n	8003fa6 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f9a:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <prvGetNextExpireTime+0x3c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	e001      	b.n	8003faa <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003faa:	68fb      	ldr	r3, [r7, #12]
}
 8003fac:	0018      	movs	r0, r3
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	b004      	add	sp, #16
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	20000d28 	.word	0x20000d28

08003fb8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003fc0:	f7ff fb04 	bl	80035cc <xTaskGetTickCount>
 8003fc4:	0003      	movs	r3, r0
 8003fc6:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8003fc8:	4b0a      	ldr	r3, [pc, #40]	; (8003ff4 <prvSampleTimeNow+0x3c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d205      	bcs.n	8003fde <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8003fd2:	f000 f8eb 	bl	80041ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	e002      	b.n	8003fe4 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003fe4:	4b03      	ldr	r3, [pc, #12]	; (8003ff4 <prvSampleTimeNow+0x3c>)
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8003fea:	68fb      	ldr	r3, [r7, #12]
}
 8003fec:	0018      	movs	r0, r3
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	b004      	add	sp, #16
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	20000d38 	.word	0x20000d38

08003ff8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	429a      	cmp	r2, r3
 800401c:	d812      	bhi.n	8004044 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	1ad2      	subs	r2, r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	429a      	cmp	r2, r3
 800402a:	d302      	bcc.n	8004032 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800402c:	2301      	movs	r3, #1
 800402e:	617b      	str	r3, [r7, #20]
 8004030:	e01b      	b.n	800406a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004032:	4b10      	ldr	r3, [pc, #64]	; (8004074 <prvInsertTimerInActiveList+0x7c>)
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	3304      	adds	r3, #4
 800403a:	0019      	movs	r1, r3
 800403c:	0010      	movs	r0, r2
 800403e:	f7fe fbb4 	bl	80027aa <vListInsert>
 8004042:	e012      	b.n	800406a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	429a      	cmp	r2, r3
 800404a:	d206      	bcs.n	800405a <prvInsertTimerInActiveList+0x62>
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	429a      	cmp	r2, r3
 8004052:	d302      	bcc.n	800405a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004054:	2301      	movs	r3, #1
 8004056:	617b      	str	r3, [r7, #20]
 8004058:	e007      	b.n	800406a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800405a:	4b07      	ldr	r3, [pc, #28]	; (8004078 <prvInsertTimerInActiveList+0x80>)
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	3304      	adds	r3, #4
 8004062:	0019      	movs	r1, r3
 8004064:	0010      	movs	r0, r2
 8004066:	f7fe fba0 	bl	80027aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800406a:	697b      	ldr	r3, [r7, #20]
}
 800406c:	0018      	movs	r0, r3
 800406e:	46bd      	mov	sp, r7
 8004070:	b006      	add	sp, #24
 8004072:	bd80      	pop	{r7, pc}
 8004074:	20000d2c 	.word	0x20000d2c
 8004078:	20000d28 	.word	0x20000d28

0800407c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800407c:	b590      	push	{r4, r7, lr}
 800407e:	b08d      	sub	sp, #52	; 0x34
 8004080:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004082:	e07f      	b.n	8004184 <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004084:	2208      	movs	r2, #8
 8004086:	18bb      	adds	r3, r7, r2
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	da0f      	bge.n	80040ae <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800408e:	18bb      	adds	r3, r7, r2
 8004090:	3304      	adds	r3, #4
 8004092:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <prvProcessReceivedCommands+0x22>
 800409a:	b672      	cpsid	i
 800409c:	e7fe      	b.n	800409c <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	6858      	ldr	r0, [r3, #4]
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	0019      	movs	r1, r3
 80040ac:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80040ae:	2208      	movs	r2, #8
 80040b0:	18bb      	adds	r3, r7, r2
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	db64      	blt.n	8004182 <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80040b8:	18bb      	adds	r3, r7, r2
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d004      	beq.n	80040d0 <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040c6:	6a3b      	ldr	r3, [r7, #32]
 80040c8:	3304      	adds	r3, #4
 80040ca:	0018      	movs	r0, r3
 80040cc:	f7fe fba3 	bl	8002816 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040d0:	1d3b      	adds	r3, r7, #4
 80040d2:	0018      	movs	r0, r3
 80040d4:	f7ff ff70 	bl	8003fb8 <prvSampleTimeNow>
 80040d8:	0003      	movs	r3, r0
 80040da:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 80040dc:	2308      	movs	r3, #8
 80040de:	18fb      	adds	r3, r7, r3
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2b09      	cmp	r3, #9
 80040e4:	d84e      	bhi.n	8004184 <prvProcessReceivedCommands+0x108>
 80040e6:	009a      	lsls	r2, r3, #2
 80040e8:	4b2e      	ldr	r3, [pc, #184]	; (80041a4 <prvProcessReceivedCommands+0x128>)
 80040ea:	18d3      	adds	r3, r2, r3
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80040f0:	2408      	movs	r4, #8
 80040f2:	193b      	adds	r3, r7, r4
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	18d1      	adds	r1, r2, r3
 80040fc:	193b      	adds	r3, r7, r4
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	69fa      	ldr	r2, [r7, #28]
 8004102:	6a38      	ldr	r0, [r7, #32]
 8004104:	f7ff ff78 	bl	8003ff8 <prvInsertTimerInActiveList>
 8004108:	1e03      	subs	r3, r0, #0
 800410a:	d03b      	beq.n	8004184 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	6a3a      	ldr	r2, [r7, #32]
 8004112:	0010      	movs	r0, r2
 8004114:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004116:	6a3b      	ldr	r3, [r7, #32]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d132      	bne.n	8004184 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800411e:	193b      	adds	r3, r7, r4
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	18d2      	adds	r2, r2, r3
 8004128:	6a38      	ldr	r0, [r7, #32]
 800412a:	2300      	movs	r3, #0
 800412c:	9300      	str	r3, [sp, #0]
 800412e:	2300      	movs	r3, #0
 8004130:	2100      	movs	r1, #0
 8004132:	f7ff fe45 	bl	8003dc0 <xTimerGenericCommand>
 8004136:	0003      	movs	r3, r0
 8004138:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d121      	bne.n	8004184 <prvProcessReceivedCommands+0x108>
 8004140:	b672      	cpsid	i
 8004142:	e7fe      	b.n	8004142 <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004144:	2308      	movs	r3, #8
 8004146:	18fb      	adds	r3, r7, r3
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	6a3b      	ldr	r3, [r7, #32]
 800414c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800414e:	6a3b      	ldr	r3, [r7, #32]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <prvProcessReceivedCommands+0xde>
 8004156:	b672      	cpsid	i
 8004158:	e7fe      	b.n	8004158 <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800415a:	6a3b      	ldr	r3, [r7, #32]
 800415c:	699a      	ldr	r2, [r3, #24]
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	18d1      	adds	r1, r2, r3
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	69fa      	ldr	r2, [r7, #28]
 8004166:	6a38      	ldr	r0, [r7, #32]
 8004168:	f7ff ff46 	bl	8003ff8 <prvInsertTimerInActiveList>
					break;
 800416c:	e00a      	b.n	8004184 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	222c      	movs	r2, #44	; 0x2c
 8004172:	5c9b      	ldrb	r3, [r3, r2]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d105      	bne.n	8004184 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	0018      	movs	r0, r3
 800417c:	f000 fa8e 	bl	800469c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004180:	e000      	b.n	8004184 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004182:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004184:	4b08      	ldr	r3, [pc, #32]	; (80041a8 <prvProcessReceivedCommands+0x12c>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2208      	movs	r2, #8
 800418a:	18b9      	adds	r1, r7, r2
 800418c:	2200      	movs	r2, #0
 800418e:	0018      	movs	r0, r3
 8004190:	f7fe fd64 	bl	8002c5c <xQueueReceive>
 8004194:	1e03      	subs	r3, r0, #0
 8004196:	d000      	beq.n	800419a <prvProcessReceivedCommands+0x11e>
 8004198:	e774      	b.n	8004084 <prvProcessReceivedCommands+0x8>
	}
}
 800419a:	46c0      	nop			; (mov r8, r8)
 800419c:	46c0      	nop			; (mov r8, r8)
 800419e:	46bd      	mov	sp, r7
 80041a0:	b00b      	add	sp, #44	; 0x2c
 80041a2:	bd90      	pop	{r4, r7, pc}
 80041a4:	080049c8 	.word	0x080049c8
 80041a8:	20000d30 	.word	0x20000d30

080041ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b088      	sub	sp, #32
 80041b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80041b2:	e03e      	b.n	8004232 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041b4:	4b28      	ldr	r3, [pc, #160]	; (8004258 <prvSwitchTimerLists+0xac>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041be:	4b26      	ldr	r3, [pc, #152]	; (8004258 <prvSwitchTimerLists+0xac>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	3304      	adds	r3, #4
 80041cc:	0018      	movs	r0, r3
 80041ce:	f7fe fb22 	bl	8002816 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	0010      	movs	r0, r2
 80041da:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d126      	bne.n	8004232 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	18d3      	adds	r3, r2, r3
 80041ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d90e      	bls.n	8004214 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004202:	4b15      	ldr	r3, [pc, #84]	; (8004258 <prvSwitchTimerLists+0xac>)
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	3304      	adds	r3, #4
 800420a:	0019      	movs	r1, r3
 800420c:	0010      	movs	r0, r2
 800420e:	f7fe facc 	bl	80027aa <vListInsert>
 8004212:	e00e      	b.n	8004232 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	2300      	movs	r3, #0
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	2300      	movs	r3, #0
 800421e:	2100      	movs	r1, #0
 8004220:	f7ff fdce 	bl	8003dc0 <xTimerGenericCommand>
 8004224:	0003      	movs	r3, r0
 8004226:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <prvSwitchTimerLists+0x86>
 800422e:	b672      	cpsid	i
 8004230:	e7fe      	b.n	8004230 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004232:	4b09      	ldr	r3, [pc, #36]	; (8004258 <prvSwitchTimerLists+0xac>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1bb      	bne.n	80041b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800423c:	4b06      	ldr	r3, [pc, #24]	; (8004258 <prvSwitchTimerLists+0xac>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004242:	4b06      	ldr	r3, [pc, #24]	; (800425c <prvSwitchTimerLists+0xb0>)
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	4b04      	ldr	r3, [pc, #16]	; (8004258 <prvSwitchTimerLists+0xac>)
 8004248:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800424a:	4b04      	ldr	r3, [pc, #16]	; (800425c <prvSwitchTimerLists+0xb0>)
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	601a      	str	r2, [r3, #0]
}
 8004250:	46c0      	nop			; (mov r8, r8)
 8004252:	46bd      	mov	sp, r7
 8004254:	b006      	add	sp, #24
 8004256:	bd80      	pop	{r7, pc}
 8004258:	20000d28 	.word	0x20000d28
 800425c:	20000d2c 	.word	0x20000d2c

08004260 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004266:	f000 f8db 	bl	8004420 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800426a:	4b16      	ldr	r3, [pc, #88]	; (80042c4 <prvCheckForValidListAndQueue+0x64>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d123      	bne.n	80042ba <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8004272:	4b15      	ldr	r3, [pc, #84]	; (80042c8 <prvCheckForValidListAndQueue+0x68>)
 8004274:	0018      	movs	r0, r3
 8004276:	f7fe fa4d 	bl	8002714 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800427a:	4b14      	ldr	r3, [pc, #80]	; (80042cc <prvCheckForValidListAndQueue+0x6c>)
 800427c:	0018      	movs	r0, r3
 800427e:	f7fe fa49 	bl	8002714 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004282:	4b13      	ldr	r3, [pc, #76]	; (80042d0 <prvCheckForValidListAndQueue+0x70>)
 8004284:	4a10      	ldr	r2, [pc, #64]	; (80042c8 <prvCheckForValidListAndQueue+0x68>)
 8004286:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004288:	4b12      	ldr	r3, [pc, #72]	; (80042d4 <prvCheckForValidListAndQueue+0x74>)
 800428a:	4a10      	ldr	r2, [pc, #64]	; (80042cc <prvCheckForValidListAndQueue+0x6c>)
 800428c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800428e:	4b12      	ldr	r3, [pc, #72]	; (80042d8 <prvCheckForValidListAndQueue+0x78>)
 8004290:	4a12      	ldr	r2, [pc, #72]	; (80042dc <prvCheckForValidListAndQueue+0x7c>)
 8004292:	2100      	movs	r1, #0
 8004294:	9100      	str	r1, [sp, #0]
 8004296:	2110      	movs	r1, #16
 8004298:	200a      	movs	r0, #10
 800429a:	f7fe fb38 	bl	800290e <xQueueGenericCreateStatic>
 800429e:	0002      	movs	r2, r0
 80042a0:	4b08      	ldr	r3, [pc, #32]	; (80042c4 <prvCheckForValidListAndQueue+0x64>)
 80042a2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80042a4:	4b07      	ldr	r3, [pc, #28]	; (80042c4 <prvCheckForValidListAndQueue+0x64>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d006      	beq.n	80042ba <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80042ac:	4b05      	ldr	r3, [pc, #20]	; (80042c4 <prvCheckForValidListAndQueue+0x64>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a0b      	ldr	r2, [pc, #44]	; (80042e0 <prvCheckForValidListAndQueue+0x80>)
 80042b2:	0011      	movs	r1, r2
 80042b4:	0018      	movs	r0, r3
 80042b6:	f7fe fea3 	bl	8003000 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80042ba:	f000 f8c3 	bl	8004444 <vPortExitCritical>
}
 80042be:	46c0      	nop			; (mov r8, r8)
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	20000d30 	.word	0x20000d30
 80042c8:	20000d00 	.word	0x20000d00
 80042cc:	20000d14 	.word	0x20000d14
 80042d0:	20000d28 	.word	0x20000d28
 80042d4:	20000d2c 	.word	0x20000d2c
 80042d8:	20000ddc 	.word	0x20000ddc
 80042dc:	20000d3c 	.word	0x20000d3c
 80042e0:	08004960 	.word	0x08004960

080042e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	3b04      	subs	r3, #4
 80042f4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2280      	movs	r2, #128	; 0x80
 80042fa:	0452      	lsls	r2, r2, #17
 80042fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	3b04      	subs	r3, #4
 8004302:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	3b04      	subs	r3, #4
 800430e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004310:	4a08      	ldr	r2, [pc, #32]	; (8004334 <pxPortInitialiseStack+0x50>)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	3b14      	subs	r3, #20
 800431a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	3b20      	subs	r3, #32
 8004326:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004328:	68fb      	ldr	r3, [r7, #12]
}
 800432a:	0018      	movs	r0, r3
 800432c:	46bd      	mov	sp, r7
 800432e:	b004      	add	sp, #16
 8004330:	bd80      	pop	{r7, pc}
 8004332:	46c0      	nop			; (mov r8, r8)
 8004334:	08004339 	.word	0x08004339

08004338 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800433e:	2300      	movs	r3, #0
 8004340:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004342:	4b08      	ldr	r3, [pc, #32]	; (8004364 <prvTaskExitError+0x2c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	3301      	adds	r3, #1
 8004348:	d001      	beq.n	800434e <prvTaskExitError+0x16>
 800434a:	b672      	cpsid	i
 800434c:	e7fe      	b.n	800434c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800434e:	b672      	cpsid	i
	while( ulDummy == 0 )
 8004350:	46c0      	nop			; (mov r8, r8)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0fc      	beq.n	8004352 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004358:	46c0      	nop			; (mov r8, r8)
 800435a:	46c0      	nop			; (mov r8, r8)
 800435c:	46bd      	mov	sp, r7
 800435e:	b002      	add	sp, #8
 8004360:	bd80      	pop	{r7, pc}
 8004362:	46c0      	nop			; (mov r8, r8)
 8004364:	2000000c 	.word	0x2000000c

08004368 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800436c:	46c0      	nop			; (mov r8, r8)
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
	...

08004380 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8004380:	4a0b      	ldr	r2, [pc, #44]	; (80043b0 <pxCurrentTCBConst2>)
 8004382:	6813      	ldr	r3, [r2, #0]
 8004384:	6818      	ldr	r0, [r3, #0]
 8004386:	3020      	adds	r0, #32
 8004388:	f380 8809 	msr	PSP, r0
 800438c:	2002      	movs	r0, #2
 800438e:	f380 8814 	msr	CONTROL, r0
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8004398:	46ae      	mov	lr, r5
 800439a:	bc08      	pop	{r3}
 800439c:	bc04      	pop	{r2}
 800439e:	b662      	cpsie	i
 80043a0:	4718      	bx	r3
 80043a2:	46c0      	nop			; (mov r8, r8)
 80043a4:	46c0      	nop			; (mov r8, r8)
 80043a6:	46c0      	nop			; (mov r8, r8)
 80043a8:	46c0      	nop			; (mov r8, r8)
 80043aa:	46c0      	nop			; (mov r8, r8)
 80043ac:	46c0      	nop			; (mov r8, r8)
 80043ae:	46c0      	nop			; (mov r8, r8)

080043b0 <pxCurrentTCBConst2>:
 80043b0:	20000800 	.word	0x20000800
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80043b4:	46c0      	nop			; (mov r8, r8)
 80043b6:	46c0      	nop			; (mov r8, r8)

080043b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80043bc:	4b0e      	ldr	r3, [pc, #56]	; (80043f8 <xPortStartScheduler+0x40>)
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	4b0d      	ldr	r3, [pc, #52]	; (80043f8 <xPortStartScheduler+0x40>)
 80043c2:	21ff      	movs	r1, #255	; 0xff
 80043c4:	0409      	lsls	r1, r1, #16
 80043c6:	430a      	orrs	r2, r1
 80043c8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80043ca:	4b0b      	ldr	r3, [pc, #44]	; (80043f8 <xPortStartScheduler+0x40>)
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	4b0a      	ldr	r3, [pc, #40]	; (80043f8 <xPortStartScheduler+0x40>)
 80043d0:	21ff      	movs	r1, #255	; 0xff
 80043d2:	0609      	lsls	r1, r1, #24
 80043d4:	430a      	orrs	r2, r1
 80043d6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80043d8:	f000 f898 	bl	800450c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80043dc:	4b07      	ldr	r3, [pc, #28]	; (80043fc <xPortStartScheduler+0x44>)
 80043de:	2200      	movs	r2, #0
 80043e0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80043e2:	f7ff ffcd 	bl	8004380 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80043e6:	f7ff f9b3 	bl	8003750 <vTaskSwitchContext>
	prvTaskExitError();
 80043ea:	f7ff ffa5 	bl	8004338 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	0018      	movs	r0, r3
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	46c0      	nop			; (mov r8, r8)
 80043f8:	e000ed20 	.word	0xe000ed20
 80043fc:	2000000c 	.word	0x2000000c

08004400 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8004404:	4b05      	ldr	r3, [pc, #20]	; (800441c <vPortYield+0x1c>)
 8004406:	2280      	movs	r2, #128	; 0x80
 8004408:	0552      	lsls	r2, r2, #21
 800440a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800440c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004410:	f3bf 8f6f 	isb	sy
}
 8004414:	46c0      	nop			; (mov r8, r8)
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	46c0      	nop			; (mov r8, r8)
 800441c:	e000ed04 	.word	0xe000ed04

08004420 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8004424:	b672      	cpsid	i
    uxCriticalNesting++;
 8004426:	4b06      	ldr	r3, [pc, #24]	; (8004440 <vPortEnterCritical+0x20>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	1c5a      	adds	r2, r3, #1
 800442c:	4b04      	ldr	r3, [pc, #16]	; (8004440 <vPortEnterCritical+0x20>)
 800442e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8004430:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004434:	f3bf 8f6f 	isb	sy
}
 8004438:	46c0      	nop			; (mov r8, r8)
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	2000000c 	.word	0x2000000c

08004444 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004448:	4b09      	ldr	r3, [pc, #36]	; (8004470 <vPortExitCritical+0x2c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <vPortExitCritical+0x10>
 8004450:	b672      	cpsid	i
 8004452:	e7fe      	b.n	8004452 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8004454:	4b06      	ldr	r3, [pc, #24]	; (8004470 <vPortExitCritical+0x2c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	1e5a      	subs	r2, r3, #1
 800445a:	4b05      	ldr	r3, [pc, #20]	; (8004470 <vPortExitCritical+0x2c>)
 800445c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800445e:	4b04      	ldr	r3, [pc, #16]	; (8004470 <vPortExitCritical+0x2c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d100      	bne.n	8004468 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8004466:	b662      	cpsie	i
    }
}
 8004468:	46c0      	nop			; (mov r8, r8)
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	2000000c 	.word	0x2000000c

08004474 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8004474:	f3ef 8010 	mrs	r0, PRIMASK
 8004478:	b672      	cpsid	i
 800447a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800447c:	46c0      	nop			; (mov r8, r8)
 800447e:	0018      	movs	r0, r3

08004480 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8004480:	f380 8810 	msr	PRIMASK, r0
 8004484:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8004486:	46c0      	nop			; (mov r8, r8)
	...

08004490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004490:	f3ef 8009 	mrs	r0, PSP
 8004494:	4b0e      	ldr	r3, [pc, #56]	; (80044d0 <pxCurrentTCBConst>)
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	3820      	subs	r0, #32
 800449a:	6010      	str	r0, [r2, #0]
 800449c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800449e:	4644      	mov	r4, r8
 80044a0:	464d      	mov	r5, r9
 80044a2:	4656      	mov	r6, sl
 80044a4:	465f      	mov	r7, fp
 80044a6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80044a8:	b508      	push	{r3, lr}
 80044aa:	b672      	cpsid	i
 80044ac:	f7ff f950 	bl	8003750 <vTaskSwitchContext>
 80044b0:	b662      	cpsie	i
 80044b2:	bc0c      	pop	{r2, r3}
 80044b4:	6811      	ldr	r1, [r2, #0]
 80044b6:	6808      	ldr	r0, [r1, #0]
 80044b8:	3010      	adds	r0, #16
 80044ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80044bc:	46a0      	mov	r8, r4
 80044be:	46a9      	mov	r9, r5
 80044c0:	46b2      	mov	sl, r6
 80044c2:	46bb      	mov	fp, r7
 80044c4:	f380 8809 	msr	PSP, r0
 80044c8:	3820      	subs	r0, #32
 80044ca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80044cc:	4718      	bx	r3
 80044ce:	46c0      	nop			; (mov r8, r8)

080044d0 <pxCurrentTCBConst>:
 80044d0:	20000800 	.word	0x20000800
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80044d4:	46c0      	nop			; (mov r8, r8)
 80044d6:	46c0      	nop			; (mov r8, r8)

080044d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80044de:	f7ff ffc9 	bl	8004474 <ulSetInterruptMaskFromISR>
 80044e2:	0003      	movs	r3, r0
 80044e4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80044e6:	f7ff f87f 	bl	80035e8 <xTaskIncrementTick>
 80044ea:	1e03      	subs	r3, r0, #0
 80044ec:	d003      	beq.n	80044f6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80044ee:	4b06      	ldr	r3, [pc, #24]	; (8004508 <SysTick_Handler+0x30>)
 80044f0:	2280      	movs	r2, #128	; 0x80
 80044f2:	0552      	lsls	r2, r2, #21
 80044f4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	0018      	movs	r0, r3
 80044fa:	f7ff ffc1 	bl	8004480 <vClearInterruptMaskFromISR>
}
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	46bd      	mov	sp, r7
 8004502:	b002      	add	sp, #8
 8004504:	bd80      	pop	{r7, pc}
 8004506:	46c0      	nop			; (mov r8, r8)
 8004508:	e000ed04 	.word	0xe000ed04

0800450c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8004510:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <prvSetupTimerInterrupt+0x34>)
 8004512:	2200      	movs	r2, #0
 8004514:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8004516:	4b0b      	ldr	r3, [pc, #44]	; (8004544 <prvSetupTimerInterrupt+0x38>)
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800451c:	4b0a      	ldr	r3, [pc, #40]	; (8004548 <prvSetupTimerInterrupt+0x3c>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	22fa      	movs	r2, #250	; 0xfa
 8004522:	0091      	lsls	r1, r2, #2
 8004524:	0018      	movs	r0, r3
 8004526:	f7fb fdef 	bl	8000108 <__udivsi3>
 800452a:	0003      	movs	r3, r0
 800452c:	001a      	movs	r2, r3
 800452e:	4b07      	ldr	r3, [pc, #28]	; (800454c <prvSetupTimerInterrupt+0x40>)
 8004530:	3a01      	subs	r2, #1
 8004532:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8004534:	4b02      	ldr	r3, [pc, #8]	; (8004540 <prvSetupTimerInterrupt+0x34>)
 8004536:	2207      	movs	r2, #7
 8004538:	601a      	str	r2, [r3, #0]
}
 800453a:	46c0      	nop			; (mov r8, r8)
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	e000e010 	.word	0xe000e010
 8004544:	e000e018 	.word	0xe000e018
 8004548:	20000000 	.word	0x20000000
 800454c:	e000e014 	.word	0xe000e014

08004550 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004558:	2300      	movs	r3, #0
 800455a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800455c:	f7fe ff9e 	bl	800349c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004560:	4b49      	ldr	r3, [pc, #292]	; (8004688 <pvPortMalloc+0x138>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004568:	f000 f8e0 	bl	800472c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800456c:	4b47      	ldr	r3, [pc, #284]	; (800468c <pvPortMalloc+0x13c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	4013      	ands	r3, r2
 8004574:	d000      	beq.n	8004578 <pvPortMalloc+0x28>
 8004576:	e079      	b.n	800466c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d012      	beq.n	80045a4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800457e:	2208      	movs	r2, #8
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	189b      	adds	r3, r3, r2
 8004584:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2207      	movs	r2, #7
 800458a:	4013      	ands	r3, r2
 800458c:	d00a      	beq.n	80045a4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2207      	movs	r2, #7
 8004592:	4393      	bics	r3, r2
 8004594:	3308      	adds	r3, #8
 8004596:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2207      	movs	r2, #7
 800459c:	4013      	ands	r3, r2
 800459e:	d001      	beq.n	80045a4 <pvPortMalloc+0x54>
 80045a0:	b672      	cpsid	i
 80045a2:	e7fe      	b.n	80045a2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d060      	beq.n	800466c <pvPortMalloc+0x11c>
 80045aa:	4b39      	ldr	r3, [pc, #228]	; (8004690 <pvPortMalloc+0x140>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d85b      	bhi.n	800466c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80045b4:	4b37      	ldr	r3, [pc, #220]	; (8004694 <pvPortMalloc+0x144>)
 80045b6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80045b8:	4b36      	ldr	r3, [pc, #216]	; (8004694 <pvPortMalloc+0x144>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045be:	e004      	b.n	80045ca <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d903      	bls.n	80045dc <pvPortMalloc+0x8c>
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1f1      	bne.n	80045c0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80045dc:	4b2a      	ldr	r3, [pc, #168]	; (8004688 <pvPortMalloc+0x138>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d042      	beq.n	800466c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2208      	movs	r2, #8
 80045ec:	189b      	adds	r3, r3, r2
 80045ee:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	1ad2      	subs	r2, r2, r3
 8004600:	2308      	movs	r3, #8
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	429a      	cmp	r2, r3
 8004606:	d916      	bls.n	8004636 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	18d3      	adds	r3, r2, r3
 800460e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	2207      	movs	r2, #7
 8004614:	4013      	ands	r3, r2
 8004616:	d001      	beq.n	800461c <pvPortMalloc+0xcc>
 8004618:	b672      	cpsid	i
 800461a:	e7fe      	b.n	800461a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	1ad2      	subs	r2, r2, r3
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	0018      	movs	r0, r3
 8004632:	f000 f8db 	bl	80047ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004636:	4b16      	ldr	r3, [pc, #88]	; (8004690 <pvPortMalloc+0x140>)
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	1ad2      	subs	r2, r2, r3
 8004640:	4b13      	ldr	r3, [pc, #76]	; (8004690 <pvPortMalloc+0x140>)
 8004642:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004644:	4b12      	ldr	r3, [pc, #72]	; (8004690 <pvPortMalloc+0x140>)
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	4b13      	ldr	r3, [pc, #76]	; (8004698 <pvPortMalloc+0x148>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	429a      	cmp	r2, r3
 800464e:	d203      	bcs.n	8004658 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004650:	4b0f      	ldr	r3, [pc, #60]	; (8004690 <pvPortMalloc+0x140>)
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	4b10      	ldr	r3, [pc, #64]	; (8004698 <pvPortMalloc+0x148>)
 8004656:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	4b0b      	ldr	r3, [pc, #44]	; (800468c <pvPortMalloc+0x13c>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	431a      	orrs	r2, r3
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800466c:	f7fe ff22 	bl	80034b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2207      	movs	r2, #7
 8004674:	4013      	ands	r3, r2
 8004676:	d001      	beq.n	800467c <pvPortMalloc+0x12c>
 8004678:	b672      	cpsid	i
 800467a:	e7fe      	b.n	800467a <pvPortMalloc+0x12a>
	return pvReturn;
 800467c:	68fb      	ldr	r3, [r7, #12]
}
 800467e:	0018      	movs	r0, r3
 8004680:	46bd      	mov	sp, r7
 8004682:	b006      	add	sp, #24
 8004684:	bd80      	pop	{r7, pc}
 8004686:	46c0      	nop			; (mov r8, r8)
 8004688:	20001a34 	.word	0x20001a34
 800468c:	20001a40 	.word	0x20001a40
 8004690:	20001a38 	.word	0x20001a38
 8004694:	20001a2c 	.word	0x20001a2c
 8004698:	20001a3c 	.word	0x20001a3c

0800469c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d035      	beq.n	800471a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80046ae:	2308      	movs	r3, #8
 80046b0:	425b      	negs	r3, r3
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	18d3      	adds	r3, r2, r3
 80046b6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	4b18      	ldr	r3, [pc, #96]	; (8004724 <vPortFree+0x88>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4013      	ands	r3, r2
 80046c6:	d101      	bne.n	80046cc <vPortFree+0x30>
 80046c8:	b672      	cpsid	i
 80046ca:	e7fe      	b.n	80046ca <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <vPortFree+0x3c>
 80046d4:	b672      	cpsid	i
 80046d6:	e7fe      	b.n	80046d6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	4b11      	ldr	r3, [pc, #68]	; (8004724 <vPortFree+0x88>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4013      	ands	r3, r2
 80046e2:	d01a      	beq.n	800471a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d116      	bne.n	800471a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	4b0c      	ldr	r3, [pc, #48]	; (8004724 <vPortFree+0x88>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	43db      	mvns	r3, r3
 80046f6:	401a      	ands	r2, r3
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80046fc:	f7fe fece 	bl	800349c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	4b08      	ldr	r3, [pc, #32]	; (8004728 <vPortFree+0x8c>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	18d2      	adds	r2, r2, r3
 800470a:	4b07      	ldr	r3, [pc, #28]	; (8004728 <vPortFree+0x8c>)
 800470c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	0018      	movs	r0, r3
 8004712:	f000 f86b 	bl	80047ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004716:	f7fe fecd 	bl	80034b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800471a:	46c0      	nop			; (mov r8, r8)
 800471c:	46bd      	mov	sp, r7
 800471e:	b004      	add	sp, #16
 8004720:	bd80      	pop	{r7, pc}
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	20001a40 	.word	0x20001a40
 8004728:	20001a38 	.word	0x20001a38

0800472c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004732:	23c0      	movs	r3, #192	; 0xc0
 8004734:	011b      	lsls	r3, r3, #4
 8004736:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004738:	4b26      	ldr	r3, [pc, #152]	; (80047d4 <prvHeapInit+0xa8>)
 800473a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2207      	movs	r2, #7
 8004740:	4013      	ands	r3, r2
 8004742:	d00c      	beq.n	800475e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	3307      	adds	r3, #7
 8004748:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2207      	movs	r2, #7
 800474e:	4393      	bics	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	1ad2      	subs	r2, r2, r3
 8004758:	4b1e      	ldr	r3, [pc, #120]	; (80047d4 <prvHeapInit+0xa8>)
 800475a:	18d3      	adds	r3, r2, r3
 800475c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004762:	4b1d      	ldr	r3, [pc, #116]	; (80047d8 <prvHeapInit+0xac>)
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004768:	4b1b      	ldr	r3, [pc, #108]	; (80047d8 <prvHeapInit+0xac>)
 800476a:	2200      	movs	r2, #0
 800476c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	18d3      	adds	r3, r2, r3
 8004774:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004776:	2208      	movs	r2, #8
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	1a9b      	subs	r3, r3, r2
 800477c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2207      	movs	r2, #7
 8004782:	4393      	bics	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	4b14      	ldr	r3, [pc, #80]	; (80047dc <prvHeapInit+0xb0>)
 800478a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800478c:	4b13      	ldr	r3, [pc, #76]	; (80047dc <prvHeapInit+0xb0>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2200      	movs	r2, #0
 8004792:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004794:	4b11      	ldr	r3, [pc, #68]	; (80047dc <prvHeapInit+0xb0>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2200      	movs	r2, #0
 800479a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	1ad2      	subs	r2, r2, r3
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80047aa:	4b0c      	ldr	r3, [pc, #48]	; (80047dc <prvHeapInit+0xb0>)
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	4b0a      	ldr	r3, [pc, #40]	; (80047e0 <prvHeapInit+0xb4>)
 80047b8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	4b09      	ldr	r3, [pc, #36]	; (80047e4 <prvHeapInit+0xb8>)
 80047c0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80047c2:	4b09      	ldr	r3, [pc, #36]	; (80047e8 <prvHeapInit+0xbc>)
 80047c4:	2280      	movs	r2, #128	; 0x80
 80047c6:	0612      	lsls	r2, r2, #24
 80047c8:	601a      	str	r2, [r3, #0]
}
 80047ca:	46c0      	nop			; (mov r8, r8)
 80047cc:	46bd      	mov	sp, r7
 80047ce:	b004      	add	sp, #16
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	46c0      	nop			; (mov r8, r8)
 80047d4:	20000e2c 	.word	0x20000e2c
 80047d8:	20001a2c 	.word	0x20001a2c
 80047dc:	20001a34 	.word	0x20001a34
 80047e0:	20001a3c 	.word	0x20001a3c
 80047e4:	20001a38 	.word	0x20001a38
 80047e8:	20001a40 	.word	0x20001a40

080047ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80047f4:	4b27      	ldr	r3, [pc, #156]	; (8004894 <prvInsertBlockIntoFreeList+0xa8>)
 80047f6:	60fb      	str	r3, [r7, #12]
 80047f8:	e002      	b.n	8004800 <prvInsertBlockIntoFreeList+0x14>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	429a      	cmp	r2, r3
 8004808:	d8f7      	bhi.n	80047fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	18d3      	adds	r3, r2, r3
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	429a      	cmp	r2, r3
 800481a:	d108      	bne.n	800482e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	18d2      	adds	r2, r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	18d2      	adds	r2, r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	429a      	cmp	r2, r3
 8004840:	d118      	bne.n	8004874 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	4b14      	ldr	r3, [pc, #80]	; (8004898 <prvInsertBlockIntoFreeList+0xac>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	429a      	cmp	r2, r3
 800484c:	d00d      	beq.n	800486a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	18d2      	adds	r2, r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	e008      	b.n	800487c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800486a:	4b0b      	ldr	r3, [pc, #44]	; (8004898 <prvInsertBlockIntoFreeList+0xac>)
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	601a      	str	r2, [r3, #0]
 8004872:	e003      	b.n	800487c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	429a      	cmp	r2, r3
 8004882:	d002      	beq.n	800488a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800488a:	46c0      	nop			; (mov r8, r8)
 800488c:	46bd      	mov	sp, r7
 800488e:	b004      	add	sp, #16
 8004890:	bd80      	pop	{r7, pc}
 8004892:	46c0      	nop			; (mov r8, r8)
 8004894:	20001a2c 	.word	0x20001a2c
 8004898:	20001a34 	.word	0x20001a34

0800489c <__libc_init_array>:
 800489c:	b570      	push	{r4, r5, r6, lr}
 800489e:	2600      	movs	r6, #0
 80048a0:	4d0c      	ldr	r5, [pc, #48]	; (80048d4 <__libc_init_array+0x38>)
 80048a2:	4c0d      	ldr	r4, [pc, #52]	; (80048d8 <__libc_init_array+0x3c>)
 80048a4:	1b64      	subs	r4, r4, r5
 80048a6:	10a4      	asrs	r4, r4, #2
 80048a8:	42a6      	cmp	r6, r4
 80048aa:	d109      	bne.n	80048c0 <__libc_init_array+0x24>
 80048ac:	2600      	movs	r6, #0
 80048ae:	f000 f82b 	bl	8004908 <_init>
 80048b2:	4d0a      	ldr	r5, [pc, #40]	; (80048dc <__libc_init_array+0x40>)
 80048b4:	4c0a      	ldr	r4, [pc, #40]	; (80048e0 <__libc_init_array+0x44>)
 80048b6:	1b64      	subs	r4, r4, r5
 80048b8:	10a4      	asrs	r4, r4, #2
 80048ba:	42a6      	cmp	r6, r4
 80048bc:	d105      	bne.n	80048ca <__libc_init_array+0x2e>
 80048be:	bd70      	pop	{r4, r5, r6, pc}
 80048c0:	00b3      	lsls	r3, r6, #2
 80048c2:	58eb      	ldr	r3, [r5, r3]
 80048c4:	4798      	blx	r3
 80048c6:	3601      	adds	r6, #1
 80048c8:	e7ee      	b.n	80048a8 <__libc_init_array+0xc>
 80048ca:	00b3      	lsls	r3, r6, #2
 80048cc:	58eb      	ldr	r3, [r5, r3]
 80048ce:	4798      	blx	r3
 80048d0:	3601      	adds	r6, #1
 80048d2:	e7f2      	b.n	80048ba <__libc_init_array+0x1e>
 80048d4:	080049f0 	.word	0x080049f0
 80048d8:	080049f0 	.word	0x080049f0
 80048dc:	080049f0 	.word	0x080049f0
 80048e0:	080049f4 	.word	0x080049f4

080048e4 <memcpy>:
 80048e4:	2300      	movs	r3, #0
 80048e6:	b510      	push	{r4, lr}
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d100      	bne.n	80048ee <memcpy+0xa>
 80048ec:	bd10      	pop	{r4, pc}
 80048ee:	5ccc      	ldrb	r4, [r1, r3]
 80048f0:	54c4      	strb	r4, [r0, r3]
 80048f2:	3301      	adds	r3, #1
 80048f4:	e7f8      	b.n	80048e8 <memcpy+0x4>

080048f6 <memset>:
 80048f6:	0003      	movs	r3, r0
 80048f8:	1882      	adds	r2, r0, r2
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d100      	bne.n	8004900 <memset+0xa>
 80048fe:	4770      	bx	lr
 8004900:	7019      	strb	r1, [r3, #0]
 8004902:	3301      	adds	r3, #1
 8004904:	e7f9      	b.n	80048fa <memset+0x4>
	...

08004908 <_init>:
 8004908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800490a:	46c0      	nop			; (mov r8, r8)
 800490c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800490e:	bc08      	pop	{r3}
 8004910:	469e      	mov	lr, r3
 8004912:	4770      	bx	lr

08004914 <_fini>:
 8004914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004916:	46c0      	nop			; (mov r8, r8)
 8004918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800491a:	bc08      	pop	{r3}
 800491c:	469e      	mov	lr, r3
 800491e:	4770      	bx	lr
