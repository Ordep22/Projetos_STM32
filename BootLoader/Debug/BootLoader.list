
BootLoader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045b4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  08004674  08004674  00014674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004be8  08004be8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08004be8  08004be8  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004be8  08004be8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004be8  08004be8  00014be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bec  08004bec  00014bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08004bf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  2000007c  08004c6c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  08004c6c  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c779  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024ae  00000000  00000000  0002c81d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  0002ecd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002f738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004076  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103ff  00000000  00000000  000340ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000950b4  00000000  00000000  000444ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d95a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b34  00000000  00000000  000d95f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000007c 	.word	0x2000007c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800465c 	.word	0x0800465c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000080 	.word	0x20000080
 8000104:	0800465c 	.word	0x0800465c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000238:	f3bf 8f4f 	dsb	sy
}
 800023c:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800023e:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__NVIC_SystemReset+0x1c>)
 8000240:	4a04      	ldr	r2, [pc, #16]	; (8000254 <__NVIC_SystemReset+0x20>)
 8000242:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000244:	f3bf 8f4f 	dsb	sy
}
 8000248:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	e7fd      	b.n	800024a <__NVIC_SystemReset+0x16>
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	e000ed00 	.word	0xe000ed00
 8000254:	05fa0004 	.word	0x05fa0004

08000258 <ReceberSerial>:



static STATS_FIRMWARE stats_firm;

void ReceberSerial(uint8_t byte) {
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	0002      	movs	r2, r0
 8000260:	1dfb      	adds	r3, r7, #7
 8000262:	701a      	strb	r2, [r3, #0]

	timeoutUART = TIMEOUT_COMUNICACAO_RX; //Reinicia o contador de timeout
 8000264:	4b05      	ldr	r3, [pc, #20]	; (800027c <ReceberSerial+0x24>)
 8000266:	4a06      	ldr	r2, [pc, #24]	; (8000280 <ReceberSerial+0x28>)
 8000268:	801a      	strh	r2, [r3, #0]
	ProcessarMaquinaEstados(byte);
 800026a:	1dfb      	adds	r3, r7, #7
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	0018      	movs	r0, r3
 8000270:	f000 f808 	bl	8000284 <ProcessarMaquinaEstados>
}
 8000274:	46c0      	nop			; (mov r8, r8)
 8000276:	46bd      	mov	sp, r7
 8000278:	b002      	add	sp, #8
 800027a:	bd80      	pop	{r7, pc}
 800027c:	20000340 	.word	0x20000340
 8000280:	00002710 	.word	0x00002710

08000284 <ProcessarMaquinaEstados>:



void ProcessarMaquinaEstados(uint8_t byte)
{
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	b087      	sub	sp, #28
 8000288:	af00      	add	r7, sp, #0
 800028a:	0002      	movs	r2, r0
 800028c:	1dfb      	adds	r3, r7, #7
 800028e:	701a      	strb	r2, [r3, #0]
	dadosRx = &RxUART;
 8000290:	4b4f      	ldr	r3, [pc, #316]	; (80003d0 <ProcessarMaquinaEstados+0x14c>)
 8000292:	4a50      	ldr	r2, [pc, #320]	; (80003d4 <ProcessarMaquinaEstados+0x150>)
 8000294:	601a      	str	r2, [r3, #0]

	switch (*estado)
 8000296:	4b50      	ldr	r3, [pc, #320]	; (80003d8 <ProcessarMaquinaEstados+0x154>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	2b03      	cmp	r3, #3
 800029e:	d100      	bne.n	80002a2 <ProcessarMaquinaEstados+0x1e>
 80002a0:	e06c      	b.n	800037c <ProcessarMaquinaEstados+0xf8>
 80002a2:	dd00      	ble.n	80002a6 <ProcessarMaquinaEstados+0x22>
 80002a4:	e088      	b.n	80003b8 <ProcessarMaquinaEstados+0x134>
 80002a6:	2b02      	cmp	r3, #2
 80002a8:	d04b      	beq.n	8000342 <ProcessarMaquinaEstados+0xbe>
 80002aa:	dd00      	ble.n	80002ae <ProcessarMaquinaEstados+0x2a>
 80002ac:	e084      	b.n	80003b8 <ProcessarMaquinaEstados+0x134>
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d002      	beq.n	80002b8 <ProcessarMaquinaEstados+0x34>
 80002b2:	2b01      	cmp	r3, #1
 80002b4:	d022      	beq.n	80002fc <ProcessarMaquinaEstados+0x78>
	}

		break;

	default:
		break;
 80002b6:	e07f      	b.n	80003b8 <ProcessarMaquinaEstados+0x134>
		if (byte == 'L')
 80002b8:	1dfb      	adds	r3, r7, #7
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	2b4c      	cmp	r3, #76	; 0x4c
 80002be:	d000      	beq.n	80002c2 <ProcessarMaquinaEstados+0x3e>
 80002c0:	e07c      	b.n	80003bc <ProcessarMaquinaEstados+0x138>
			memset(dadosRx->buffer, 0, sizeof(dadosRx->buffer)); // Zera o buffer de recepção
 80002c2:	4b43      	ldr	r3, [pc, #268]	; (80003d0 <ProcessarMaquinaEstados+0x14c>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	0018      	movs	r0, r3
 80002c8:	2382      	movs	r3, #130	; 0x82
 80002ca:	005b      	lsls	r3, r3, #1
 80002cc:	001a      	movs	r2, r3
 80002ce:	2100      	movs	r1, #0
 80002d0:	f003 f973 	bl	80035ba <memset>
			idxBuffer = 0;
 80002d4:	4b41      	ldr	r3, [pc, #260]	; (80003dc <ProcessarMaquinaEstados+0x158>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	801a      	strh	r2, [r3, #0]
			dadosRx->buffer[idxBuffer++] = byte; // Adiciona o byte na union
 80002da:	4b3d      	ldr	r3, [pc, #244]	; (80003d0 <ProcessarMaquinaEstados+0x14c>)
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	4b3f      	ldr	r3, [pc, #252]	; (80003dc <ProcessarMaquinaEstados+0x158>)
 80002e0:	881b      	ldrh	r3, [r3, #0]
 80002e2:	1c59      	adds	r1, r3, #1
 80002e4:	b288      	uxth	r0, r1
 80002e6:	493d      	ldr	r1, [pc, #244]	; (80003dc <ProcessarMaquinaEstados+0x158>)
 80002e8:	8008      	strh	r0, [r1, #0]
 80002ea:	0019      	movs	r1, r3
 80002ec:	1dfb      	adds	r3, r7, #7
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	5453      	strb	r3, [r2, r1]
			*estado = ESTADO_RECEBENDO_HEADER;
 80002f2:	4b39      	ldr	r3, [pc, #228]	; (80003d8 <ProcessarMaquinaEstados+0x154>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	2201      	movs	r2, #1
 80002f8:	701a      	strb	r2, [r3, #0]
		break;
 80002fa:	e05f      	b.n	80003bc <ProcessarMaquinaEstados+0x138>
		dadosRx->buffer[idxBuffer++] = byte;
 80002fc:	4b34      	ldr	r3, [pc, #208]	; (80003d0 <ProcessarMaquinaEstados+0x14c>)
 80002fe:	681a      	ldr	r2, [r3, #0]
 8000300:	4b36      	ldr	r3, [pc, #216]	; (80003dc <ProcessarMaquinaEstados+0x158>)
 8000302:	881b      	ldrh	r3, [r3, #0]
 8000304:	1c59      	adds	r1, r3, #1
 8000306:	b288      	uxth	r0, r1
 8000308:	4934      	ldr	r1, [pc, #208]	; (80003dc <ProcessarMaquinaEstados+0x158>)
 800030a:	8008      	strh	r0, [r1, #0]
 800030c:	0019      	movs	r1, r3
 800030e:	1dfb      	adds	r3, r7, #7
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	5453      	strb	r3, [r2, r1]
		numBytes = idxBuffer;                    //número de dados já recebidos
 8000314:	4b31      	ldr	r3, [pc, #196]	; (80003dc <ProcessarMaquinaEstados+0x158>)
 8000316:	881a      	ldrh	r2, [r3, #0]
 8000318:	4b31      	ldr	r3, [pc, #196]	; (80003e0 <ProcessarMaquinaEstados+0x15c>)
 800031a:	801a      	strh	r2, [r3, #0]
		if (numBytes == 6)
 800031c:	4b30      	ldr	r3, [pc, #192]	; (80003e0 <ProcessarMaquinaEstados+0x15c>)
 800031e:	881b      	ldrh	r3, [r3, #0]
 8000320:	2b06      	cmp	r3, #6
 8000322:	d14d      	bne.n	80003c0 <ProcessarMaquinaEstados+0x13c>
			if (strncmp((char*) dadosRx->pacote.start, "LUPA", 4) == 0)
 8000324:	4b2a      	ldr	r3, [pc, #168]	; (80003d0 <ProcessarMaquinaEstados+0x14c>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	0018      	movs	r0, r3
 800032a:	4b2e      	ldr	r3, [pc, #184]	; (80003e4 <ProcessarMaquinaEstados+0x160>)
 800032c:	2204      	movs	r2, #4
 800032e:	0019      	movs	r1, r3
 8000330:	f003 f97a 	bl	8003628 <strncmp>
 8000334:	1e03      	subs	r3, r0, #0
 8000336:	d143      	bne.n	80003c0 <ProcessarMaquinaEstados+0x13c>
				*estado = ESTADO_RECEBENDO_DADOS;
 8000338:	4b27      	ldr	r3, [pc, #156]	; (80003d8 <ProcessarMaquinaEstados+0x154>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	2202      	movs	r2, #2
 800033e:	701a      	strb	r2, [r3, #0]
		break;
 8000340:	e03e      	b.n	80003c0 <ProcessarMaquinaEstados+0x13c>
		dadosRx->buffer[(idxBuffer)++] = byte;
 8000342:	4b23      	ldr	r3, [pc, #140]	; (80003d0 <ProcessarMaquinaEstados+0x14c>)
 8000344:	681a      	ldr	r2, [r3, #0]
 8000346:	4b25      	ldr	r3, [pc, #148]	; (80003dc <ProcessarMaquinaEstados+0x158>)
 8000348:	881b      	ldrh	r3, [r3, #0]
 800034a:	1c59      	adds	r1, r3, #1
 800034c:	b288      	uxth	r0, r1
 800034e:	4923      	ldr	r1, [pc, #140]	; (80003dc <ProcessarMaquinaEstados+0x158>)
 8000350:	8008      	strh	r0, [r1, #0]
 8000352:	0019      	movs	r1, r3
 8000354:	1dfb      	adds	r3, r7, #7
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	5453      	strb	r3, [r2, r1]
		numBytes = idxBuffer;                    //número de dados já recebidos
 800035a:	4b20      	ldr	r3, [pc, #128]	; (80003dc <ProcessarMaquinaEstados+0x158>)
 800035c:	881a      	ldrh	r2, [r3, #0]
 800035e:	4b20      	ldr	r3, [pc, #128]	; (80003e0 <ProcessarMaquinaEstados+0x15c>)
 8000360:	801a      	strh	r2, [r3, #0]
		if (numBytes >= dadosRx->pacote.tamanho + TAMANHO_CHECKSUM)
 8000362:	4b1b      	ldr	r3, [pc, #108]	; (80003d0 <ProcessarMaquinaEstados+0x14c>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	889b      	ldrh	r3, [r3, #4]
 8000368:	3301      	adds	r3, #1
 800036a:	4a1d      	ldr	r2, [pc, #116]	; (80003e0 <ProcessarMaquinaEstados+0x15c>)
 800036c:	8812      	ldrh	r2, [r2, #0]
 800036e:	4293      	cmp	r3, r2
 8000370:	da28      	bge.n	80003c4 <ProcessarMaquinaEstados+0x140>
			*estado = ESTADO_PROCESSANDO_PACOTE;
 8000372:	4b19      	ldr	r3, [pc, #100]	; (80003d8 <ProcessarMaquinaEstados+0x154>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	2203      	movs	r2, #3
 8000378:	701a      	strb	r2, [r3, #0]
		break;
 800037a:	e023      	b.n	80003c4 <ProcessarMaquinaEstados+0x140>
		uint8_t sendbuffer[9] =
 800037c:	250c      	movs	r5, #12
 800037e:	197b      	adds	r3, r7, r5
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
 8000384:	3304      	adds	r3, #4
 8000386:	2205      	movs	r2, #5
 8000388:	2100      	movs	r1, #0
 800038a:	0018      	movs	r0, r3
 800038c:	f003 f915 	bl	80035ba <memset>
		uint16_t n = MontarPacote(sendbuffer, CMD_BUSY, 0);
 8000390:	2616      	movs	r6, #22
 8000392:	19bc      	adds	r4, r7, r6
 8000394:	197b      	adds	r3, r7, r5
 8000396:	2200      	movs	r2, #0
 8000398:	2103      	movs	r1, #3
 800039a:	0018      	movs	r0, r3
 800039c:	f000 f9b0 	bl	8000700 <MontarPacote>
 80003a0:	0003      	movs	r3, r0
 80003a2:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit(huart, sendbuffer, n, TIMEOUT_COMUNICACAO_TX);
 80003a4:	4b10      	ldr	r3, [pc, #64]	; (80003e8 <ProcessarMaquinaEstados+0x164>)
 80003a6:	6818      	ldr	r0, [r3, #0]
 80003a8:	4c10      	ldr	r4, [pc, #64]	; (80003ec <ProcessarMaquinaEstados+0x168>)
 80003aa:	19bb      	adds	r3, r7, r6
 80003ac:	881a      	ldrh	r2, [r3, #0]
 80003ae:	1979      	adds	r1, r7, r5
 80003b0:	0023      	movs	r3, r4
 80003b2:	f002 fae9 	bl	8002988 <HAL_UART_Transmit>
		break;
 80003b6:	e006      	b.n	80003c6 <ProcessarMaquinaEstados+0x142>
		break;
 80003b8:	46c0      	nop			; (mov r8, r8)
 80003ba:	e004      	b.n	80003c6 <ProcessarMaquinaEstados+0x142>
		break;
 80003bc:	46c0      	nop			; (mov r8, r8)
 80003be:	e002      	b.n	80003c6 <ProcessarMaquinaEstados+0x142>
		break;
 80003c0:	46c0      	nop			; (mov r8, r8)
 80003c2:	e000      	b.n	80003c6 <ProcessarMaquinaEstados+0x142>
		break;
 80003c4:	46c0      	nop			; (mov r8, r8)
	}

}
 80003c6:	46c0      	nop			; (mov r8, r8)
 80003c8:	46bd      	mov	sp, r7
 80003ca:	b007      	add	sp, #28
 80003cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	200002d0 	.word	0x200002d0
 80003d4:	200000b8 	.word	0x200000b8
 80003d8:	20000004 	.word	0x20000004
 80003dc:	200002cc 	.word	0x200002cc
 80003e0:	200002ce 	.word	0x200002ce
 80003e4:	08004674 	.word	0x08004674
 80003e8:	20000000 	.word	0x20000000
 80003ec:	00002710 	.word	0x00002710

080003f0 <ProcessarUART>:
/*
 * [L,U,P,A,XX,XX,CMD,{dados},YY,YY]
 */


void ProcessarUART() {
 80003f0:	b5b0      	push	{r4, r5, r7, lr}
 80003f2:	b088      	sub	sp, #32
 80003f4:	af00      	add	r7, sp, #0


	uint8_t *estado = &estadoSerial;
 80003f6:	4bb5      	ldr	r3, [pc, #724]	; (80006cc <ProcessarUART+0x2dc>)
 80003f8:	61bb      	str	r3, [r7, #24]
	CONTROLE_TRANSFERENCIA_DADOS *controleDados = &coleta;
 80003fa:	4bb5      	ldr	r3, [pc, #724]	; (80006d0 <ProcessarUART+0x2e0>)
 80003fc:	617b      	str	r3, [r7, #20]
	PROTOCOLO *dadosTx = &TxUART;
 80003fe:	4bb5      	ldr	r3, [pc, #724]	; (80006d4 <ProcessarUART+0x2e4>)
 8000400:	613b      	str	r3, [r7, #16]
	PROTOCOLO *dadosRx = &RxUART;
 8000402:	4bb5      	ldr	r3, [pc, #724]	; (80006d8 <ProcessarUART+0x2e8>)
 8000404:	60fb      	str	r3, [r7, #12]


	//------- Verificando timeout

	if (timeoutUART == 0) { //&& *estado != ESTADO_AGUARDANDO_PACOTE) {
 8000406:	4bb5      	ldr	r3, [pc, #724]	; (80006dc <ProcessarUART+0x2ec>)
 8000408:	881b      	ldrh	r3, [r3, #0]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d108      	bne.n	8000420 <ProcessarUART+0x30>

		// Timeout no processamento do pacote, retorna ao estado inicial

		*estado = ESTADO_AGUARDANDO_PACOTE;
 800040e:	69bb      	ldr	r3, [r7, #24]
 8000410:	2200      	movs	r2, #0
 8000412:	701a      	strb	r2, [r3, #0]

		HAL_UART_Abort(huart);
 8000414:	4bb2      	ldr	r3, [pc, #712]	; (80006e0 <ProcessarUART+0x2f0>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	0018      	movs	r0, r3
 800041a:	f002 fc4f 	bl	8002cbc <HAL_UART_Abort>

		//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

		return;
 800041e:	e151      	b.n	80006c4 <ProcessarUART+0x2d4>
	}

	if (*estado == ESTADO_PROCESSANDO_PACOTE)
 8000420:	69bb      	ldr	r3, [r7, #24]
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	2b03      	cmp	r3, #3
 8000426:	d000      	beq.n	800042a <ProcessarUART+0x3a>
 8000428:	e14c      	b.n	80006c4 <ProcessarUART+0x2d4>
	{

		if (controleDados->estado != ESTADO_ENVIANDO_PACOTE_DADOS)
 800042a:	697b      	ldr	r3, [r7, #20]
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	2b04      	cmp	r3, #4
 8000430:	d006      	beq.n	8000440 <ProcessarUART+0x50>
		{
			// Limpa buffer de envio
			memset(dadosTx->buffer, 0, sizeof(dadosTx->buffer));
 8000432:	693b      	ldr	r3, [r7, #16]
 8000434:	2282      	movs	r2, #130	; 0x82
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	2100      	movs	r1, #0
 800043a:	0018      	movs	r0, r3
 800043c:	f003 f8bd 	bl	80035ba <memset>
			// Nota: Buffer so sera limpo se (controleDados->estado != ESTADO_ENVIANDO_PACOTE_DADOS)
			//		 Pois, se (controleDados->estado == ESTADO_ENVIANDO_PACOTE_DADOS),
			//		 em caso de haver retorno de erro deve reenviar o mesmo pacote
		}

		uint16_t n = 0;
 8000440:	230a      	movs	r3, #10
 8000442:	18fb      	adds	r3, r7, r3
 8000444:	2200      	movs	r2, #0
 8000446:	801a      	strh	r2, [r3, #0]
		//-------------------------------------------------------------------
		// Validacao do conteudo do pacote
		int statusPacote = ValidarPacote(dadosRx->buffer);
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	0018      	movs	r0, r3
 800044c:	f000 f9b4 	bl	80007b8 <ValidarPacote>
 8000450:	0003      	movs	r3, r0
 8000452:	607b      	str	r3, [r7, #4]

		//SCB_CleanDCache();


		if (statusPacote != E_PACOTE_OK)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	2b00      	cmp	r3, #0
 8000458:	d028      	beq.n	80004ac <ProcessarUART+0xbc>
		{
			//Dados invalidos no pacote
			uint8_t comandoRetorno;
			if (statusPacote == E_CHECKSUM)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	3302      	adds	r3, #2
 800045e:	d104      	bne.n	800046a <ProcessarUART+0x7a>
			{
				comandoRetorno = CMD_ERRO_CHK;
 8000460:	231f      	movs	r3, #31
 8000462:	18fb      	adds	r3, r7, r3
 8000464:	2201      	movs	r2, #1
 8000466:	701a      	strb	r2, [r3, #0]
 8000468:	e006      	b.n	8000478 <ProcessarUART+0x88>
			}
			else if (statusPacote == E_COMANDO_INVALIDO)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	3301      	adds	r3, #1
 800046e:	d103      	bne.n	8000478 <ProcessarUART+0x88>
			{
				comandoRetorno = CMD_INVALIDO;
 8000470:	231f      	movs	r3, #31
 8000472:	18fb      	adds	r3, r7, r3
 8000474:	2202      	movs	r2, #2
 8000476:	701a      	strb	r2, [r3, #0]
			}
			n = MontarPacote(dadosTx->buffer, comandoRetorno, 0);
 8000478:	6938      	ldr	r0, [r7, #16]
 800047a:	250a      	movs	r5, #10
 800047c:	197c      	adds	r4, r7, r5
 800047e:	231f      	movs	r3, #31
 8000480:	18fb      	adds	r3, r7, r3
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	2200      	movs	r2, #0
 8000486:	0019      	movs	r1, r3
 8000488:	f000 f93a 	bl	8000700 <MontarPacote>
 800048c:	0003      	movs	r3, r0
 800048e:	8023      	strh	r3, [r4, #0]

			HAL_UART_Transmit(huart, dadosTx->buffer, n, 1000);
 8000490:	4b93      	ldr	r3, [pc, #588]	; (80006e0 <ProcessarUART+0x2f0>)
 8000492:	6818      	ldr	r0, [r3, #0]
 8000494:	6939      	ldr	r1, [r7, #16]
 8000496:	23fa      	movs	r3, #250	; 0xfa
 8000498:	009c      	lsls	r4, r3, #2
 800049a:	197b      	adds	r3, r7, r5
 800049c:	881a      	ldrh	r2, [r3, #0]
 800049e:	0023      	movs	r3, r4
 80004a0:	f002 fa72 	bl	8002988 <HAL_UART_Transmit>

			*estado = ESTADO_AGUARDANDO_PACOTE;
 80004a4:	69bb      	ldr	r3, [r7, #24]
 80004a6:	2200      	movs	r2, #0
 80004a8:	701a      	strb	r2, [r3, #0]

			//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

			return;
 80004aa:	e10b      	b.n	80006c4 <ProcessarUART+0x2d4>
		}

		uint8_t comando = dadosRx->pacote.comando;
 80004ac:	1cfb      	adds	r3, r7, #3
 80004ae:	68fa      	ldr	r2, [r7, #12]
 80004b0:	7992      	ldrb	r2, [r2, #6]
 80004b2:	701a      	strb	r2, [r3, #0]

		switch (comando)
 80004b4:	1cfb      	adds	r3, r7, #3
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	2b0a      	cmp	r3, #10
 80004ba:	d900      	bls.n	80004be <ProcessarUART+0xce>
 80004bc:	e0fe      	b.n	80006bc <ProcessarUART+0x2cc>
 80004be:	009a      	lsls	r2, r3, #2
 80004c0:	4b88      	ldr	r3, [pc, #544]	; (80006e4 <ProcessarUART+0x2f4>)
 80004c2:	18d3      	adds	r3, r2, r3
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	469f      	mov	pc, r3
		{

		case CMD_STATUS:

			status.parametros.statusEquipamento = 0xFF; //Valor de status que indica Bootloader
 80004c8:	4b87      	ldr	r3, [pc, #540]	; (80006e8 <ProcessarUART+0x2f8>)
 80004ca:	22ff      	movs	r2, #255	; 0xff
 80004cc:	701a      	strb	r2, [r3, #0]
			status.parametros.statusEquipamento = 0xFF; //Valor de status que indica Bootloader
 80004ce:	4b86      	ldr	r3, [pc, #536]	; (80006e8 <ProcessarUART+0x2f8>)
 80004d0:	22ff      	movs	r2, #255	; 0xff
 80004d2:	701a      	strb	r2, [r3, #0]
			status.parametros.versaoFirmware.Major = _V_MAIOR;
 80004d4:	4b84      	ldr	r3, [pc, #528]	; (80006e8 <ProcessarUART+0x2f8>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	705a      	strb	r2, [r3, #1]
			status.parametros.versaoFirmware.Minor = _V_MENOR;
 80004da:	4b83      	ldr	r3, [pc, #524]	; (80006e8 <ProcessarUART+0x2f8>)
 80004dc:	2200      	movs	r2, #0
 80004de:	709a      	strb	r2, [r3, #2]
			status.parametros.versaoFirmware.Build = _V_BUILD;
 80004e0:	4b81      	ldr	r3, [pc, #516]	; (80006e8 <ProcessarUART+0x2f8>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	70da      	strb	r2, [r3, #3]


			//Bootloader_LerAssinatura((char*) status.parametros.assinatura, 0);

			memcpy(dadosTx->pacote.dados, status.dados, sizeof(status.dados));
 80004e6:	693b      	ldr	r3, [r7, #16]
 80004e8:	1dda      	adds	r2, r3, #7
 80004ea:	4b7f      	ldr	r3, [pc, #508]	; (80006e8 <ProcessarUART+0x2f8>)
 80004ec:	0010      	movs	r0, r2
 80004ee:	0019      	movs	r1, r3
 80004f0:	230c      	movs	r3, #12
 80004f2:	001a      	movs	r2, r3
 80004f4:	f003 f858 	bl	80035a8 <memcpy>

			//dadosTx->pacote.dados[0] = 0xB;
			n = MontarPacote(dadosTx->buffer, comando, sizeof(status.dados));
 80004f8:	6938      	ldr	r0, [r7, #16]
 80004fa:	250a      	movs	r5, #10
 80004fc:	197c      	adds	r4, r7, r5
 80004fe:	1cfb      	adds	r3, r7, #3
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	220c      	movs	r2, #12
 8000504:	0019      	movs	r1, r3
 8000506:	f000 f8fb 	bl	8000700 <MontarPacote>
 800050a:	0003      	movs	r3, r0
 800050c:	8023      	strh	r3, [r4, #0]

			HAL_UART_Transmit(huart, n, sizeof n, 1000);
 800050e:	4b74      	ldr	r3, [pc, #464]	; (80006e0 <ProcessarUART+0x2f0>)
 8000510:	6818      	ldr	r0, [r3, #0]
 8000512:	197b      	adds	r3, r7, r5
 8000514:	881b      	ldrh	r3, [r3, #0]
 8000516:	0019      	movs	r1, r3
 8000518:	23fa      	movs	r3, #250	; 0xfa
 800051a:	009b      	lsls	r3, r3, #2
 800051c:	2202      	movs	r2, #2
 800051e:	f002 fa33 	bl	8002988 <HAL_UART_Transmit>


			break;
 8000522:	e0cc      	b.n	80006be <ProcessarUART+0x2ce>

		case CMD_PING:

			n = MontarPacote(dadosTx->buffer, comando, 0);
 8000524:	6938      	ldr	r0, [r7, #16]
 8000526:	230a      	movs	r3, #10
 8000528:	18fc      	adds	r4, r7, r3
 800052a:	1cfb      	adds	r3, r7, #3
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2200      	movs	r2, #0
 8000530:	0019      	movs	r1, r3
 8000532:	f000 f8e5 	bl	8000700 <MontarPacote>
 8000536:	0003      	movs	r3, r0
 8000538:	8023      	strh	r3, [r4, #0]
			HAL_UART_Transmit(huart, CMD_ACK, sizeof CMD_ACK, 1000);
 800053a:	4b69      	ldr	r3, [pc, #420]	; (80006e0 <ProcessarUART+0x2f0>)
 800053c:	6818      	ldr	r0, [r3, #0]
 800053e:	23fa      	movs	r3, #250	; 0xfa
 8000540:	009b      	lsls	r3, r3, #2
 8000542:	2204      	movs	r2, #4
 8000544:	210c      	movs	r1, #12
 8000546:	f002 fa1f 	bl	8002988 <HAL_UART_Transmit>

			break;
 800054a:	e0b8      	b.n	80006be <ProcessarUART+0x2ce>


		case CMD_ABRIR_BOOTLOADER: // ABRE O ARQUIVO PARA FAZER GRAVAR HEX DO FIRMWARE (MAIN) e (BOOTLOADER)

		     memset(blocoHexProcessado,0,sizeof(blocoHexProcessado)); // Limpa array para tratar recebimento do firmware
 800054c:	4b67      	ldr	r3, [pc, #412]	; (80006ec <ProcessarUART+0x2fc>)
 800054e:	2264      	movs	r2, #100	; 0x64
 8000550:	2100      	movs	r1, #0
 8000552:	0018      	movs	r0, r3
 8000554:	f003 f831 	bl	80035ba <memset>

            //Apaga dos dados da flash externa

				    dadosTx->pacote.dados[0] = CMD_ACK;
 8000558:	693b      	ldr	r3, [r7, #16]
 800055a:	220c      	movs	r2, #12
 800055c:	71da      	strb	r2, [r3, #7]

					n = MontarPacote(dadosTx->buffer, comando, 1);
 800055e:	6938      	ldr	r0, [r7, #16]
 8000560:	230a      	movs	r3, #10
 8000562:	18fc      	adds	r4, r7, r3
 8000564:	1cfb      	adds	r3, r7, #3
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2201      	movs	r2, #1
 800056a:	0019      	movs	r1, r3
 800056c:	f000 f8c8 	bl	8000700 <MontarPacote>
 8000570:	0003      	movs	r3, r0
 8000572:	8023      	strh	r3, [r4, #0]

			break;
 8000574:	e0a3      	b.n	80006be <ProcessarUART+0x2ce>


		  case CMD_SYSTEM_RESET: // Reseta MCU (Software Reset)

			// Responte ACK
			dadosTx->pacote.dados[0] = CMD_ACK;
 8000576:	693b      	ldr	r3, [r7, #16]
 8000578:	220c      	movs	r2, #12
 800057a:	71da      	strb	r2, [r3, #7]

			n = MontarPacote(dadosTx->buffer, comando, 1);
 800057c:	6938      	ldr	r0, [r7, #16]
 800057e:	250a      	movs	r5, #10
 8000580:	197c      	adds	r4, r7, r5
 8000582:	1cfb      	adds	r3, r7, #3
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2201      	movs	r2, #1
 8000588:	0019      	movs	r1, r3
 800058a:	f000 f8b9 	bl	8000700 <MontarPacote>
 800058e:	0003      	movs	r3, r0
 8000590:	8023      	strh	r3, [r4, #0]
			HAL_UART_Transmit(huart, dadosTx->buffer, n, TIMEOUT_COMUNICACAO_TX);
 8000592:	4b53      	ldr	r3, [pc, #332]	; (80006e0 <ProcessarUART+0x2f0>)
 8000594:	6818      	ldr	r0, [r3, #0]
 8000596:	6939      	ldr	r1, [r7, #16]
 8000598:	4c55      	ldr	r4, [pc, #340]	; (80006f0 <ProcessarUART+0x300>)
 800059a:	197b      	adds	r3, r7, r5
 800059c:	881a      	ldrh	r2, [r3, #0]
 800059e:	0023      	movs	r3, r4
 80005a0:	f002 f9f2 	bl	8002988 <HAL_UART_Transmit>

			NVIC_SystemReset();
 80005a4:	f7ff fe46 	bl	8000234 <__NVIC_SystemReset>
			// Nota:  Software pode enviar bloco Hex repetido, caso ocorra problema na
			//        comunicação e ele não receba o pacote de resposta do firmware
			//---------------------------------------------------------------------------------

		      {
		        uint16_t tamanhoComparar = sizeof(blocoHexProcessado);  // Tamanho para comparação é o tamanho do array
 80005a8:	211c      	movs	r1, #28
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2264      	movs	r2, #100	; 0x64
 80005ae:	801a      	strh	r2, [r3, #0]
		        if (tamanhoComparar > dadosRx->pacote.tamanho - TAMANHO_HEADER ) // Verifica se a quantidade de dados recebido é menor que array de comparação
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	889b      	ldrh	r3, [r3, #4]
 80005b4:	1f9a      	subs	r2, r3, #6
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	881b      	ldrh	r3, [r3, #0]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	dc04      	bgt.n	80005c8 <ProcessarUART+0x1d8>
		        {
		          tamanhoComparar = dadosRx->pacote.tamanho - TAMANHO_HEADER; // Atualiza variável com a quantidade adequada para a comparação
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	889a      	ldrh	r2, [r3, #4]
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	3a07      	subs	r2, #7
 80005c6:	801a      	strh	r2, [r3, #0]
		        }

		        //Comparar o último bloco processado com o bloco recebido no pacote de dados
		        if (memcmp(blocoHexProcessado,dadosRx->pacote.dados,tamanhoComparar) != 0)
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	1dd9      	adds	r1, r3, #7
 80005cc:	241c      	movs	r4, #28
 80005ce:	193b      	adds	r3, r7, r4
 80005d0:	881a      	ldrh	r2, [r3, #0]
 80005d2:	4b46      	ldr	r3, [pc, #280]	; (80006ec <ProcessarUART+0x2fc>)
 80005d4:	0018      	movs	r0, r3
 80005d6:	f002 ffd9 	bl	800358c <memcmp>
 80005da:	1e03      	subs	r3, r0, #0
 80005dc:	d016      	beq.n	800060c <ProcessarUART+0x21c>
		        {
		          // Blocos comparados são diferentes
		          // Hex recebido ainda não foi processado
		         // stats_firm = decodificarHEX(dadosRx, &fileHEX); // ----> Envia o pacote todo para a função de decodificação de HEX (1KB) por vez

		        	stats_firm = decodificarHEX(dadosRx);
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	0018      	movs	r0, r3
 80005e2:	f000 f979 	bl	80008d8 <decodificarHEX>
 80005e6:	0003      	movs	r3, r0
 80005e8:	001a      	movs	r2, r3
 80005ea:	4b42      	ldr	r3, [pc, #264]	; (80006f4 <ProcessarUART+0x304>)
 80005ec:	601a      	str	r2, [r3, #0]

		          // Limpa array e preenche com o último bloco hex processado
		          memset(blocoHexProcessado,0,sizeof(blocoHexProcessado));
 80005ee:	4b3f      	ldr	r3, [pc, #252]	; (80006ec <ProcessarUART+0x2fc>)
 80005f0:	2264      	movs	r2, #100	; 0x64
 80005f2:	2100      	movs	r1, #0
 80005f4:	0018      	movs	r0, r3
 80005f6:	f002 ffe0 	bl	80035ba <memset>
		          memcpy(blocoHexProcessado,dadosRx->pacote.dados,tamanhoComparar);
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	1dd9      	adds	r1, r3, #7
 80005fe:	193b      	adds	r3, r7, r4
 8000600:	881a      	ldrh	r2, [r3, #0]
 8000602:	4b3a      	ldr	r3, [pc, #232]	; (80006ec <ProcessarUART+0x2fc>)
 8000604:	0018      	movs	r0, r3
 8000606:	f002 ffcf 	bl	80035a8 <memcpy>
 800060a:	e003      	b.n	8000614 <ProcessarUART+0x224>
		        }
		        else
		        {
		          // Blocos comparados são iguais
		          // Responde pacote com as informações já existentes em stats_firm
		          tamanhoComparar = 0;  // debug
 800060c:	231c      	movs	r3, #28
 800060e:	18fb      	adds	r3, r7, r3
 8000610:	2200      	movs	r2, #0
 8000612:	801a      	strh	r2, [r3, #0]
		      }


			  //***stats_firm = decodificarHEX(dadosRx, &fileHEX); // ----> Envia o pacote todo para a função de decodificação de HEX (1KB) por vez

				if (stats_firm.stats_firm.status == FIRM_OK)
 8000614:	4b37      	ldr	r3, [pc, #220]	; (80006f4 <ProcessarUART+0x304>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d11b      	bne.n	8000654 <ProcessarUART+0x264>
				{
				  // Decodificação do pacote OK
				  dadosTx->pacote.dados[0] = CMD_ACK;
 800061c:	693b      	ldr	r3, [r7, #16]
 800061e:	220c      	movs	r2, #12
 8000620:	71da      	strb	r2, [r3, #7]

					memcpy(&stats_firm.buffer[1], &stats_firm.stats_firm.linhas_gravadas, 2);
 8000622:	4935      	ldr	r1, [pc, #212]	; (80006f8 <ProcessarUART+0x308>)
 8000624:	4b35      	ldr	r3, [pc, #212]	; (80006fc <ProcessarUART+0x30c>)
 8000626:	2202      	movs	r2, #2
 8000628:	0018      	movs	r0, r3
 800062a:	f002 ffbd 	bl	80035a8 <memcpy>

					memcpy(&dadosTx->pacote.dados[1], &stats_firm.buffer[0], sizeof(stats_firm.buffer));
 800062e:	693b      	ldr	r3, [r7, #16]
 8000630:	3308      	adds	r3, #8
 8000632:	4930      	ldr	r1, [pc, #192]	; (80006f4 <ProcessarUART+0x304>)
 8000634:	2203      	movs	r2, #3
 8000636:	0018      	movs	r0, r3
 8000638:	f002 ffb6 	bl	80035a8 <memcpy>
					n = MontarPacote(dadosTx->buffer, comando, sizeof(stats_firm.buffer) + 1);
 800063c:	6938      	ldr	r0, [r7, #16]
 800063e:	230a      	movs	r3, #10
 8000640:	18fc      	adds	r4, r7, r3
 8000642:	1cfb      	adds	r3, r7, #3
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2204      	movs	r2, #4
 8000648:	0019      	movs	r1, r3
 800064a:	f000 f859 	bl	8000700 <MontarPacote>
 800064e:	0003      	movs	r3, r0
 8000650:	8023      	strh	r3, [r4, #0]
					memcpy(&dadosTx->buffer[1], &stats_firm.buffer, sizeof(stats_firm.buffer));

					n = MontarPacote(dadosTx->buffer, comando, sizeof(stats_firm.buffer) + 1);
				}

		    break;
 8000652:	e034      	b.n	80006be <ProcessarUART+0x2ce>
				else if (stats_firm.stats_firm.status == FIRM_FIM)
 8000654:	4b27      	ldr	r3, [pc, #156]	; (80006f4 <ProcessarUART+0x304>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b01      	cmp	r3, #1
 800065a:	d117      	bne.n	800068c <ProcessarUART+0x29c>
					dadosTx->pacote.dados[0] = CMD_ACK;
 800065c:	693b      	ldr	r3, [r7, #16]
 800065e:	220c      	movs	r2, #12
 8000660:	71da      	strb	r2, [r3, #7]
					memcpy(&dadosTx->buffer[1], &stats_firm.buffer, sizeof(stats_firm.buffer));
 8000662:	693b      	ldr	r3, [r7, #16]
 8000664:	1c5a      	adds	r2, r3, #1
 8000666:	4b23      	ldr	r3, [pc, #140]	; (80006f4 <ProcessarUART+0x304>)
 8000668:	0010      	movs	r0, r2
 800066a:	0019      	movs	r1, r3
 800066c:	2303      	movs	r3, #3
 800066e:	001a      	movs	r2, r3
 8000670:	f002 ff9a 	bl	80035a8 <memcpy>
					n = MontarPacote(dadosTx->buffer, comando, sizeof(stats_firm.buffer) + 1);
 8000674:	6938      	ldr	r0, [r7, #16]
 8000676:	230a      	movs	r3, #10
 8000678:	18fc      	adds	r4, r7, r3
 800067a:	1cfb      	adds	r3, r7, #3
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2204      	movs	r2, #4
 8000680:	0019      	movs	r1, r3
 8000682:	f000 f83d 	bl	8000700 <MontarPacote>
 8000686:	0003      	movs	r3, r0
 8000688:	8023      	strh	r3, [r4, #0]
		    break;
 800068a:	e018      	b.n	80006be <ProcessarUART+0x2ce>
				  dadosTx->pacote.dados[0] = CMD_NACK;
 800068c:	693b      	ldr	r3, [r7, #16]
 800068e:	220d      	movs	r2, #13
 8000690:	71da      	strb	r2, [r3, #7]
					memcpy(&dadosTx->buffer[1], &stats_firm.buffer, sizeof(stats_firm.buffer));
 8000692:	693b      	ldr	r3, [r7, #16]
 8000694:	1c5a      	adds	r2, r3, #1
 8000696:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <ProcessarUART+0x304>)
 8000698:	0010      	movs	r0, r2
 800069a:	0019      	movs	r1, r3
 800069c:	2303      	movs	r3, #3
 800069e:	001a      	movs	r2, r3
 80006a0:	f002 ff82 	bl	80035a8 <memcpy>
					n = MontarPacote(dadosTx->buffer, comando, sizeof(stats_firm.buffer) + 1);
 80006a4:	6938      	ldr	r0, [r7, #16]
 80006a6:	230a      	movs	r3, #10
 80006a8:	18fc      	adds	r4, r7, r3
 80006aa:	1cfb      	adds	r3, r7, #3
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	2204      	movs	r2, #4
 80006b0:	0019      	movs	r1, r3
 80006b2:	f000 f825 	bl	8000700 <MontarPacote>
 80006b6:	0003      	movs	r3, r0
 80006b8:	8023      	strh	r3, [r4, #0]
		    break;
 80006ba:	e000      	b.n	80006be <ProcessarUART+0x2ce>

				break;

		default:

			break;
 80006bc:	46c0      	nop			; (mov r8, r8)
					Error_Handler();
					/* IMPLEMENTAR TRATAMENTO DE ERRO ADEQUADO */
				}
			}
		// Processamento finalizado, volta ao estado inicial
				*estado = ESTADO_AGUARDANDO_PACOTE;
 80006be:	69bb      	ldr	r3, [r7, #24]
 80006c0:	2200      	movs	r2, #0
 80006c2:	701a      	strb	r2, [r3, #0]

	}

}
 80006c4:	46bd      	mov	sp, r7
 80006c6:	b008      	add	sp, #32
 80006c8:	bdb0      	pop	{r4, r5, r7, pc}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	20000098 	.word	0x20000098
 80006d0:	2000009c 	.word	0x2000009c
 80006d4:	200001bc 	.word	0x200001bc
 80006d8:	200000b8 	.word	0x200000b8
 80006dc:	20000340 	.word	0x20000340
 80006e0:	20000000 	.word	0x20000000
 80006e4:	080047dc 	.word	0x080047dc
 80006e8:	200002c0 	.word	0x200002c0
 80006ec:	200002d4 	.word	0x200002d4
 80006f0:	00002710 	.word	0x00002710
 80006f4:	20000338 	.word	0x20000338
 80006f8:	2000033a 	.word	0x2000033a
 80006fc:	20000339 	.word	0x20000339

08000700 <MontarPacote>:
 * @param funcao: C�digo do comando do protocolo
 * @param tamanho: Quantidade de bytes de dados do pacote
 * @retval Quantidade de bytes do pacote completo, incluindo o checksum
 */

uint16_t MontarPacote(uint8_t *buffer, uint8_t funcao, uint16_t tamanho) {
 8000700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	0008      	movs	r0, r1
 800070a:	0011      	movs	r1, r2
 800070c:	1cfb      	adds	r3, r7, #3
 800070e:	1c02      	adds	r2, r0, #0
 8000710:	701a      	strb	r2, [r3, #0]
 8000712:	003b      	movs	r3, r7
 8000714:	1c0a      	adds	r2, r1, #0
 8000716:	801a      	strh	r2, [r3, #0]

	uint16_t n = TAMANHO_HEADER + tamanho;
 8000718:	210e      	movs	r1, #14
 800071a:	187b      	adds	r3, r7, r1
 800071c:	003a      	movs	r2, r7
 800071e:	8812      	ldrh	r2, [r2, #0]
 8000720:	3207      	adds	r2, #7
 8000722:	801a      	strh	r2, [r3, #0]

	/* 4 Bytes de String */
	buffer[0] = 'L';
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	224c      	movs	r2, #76	; 0x4c
 8000728:	701a      	strb	r2, [r3, #0]
	buffer[1] = 'U';
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	3301      	adds	r3, #1
 800072e:	2255      	movs	r2, #85	; 0x55
 8000730:	701a      	strb	r2, [r3, #0]
	buffer[2] = 'P';
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	3302      	adds	r3, #2
 8000736:	2250      	movs	r2, #80	; 0x50
 8000738:	701a      	strb	r2, [r3, #0]
	buffer[3] = 'A';
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	3303      	adds	r3, #3
 800073e:	2241      	movs	r2, #65	; 0x41
 8000740:	701a      	strb	r2, [r3, #0]
	/*2 Bytes de tamanho*/
#if defined(__LSB__)
	buffer[5] = (n) >> 8;
 8000742:	000d      	movs	r5, r1
 8000744:	197b      	adds	r3, r7, r5
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	0a1b      	lsrs	r3, r3, #8
 800074a:	b29a      	uxth	r2, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3305      	adds	r3, #5
 8000750:	b2d2      	uxtb	r2, r2
 8000752:	701a      	strb	r2, [r3, #0]
	buffer[4] = (n) & 0xff;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3304      	adds	r3, #4
 8000758:	197a      	adds	r2, r7, r5
 800075a:	8812      	ldrh	r2, [r2, #0]
 800075c:	b2d2      	uxtb	r2, r2
 800075e:	701a      	strb	r2, [r3, #0]
#else
	buffer[4] = (n) >> 8;
	buffer[5] = (n) & 0xff;
#endif
	buffer[6] = funcao;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3306      	adds	r3, #6
 8000764:	1cfa      	adds	r2, r7, #3
 8000766:	7812      	ldrb	r2, [r2, #0]
 8000768:	701a      	strb	r2, [r3, #0]

	// Calcula o CRC-16
	uint16_t crc = crc16_calc(&buffer[0], n);
 800076a:	260c      	movs	r6, #12
 800076c:	19bc      	adds	r4, r7, r6
 800076e:	197b      	adds	r3, r7, r5
 8000770:	881a      	ldrh	r2, [r3, #0]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	0011      	movs	r1, r2
 8000776:	0018      	movs	r0, r3
 8000778:	f000 f868 	bl	800084c <crc16_calc>
 800077c:	0003      	movs	r3, r0
 800077e:	8023      	strh	r3, [r4, #0]
	buffer[n + 2] = (crc >> 8) & 0xff;
	buffer[n + 3] = crc & 0xff;
#endif
#else
#if defined(__LSB__)
	buffer[n + 1] = crc >> 8;
 8000780:	0030      	movs	r0, r6
 8000782:	183b      	adds	r3, r7, r0
 8000784:	881b      	ldrh	r3, [r3, #0]
 8000786:	0a1b      	lsrs	r3, r3, #8
 8000788:	b299      	uxth	r1, r3
 800078a:	197b      	adds	r3, r7, r5
 800078c:	881b      	ldrh	r3, [r3, #0]
 800078e:	3301      	adds	r3, #1
 8000790:	687a      	ldr	r2, [r7, #4]
 8000792:	18d3      	adds	r3, r2, r3
 8000794:	b2ca      	uxtb	r2, r1
 8000796:	701a      	strb	r2, [r3, #0]
	buffer[n] = crc & 0xff;
 8000798:	197b      	adds	r3, r7, r5
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	18d3      	adds	r3, r2, r3
 80007a0:	183a      	adds	r2, r7, r0
 80007a2:	8812      	ldrh	r2, [r2, #0]
 80007a4:	b2d2      	uxtb	r2, r2
 80007a6:	701a      	strb	r2, [r3, #0]
	buffer[n] = crc >> 8;
	buffer[n + 1] = crc & 0xff;
#endif
#endif

	return n + TAMANHO_CHECKSUM;
 80007a8:	197b      	adds	r3, r7, r5
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	3302      	adds	r3, #2
 80007ae:	b29b      	uxth	r3, r3
}
 80007b0:	0018      	movs	r0, r3
 80007b2:	46bd      	mov	sp, r7
 80007b4:	b005      	add	sp, #20
 80007b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080007b8 <ValidarPacote>:

}

//---------------------------------------------------------------------------

int ValidarPacote(uint8_t *buffer) {
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	b087      	sub	sp, #28
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]

	uint8_t comando = buffer[6];
 80007c0:	2317      	movs	r3, #23
 80007c2:	18fb      	adds	r3, r7, r3
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	7992      	ldrb	r2, [r2, #6]
 80007c8:	701a      	strb	r2, [r3, #0]
	uint32_t crcRecebido;
	uint16_t crcCalculado = 0;
 80007ca:	2614      	movs	r6, #20
 80007cc:	19bb      	adds	r3, r7, r6
 80007ce:	2200      	movs	r2, #0
 80007d0:	801a      	strh	r2, [r3, #0]

//	PROTOCOLO *dadosComunicacao = buffer;
//	uint16_t bytes = dadosComunicacao->pacote.tamanho;

#if defined(__LSB__)
	uint16_t bytes = (buffer[5] << 8) + buffer[4];
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	3305      	adds	r3, #5
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	b29b      	uxth	r3, r3
 80007da:	021b      	lsls	r3, r3, #8
 80007dc:	b299      	uxth	r1, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	3304      	adds	r3, #4
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	b29a      	uxth	r2, r3
 80007e6:	2512      	movs	r5, #18
 80007e8:	197b      	adds	r3, r7, r5
 80007ea:	188a      	adds	r2, r1, r2
 80007ec:	801a      	strh	r2, [r3, #0]
#else
	uint16_t bytes = (buffer[4] << 8) + buffer[5];
#endif

	crcCalculado = crc16_calc(&buffer[0], bytes);
 80007ee:	19bc      	adds	r4, r7, r6
 80007f0:	197b      	adds	r3, r7, r5
 80007f2:	881a      	ldrh	r2, [r3, #0]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	0011      	movs	r1, r2
 80007f8:	0018      	movs	r0, r3
 80007fa:	f000 f827 	bl	800084c <crc16_calc>
 80007fe:	0003      	movs	r3, r0
 8000800:	8023      	strh	r3, [r4, #0]
	(buffer[bytes + 2] << 8) +
	buffer[bytes + 3];
#endif
#else
#if defined(__LSB__)
	crcRecebido = (buffer[bytes + 1] << 8) + buffer[bytes];
 8000802:	0029      	movs	r1, r5
 8000804:	187b      	adds	r3, r7, r1
 8000806:	881b      	ldrh	r3, [r3, #0]
 8000808:	3301      	adds	r3, #1
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	18d3      	adds	r3, r2, r3
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	021b      	lsls	r3, r3, #8
 8000812:	187a      	adds	r2, r7, r1
 8000814:	8812      	ldrh	r2, [r2, #0]
 8000816:	6879      	ldr	r1, [r7, #4]
 8000818:	188a      	adds	r2, r1, r2
 800081a:	7812      	ldrb	r2, [r2, #0]
 800081c:	189b      	adds	r3, r3, r2
 800081e:	60fb      	str	r3, [r7, #12]
#else
	crcRecebido = (buffer[bytes] << 8) + buffer[bytes + 1];
#endif
#endif

	if (crcRecebido != crcCalculado)
 8000820:	19bb      	adds	r3, r7, r6
 8000822:	881b      	ldrh	r3, [r3, #0]
 8000824:	68fa      	ldr	r2, [r7, #12]
 8000826:	429a      	cmp	r2, r3
 8000828:	d002      	beq.n	8000830 <ValidarPacote+0x78>
		return E_CHECKSUM;
 800082a:	2302      	movs	r3, #2
 800082c:	425b      	negs	r3, r3
 800082e:	e008      	b.n	8000842 <ValidarPacote+0x8a>

	if (comando > QTD_COMANDOS)
 8000830:	2317      	movs	r3, #23
 8000832:	18fb      	adds	r3, r7, r3
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b0f      	cmp	r3, #15
 8000838:	d902      	bls.n	8000840 <ValidarPacote+0x88>
		return E_COMANDO_INVALIDO;
 800083a:	2301      	movs	r3, #1
 800083c:	425b      	negs	r3, r3
 800083e:	e000      	b.n	8000842 <ValidarPacote+0x8a>

	return E_PACOTE_OK;
 8000840:	2300      	movs	r3, #0

}
 8000842:	0018      	movs	r0, r3
 8000844:	46bd      	mov	sp, r7
 8000846:	b007      	add	sp, #28
 8000848:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800084c <crc16_calc>:

	return (uint16_t) (crc_hi << 8 | crc_low);
}

uint16_t crc16_calc(uint8_t *frame, uint16_t len)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	000a      	movs	r2, r1
 8000856:	1cbb      	adds	r3, r7, #2
 8000858:	801a      	strh	r2, [r3, #0]
	uint8_t crc_hi = 0xFF;
 800085a:	230f      	movs	r3, #15
 800085c:	18fb      	adds	r3, r7, r3
 800085e:	22ff      	movs	r2, #255	; 0xff
 8000860:	701a      	strb	r2, [r3, #0]
	uint8_t crc_low = 0xFF;
 8000862:	230e      	movs	r3, #14
 8000864:	18fb      	adds	r3, r7, r3
 8000866:	22ff      	movs	r2, #255	; 0xff
 8000868:	701a      	strb	r2, [r3, #0]
	int iIndex;

	while (len--)
 800086a:	e019      	b.n	80008a0 <crc16_calc+0x54>
	{
		iIndex = crc_low ^ *(frame++);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	1c5a      	adds	r2, r3, #1
 8000870:	607a      	str	r2, [r7, #4]
 8000872:	781a      	ldrb	r2, [r3, #0]
 8000874:	200e      	movs	r0, #14
 8000876:	183b      	adds	r3, r7, r0
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	4053      	eors	r3, r2
 800087c:	b2db      	uxtb	r3, r3
 800087e:	60bb      	str	r3, [r7, #8]
		crc_low = (uint8_t) (crc_hi ^ crc_hi_table[iIndex]);
 8000880:	4a13      	ldr	r2, [pc, #76]	; (80008d0 <crc16_calc+0x84>)
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	18d3      	adds	r3, r2, r3
 8000886:	7819      	ldrb	r1, [r3, #0]
 8000888:	183b      	adds	r3, r7, r0
 800088a:	200f      	movs	r0, #15
 800088c:	183a      	adds	r2, r7, r0
 800088e:	7812      	ldrb	r2, [r2, #0]
 8000890:	404a      	eors	r2, r1
 8000892:	701a      	strb	r2, [r3, #0]
		crc_hi = crc_low_table[iIndex];
 8000894:	183b      	adds	r3, r7, r0
 8000896:	490f      	ldr	r1, [pc, #60]	; (80008d4 <crc16_calc+0x88>)
 8000898:	68ba      	ldr	r2, [r7, #8]
 800089a:	188a      	adds	r2, r1, r2
 800089c:	7812      	ldrb	r2, [r2, #0]
 800089e:	701a      	strb	r2, [r3, #0]
	while (len--)
 80008a0:	1cbb      	adds	r3, r7, #2
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	1cba      	adds	r2, r7, #2
 80008a6:	1e59      	subs	r1, r3, #1
 80008a8:	8011      	strh	r1, [r2, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d1de      	bne.n	800086c <crc16_calc+0x20>
	}

	return (uint16_t) (crc_hi << 8 | crc_low);
 80008ae:	230f      	movs	r3, #15
 80008b0:	18fb      	adds	r3, r7, r3
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	021b      	lsls	r3, r3, #8
 80008b6:	b21a      	sxth	r2, r3
 80008b8:	230e      	movs	r3, #14
 80008ba:	18fb      	adds	r3, r7, r3
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b21b      	sxth	r3, r3
 80008c0:	4313      	orrs	r3, r2
 80008c2:	b21b      	sxth	r3, r3
 80008c4:	b29b      	uxth	r3, r3
}
 80008c6:	0018      	movs	r0, r3
 80008c8:	46bd      	mov	sp, r7
 80008ca:	b004      	add	sp, #16
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	08004808 	.word	0x08004808
 80008d4:	08004908 	.word	0x08004908

080008d8 <decodificarHEX>:
#define HEADER_LINHA 9
#define INICIO_LINHA ':'

STATS_FIRMWARE stats_firm;
//-----------------------------------------------------
STATS_FIRMWARE decodificarHEX(PROTOCOLO *Rx) {
 80008d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008da:	b099      	sub	sp, #100	; 0x64
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]

	PROTOCOLO *dRX = Rx;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	64fb      	str	r3, [r7, #76]	; 0x4c
	STATS_FIRMWARE *stats = &stats_firm;
 80008e4:	4be2      	ldr	r3, [pc, #904]	; (8000c70 <decodificarHEX+0x398>)
 80008e6:	64bb      	str	r3, [r7, #72]	; 0x48


//{0x3A,0x03,0x00,0x30,0x00,0x02,0x33,0x7A,0x1E}
	linhaHEX linha;
	memset(&linha,0x0,sizeof(linhaHEX));
 80008e8:	2318      	movs	r3, #24
 80008ea:	18fb      	adds	r3, r7, r3
 80008ec:	2226      	movs	r2, #38	; 0x26
 80008ee:	2100      	movs	r1, #0
 80008f0:	0018      	movs	r0, r3
 80008f2:	f002 fe62 	bl	80035ba <memset>

	int i = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint8_t contBytes = 0;
 80008fa:	2317      	movs	r3, #23
 80008fc:	18fb      	adds	r3, r7, r3
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]
	int respostaLinha = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
	uint8_t checksum = 0;
 8000906:	230f      	movs	r3, #15
 8000908:	18fb      	adds	r3, r7, r3
 800090a:	2200      	movs	r2, #0
 800090c:	701a      	strb	r2, [r3, #0]
	do
	{
		//-------- Acha o :
		//if(strcmp(dRX->pacote.dados[i],INICIO_LINHA) == 0 ){

		if(dRX->pacote.dados[i] == INICIO_LINHA)
 800090e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000910:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000912:	18d3      	adds	r3, r2, r3
 8000914:	3307      	adds	r3, #7
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b3a      	cmp	r3, #58	; 0x3a
 800091a:	d000      	beq.n	800091e <decodificarHEX+0x46>
 800091c:	e17f      	b.n	8000c1e <decodificarHEX+0x346>
		{
			memset(&linha,0x0,sizeof(linha));
 800091e:	2518      	movs	r5, #24
 8000920:	197b      	adds	r3, r7, r5
 8000922:	2226      	movs	r2, #38	; 0x26
 8000924:	2100      	movs	r1, #0
 8000926:	0018      	movs	r0, r3
 8000928:	f002 fe47 	bl	80035ba <memset>
 800092c:	230f      	movs	r3, #15
 800092e:	18fb      	adds	r3, r7, r3
 8000930:	2200      	movs	r2, #0
 8000932:	701a      	strb	r2, [r3, #0]
 8000934:	2317      	movs	r3, #23
 8000936:	18fb      	adds	r3, r7, r3
 8000938:	2200      	movs	r2, #0
 800093a:	701a      	strb	r2, [r3, #0]
 800093c:	2300      	movs	r3, #0
 800093e:	613b      	str	r3, [r7, #16]
			memset(&checksum,0x0,sizeof(checksum));
			memset(&contBytes,0x0,sizeof(contBytes));
			memset(&respostaLinha,0x0,sizeof(respostaLinha));

			linha.inicio = dRX->pacote.dados[i];
 8000940:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000942:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000944:	18d3      	adds	r3, r2, r3
 8000946:	3307      	adds	r3, #7
 8000948:	781a      	ldrb	r2, [r3, #0]
 800094a:	197b      	adds	r3, r7, r5
 800094c:	701a      	strb	r2, [r3, #0]

			//-------- Decodifica quantos bytes tem a linha
			linha.tamanho = ConverterBytes(dRX->pacote.dados[i+1], dRX->pacote.dados[i+2]);
 800094e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000950:	3301      	adds	r3, #1
 8000952:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000954:	18d3      	adds	r3, r2, r3
 8000956:	79d8      	ldrb	r0, [r3, #7]
 8000958:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800095a:	3302      	adds	r3, #2
 800095c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800095e:	18d3      	adds	r3, r2, r3
 8000960:	79db      	ldrb	r3, [r3, #7]
 8000962:	0019      	movs	r1, r3
 8000964:	f000 f990 	bl	8000c88 <ConverterBytes>
 8000968:	0003      	movs	r3, r0
 800096a:	001a      	movs	r2, r3
 800096c:	197b      	adds	r3, r7, r5
 800096e:	705a      	strb	r2, [r3, #1]

			//------- Decodifica Address
			linha.address = (uint16_t) ConverterBytes(dRX->pacote.dados[i + 3], dRX->pacote.dados[i+4]);
 8000970:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000972:	3303      	adds	r3, #3
 8000974:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000976:	18d3      	adds	r3, r2, r3
 8000978:	79d8      	ldrb	r0, [r3, #7]
 800097a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800097c:	3304      	adds	r3, #4
 800097e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000980:	18d3      	adds	r3, r2, r3
 8000982:	79db      	ldrb	r3, [r3, #7]
 8000984:	0019      	movs	r1, r3
 8000986:	f000 f97f 	bl	8000c88 <ConverterBytes>
 800098a:	0003      	movs	r3, r0
 800098c:	b29a      	uxth	r2, r3
 800098e:	197b      	adds	r3, r7, r5
 8000990:	805a      	strh	r2, [r3, #2]
			addr = ConverterBytes(dRX->pacote.dados[i+5], dRX->pacote.dados[i+6]);
 8000992:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000994:	3305      	adds	r3, #5
 8000996:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000998:	18d3      	adds	r3, r2, r3
 800099a:	79d8      	ldrb	r0, [r3, #7]
 800099c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800099e:	3306      	adds	r3, #6
 80009a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80009a2:	18d3      	adds	r3, r2, r3
 80009a4:	79db      	ldrb	r3, [r3, #7]
 80009a6:	2647      	movs	r6, #71	; 0x47
 80009a8:	19bc      	adds	r4, r7, r6
 80009aa:	0019      	movs	r1, r3
 80009ac:	f000 f96c 	bl	8000c88 <ConverterBytes>
 80009b0:	0003      	movs	r3, r0
 80009b2:	7023      	strb	r3, [r4, #0]
			linha.address = linha.address << 8| (uint16_t) (addr & 0xff);
 80009b4:	0029      	movs	r1, r5
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	885b      	ldrh	r3, [r3, #2]
 80009ba:	021b      	lsls	r3, r3, #8
 80009bc:	b21a      	sxth	r2, r3
 80009be:	19bb      	adds	r3, r7, r6
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	b21b      	sxth	r3, r3
 80009c4:	4313      	orrs	r3, r2
 80009c6:	b21b      	sxth	r3, r3
 80009c8:	b29a      	uxth	r2, r3
 80009ca:	000c      	movs	r4, r1
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	805a      	strh	r2, [r3, #2]

			//------- Decodifica Record Type
			linha.recordType = ConverterBytes( dRX->pacote.dados[i+7],  dRX->pacote.dados[i+8]);
 80009d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009d2:	3307      	adds	r3, #7
 80009d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80009d6:	18d3      	adds	r3, r2, r3
 80009d8:	79d8      	ldrb	r0, [r3, #7]
 80009da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009dc:	3308      	adds	r3, #8
 80009de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80009e0:	18d3      	adds	r3, r2, r3
 80009e2:	79db      	ldrb	r3, [r3, #7]
 80009e4:	0019      	movs	r1, r3
 80009e6:	f000 f94f 	bl	8000c88 <ConverterBytes>
 80009ea:	0003      	movs	r3, r0
 80009ec:	001a      	movs	r2, r3
 80009ee:	193b      	adds	r3, r7, r4
 80009f0:	711a      	strb	r2, [r3, #4]

			//------- Decodifica os Dados
			for (int w = 0; w < linha.tamanho * 2; w = w + 2) {
 80009f2:	2300      	movs	r3, #0
 80009f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80009f6:	e027      	b.n	8000a48 <decodificarHEX+0x170>
				decod = ConverterBytes(dRX->pacote.dados[i + HEADER_LINHA + w],	dRX->pacote.dados[i+ HEADER_LINHA + w + 1]);
 80009f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009fa:	3309      	adds	r3, #9
 80009fc:	001a      	movs	r2, r3
 80009fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a00:	18d3      	adds	r3, r2, r3
 8000a02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000a04:	18d3      	adds	r3, r2, r3
 8000a06:	79d8      	ldrb	r0, [r3, #7]
 8000a08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a0a:	3309      	adds	r3, #9
 8000a0c:	001a      	movs	r2, r3
 8000a0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a10:	18d3      	adds	r3, r2, r3
 8000a12:	3301      	adds	r3, #1
 8000a14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000a16:	18d3      	adds	r3, r2, r3
 8000a18:	79db      	ldrb	r3, [r3, #7]
 8000a1a:	2246      	movs	r2, #70	; 0x46
 8000a1c:	18bc      	adds	r4, r7, r2
 8000a1e:	0019      	movs	r1, r3
 8000a20:	f000 f932 	bl	8000c88 <ConverterBytes>
 8000a24:	0003      	movs	r3, r0
 8000a26:	7023      	strb	r3, [r4, #0]
				linha.data[w / 2] = decod;
 8000a28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	da00      	bge.n	8000a30 <decodificarHEX+0x158>
 8000a2e:	3301      	adds	r3, #1
 8000a30:	105b      	asrs	r3, r3, #1
 8000a32:	001a      	movs	r2, r3
 8000a34:	2318      	movs	r3, #24
 8000a36:	18fb      	adds	r3, r7, r3
 8000a38:	189b      	adds	r3, r3, r2
 8000a3a:	2246      	movs	r2, #70	; 0x46
 8000a3c:	18ba      	adds	r2, r7, r2
 8000a3e:	7812      	ldrb	r2, [r2, #0]
 8000a40:	715a      	strb	r2, [r3, #5]
			for (int w = 0; w < linha.tamanho * 2; w = w + 2) {
 8000a42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a44:	3302      	adds	r3, #2
 8000a46:	65bb      	str	r3, [r7, #88]	; 0x58
 8000a48:	2518      	movs	r5, #24
 8000a4a:	197b      	adds	r3, r7, r5
 8000a4c:	785b      	ldrb	r3, [r3, #1]
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000a52:	429a      	cmp	r2, r3
 8000a54:	dbd0      	blt.n	80009f8 <decodificarHEX+0x120>
			}

			//------- Decodifica CheckSum
			cs1[0] = dRX->pacote.dados[i + HEADER_LINHA + linha.tamanho*2];
 8000a56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a58:	3309      	adds	r3, #9
 8000a5a:	001a      	movs	r2, r3
 8000a5c:	197b      	adds	r3, r7, r5
 8000a5e:	785b      	ldrb	r3, [r3, #1]
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	18d3      	adds	r3, r2, r3
 8000a64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000a66:	18d3      	adds	r3, r2, r3
 8000a68:	79da      	ldrb	r2, [r3, #7]
 8000a6a:	210c      	movs	r1, #12
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	701a      	strb	r2, [r3, #0]
			cs1[1] = dRX->pacote.dados[i + HEADER_LINHA + linha.tamanho*2 + 1];
 8000a70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a72:	3309      	adds	r3, #9
 8000a74:	001a      	movs	r2, r3
 8000a76:	197b      	adds	r3, r7, r5
 8000a78:	785b      	ldrb	r3, [r3, #1]
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	18d3      	adds	r3, r2, r3
 8000a7e:	3301      	adds	r3, #1
 8000a80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000a82:	18d3      	adds	r3, r2, r3
 8000a84:	79da      	ldrb	r2, [r3, #7]
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	705a      	strb	r2, [r3, #1]
			linha.checksum = ConverterBytes(cs1[0],	cs1[1]);
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	781a      	ldrb	r2, [r3, #0]
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	785b      	ldrb	r3, [r3, #1]
 8000a92:	0019      	movs	r1, r3
 8000a94:	0010      	movs	r0, r2
 8000a96:	f000 f8f7 	bl	8000c88 <ConverterBytes>
 8000a9a:	0003      	movs	r3, r0
 8000a9c:	0019      	movs	r1, r3
 8000a9e:	197b      	adds	r3, r7, r5
 8000aa0:	2225      	movs	r2, #37	; 0x25
 8000aa2:	5499      	strb	r1, [r3, r2]

			//------- Verifica CheckSum da linha
			checksum+=linha.tamanho;
 8000aa4:	197b      	adds	r3, r7, r5
 8000aa6:	785a      	ldrb	r2, [r3, #1]
 8000aa8:	240f      	movs	r4, #15
 8000aaa:	193b      	adds	r3, r7, r4
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	18d3      	adds	r3, r2, r3
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	193b      	adds	r3, r7, r4
 8000ab4:	701a      	strb	r2, [r3, #0]
			checksum+= ConverterBytes(dRX->pacote.dados[i + 3], dRX->pacote.dados[i + 4]); //addr
 8000ab6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ab8:	3303      	adds	r3, #3
 8000aba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000abc:	18d3      	adds	r3, r2, r3
 8000abe:	79d8      	ldrb	r0, [r3, #7]
 8000ac0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ac2:	3304      	adds	r3, #4
 8000ac4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000ac6:	18d3      	adds	r3, r2, r3
 8000ac8:	79db      	ldrb	r3, [r3, #7]
 8000aca:	0019      	movs	r1, r3
 8000acc:	f000 f8dc 	bl	8000c88 <ConverterBytes>
 8000ad0:	0003      	movs	r3, r0
 8000ad2:	001a      	movs	r2, r3
 8000ad4:	193b      	adds	r3, r7, r4
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	18d3      	adds	r3, r2, r3
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	193b      	adds	r3, r7, r4
 8000ade:	701a      	strb	r2, [r3, #0]
			checksum+= ConverterBytes(dRX->pacote.dados[i + 5], dRX->pacote.dados[i + 6]);//addr
 8000ae0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ae2:	3305      	adds	r3, #5
 8000ae4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000ae6:	18d3      	adds	r3, r2, r3
 8000ae8:	79d8      	ldrb	r0, [r3, #7]
 8000aea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000aec:	3306      	adds	r3, #6
 8000aee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000af0:	18d3      	adds	r3, r2, r3
 8000af2:	79db      	ldrb	r3, [r3, #7]
 8000af4:	0019      	movs	r1, r3
 8000af6:	f000 f8c7 	bl	8000c88 <ConverterBytes>
 8000afa:	0003      	movs	r3, r0
 8000afc:	001a      	movs	r2, r3
 8000afe:	193b      	adds	r3, r7, r4
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	18d3      	adds	r3, r2, r3
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	193b      	adds	r3, r7, r4
 8000b08:	701a      	strb	r2, [r3, #0]
			checksum+=linha.recordType;
 8000b0a:	197b      	adds	r3, r7, r5
 8000b0c:	791a      	ldrb	r2, [r3, #4]
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	18d3      	adds	r3, r2, r3
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	193b      	adds	r3, r7, r4
 8000b18:	701a      	strb	r2, [r3, #0]

			for( int j = 0 ; j< linha.tamanho;j++)
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	657b      	str	r3, [r7, #84]	; 0x54
 8000b1e:	e00f      	b.n	8000b40 <decodificarHEX+0x268>
			{
				checksum+=linha.data[j];
 8000b20:	2318      	movs	r3, #24
 8000b22:	18fa      	adds	r2, r7, r3
 8000b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b26:	18d3      	adds	r3, r2, r3
 8000b28:	3305      	adds	r3, #5
 8000b2a:	781a      	ldrb	r2, [r3, #0]
 8000b2c:	210f      	movs	r1, #15
 8000b2e:	187b      	adds	r3, r7, r1
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	18d3      	adds	r3, r2, r3
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	187b      	adds	r3, r7, r1
 8000b38:	701a      	strb	r2, [r3, #0]
			for( int j = 0 ; j< linha.tamanho;j++)
 8000b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	657b      	str	r3, [r7, #84]	; 0x54
 8000b40:	2118      	movs	r1, #24
 8000b42:	187b      	adds	r3, r7, r1
 8000b44:	785b      	ldrb	r3, [r3, #1]
 8000b46:	001a      	movs	r2, r3
 8000b48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	dbe8      	blt.n	8000b20 <decodificarHEX+0x248>
			}

			if ((uint8_t) ((~checksum + 1) & 0xff) == linha.checksum)
 8000b4e:	230f      	movs	r3, #15
 8000b50:	18fb      	adds	r3, r7, r3
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	425b      	negs	r3, r3
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	0008      	movs	r0, r1
 8000b5a:	187b      	adds	r3, r7, r1
 8000b5c:	2125      	movs	r1, #37	; 0x25
 8000b5e:	5c5b      	ldrb	r3, [r3, r1]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d157      	bne.n	8000c14 <decodificarHEX+0x33c>
			{
			  //----- Copia os bytes para a estrutura
				contBytes = FIRM_OK;
 8000b64:	2317      	movs	r3, #23
 8000b66:	18fb      	adds	r3, r7, r3
 8000b68:	2200      	movs	r2, #0
 8000b6a:	701a      	strb	r2, [r3, #0]

				i += linha.tamanho * 2 + HEADER_LINHA + 2;
 8000b6c:	0001      	movs	r1, r0
 8000b6e:	187b      	adds	r3, r7, r1
 8000b70:	785b      	ldrb	r3, [r3, #1]
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	330b      	adds	r3, #11
 8000b76:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000b78:	18d3      	adds	r3, r2, r3
 8000b7a:	65fb      	str	r3, [r7, #92]	; 0x5c

				//Identificou uma linha completa, salvar no SD

                printf("Linha Inicio: %02X \r\n", linha.inicio);
 8000b7c:	000c      	movs	r4, r1
 8000b7e:	193b      	adds	r3, r7, r4
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	001a      	movs	r2, r3
 8000b84:	4b3b      	ldr	r3, [pc, #236]	; (8000c74 <decodificarHEX+0x39c>)
 8000b86:	0011      	movs	r1, r2
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f002 fd1f 	bl	80035cc <iprintf>
                printf("Linha Tamanho: %02d \r\n", linha.tamanho);
 8000b8e:	193b      	adds	r3, r7, r4
 8000b90:	785b      	ldrb	r3, [r3, #1]
 8000b92:	001a      	movs	r2, r3
 8000b94:	4b38      	ldr	r3, [pc, #224]	; (8000c78 <decodificarHEX+0x3a0>)
 8000b96:	0011      	movs	r1, r2
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f002 fd17 	bl	80035cc <iprintf>
                printf("Linha Endereco: %04X \r\n", linha.address);
 8000b9e:	193b      	adds	r3, r7, r4
 8000ba0:	885b      	ldrh	r3, [r3, #2]
 8000ba2:	001a      	movs	r2, r3
 8000ba4:	4b35      	ldr	r3, [pc, #212]	; (8000c7c <decodificarHEX+0x3a4>)
 8000ba6:	0011      	movs	r1, r2
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f002 fd0f 	bl	80035cc <iprintf>
                printf("Linha Record Type: %02X \r\n", linha.recordType);
 8000bae:	193b      	adds	r3, r7, r4
 8000bb0:	791b      	ldrb	r3, [r3, #4]
 8000bb2:	001a      	movs	r2, r3
 8000bb4:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <decodificarHEX+0x3a8>)
 8000bb6:	0011      	movs	r1, r2
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f002 fd07 	bl	80035cc <iprintf>

                for (int W = 0; W < linha.tamanho; W++){
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	653b      	str	r3, [r7, #80]	; 0x50
 8000bc2:	e00e      	b.n	8000be2 <decodificarHEX+0x30a>

                	printf("%02X", linha.data[W]);
 8000bc4:	2318      	movs	r3, #24
 8000bc6:	18fa      	adds	r2, r7, r3
 8000bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bca:	18d3      	adds	r3, r2, r3
 8000bcc:	3305      	adds	r3, #5
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	001a      	movs	r2, r3
 8000bd2:	4b2c      	ldr	r3, [pc, #176]	; (8000c84 <decodificarHEX+0x3ac>)
 8000bd4:	0011      	movs	r1, r2
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f002 fcf8 	bl	80035cc <iprintf>
                for (int W = 0; W < linha.tamanho; W++){
 8000bdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bde:	3301      	adds	r3, #1
 8000be0:	653b      	str	r3, [r7, #80]	; 0x50
 8000be2:	2418      	movs	r4, #24
 8000be4:	193b      	adds	r3, r7, r4
 8000be6:	785b      	ldrb	r3, [r3, #1]
 8000be8:	001a      	movs	r2, r3
 8000bea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bec:	4293      	cmp	r3, r2
 8000bee:	dbe9      	blt.n	8000bc4 <decodificarHEX+0x2ec>

                }

                printf("\n");
 8000bf0:	200a      	movs	r0, #10
 8000bf2:	f002 fd05 	bl	8003600 <putchar>
				//f_printf(fil, "\n");


				//respostaLinha = FIRM_FIM;

				if (linha.recordType == 0x1)
 8000bf6:	193b      	adds	r3, r7, r4
 8000bf8:	791b      	ldrb	r3, [r3, #4]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d103      	bne.n	8000c06 <decodificarHEX+0x32e>
				{
				  contBytes = FIRM_FIM;
 8000bfe:	2317      	movs	r3, #23
 8000c00:	18fb      	adds	r3, r7, r3
 8000c02:	2201      	movs	r2, #1
 8000c04:	701a      	strb	r2, [r3, #0]
        }
				stats->stats_firm.linhas_gravadas += 1;
 8000c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c08:	885b      	ldrh	r3, [r3, #2]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c10:	805a      	strh	r2, [r3, #2]
 8000c12:	e007      	b.n	8000c24 <decodificarHEX+0x34c>
			}
			else
			{
        contBytes = FIMM_CS_ERROR;
 8000c14:	2317      	movs	r3, #23
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	22fe      	movs	r2, #254	; 0xfe
 8000c1a:	701a      	strb	r2, [r3, #0]
        break;
 8000c1c:	e009      	b.n	8000c32 <decodificarHEX+0x35a>
      }
		}
		else
		{
			i++; // i = percorre os indices
 8000c1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c20:	3301      	adds	r3, #1
 8000c22:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		//------ Linha OK! Decodificar Instrucoes

		//Valor FAI  while (dRX->pacote.tamanho - 2 > i);

	} while (dRX->pacote.tamanho - 7 > i);
 8000c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c26:	889b      	ldrh	r3, [r3, #4]
 8000c28:	3b07      	subs	r3, #7
 8000c2a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	da00      	bge.n	8000c32 <decodificarHEX+0x35a>
 8000c30:	e66d      	b.n	800090e <decodificarHEX+0x36>

	// Implementar para salvar na flash externa

	//Dados_SalvarArquivo(fil);

	memcpy(&stats->stats_firm.status, &contBytes, sizeof(contBytes));
 8000c32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c34:	2217      	movs	r2, #23
 8000c36:	18ba      	adds	r2, r7, r2
 8000c38:	7812      	ldrb	r2, [r2, #0]
 8000c3a:	701a      	strb	r2, [r3, #0]
	return *stats;
 8000c3c:	2440      	movs	r4, #64	; 0x40
 8000c3e:	193a      	adds	r2, r7, r4
 8000c40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c42:	0010      	movs	r0, r2
 8000c44:	0019      	movs	r1, r3
 8000c46:	2304      	movs	r3, #4
 8000c48:	001a      	movs	r2, r3
 8000c4a:	f002 fcad 	bl	80035a8 <memcpy>
 8000c4e:	193a      	adds	r2, r7, r4
 8000c50:	2300      	movs	r3, #0
 8000c52:	8811      	ldrh	r1, [r2, #0]
 8000c54:	0409      	lsls	r1, r1, #16
 8000c56:	0c09      	lsrs	r1, r1, #16
 8000c58:	0c1b      	lsrs	r3, r3, #16
 8000c5a:	041b      	lsls	r3, r3, #16
 8000c5c:	430b      	orrs	r3, r1
 8000c5e:	8852      	ldrh	r2, [r2, #2]
 8000c60:	0412      	lsls	r2, r2, #16
 8000c62:	041b      	lsls	r3, r3, #16
 8000c64:	0c1b      	lsrs	r3, r3, #16
 8000c66:	4313      	orrs	r3, r2
}
 8000c68:	0018      	movs	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	b019      	add	sp, #100	; 0x64
 8000c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c70:	2000033c 	.word	0x2000033c
 8000c74:	0800467c 	.word	0x0800467c
 8000c78:	08004694 	.word	0x08004694
 8000c7c:	080046ac 	.word	0x080046ac
 8000c80:	080046c4 	.word	0x080046c4
 8000c84:	080046e0 	.word	0x080046e0

08000c88 <ConverterBytes>:




uint8_t ConverterBytes(uint8_t MaiorHex, uint8_t MenorHex)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	0002      	movs	r2, r0
 8000c90:	1dfb      	adds	r3, r7, #7
 8000c92:	701a      	strb	r2, [r3, #0]
 8000c94:	1dbb      	adds	r3, r7, #6
 8000c96:	1c0a      	adds	r2, r1, #0
 8000c98:	701a      	strb	r2, [r3, #0]
uint8_t byte;

	if (MaiorHex - 0x30 <= 0x09)
 8000c9a:	1dfb      	adds	r3, r7, #7
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b39      	cmp	r3, #57	; 0x39
 8000ca0:	d808      	bhi.n	8000cb4 <ConverterBytes+0x2c>
	{
		byte = (MaiorHex- 0x30) << 4;
 8000ca2:	1dfb      	adds	r3, r7, #7
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	3b30      	subs	r3, #48	; 0x30
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	230f      	movs	r3, #15
 8000cac:	18fb      	adds	r3, r7, r3
 8000cae:	0112      	lsls	r2, r2, #4
 8000cb0:	701a      	strb	r2, [r3, #0]
 8000cb2:	e028      	b.n	8000d06 <ConverterBytes+0x7e>
	}
	else {
		switch (MaiorHex) {
 8000cb4:	1dfb      	adds	r3, r7, #7
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	3b41      	subs	r3, #65	; 0x41
 8000cba:	2b25      	cmp	r3, #37	; 0x25
 8000cbc:	d822      	bhi.n	8000d04 <ConverterBytes+0x7c>
 8000cbe:	009a      	lsls	r2, r3, #2
 8000cc0:	4b3b      	ldr	r3, [pc, #236]	; (8000db0 <ConverterBytes+0x128>)
 8000cc2:	18d3      	adds	r3, r2, r3
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	469f      	mov	pc, r3
		case 'a':
		case 'A':
			byte = 0x0a << 4;
 8000cc8:	230f      	movs	r3, #15
 8000cca:	18fb      	adds	r3, r7, r3
 8000ccc:	22a0      	movs	r2, #160	; 0xa0
 8000cce:	701a      	strb	r2, [r3, #0]
			break;
 8000cd0:	e019      	b.n	8000d06 <ConverterBytes+0x7e>
		case 'b':
		case 'B':
			byte = 0x0b << 4;
 8000cd2:	230f      	movs	r3, #15
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	22b0      	movs	r2, #176	; 0xb0
 8000cd8:	701a      	strb	r2, [r3, #0]
			break;
 8000cda:	e014      	b.n	8000d06 <ConverterBytes+0x7e>
		case 'c':
		case 'C':
			byte = 0x0c << 4;
 8000cdc:	230f      	movs	r3, #15
 8000cde:	18fb      	adds	r3, r7, r3
 8000ce0:	22c0      	movs	r2, #192	; 0xc0
 8000ce2:	701a      	strb	r2, [r3, #0]
			break;
 8000ce4:	e00f      	b.n	8000d06 <ConverterBytes+0x7e>
		case 'd':
		case 'D':
			byte = 0x0d << 4;
 8000ce6:	230f      	movs	r3, #15
 8000ce8:	18fb      	adds	r3, r7, r3
 8000cea:	22d0      	movs	r2, #208	; 0xd0
 8000cec:	701a      	strb	r2, [r3, #0]
			break;
 8000cee:	e00a      	b.n	8000d06 <ConverterBytes+0x7e>
		case 'e':
		case 'E':
			byte = 0x0e << 4;
 8000cf0:	230f      	movs	r3, #15
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	22e0      	movs	r2, #224	; 0xe0
 8000cf6:	701a      	strb	r2, [r3, #0]
			break;
 8000cf8:	e005      	b.n	8000d06 <ConverterBytes+0x7e>
		case 'f':
		case 'F':
			byte = 0x0f << 4;
 8000cfa:	230f      	movs	r3, #15
 8000cfc:	18fb      	adds	r3, r7, r3
 8000cfe:	22f0      	movs	r2, #240	; 0xf0
 8000d00:	701a      	strb	r2, [r3, #0]
			break;
 8000d02:	e000      	b.n	8000d06 <ConverterBytes+0x7e>
		default:
			break;
 8000d04:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (MenorHex - 0x30 <= 0x09){
 8000d06:	1dbb      	adds	r3, r7, #6
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b39      	cmp	r3, #57	; 0x39
 8000d0c:	d80d      	bhi.n	8000d2a <ConverterBytes+0xa2>
		byte |= (MenorHex- 0x30) & 0xff ;
 8000d0e:	1dbb      	adds	r3, r7, #6
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	3b30      	subs	r3, #48	; 0x30
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	b25a      	sxtb	r2, r3
 8000d18:	210f      	movs	r1, #15
 8000d1a:	187b      	adds	r3, r7, r1
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	b25b      	sxtb	r3, r3
 8000d20:	4313      	orrs	r3, r2
 8000d22:	b25a      	sxtb	r2, r3
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	701a      	strb	r2, [r3, #0]
 8000d28:	e03a      	b.n	8000da0 <ConverterBytes+0x118>
	}
	else {
		switch (MenorHex) {
 8000d2a:	1dbb      	adds	r3, r7, #6
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	3b41      	subs	r3, #65	; 0x41
 8000d30:	2b25      	cmp	r3, #37	; 0x25
 8000d32:	d834      	bhi.n	8000d9e <ConverterBytes+0x116>
 8000d34:	009a      	lsls	r2, r3, #2
 8000d36:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <ConverterBytes+0x12c>)
 8000d38:	18d3      	adds	r3, r2, r3
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	469f      	mov	pc, r3
		case 'a':
		case 'A':
			byte |= 0x0a & 0xff;
 8000d3e:	220f      	movs	r2, #15
 8000d40:	18bb      	adds	r3, r7, r2
 8000d42:	18ba      	adds	r2, r7, r2
 8000d44:	7812      	ldrb	r2, [r2, #0]
 8000d46:	210a      	movs	r1, #10
 8000d48:	430a      	orrs	r2, r1
 8000d4a:	701a      	strb	r2, [r3, #0]
			break;
 8000d4c:	e028      	b.n	8000da0 <ConverterBytes+0x118>
		case 'b':
		case 'B':
			byte |= 0x0b & 0xff;
 8000d4e:	220f      	movs	r2, #15
 8000d50:	18bb      	adds	r3, r7, r2
 8000d52:	18ba      	adds	r2, r7, r2
 8000d54:	7812      	ldrb	r2, [r2, #0]
 8000d56:	210b      	movs	r1, #11
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	701a      	strb	r2, [r3, #0]
			break;
 8000d5c:	e020      	b.n	8000da0 <ConverterBytes+0x118>
		case 'c':
		case 'C':
			byte |= 0x0c & 0xff;
 8000d5e:	220f      	movs	r2, #15
 8000d60:	18bb      	adds	r3, r7, r2
 8000d62:	18ba      	adds	r2, r7, r2
 8000d64:	7812      	ldrb	r2, [r2, #0]
 8000d66:	210c      	movs	r1, #12
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	701a      	strb	r2, [r3, #0]
			break;
 8000d6c:	e018      	b.n	8000da0 <ConverterBytes+0x118>
		case 'd':
		case 'D':
			byte |= 0x0d & 0xff;
 8000d6e:	220f      	movs	r2, #15
 8000d70:	18bb      	adds	r3, r7, r2
 8000d72:	18ba      	adds	r2, r7, r2
 8000d74:	7812      	ldrb	r2, [r2, #0]
 8000d76:	210d      	movs	r1, #13
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	701a      	strb	r2, [r3, #0]
			break;
 8000d7c:	e010      	b.n	8000da0 <ConverterBytes+0x118>
		case 'e':
		case 'E':
			byte |= 0x0e & 0xff;
 8000d7e:	220f      	movs	r2, #15
 8000d80:	18bb      	adds	r3, r7, r2
 8000d82:	18ba      	adds	r2, r7, r2
 8000d84:	7812      	ldrb	r2, [r2, #0]
 8000d86:	210e      	movs	r1, #14
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	701a      	strb	r2, [r3, #0]
			break;
 8000d8c:	e008      	b.n	8000da0 <ConverterBytes+0x118>
		case 'f':
		case 'F':
			byte |= 0x0f & 0xff;
 8000d8e:	220f      	movs	r2, #15
 8000d90:	18bb      	adds	r3, r7, r2
 8000d92:	18ba      	adds	r2, r7, r2
 8000d94:	7812      	ldrb	r2, [r2, #0]
 8000d96:	210f      	movs	r1, #15
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	701a      	strb	r2, [r3, #0]
			break;
 8000d9c:	e000      	b.n	8000da0 <ConverterBytes+0x118>
		default:
			break;
 8000d9e:	46c0      	nop			; (mov r8, r8)
		}
	}
return byte;
 8000da0:	230f      	movs	r3, #15
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	781b      	ldrb	r3, [r3, #0]
}
 8000da6:	0018      	movs	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	b004      	add	sp, #16
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	08004a08 	.word	0x08004a08
 8000db4:	08004aa0 	.word	0x08004aa0

08000db8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000db8:	b590      	push	{r4, r7, lr}
 8000dba:	b08b      	sub	sp, #44	; 0x2c
 8000dbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbe:	2414      	movs	r4, #20
 8000dc0:	193b      	adds	r3, r7, r4
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	2314      	movs	r3, #20
 8000dc6:	001a      	movs	r2, r3
 8000dc8:	2100      	movs	r1, #0
 8000dca:	f002 fbf6 	bl	80035ba <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dce:	4b33      	ldr	r3, [pc, #204]	; (8000e9c <MX_GPIO_Init+0xe4>)
 8000dd0:	695a      	ldr	r2, [r3, #20]
 8000dd2:	4b32      	ldr	r3, [pc, #200]	; (8000e9c <MX_GPIO_Init+0xe4>)
 8000dd4:	2180      	movs	r1, #128	; 0x80
 8000dd6:	0309      	lsls	r1, r1, #12
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	615a      	str	r2, [r3, #20]
 8000ddc:	4b2f      	ldr	r3, [pc, #188]	; (8000e9c <MX_GPIO_Init+0xe4>)
 8000dde:	695a      	ldr	r2, [r3, #20]
 8000de0:	2380      	movs	r3, #128	; 0x80
 8000de2:	031b      	lsls	r3, r3, #12
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dea:	4b2c      	ldr	r3, [pc, #176]	; (8000e9c <MX_GPIO_Init+0xe4>)
 8000dec:	695a      	ldr	r2, [r3, #20]
 8000dee:	4b2b      	ldr	r3, [pc, #172]	; (8000e9c <MX_GPIO_Init+0xe4>)
 8000df0:	2180      	movs	r1, #128	; 0x80
 8000df2:	03c9      	lsls	r1, r1, #15
 8000df4:	430a      	orrs	r2, r1
 8000df6:	615a      	str	r2, [r3, #20]
 8000df8:	4b28      	ldr	r3, [pc, #160]	; (8000e9c <MX_GPIO_Init+0xe4>)
 8000dfa:	695a      	ldr	r2, [r3, #20]
 8000dfc:	2380      	movs	r3, #128	; 0x80
 8000dfe:	03db      	lsls	r3, r3, #15
 8000e00:	4013      	ands	r3, r2
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	4b25      	ldr	r3, [pc, #148]	; (8000e9c <MX_GPIO_Init+0xe4>)
 8000e08:	695a      	ldr	r2, [r3, #20]
 8000e0a:	4b24      	ldr	r3, [pc, #144]	; (8000e9c <MX_GPIO_Init+0xe4>)
 8000e0c:	2180      	movs	r1, #128	; 0x80
 8000e0e:	0289      	lsls	r1, r1, #10
 8000e10:	430a      	orrs	r2, r1
 8000e12:	615a      	str	r2, [r3, #20]
 8000e14:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <MX_GPIO_Init+0xe4>)
 8000e16:	695a      	ldr	r2, [r3, #20]
 8000e18:	2380      	movs	r3, #128	; 0x80
 8000e1a:	029b      	lsls	r3, r3, #10
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e22:	4b1e      	ldr	r3, [pc, #120]	; (8000e9c <MX_GPIO_Init+0xe4>)
 8000e24:	695a      	ldr	r2, [r3, #20]
 8000e26:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <MX_GPIO_Init+0xe4>)
 8000e28:	2180      	movs	r1, #128	; 0x80
 8000e2a:	02c9      	lsls	r1, r1, #11
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	615a      	str	r2, [r3, #20]
 8000e30:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <MX_GPIO_Init+0xe4>)
 8000e32:	695a      	ldr	r2, [r3, #20]
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	02db      	lsls	r3, r3, #11
 8000e38:	4013      	ands	r3, r2
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8000e3e:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <MX_GPIO_Init+0xe8>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	2140      	movs	r1, #64	; 0x40
 8000e44:	0018      	movs	r0, r3
 8000e46:	f000 fe4f 	bl	8001ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e4a:	193b      	adds	r3, r7, r4
 8000e4c:	2280      	movs	r2, #128	; 0x80
 8000e4e:	0192      	lsls	r2, r2, #6
 8000e50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e52:	193b      	adds	r3, r7, r4
 8000e54:	2284      	movs	r2, #132	; 0x84
 8000e56:	0392      	lsls	r2, r2, #14
 8000e58:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	193b      	adds	r3, r7, r4
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e60:	193b      	adds	r3, r7, r4
 8000e62:	4a10      	ldr	r2, [pc, #64]	; (8000ea4 <MX_GPIO_Init+0xec>)
 8000e64:	0019      	movs	r1, r3
 8000e66:	0010      	movs	r0, r2
 8000e68:	f000 fcc6 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8000e6c:	0021      	movs	r1, r4
 8000e6e:	187b      	adds	r3, r7, r1
 8000e70:	2240      	movs	r2, #64	; 0x40
 8000e72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e74:	187b      	adds	r3, r7, r1
 8000e76:	2201      	movs	r2, #1
 8000e78:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	187b      	adds	r3, r7, r1
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	187b      	adds	r3, r7, r1
 8000e82:	2200      	movs	r2, #0
 8000e84:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8000e86:	187b      	adds	r3, r7, r1
 8000e88:	4a05      	ldr	r2, [pc, #20]	; (8000ea0 <MX_GPIO_Init+0xe8>)
 8000e8a:	0019      	movs	r1, r3
 8000e8c:	0010      	movs	r0, r2
 8000e8e:	f000 fcb3 	bl	80017f8 <HAL_GPIO_Init>

}
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	46bd      	mov	sp, r7
 8000e96:	b00b      	add	sp, #44	; 0x2c
 8000e98:	bd90      	pop	{r4, r7, pc}
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	48000400 	.word	0x48000400
 8000ea4:	48000800 	.word	0x48000800

08000ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eae:	f000 fb49 	bl	8001544 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb2:	f000 f849 	bl	8000f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb6:	f7ff ff7f 	bl	8000db8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000eba:	f000 fa2f 	bl	800131c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000ebe:	f000 f8c5 	bl	800104c <MX_SPI1_Init>
  MX_USART4_UART_Init();
 8000ec2:	f000 fa5b 	bl	800137c <MX_USART4_UART_Init>
   {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

     if (--timeoutLED == 0)
 8000ec6:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <main+0x90>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	1e5a      	subs	r2, r3, #1
 8000ecc:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <main+0x90>)
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <main+0x90>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d103      	bne.n	8000ee0 <main+0x38>
     {
      // HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

       timeoutLED = TEMPO_LED;
 8000ed8:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <main+0x90>)
 8000eda:	22fa      	movs	r2, #250	; 0xfa
 8000edc:	00d2      	lsls	r2, r2, #3
 8000ede:	601a      	str	r2, [r3, #0]
     }

     if (timeoutUART)
 8000ee0:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <main+0x94>)
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d005      	beq.n	8000ef4 <main+0x4c>

    	 timeoutUART--;
 8000ee8:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <main+0x94>)
 8000eea:	881b      	ldrh	r3, [r3, #0]
 8000eec:	3b01      	subs	r3, #1
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <main+0x94>)
 8000ef2:	801a      	strh	r2, [r3, #0]

     statusUART = HAL_UART_Receive(&huart2, (uint8_t *) &byte, 1, 1);
 8000ef4:	1dfc      	adds	r4, r7, #7
 8000ef6:	4912      	ldr	r1, [pc, #72]	; (8000f40 <main+0x98>)
 8000ef8:	4812      	ldr	r0, [pc, #72]	; (8000f44 <main+0x9c>)
 8000efa:	2301      	movs	r3, #1
 8000efc:	2201      	movs	r2, #1
 8000efe:	f001 fded 	bl	8002adc <HAL_UART_Receive>
 8000f02:	0003      	movs	r3, r0
 8000f04:	7023      	strb	r3, [r4, #0]

     if (statusUART == HAL_OK) {
 8000f06:	1dfb      	adds	r3, r7, #7
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d111      	bne.n	8000f32 <main+0x8a>

       do {

         //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

        ReceberSerial(byte);
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <main+0x98>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	0018      	movs	r0, r3
 8000f14:	f7ff f9a0 	bl	8000258 <ReceberSerial>

         statusUART = HAL_UART_Receive(&huart2, (uint8_t *) &byte, 1,0);
 8000f18:	1dfc      	adds	r4, r7, #7
 8000f1a:	4909      	ldr	r1, [pc, #36]	; (8000f40 <main+0x98>)
 8000f1c:	4809      	ldr	r0, [pc, #36]	; (8000f44 <main+0x9c>)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	2201      	movs	r2, #1
 8000f22:	f001 fddb 	bl	8002adc <HAL_UART_Receive>
 8000f26:	0003      	movs	r3, r0
 8000f28:	7023      	strb	r3, [r4, #0]

       } while (statusUART == HAL_OK);
 8000f2a:	1dfb      	adds	r3, r7, #7
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d0ed      	beq.n	8000f0e <main+0x66>
     }

     ProcessarUART();
 8000f32:	f7ff fa5d 	bl	80003f0 <ProcessarUART>
   {
 8000f36:	e7c6      	b.n	8000ec6 <main+0x1e>
 8000f38:	20000008 	.word	0x20000008
 8000f3c:	20000340 	.word	0x20000340
 8000f40:	20000342 	.word	0x20000342
 8000f44:	200003ac 	.word	0x200003ac

08000f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b099      	sub	sp, #100	; 0x64
 8000f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4e:	242c      	movs	r4, #44	; 0x2c
 8000f50:	193b      	adds	r3, r7, r4
 8000f52:	0018      	movs	r0, r3
 8000f54:	2334      	movs	r3, #52	; 0x34
 8000f56:	001a      	movs	r2, r3
 8000f58:	2100      	movs	r1, #0
 8000f5a:	f002 fb2e 	bl	80035ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5e:	231c      	movs	r3, #28
 8000f60:	18fb      	adds	r3, r7, r3
 8000f62:	0018      	movs	r0, r3
 8000f64:	2310      	movs	r3, #16
 8000f66:	001a      	movs	r2, r3
 8000f68:	2100      	movs	r1, #0
 8000f6a:	f002 fb26 	bl	80035ba <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f6e:	003b      	movs	r3, r7
 8000f70:	0018      	movs	r0, r3
 8000f72:	231c      	movs	r3, #28
 8000f74:	001a      	movs	r2, r3
 8000f76:	2100      	movs	r1, #0
 8000f78:	f002 fb1f 	bl	80035ba <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f7c:	0021      	movs	r1, r4
 8000f7e:	187b      	adds	r3, r7, r1
 8000f80:	2201      	movs	r2, #1
 8000f82:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f84:	187b      	adds	r3, r7, r1
 8000f86:	2205      	movs	r2, #5
 8000f88:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f8a:	187b      	adds	r3, r7, r1
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f90:	187b      	adds	r3, r7, r1
 8000f92:	2280      	movs	r2, #128	; 0x80
 8000f94:	0252      	lsls	r2, r2, #9
 8000f96:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000f98:	187b      	adds	r3, r7, r1
 8000f9a:	22a0      	movs	r2, #160	; 0xa0
 8000f9c:	0392      	lsls	r2, r2, #14
 8000f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000fa0:	187b      	adds	r3, r7, r1
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa6:	187b      	adds	r3, r7, r1
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f000 fdbb 	bl	8001b24 <HAL_RCC_OscConfig>
 8000fae:	1e03      	subs	r3, r0, #0
 8000fb0:	d001      	beq.n	8000fb6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000fb2:	f000 f845 	bl	8001040 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb6:	211c      	movs	r1, #28
 8000fb8:	187b      	adds	r3, r7, r1
 8000fba:	2207      	movs	r2, #7
 8000fbc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fbe:	187b      	adds	r3, r7, r1
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc4:	187b      	adds	r3, r7, r1
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fca:	187b      	adds	r3, r7, r1
 8000fcc:	2200      	movs	r2, #0
 8000fce:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fd0:	187b      	adds	r3, r7, r1
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f001 f92b 	bl	8002230 <HAL_RCC_ClockConfig>
 8000fda:	1e03      	subs	r3, r0, #0
 8000fdc:	d001      	beq.n	8000fe2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000fde:	f000 f82f 	bl	8001040 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fe2:	003b      	movs	r3, r7
 8000fe4:	2202      	movs	r2, #2
 8000fe6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fe8:	003b      	movs	r3, r7
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fee:	003b      	movs	r3, r7
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	f001 fabf 	bl	8002574 <HAL_RCCEx_PeriphCLKConfig>
 8000ff6:	1e03      	subs	r3, r0, #0
 8000ff8:	d001      	beq.n	8000ffe <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000ffa:	f000 f821 	bl	8001040 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000ffe:	f001 f9f1 	bl	80023e4 <HAL_RCC_EnableCSS>
}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	46bd      	mov	sp, r7
 8001006:	b019      	add	sp, #100	; 0x64
 8001008:	bd90      	pop	{r4, r7, pc}
	...

0800100c <__io_putchar>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
//	return ITM_SendChar(ch);
  unsigned char byte = ch;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	b2da      	uxtb	r2, r3
 8001018:	210f      	movs	r1, #15
 800101a:	187b      	adds	r3, r7, r1
 800101c:	701a      	strb	r2, [r3, #0]
  if (HAL_UART_Transmit(&huart4, &byte, 1, 100) != HAL_OK)
 800101e:	1879      	adds	r1, r7, r1
 8001020:	4806      	ldr	r0, [pc, #24]	; (800103c <__io_putchar+0x30>)
 8001022:	2364      	movs	r3, #100	; 0x64
 8001024:	2201      	movs	r2, #1
 8001026:	f001 fcaf 	bl	8002988 <HAL_UART_Transmit>
 800102a:	1e03      	subs	r3, r0, #0
 800102c:	d001      	beq.n	8001032 <__io_putchar+0x26>
  {
    return 0;
 800102e:	2300      	movs	r3, #0
 8001030:	e000      	b.n	8001034 <__io_putchar+0x28>
  }
  return ch;
 8001032:	687b      	ldr	r3, [r7, #4]
}
 8001034:	0018      	movs	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	b004      	add	sp, #16
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000430 	.word	0x20000430

08001040 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001044:	b672      	cpsid	i
}
 8001046:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001048:	e7fe      	b.n	8001048 <Error_Handler+0x8>
	...

0800104c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001050:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <MX_SPI1_Init+0x74>)
 8001052:	4a1c      	ldr	r2, [pc, #112]	; (80010c4 <MX_SPI1_Init+0x78>)
 8001054:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001056:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <MX_SPI1_Init+0x74>)
 8001058:	2282      	movs	r2, #130	; 0x82
 800105a:	0052      	lsls	r2, r2, #1
 800105c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800105e:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <MX_SPI1_Init+0x74>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001064:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <MX_SPI1_Init+0x74>)
 8001066:	22e0      	movs	r2, #224	; 0xe0
 8001068:	00d2      	lsls	r2, r2, #3
 800106a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800106c:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <MX_SPI1_Init+0x74>)
 800106e:	2200      	movs	r2, #0
 8001070:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001072:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <MX_SPI1_Init+0x74>)
 8001074:	2200      	movs	r2, #0
 8001076:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <MX_SPI1_Init+0x74>)
 800107a:	2280      	movs	r2, #128	; 0x80
 800107c:	0092      	lsls	r2, r2, #2
 800107e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <MX_SPI1_Init+0x74>)
 8001082:	2208      	movs	r2, #8
 8001084:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <MX_SPI1_Init+0x74>)
 8001088:	2200      	movs	r2, #0
 800108a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <MX_SPI1_Init+0x74>)
 800108e:	2200      	movs	r2, #0
 8001090:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <MX_SPI1_Init+0x74>)
 8001094:	2200      	movs	r2, #0
 8001096:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001098:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <MX_SPI1_Init+0x74>)
 800109a:	2207      	movs	r2, #7
 800109c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800109e:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <MX_SPI1_Init+0x74>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <MX_SPI1_Init+0x74>)
 80010a6:	2208      	movs	r2, #8
 80010a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010aa:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <MX_SPI1_Init+0x74>)
 80010ac:	0018      	movs	r0, r3
 80010ae:	f001 fb5f 	bl	8002770 <HAL_SPI_Init>
 80010b2:	1e03      	subs	r3, r0, #0
 80010b4:	d001      	beq.n	80010ba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80010b6:	f7ff ffc3 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000344 	.word	0x20000344
 80010c4:	40013000 	.word	0x40013000

080010c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b08b      	sub	sp, #44	; 0x2c
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	2414      	movs	r4, #20
 80010d2:	193b      	adds	r3, r7, r4
 80010d4:	0018      	movs	r0, r3
 80010d6:	2314      	movs	r3, #20
 80010d8:	001a      	movs	r2, r3
 80010da:	2100      	movs	r1, #0
 80010dc:	f002 fa6d 	bl	80035ba <memset>
  if(spiHandle->Instance==SPI1)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a1c      	ldr	r2, [pc, #112]	; (8001158 <HAL_SPI_MspInit+0x90>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d132      	bne.n	8001150 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010ea:	4b1c      	ldr	r3, [pc, #112]	; (800115c <HAL_SPI_MspInit+0x94>)
 80010ec:	699a      	ldr	r2, [r3, #24]
 80010ee:	4b1b      	ldr	r3, [pc, #108]	; (800115c <HAL_SPI_MspInit+0x94>)
 80010f0:	2180      	movs	r1, #128	; 0x80
 80010f2:	0149      	lsls	r1, r1, #5
 80010f4:	430a      	orrs	r2, r1
 80010f6:	619a      	str	r2, [r3, #24]
 80010f8:	4b18      	ldr	r3, [pc, #96]	; (800115c <HAL_SPI_MspInit+0x94>)
 80010fa:	699a      	ldr	r2, [r3, #24]
 80010fc:	2380      	movs	r3, #128	; 0x80
 80010fe:	015b      	lsls	r3, r3, #5
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <HAL_SPI_MspInit+0x94>)
 8001108:	695a      	ldr	r2, [r3, #20]
 800110a:	4b14      	ldr	r3, [pc, #80]	; (800115c <HAL_SPI_MspInit+0x94>)
 800110c:	2180      	movs	r1, #128	; 0x80
 800110e:	0289      	lsls	r1, r1, #10
 8001110:	430a      	orrs	r2, r1
 8001112:	615a      	str	r2, [r3, #20]
 8001114:	4b11      	ldr	r3, [pc, #68]	; (800115c <HAL_SPI_MspInit+0x94>)
 8001116:	695a      	ldr	r2, [r3, #20]
 8001118:	2380      	movs	r3, #128	; 0x80
 800111a:	029b      	lsls	r3, r3, #10
 800111c:	4013      	ands	r3, r2
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001122:	0021      	movs	r1, r4
 8001124:	187b      	adds	r3, r7, r1
 8001126:	22e0      	movs	r2, #224	; 0xe0
 8001128:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	187b      	adds	r3, r7, r1
 800112c:	2202      	movs	r2, #2
 800112e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	187b      	adds	r3, r7, r1
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001136:	187b      	adds	r3, r7, r1
 8001138:	2203      	movs	r2, #3
 800113a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800113c:	187b      	adds	r3, r7, r1
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	187a      	adds	r2, r7, r1
 8001144:	2390      	movs	r3, #144	; 0x90
 8001146:	05db      	lsls	r3, r3, #23
 8001148:	0011      	movs	r1, r2
 800114a:	0018      	movs	r0, r3
 800114c:	f000 fb54 	bl	80017f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001150:	46c0      	nop			; (mov r8, r8)
 8001152:	46bd      	mov	sp, r7
 8001154:	b00b      	add	sp, #44	; 0x2c
 8001156:	bd90      	pop	{r4, r7, pc}
 8001158:	40013000 	.word	0x40013000
 800115c:	40021000 	.word	0x40021000

08001160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001166:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <HAL_MspInit+0x44>)
 8001168:	699a      	ldr	r2, [r3, #24]
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <HAL_MspInit+0x44>)
 800116c:	2101      	movs	r1, #1
 800116e:	430a      	orrs	r2, r1
 8001170:	619a      	str	r2, [r3, #24]
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <HAL_MspInit+0x44>)
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	2201      	movs	r2, #1
 8001178:	4013      	ands	r3, r2
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <HAL_MspInit+0x44>)
 8001180:	69da      	ldr	r2, [r3, #28]
 8001182:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <HAL_MspInit+0x44>)
 8001184:	2180      	movs	r1, #128	; 0x80
 8001186:	0549      	lsls	r1, r1, #21
 8001188:	430a      	orrs	r2, r1
 800118a:	61da      	str	r2, [r3, #28]
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <HAL_MspInit+0x44>)
 800118e:	69da      	ldr	r2, [r3, #28]
 8001190:	2380      	movs	r3, #128	; 0x80
 8001192:	055b      	lsls	r3, r3, #21
 8001194:	4013      	ands	r3, r2
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	46bd      	mov	sp, r7
 800119e:	b002      	add	sp, #8
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	40021000 	.word	0x40021000

080011a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80011ac:	f001 f9c8 	bl	8002540 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <NMI_Handler+0x8>

080011b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b6:	e7fe      	b.n	80011b6 <HardFault_Handler+0x4>

080011b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80011bc:	46c0      	nop			; (mov r8, r8)
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d0:	f000 fa00 	bl	80015d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d4:	46c0      	nop			; (mov r8, r8)
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b086      	sub	sp, #24
 80011de:	af00      	add	r7, sp, #0
 80011e0:	60f8      	str	r0, [r7, #12]
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	e00a      	b.n	8001202 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011ec:	e000      	b.n	80011f0 <_read+0x16>
 80011ee:	bf00      	nop
 80011f0:	0001      	movs	r1, r0
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	1c5a      	adds	r2, r3, #1
 80011f6:	60ba      	str	r2, [r7, #8]
 80011f8:	b2ca      	uxtb	r2, r1
 80011fa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	3301      	adds	r3, #1
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	429a      	cmp	r2, r3
 8001208:	dbf0      	blt.n	80011ec <_read+0x12>
	}

return len;
 800120a:	687b      	ldr	r3, [r7, #4]
}
 800120c:	0018      	movs	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	b006      	add	sp, #24
 8001212:	bd80      	pop	{r7, pc}

08001214 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	e009      	b.n	800123a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	1c5a      	adds	r2, r3, #1
 800122a:	60ba      	str	r2, [r7, #8]
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	0018      	movs	r0, r3
 8001230:	f7ff feec 	bl	800100c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	3301      	adds	r3, #1
 8001238:	617b      	str	r3, [r7, #20]
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	429a      	cmp	r2, r3
 8001240:	dbf1      	blt.n	8001226 <_write+0x12>
	}
	return len;
 8001242:	687b      	ldr	r3, [r7, #4]
}
 8001244:	0018      	movs	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	b006      	add	sp, #24
 800124a:	bd80      	pop	{r7, pc}

0800124c <_close>:

int _close(int file)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	return -1;
 8001254:	2301      	movs	r3, #1
 8001256:	425b      	negs	r3, r3
}
 8001258:	0018      	movs	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	b002      	add	sp, #8
 800125e:	bd80      	pop	{r7, pc}

08001260 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	2280      	movs	r2, #128	; 0x80
 800126e:	0192      	lsls	r2, r2, #6
 8001270:	605a      	str	r2, [r3, #4]
	return 0;
 8001272:	2300      	movs	r3, #0
}
 8001274:	0018      	movs	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	b002      	add	sp, #8
 800127a:	bd80      	pop	{r7, pc}

0800127c <_isatty>:

int _isatty(int file)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	return 1;
 8001284:	2301      	movs	r3, #1
}
 8001286:	0018      	movs	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	b002      	add	sp, #8
 800128c:	bd80      	pop	{r7, pc}

0800128e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b084      	sub	sp, #16
 8001292:	af00      	add	r7, sp, #0
 8001294:	60f8      	str	r0, [r7, #12]
 8001296:	60b9      	str	r1, [r7, #8]
 8001298:	607a      	str	r2, [r7, #4]
	return 0;
 800129a:	2300      	movs	r3, #0
}
 800129c:	0018      	movs	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	b004      	add	sp, #16
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012ac:	4a14      	ldr	r2, [pc, #80]	; (8001300 <_sbrk+0x5c>)
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <_sbrk+0x60>)
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b8:	4b13      	ldr	r3, [pc, #76]	; (8001308 <_sbrk+0x64>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d102      	bne.n	80012c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <_sbrk+0x64>)
 80012c2:	4a12      	ldr	r2, [pc, #72]	; (800130c <_sbrk+0x68>)
 80012c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <_sbrk+0x64>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	18d3      	adds	r3, r2, r3
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d207      	bcs.n	80012e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012d4:	f002 f930 	bl	8003538 <__errno>
 80012d8:	0003      	movs	r3, r0
 80012da:	220c      	movs	r2, #12
 80012dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012de:	2301      	movs	r3, #1
 80012e0:	425b      	negs	r3, r3
 80012e2:	e009      	b.n	80012f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <_sbrk+0x64>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ea:	4b07      	ldr	r3, [pc, #28]	; (8001308 <_sbrk+0x64>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	18d2      	adds	r2, r2, r3
 80012f2:	4b05      	ldr	r3, [pc, #20]	; (8001308 <_sbrk+0x64>)
 80012f4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80012f6:	68fb      	ldr	r3, [r7, #12]
}
 80012f8:	0018      	movs	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	b006      	add	sp, #24
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20004000 	.word	0x20004000
 8001304:	00000400 	.word	0x00000400
 8001308:	200003a8 	.word	0x200003a8
 800130c:	200004c8 	.word	0x200004c8

08001310 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001314:	46c0      	nop			; (mov r8, r8)
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart4;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001320:	4b14      	ldr	r3, [pc, #80]	; (8001374 <MX_USART2_UART_Init+0x58>)
 8001322:	4a15      	ldr	r2, [pc, #84]	; (8001378 <MX_USART2_UART_Init+0x5c>)
 8001324:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001326:	4b13      	ldr	r3, [pc, #76]	; (8001374 <MX_USART2_UART_Init+0x58>)
 8001328:	22e1      	movs	r2, #225	; 0xe1
 800132a:	0252      	lsls	r2, r2, #9
 800132c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <MX_USART2_UART_Init+0x58>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <MX_USART2_UART_Init+0x58>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <MX_USART2_UART_Init+0x58>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <MX_USART2_UART_Init+0x58>)
 8001342:	220c      	movs	r2, #12
 8001344:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001346:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <MX_USART2_UART_Init+0x58>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800134c:	4b09      	ldr	r3, [pc, #36]	; (8001374 <MX_USART2_UART_Init+0x58>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001352:	4b08      	ldr	r3, [pc, #32]	; (8001374 <MX_USART2_UART_Init+0x58>)
 8001354:	2200      	movs	r2, #0
 8001356:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <MX_USART2_UART_Init+0x58>)
 800135a:	2200      	movs	r2, #0
 800135c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800135e:	4b05      	ldr	r3, [pc, #20]	; (8001374 <MX_USART2_UART_Init+0x58>)
 8001360:	0018      	movs	r0, r3
 8001362:	f001 fabd 	bl	80028e0 <HAL_UART_Init>
 8001366:	1e03      	subs	r3, r0, #0
 8001368:	d001      	beq.n	800136e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800136a:	f7ff fe69 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	200003ac 	.word	0x200003ac
 8001378:	40004400 	.word	0x40004400

0800137c <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <MX_USART4_UART_Init+0x58>)
 8001382:	4a15      	ldr	r2, [pc, #84]	; (80013d8 <MX_USART4_UART_Init+0x5c>)
 8001384:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <MX_USART4_UART_Init+0x58>)
 8001388:	22e1      	movs	r2, #225	; 0xe1
 800138a:	0252      	lsls	r2, r2, #9
 800138c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800138e:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <MX_USART4_UART_Init+0x58>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <MX_USART4_UART_Init+0x58>)
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800139a:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <MX_USART4_UART_Init+0x58>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <MX_USART4_UART_Init+0x58>)
 80013a2:	220c      	movs	r2, #12
 80013a4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <MX_USART4_UART_Init+0x58>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ac:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <MX_USART4_UART_Init+0x58>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <MX_USART4_UART_Init+0x58>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <MX_USART4_UART_Init+0x58>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80013be:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <MX_USART4_UART_Init+0x58>)
 80013c0:	0018      	movs	r0, r3
 80013c2:	f001 fa8d 	bl	80028e0 <HAL_UART_Init>
 80013c6:	1e03      	subs	r3, r0, #0
 80013c8:	d001      	beq.n	80013ce <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 80013ca:	f7ff fe39 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000430 	.word	0x20000430
 80013d8:	40004c00 	.word	0x40004c00

080013dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013dc:	b590      	push	{r4, r7, lr}
 80013de:	b08d      	sub	sp, #52	; 0x34
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	241c      	movs	r4, #28
 80013e6:	193b      	adds	r3, r7, r4
 80013e8:	0018      	movs	r0, r3
 80013ea:	2314      	movs	r3, #20
 80013ec:	001a      	movs	r2, r3
 80013ee:	2100      	movs	r1, #0
 80013f0:	f002 f8e3 	bl	80035ba <memset>
  if(uartHandle->Instance==USART2)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a39      	ldr	r2, [pc, #228]	; (80014e0 <HAL_UART_MspInit+0x104>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d133      	bne.n	8001466 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013fe:	4b39      	ldr	r3, [pc, #228]	; (80014e4 <HAL_UART_MspInit+0x108>)
 8001400:	69da      	ldr	r2, [r3, #28]
 8001402:	4b38      	ldr	r3, [pc, #224]	; (80014e4 <HAL_UART_MspInit+0x108>)
 8001404:	2180      	movs	r1, #128	; 0x80
 8001406:	0289      	lsls	r1, r1, #10
 8001408:	430a      	orrs	r2, r1
 800140a:	61da      	str	r2, [r3, #28]
 800140c:	4b35      	ldr	r3, [pc, #212]	; (80014e4 <HAL_UART_MspInit+0x108>)
 800140e:	69da      	ldr	r2, [r3, #28]
 8001410:	2380      	movs	r3, #128	; 0x80
 8001412:	029b      	lsls	r3, r3, #10
 8001414:	4013      	ands	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
 8001418:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141a:	4b32      	ldr	r3, [pc, #200]	; (80014e4 <HAL_UART_MspInit+0x108>)
 800141c:	695a      	ldr	r2, [r3, #20]
 800141e:	4b31      	ldr	r3, [pc, #196]	; (80014e4 <HAL_UART_MspInit+0x108>)
 8001420:	2180      	movs	r1, #128	; 0x80
 8001422:	0289      	lsls	r1, r1, #10
 8001424:	430a      	orrs	r2, r1
 8001426:	615a      	str	r2, [r3, #20]
 8001428:	4b2e      	ldr	r3, [pc, #184]	; (80014e4 <HAL_UART_MspInit+0x108>)
 800142a:	695a      	ldr	r2, [r3, #20]
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	029b      	lsls	r3, r3, #10
 8001430:	4013      	ands	r3, r2
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001436:	0021      	movs	r1, r4
 8001438:	187b      	adds	r3, r7, r1
 800143a:	220c      	movs	r2, #12
 800143c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	187b      	adds	r3, r7, r1
 8001440:	2202      	movs	r2, #2
 8001442:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	187b      	adds	r3, r7, r1
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	187b      	adds	r3, r7, r1
 800144c:	2200      	movs	r2, #0
 800144e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001450:	187b      	adds	r3, r7, r1
 8001452:	2201      	movs	r2, #1
 8001454:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001456:	187a      	adds	r2, r7, r1
 8001458:	2390      	movs	r3, #144	; 0x90
 800145a:	05db      	lsls	r3, r3, #23
 800145c:	0011      	movs	r1, r2
 800145e:	0018      	movs	r0, r3
 8001460:	f000 f9ca 	bl	80017f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8001464:	e037      	b.n	80014d6 <HAL_UART_MspInit+0xfa>
  else if(uartHandle->Instance==USART4)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a1f      	ldr	r2, [pc, #124]	; (80014e8 <HAL_UART_MspInit+0x10c>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d132      	bne.n	80014d6 <HAL_UART_MspInit+0xfa>
    __HAL_RCC_USART4_CLK_ENABLE();
 8001470:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <HAL_UART_MspInit+0x108>)
 8001472:	69da      	ldr	r2, [r3, #28]
 8001474:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <HAL_UART_MspInit+0x108>)
 8001476:	2180      	movs	r1, #128	; 0x80
 8001478:	0309      	lsls	r1, r1, #12
 800147a:	430a      	orrs	r2, r1
 800147c:	61da      	str	r2, [r3, #28]
 800147e:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <HAL_UART_MspInit+0x108>)
 8001480:	69da      	ldr	r2, [r3, #28]
 8001482:	2380      	movs	r3, #128	; 0x80
 8001484:	031b      	lsls	r3, r3, #12
 8001486:	4013      	ands	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800148c:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <HAL_UART_MspInit+0x108>)
 800148e:	695a      	ldr	r2, [r3, #20]
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <HAL_UART_MspInit+0x108>)
 8001492:	2180      	movs	r1, #128	; 0x80
 8001494:	0309      	lsls	r1, r1, #12
 8001496:	430a      	orrs	r2, r1
 8001498:	615a      	str	r2, [r3, #20]
 800149a:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <HAL_UART_MspInit+0x108>)
 800149c:	695a      	ldr	r2, [r3, #20]
 800149e:	2380      	movs	r3, #128	; 0x80
 80014a0:	031b      	lsls	r3, r3, #12
 80014a2:	4013      	ands	r3, r2
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80014a8:	211c      	movs	r1, #28
 80014aa:	187b      	adds	r3, r7, r1
 80014ac:	22c0      	movs	r2, #192	; 0xc0
 80014ae:	0112      	lsls	r2, r2, #4
 80014b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b2:	187b      	adds	r3, r7, r1
 80014b4:	2202      	movs	r2, #2
 80014b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	187b      	adds	r3, r7, r1
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014be:	187b      	adds	r3, r7, r1
 80014c0:	2203      	movs	r2, #3
 80014c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART4;
 80014c4:	187b      	adds	r3, r7, r1
 80014c6:	2200      	movs	r2, #0
 80014c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ca:	187b      	adds	r3, r7, r1
 80014cc:	4a07      	ldr	r2, [pc, #28]	; (80014ec <HAL_UART_MspInit+0x110>)
 80014ce:	0019      	movs	r1, r3
 80014d0:	0010      	movs	r0, r2
 80014d2:	f000 f991 	bl	80017f8 <HAL_GPIO_Init>
}
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	46bd      	mov	sp, r7
 80014da:	b00d      	add	sp, #52	; 0x34
 80014dc:	bd90      	pop	{r4, r7, pc}
 80014de:	46c0      	nop			; (mov r8, r8)
 80014e0:	40004400 	.word	0x40004400
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40004c00 	.word	0x40004c00
 80014ec:	48000800 	.word	0x48000800

080014f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014f0:	480d      	ldr	r0, [pc, #52]	; (8001528 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014f2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014f4:	480d      	ldr	r0, [pc, #52]	; (800152c <LoopForever+0x6>)
  ldr r1, =_edata
 80014f6:	490e      	ldr	r1, [pc, #56]	; (8001530 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014f8:	4a0e      	ldr	r2, [pc, #56]	; (8001534 <LoopForever+0xe>)
  movs r3, #0
 80014fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014fc:	e002      	b.n	8001504 <LoopCopyDataInit>

080014fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001502:	3304      	adds	r3, #4

08001504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001508:	d3f9      	bcc.n	80014fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150a:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <LoopForever+0x12>)
  ldr r4, =_ebss
 800150c:	4c0b      	ldr	r4, [pc, #44]	; (800153c <LoopForever+0x16>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001510:	e001      	b.n	8001516 <LoopFillZerobss>

08001512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001514:	3204      	adds	r2, #4

08001516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001518:	d3fb      	bcc.n	8001512 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800151a:	f7ff fef9 	bl	8001310 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800151e:	f002 f811 	bl	8003544 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001522:	f7ff fcc1 	bl	8000ea8 <main>

08001526 <LoopForever>:

LoopForever:
    b LoopForever
 8001526:	e7fe      	b.n	8001526 <LoopForever>
  ldr   r0, =_estack
 8001528:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800152c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001530:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001534:	08004bf0 	.word	0x08004bf0
  ldr r2, =_sbss
 8001538:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800153c:	200004c8 	.word	0x200004c8

08001540 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001540:	e7fe      	b.n	8001540 <ADC1_COMP_IRQHandler>
	...

08001544 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001548:	4b07      	ldr	r3, [pc, #28]	; (8001568 <HAL_Init+0x24>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_Init+0x24>)
 800154e:	2110      	movs	r1, #16
 8001550:	430a      	orrs	r2, r1
 8001552:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001554:	2000      	movs	r0, #0
 8001556:	f000 f809 	bl	800156c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800155a:	f7ff fe01 	bl	8001160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800155e:	2300      	movs	r3, #0
}
 8001560:	0018      	movs	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	40022000 	.word	0x40022000

0800156c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800156c:	b590      	push	{r4, r7, lr}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001574:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <HAL_InitTick+0x5c>)
 8001576:	681c      	ldr	r4, [r3, #0]
 8001578:	4b14      	ldr	r3, [pc, #80]	; (80015cc <HAL_InitTick+0x60>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	0019      	movs	r1, r3
 800157e:	23fa      	movs	r3, #250	; 0xfa
 8001580:	0098      	lsls	r0, r3, #2
 8001582:	f7fe fdcb 	bl	800011c <__udivsi3>
 8001586:	0003      	movs	r3, r0
 8001588:	0019      	movs	r1, r3
 800158a:	0020      	movs	r0, r4
 800158c:	f7fe fdc6 	bl	800011c <__udivsi3>
 8001590:	0003      	movs	r3, r0
 8001592:	0018      	movs	r0, r3
 8001594:	f000 f8e1 	bl	800175a <HAL_SYSTICK_Config>
 8001598:	1e03      	subs	r3, r0, #0
 800159a:	d001      	beq.n	80015a0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e00f      	b.n	80015c0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b03      	cmp	r3, #3
 80015a4:	d80b      	bhi.n	80015be <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	2301      	movs	r3, #1
 80015aa:	425b      	negs	r3, r3
 80015ac:	2200      	movs	r2, #0
 80015ae:	0018      	movs	r0, r3
 80015b0:	f000 f8be 	bl	8001730 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_InitTick+0x64>)
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	e000      	b.n	80015c0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
}
 80015c0:	0018      	movs	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	b003      	add	sp, #12
 80015c6:	bd90      	pop	{r4, r7, pc}
 80015c8:	2000000c 	.word	0x2000000c
 80015cc:	20000014 	.word	0x20000014
 80015d0:	20000010 	.word	0x20000010

080015d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <HAL_IncTick+0x1c>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	001a      	movs	r2, r3
 80015de:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <HAL_IncTick+0x20>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	18d2      	adds	r2, r2, r3
 80015e4:	4b03      	ldr	r3, [pc, #12]	; (80015f4 <HAL_IncTick+0x20>)
 80015e6:	601a      	str	r2, [r3, #0]
}
 80015e8:	46c0      	nop			; (mov r8, r8)
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	20000014 	.word	0x20000014
 80015f4:	200004b4 	.word	0x200004b4

080015f8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  return uwTick;
 80015fc:	4b02      	ldr	r3, [pc, #8]	; (8001608 <HAL_GetTick+0x10>)
 80015fe:	681b      	ldr	r3, [r3, #0]
}
 8001600:	0018      	movs	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	200004b4 	.word	0x200004b4

0800160c <__NVIC_SetPriority>:
{
 800160c:	b590      	push	{r4, r7, lr}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	0002      	movs	r2, r0
 8001614:	6039      	str	r1, [r7, #0]
 8001616:	1dfb      	adds	r3, r7, #7
 8001618:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800161a:	1dfb      	adds	r3, r7, #7
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b7f      	cmp	r3, #127	; 0x7f
 8001620:	d828      	bhi.n	8001674 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001622:	4a2f      	ldr	r2, [pc, #188]	; (80016e0 <__NVIC_SetPriority+0xd4>)
 8001624:	1dfb      	adds	r3, r7, #7
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	b25b      	sxtb	r3, r3
 800162a:	089b      	lsrs	r3, r3, #2
 800162c:	33c0      	adds	r3, #192	; 0xc0
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	589b      	ldr	r3, [r3, r2]
 8001632:	1dfa      	adds	r2, r7, #7
 8001634:	7812      	ldrb	r2, [r2, #0]
 8001636:	0011      	movs	r1, r2
 8001638:	2203      	movs	r2, #3
 800163a:	400a      	ands	r2, r1
 800163c:	00d2      	lsls	r2, r2, #3
 800163e:	21ff      	movs	r1, #255	; 0xff
 8001640:	4091      	lsls	r1, r2
 8001642:	000a      	movs	r2, r1
 8001644:	43d2      	mvns	r2, r2
 8001646:	401a      	ands	r2, r3
 8001648:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	019b      	lsls	r3, r3, #6
 800164e:	22ff      	movs	r2, #255	; 0xff
 8001650:	401a      	ands	r2, r3
 8001652:	1dfb      	adds	r3, r7, #7
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	0018      	movs	r0, r3
 8001658:	2303      	movs	r3, #3
 800165a:	4003      	ands	r3, r0
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001660:	481f      	ldr	r0, [pc, #124]	; (80016e0 <__NVIC_SetPriority+0xd4>)
 8001662:	1dfb      	adds	r3, r7, #7
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	b25b      	sxtb	r3, r3
 8001668:	089b      	lsrs	r3, r3, #2
 800166a:	430a      	orrs	r2, r1
 800166c:	33c0      	adds	r3, #192	; 0xc0
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	501a      	str	r2, [r3, r0]
}
 8001672:	e031      	b.n	80016d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001674:	4a1b      	ldr	r2, [pc, #108]	; (80016e4 <__NVIC_SetPriority+0xd8>)
 8001676:	1dfb      	adds	r3, r7, #7
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	0019      	movs	r1, r3
 800167c:	230f      	movs	r3, #15
 800167e:	400b      	ands	r3, r1
 8001680:	3b08      	subs	r3, #8
 8001682:	089b      	lsrs	r3, r3, #2
 8001684:	3306      	adds	r3, #6
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	18d3      	adds	r3, r2, r3
 800168a:	3304      	adds	r3, #4
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	1dfa      	adds	r2, r7, #7
 8001690:	7812      	ldrb	r2, [r2, #0]
 8001692:	0011      	movs	r1, r2
 8001694:	2203      	movs	r2, #3
 8001696:	400a      	ands	r2, r1
 8001698:	00d2      	lsls	r2, r2, #3
 800169a:	21ff      	movs	r1, #255	; 0xff
 800169c:	4091      	lsls	r1, r2
 800169e:	000a      	movs	r2, r1
 80016a0:	43d2      	mvns	r2, r2
 80016a2:	401a      	ands	r2, r3
 80016a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	019b      	lsls	r3, r3, #6
 80016aa:	22ff      	movs	r2, #255	; 0xff
 80016ac:	401a      	ands	r2, r3
 80016ae:	1dfb      	adds	r3, r7, #7
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	0018      	movs	r0, r3
 80016b4:	2303      	movs	r3, #3
 80016b6:	4003      	ands	r3, r0
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016bc:	4809      	ldr	r0, [pc, #36]	; (80016e4 <__NVIC_SetPriority+0xd8>)
 80016be:	1dfb      	adds	r3, r7, #7
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	001c      	movs	r4, r3
 80016c4:	230f      	movs	r3, #15
 80016c6:	4023      	ands	r3, r4
 80016c8:	3b08      	subs	r3, #8
 80016ca:	089b      	lsrs	r3, r3, #2
 80016cc:	430a      	orrs	r2, r1
 80016ce:	3306      	adds	r3, #6
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	18c3      	adds	r3, r0, r3
 80016d4:	3304      	adds	r3, #4
 80016d6:	601a      	str	r2, [r3, #0]
}
 80016d8:	46c0      	nop			; (mov r8, r8)
 80016da:	46bd      	mov	sp, r7
 80016dc:	b003      	add	sp, #12
 80016de:	bd90      	pop	{r4, r7, pc}
 80016e0:	e000e100 	.word	0xe000e100
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	1e5a      	subs	r2, r3, #1
 80016f4:	2380      	movs	r3, #128	; 0x80
 80016f6:	045b      	lsls	r3, r3, #17
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d301      	bcc.n	8001700 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016fc:	2301      	movs	r3, #1
 80016fe:	e010      	b.n	8001722 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001700:	4b0a      	ldr	r3, [pc, #40]	; (800172c <SysTick_Config+0x44>)
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	3a01      	subs	r2, #1
 8001706:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001708:	2301      	movs	r3, #1
 800170a:	425b      	negs	r3, r3
 800170c:	2103      	movs	r1, #3
 800170e:	0018      	movs	r0, r3
 8001710:	f7ff ff7c 	bl	800160c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001714:	4b05      	ldr	r3, [pc, #20]	; (800172c <SysTick_Config+0x44>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171a:	4b04      	ldr	r3, [pc, #16]	; (800172c <SysTick_Config+0x44>)
 800171c:	2207      	movs	r2, #7
 800171e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001720:	2300      	movs	r3, #0
}
 8001722:	0018      	movs	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	b002      	add	sp, #8
 8001728:	bd80      	pop	{r7, pc}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	e000e010 	.word	0xe000e010

08001730 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	607a      	str	r2, [r7, #4]
 800173a:	210f      	movs	r1, #15
 800173c:	187b      	adds	r3, r7, r1
 800173e:	1c02      	adds	r2, r0, #0
 8001740:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001742:	68ba      	ldr	r2, [r7, #8]
 8001744:	187b      	adds	r3, r7, r1
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	b25b      	sxtb	r3, r3
 800174a:	0011      	movs	r1, r2
 800174c:	0018      	movs	r0, r3
 800174e:	f7ff ff5d 	bl	800160c <__NVIC_SetPriority>
}
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	46bd      	mov	sp, r7
 8001756:	b004      	add	sp, #16
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	0018      	movs	r0, r3
 8001766:	f7ff ffbf 	bl	80016e8 <SysTick_Config>
 800176a:	0003      	movs	r3, r0
}
 800176c:	0018      	movs	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	b002      	add	sp, #8
 8001772:	bd80      	pop	{r7, pc}

08001774 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2221      	movs	r2, #33	; 0x21
 8001780:	5c9b      	ldrb	r3, [r3, r2]
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d008      	beq.n	800179a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2204      	movs	r2, #4
 800178c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2220      	movs	r2, #32
 8001792:	2100      	movs	r1, #0
 8001794:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e020      	b.n	80017dc <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	210e      	movs	r1, #14
 80017a6:	438a      	bics	r2, r1
 80017a8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2101      	movs	r1, #1
 80017b6:	438a      	bics	r2, r1
 80017b8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c2:	2101      	movs	r1, #1
 80017c4:	4091      	lsls	r1, r2
 80017c6:	000a      	movs	r2, r1
 80017c8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2221      	movs	r2, #33	; 0x21
 80017ce:	2101      	movs	r1, #1
 80017d0:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2220      	movs	r2, #32
 80017d6:	2100      	movs	r1, #0
 80017d8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	0018      	movs	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	b002      	add	sp, #8
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80017f0:	0018      	movs	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	b002      	add	sp, #8
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001806:	e155      	b.n	8001ab4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2101      	movs	r1, #1
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	4091      	lsls	r1, r2
 8001812:	000a      	movs	r2, r1
 8001814:	4013      	ands	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d100      	bne.n	8001820 <HAL_GPIO_Init+0x28>
 800181e:	e146      	b.n	8001aae <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2203      	movs	r2, #3
 8001826:	4013      	ands	r3, r2
 8001828:	2b01      	cmp	r3, #1
 800182a:	d005      	beq.n	8001838 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2203      	movs	r2, #3
 8001832:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001834:	2b02      	cmp	r3, #2
 8001836:	d130      	bne.n	800189a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	2203      	movs	r2, #3
 8001844:	409a      	lsls	r2, r3
 8001846:	0013      	movs	r3, r2
 8001848:	43da      	mvns	r2, r3
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	68da      	ldr	r2, [r3, #12]
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	409a      	lsls	r2, r3
 800185a:	0013      	movs	r3, r2
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4313      	orrs	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800186e:	2201      	movs	r2, #1
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	409a      	lsls	r2, r3
 8001874:	0013      	movs	r3, r2
 8001876:	43da      	mvns	r2, r3
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	4013      	ands	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	091b      	lsrs	r3, r3, #4
 8001884:	2201      	movs	r2, #1
 8001886:	401a      	ands	r2, r3
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	409a      	lsls	r2, r3
 800188c:	0013      	movs	r3, r2
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2203      	movs	r2, #3
 80018a0:	4013      	ands	r3, r2
 80018a2:	2b03      	cmp	r3, #3
 80018a4:	d017      	beq.n	80018d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	2203      	movs	r2, #3
 80018b2:	409a      	lsls	r2, r3
 80018b4:	0013      	movs	r3, r2
 80018b6:	43da      	mvns	r2, r3
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	4013      	ands	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	409a      	lsls	r2, r3
 80018c8:	0013      	movs	r3, r2
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2203      	movs	r2, #3
 80018dc:	4013      	ands	r3, r2
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d123      	bne.n	800192a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	08da      	lsrs	r2, r3, #3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3208      	adds	r2, #8
 80018ea:	0092      	lsls	r2, r2, #2
 80018ec:	58d3      	ldr	r3, [r2, r3]
 80018ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	2207      	movs	r2, #7
 80018f4:	4013      	ands	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	220f      	movs	r2, #15
 80018fa:	409a      	lsls	r2, r3
 80018fc:	0013      	movs	r3, r2
 80018fe:	43da      	mvns	r2, r3
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4013      	ands	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	691a      	ldr	r2, [r3, #16]
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	2107      	movs	r1, #7
 800190e:	400b      	ands	r3, r1
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	409a      	lsls	r2, r3
 8001914:	0013      	movs	r3, r2
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	08da      	lsrs	r2, r3, #3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3208      	adds	r2, #8
 8001924:	0092      	lsls	r2, r2, #2
 8001926:	6939      	ldr	r1, [r7, #16]
 8001928:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	2203      	movs	r2, #3
 8001936:	409a      	lsls	r2, r3
 8001938:	0013      	movs	r3, r2
 800193a:	43da      	mvns	r2, r3
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4013      	ands	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2203      	movs	r2, #3
 8001948:	401a      	ands	r2, r3
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	409a      	lsls	r2, r3
 8001950:	0013      	movs	r3, r2
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	23c0      	movs	r3, #192	; 0xc0
 8001964:	029b      	lsls	r3, r3, #10
 8001966:	4013      	ands	r3, r2
 8001968:	d100      	bne.n	800196c <HAL_GPIO_Init+0x174>
 800196a:	e0a0      	b.n	8001aae <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196c:	4b57      	ldr	r3, [pc, #348]	; (8001acc <HAL_GPIO_Init+0x2d4>)
 800196e:	699a      	ldr	r2, [r3, #24]
 8001970:	4b56      	ldr	r3, [pc, #344]	; (8001acc <HAL_GPIO_Init+0x2d4>)
 8001972:	2101      	movs	r1, #1
 8001974:	430a      	orrs	r2, r1
 8001976:	619a      	str	r2, [r3, #24]
 8001978:	4b54      	ldr	r3, [pc, #336]	; (8001acc <HAL_GPIO_Init+0x2d4>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	2201      	movs	r2, #1
 800197e:	4013      	ands	r3, r2
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001984:	4a52      	ldr	r2, [pc, #328]	; (8001ad0 <HAL_GPIO_Init+0x2d8>)
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	089b      	lsrs	r3, r3, #2
 800198a:	3302      	adds	r3, #2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	589b      	ldr	r3, [r3, r2]
 8001990:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	2203      	movs	r2, #3
 8001996:	4013      	ands	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	220f      	movs	r2, #15
 800199c:	409a      	lsls	r2, r3
 800199e:	0013      	movs	r3, r2
 80019a0:	43da      	mvns	r2, r3
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	4013      	ands	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	2390      	movs	r3, #144	; 0x90
 80019ac:	05db      	lsls	r3, r3, #23
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d019      	beq.n	80019e6 <HAL_GPIO_Init+0x1ee>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a47      	ldr	r2, [pc, #284]	; (8001ad4 <HAL_GPIO_Init+0x2dc>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d013      	beq.n	80019e2 <HAL_GPIO_Init+0x1ea>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a46      	ldr	r2, [pc, #280]	; (8001ad8 <HAL_GPIO_Init+0x2e0>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d00d      	beq.n	80019de <HAL_GPIO_Init+0x1e6>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a45      	ldr	r2, [pc, #276]	; (8001adc <HAL_GPIO_Init+0x2e4>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d007      	beq.n	80019da <HAL_GPIO_Init+0x1e2>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a44      	ldr	r2, [pc, #272]	; (8001ae0 <HAL_GPIO_Init+0x2e8>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d101      	bne.n	80019d6 <HAL_GPIO_Init+0x1de>
 80019d2:	2304      	movs	r3, #4
 80019d4:	e008      	b.n	80019e8 <HAL_GPIO_Init+0x1f0>
 80019d6:	2305      	movs	r3, #5
 80019d8:	e006      	b.n	80019e8 <HAL_GPIO_Init+0x1f0>
 80019da:	2303      	movs	r3, #3
 80019dc:	e004      	b.n	80019e8 <HAL_GPIO_Init+0x1f0>
 80019de:	2302      	movs	r3, #2
 80019e0:	e002      	b.n	80019e8 <HAL_GPIO_Init+0x1f0>
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <HAL_GPIO_Init+0x1f0>
 80019e6:	2300      	movs	r3, #0
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	2103      	movs	r1, #3
 80019ec:	400a      	ands	r2, r1
 80019ee:	0092      	lsls	r2, r2, #2
 80019f0:	4093      	lsls	r3, r2
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019f8:	4935      	ldr	r1, [pc, #212]	; (8001ad0 <HAL_GPIO_Init+0x2d8>)
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	089b      	lsrs	r3, r3, #2
 80019fe:	3302      	adds	r3, #2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a06:	4b37      	ldr	r3, [pc, #220]	; (8001ae4 <HAL_GPIO_Init+0x2ec>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	4013      	ands	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	2380      	movs	r3, #128	; 0x80
 8001a1c:	025b      	lsls	r3, r3, #9
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a2a:	4b2e      	ldr	r3, [pc, #184]	; (8001ae4 <HAL_GPIO_Init+0x2ec>)
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001a30:	4b2c      	ldr	r3, [pc, #176]	; (8001ae4 <HAL_GPIO_Init+0x2ec>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	43da      	mvns	r2, r3
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	029b      	lsls	r3, r3, #10
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d003      	beq.n	8001a54 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a54:	4b23      	ldr	r3, [pc, #140]	; (8001ae4 <HAL_GPIO_Init+0x2ec>)
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a5a:	4b22      	ldr	r3, [pc, #136]	; (8001ae4 <HAL_GPIO_Init+0x2ec>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	43da      	mvns	r2, r3
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	4013      	ands	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	035b      	lsls	r3, r3, #13
 8001a72:	4013      	ands	r3, r2
 8001a74:	d003      	beq.n	8001a7e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a7e:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <HAL_GPIO_Init+0x2ec>)
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001a84:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <HAL_GPIO_Init+0x2ec>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	43da      	mvns	r2, r3
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	039b      	lsls	r3, r3, #14
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d003      	beq.n	8001aa8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001aa8:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <HAL_GPIO_Init+0x2ec>)
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	40da      	lsrs	r2, r3
 8001abc:	1e13      	subs	r3, r2, #0
 8001abe:	d000      	beq.n	8001ac2 <HAL_GPIO_Init+0x2ca>
 8001ac0:	e6a2      	b.n	8001808 <HAL_GPIO_Init+0x10>
  } 
}
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	46c0      	nop			; (mov r8, r8)
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	b006      	add	sp, #24
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40010000 	.word	0x40010000
 8001ad4:	48000400 	.word	0x48000400
 8001ad8:	48000800 	.word	0x48000800
 8001adc:	48000c00 	.word	0x48000c00
 8001ae0:	48001000 	.word	0x48001000
 8001ae4:	40010400 	.word	0x40010400

08001ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	0008      	movs	r0, r1
 8001af2:	0011      	movs	r1, r2
 8001af4:	1cbb      	adds	r3, r7, #2
 8001af6:	1c02      	adds	r2, r0, #0
 8001af8:	801a      	strh	r2, [r3, #0]
 8001afa:	1c7b      	adds	r3, r7, #1
 8001afc:	1c0a      	adds	r2, r1, #0
 8001afe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b00:	1c7b      	adds	r3, r7, #1
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d004      	beq.n	8001b12 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b08:	1cbb      	adds	r3, r7, #2
 8001b0a:	881a      	ldrh	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b10:	e003      	b.n	8001b1a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b12:	1cbb      	adds	r3, r7, #2
 8001b14:	881a      	ldrh	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b1a:	46c0      	nop			; (mov r8, r8)
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	b002      	add	sp, #8
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b088      	sub	sp, #32
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d102      	bne.n	8001b38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	f000 fb76 	bl	8002224 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d100      	bne.n	8001b44 <HAL_RCC_OscConfig+0x20>
 8001b42:	e08e      	b.n	8001c62 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b44:	4bc5      	ldr	r3, [pc, #788]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	220c      	movs	r2, #12
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	2b04      	cmp	r3, #4
 8001b4e:	d00e      	beq.n	8001b6e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b50:	4bc2      	ldr	r3, [pc, #776]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	220c      	movs	r2, #12
 8001b56:	4013      	ands	r3, r2
 8001b58:	2b08      	cmp	r3, #8
 8001b5a:	d117      	bne.n	8001b8c <HAL_RCC_OscConfig+0x68>
 8001b5c:	4bbf      	ldr	r3, [pc, #764]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	23c0      	movs	r3, #192	; 0xc0
 8001b62:	025b      	lsls	r3, r3, #9
 8001b64:	401a      	ands	r2, r3
 8001b66:	2380      	movs	r3, #128	; 0x80
 8001b68:	025b      	lsls	r3, r3, #9
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d10e      	bne.n	8001b8c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b6e:	4bbb      	ldr	r3, [pc, #748]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	2380      	movs	r3, #128	; 0x80
 8001b74:	029b      	lsls	r3, r3, #10
 8001b76:	4013      	ands	r3, r2
 8001b78:	d100      	bne.n	8001b7c <HAL_RCC_OscConfig+0x58>
 8001b7a:	e071      	b.n	8001c60 <HAL_RCC_OscConfig+0x13c>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d000      	beq.n	8001b86 <HAL_RCC_OscConfig+0x62>
 8001b84:	e06c      	b.n	8001c60 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	f000 fb4c 	bl	8002224 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d107      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x80>
 8001b94:	4bb1      	ldr	r3, [pc, #708]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	4bb0      	ldr	r3, [pc, #704]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001b9a:	2180      	movs	r1, #128	; 0x80
 8001b9c:	0249      	lsls	r1, r1, #9
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	e02f      	b.n	8001c04 <HAL_RCC_OscConfig+0xe0>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10c      	bne.n	8001bc6 <HAL_RCC_OscConfig+0xa2>
 8001bac:	4bab      	ldr	r3, [pc, #684]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4baa      	ldr	r3, [pc, #680]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001bb2:	49ab      	ldr	r1, [pc, #684]	; (8001e60 <HAL_RCC_OscConfig+0x33c>)
 8001bb4:	400a      	ands	r2, r1
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	4ba8      	ldr	r3, [pc, #672]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4ba7      	ldr	r3, [pc, #668]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001bbe:	49a9      	ldr	r1, [pc, #676]	; (8001e64 <HAL_RCC_OscConfig+0x340>)
 8001bc0:	400a      	ands	r2, r1
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	e01e      	b.n	8001c04 <HAL_RCC_OscConfig+0xe0>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b05      	cmp	r3, #5
 8001bcc:	d10e      	bne.n	8001bec <HAL_RCC_OscConfig+0xc8>
 8001bce:	4ba3      	ldr	r3, [pc, #652]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	4ba2      	ldr	r3, [pc, #648]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001bd4:	2180      	movs	r1, #128	; 0x80
 8001bd6:	02c9      	lsls	r1, r1, #11
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	4b9f      	ldr	r3, [pc, #636]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4b9e      	ldr	r3, [pc, #632]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001be2:	2180      	movs	r1, #128	; 0x80
 8001be4:	0249      	lsls	r1, r1, #9
 8001be6:	430a      	orrs	r2, r1
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	e00b      	b.n	8001c04 <HAL_RCC_OscConfig+0xe0>
 8001bec:	4b9b      	ldr	r3, [pc, #620]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4b9a      	ldr	r3, [pc, #616]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001bf2:	499b      	ldr	r1, [pc, #620]	; (8001e60 <HAL_RCC_OscConfig+0x33c>)
 8001bf4:	400a      	ands	r2, r1
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	4b98      	ldr	r3, [pc, #608]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b97      	ldr	r3, [pc, #604]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001bfe:	4999      	ldr	r1, [pc, #612]	; (8001e64 <HAL_RCC_OscConfig+0x340>)
 8001c00:	400a      	ands	r2, r1
 8001c02:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d014      	beq.n	8001c36 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0c:	f7ff fcf4 	bl	80015f8 <HAL_GetTick>
 8001c10:	0003      	movs	r3, r0
 8001c12:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c14:	e008      	b.n	8001c28 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c16:	f7ff fcef 	bl	80015f8 <HAL_GetTick>
 8001c1a:	0002      	movs	r2, r0
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b64      	cmp	r3, #100	; 0x64
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e2fd      	b.n	8002224 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c28:	4b8c      	ldr	r3, [pc, #560]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	2380      	movs	r3, #128	; 0x80
 8001c2e:	029b      	lsls	r3, r3, #10
 8001c30:	4013      	ands	r3, r2
 8001c32:	d0f0      	beq.n	8001c16 <HAL_RCC_OscConfig+0xf2>
 8001c34:	e015      	b.n	8001c62 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c36:	f7ff fcdf 	bl	80015f8 <HAL_GetTick>
 8001c3a:	0003      	movs	r3, r0
 8001c3c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c40:	f7ff fcda 	bl	80015f8 <HAL_GetTick>
 8001c44:	0002      	movs	r2, r0
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b64      	cmp	r3, #100	; 0x64
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e2e8      	b.n	8002224 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c52:	4b82      	ldr	r3, [pc, #520]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	2380      	movs	r3, #128	; 0x80
 8001c58:	029b      	lsls	r3, r3, #10
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d1f0      	bne.n	8001c40 <HAL_RCC_OscConfig+0x11c>
 8001c5e:	e000      	b.n	8001c62 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c60:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2202      	movs	r2, #2
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d100      	bne.n	8001c6e <HAL_RCC_OscConfig+0x14a>
 8001c6c:	e06c      	b.n	8001d48 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c6e:	4b7b      	ldr	r3, [pc, #492]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	220c      	movs	r2, #12
 8001c74:	4013      	ands	r3, r2
 8001c76:	d00e      	beq.n	8001c96 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c78:	4b78      	ldr	r3, [pc, #480]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	220c      	movs	r2, #12
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d11f      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x1a0>
 8001c84:	4b75      	ldr	r3, [pc, #468]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	23c0      	movs	r3, #192	; 0xc0
 8001c8a:	025b      	lsls	r3, r3, #9
 8001c8c:	401a      	ands	r2, r3
 8001c8e:	2380      	movs	r3, #128	; 0x80
 8001c90:	021b      	lsls	r3, r3, #8
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d116      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c96:	4b71      	ldr	r3, [pc, #452]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d005      	beq.n	8001cac <HAL_RCC_OscConfig+0x188>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d001      	beq.n	8001cac <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e2bb      	b.n	8002224 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cac:	4b6b      	ldr	r3, [pc, #428]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	22f8      	movs	r2, #248	; 0xf8
 8001cb2:	4393      	bics	r3, r2
 8001cb4:	0019      	movs	r1, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	00da      	lsls	r2, r3, #3
 8001cbc:	4b67      	ldr	r3, [pc, #412]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc2:	e041      	b.n	8001d48 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d024      	beq.n	8001d16 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ccc:	4b63      	ldr	r3, [pc, #396]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b62      	ldr	r3, [pc, #392]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd8:	f7ff fc8e 	bl	80015f8 <HAL_GetTick>
 8001cdc:	0003      	movs	r3, r0
 8001cde:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ce2:	f7ff fc89 	bl	80015f8 <HAL_GetTick>
 8001ce6:	0002      	movs	r2, r0
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e297      	b.n	8002224 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf4:	4b59      	ldr	r3, [pc, #356]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d0f1      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfe:	4b57      	ldr	r3, [pc, #348]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	22f8      	movs	r2, #248	; 0xf8
 8001d04:	4393      	bics	r3, r2
 8001d06:	0019      	movs	r1, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	00da      	lsls	r2, r3, #3
 8001d0e:	4b53      	ldr	r3, [pc, #332]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001d10:	430a      	orrs	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	e018      	b.n	8001d48 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d16:	4b51      	ldr	r3, [pc, #324]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	4b50      	ldr	r3, [pc, #320]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	438a      	bics	r2, r1
 8001d20:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d22:	f7ff fc69 	bl	80015f8 <HAL_GetTick>
 8001d26:	0003      	movs	r3, r0
 8001d28:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d2c:	f7ff fc64 	bl	80015f8 <HAL_GetTick>
 8001d30:	0002      	movs	r2, r0
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e272      	b.n	8002224 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d3e:	4b47      	ldr	r3, [pc, #284]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2202      	movs	r2, #2
 8001d44:	4013      	ands	r3, r2
 8001d46:	d1f1      	bne.n	8001d2c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2208      	movs	r2, #8
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d036      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d019      	beq.n	8001d8e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d5a:	4b40      	ldr	r3, [pc, #256]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001d5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d5e:	4b3f      	ldr	r3, [pc, #252]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001d60:	2101      	movs	r1, #1
 8001d62:	430a      	orrs	r2, r1
 8001d64:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d66:	f7ff fc47 	bl	80015f8 <HAL_GetTick>
 8001d6a:	0003      	movs	r3, r0
 8001d6c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d70:	f7ff fc42 	bl	80015f8 <HAL_GetTick>
 8001d74:	0002      	movs	r2, r0
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e250      	b.n	8002224 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d82:	4b36      	ldr	r3, [pc, #216]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d86:	2202      	movs	r2, #2
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d0f1      	beq.n	8001d70 <HAL_RCC_OscConfig+0x24c>
 8001d8c:	e018      	b.n	8001dc0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d8e:	4b33      	ldr	r3, [pc, #204]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001d90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d92:	4b32      	ldr	r3, [pc, #200]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001d94:	2101      	movs	r1, #1
 8001d96:	438a      	bics	r2, r1
 8001d98:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d9a:	f7ff fc2d 	bl	80015f8 <HAL_GetTick>
 8001d9e:	0003      	movs	r3, r0
 8001da0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001da4:	f7ff fc28 	bl	80015f8 <HAL_GetTick>
 8001da8:	0002      	movs	r2, r0
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e236      	b.n	8002224 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db6:	4b29      	ldr	r3, [pc, #164]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dba:	2202      	movs	r2, #2
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d1f1      	bne.n	8001da4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2204      	movs	r2, #4
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	d100      	bne.n	8001dcc <HAL_RCC_OscConfig+0x2a8>
 8001dca:	e0b5      	b.n	8001f38 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dcc:	201f      	movs	r0, #31
 8001dce:	183b      	adds	r3, r7, r0
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dd4:	4b21      	ldr	r3, [pc, #132]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001dd6:	69da      	ldr	r2, [r3, #28]
 8001dd8:	2380      	movs	r3, #128	; 0x80
 8001dda:	055b      	lsls	r3, r3, #21
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d110      	bne.n	8001e02 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001de0:	4b1e      	ldr	r3, [pc, #120]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001de2:	69da      	ldr	r2, [r3, #28]
 8001de4:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001de6:	2180      	movs	r1, #128	; 0x80
 8001de8:	0549      	lsls	r1, r1, #21
 8001dea:	430a      	orrs	r2, r1
 8001dec:	61da      	str	r2, [r3, #28]
 8001dee:	4b1b      	ldr	r3, [pc, #108]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001df0:	69da      	ldr	r2, [r3, #28]
 8001df2:	2380      	movs	r3, #128	; 0x80
 8001df4:	055b      	lsls	r3, r3, #21
 8001df6:	4013      	ands	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001dfc:	183b      	adds	r3, r7, r0
 8001dfe:	2201      	movs	r2, #1
 8001e00:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e02:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <HAL_RCC_OscConfig+0x344>)
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	2380      	movs	r3, #128	; 0x80
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	d11a      	bne.n	8001e44 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e0e:	4b16      	ldr	r3, [pc, #88]	; (8001e68 <HAL_RCC_OscConfig+0x344>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <HAL_RCC_OscConfig+0x344>)
 8001e14:	2180      	movs	r1, #128	; 0x80
 8001e16:	0049      	lsls	r1, r1, #1
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e1c:	f7ff fbec 	bl	80015f8 <HAL_GetTick>
 8001e20:	0003      	movs	r3, r0
 8001e22:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e26:	f7ff fbe7 	bl	80015f8 <HAL_GetTick>
 8001e2a:	0002      	movs	r2, r0
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b64      	cmp	r3, #100	; 0x64
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e1f5      	b.n	8002224 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e38:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <HAL_RCC_OscConfig+0x344>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	2380      	movs	r3, #128	; 0x80
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	4013      	ands	r3, r2
 8001e42:	d0f0      	beq.n	8001e26 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d10f      	bne.n	8001e6c <HAL_RCC_OscConfig+0x348>
 8001e4c:	4b03      	ldr	r3, [pc, #12]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001e4e:	6a1a      	ldr	r2, [r3, #32]
 8001e50:	4b02      	ldr	r3, [pc, #8]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001e52:	2101      	movs	r1, #1
 8001e54:	430a      	orrs	r2, r1
 8001e56:	621a      	str	r2, [r3, #32]
 8001e58:	e036      	b.n	8001ec8 <HAL_RCC_OscConfig+0x3a4>
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	fffeffff 	.word	0xfffeffff
 8001e64:	fffbffff 	.word	0xfffbffff
 8001e68:	40007000 	.word	0x40007000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d10c      	bne.n	8001e8e <HAL_RCC_OscConfig+0x36a>
 8001e74:	4bca      	ldr	r3, [pc, #808]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8001e76:	6a1a      	ldr	r2, [r3, #32]
 8001e78:	4bc9      	ldr	r3, [pc, #804]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	438a      	bics	r2, r1
 8001e7e:	621a      	str	r2, [r3, #32]
 8001e80:	4bc7      	ldr	r3, [pc, #796]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8001e82:	6a1a      	ldr	r2, [r3, #32]
 8001e84:	4bc6      	ldr	r3, [pc, #792]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8001e86:	2104      	movs	r1, #4
 8001e88:	438a      	bics	r2, r1
 8001e8a:	621a      	str	r2, [r3, #32]
 8001e8c:	e01c      	b.n	8001ec8 <HAL_RCC_OscConfig+0x3a4>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	2b05      	cmp	r3, #5
 8001e94:	d10c      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x38c>
 8001e96:	4bc2      	ldr	r3, [pc, #776]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8001e98:	6a1a      	ldr	r2, [r3, #32]
 8001e9a:	4bc1      	ldr	r3, [pc, #772]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8001e9c:	2104      	movs	r1, #4
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	621a      	str	r2, [r3, #32]
 8001ea2:	4bbf      	ldr	r3, [pc, #764]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8001ea4:	6a1a      	ldr	r2, [r3, #32]
 8001ea6:	4bbe      	ldr	r3, [pc, #760]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	621a      	str	r2, [r3, #32]
 8001eae:	e00b      	b.n	8001ec8 <HAL_RCC_OscConfig+0x3a4>
 8001eb0:	4bbb      	ldr	r3, [pc, #748]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8001eb2:	6a1a      	ldr	r2, [r3, #32]
 8001eb4:	4bba      	ldr	r3, [pc, #744]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	438a      	bics	r2, r1
 8001eba:	621a      	str	r2, [r3, #32]
 8001ebc:	4bb8      	ldr	r3, [pc, #736]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8001ebe:	6a1a      	ldr	r2, [r3, #32]
 8001ec0:	4bb7      	ldr	r3, [pc, #732]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8001ec2:	2104      	movs	r1, #4
 8001ec4:	438a      	bics	r2, r1
 8001ec6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d014      	beq.n	8001efa <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed0:	f7ff fb92 	bl	80015f8 <HAL_GetTick>
 8001ed4:	0003      	movs	r3, r0
 8001ed6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed8:	e009      	b.n	8001eee <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eda:	f7ff fb8d 	bl	80015f8 <HAL_GetTick>
 8001ede:	0002      	movs	r2, r0
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	4aaf      	ldr	r2, [pc, #700]	; (80021a4 <HAL_RCC_OscConfig+0x680>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e19a      	b.n	8002224 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eee:	4bac      	ldr	r3, [pc, #688]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d0f0      	beq.n	8001eda <HAL_RCC_OscConfig+0x3b6>
 8001ef8:	e013      	b.n	8001f22 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efa:	f7ff fb7d 	bl	80015f8 <HAL_GetTick>
 8001efe:	0003      	movs	r3, r0
 8001f00:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f02:	e009      	b.n	8001f18 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f04:	f7ff fb78 	bl	80015f8 <HAL_GetTick>
 8001f08:	0002      	movs	r2, r0
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	4aa5      	ldr	r2, [pc, #660]	; (80021a4 <HAL_RCC_OscConfig+0x680>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e185      	b.n	8002224 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f18:	4ba1      	ldr	r3, [pc, #644]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	4013      	ands	r3, r2
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f22:	231f      	movs	r3, #31
 8001f24:	18fb      	adds	r3, r7, r3
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d105      	bne.n	8001f38 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f2c:	4b9c      	ldr	r3, [pc, #624]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8001f2e:	69da      	ldr	r2, [r3, #28]
 8001f30:	4b9b      	ldr	r3, [pc, #620]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8001f32:	499d      	ldr	r1, [pc, #628]	; (80021a8 <HAL_RCC_OscConfig+0x684>)
 8001f34:	400a      	ands	r2, r1
 8001f36:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2210      	movs	r2, #16
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d063      	beq.n	800200a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d12a      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f4a:	4b95      	ldr	r3, [pc, #596]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8001f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f4e:	4b94      	ldr	r3, [pc, #592]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8001f50:	2104      	movs	r1, #4
 8001f52:	430a      	orrs	r2, r1
 8001f54:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001f56:	4b92      	ldr	r3, [pc, #584]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8001f58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f5a:	4b91      	ldr	r3, [pc, #580]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f62:	f7ff fb49 	bl	80015f8 <HAL_GetTick>
 8001f66:	0003      	movs	r3, r0
 8001f68:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f6c:	f7ff fb44 	bl	80015f8 <HAL_GetTick>
 8001f70:	0002      	movs	r2, r0
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e152      	b.n	8002224 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001f7e:	4b88      	ldr	r3, [pc, #544]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8001f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f82:	2202      	movs	r2, #2
 8001f84:	4013      	ands	r3, r2
 8001f86:	d0f1      	beq.n	8001f6c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001f88:	4b85      	ldr	r3, [pc, #532]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8001f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f8c:	22f8      	movs	r2, #248	; 0xf8
 8001f8e:	4393      	bics	r3, r2
 8001f90:	0019      	movs	r1, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	00da      	lsls	r2, r3, #3
 8001f98:	4b81      	ldr	r3, [pc, #516]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	635a      	str	r2, [r3, #52]	; 0x34
 8001f9e:	e034      	b.n	800200a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	3305      	adds	r3, #5
 8001fa6:	d111      	bne.n	8001fcc <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001fa8:	4b7d      	ldr	r3, [pc, #500]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8001faa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fac:	4b7c      	ldr	r3, [pc, #496]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8001fae:	2104      	movs	r1, #4
 8001fb0:	438a      	bics	r2, r1
 8001fb2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001fb4:	4b7a      	ldr	r3, [pc, #488]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8001fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb8:	22f8      	movs	r2, #248	; 0xf8
 8001fba:	4393      	bics	r3, r2
 8001fbc:	0019      	movs	r1, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	00da      	lsls	r2, r3, #3
 8001fc4:	4b76      	ldr	r3, [pc, #472]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	635a      	str	r2, [r3, #52]	; 0x34
 8001fca:	e01e      	b.n	800200a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001fcc:	4b74      	ldr	r3, [pc, #464]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8001fce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fd0:	4b73      	ldr	r3, [pc, #460]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8001fd2:	2104      	movs	r1, #4
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001fd8:	4b71      	ldr	r3, [pc, #452]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8001fda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fdc:	4b70      	ldr	r3, [pc, #448]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8001fde:	2101      	movs	r1, #1
 8001fe0:	438a      	bics	r2, r1
 8001fe2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe4:	f7ff fb08 	bl	80015f8 <HAL_GetTick>
 8001fe8:	0003      	movs	r3, r0
 8001fea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001fee:	f7ff fb03 	bl	80015f8 <HAL_GetTick>
 8001ff2:	0002      	movs	r2, r0
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e111      	b.n	8002224 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002000:	4b67      	ldr	r3, [pc, #412]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8002002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002004:	2202      	movs	r2, #2
 8002006:	4013      	ands	r3, r2
 8002008:	d1f1      	bne.n	8001fee <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2220      	movs	r2, #32
 8002010:	4013      	ands	r3, r2
 8002012:	d05c      	beq.n	80020ce <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002014:	4b62      	ldr	r3, [pc, #392]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	220c      	movs	r2, #12
 800201a:	4013      	ands	r3, r2
 800201c:	2b0c      	cmp	r3, #12
 800201e:	d00e      	beq.n	800203e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002020:	4b5f      	ldr	r3, [pc, #380]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	220c      	movs	r2, #12
 8002026:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002028:	2b08      	cmp	r3, #8
 800202a:	d114      	bne.n	8002056 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800202c:	4b5c      	ldr	r3, [pc, #368]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	23c0      	movs	r3, #192	; 0xc0
 8002032:	025b      	lsls	r3, r3, #9
 8002034:	401a      	ands	r2, r3
 8002036:	23c0      	movs	r3, #192	; 0xc0
 8002038:	025b      	lsls	r3, r3, #9
 800203a:	429a      	cmp	r2, r3
 800203c:	d10b      	bne.n	8002056 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800203e:	4b58      	ldr	r3, [pc, #352]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8002040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002042:	2380      	movs	r3, #128	; 0x80
 8002044:	025b      	lsls	r3, r3, #9
 8002046:	4013      	ands	r3, r2
 8002048:	d040      	beq.n	80020cc <HAL_RCC_OscConfig+0x5a8>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d03c      	beq.n	80020cc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e0e6      	b.n	8002224 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d01b      	beq.n	8002096 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800205e:	4b50      	ldr	r3, [pc, #320]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8002060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002062:	4b4f      	ldr	r3, [pc, #316]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8002064:	2180      	movs	r1, #128	; 0x80
 8002066:	0249      	lsls	r1, r1, #9
 8002068:	430a      	orrs	r2, r1
 800206a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206c:	f7ff fac4 	bl	80015f8 <HAL_GetTick>
 8002070:	0003      	movs	r3, r0
 8002072:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002076:	f7ff fabf 	bl	80015f8 <HAL_GetTick>
 800207a:	0002      	movs	r2, r0
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e0cd      	b.n	8002224 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002088:	4b45      	ldr	r3, [pc, #276]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 800208a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800208c:	2380      	movs	r3, #128	; 0x80
 800208e:	025b      	lsls	r3, r3, #9
 8002090:	4013      	ands	r3, r2
 8002092:	d0f0      	beq.n	8002076 <HAL_RCC_OscConfig+0x552>
 8002094:	e01b      	b.n	80020ce <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002096:	4b42      	ldr	r3, [pc, #264]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8002098:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800209a:	4b41      	ldr	r3, [pc, #260]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 800209c:	4943      	ldr	r1, [pc, #268]	; (80021ac <HAL_RCC_OscConfig+0x688>)
 800209e:	400a      	ands	r2, r1
 80020a0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a2:	f7ff faa9 	bl	80015f8 <HAL_GetTick>
 80020a6:	0003      	movs	r3, r0
 80020a8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020ac:	f7ff faa4 	bl	80015f8 <HAL_GetTick>
 80020b0:	0002      	movs	r2, r0
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e0b2      	b.n	8002224 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80020be:	4b38      	ldr	r3, [pc, #224]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 80020c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020c2:	2380      	movs	r3, #128	; 0x80
 80020c4:	025b      	lsls	r3, r3, #9
 80020c6:	4013      	ands	r3, r2
 80020c8:	d1f0      	bne.n	80020ac <HAL_RCC_OscConfig+0x588>
 80020ca:	e000      	b.n	80020ce <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80020cc:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d100      	bne.n	80020d8 <HAL_RCC_OscConfig+0x5b4>
 80020d6:	e0a4      	b.n	8002222 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020d8:	4b31      	ldr	r3, [pc, #196]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	220c      	movs	r2, #12
 80020de:	4013      	ands	r3, r2
 80020e0:	2b08      	cmp	r3, #8
 80020e2:	d100      	bne.n	80020e6 <HAL_RCC_OscConfig+0x5c2>
 80020e4:	e078      	b.n	80021d8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d14c      	bne.n	8002188 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ee:	4b2c      	ldr	r3, [pc, #176]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	4b2b      	ldr	r3, [pc, #172]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 80020f4:	492e      	ldr	r1, [pc, #184]	; (80021b0 <HAL_RCC_OscConfig+0x68c>)
 80020f6:	400a      	ands	r2, r1
 80020f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fa:	f7ff fa7d 	bl	80015f8 <HAL_GetTick>
 80020fe:	0003      	movs	r3, r0
 8002100:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002104:	f7ff fa78 	bl	80015f8 <HAL_GetTick>
 8002108:	0002      	movs	r2, r0
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e086      	b.n	8002224 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002116:	4b22      	ldr	r3, [pc, #136]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	2380      	movs	r3, #128	; 0x80
 800211c:	049b      	lsls	r3, r3, #18
 800211e:	4013      	ands	r3, r2
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002122:	4b1f      	ldr	r3, [pc, #124]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8002124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002126:	220f      	movs	r2, #15
 8002128:	4393      	bics	r3, r2
 800212a:	0019      	movs	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002130:	4b1b      	ldr	r3, [pc, #108]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8002132:	430a      	orrs	r2, r1
 8002134:	62da      	str	r2, [r3, #44]	; 0x2c
 8002136:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	4a1e      	ldr	r2, [pc, #120]	; (80021b4 <HAL_RCC_OscConfig+0x690>)
 800213c:	4013      	ands	r3, r2
 800213e:	0019      	movs	r1, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002148:	431a      	orrs	r2, r3
 800214a:	4b15      	ldr	r3, [pc, #84]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 800214c:	430a      	orrs	r2, r1
 800214e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002150:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 8002156:	2180      	movs	r1, #128	; 0x80
 8002158:	0449      	lsls	r1, r1, #17
 800215a:	430a      	orrs	r2, r1
 800215c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215e:	f7ff fa4b 	bl	80015f8 <HAL_GetTick>
 8002162:	0003      	movs	r3, r0
 8002164:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002168:	f7ff fa46 	bl	80015f8 <HAL_GetTick>
 800216c:	0002      	movs	r2, r0
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e054      	b.n	8002224 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800217a:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	2380      	movs	r3, #128	; 0x80
 8002180:	049b      	lsls	r3, r3, #18
 8002182:	4013      	ands	r3, r2
 8002184:	d0f0      	beq.n	8002168 <HAL_RCC_OscConfig+0x644>
 8002186:	e04c      	b.n	8002222 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002188:	4b05      	ldr	r3, [pc, #20]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4b04      	ldr	r3, [pc, #16]	; (80021a0 <HAL_RCC_OscConfig+0x67c>)
 800218e:	4908      	ldr	r1, [pc, #32]	; (80021b0 <HAL_RCC_OscConfig+0x68c>)
 8002190:	400a      	ands	r2, r1
 8002192:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002194:	f7ff fa30 	bl	80015f8 <HAL_GetTick>
 8002198:	0003      	movs	r3, r0
 800219a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800219c:	e015      	b.n	80021ca <HAL_RCC_OscConfig+0x6a6>
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	40021000 	.word	0x40021000
 80021a4:	00001388 	.word	0x00001388
 80021a8:	efffffff 	.word	0xefffffff
 80021ac:	fffeffff 	.word	0xfffeffff
 80021b0:	feffffff 	.word	0xfeffffff
 80021b4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b8:	f7ff fa1e 	bl	80015f8 <HAL_GetTick>
 80021bc:	0002      	movs	r2, r0
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e02c      	b.n	8002224 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ca:	4b18      	ldr	r3, [pc, #96]	; (800222c <HAL_RCC_OscConfig+0x708>)
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	2380      	movs	r3, #128	; 0x80
 80021d0:	049b      	lsls	r3, r3, #18
 80021d2:	4013      	ands	r3, r2
 80021d4:	d1f0      	bne.n	80021b8 <HAL_RCC_OscConfig+0x694>
 80021d6:	e024      	b.n	8002222 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e01f      	b.n	8002224 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80021e4:	4b11      	ldr	r3, [pc, #68]	; (800222c <HAL_RCC_OscConfig+0x708>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80021ea:	4b10      	ldr	r3, [pc, #64]	; (800222c <HAL_RCC_OscConfig+0x708>)
 80021ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ee:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	23c0      	movs	r3, #192	; 0xc0
 80021f4:	025b      	lsls	r3, r3, #9
 80021f6:	401a      	ands	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d10e      	bne.n	800221e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	220f      	movs	r2, #15
 8002204:	401a      	ands	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800220a:	429a      	cmp	r2, r3
 800220c:	d107      	bne.n	800221e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	23f0      	movs	r3, #240	; 0xf0
 8002212:	039b      	lsls	r3, r3, #14
 8002214:	401a      	ands	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800221a:	429a      	cmp	r2, r3
 800221c:	d001      	beq.n	8002222 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	0018      	movs	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	b008      	add	sp, #32
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40021000 	.word	0x40021000

08002230 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e0bf      	b.n	80023c4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002244:	4b61      	ldr	r3, [pc, #388]	; (80023cc <HAL_RCC_ClockConfig+0x19c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2201      	movs	r2, #1
 800224a:	4013      	ands	r3, r2
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	d911      	bls.n	8002276 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002252:	4b5e      	ldr	r3, [pc, #376]	; (80023cc <HAL_RCC_ClockConfig+0x19c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2201      	movs	r2, #1
 8002258:	4393      	bics	r3, r2
 800225a:	0019      	movs	r1, r3
 800225c:	4b5b      	ldr	r3, [pc, #364]	; (80023cc <HAL_RCC_ClockConfig+0x19c>)
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002264:	4b59      	ldr	r3, [pc, #356]	; (80023cc <HAL_RCC_ClockConfig+0x19c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2201      	movs	r2, #1
 800226a:	4013      	ands	r3, r2
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d001      	beq.n	8002276 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e0a6      	b.n	80023c4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2202      	movs	r2, #2
 800227c:	4013      	ands	r3, r2
 800227e:	d015      	beq.n	80022ac <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2204      	movs	r2, #4
 8002286:	4013      	ands	r3, r2
 8002288:	d006      	beq.n	8002298 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800228a:	4b51      	ldr	r3, [pc, #324]	; (80023d0 <HAL_RCC_ClockConfig+0x1a0>)
 800228c:	685a      	ldr	r2, [r3, #4]
 800228e:	4b50      	ldr	r3, [pc, #320]	; (80023d0 <HAL_RCC_ClockConfig+0x1a0>)
 8002290:	21e0      	movs	r1, #224	; 0xe0
 8002292:	00c9      	lsls	r1, r1, #3
 8002294:	430a      	orrs	r2, r1
 8002296:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002298:	4b4d      	ldr	r3, [pc, #308]	; (80023d0 <HAL_RCC_ClockConfig+0x1a0>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	22f0      	movs	r2, #240	; 0xf0
 800229e:	4393      	bics	r3, r2
 80022a0:	0019      	movs	r1, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	4b4a      	ldr	r3, [pc, #296]	; (80023d0 <HAL_RCC_ClockConfig+0x1a0>)
 80022a8:	430a      	orrs	r2, r1
 80022aa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2201      	movs	r2, #1
 80022b2:	4013      	ands	r3, r2
 80022b4:	d04c      	beq.n	8002350 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d107      	bne.n	80022ce <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022be:	4b44      	ldr	r3, [pc, #272]	; (80023d0 <HAL_RCC_ClockConfig+0x1a0>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	2380      	movs	r3, #128	; 0x80
 80022c4:	029b      	lsls	r3, r3, #10
 80022c6:	4013      	ands	r3, r2
 80022c8:	d120      	bne.n	800230c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e07a      	b.n	80023c4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d107      	bne.n	80022e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d6:	4b3e      	ldr	r3, [pc, #248]	; (80023d0 <HAL_RCC_ClockConfig+0x1a0>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	2380      	movs	r3, #128	; 0x80
 80022dc:	049b      	lsls	r3, r3, #18
 80022de:	4013      	ands	r3, r2
 80022e0:	d114      	bne.n	800230c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e06e      	b.n	80023c4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b03      	cmp	r3, #3
 80022ec:	d107      	bne.n	80022fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80022ee:	4b38      	ldr	r3, [pc, #224]	; (80023d0 <HAL_RCC_ClockConfig+0x1a0>)
 80022f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022f2:	2380      	movs	r3, #128	; 0x80
 80022f4:	025b      	lsls	r3, r3, #9
 80022f6:	4013      	ands	r3, r2
 80022f8:	d108      	bne.n	800230c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e062      	b.n	80023c4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fe:	4b34      	ldr	r3, [pc, #208]	; (80023d0 <HAL_RCC_ClockConfig+0x1a0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2202      	movs	r2, #2
 8002304:	4013      	ands	r3, r2
 8002306:	d101      	bne.n	800230c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e05b      	b.n	80023c4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800230c:	4b30      	ldr	r3, [pc, #192]	; (80023d0 <HAL_RCC_ClockConfig+0x1a0>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2203      	movs	r2, #3
 8002312:	4393      	bics	r3, r2
 8002314:	0019      	movs	r1, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685a      	ldr	r2, [r3, #4]
 800231a:	4b2d      	ldr	r3, [pc, #180]	; (80023d0 <HAL_RCC_ClockConfig+0x1a0>)
 800231c:	430a      	orrs	r2, r1
 800231e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002320:	f7ff f96a 	bl	80015f8 <HAL_GetTick>
 8002324:	0003      	movs	r3, r0
 8002326:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002328:	e009      	b.n	800233e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800232a:	f7ff f965 	bl	80015f8 <HAL_GetTick>
 800232e:	0002      	movs	r2, r0
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	4a27      	ldr	r2, [pc, #156]	; (80023d4 <HAL_RCC_ClockConfig+0x1a4>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d901      	bls.n	800233e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e042      	b.n	80023c4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233e:	4b24      	ldr	r3, [pc, #144]	; (80023d0 <HAL_RCC_ClockConfig+0x1a0>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	220c      	movs	r2, #12
 8002344:	401a      	ands	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	429a      	cmp	r2, r3
 800234e:	d1ec      	bne.n	800232a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002350:	4b1e      	ldr	r3, [pc, #120]	; (80023cc <HAL_RCC_ClockConfig+0x19c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2201      	movs	r2, #1
 8002356:	4013      	ands	r3, r2
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d211      	bcs.n	8002382 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235e:	4b1b      	ldr	r3, [pc, #108]	; (80023cc <HAL_RCC_ClockConfig+0x19c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2201      	movs	r2, #1
 8002364:	4393      	bics	r3, r2
 8002366:	0019      	movs	r1, r3
 8002368:	4b18      	ldr	r3, [pc, #96]	; (80023cc <HAL_RCC_ClockConfig+0x19c>)
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002370:	4b16      	ldr	r3, [pc, #88]	; (80023cc <HAL_RCC_ClockConfig+0x19c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2201      	movs	r2, #1
 8002376:	4013      	ands	r3, r2
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	d001      	beq.n	8002382 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e020      	b.n	80023c4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2204      	movs	r2, #4
 8002388:	4013      	ands	r3, r2
 800238a:	d009      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800238c:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <HAL_RCC_ClockConfig+0x1a0>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	4a11      	ldr	r2, [pc, #68]	; (80023d8 <HAL_RCC_ClockConfig+0x1a8>)
 8002392:	4013      	ands	r3, r2
 8002394:	0019      	movs	r1, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	4b0d      	ldr	r3, [pc, #52]	; (80023d0 <HAL_RCC_ClockConfig+0x1a0>)
 800239c:	430a      	orrs	r2, r1
 800239e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023a0:	f000 f82e 	bl	8002400 <HAL_RCC_GetSysClockFreq>
 80023a4:	0001      	movs	r1, r0
 80023a6:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <HAL_RCC_ClockConfig+0x1a0>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	091b      	lsrs	r3, r3, #4
 80023ac:	220f      	movs	r2, #15
 80023ae:	4013      	ands	r3, r2
 80023b0:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <HAL_RCC_ClockConfig+0x1ac>)
 80023b2:	5cd3      	ldrb	r3, [r2, r3]
 80023b4:	000a      	movs	r2, r1
 80023b6:	40da      	lsrs	r2, r3
 80023b8:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <HAL_RCC_ClockConfig+0x1b0>)
 80023ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80023bc:	2000      	movs	r0, #0
 80023be:	f7ff f8d5 	bl	800156c <HAL_InitTick>
  
  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	0018      	movs	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	b004      	add	sp, #16
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40022000 	.word	0x40022000
 80023d0:	40021000 	.word	0x40021000
 80023d4:	00001388 	.word	0x00001388
 80023d8:	fffff8ff 	.word	0xfffff8ff
 80023dc:	08004b38 	.word	0x08004b38
 80023e0:	2000000c 	.word	0x2000000c

080023e4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M0 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 80023e8:	4b04      	ldr	r3, [pc, #16]	; (80023fc <HAL_RCC_EnableCSS+0x18>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4b03      	ldr	r3, [pc, #12]	; (80023fc <HAL_RCC_EnableCSS+0x18>)
 80023ee:	2180      	movs	r1, #128	; 0x80
 80023f0:	0309      	lsls	r1, r1, #12
 80023f2:	430a      	orrs	r2, r1
 80023f4:	601a      	str	r2, [r3, #0]
}
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40021000 	.word	0x40021000

08002400 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002400:	b590      	push	{r4, r7, lr}
 8002402:	b08f      	sub	sp, #60	; 0x3c
 8002404:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002406:	2314      	movs	r3, #20
 8002408:	18fb      	adds	r3, r7, r3
 800240a:	4a38      	ldr	r2, [pc, #224]	; (80024ec <HAL_RCC_GetSysClockFreq+0xec>)
 800240c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800240e:	c313      	stmia	r3!, {r0, r1, r4}
 8002410:	6812      	ldr	r2, [r2, #0]
 8002412:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002414:	1d3b      	adds	r3, r7, #4
 8002416:	4a36      	ldr	r2, [pc, #216]	; (80024f0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002418:	ca13      	ldmia	r2!, {r0, r1, r4}
 800241a:	c313      	stmia	r3!, {r0, r1, r4}
 800241c:	6812      	ldr	r2, [r2, #0]
 800241e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002420:	2300      	movs	r3, #0
 8002422:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002424:	2300      	movs	r3, #0
 8002426:	62bb      	str	r3, [r7, #40]	; 0x28
 8002428:	2300      	movs	r3, #0
 800242a:	637b      	str	r3, [r7, #52]	; 0x34
 800242c:	2300      	movs	r3, #0
 800242e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002430:	2300      	movs	r3, #0
 8002432:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002434:	4b2f      	ldr	r3, [pc, #188]	; (80024f4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800243a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243c:	220c      	movs	r2, #12
 800243e:	4013      	ands	r3, r2
 8002440:	2b0c      	cmp	r3, #12
 8002442:	d047      	beq.n	80024d4 <HAL_RCC_GetSysClockFreq+0xd4>
 8002444:	d849      	bhi.n	80024da <HAL_RCC_GetSysClockFreq+0xda>
 8002446:	2b04      	cmp	r3, #4
 8002448:	d002      	beq.n	8002450 <HAL_RCC_GetSysClockFreq+0x50>
 800244a:	2b08      	cmp	r3, #8
 800244c:	d003      	beq.n	8002456 <HAL_RCC_GetSysClockFreq+0x56>
 800244e:	e044      	b.n	80024da <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002450:	4b29      	ldr	r3, [pc, #164]	; (80024f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002452:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002454:	e044      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002458:	0c9b      	lsrs	r3, r3, #18
 800245a:	220f      	movs	r2, #15
 800245c:	4013      	ands	r3, r2
 800245e:	2214      	movs	r2, #20
 8002460:	18ba      	adds	r2, r7, r2
 8002462:	5cd3      	ldrb	r3, [r2, r3]
 8002464:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002466:	4b23      	ldr	r3, [pc, #140]	; (80024f4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246a:	220f      	movs	r2, #15
 800246c:	4013      	ands	r3, r2
 800246e:	1d3a      	adds	r2, r7, #4
 8002470:	5cd3      	ldrb	r3, [r2, r3]
 8002472:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002476:	23c0      	movs	r3, #192	; 0xc0
 8002478:	025b      	lsls	r3, r3, #9
 800247a:	401a      	ands	r2, r3
 800247c:	2380      	movs	r3, #128	; 0x80
 800247e:	025b      	lsls	r3, r3, #9
 8002480:	429a      	cmp	r2, r3
 8002482:	d109      	bne.n	8002498 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002484:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002486:	481c      	ldr	r0, [pc, #112]	; (80024f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002488:	f7fd fe48 	bl	800011c <__udivsi3>
 800248c:	0003      	movs	r3, r0
 800248e:	001a      	movs	r2, r3
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	4353      	muls	r3, r2
 8002494:	637b      	str	r3, [r7, #52]	; 0x34
 8002496:	e01a      	b.n	80024ce <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800249a:	23c0      	movs	r3, #192	; 0xc0
 800249c:	025b      	lsls	r3, r3, #9
 800249e:	401a      	ands	r2, r3
 80024a0:	23c0      	movs	r3, #192	; 0xc0
 80024a2:	025b      	lsls	r3, r3, #9
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d109      	bne.n	80024bc <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024aa:	4814      	ldr	r0, [pc, #80]	; (80024fc <HAL_RCC_GetSysClockFreq+0xfc>)
 80024ac:	f7fd fe36 	bl	800011c <__udivsi3>
 80024b0:	0003      	movs	r3, r0
 80024b2:	001a      	movs	r2, r3
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	4353      	muls	r3, r2
 80024b8:	637b      	str	r3, [r7, #52]	; 0x34
 80024ba:	e008      	b.n	80024ce <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024be:	480e      	ldr	r0, [pc, #56]	; (80024f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024c0:	f7fd fe2c 	bl	800011c <__udivsi3>
 80024c4:	0003      	movs	r3, r0
 80024c6:	001a      	movs	r2, r3
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	4353      	muls	r3, r2
 80024cc:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80024ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024d0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024d2:	e005      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80024d4:	4b09      	ldr	r3, [pc, #36]	; (80024fc <HAL_RCC_GetSysClockFreq+0xfc>)
 80024d6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024d8:	e002      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024da:	4b07      	ldr	r3, [pc, #28]	; (80024f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024dc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024de:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80024e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80024e2:	0018      	movs	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	b00f      	add	sp, #60	; 0x3c
 80024e8:	bd90      	pop	{r4, r7, pc}
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	080047bc 	.word	0x080047bc
 80024f0:	080047cc 	.word	0x080047cc
 80024f4:	40021000 	.word	0x40021000
 80024f8:	007a1200 	.word	0x007a1200
 80024fc:	02dc6c00 	.word	0x02dc6c00

08002500 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002504:	4b02      	ldr	r3, [pc, #8]	; (8002510 <HAL_RCC_GetHCLKFreq+0x10>)
 8002506:	681b      	ldr	r3, [r3, #0]
}
 8002508:	0018      	movs	r0, r3
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	46c0      	nop			; (mov r8, r8)
 8002510:	2000000c 	.word	0x2000000c

08002514 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002518:	f7ff fff2 	bl	8002500 <HAL_RCC_GetHCLKFreq>
 800251c:	0001      	movs	r1, r0
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	0a1b      	lsrs	r3, r3, #8
 8002524:	2207      	movs	r2, #7
 8002526:	4013      	ands	r3, r2
 8002528:	4a04      	ldr	r2, [pc, #16]	; (800253c <HAL_RCC_GetPCLK1Freq+0x28>)
 800252a:	5cd3      	ldrb	r3, [r2, r3]
 800252c:	40d9      	lsrs	r1, r3
 800252e:	000b      	movs	r3, r1
}    
 8002530:	0018      	movs	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	46c0      	nop			; (mov r8, r8)
 8002538:	40021000 	.word	0x40021000
 800253c:	08004b48 	.word	0x08004b48

08002540 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002544:	4b06      	ldr	r3, [pc, #24]	; (8002560 <HAL_RCC_NMI_IRQHandler+0x20>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	2280      	movs	r2, #128	; 0x80
 800254a:	4013      	ands	r3, r2
 800254c:	2b80      	cmp	r3, #128	; 0x80
 800254e:	d104      	bne.n	800255a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002550:	f000 f80a 	bl	8002568 <HAL_RCC_CSSCallback>
    
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002554:	4b03      	ldr	r3, [pc, #12]	; (8002564 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002556:	2280      	movs	r2, #128	; 0x80
 8002558:	701a      	strb	r2, [r3, #0]
  }
}
 800255a:	46c0      	nop			; (mov r8, r8)
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40021000 	.word	0x40021000
 8002564:	4002100a 	.word	0x4002100a

08002568 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */ 
}
 800256c:	46c0      	nop			; (mov r8, r8)
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002580:	2300      	movs	r3, #0
 8002582:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	2380      	movs	r3, #128	; 0x80
 800258a:	025b      	lsls	r3, r3, #9
 800258c:	4013      	ands	r3, r2
 800258e:	d100      	bne.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002590:	e08e      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002592:	2017      	movs	r0, #23
 8002594:	183b      	adds	r3, r7, r0
 8002596:	2200      	movs	r2, #0
 8002598:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800259a:	4b6e      	ldr	r3, [pc, #440]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800259c:	69da      	ldr	r2, [r3, #28]
 800259e:	2380      	movs	r3, #128	; 0x80
 80025a0:	055b      	lsls	r3, r3, #21
 80025a2:	4013      	ands	r3, r2
 80025a4:	d110      	bne.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025a6:	4b6b      	ldr	r3, [pc, #428]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025a8:	69da      	ldr	r2, [r3, #28]
 80025aa:	4b6a      	ldr	r3, [pc, #424]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025ac:	2180      	movs	r1, #128	; 0x80
 80025ae:	0549      	lsls	r1, r1, #21
 80025b0:	430a      	orrs	r2, r1
 80025b2:	61da      	str	r2, [r3, #28]
 80025b4:	4b67      	ldr	r3, [pc, #412]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025b6:	69da      	ldr	r2, [r3, #28]
 80025b8:	2380      	movs	r3, #128	; 0x80
 80025ba:	055b      	lsls	r3, r3, #21
 80025bc:	4013      	ands	r3, r2
 80025be:	60bb      	str	r3, [r7, #8]
 80025c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025c2:	183b      	adds	r3, r7, r0
 80025c4:	2201      	movs	r2, #1
 80025c6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c8:	4b63      	ldr	r3, [pc, #396]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	2380      	movs	r3, #128	; 0x80
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	4013      	ands	r3, r2
 80025d2:	d11a      	bne.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025d4:	4b60      	ldr	r3, [pc, #384]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	4b5f      	ldr	r3, [pc, #380]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80025da:	2180      	movs	r1, #128	; 0x80
 80025dc:	0049      	lsls	r1, r1, #1
 80025de:	430a      	orrs	r2, r1
 80025e0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025e2:	f7ff f809 	bl	80015f8 <HAL_GetTick>
 80025e6:	0003      	movs	r3, r0
 80025e8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ea:	e008      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ec:	f7ff f804 	bl	80015f8 <HAL_GetTick>
 80025f0:	0002      	movs	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b64      	cmp	r3, #100	; 0x64
 80025f8:	d901      	bls.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e0a6      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fe:	4b56      	ldr	r3, [pc, #344]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	2380      	movs	r3, #128	; 0x80
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	4013      	ands	r3, r2
 8002608:	d0f0      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800260a:	4b52      	ldr	r3, [pc, #328]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800260c:	6a1a      	ldr	r2, [r3, #32]
 800260e:	23c0      	movs	r3, #192	; 0xc0
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4013      	ands	r3, r2
 8002614:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d034      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	23c0      	movs	r3, #192	; 0xc0
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4013      	ands	r3, r2
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	429a      	cmp	r2, r3
 800262a:	d02c      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800262c:	4b49      	ldr	r3, [pc, #292]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	4a4a      	ldr	r2, [pc, #296]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002632:	4013      	ands	r3, r2
 8002634:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002636:	4b47      	ldr	r3, [pc, #284]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002638:	6a1a      	ldr	r2, [r3, #32]
 800263a:	4b46      	ldr	r3, [pc, #280]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800263c:	2180      	movs	r1, #128	; 0x80
 800263e:	0249      	lsls	r1, r1, #9
 8002640:	430a      	orrs	r2, r1
 8002642:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002644:	4b43      	ldr	r3, [pc, #268]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002646:	6a1a      	ldr	r2, [r3, #32]
 8002648:	4b42      	ldr	r3, [pc, #264]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800264a:	4945      	ldr	r1, [pc, #276]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800264c:	400a      	ands	r2, r1
 800264e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002650:	4b40      	ldr	r3, [pc, #256]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2201      	movs	r2, #1
 800265a:	4013      	ands	r3, r2
 800265c:	d013      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265e:	f7fe ffcb 	bl	80015f8 <HAL_GetTick>
 8002662:	0003      	movs	r3, r0
 8002664:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002666:	e009      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002668:	f7fe ffc6 	bl	80015f8 <HAL_GetTick>
 800266c:	0002      	movs	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	4a3c      	ldr	r2, [pc, #240]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d901      	bls.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e067      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800267c:	4b35      	ldr	r3, [pc, #212]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	2202      	movs	r2, #2
 8002682:	4013      	ands	r3, r2
 8002684:	d0f0      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002686:	4b33      	ldr	r3, [pc, #204]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	4a34      	ldr	r2, [pc, #208]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800268c:	4013      	ands	r3, r2
 800268e:	0019      	movs	r1, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	4b2f      	ldr	r3, [pc, #188]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002696:	430a      	orrs	r2, r1
 8002698:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800269a:	2317      	movs	r3, #23
 800269c:	18fb      	adds	r3, r7, r3
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d105      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026a4:	4b2b      	ldr	r3, [pc, #172]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026a6:	69da      	ldr	r2, [r3, #28]
 80026a8:	4b2a      	ldr	r3, [pc, #168]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026aa:	492f      	ldr	r1, [pc, #188]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80026ac:	400a      	ands	r2, r1
 80026ae:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2201      	movs	r2, #1
 80026b6:	4013      	ands	r3, r2
 80026b8:	d009      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026ba:	4b26      	ldr	r3, [pc, #152]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	2203      	movs	r2, #3
 80026c0:	4393      	bics	r3, r2
 80026c2:	0019      	movs	r1, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	4b22      	ldr	r3, [pc, #136]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026ca:	430a      	orrs	r2, r1
 80026cc:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2202      	movs	r2, #2
 80026d4:	4013      	ands	r3, r2
 80026d6:	d009      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026d8:	4b1e      	ldr	r3, [pc, #120]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026dc:	4a23      	ldr	r2, [pc, #140]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026de:	4013      	ands	r3, r2
 80026e0:	0019      	movs	r1, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68da      	ldr	r2, [r3, #12]
 80026e6:	4b1b      	ldr	r3, [pc, #108]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026e8:	430a      	orrs	r2, r1
 80026ea:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2220      	movs	r2, #32
 80026f2:	4013      	ands	r3, r2
 80026f4:	d009      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026f6:	4b17      	ldr	r3, [pc, #92]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	2210      	movs	r2, #16
 80026fc:	4393      	bics	r3, r2
 80026fe:	0019      	movs	r1, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691a      	ldr	r2, [r3, #16]
 8002704:	4b13      	ldr	r3, [pc, #76]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002706:	430a      	orrs	r2, r1
 8002708:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	2380      	movs	r3, #128	; 0x80
 8002710:	029b      	lsls	r3, r3, #10
 8002712:	4013      	ands	r3, r2
 8002714:	d009      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002716:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	2280      	movs	r2, #128	; 0x80
 800271c:	4393      	bics	r3, r2
 800271e:	0019      	movs	r1, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	699a      	ldr	r2, [r3, #24]
 8002724:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002726:	430a      	orrs	r2, r1
 8002728:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	2380      	movs	r3, #128	; 0x80
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	4013      	ands	r3, r2
 8002734:	d009      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002736:	4b07      	ldr	r3, [pc, #28]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	2240      	movs	r2, #64	; 0x40
 800273c:	4393      	bics	r3, r2
 800273e:	0019      	movs	r1, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	695a      	ldr	r2, [r3, #20]
 8002744:	4b03      	ldr	r3, [pc, #12]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002746:	430a      	orrs	r2, r1
 8002748:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	0018      	movs	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	b006      	add	sp, #24
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40021000 	.word	0x40021000
 8002758:	40007000 	.word	0x40007000
 800275c:	fffffcff 	.word	0xfffffcff
 8002760:	fffeffff 	.word	0xfffeffff
 8002764:	00001388 	.word	0x00001388
 8002768:	efffffff 	.word	0xefffffff
 800276c:	fffcffff 	.word	0xfffcffff

08002770 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e0a8      	b.n	80028d4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002786:	2b00      	cmp	r3, #0
 8002788:	d109      	bne.n	800279e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	2382      	movs	r3, #130	; 0x82
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	429a      	cmp	r2, r3
 8002794:	d009      	beq.n	80027aa <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	61da      	str	r2, [r3, #28]
 800279c:	e005      	b.n	80027aa <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	225d      	movs	r2, #93	; 0x5d
 80027b4:	5c9b      	ldrb	r3, [r3, r2]
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d107      	bne.n	80027cc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	225c      	movs	r2, #92	; 0x5c
 80027c0:	2100      	movs	r1, #0
 80027c2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	0018      	movs	r0, r3
 80027c8:	f7fe fc7e 	bl	80010c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	225d      	movs	r2, #93	; 0x5d
 80027d0:	2102      	movs	r1, #2
 80027d2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2140      	movs	r1, #64	; 0x40
 80027e0:	438a      	bics	r2, r1
 80027e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68da      	ldr	r2, [r3, #12]
 80027e8:	23e0      	movs	r3, #224	; 0xe0
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d902      	bls.n	80027f6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80027f0:	2300      	movs	r3, #0
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	e002      	b.n	80027fc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80027f6:	2380      	movs	r3, #128	; 0x80
 80027f8:	015b      	lsls	r3, r3, #5
 80027fa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	23f0      	movs	r3, #240	; 0xf0
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	429a      	cmp	r2, r3
 8002806:	d008      	beq.n	800281a <HAL_SPI_Init+0xaa>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68da      	ldr	r2, [r3, #12]
 800280c:	23e0      	movs	r3, #224	; 0xe0
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	429a      	cmp	r2, r3
 8002812:	d002      	beq.n	800281a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	2382      	movs	r3, #130	; 0x82
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	401a      	ands	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6899      	ldr	r1, [r3, #8]
 8002828:	2384      	movs	r3, #132	; 0x84
 800282a:	021b      	lsls	r3, r3, #8
 800282c:	400b      	ands	r3, r1
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	2102      	movs	r1, #2
 8002836:	400b      	ands	r3, r1
 8002838:	431a      	orrs	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	2101      	movs	r1, #1
 8002840:	400b      	ands	r3, r1
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6999      	ldr	r1, [r3, #24]
 8002848:	2380      	movs	r3, #128	; 0x80
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	400b      	ands	r3, r1
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	2138      	movs	r1, #56	; 0x38
 8002856:	400b      	ands	r3, r1
 8002858:	431a      	orrs	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	2180      	movs	r1, #128	; 0x80
 8002860:	400b      	ands	r3, r1
 8002862:	431a      	orrs	r2, r3
 8002864:	0011      	movs	r1, r2
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800286a:	2380      	movs	r3, #128	; 0x80
 800286c:	019b      	lsls	r3, r3, #6
 800286e:	401a      	ands	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	430a      	orrs	r2, r1
 8002876:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	0c1b      	lsrs	r3, r3, #16
 800287e:	2204      	movs	r2, #4
 8002880:	401a      	ands	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	2110      	movs	r1, #16
 8002888:	400b      	ands	r3, r1
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002890:	2108      	movs	r1, #8
 8002892:	400b      	ands	r3, r1
 8002894:	431a      	orrs	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68d9      	ldr	r1, [r3, #12]
 800289a:	23f0      	movs	r3, #240	; 0xf0
 800289c:	011b      	lsls	r3, r3, #4
 800289e:	400b      	ands	r3, r1
 80028a0:	431a      	orrs	r2, r3
 80028a2:	0011      	movs	r1, r2
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	2380      	movs	r3, #128	; 0x80
 80028a8:	015b      	lsls	r3, r3, #5
 80028aa:	401a      	ands	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	69da      	ldr	r2, [r3, #28]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4907      	ldr	r1, [pc, #28]	; (80028dc <HAL_SPI_Init+0x16c>)
 80028c0:	400a      	ands	r2, r1
 80028c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	225d      	movs	r2, #93	; 0x5d
 80028ce:	2101      	movs	r1, #1
 80028d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	0018      	movs	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b004      	add	sp, #16
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	fffff7ff 	.word	0xfffff7ff

080028e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e044      	b.n	800297c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d107      	bne.n	800290a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2274      	movs	r2, #116	; 0x74
 80028fe:	2100      	movs	r1, #0
 8002900:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	0018      	movs	r0, r3
 8002906:	f7fe fd69 	bl	80013dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2224      	movs	r2, #36	; 0x24
 800290e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2101      	movs	r1, #1
 800291c:	438a      	bics	r2, r1
 800291e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	0018      	movs	r0, r3
 8002924:	f000 fac0 	bl	8002ea8 <UART_SetConfig>
 8002928:	0003      	movs	r3, r0
 800292a:	2b01      	cmp	r3, #1
 800292c:	d101      	bne.n	8002932 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e024      	b.n	800297c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	0018      	movs	r0, r3
 800293e:	f000 fc3b 	bl	80031b8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	490d      	ldr	r1, [pc, #52]	; (8002984 <HAL_UART_Init+0xa4>)
 800294e:	400a      	ands	r2, r1
 8002950:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	212a      	movs	r1, #42	; 0x2a
 800295e:	438a      	bics	r2, r1
 8002960:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2101      	movs	r1, #1
 800296e:	430a      	orrs	r2, r1
 8002970:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	0018      	movs	r0, r3
 8002976:	f000 fcd3 	bl	8003320 <UART_CheckIdleState>
 800297a:	0003      	movs	r3, r0
}
 800297c:	0018      	movs	r0, r3
 800297e:	46bd      	mov	sp, r7
 8002980:	b002      	add	sp, #8
 8002982:	bd80      	pop	{r7, pc}
 8002984:	ffffb7ff 	.word	0xffffb7ff

08002988 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08a      	sub	sp, #40	; 0x28
 800298c:	af02      	add	r7, sp, #8
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	603b      	str	r3, [r7, #0]
 8002994:	1dbb      	adds	r3, r7, #6
 8002996:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800299c:	2b20      	cmp	r3, #32
 800299e:	d000      	beq.n	80029a2 <HAL_UART_Transmit+0x1a>
 80029a0:	e096      	b.n	8002ad0 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <HAL_UART_Transmit+0x28>
 80029a8:	1dbb      	adds	r3, r7, #6
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e08e      	b.n	8002ad2 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	2380      	movs	r3, #128	; 0x80
 80029ba:	015b      	lsls	r3, r3, #5
 80029bc:	429a      	cmp	r2, r3
 80029be:	d109      	bne.n	80029d4 <HAL_UART_Transmit+0x4c>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d105      	bne.n	80029d4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2201      	movs	r2, #1
 80029cc:	4013      	ands	r3, r2
 80029ce:	d001      	beq.n	80029d4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e07e      	b.n	8002ad2 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2274      	movs	r2, #116	; 0x74
 80029d8:	5c9b      	ldrb	r3, [r3, r2]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d101      	bne.n	80029e2 <HAL_UART_Transmit+0x5a>
 80029de:	2302      	movs	r3, #2
 80029e0:	e077      	b.n	8002ad2 <HAL_UART_Transmit+0x14a>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2274      	movs	r2, #116	; 0x74
 80029e6:	2101      	movs	r1, #1
 80029e8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2280      	movs	r2, #128	; 0x80
 80029ee:	2100      	movs	r1, #0
 80029f0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2221      	movs	r2, #33	; 0x21
 80029f6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029f8:	f7fe fdfe 	bl	80015f8 <HAL_GetTick>
 80029fc:	0003      	movs	r3, r0
 80029fe:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	1dba      	adds	r2, r7, #6
 8002a04:	2150      	movs	r1, #80	; 0x50
 8002a06:	8812      	ldrh	r2, [r2, #0]
 8002a08:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	1dba      	adds	r2, r7, #6
 8002a0e:	2152      	movs	r1, #82	; 0x52
 8002a10:	8812      	ldrh	r2, [r2, #0]
 8002a12:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	2380      	movs	r3, #128	; 0x80
 8002a1a:	015b      	lsls	r3, r3, #5
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d108      	bne.n	8002a32 <HAL_UART_Transmit+0xaa>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d104      	bne.n	8002a32 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	61bb      	str	r3, [r7, #24]
 8002a30:	e003      	b.n	8002a3a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2274      	movs	r2, #116	; 0x74
 8002a3e:	2100      	movs	r1, #0
 8002a40:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002a42:	e02d      	b.n	8002aa0 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	0013      	movs	r3, r2
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2180      	movs	r1, #128	; 0x80
 8002a52:	f000 fcad 	bl	80033b0 <UART_WaitOnFlagUntilTimeout>
 8002a56:	1e03      	subs	r3, r0, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e039      	b.n	8002ad2 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10b      	bne.n	8002a7c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	881a      	ldrh	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	05d2      	lsls	r2, r2, #23
 8002a6e:	0dd2      	lsrs	r2, r2, #23
 8002a70:	b292      	uxth	r2, r2
 8002a72:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	3302      	adds	r3, #2
 8002a78:	61bb      	str	r3, [r7, #24]
 8002a7a:	e008      	b.n	8002a8e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	781a      	ldrb	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	b292      	uxth	r2, r2
 8002a86:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2252      	movs	r2, #82	; 0x52
 8002a92:	5a9b      	ldrh	r3, [r3, r2]
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	3b01      	subs	r3, #1
 8002a98:	b299      	uxth	r1, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2252      	movs	r2, #82	; 0x52
 8002a9e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2252      	movs	r2, #82	; 0x52
 8002aa4:	5a9b      	ldrh	r3, [r3, r2]
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1cb      	bne.n	8002a44 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	0013      	movs	r3, r2
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2140      	movs	r1, #64	; 0x40
 8002aba:	f000 fc79 	bl	80033b0 <UART_WaitOnFlagUntilTimeout>
 8002abe:	1e03      	subs	r3, r0, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e005      	b.n	8002ad2 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2220      	movs	r2, #32
 8002aca:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	e000      	b.n	8002ad2 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002ad0:	2302      	movs	r3, #2
  }
}
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	b008      	add	sp, #32
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08a      	sub	sp, #40	; 0x28
 8002ae0:	af02      	add	r7, sp, #8
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	603b      	str	r3, [r7, #0]
 8002ae8:	1dbb      	adds	r3, r7, #6
 8002aea:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af0:	2b20      	cmp	r3, #32
 8002af2:	d000      	beq.n	8002af6 <HAL_UART_Receive+0x1a>
 8002af4:	e0da      	b.n	8002cac <HAL_UART_Receive+0x1d0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <HAL_UART_Receive+0x28>
 8002afc:	1dbb      	adds	r3, r7, #6
 8002afe:	881b      	ldrh	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e0d2      	b.n	8002cae <HAL_UART_Receive+0x1d2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	2380      	movs	r3, #128	; 0x80
 8002b0e:	015b      	lsls	r3, r3, #5
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d109      	bne.n	8002b28 <HAL_UART_Receive+0x4c>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d105      	bne.n	8002b28 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	4013      	ands	r3, r2
 8002b22:	d001      	beq.n	8002b28 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e0c2      	b.n	8002cae <HAL_UART_Receive+0x1d2>
      }
    }

    __HAL_LOCK(huart);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2274      	movs	r2, #116	; 0x74
 8002b2c:	5c9b      	ldrb	r3, [r3, r2]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d101      	bne.n	8002b36 <HAL_UART_Receive+0x5a>
 8002b32:	2302      	movs	r3, #2
 8002b34:	e0bb      	b.n	8002cae <HAL_UART_Receive+0x1d2>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2274      	movs	r2, #116	; 0x74
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2280      	movs	r2, #128	; 0x80
 8002b42:	2100      	movs	r1, #0
 8002b44:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2222      	movs	r2, #34	; 0x22
 8002b4a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b52:	f7fe fd51 	bl	80015f8 <HAL_GetTick>
 8002b56:	0003      	movs	r3, r0
 8002b58:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	1dba      	adds	r2, r7, #6
 8002b5e:	2158      	movs	r1, #88	; 0x58
 8002b60:	8812      	ldrh	r2, [r2, #0]
 8002b62:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	1dba      	adds	r2, r7, #6
 8002b68:	215a      	movs	r1, #90	; 0x5a
 8002b6a:	8812      	ldrh	r2, [r2, #0]
 8002b6c:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	2380      	movs	r3, #128	; 0x80
 8002b74:	015b      	lsls	r3, r3, #5
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d10d      	bne.n	8002b96 <HAL_UART_Receive+0xba>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d104      	bne.n	8002b8c <HAL_UART_Receive+0xb0>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	225c      	movs	r2, #92	; 0x5c
 8002b86:	494c      	ldr	r1, [pc, #304]	; (8002cb8 <HAL_UART_Receive+0x1dc>)
 8002b88:	5299      	strh	r1, [r3, r2]
 8002b8a:	e02e      	b.n	8002bea <HAL_UART_Receive+0x10e>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	225c      	movs	r2, #92	; 0x5c
 8002b90:	21ff      	movs	r1, #255	; 0xff
 8002b92:	5299      	strh	r1, [r3, r2]
 8002b94:	e029      	b.n	8002bea <HAL_UART_Receive+0x10e>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10d      	bne.n	8002bba <HAL_UART_Receive+0xde>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d104      	bne.n	8002bb0 <HAL_UART_Receive+0xd4>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	225c      	movs	r2, #92	; 0x5c
 8002baa:	21ff      	movs	r1, #255	; 0xff
 8002bac:	5299      	strh	r1, [r3, r2]
 8002bae:	e01c      	b.n	8002bea <HAL_UART_Receive+0x10e>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	225c      	movs	r2, #92	; 0x5c
 8002bb4:	217f      	movs	r1, #127	; 0x7f
 8002bb6:	5299      	strh	r1, [r3, r2]
 8002bb8:	e017      	b.n	8002bea <HAL_UART_Receive+0x10e>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	2380      	movs	r3, #128	; 0x80
 8002bc0:	055b      	lsls	r3, r3, #21
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d10d      	bne.n	8002be2 <HAL_UART_Receive+0x106>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d104      	bne.n	8002bd8 <HAL_UART_Receive+0xfc>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	225c      	movs	r2, #92	; 0x5c
 8002bd2:	217f      	movs	r1, #127	; 0x7f
 8002bd4:	5299      	strh	r1, [r3, r2]
 8002bd6:	e008      	b.n	8002bea <HAL_UART_Receive+0x10e>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	225c      	movs	r2, #92	; 0x5c
 8002bdc:	213f      	movs	r1, #63	; 0x3f
 8002bde:	5299      	strh	r1, [r3, r2]
 8002be0:	e003      	b.n	8002bea <HAL_UART_Receive+0x10e>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	225c      	movs	r2, #92	; 0x5c
 8002be6:	2100      	movs	r1, #0
 8002be8:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002bea:	2312      	movs	r3, #18
 8002bec:	18fb      	adds	r3, r7, r3
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	215c      	movs	r1, #92	; 0x5c
 8002bf2:	5a52      	ldrh	r2, [r2, r1]
 8002bf4:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	2380      	movs	r3, #128	; 0x80
 8002bfc:	015b      	lsls	r3, r3, #5
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d108      	bne.n	8002c14 <HAL_UART_Receive+0x138>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d104      	bne.n	8002c14 <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	61bb      	str	r3, [r7, #24]
 8002c12:	e003      	b.n	8002c1c <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2274      	movs	r2, #116	; 0x74
 8002c20:	2100      	movs	r1, #0
 8002c22:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002c24:	e037      	b.n	8002c96 <HAL_UART_Receive+0x1ba>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	0013      	movs	r3, r2
 8002c30:	2200      	movs	r2, #0
 8002c32:	2120      	movs	r1, #32
 8002c34:	f000 fbbc 	bl	80033b0 <UART_WaitOnFlagUntilTimeout>
 8002c38:	1e03      	subs	r3, r0, #0
 8002c3a:	d001      	beq.n	8002c40 <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e036      	b.n	8002cae <HAL_UART_Receive+0x1d2>
      }
      if (pdata8bits == NULL)
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10e      	bne.n	8002c64 <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	2212      	movs	r2, #18
 8002c50:	18ba      	adds	r2, r7, r2
 8002c52:	8812      	ldrh	r2, [r2, #0]
 8002c54:	4013      	ands	r3, r2
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	3302      	adds	r3, #2
 8002c60:	61bb      	str	r3, [r7, #24]
 8002c62:	e00f      	b.n	8002c84 <HAL_UART_Receive+0x1a8>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2212      	movs	r2, #18
 8002c70:	18ba      	adds	r2, r7, r2
 8002c72:	8812      	ldrh	r2, [r2, #0]
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	4013      	ands	r3, r2
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	3301      	adds	r3, #1
 8002c82:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	225a      	movs	r2, #90	; 0x5a
 8002c88:	5a9b      	ldrh	r3, [r3, r2]
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	b299      	uxth	r1, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	225a      	movs	r2, #90	; 0x5a
 8002c94:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	225a      	movs	r2, #90	; 0x5a
 8002c9a:	5a9b      	ldrh	r3, [r3, r2]
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1c1      	bne.n	8002c26 <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	e000      	b.n	8002cae <HAL_UART_Receive+0x1d2>
  }
  else
  {
    return HAL_BUSY;
 8002cac:	2302      	movs	r3, #2
  }
}
 8002cae:	0018      	movs	r0, r3
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	b008      	add	sp, #32
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	000001ff 	.word	0x000001ff

08002cbc <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b096      	sub	sp, #88	; 0x58
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cc4:	f3ef 8310 	mrs	r3, PRIMASK
 8002cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8002ccc:	657b      	str	r3, [r7, #84]	; 0x54
 8002cce:	2301      	movs	r3, #1
 8002cd0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd4:	f383 8810 	msr	PRIMASK, r3
}
 8002cd8:	46c0      	nop			; (mov r8, r8)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	496f      	ldr	r1, [pc, #444]	; (8002ea4 <HAL_UART_Abort+0x1e8>)
 8002ce6:	400a      	ands	r2, r1
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cec:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cf0:	f383 8810 	msr	PRIMASK, r3
}
 8002cf4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cf6:	f3ef 8310 	mrs	r3, PRIMASK
 8002cfa:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8002cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cfe:	653b      	str	r3, [r7, #80]	; 0x50
 8002d00:	2301      	movs	r3, #1
 8002d02:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d06:	f383 8810 	msr	PRIMASK, r3
}
 8002d0a:	46c0      	nop			; (mov r8, r8)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2101      	movs	r1, #1
 8002d18:	438a      	bics	r2, r1
 8002d1a:	609a      	str	r2, [r3, #8]
 8002d1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d1e:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d22:	f383 8810 	msr	PRIMASK, r3
}
 8002d26:	46c0      	nop			; (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d118      	bne.n	8002d62 <HAL_UART_Abort+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d30:	f3ef 8310 	mrs	r3, PRIMASK
 8002d34:	623b      	str	r3, [r7, #32]
  return(result);
 8002d36:	6a3b      	ldr	r3, [r7, #32]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002d38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	f383 8810 	msr	PRIMASK, r3
}
 8002d44:	46c0      	nop			; (mov r8, r8)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2110      	movs	r1, #16
 8002d52:	438a      	bics	r2, r1
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d58:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5c:	f383 8810 	msr	PRIMASK, r3
}
 8002d60:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	2280      	movs	r2, #128	; 0x80
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	2b80      	cmp	r3, #128	; 0x80
 8002d6e:	d135      	bne.n	8002ddc <HAL_UART_Abort+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d70:	f3ef 8310 	mrs	r3, PRIMASK
 8002d74:	617b      	str	r3, [r7, #20]
  return(result);
 8002d76:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002d78:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	f383 8810 	msr	PRIMASK, r3
}
 8002d84:	46c0      	nop			; (mov r8, r8)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2180      	movs	r1, #128	; 0x80
 8002d92:	438a      	bics	r2, r1
 8002d94:	609a      	str	r2, [r3, #8]
 8002d96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	f383 8810 	msr	PRIMASK, r3
}
 8002da0:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d018      	beq.n	8002ddc <HAL_UART_Abort+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dae:	2200      	movs	r2, #0
 8002db0:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002db6:	0018      	movs	r0, r3
 8002db8:	f7fe fcdc 	bl	8001774 <HAL_DMA_Abort>
 8002dbc:	1e03      	subs	r3, r0, #0
 8002dbe:	d00d      	beq.n	8002ddc <HAL_UART_Abort+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f7fe fd0d 	bl	80017e4 <HAL_DMA_GetError>
 8002dca:	0003      	movs	r3, r0
 8002dcc:	2b20      	cmp	r3, #32
 8002dce:	d105      	bne.n	8002ddc <HAL_UART_Abort+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2280      	movs	r2, #128	; 0x80
 8002dd4:	2110      	movs	r1, #16
 8002dd6:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e05e      	b.n	8002e9a <HAL_UART_Abort+0x1de>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	2240      	movs	r2, #64	; 0x40
 8002de4:	4013      	ands	r3, r2
 8002de6:	2b40      	cmp	r3, #64	; 0x40
 8002de8:	d135      	bne.n	8002e56 <HAL_UART_Abort+0x19a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dea:	f3ef 8310 	mrs	r3, PRIMASK
 8002dee:	60bb      	str	r3, [r7, #8]
  return(result);
 8002df0:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002df2:	647b      	str	r3, [r7, #68]	; 0x44
 8002df4:	2301      	movs	r3, #1
 8002df6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f383 8810 	msr	PRIMASK, r3
}
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2140      	movs	r1, #64	; 0x40
 8002e0c:	438a      	bics	r2, r1
 8002e0e:	609a      	str	r2, [r3, #8]
 8002e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	f383 8810 	msr	PRIMASK, r3
}
 8002e1a:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d018      	beq.n	8002e56 <HAL_UART_Abort+0x19a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e28:	2200      	movs	r2, #0
 8002e2a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e30:	0018      	movs	r0, r3
 8002e32:	f7fe fc9f 	bl	8001774 <HAL_DMA_Abort>
 8002e36:	1e03      	subs	r3, r0, #0
 8002e38:	d00d      	beq.n	8002e56 <HAL_UART_Abort+0x19a>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f7fe fcd0 	bl	80017e4 <HAL_DMA_GetError>
 8002e44:	0003      	movs	r3, r0
 8002e46:	2b20      	cmp	r3, #32
 8002e48:	d105      	bne.n	8002e56 <HAL_UART_Abort+0x19a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2280      	movs	r2, #128	; 0x80
 8002e4e:	2110      	movs	r1, #16
 8002e50:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e021      	b.n	8002e9a <HAL_UART_Abort+0x1de>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2252      	movs	r2, #82	; 0x52
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	225a      	movs	r2, #90	; 0x5a
 8002e62:	2100      	movs	r1, #0
 8002e64:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	220f      	movs	r2, #15
 8002e6c:	621a      	str	r2, [r3, #32]


  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	699a      	ldr	r2, [r3, #24]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2108      	movs	r1, #8
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2220      	movs	r2, #32
 8002e82:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2220      	movs	r2, #32
 8002e88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	661a      	str	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2280      	movs	r2, #128	; 0x80
 8002e94:	2100      	movs	r1, #0
 8002e96:	5099      	str	r1, [r3, r2]

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	b016      	add	sp, #88	; 0x58
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	fffffe1f 	.word	0xfffffe1f

08002ea8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b088      	sub	sp, #32
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002eb0:	231e      	movs	r3, #30
 8002eb2:	18fb      	adds	r3, r7, r3
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4aaf      	ldr	r2, [pc, #700]	; (8003194 <UART_SetConfig+0x2ec>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	0019      	movs	r1, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	4aaa      	ldr	r2, [pc, #680]	; (8003198 <UART_SetConfig+0x2f0>)
 8002eee:	4013      	ands	r3, r2
 8002ef0:	0019      	movs	r1, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	4aa1      	ldr	r2, [pc, #644]	; (800319c <UART_SetConfig+0x2f4>)
 8002f16:	4013      	ands	r3, r2
 8002f18:	0019      	movs	r1, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	430a      	orrs	r2, r1
 8002f22:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a9d      	ldr	r2, [pc, #628]	; (80031a0 <UART_SetConfig+0x2f8>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d127      	bne.n	8002f7e <UART_SetConfig+0xd6>
 8002f2e:	4b9d      	ldr	r3, [pc, #628]	; (80031a4 <UART_SetConfig+0x2fc>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	2203      	movs	r2, #3
 8002f34:	4013      	ands	r3, r2
 8002f36:	2b03      	cmp	r3, #3
 8002f38:	d00d      	beq.n	8002f56 <UART_SetConfig+0xae>
 8002f3a:	d81b      	bhi.n	8002f74 <UART_SetConfig+0xcc>
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d014      	beq.n	8002f6a <UART_SetConfig+0xc2>
 8002f40:	d818      	bhi.n	8002f74 <UART_SetConfig+0xcc>
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d002      	beq.n	8002f4c <UART_SetConfig+0xa4>
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d00a      	beq.n	8002f60 <UART_SetConfig+0xb8>
 8002f4a:	e013      	b.n	8002f74 <UART_SetConfig+0xcc>
 8002f4c:	231f      	movs	r3, #31
 8002f4e:	18fb      	adds	r3, r7, r3
 8002f50:	2200      	movs	r2, #0
 8002f52:	701a      	strb	r2, [r3, #0]
 8002f54:	e065      	b.n	8003022 <UART_SetConfig+0x17a>
 8002f56:	231f      	movs	r3, #31
 8002f58:	18fb      	adds	r3, r7, r3
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	701a      	strb	r2, [r3, #0]
 8002f5e:	e060      	b.n	8003022 <UART_SetConfig+0x17a>
 8002f60:	231f      	movs	r3, #31
 8002f62:	18fb      	adds	r3, r7, r3
 8002f64:	2204      	movs	r2, #4
 8002f66:	701a      	strb	r2, [r3, #0]
 8002f68:	e05b      	b.n	8003022 <UART_SetConfig+0x17a>
 8002f6a:	231f      	movs	r3, #31
 8002f6c:	18fb      	adds	r3, r7, r3
 8002f6e:	2208      	movs	r2, #8
 8002f70:	701a      	strb	r2, [r3, #0]
 8002f72:	e056      	b.n	8003022 <UART_SetConfig+0x17a>
 8002f74:	231f      	movs	r3, #31
 8002f76:	18fb      	adds	r3, r7, r3
 8002f78:	2210      	movs	r2, #16
 8002f7a:	701a      	strb	r2, [r3, #0]
 8002f7c:	e051      	b.n	8003022 <UART_SetConfig+0x17a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a89      	ldr	r2, [pc, #548]	; (80031a8 <UART_SetConfig+0x300>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d134      	bne.n	8002ff2 <UART_SetConfig+0x14a>
 8002f88:	4b86      	ldr	r3, [pc, #536]	; (80031a4 <UART_SetConfig+0x2fc>)
 8002f8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f8c:	23c0      	movs	r3, #192	; 0xc0
 8002f8e:	029b      	lsls	r3, r3, #10
 8002f90:	4013      	ands	r3, r2
 8002f92:	22c0      	movs	r2, #192	; 0xc0
 8002f94:	0292      	lsls	r2, r2, #10
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d017      	beq.n	8002fca <UART_SetConfig+0x122>
 8002f9a:	22c0      	movs	r2, #192	; 0xc0
 8002f9c:	0292      	lsls	r2, r2, #10
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d822      	bhi.n	8002fe8 <UART_SetConfig+0x140>
 8002fa2:	2280      	movs	r2, #128	; 0x80
 8002fa4:	0292      	lsls	r2, r2, #10
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d019      	beq.n	8002fde <UART_SetConfig+0x136>
 8002faa:	2280      	movs	r2, #128	; 0x80
 8002fac:	0292      	lsls	r2, r2, #10
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d81a      	bhi.n	8002fe8 <UART_SetConfig+0x140>
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d004      	beq.n	8002fc0 <UART_SetConfig+0x118>
 8002fb6:	2280      	movs	r2, #128	; 0x80
 8002fb8:	0252      	lsls	r2, r2, #9
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d00a      	beq.n	8002fd4 <UART_SetConfig+0x12c>
 8002fbe:	e013      	b.n	8002fe8 <UART_SetConfig+0x140>
 8002fc0:	231f      	movs	r3, #31
 8002fc2:	18fb      	adds	r3, r7, r3
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	701a      	strb	r2, [r3, #0]
 8002fc8:	e02b      	b.n	8003022 <UART_SetConfig+0x17a>
 8002fca:	231f      	movs	r3, #31
 8002fcc:	18fb      	adds	r3, r7, r3
 8002fce:	2202      	movs	r2, #2
 8002fd0:	701a      	strb	r2, [r3, #0]
 8002fd2:	e026      	b.n	8003022 <UART_SetConfig+0x17a>
 8002fd4:	231f      	movs	r3, #31
 8002fd6:	18fb      	adds	r3, r7, r3
 8002fd8:	2204      	movs	r2, #4
 8002fda:	701a      	strb	r2, [r3, #0]
 8002fdc:	e021      	b.n	8003022 <UART_SetConfig+0x17a>
 8002fde:	231f      	movs	r3, #31
 8002fe0:	18fb      	adds	r3, r7, r3
 8002fe2:	2208      	movs	r2, #8
 8002fe4:	701a      	strb	r2, [r3, #0]
 8002fe6:	e01c      	b.n	8003022 <UART_SetConfig+0x17a>
 8002fe8:	231f      	movs	r3, #31
 8002fea:	18fb      	adds	r3, r7, r3
 8002fec:	2210      	movs	r2, #16
 8002fee:	701a      	strb	r2, [r3, #0]
 8002ff0:	e017      	b.n	8003022 <UART_SetConfig+0x17a>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a6d      	ldr	r2, [pc, #436]	; (80031ac <UART_SetConfig+0x304>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d104      	bne.n	8003006 <UART_SetConfig+0x15e>
 8002ffc:	231f      	movs	r3, #31
 8002ffe:	18fb      	adds	r3, r7, r3
 8003000:	2200      	movs	r2, #0
 8003002:	701a      	strb	r2, [r3, #0]
 8003004:	e00d      	b.n	8003022 <UART_SetConfig+0x17a>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a69      	ldr	r2, [pc, #420]	; (80031b0 <UART_SetConfig+0x308>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d104      	bne.n	800301a <UART_SetConfig+0x172>
 8003010:	231f      	movs	r3, #31
 8003012:	18fb      	adds	r3, r7, r3
 8003014:	2200      	movs	r2, #0
 8003016:	701a      	strb	r2, [r3, #0]
 8003018:	e003      	b.n	8003022 <UART_SetConfig+0x17a>
 800301a:	231f      	movs	r3, #31
 800301c:	18fb      	adds	r3, r7, r3
 800301e:	2210      	movs	r2, #16
 8003020:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69da      	ldr	r2, [r3, #28]
 8003026:	2380      	movs	r3, #128	; 0x80
 8003028:	021b      	lsls	r3, r3, #8
 800302a:	429a      	cmp	r2, r3
 800302c:	d15d      	bne.n	80030ea <UART_SetConfig+0x242>
  {
    switch (clocksource)
 800302e:	231f      	movs	r3, #31
 8003030:	18fb      	adds	r3, r7, r3
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b08      	cmp	r3, #8
 8003036:	d015      	beq.n	8003064 <UART_SetConfig+0x1bc>
 8003038:	dc18      	bgt.n	800306c <UART_SetConfig+0x1c4>
 800303a:	2b04      	cmp	r3, #4
 800303c:	d00d      	beq.n	800305a <UART_SetConfig+0x1b2>
 800303e:	dc15      	bgt.n	800306c <UART_SetConfig+0x1c4>
 8003040:	2b00      	cmp	r3, #0
 8003042:	d002      	beq.n	800304a <UART_SetConfig+0x1a2>
 8003044:	2b02      	cmp	r3, #2
 8003046:	d005      	beq.n	8003054 <UART_SetConfig+0x1ac>
 8003048:	e010      	b.n	800306c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800304a:	f7ff fa63 	bl	8002514 <HAL_RCC_GetPCLK1Freq>
 800304e:	0003      	movs	r3, r0
 8003050:	61bb      	str	r3, [r7, #24]
        break;
 8003052:	e012      	b.n	800307a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003054:	4b57      	ldr	r3, [pc, #348]	; (80031b4 <UART_SetConfig+0x30c>)
 8003056:	61bb      	str	r3, [r7, #24]
        break;
 8003058:	e00f      	b.n	800307a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800305a:	f7ff f9d1 	bl	8002400 <HAL_RCC_GetSysClockFreq>
 800305e:	0003      	movs	r3, r0
 8003060:	61bb      	str	r3, [r7, #24]
        break;
 8003062:	e00a      	b.n	800307a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003064:	2380      	movs	r3, #128	; 0x80
 8003066:	021b      	lsls	r3, r3, #8
 8003068:	61bb      	str	r3, [r7, #24]
        break;
 800306a:	e006      	b.n	800307a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800306c:	2300      	movs	r3, #0
 800306e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003070:	231e      	movs	r3, #30
 8003072:	18fb      	adds	r3, r7, r3
 8003074:	2201      	movs	r2, #1
 8003076:	701a      	strb	r2, [r3, #0]
        break;
 8003078:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d100      	bne.n	8003082 <UART_SetConfig+0x1da>
 8003080:	e07b      	b.n	800317a <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	005a      	lsls	r2, r3, #1
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	085b      	lsrs	r3, r3, #1
 800308c:	18d2      	adds	r2, r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	0019      	movs	r1, r3
 8003094:	0010      	movs	r0, r2
 8003096:	f7fd f841 	bl	800011c <__udivsi3>
 800309a:	0003      	movs	r3, r0
 800309c:	b29b      	uxth	r3, r3
 800309e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	2b0f      	cmp	r3, #15
 80030a4:	d91c      	bls.n	80030e0 <UART_SetConfig+0x238>
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	2380      	movs	r3, #128	; 0x80
 80030aa:	025b      	lsls	r3, r3, #9
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d217      	bcs.n	80030e0 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	200e      	movs	r0, #14
 80030b6:	183b      	adds	r3, r7, r0
 80030b8:	210f      	movs	r1, #15
 80030ba:	438a      	bics	r2, r1
 80030bc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	085b      	lsrs	r3, r3, #1
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	2207      	movs	r2, #7
 80030c6:	4013      	ands	r3, r2
 80030c8:	b299      	uxth	r1, r3
 80030ca:	183b      	adds	r3, r7, r0
 80030cc:	183a      	adds	r2, r7, r0
 80030ce:	8812      	ldrh	r2, [r2, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	183a      	adds	r2, r7, r0
 80030da:	8812      	ldrh	r2, [r2, #0]
 80030dc:	60da      	str	r2, [r3, #12]
 80030de:	e04c      	b.n	800317a <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80030e0:	231e      	movs	r3, #30
 80030e2:	18fb      	adds	r3, r7, r3
 80030e4:	2201      	movs	r2, #1
 80030e6:	701a      	strb	r2, [r3, #0]
 80030e8:	e047      	b.n	800317a <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030ea:	231f      	movs	r3, #31
 80030ec:	18fb      	adds	r3, r7, r3
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	d015      	beq.n	8003120 <UART_SetConfig+0x278>
 80030f4:	dc18      	bgt.n	8003128 <UART_SetConfig+0x280>
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	d00d      	beq.n	8003116 <UART_SetConfig+0x26e>
 80030fa:	dc15      	bgt.n	8003128 <UART_SetConfig+0x280>
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d002      	beq.n	8003106 <UART_SetConfig+0x25e>
 8003100:	2b02      	cmp	r3, #2
 8003102:	d005      	beq.n	8003110 <UART_SetConfig+0x268>
 8003104:	e010      	b.n	8003128 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003106:	f7ff fa05 	bl	8002514 <HAL_RCC_GetPCLK1Freq>
 800310a:	0003      	movs	r3, r0
 800310c:	61bb      	str	r3, [r7, #24]
        break;
 800310e:	e012      	b.n	8003136 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003110:	4b28      	ldr	r3, [pc, #160]	; (80031b4 <UART_SetConfig+0x30c>)
 8003112:	61bb      	str	r3, [r7, #24]
        break;
 8003114:	e00f      	b.n	8003136 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003116:	f7ff f973 	bl	8002400 <HAL_RCC_GetSysClockFreq>
 800311a:	0003      	movs	r3, r0
 800311c:	61bb      	str	r3, [r7, #24]
        break;
 800311e:	e00a      	b.n	8003136 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003120:	2380      	movs	r3, #128	; 0x80
 8003122:	021b      	lsls	r3, r3, #8
 8003124:	61bb      	str	r3, [r7, #24]
        break;
 8003126:	e006      	b.n	8003136 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800312c:	231e      	movs	r3, #30
 800312e:	18fb      	adds	r3, r7, r3
 8003130:	2201      	movs	r2, #1
 8003132:	701a      	strb	r2, [r3, #0]
        break;
 8003134:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d01e      	beq.n	800317a <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	085a      	lsrs	r2, r3, #1
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	18d2      	adds	r2, r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	0019      	movs	r1, r3
 800314c:	0010      	movs	r0, r2
 800314e:	f7fc ffe5 	bl	800011c <__udivsi3>
 8003152:	0003      	movs	r3, r0
 8003154:	b29b      	uxth	r3, r3
 8003156:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	2b0f      	cmp	r3, #15
 800315c:	d909      	bls.n	8003172 <UART_SetConfig+0x2ca>
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	2380      	movs	r3, #128	; 0x80
 8003162:	025b      	lsls	r3, r3, #9
 8003164:	429a      	cmp	r2, r3
 8003166:	d204      	bcs.n	8003172 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	60da      	str	r2, [r3, #12]
 8003170:	e003      	b.n	800317a <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8003172:	231e      	movs	r3, #30
 8003174:	18fb      	adds	r3, r7, r3
 8003176:	2201      	movs	r2, #1
 8003178:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003186:	231e      	movs	r3, #30
 8003188:	18fb      	adds	r3, r7, r3
 800318a:	781b      	ldrb	r3, [r3, #0]
}
 800318c:	0018      	movs	r0, r3
 800318e:	46bd      	mov	sp, r7
 8003190:	b008      	add	sp, #32
 8003192:	bd80      	pop	{r7, pc}
 8003194:	efff69f3 	.word	0xefff69f3
 8003198:	ffffcfff 	.word	0xffffcfff
 800319c:	fffff4ff 	.word	0xfffff4ff
 80031a0:	40013800 	.word	0x40013800
 80031a4:	40021000 	.word	0x40021000
 80031a8:	40004400 	.word	0x40004400
 80031ac:	40004800 	.word	0x40004800
 80031b0:	40004c00 	.word	0x40004c00
 80031b4:	007a1200 	.word	0x007a1200

080031b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	2201      	movs	r2, #1
 80031c6:	4013      	ands	r3, r2
 80031c8:	d00b      	beq.n	80031e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	4a4a      	ldr	r2, [pc, #296]	; (80032fc <UART_AdvFeatureConfig+0x144>)
 80031d2:	4013      	ands	r3, r2
 80031d4:	0019      	movs	r1, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	2202      	movs	r2, #2
 80031e8:	4013      	ands	r3, r2
 80031ea:	d00b      	beq.n	8003204 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	4a43      	ldr	r2, [pc, #268]	; (8003300 <UART_AdvFeatureConfig+0x148>)
 80031f4:	4013      	ands	r3, r2
 80031f6:	0019      	movs	r1, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	2204      	movs	r2, #4
 800320a:	4013      	ands	r3, r2
 800320c:	d00b      	beq.n	8003226 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	4a3b      	ldr	r2, [pc, #236]	; (8003304 <UART_AdvFeatureConfig+0x14c>)
 8003216:	4013      	ands	r3, r2
 8003218:	0019      	movs	r1, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	2208      	movs	r2, #8
 800322c:	4013      	ands	r3, r2
 800322e:	d00b      	beq.n	8003248 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	4a34      	ldr	r2, [pc, #208]	; (8003308 <UART_AdvFeatureConfig+0x150>)
 8003238:	4013      	ands	r3, r2
 800323a:	0019      	movs	r1, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	2210      	movs	r2, #16
 800324e:	4013      	ands	r3, r2
 8003250:	d00b      	beq.n	800326a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	4a2c      	ldr	r2, [pc, #176]	; (800330c <UART_AdvFeatureConfig+0x154>)
 800325a:	4013      	ands	r3, r2
 800325c:	0019      	movs	r1, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	2220      	movs	r2, #32
 8003270:	4013      	ands	r3, r2
 8003272:	d00b      	beq.n	800328c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	4a25      	ldr	r2, [pc, #148]	; (8003310 <UART_AdvFeatureConfig+0x158>)
 800327c:	4013      	ands	r3, r2
 800327e:	0019      	movs	r1, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	2240      	movs	r2, #64	; 0x40
 8003292:	4013      	ands	r3, r2
 8003294:	d01d      	beq.n	80032d2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	4a1d      	ldr	r2, [pc, #116]	; (8003314 <UART_AdvFeatureConfig+0x15c>)
 800329e:	4013      	ands	r3, r2
 80032a0:	0019      	movs	r1, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032b2:	2380      	movs	r3, #128	; 0x80
 80032b4:	035b      	lsls	r3, r3, #13
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d10b      	bne.n	80032d2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	4a15      	ldr	r2, [pc, #84]	; (8003318 <UART_AdvFeatureConfig+0x160>)
 80032c2:	4013      	ands	r3, r2
 80032c4:	0019      	movs	r1, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	2280      	movs	r2, #128	; 0x80
 80032d8:	4013      	ands	r3, r2
 80032da:	d00b      	beq.n	80032f4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	4a0e      	ldr	r2, [pc, #56]	; (800331c <UART_AdvFeatureConfig+0x164>)
 80032e4:	4013      	ands	r3, r2
 80032e6:	0019      	movs	r1, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	605a      	str	r2, [r3, #4]
  }
}
 80032f4:	46c0      	nop			; (mov r8, r8)
 80032f6:	46bd      	mov	sp, r7
 80032f8:	b002      	add	sp, #8
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	fffdffff 	.word	0xfffdffff
 8003300:	fffeffff 	.word	0xfffeffff
 8003304:	fffbffff 	.word	0xfffbffff
 8003308:	ffff7fff 	.word	0xffff7fff
 800330c:	ffffefff 	.word	0xffffefff
 8003310:	ffffdfff 	.word	0xffffdfff
 8003314:	ffefffff 	.word	0xffefffff
 8003318:	ff9fffff 	.word	0xff9fffff
 800331c:	fff7ffff 	.word	0xfff7ffff

08003320 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af02      	add	r7, sp, #8
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2280      	movs	r2, #128	; 0x80
 800332c:	2100      	movs	r1, #0
 800332e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003330:	f7fe f962 	bl	80015f8 <HAL_GetTick>
 8003334:	0003      	movs	r3, r0
 8003336:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2208      	movs	r2, #8
 8003340:	4013      	ands	r3, r2
 8003342:	2b08      	cmp	r3, #8
 8003344:	d10c      	bne.n	8003360 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2280      	movs	r2, #128	; 0x80
 800334a:	0391      	lsls	r1, r2, #14
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	4a17      	ldr	r2, [pc, #92]	; (80033ac <UART_CheckIdleState+0x8c>)
 8003350:	9200      	str	r2, [sp, #0]
 8003352:	2200      	movs	r2, #0
 8003354:	f000 f82c 	bl	80033b0 <UART_WaitOnFlagUntilTimeout>
 8003358:	1e03      	subs	r3, r0, #0
 800335a:	d001      	beq.n	8003360 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e021      	b.n	80033a4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2204      	movs	r2, #4
 8003368:	4013      	ands	r3, r2
 800336a:	2b04      	cmp	r3, #4
 800336c:	d10c      	bne.n	8003388 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2280      	movs	r2, #128	; 0x80
 8003372:	03d1      	lsls	r1, r2, #15
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	4a0d      	ldr	r2, [pc, #52]	; (80033ac <UART_CheckIdleState+0x8c>)
 8003378:	9200      	str	r2, [sp, #0]
 800337a:	2200      	movs	r2, #0
 800337c:	f000 f818 	bl	80033b0 <UART_WaitOnFlagUntilTimeout>
 8003380:	1e03      	subs	r3, r0, #0
 8003382:	d001      	beq.n	8003388 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e00d      	b.n	80033a4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2220      	movs	r2, #32
 800338c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2220      	movs	r2, #32
 8003392:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2274      	movs	r2, #116	; 0x74
 800339e:	2100      	movs	r1, #0
 80033a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	0018      	movs	r0, r3
 80033a6:	46bd      	mov	sp, r7
 80033a8:	b004      	add	sp, #16
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	01ffffff 	.word	0x01ffffff

080033b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b094      	sub	sp, #80	; 0x50
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	603b      	str	r3, [r7, #0]
 80033bc:	1dfb      	adds	r3, r7, #7
 80033be:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033c0:	e0a3      	b.n	800350a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033c4:	3301      	adds	r3, #1
 80033c6:	d100      	bne.n	80033ca <UART_WaitOnFlagUntilTimeout+0x1a>
 80033c8:	e09f      	b.n	800350a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ca:	f7fe f915 	bl	80015f8 <HAL_GetTick>
 80033ce:	0002      	movs	r2, r0
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d302      	bcc.n	80033e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80033da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d13d      	bne.n	800345c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033e0:	f3ef 8310 	mrs	r3, PRIMASK
 80033e4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80033e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033e8:	647b      	str	r3, [r7, #68]	; 0x44
 80033ea:	2301      	movs	r3, #1
 80033ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f0:	f383 8810 	msr	PRIMASK, r3
}
 80033f4:	46c0      	nop			; (mov r8, r8)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	494c      	ldr	r1, [pc, #304]	; (8003534 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003402:	400a      	ands	r2, r1
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003408:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800340a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340c:	f383 8810 	msr	PRIMASK, r3
}
 8003410:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003412:	f3ef 8310 	mrs	r3, PRIMASK
 8003416:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800341a:	643b      	str	r3, [r7, #64]	; 0x40
 800341c:	2301      	movs	r3, #1
 800341e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003422:	f383 8810 	msr	PRIMASK, r3
}
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689a      	ldr	r2, [r3, #8]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2101      	movs	r1, #1
 8003434:	438a      	bics	r2, r1
 8003436:	609a      	str	r2, [r3, #8]
 8003438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800343a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800343c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800343e:	f383 8810 	msr	PRIMASK, r3
}
 8003442:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2220      	movs	r2, #32
 8003448:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2220      	movs	r2, #32
 800344e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2274      	movs	r2, #116	; 0x74
 8003454:	2100      	movs	r1, #0
 8003456:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e067      	b.n	800352c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2204      	movs	r2, #4
 8003464:	4013      	ands	r3, r2
 8003466:	d050      	beq.n	800350a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	69da      	ldr	r2, [r3, #28]
 800346e:	2380      	movs	r3, #128	; 0x80
 8003470:	011b      	lsls	r3, r3, #4
 8003472:	401a      	ands	r2, r3
 8003474:	2380      	movs	r3, #128	; 0x80
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	429a      	cmp	r2, r3
 800347a:	d146      	bne.n	800350a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2280      	movs	r2, #128	; 0x80
 8003482:	0112      	lsls	r2, r2, #4
 8003484:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003486:	f3ef 8310 	mrs	r3, PRIMASK
 800348a:	613b      	str	r3, [r7, #16]
  return(result);
 800348c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800348e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003490:	2301      	movs	r3, #1
 8003492:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f383 8810 	msr	PRIMASK, r3
}
 800349a:	46c0      	nop			; (mov r8, r8)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4923      	ldr	r1, [pc, #140]	; (8003534 <UART_WaitOnFlagUntilTimeout+0x184>)
 80034a8:	400a      	ands	r2, r1
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	f383 8810 	msr	PRIMASK, r3
}
 80034b6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034b8:	f3ef 8310 	mrs	r3, PRIMASK
 80034bc:	61fb      	str	r3, [r7, #28]
  return(result);
 80034be:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80034c2:	2301      	movs	r3, #1
 80034c4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	f383 8810 	msr	PRIMASK, r3
}
 80034cc:	46c0      	nop			; (mov r8, r8)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2101      	movs	r1, #1
 80034da:	438a      	bics	r2, r1
 80034dc:	609a      	str	r2, [r3, #8]
 80034de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	f383 8810 	msr	PRIMASK, r3
}
 80034e8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2220      	movs	r2, #32
 80034ee:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2220      	movs	r2, #32
 80034f4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2280      	movs	r2, #128	; 0x80
 80034fa:	2120      	movs	r1, #32
 80034fc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2274      	movs	r2, #116	; 0x74
 8003502:	2100      	movs	r1, #0
 8003504:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e010      	b.n	800352c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	4013      	ands	r3, r2
 8003514:	68ba      	ldr	r2, [r7, #8]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	425a      	negs	r2, r3
 800351a:	4153      	adcs	r3, r2
 800351c:	b2db      	uxtb	r3, r3
 800351e:	001a      	movs	r2, r3
 8003520:	1dfb      	adds	r3, r7, #7
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	429a      	cmp	r2, r3
 8003526:	d100      	bne.n	800352a <UART_WaitOnFlagUntilTimeout+0x17a>
 8003528:	e74b      	b.n	80033c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	0018      	movs	r0, r3
 800352e:	46bd      	mov	sp, r7
 8003530:	b014      	add	sp, #80	; 0x50
 8003532:	bd80      	pop	{r7, pc}
 8003534:	fffffe5f 	.word	0xfffffe5f

08003538 <__errno>:
 8003538:	4b01      	ldr	r3, [pc, #4]	; (8003540 <__errno+0x8>)
 800353a:	6818      	ldr	r0, [r3, #0]
 800353c:	4770      	bx	lr
 800353e:	46c0      	nop			; (mov r8, r8)
 8003540:	20000018 	.word	0x20000018

08003544 <__libc_init_array>:
 8003544:	b570      	push	{r4, r5, r6, lr}
 8003546:	2600      	movs	r6, #0
 8003548:	4d0c      	ldr	r5, [pc, #48]	; (800357c <__libc_init_array+0x38>)
 800354a:	4c0d      	ldr	r4, [pc, #52]	; (8003580 <__libc_init_array+0x3c>)
 800354c:	1b64      	subs	r4, r4, r5
 800354e:	10a4      	asrs	r4, r4, #2
 8003550:	42a6      	cmp	r6, r4
 8003552:	d109      	bne.n	8003568 <__libc_init_array+0x24>
 8003554:	2600      	movs	r6, #0
 8003556:	f001 f881 	bl	800465c <_init>
 800355a:	4d0a      	ldr	r5, [pc, #40]	; (8003584 <__libc_init_array+0x40>)
 800355c:	4c0a      	ldr	r4, [pc, #40]	; (8003588 <__libc_init_array+0x44>)
 800355e:	1b64      	subs	r4, r4, r5
 8003560:	10a4      	asrs	r4, r4, #2
 8003562:	42a6      	cmp	r6, r4
 8003564:	d105      	bne.n	8003572 <__libc_init_array+0x2e>
 8003566:	bd70      	pop	{r4, r5, r6, pc}
 8003568:	00b3      	lsls	r3, r6, #2
 800356a:	58eb      	ldr	r3, [r5, r3]
 800356c:	4798      	blx	r3
 800356e:	3601      	adds	r6, #1
 8003570:	e7ee      	b.n	8003550 <__libc_init_array+0xc>
 8003572:	00b3      	lsls	r3, r6, #2
 8003574:	58eb      	ldr	r3, [r5, r3]
 8003576:	4798      	blx	r3
 8003578:	3601      	adds	r6, #1
 800357a:	e7f2      	b.n	8003562 <__libc_init_array+0x1e>
 800357c:	08004be8 	.word	0x08004be8
 8003580:	08004be8 	.word	0x08004be8
 8003584:	08004be8 	.word	0x08004be8
 8003588:	08004bec 	.word	0x08004bec

0800358c <memcmp>:
 800358c:	b530      	push	{r4, r5, lr}
 800358e:	2400      	movs	r4, #0
 8003590:	3901      	subs	r1, #1
 8003592:	42a2      	cmp	r2, r4
 8003594:	d101      	bne.n	800359a <memcmp+0xe>
 8003596:	2000      	movs	r0, #0
 8003598:	e005      	b.n	80035a6 <memcmp+0x1a>
 800359a:	5d03      	ldrb	r3, [r0, r4]
 800359c:	3401      	adds	r4, #1
 800359e:	5d0d      	ldrb	r5, [r1, r4]
 80035a0:	42ab      	cmp	r3, r5
 80035a2:	d0f6      	beq.n	8003592 <memcmp+0x6>
 80035a4:	1b58      	subs	r0, r3, r5
 80035a6:	bd30      	pop	{r4, r5, pc}

080035a8 <memcpy>:
 80035a8:	2300      	movs	r3, #0
 80035aa:	b510      	push	{r4, lr}
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d100      	bne.n	80035b2 <memcpy+0xa>
 80035b0:	bd10      	pop	{r4, pc}
 80035b2:	5ccc      	ldrb	r4, [r1, r3]
 80035b4:	54c4      	strb	r4, [r0, r3]
 80035b6:	3301      	adds	r3, #1
 80035b8:	e7f8      	b.n	80035ac <memcpy+0x4>

080035ba <memset>:
 80035ba:	0003      	movs	r3, r0
 80035bc:	1882      	adds	r2, r0, r2
 80035be:	4293      	cmp	r3, r2
 80035c0:	d100      	bne.n	80035c4 <memset+0xa>
 80035c2:	4770      	bx	lr
 80035c4:	7019      	strb	r1, [r3, #0]
 80035c6:	3301      	adds	r3, #1
 80035c8:	e7f9      	b.n	80035be <memset+0x4>
	...

080035cc <iprintf>:
 80035cc:	b40f      	push	{r0, r1, r2, r3}
 80035ce:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <iprintf+0x30>)
 80035d0:	b513      	push	{r0, r1, r4, lr}
 80035d2:	681c      	ldr	r4, [r3, #0]
 80035d4:	2c00      	cmp	r4, #0
 80035d6:	d005      	beq.n	80035e4 <iprintf+0x18>
 80035d8:	69a3      	ldr	r3, [r4, #24]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d102      	bne.n	80035e4 <iprintf+0x18>
 80035de:	0020      	movs	r0, r4
 80035e0:	f000 fa30 	bl	8003a44 <__sinit>
 80035e4:	ab05      	add	r3, sp, #20
 80035e6:	0020      	movs	r0, r4
 80035e8:	9a04      	ldr	r2, [sp, #16]
 80035ea:	68a1      	ldr	r1, [r4, #8]
 80035ec:	9301      	str	r3, [sp, #4]
 80035ee:	f000 fc43 	bl	8003e78 <_vfiprintf_r>
 80035f2:	bc16      	pop	{r1, r2, r4}
 80035f4:	bc08      	pop	{r3}
 80035f6:	b004      	add	sp, #16
 80035f8:	4718      	bx	r3
 80035fa:	46c0      	nop			; (mov r8, r8)
 80035fc:	20000018 	.word	0x20000018

08003600 <putchar>:
 8003600:	4b08      	ldr	r3, [pc, #32]	; (8003624 <putchar+0x24>)
 8003602:	b570      	push	{r4, r5, r6, lr}
 8003604:	681c      	ldr	r4, [r3, #0]
 8003606:	0005      	movs	r5, r0
 8003608:	2c00      	cmp	r4, #0
 800360a:	d005      	beq.n	8003618 <putchar+0x18>
 800360c:	69a3      	ldr	r3, [r4, #24]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d102      	bne.n	8003618 <putchar+0x18>
 8003612:	0020      	movs	r0, r4
 8003614:	f000 fa16 	bl	8003a44 <__sinit>
 8003618:	0029      	movs	r1, r5
 800361a:	0020      	movs	r0, r4
 800361c:	68a2      	ldr	r2, [r4, #8]
 800361e:	f000 fee7 	bl	80043f0 <_putc_r>
 8003622:	bd70      	pop	{r4, r5, r6, pc}
 8003624:	20000018 	.word	0x20000018

08003628 <strncmp>:
 8003628:	b530      	push	{r4, r5, lr}
 800362a:	0005      	movs	r5, r0
 800362c:	1e10      	subs	r0, r2, #0
 800362e:	d008      	beq.n	8003642 <strncmp+0x1a>
 8003630:	2400      	movs	r4, #0
 8003632:	3a01      	subs	r2, #1
 8003634:	5d2b      	ldrb	r3, [r5, r4]
 8003636:	5d08      	ldrb	r0, [r1, r4]
 8003638:	4283      	cmp	r3, r0
 800363a:	d101      	bne.n	8003640 <strncmp+0x18>
 800363c:	4294      	cmp	r4, r2
 800363e:	d101      	bne.n	8003644 <strncmp+0x1c>
 8003640:	1a18      	subs	r0, r3, r0
 8003642:	bd30      	pop	{r4, r5, pc}
 8003644:	3401      	adds	r4, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1f4      	bne.n	8003634 <strncmp+0xc>
 800364a:	e7f9      	b.n	8003640 <strncmp+0x18>

0800364c <__swbuf_r>:
 800364c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800364e:	0005      	movs	r5, r0
 8003650:	000e      	movs	r6, r1
 8003652:	0014      	movs	r4, r2
 8003654:	2800      	cmp	r0, #0
 8003656:	d004      	beq.n	8003662 <__swbuf_r+0x16>
 8003658:	6983      	ldr	r3, [r0, #24]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <__swbuf_r+0x16>
 800365e:	f000 f9f1 	bl	8003a44 <__sinit>
 8003662:	4b22      	ldr	r3, [pc, #136]	; (80036ec <__swbuf_r+0xa0>)
 8003664:	429c      	cmp	r4, r3
 8003666:	d12e      	bne.n	80036c6 <__swbuf_r+0x7a>
 8003668:	686c      	ldr	r4, [r5, #4]
 800366a:	69a3      	ldr	r3, [r4, #24]
 800366c:	60a3      	str	r3, [r4, #8]
 800366e:	89a3      	ldrh	r3, [r4, #12]
 8003670:	071b      	lsls	r3, r3, #28
 8003672:	d532      	bpl.n	80036da <__swbuf_r+0x8e>
 8003674:	6923      	ldr	r3, [r4, #16]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d02f      	beq.n	80036da <__swbuf_r+0x8e>
 800367a:	6823      	ldr	r3, [r4, #0]
 800367c:	6922      	ldr	r2, [r4, #16]
 800367e:	b2f7      	uxtb	r7, r6
 8003680:	1a98      	subs	r0, r3, r2
 8003682:	6963      	ldr	r3, [r4, #20]
 8003684:	b2f6      	uxtb	r6, r6
 8003686:	4283      	cmp	r3, r0
 8003688:	dc05      	bgt.n	8003696 <__swbuf_r+0x4a>
 800368a:	0021      	movs	r1, r4
 800368c:	0028      	movs	r0, r5
 800368e:	f000 f937 	bl	8003900 <_fflush_r>
 8003692:	2800      	cmp	r0, #0
 8003694:	d127      	bne.n	80036e6 <__swbuf_r+0x9a>
 8003696:	68a3      	ldr	r3, [r4, #8]
 8003698:	3001      	adds	r0, #1
 800369a:	3b01      	subs	r3, #1
 800369c:	60a3      	str	r3, [r4, #8]
 800369e:	6823      	ldr	r3, [r4, #0]
 80036a0:	1c5a      	adds	r2, r3, #1
 80036a2:	6022      	str	r2, [r4, #0]
 80036a4:	701f      	strb	r7, [r3, #0]
 80036a6:	6963      	ldr	r3, [r4, #20]
 80036a8:	4283      	cmp	r3, r0
 80036aa:	d004      	beq.n	80036b6 <__swbuf_r+0x6a>
 80036ac:	89a3      	ldrh	r3, [r4, #12]
 80036ae:	07db      	lsls	r3, r3, #31
 80036b0:	d507      	bpl.n	80036c2 <__swbuf_r+0x76>
 80036b2:	2e0a      	cmp	r6, #10
 80036b4:	d105      	bne.n	80036c2 <__swbuf_r+0x76>
 80036b6:	0021      	movs	r1, r4
 80036b8:	0028      	movs	r0, r5
 80036ba:	f000 f921 	bl	8003900 <_fflush_r>
 80036be:	2800      	cmp	r0, #0
 80036c0:	d111      	bne.n	80036e6 <__swbuf_r+0x9a>
 80036c2:	0030      	movs	r0, r6
 80036c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036c6:	4b0a      	ldr	r3, [pc, #40]	; (80036f0 <__swbuf_r+0xa4>)
 80036c8:	429c      	cmp	r4, r3
 80036ca:	d101      	bne.n	80036d0 <__swbuf_r+0x84>
 80036cc:	68ac      	ldr	r4, [r5, #8]
 80036ce:	e7cc      	b.n	800366a <__swbuf_r+0x1e>
 80036d0:	4b08      	ldr	r3, [pc, #32]	; (80036f4 <__swbuf_r+0xa8>)
 80036d2:	429c      	cmp	r4, r3
 80036d4:	d1c9      	bne.n	800366a <__swbuf_r+0x1e>
 80036d6:	68ec      	ldr	r4, [r5, #12]
 80036d8:	e7c7      	b.n	800366a <__swbuf_r+0x1e>
 80036da:	0021      	movs	r1, r4
 80036dc:	0028      	movs	r0, r5
 80036de:	f000 f80b 	bl	80036f8 <__swsetup_r>
 80036e2:	2800      	cmp	r0, #0
 80036e4:	d0c9      	beq.n	800367a <__swbuf_r+0x2e>
 80036e6:	2601      	movs	r6, #1
 80036e8:	4276      	negs	r6, r6
 80036ea:	e7ea      	b.n	80036c2 <__swbuf_r+0x76>
 80036ec:	08004b74 	.word	0x08004b74
 80036f0:	08004b94 	.word	0x08004b94
 80036f4:	08004b54 	.word	0x08004b54

080036f8 <__swsetup_r>:
 80036f8:	4b37      	ldr	r3, [pc, #220]	; (80037d8 <__swsetup_r+0xe0>)
 80036fa:	b570      	push	{r4, r5, r6, lr}
 80036fc:	681d      	ldr	r5, [r3, #0]
 80036fe:	0006      	movs	r6, r0
 8003700:	000c      	movs	r4, r1
 8003702:	2d00      	cmp	r5, #0
 8003704:	d005      	beq.n	8003712 <__swsetup_r+0x1a>
 8003706:	69ab      	ldr	r3, [r5, #24]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d102      	bne.n	8003712 <__swsetup_r+0x1a>
 800370c:	0028      	movs	r0, r5
 800370e:	f000 f999 	bl	8003a44 <__sinit>
 8003712:	4b32      	ldr	r3, [pc, #200]	; (80037dc <__swsetup_r+0xe4>)
 8003714:	429c      	cmp	r4, r3
 8003716:	d10f      	bne.n	8003738 <__swsetup_r+0x40>
 8003718:	686c      	ldr	r4, [r5, #4]
 800371a:	230c      	movs	r3, #12
 800371c:	5ee2      	ldrsh	r2, [r4, r3]
 800371e:	b293      	uxth	r3, r2
 8003720:	0711      	lsls	r1, r2, #28
 8003722:	d42d      	bmi.n	8003780 <__swsetup_r+0x88>
 8003724:	06d9      	lsls	r1, r3, #27
 8003726:	d411      	bmi.n	800374c <__swsetup_r+0x54>
 8003728:	2309      	movs	r3, #9
 800372a:	2001      	movs	r0, #1
 800372c:	6033      	str	r3, [r6, #0]
 800372e:	3337      	adds	r3, #55	; 0x37
 8003730:	4313      	orrs	r3, r2
 8003732:	81a3      	strh	r3, [r4, #12]
 8003734:	4240      	negs	r0, r0
 8003736:	bd70      	pop	{r4, r5, r6, pc}
 8003738:	4b29      	ldr	r3, [pc, #164]	; (80037e0 <__swsetup_r+0xe8>)
 800373a:	429c      	cmp	r4, r3
 800373c:	d101      	bne.n	8003742 <__swsetup_r+0x4a>
 800373e:	68ac      	ldr	r4, [r5, #8]
 8003740:	e7eb      	b.n	800371a <__swsetup_r+0x22>
 8003742:	4b28      	ldr	r3, [pc, #160]	; (80037e4 <__swsetup_r+0xec>)
 8003744:	429c      	cmp	r4, r3
 8003746:	d1e8      	bne.n	800371a <__swsetup_r+0x22>
 8003748:	68ec      	ldr	r4, [r5, #12]
 800374a:	e7e6      	b.n	800371a <__swsetup_r+0x22>
 800374c:	075b      	lsls	r3, r3, #29
 800374e:	d513      	bpl.n	8003778 <__swsetup_r+0x80>
 8003750:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003752:	2900      	cmp	r1, #0
 8003754:	d008      	beq.n	8003768 <__swsetup_r+0x70>
 8003756:	0023      	movs	r3, r4
 8003758:	3344      	adds	r3, #68	; 0x44
 800375a:	4299      	cmp	r1, r3
 800375c:	d002      	beq.n	8003764 <__swsetup_r+0x6c>
 800375e:	0030      	movs	r0, r6
 8003760:	f000 fa80 	bl	8003c64 <_free_r>
 8003764:	2300      	movs	r3, #0
 8003766:	6363      	str	r3, [r4, #52]	; 0x34
 8003768:	2224      	movs	r2, #36	; 0x24
 800376a:	89a3      	ldrh	r3, [r4, #12]
 800376c:	4393      	bics	r3, r2
 800376e:	81a3      	strh	r3, [r4, #12]
 8003770:	2300      	movs	r3, #0
 8003772:	6063      	str	r3, [r4, #4]
 8003774:	6923      	ldr	r3, [r4, #16]
 8003776:	6023      	str	r3, [r4, #0]
 8003778:	2308      	movs	r3, #8
 800377a:	89a2      	ldrh	r2, [r4, #12]
 800377c:	4313      	orrs	r3, r2
 800377e:	81a3      	strh	r3, [r4, #12]
 8003780:	6923      	ldr	r3, [r4, #16]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10b      	bne.n	800379e <__swsetup_r+0xa6>
 8003786:	21a0      	movs	r1, #160	; 0xa0
 8003788:	2280      	movs	r2, #128	; 0x80
 800378a:	89a3      	ldrh	r3, [r4, #12]
 800378c:	0089      	lsls	r1, r1, #2
 800378e:	0092      	lsls	r2, r2, #2
 8003790:	400b      	ands	r3, r1
 8003792:	4293      	cmp	r3, r2
 8003794:	d003      	beq.n	800379e <__swsetup_r+0xa6>
 8003796:	0021      	movs	r1, r4
 8003798:	0030      	movs	r0, r6
 800379a:	f000 fa1f 	bl	8003bdc <__smakebuf_r>
 800379e:	220c      	movs	r2, #12
 80037a0:	5ea3      	ldrsh	r3, [r4, r2]
 80037a2:	2001      	movs	r0, #1
 80037a4:	001a      	movs	r2, r3
 80037a6:	b299      	uxth	r1, r3
 80037a8:	4002      	ands	r2, r0
 80037aa:	4203      	tst	r3, r0
 80037ac:	d00f      	beq.n	80037ce <__swsetup_r+0xd6>
 80037ae:	2200      	movs	r2, #0
 80037b0:	60a2      	str	r2, [r4, #8]
 80037b2:	6962      	ldr	r2, [r4, #20]
 80037b4:	4252      	negs	r2, r2
 80037b6:	61a2      	str	r2, [r4, #24]
 80037b8:	2000      	movs	r0, #0
 80037ba:	6922      	ldr	r2, [r4, #16]
 80037bc:	4282      	cmp	r2, r0
 80037be:	d1ba      	bne.n	8003736 <__swsetup_r+0x3e>
 80037c0:	060a      	lsls	r2, r1, #24
 80037c2:	d5b8      	bpl.n	8003736 <__swsetup_r+0x3e>
 80037c4:	2240      	movs	r2, #64	; 0x40
 80037c6:	4313      	orrs	r3, r2
 80037c8:	81a3      	strh	r3, [r4, #12]
 80037ca:	3801      	subs	r0, #1
 80037cc:	e7b3      	b.n	8003736 <__swsetup_r+0x3e>
 80037ce:	0788      	lsls	r0, r1, #30
 80037d0:	d400      	bmi.n	80037d4 <__swsetup_r+0xdc>
 80037d2:	6962      	ldr	r2, [r4, #20]
 80037d4:	60a2      	str	r2, [r4, #8]
 80037d6:	e7ef      	b.n	80037b8 <__swsetup_r+0xc0>
 80037d8:	20000018 	.word	0x20000018
 80037dc:	08004b74 	.word	0x08004b74
 80037e0:	08004b94 	.word	0x08004b94
 80037e4:	08004b54 	.word	0x08004b54

080037e8 <__sflush_r>:
 80037e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037ea:	898b      	ldrh	r3, [r1, #12]
 80037ec:	0005      	movs	r5, r0
 80037ee:	000c      	movs	r4, r1
 80037f0:	071a      	lsls	r2, r3, #28
 80037f2:	d45f      	bmi.n	80038b4 <__sflush_r+0xcc>
 80037f4:	684a      	ldr	r2, [r1, #4]
 80037f6:	2a00      	cmp	r2, #0
 80037f8:	dc04      	bgt.n	8003804 <__sflush_r+0x1c>
 80037fa:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80037fc:	2a00      	cmp	r2, #0
 80037fe:	dc01      	bgt.n	8003804 <__sflush_r+0x1c>
 8003800:	2000      	movs	r0, #0
 8003802:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003804:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003806:	2f00      	cmp	r7, #0
 8003808:	d0fa      	beq.n	8003800 <__sflush_r+0x18>
 800380a:	2200      	movs	r2, #0
 800380c:	2180      	movs	r1, #128	; 0x80
 800380e:	682e      	ldr	r6, [r5, #0]
 8003810:	602a      	str	r2, [r5, #0]
 8003812:	001a      	movs	r2, r3
 8003814:	0149      	lsls	r1, r1, #5
 8003816:	400a      	ands	r2, r1
 8003818:	420b      	tst	r3, r1
 800381a:	d034      	beq.n	8003886 <__sflush_r+0x9e>
 800381c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800381e:	89a3      	ldrh	r3, [r4, #12]
 8003820:	075b      	lsls	r3, r3, #29
 8003822:	d506      	bpl.n	8003832 <__sflush_r+0x4a>
 8003824:	6863      	ldr	r3, [r4, #4]
 8003826:	1ac0      	subs	r0, r0, r3
 8003828:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <__sflush_r+0x4a>
 800382e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003830:	1ac0      	subs	r0, r0, r3
 8003832:	0002      	movs	r2, r0
 8003834:	6a21      	ldr	r1, [r4, #32]
 8003836:	2300      	movs	r3, #0
 8003838:	0028      	movs	r0, r5
 800383a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800383c:	47b8      	blx	r7
 800383e:	89a1      	ldrh	r1, [r4, #12]
 8003840:	1c43      	adds	r3, r0, #1
 8003842:	d106      	bne.n	8003852 <__sflush_r+0x6a>
 8003844:	682b      	ldr	r3, [r5, #0]
 8003846:	2b1d      	cmp	r3, #29
 8003848:	d831      	bhi.n	80038ae <__sflush_r+0xc6>
 800384a:	4a2c      	ldr	r2, [pc, #176]	; (80038fc <__sflush_r+0x114>)
 800384c:	40da      	lsrs	r2, r3
 800384e:	07d3      	lsls	r3, r2, #31
 8003850:	d52d      	bpl.n	80038ae <__sflush_r+0xc6>
 8003852:	2300      	movs	r3, #0
 8003854:	6063      	str	r3, [r4, #4]
 8003856:	6923      	ldr	r3, [r4, #16]
 8003858:	6023      	str	r3, [r4, #0]
 800385a:	04cb      	lsls	r3, r1, #19
 800385c:	d505      	bpl.n	800386a <__sflush_r+0x82>
 800385e:	1c43      	adds	r3, r0, #1
 8003860:	d102      	bne.n	8003868 <__sflush_r+0x80>
 8003862:	682b      	ldr	r3, [r5, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d100      	bne.n	800386a <__sflush_r+0x82>
 8003868:	6560      	str	r0, [r4, #84]	; 0x54
 800386a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800386c:	602e      	str	r6, [r5, #0]
 800386e:	2900      	cmp	r1, #0
 8003870:	d0c6      	beq.n	8003800 <__sflush_r+0x18>
 8003872:	0023      	movs	r3, r4
 8003874:	3344      	adds	r3, #68	; 0x44
 8003876:	4299      	cmp	r1, r3
 8003878:	d002      	beq.n	8003880 <__sflush_r+0x98>
 800387a:	0028      	movs	r0, r5
 800387c:	f000 f9f2 	bl	8003c64 <_free_r>
 8003880:	2000      	movs	r0, #0
 8003882:	6360      	str	r0, [r4, #52]	; 0x34
 8003884:	e7bd      	b.n	8003802 <__sflush_r+0x1a>
 8003886:	2301      	movs	r3, #1
 8003888:	0028      	movs	r0, r5
 800388a:	6a21      	ldr	r1, [r4, #32]
 800388c:	47b8      	blx	r7
 800388e:	1c43      	adds	r3, r0, #1
 8003890:	d1c5      	bne.n	800381e <__sflush_r+0x36>
 8003892:	682b      	ldr	r3, [r5, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0c2      	beq.n	800381e <__sflush_r+0x36>
 8003898:	2b1d      	cmp	r3, #29
 800389a:	d001      	beq.n	80038a0 <__sflush_r+0xb8>
 800389c:	2b16      	cmp	r3, #22
 800389e:	d101      	bne.n	80038a4 <__sflush_r+0xbc>
 80038a0:	602e      	str	r6, [r5, #0]
 80038a2:	e7ad      	b.n	8003800 <__sflush_r+0x18>
 80038a4:	2340      	movs	r3, #64	; 0x40
 80038a6:	89a2      	ldrh	r2, [r4, #12]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	81a3      	strh	r3, [r4, #12]
 80038ac:	e7a9      	b.n	8003802 <__sflush_r+0x1a>
 80038ae:	2340      	movs	r3, #64	; 0x40
 80038b0:	430b      	orrs	r3, r1
 80038b2:	e7fa      	b.n	80038aa <__sflush_r+0xc2>
 80038b4:	690f      	ldr	r7, [r1, #16]
 80038b6:	2f00      	cmp	r7, #0
 80038b8:	d0a2      	beq.n	8003800 <__sflush_r+0x18>
 80038ba:	680a      	ldr	r2, [r1, #0]
 80038bc:	600f      	str	r7, [r1, #0]
 80038be:	1bd2      	subs	r2, r2, r7
 80038c0:	9201      	str	r2, [sp, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	079b      	lsls	r3, r3, #30
 80038c6:	d100      	bne.n	80038ca <__sflush_r+0xe2>
 80038c8:	694a      	ldr	r2, [r1, #20]
 80038ca:	60a2      	str	r2, [r4, #8]
 80038cc:	9b01      	ldr	r3, [sp, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	dc00      	bgt.n	80038d4 <__sflush_r+0xec>
 80038d2:	e795      	b.n	8003800 <__sflush_r+0x18>
 80038d4:	003a      	movs	r2, r7
 80038d6:	0028      	movs	r0, r5
 80038d8:	9b01      	ldr	r3, [sp, #4]
 80038da:	6a21      	ldr	r1, [r4, #32]
 80038dc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80038de:	47b0      	blx	r6
 80038e0:	2800      	cmp	r0, #0
 80038e2:	dc06      	bgt.n	80038f2 <__sflush_r+0x10a>
 80038e4:	2340      	movs	r3, #64	; 0x40
 80038e6:	2001      	movs	r0, #1
 80038e8:	89a2      	ldrh	r2, [r4, #12]
 80038ea:	4240      	negs	r0, r0
 80038ec:	4313      	orrs	r3, r2
 80038ee:	81a3      	strh	r3, [r4, #12]
 80038f0:	e787      	b.n	8003802 <__sflush_r+0x1a>
 80038f2:	9b01      	ldr	r3, [sp, #4]
 80038f4:	183f      	adds	r7, r7, r0
 80038f6:	1a1b      	subs	r3, r3, r0
 80038f8:	9301      	str	r3, [sp, #4]
 80038fa:	e7e7      	b.n	80038cc <__sflush_r+0xe4>
 80038fc:	20400001 	.word	0x20400001

08003900 <_fflush_r>:
 8003900:	690b      	ldr	r3, [r1, #16]
 8003902:	b570      	push	{r4, r5, r6, lr}
 8003904:	0005      	movs	r5, r0
 8003906:	000c      	movs	r4, r1
 8003908:	2b00      	cmp	r3, #0
 800390a:	d102      	bne.n	8003912 <_fflush_r+0x12>
 800390c:	2500      	movs	r5, #0
 800390e:	0028      	movs	r0, r5
 8003910:	bd70      	pop	{r4, r5, r6, pc}
 8003912:	2800      	cmp	r0, #0
 8003914:	d004      	beq.n	8003920 <_fflush_r+0x20>
 8003916:	6983      	ldr	r3, [r0, #24]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <_fflush_r+0x20>
 800391c:	f000 f892 	bl	8003a44 <__sinit>
 8003920:	4b14      	ldr	r3, [pc, #80]	; (8003974 <_fflush_r+0x74>)
 8003922:	429c      	cmp	r4, r3
 8003924:	d11b      	bne.n	800395e <_fflush_r+0x5e>
 8003926:	686c      	ldr	r4, [r5, #4]
 8003928:	220c      	movs	r2, #12
 800392a:	5ea3      	ldrsh	r3, [r4, r2]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0ed      	beq.n	800390c <_fflush_r+0xc>
 8003930:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003932:	07d2      	lsls	r2, r2, #31
 8003934:	d404      	bmi.n	8003940 <_fflush_r+0x40>
 8003936:	059b      	lsls	r3, r3, #22
 8003938:	d402      	bmi.n	8003940 <_fflush_r+0x40>
 800393a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800393c:	f000 f923 	bl	8003b86 <__retarget_lock_acquire_recursive>
 8003940:	0028      	movs	r0, r5
 8003942:	0021      	movs	r1, r4
 8003944:	f7ff ff50 	bl	80037e8 <__sflush_r>
 8003948:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800394a:	0005      	movs	r5, r0
 800394c:	07db      	lsls	r3, r3, #31
 800394e:	d4de      	bmi.n	800390e <_fflush_r+0xe>
 8003950:	89a3      	ldrh	r3, [r4, #12]
 8003952:	059b      	lsls	r3, r3, #22
 8003954:	d4db      	bmi.n	800390e <_fflush_r+0xe>
 8003956:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003958:	f000 f916 	bl	8003b88 <__retarget_lock_release_recursive>
 800395c:	e7d7      	b.n	800390e <_fflush_r+0xe>
 800395e:	4b06      	ldr	r3, [pc, #24]	; (8003978 <_fflush_r+0x78>)
 8003960:	429c      	cmp	r4, r3
 8003962:	d101      	bne.n	8003968 <_fflush_r+0x68>
 8003964:	68ac      	ldr	r4, [r5, #8]
 8003966:	e7df      	b.n	8003928 <_fflush_r+0x28>
 8003968:	4b04      	ldr	r3, [pc, #16]	; (800397c <_fflush_r+0x7c>)
 800396a:	429c      	cmp	r4, r3
 800396c:	d1dc      	bne.n	8003928 <_fflush_r+0x28>
 800396e:	68ec      	ldr	r4, [r5, #12]
 8003970:	e7da      	b.n	8003928 <_fflush_r+0x28>
 8003972:	46c0      	nop			; (mov r8, r8)
 8003974:	08004b74 	.word	0x08004b74
 8003978:	08004b94 	.word	0x08004b94
 800397c:	08004b54 	.word	0x08004b54

08003980 <std>:
 8003980:	2300      	movs	r3, #0
 8003982:	b510      	push	{r4, lr}
 8003984:	0004      	movs	r4, r0
 8003986:	6003      	str	r3, [r0, #0]
 8003988:	6043      	str	r3, [r0, #4]
 800398a:	6083      	str	r3, [r0, #8]
 800398c:	8181      	strh	r1, [r0, #12]
 800398e:	6643      	str	r3, [r0, #100]	; 0x64
 8003990:	0019      	movs	r1, r3
 8003992:	81c2      	strh	r2, [r0, #14]
 8003994:	6103      	str	r3, [r0, #16]
 8003996:	6143      	str	r3, [r0, #20]
 8003998:	6183      	str	r3, [r0, #24]
 800399a:	2208      	movs	r2, #8
 800399c:	305c      	adds	r0, #92	; 0x5c
 800399e:	f7ff fe0c 	bl	80035ba <memset>
 80039a2:	4b05      	ldr	r3, [pc, #20]	; (80039b8 <std+0x38>)
 80039a4:	6224      	str	r4, [r4, #32]
 80039a6:	6263      	str	r3, [r4, #36]	; 0x24
 80039a8:	4b04      	ldr	r3, [pc, #16]	; (80039bc <std+0x3c>)
 80039aa:	62a3      	str	r3, [r4, #40]	; 0x28
 80039ac:	4b04      	ldr	r3, [pc, #16]	; (80039c0 <std+0x40>)
 80039ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80039b0:	4b04      	ldr	r3, [pc, #16]	; (80039c4 <std+0x44>)
 80039b2:	6323      	str	r3, [r4, #48]	; 0x30
 80039b4:	bd10      	pop	{r4, pc}
 80039b6:	46c0      	nop			; (mov r8, r8)
 80039b8:	080044a9 	.word	0x080044a9
 80039bc:	080044d1 	.word	0x080044d1
 80039c0:	08004509 	.word	0x08004509
 80039c4:	08004535 	.word	0x08004535

080039c8 <_cleanup_r>:
 80039c8:	b510      	push	{r4, lr}
 80039ca:	4902      	ldr	r1, [pc, #8]	; (80039d4 <_cleanup_r+0xc>)
 80039cc:	f000 f8ba 	bl	8003b44 <_fwalk_reent>
 80039d0:	bd10      	pop	{r4, pc}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	08003901 	.word	0x08003901

080039d8 <__sfmoreglue>:
 80039d8:	b570      	push	{r4, r5, r6, lr}
 80039da:	2568      	movs	r5, #104	; 0x68
 80039dc:	1e4a      	subs	r2, r1, #1
 80039de:	4355      	muls	r5, r2
 80039e0:	000e      	movs	r6, r1
 80039e2:	0029      	movs	r1, r5
 80039e4:	3174      	adds	r1, #116	; 0x74
 80039e6:	f000 f9a9 	bl	8003d3c <_malloc_r>
 80039ea:	1e04      	subs	r4, r0, #0
 80039ec:	d008      	beq.n	8003a00 <__sfmoreglue+0x28>
 80039ee:	2100      	movs	r1, #0
 80039f0:	002a      	movs	r2, r5
 80039f2:	6001      	str	r1, [r0, #0]
 80039f4:	6046      	str	r6, [r0, #4]
 80039f6:	300c      	adds	r0, #12
 80039f8:	60a0      	str	r0, [r4, #8]
 80039fa:	3268      	adds	r2, #104	; 0x68
 80039fc:	f7ff fddd 	bl	80035ba <memset>
 8003a00:	0020      	movs	r0, r4
 8003a02:	bd70      	pop	{r4, r5, r6, pc}

08003a04 <__sfp_lock_acquire>:
 8003a04:	b510      	push	{r4, lr}
 8003a06:	4802      	ldr	r0, [pc, #8]	; (8003a10 <__sfp_lock_acquire+0xc>)
 8003a08:	f000 f8bd 	bl	8003b86 <__retarget_lock_acquire_recursive>
 8003a0c:	bd10      	pop	{r4, pc}
 8003a0e:	46c0      	nop			; (mov r8, r8)
 8003a10:	200004b9 	.word	0x200004b9

08003a14 <__sfp_lock_release>:
 8003a14:	b510      	push	{r4, lr}
 8003a16:	4802      	ldr	r0, [pc, #8]	; (8003a20 <__sfp_lock_release+0xc>)
 8003a18:	f000 f8b6 	bl	8003b88 <__retarget_lock_release_recursive>
 8003a1c:	bd10      	pop	{r4, pc}
 8003a1e:	46c0      	nop			; (mov r8, r8)
 8003a20:	200004b9 	.word	0x200004b9

08003a24 <__sinit_lock_acquire>:
 8003a24:	b510      	push	{r4, lr}
 8003a26:	4802      	ldr	r0, [pc, #8]	; (8003a30 <__sinit_lock_acquire+0xc>)
 8003a28:	f000 f8ad 	bl	8003b86 <__retarget_lock_acquire_recursive>
 8003a2c:	bd10      	pop	{r4, pc}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	200004ba 	.word	0x200004ba

08003a34 <__sinit_lock_release>:
 8003a34:	b510      	push	{r4, lr}
 8003a36:	4802      	ldr	r0, [pc, #8]	; (8003a40 <__sinit_lock_release+0xc>)
 8003a38:	f000 f8a6 	bl	8003b88 <__retarget_lock_release_recursive>
 8003a3c:	bd10      	pop	{r4, pc}
 8003a3e:	46c0      	nop			; (mov r8, r8)
 8003a40:	200004ba 	.word	0x200004ba

08003a44 <__sinit>:
 8003a44:	b513      	push	{r0, r1, r4, lr}
 8003a46:	0004      	movs	r4, r0
 8003a48:	f7ff ffec 	bl	8003a24 <__sinit_lock_acquire>
 8003a4c:	69a3      	ldr	r3, [r4, #24]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d002      	beq.n	8003a58 <__sinit+0x14>
 8003a52:	f7ff ffef 	bl	8003a34 <__sinit_lock_release>
 8003a56:	bd13      	pop	{r0, r1, r4, pc}
 8003a58:	64a3      	str	r3, [r4, #72]	; 0x48
 8003a5a:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003a5c:	6523      	str	r3, [r4, #80]	; 0x50
 8003a5e:	4b13      	ldr	r3, [pc, #76]	; (8003aac <__sinit+0x68>)
 8003a60:	4a13      	ldr	r2, [pc, #76]	; (8003ab0 <__sinit+0x6c>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	62a2      	str	r2, [r4, #40]	; 0x28
 8003a66:	9301      	str	r3, [sp, #4]
 8003a68:	42a3      	cmp	r3, r4
 8003a6a:	d101      	bne.n	8003a70 <__sinit+0x2c>
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	61a3      	str	r3, [r4, #24]
 8003a70:	0020      	movs	r0, r4
 8003a72:	f000 f81f 	bl	8003ab4 <__sfp>
 8003a76:	6060      	str	r0, [r4, #4]
 8003a78:	0020      	movs	r0, r4
 8003a7a:	f000 f81b 	bl	8003ab4 <__sfp>
 8003a7e:	60a0      	str	r0, [r4, #8]
 8003a80:	0020      	movs	r0, r4
 8003a82:	f000 f817 	bl	8003ab4 <__sfp>
 8003a86:	2200      	movs	r2, #0
 8003a88:	2104      	movs	r1, #4
 8003a8a:	60e0      	str	r0, [r4, #12]
 8003a8c:	6860      	ldr	r0, [r4, #4]
 8003a8e:	f7ff ff77 	bl	8003980 <std>
 8003a92:	2201      	movs	r2, #1
 8003a94:	2109      	movs	r1, #9
 8003a96:	68a0      	ldr	r0, [r4, #8]
 8003a98:	f7ff ff72 	bl	8003980 <std>
 8003a9c:	2202      	movs	r2, #2
 8003a9e:	2112      	movs	r1, #18
 8003aa0:	68e0      	ldr	r0, [r4, #12]
 8003aa2:	f7ff ff6d 	bl	8003980 <std>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	61a3      	str	r3, [r4, #24]
 8003aaa:	e7d2      	b.n	8003a52 <__sinit+0xe>
 8003aac:	08004b50 	.word	0x08004b50
 8003ab0:	080039c9 	.word	0x080039c9

08003ab4 <__sfp>:
 8003ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ab6:	0007      	movs	r7, r0
 8003ab8:	f7ff ffa4 	bl	8003a04 <__sfp_lock_acquire>
 8003abc:	4b1f      	ldr	r3, [pc, #124]	; (8003b3c <__sfp+0x88>)
 8003abe:	681e      	ldr	r6, [r3, #0]
 8003ac0:	69b3      	ldr	r3, [r6, #24]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d102      	bne.n	8003acc <__sfp+0x18>
 8003ac6:	0030      	movs	r0, r6
 8003ac8:	f7ff ffbc 	bl	8003a44 <__sinit>
 8003acc:	3648      	adds	r6, #72	; 0x48
 8003ace:	68b4      	ldr	r4, [r6, #8]
 8003ad0:	6873      	ldr	r3, [r6, #4]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	d504      	bpl.n	8003ae0 <__sfp+0x2c>
 8003ad6:	6833      	ldr	r3, [r6, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d022      	beq.n	8003b22 <__sfp+0x6e>
 8003adc:	6836      	ldr	r6, [r6, #0]
 8003ade:	e7f6      	b.n	8003ace <__sfp+0x1a>
 8003ae0:	220c      	movs	r2, #12
 8003ae2:	5ea5      	ldrsh	r5, [r4, r2]
 8003ae4:	2d00      	cmp	r5, #0
 8003ae6:	d11a      	bne.n	8003b1e <__sfp+0x6a>
 8003ae8:	0020      	movs	r0, r4
 8003aea:	4b15      	ldr	r3, [pc, #84]	; (8003b40 <__sfp+0x8c>)
 8003aec:	3058      	adds	r0, #88	; 0x58
 8003aee:	60e3      	str	r3, [r4, #12]
 8003af0:	6665      	str	r5, [r4, #100]	; 0x64
 8003af2:	f000 f847 	bl	8003b84 <__retarget_lock_init_recursive>
 8003af6:	f7ff ff8d 	bl	8003a14 <__sfp_lock_release>
 8003afa:	0020      	movs	r0, r4
 8003afc:	2208      	movs	r2, #8
 8003afe:	0029      	movs	r1, r5
 8003b00:	6025      	str	r5, [r4, #0]
 8003b02:	60a5      	str	r5, [r4, #8]
 8003b04:	6065      	str	r5, [r4, #4]
 8003b06:	6125      	str	r5, [r4, #16]
 8003b08:	6165      	str	r5, [r4, #20]
 8003b0a:	61a5      	str	r5, [r4, #24]
 8003b0c:	305c      	adds	r0, #92	; 0x5c
 8003b0e:	f7ff fd54 	bl	80035ba <memset>
 8003b12:	6365      	str	r5, [r4, #52]	; 0x34
 8003b14:	63a5      	str	r5, [r4, #56]	; 0x38
 8003b16:	64a5      	str	r5, [r4, #72]	; 0x48
 8003b18:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003b1a:	0020      	movs	r0, r4
 8003b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b1e:	3468      	adds	r4, #104	; 0x68
 8003b20:	e7d7      	b.n	8003ad2 <__sfp+0x1e>
 8003b22:	2104      	movs	r1, #4
 8003b24:	0038      	movs	r0, r7
 8003b26:	f7ff ff57 	bl	80039d8 <__sfmoreglue>
 8003b2a:	1e04      	subs	r4, r0, #0
 8003b2c:	6030      	str	r0, [r6, #0]
 8003b2e:	d1d5      	bne.n	8003adc <__sfp+0x28>
 8003b30:	f7ff ff70 	bl	8003a14 <__sfp_lock_release>
 8003b34:	230c      	movs	r3, #12
 8003b36:	603b      	str	r3, [r7, #0]
 8003b38:	e7ef      	b.n	8003b1a <__sfp+0x66>
 8003b3a:	46c0      	nop			; (mov r8, r8)
 8003b3c:	08004b50 	.word	0x08004b50
 8003b40:	ffff0001 	.word	0xffff0001

08003b44 <_fwalk_reent>:
 8003b44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b46:	0004      	movs	r4, r0
 8003b48:	0006      	movs	r6, r0
 8003b4a:	2700      	movs	r7, #0
 8003b4c:	9101      	str	r1, [sp, #4]
 8003b4e:	3448      	adds	r4, #72	; 0x48
 8003b50:	6863      	ldr	r3, [r4, #4]
 8003b52:	68a5      	ldr	r5, [r4, #8]
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	9b00      	ldr	r3, [sp, #0]
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	d504      	bpl.n	8003b68 <_fwalk_reent+0x24>
 8003b5e:	6824      	ldr	r4, [r4, #0]
 8003b60:	2c00      	cmp	r4, #0
 8003b62:	d1f5      	bne.n	8003b50 <_fwalk_reent+0xc>
 8003b64:	0038      	movs	r0, r7
 8003b66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003b68:	89ab      	ldrh	r3, [r5, #12]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d908      	bls.n	8003b80 <_fwalk_reent+0x3c>
 8003b6e:	220e      	movs	r2, #14
 8003b70:	5eab      	ldrsh	r3, [r5, r2]
 8003b72:	3301      	adds	r3, #1
 8003b74:	d004      	beq.n	8003b80 <_fwalk_reent+0x3c>
 8003b76:	0029      	movs	r1, r5
 8003b78:	0030      	movs	r0, r6
 8003b7a:	9b01      	ldr	r3, [sp, #4]
 8003b7c:	4798      	blx	r3
 8003b7e:	4307      	orrs	r7, r0
 8003b80:	3568      	adds	r5, #104	; 0x68
 8003b82:	e7e8      	b.n	8003b56 <_fwalk_reent+0x12>

08003b84 <__retarget_lock_init_recursive>:
 8003b84:	4770      	bx	lr

08003b86 <__retarget_lock_acquire_recursive>:
 8003b86:	4770      	bx	lr

08003b88 <__retarget_lock_release_recursive>:
 8003b88:	4770      	bx	lr
	...

08003b8c <__swhatbuf_r>:
 8003b8c:	b570      	push	{r4, r5, r6, lr}
 8003b8e:	000e      	movs	r6, r1
 8003b90:	001d      	movs	r5, r3
 8003b92:	230e      	movs	r3, #14
 8003b94:	5ec9      	ldrsh	r1, [r1, r3]
 8003b96:	0014      	movs	r4, r2
 8003b98:	b096      	sub	sp, #88	; 0x58
 8003b9a:	2900      	cmp	r1, #0
 8003b9c:	da08      	bge.n	8003bb0 <__swhatbuf_r+0x24>
 8003b9e:	220c      	movs	r2, #12
 8003ba0:	5eb3      	ldrsh	r3, [r6, r2]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	602a      	str	r2, [r5, #0]
 8003ba6:	061b      	lsls	r3, r3, #24
 8003ba8:	d411      	bmi.n	8003bce <__swhatbuf_r+0x42>
 8003baa:	2380      	movs	r3, #128	; 0x80
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	e00f      	b.n	8003bd0 <__swhatbuf_r+0x44>
 8003bb0:	466a      	mov	r2, sp
 8003bb2:	f000 fceb 	bl	800458c <_fstat_r>
 8003bb6:	2800      	cmp	r0, #0
 8003bb8:	dbf1      	blt.n	8003b9e <__swhatbuf_r+0x12>
 8003bba:	23f0      	movs	r3, #240	; 0xf0
 8003bbc:	9901      	ldr	r1, [sp, #4]
 8003bbe:	021b      	lsls	r3, r3, #8
 8003bc0:	4019      	ands	r1, r3
 8003bc2:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <__swhatbuf_r+0x4c>)
 8003bc4:	18c9      	adds	r1, r1, r3
 8003bc6:	424b      	negs	r3, r1
 8003bc8:	4159      	adcs	r1, r3
 8003bca:	6029      	str	r1, [r5, #0]
 8003bcc:	e7ed      	b.n	8003baa <__swhatbuf_r+0x1e>
 8003bce:	2340      	movs	r3, #64	; 0x40
 8003bd0:	2000      	movs	r0, #0
 8003bd2:	6023      	str	r3, [r4, #0]
 8003bd4:	b016      	add	sp, #88	; 0x58
 8003bd6:	bd70      	pop	{r4, r5, r6, pc}
 8003bd8:	ffffe000 	.word	0xffffe000

08003bdc <__smakebuf_r>:
 8003bdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bde:	2602      	movs	r6, #2
 8003be0:	898b      	ldrh	r3, [r1, #12]
 8003be2:	0005      	movs	r5, r0
 8003be4:	000c      	movs	r4, r1
 8003be6:	4233      	tst	r3, r6
 8003be8:	d006      	beq.n	8003bf8 <__smakebuf_r+0x1c>
 8003bea:	0023      	movs	r3, r4
 8003bec:	3347      	adds	r3, #71	; 0x47
 8003bee:	6023      	str	r3, [r4, #0]
 8003bf0:	6123      	str	r3, [r4, #16]
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	6163      	str	r3, [r4, #20]
 8003bf6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003bf8:	466a      	mov	r2, sp
 8003bfa:	ab01      	add	r3, sp, #4
 8003bfc:	f7ff ffc6 	bl	8003b8c <__swhatbuf_r>
 8003c00:	9900      	ldr	r1, [sp, #0]
 8003c02:	0007      	movs	r7, r0
 8003c04:	0028      	movs	r0, r5
 8003c06:	f000 f899 	bl	8003d3c <_malloc_r>
 8003c0a:	2800      	cmp	r0, #0
 8003c0c:	d108      	bne.n	8003c20 <__smakebuf_r+0x44>
 8003c0e:	220c      	movs	r2, #12
 8003c10:	5ea3      	ldrsh	r3, [r4, r2]
 8003c12:	059a      	lsls	r2, r3, #22
 8003c14:	d4ef      	bmi.n	8003bf6 <__smakebuf_r+0x1a>
 8003c16:	2203      	movs	r2, #3
 8003c18:	4393      	bics	r3, r2
 8003c1a:	431e      	orrs	r6, r3
 8003c1c:	81a6      	strh	r6, [r4, #12]
 8003c1e:	e7e4      	b.n	8003bea <__smakebuf_r+0xe>
 8003c20:	4b0f      	ldr	r3, [pc, #60]	; (8003c60 <__smakebuf_r+0x84>)
 8003c22:	62ab      	str	r3, [r5, #40]	; 0x28
 8003c24:	2380      	movs	r3, #128	; 0x80
 8003c26:	89a2      	ldrh	r2, [r4, #12]
 8003c28:	6020      	str	r0, [r4, #0]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	81a3      	strh	r3, [r4, #12]
 8003c2e:	9b00      	ldr	r3, [sp, #0]
 8003c30:	6120      	str	r0, [r4, #16]
 8003c32:	6163      	str	r3, [r4, #20]
 8003c34:	9b01      	ldr	r3, [sp, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00d      	beq.n	8003c56 <__smakebuf_r+0x7a>
 8003c3a:	0028      	movs	r0, r5
 8003c3c:	230e      	movs	r3, #14
 8003c3e:	5ee1      	ldrsh	r1, [r4, r3]
 8003c40:	f000 fcb6 	bl	80045b0 <_isatty_r>
 8003c44:	2800      	cmp	r0, #0
 8003c46:	d006      	beq.n	8003c56 <__smakebuf_r+0x7a>
 8003c48:	2203      	movs	r2, #3
 8003c4a:	89a3      	ldrh	r3, [r4, #12]
 8003c4c:	4393      	bics	r3, r2
 8003c4e:	001a      	movs	r2, r3
 8003c50:	2301      	movs	r3, #1
 8003c52:	4313      	orrs	r3, r2
 8003c54:	81a3      	strh	r3, [r4, #12]
 8003c56:	89a0      	ldrh	r0, [r4, #12]
 8003c58:	4307      	orrs	r7, r0
 8003c5a:	81a7      	strh	r7, [r4, #12]
 8003c5c:	e7cb      	b.n	8003bf6 <__smakebuf_r+0x1a>
 8003c5e:	46c0      	nop			; (mov r8, r8)
 8003c60:	080039c9 	.word	0x080039c9

08003c64 <_free_r>:
 8003c64:	b570      	push	{r4, r5, r6, lr}
 8003c66:	0005      	movs	r5, r0
 8003c68:	2900      	cmp	r1, #0
 8003c6a:	d010      	beq.n	8003c8e <_free_r+0x2a>
 8003c6c:	1f0c      	subs	r4, r1, #4
 8003c6e:	6823      	ldr	r3, [r4, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	da00      	bge.n	8003c76 <_free_r+0x12>
 8003c74:	18e4      	adds	r4, r4, r3
 8003c76:	0028      	movs	r0, r5
 8003c78:	f000 fccc 	bl	8004614 <__malloc_lock>
 8003c7c:	4a1d      	ldr	r2, [pc, #116]	; (8003cf4 <_free_r+0x90>)
 8003c7e:	6813      	ldr	r3, [r2, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d105      	bne.n	8003c90 <_free_r+0x2c>
 8003c84:	6063      	str	r3, [r4, #4]
 8003c86:	6014      	str	r4, [r2, #0]
 8003c88:	0028      	movs	r0, r5
 8003c8a:	f000 fccb 	bl	8004624 <__malloc_unlock>
 8003c8e:	bd70      	pop	{r4, r5, r6, pc}
 8003c90:	42a3      	cmp	r3, r4
 8003c92:	d908      	bls.n	8003ca6 <_free_r+0x42>
 8003c94:	6821      	ldr	r1, [r4, #0]
 8003c96:	1860      	adds	r0, r4, r1
 8003c98:	4283      	cmp	r3, r0
 8003c9a:	d1f3      	bne.n	8003c84 <_free_r+0x20>
 8003c9c:	6818      	ldr	r0, [r3, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	1841      	adds	r1, r0, r1
 8003ca2:	6021      	str	r1, [r4, #0]
 8003ca4:	e7ee      	b.n	8003c84 <_free_r+0x20>
 8003ca6:	001a      	movs	r2, r3
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <_free_r+0x4e>
 8003cae:	42a3      	cmp	r3, r4
 8003cb0:	d9f9      	bls.n	8003ca6 <_free_r+0x42>
 8003cb2:	6811      	ldr	r1, [r2, #0]
 8003cb4:	1850      	adds	r0, r2, r1
 8003cb6:	42a0      	cmp	r0, r4
 8003cb8:	d10b      	bne.n	8003cd2 <_free_r+0x6e>
 8003cba:	6820      	ldr	r0, [r4, #0]
 8003cbc:	1809      	adds	r1, r1, r0
 8003cbe:	1850      	adds	r0, r2, r1
 8003cc0:	6011      	str	r1, [r2, #0]
 8003cc2:	4283      	cmp	r3, r0
 8003cc4:	d1e0      	bne.n	8003c88 <_free_r+0x24>
 8003cc6:	6818      	ldr	r0, [r3, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	1841      	adds	r1, r0, r1
 8003ccc:	6011      	str	r1, [r2, #0]
 8003cce:	6053      	str	r3, [r2, #4]
 8003cd0:	e7da      	b.n	8003c88 <_free_r+0x24>
 8003cd2:	42a0      	cmp	r0, r4
 8003cd4:	d902      	bls.n	8003cdc <_free_r+0x78>
 8003cd6:	230c      	movs	r3, #12
 8003cd8:	602b      	str	r3, [r5, #0]
 8003cda:	e7d5      	b.n	8003c88 <_free_r+0x24>
 8003cdc:	6821      	ldr	r1, [r4, #0]
 8003cde:	1860      	adds	r0, r4, r1
 8003ce0:	4283      	cmp	r3, r0
 8003ce2:	d103      	bne.n	8003cec <_free_r+0x88>
 8003ce4:	6818      	ldr	r0, [r3, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	1841      	adds	r1, r0, r1
 8003cea:	6021      	str	r1, [r4, #0]
 8003cec:	6063      	str	r3, [r4, #4]
 8003cee:	6054      	str	r4, [r2, #4]
 8003cf0:	e7ca      	b.n	8003c88 <_free_r+0x24>
 8003cf2:	46c0      	nop			; (mov r8, r8)
 8003cf4:	200004bc 	.word	0x200004bc

08003cf8 <sbrk_aligned>:
 8003cf8:	b570      	push	{r4, r5, r6, lr}
 8003cfa:	4e0f      	ldr	r6, [pc, #60]	; (8003d38 <sbrk_aligned+0x40>)
 8003cfc:	000d      	movs	r5, r1
 8003cfe:	6831      	ldr	r1, [r6, #0]
 8003d00:	0004      	movs	r4, r0
 8003d02:	2900      	cmp	r1, #0
 8003d04:	d102      	bne.n	8003d0c <sbrk_aligned+0x14>
 8003d06:	f000 fbbd 	bl	8004484 <_sbrk_r>
 8003d0a:	6030      	str	r0, [r6, #0]
 8003d0c:	0029      	movs	r1, r5
 8003d0e:	0020      	movs	r0, r4
 8003d10:	f000 fbb8 	bl	8004484 <_sbrk_r>
 8003d14:	1c43      	adds	r3, r0, #1
 8003d16:	d00a      	beq.n	8003d2e <sbrk_aligned+0x36>
 8003d18:	2303      	movs	r3, #3
 8003d1a:	1cc5      	adds	r5, r0, #3
 8003d1c:	439d      	bics	r5, r3
 8003d1e:	42a8      	cmp	r0, r5
 8003d20:	d007      	beq.n	8003d32 <sbrk_aligned+0x3a>
 8003d22:	1a29      	subs	r1, r5, r0
 8003d24:	0020      	movs	r0, r4
 8003d26:	f000 fbad 	bl	8004484 <_sbrk_r>
 8003d2a:	1c43      	adds	r3, r0, #1
 8003d2c:	d101      	bne.n	8003d32 <sbrk_aligned+0x3a>
 8003d2e:	2501      	movs	r5, #1
 8003d30:	426d      	negs	r5, r5
 8003d32:	0028      	movs	r0, r5
 8003d34:	bd70      	pop	{r4, r5, r6, pc}
 8003d36:	46c0      	nop			; (mov r8, r8)
 8003d38:	200004c0 	.word	0x200004c0

08003d3c <_malloc_r>:
 8003d3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d3e:	2203      	movs	r2, #3
 8003d40:	1ccb      	adds	r3, r1, #3
 8003d42:	4393      	bics	r3, r2
 8003d44:	3308      	adds	r3, #8
 8003d46:	0006      	movs	r6, r0
 8003d48:	001f      	movs	r7, r3
 8003d4a:	2b0c      	cmp	r3, #12
 8003d4c:	d232      	bcs.n	8003db4 <_malloc_r+0x78>
 8003d4e:	270c      	movs	r7, #12
 8003d50:	42b9      	cmp	r1, r7
 8003d52:	d831      	bhi.n	8003db8 <_malloc_r+0x7c>
 8003d54:	0030      	movs	r0, r6
 8003d56:	f000 fc5d 	bl	8004614 <__malloc_lock>
 8003d5a:	4d32      	ldr	r5, [pc, #200]	; (8003e24 <_malloc_r+0xe8>)
 8003d5c:	682b      	ldr	r3, [r5, #0]
 8003d5e:	001c      	movs	r4, r3
 8003d60:	2c00      	cmp	r4, #0
 8003d62:	d12e      	bne.n	8003dc2 <_malloc_r+0x86>
 8003d64:	0039      	movs	r1, r7
 8003d66:	0030      	movs	r0, r6
 8003d68:	f7ff ffc6 	bl	8003cf8 <sbrk_aligned>
 8003d6c:	0004      	movs	r4, r0
 8003d6e:	1c43      	adds	r3, r0, #1
 8003d70:	d11e      	bne.n	8003db0 <_malloc_r+0x74>
 8003d72:	682c      	ldr	r4, [r5, #0]
 8003d74:	0025      	movs	r5, r4
 8003d76:	2d00      	cmp	r5, #0
 8003d78:	d14a      	bne.n	8003e10 <_malloc_r+0xd4>
 8003d7a:	6823      	ldr	r3, [r4, #0]
 8003d7c:	0029      	movs	r1, r5
 8003d7e:	18e3      	adds	r3, r4, r3
 8003d80:	0030      	movs	r0, r6
 8003d82:	9301      	str	r3, [sp, #4]
 8003d84:	f000 fb7e 	bl	8004484 <_sbrk_r>
 8003d88:	9b01      	ldr	r3, [sp, #4]
 8003d8a:	4283      	cmp	r3, r0
 8003d8c:	d143      	bne.n	8003e16 <_malloc_r+0xda>
 8003d8e:	6823      	ldr	r3, [r4, #0]
 8003d90:	3703      	adds	r7, #3
 8003d92:	1aff      	subs	r7, r7, r3
 8003d94:	2303      	movs	r3, #3
 8003d96:	439f      	bics	r7, r3
 8003d98:	3708      	adds	r7, #8
 8003d9a:	2f0c      	cmp	r7, #12
 8003d9c:	d200      	bcs.n	8003da0 <_malloc_r+0x64>
 8003d9e:	270c      	movs	r7, #12
 8003da0:	0039      	movs	r1, r7
 8003da2:	0030      	movs	r0, r6
 8003da4:	f7ff ffa8 	bl	8003cf8 <sbrk_aligned>
 8003da8:	1c43      	adds	r3, r0, #1
 8003daa:	d034      	beq.n	8003e16 <_malloc_r+0xda>
 8003dac:	6823      	ldr	r3, [r4, #0]
 8003dae:	19df      	adds	r7, r3, r7
 8003db0:	6027      	str	r7, [r4, #0]
 8003db2:	e013      	b.n	8003ddc <_malloc_r+0xa0>
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	dacb      	bge.n	8003d50 <_malloc_r+0x14>
 8003db8:	230c      	movs	r3, #12
 8003dba:	2500      	movs	r5, #0
 8003dbc:	6033      	str	r3, [r6, #0]
 8003dbe:	0028      	movs	r0, r5
 8003dc0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003dc2:	6822      	ldr	r2, [r4, #0]
 8003dc4:	1bd1      	subs	r1, r2, r7
 8003dc6:	d420      	bmi.n	8003e0a <_malloc_r+0xce>
 8003dc8:	290b      	cmp	r1, #11
 8003dca:	d917      	bls.n	8003dfc <_malloc_r+0xc0>
 8003dcc:	19e2      	adds	r2, r4, r7
 8003dce:	6027      	str	r7, [r4, #0]
 8003dd0:	42a3      	cmp	r3, r4
 8003dd2:	d111      	bne.n	8003df8 <_malloc_r+0xbc>
 8003dd4:	602a      	str	r2, [r5, #0]
 8003dd6:	6863      	ldr	r3, [r4, #4]
 8003dd8:	6011      	str	r1, [r2, #0]
 8003dda:	6053      	str	r3, [r2, #4]
 8003ddc:	0030      	movs	r0, r6
 8003dde:	0025      	movs	r5, r4
 8003de0:	f000 fc20 	bl	8004624 <__malloc_unlock>
 8003de4:	2207      	movs	r2, #7
 8003de6:	350b      	adds	r5, #11
 8003de8:	1d23      	adds	r3, r4, #4
 8003dea:	4395      	bics	r5, r2
 8003dec:	1aea      	subs	r2, r5, r3
 8003dee:	429d      	cmp	r5, r3
 8003df0:	d0e5      	beq.n	8003dbe <_malloc_r+0x82>
 8003df2:	1b5b      	subs	r3, r3, r5
 8003df4:	50a3      	str	r3, [r4, r2]
 8003df6:	e7e2      	b.n	8003dbe <_malloc_r+0x82>
 8003df8:	605a      	str	r2, [r3, #4]
 8003dfa:	e7ec      	b.n	8003dd6 <_malloc_r+0x9a>
 8003dfc:	6862      	ldr	r2, [r4, #4]
 8003dfe:	42a3      	cmp	r3, r4
 8003e00:	d101      	bne.n	8003e06 <_malloc_r+0xca>
 8003e02:	602a      	str	r2, [r5, #0]
 8003e04:	e7ea      	b.n	8003ddc <_malloc_r+0xa0>
 8003e06:	605a      	str	r2, [r3, #4]
 8003e08:	e7e8      	b.n	8003ddc <_malloc_r+0xa0>
 8003e0a:	0023      	movs	r3, r4
 8003e0c:	6864      	ldr	r4, [r4, #4]
 8003e0e:	e7a7      	b.n	8003d60 <_malloc_r+0x24>
 8003e10:	002c      	movs	r4, r5
 8003e12:	686d      	ldr	r5, [r5, #4]
 8003e14:	e7af      	b.n	8003d76 <_malloc_r+0x3a>
 8003e16:	230c      	movs	r3, #12
 8003e18:	0030      	movs	r0, r6
 8003e1a:	6033      	str	r3, [r6, #0]
 8003e1c:	f000 fc02 	bl	8004624 <__malloc_unlock>
 8003e20:	e7cd      	b.n	8003dbe <_malloc_r+0x82>
 8003e22:	46c0      	nop			; (mov r8, r8)
 8003e24:	200004bc 	.word	0x200004bc

08003e28 <__sfputc_r>:
 8003e28:	6893      	ldr	r3, [r2, #8]
 8003e2a:	b510      	push	{r4, lr}
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	6093      	str	r3, [r2, #8]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	da04      	bge.n	8003e3e <__sfputc_r+0x16>
 8003e34:	6994      	ldr	r4, [r2, #24]
 8003e36:	42a3      	cmp	r3, r4
 8003e38:	db07      	blt.n	8003e4a <__sfputc_r+0x22>
 8003e3a:	290a      	cmp	r1, #10
 8003e3c:	d005      	beq.n	8003e4a <__sfputc_r+0x22>
 8003e3e:	6813      	ldr	r3, [r2, #0]
 8003e40:	1c58      	adds	r0, r3, #1
 8003e42:	6010      	str	r0, [r2, #0]
 8003e44:	7019      	strb	r1, [r3, #0]
 8003e46:	0008      	movs	r0, r1
 8003e48:	bd10      	pop	{r4, pc}
 8003e4a:	f7ff fbff 	bl	800364c <__swbuf_r>
 8003e4e:	0001      	movs	r1, r0
 8003e50:	e7f9      	b.n	8003e46 <__sfputc_r+0x1e>

08003e52 <__sfputs_r>:
 8003e52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e54:	0006      	movs	r6, r0
 8003e56:	000f      	movs	r7, r1
 8003e58:	0014      	movs	r4, r2
 8003e5a:	18d5      	adds	r5, r2, r3
 8003e5c:	42ac      	cmp	r4, r5
 8003e5e:	d101      	bne.n	8003e64 <__sfputs_r+0x12>
 8003e60:	2000      	movs	r0, #0
 8003e62:	e007      	b.n	8003e74 <__sfputs_r+0x22>
 8003e64:	7821      	ldrb	r1, [r4, #0]
 8003e66:	003a      	movs	r2, r7
 8003e68:	0030      	movs	r0, r6
 8003e6a:	f7ff ffdd 	bl	8003e28 <__sfputc_r>
 8003e6e:	3401      	adds	r4, #1
 8003e70:	1c43      	adds	r3, r0, #1
 8003e72:	d1f3      	bne.n	8003e5c <__sfputs_r+0xa>
 8003e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e78 <_vfiprintf_r>:
 8003e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e7a:	b0a1      	sub	sp, #132	; 0x84
 8003e7c:	0006      	movs	r6, r0
 8003e7e:	000c      	movs	r4, r1
 8003e80:	001f      	movs	r7, r3
 8003e82:	9203      	str	r2, [sp, #12]
 8003e84:	2800      	cmp	r0, #0
 8003e86:	d004      	beq.n	8003e92 <_vfiprintf_r+0x1a>
 8003e88:	6983      	ldr	r3, [r0, #24]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <_vfiprintf_r+0x1a>
 8003e8e:	f7ff fdd9 	bl	8003a44 <__sinit>
 8003e92:	4b8e      	ldr	r3, [pc, #568]	; (80040cc <_vfiprintf_r+0x254>)
 8003e94:	429c      	cmp	r4, r3
 8003e96:	d11c      	bne.n	8003ed2 <_vfiprintf_r+0x5a>
 8003e98:	6874      	ldr	r4, [r6, #4]
 8003e9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e9c:	07db      	lsls	r3, r3, #31
 8003e9e:	d405      	bmi.n	8003eac <_vfiprintf_r+0x34>
 8003ea0:	89a3      	ldrh	r3, [r4, #12]
 8003ea2:	059b      	lsls	r3, r3, #22
 8003ea4:	d402      	bmi.n	8003eac <_vfiprintf_r+0x34>
 8003ea6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ea8:	f7ff fe6d 	bl	8003b86 <__retarget_lock_acquire_recursive>
 8003eac:	89a3      	ldrh	r3, [r4, #12]
 8003eae:	071b      	lsls	r3, r3, #28
 8003eb0:	d502      	bpl.n	8003eb8 <_vfiprintf_r+0x40>
 8003eb2:	6923      	ldr	r3, [r4, #16]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d11d      	bne.n	8003ef4 <_vfiprintf_r+0x7c>
 8003eb8:	0021      	movs	r1, r4
 8003eba:	0030      	movs	r0, r6
 8003ebc:	f7ff fc1c 	bl	80036f8 <__swsetup_r>
 8003ec0:	2800      	cmp	r0, #0
 8003ec2:	d017      	beq.n	8003ef4 <_vfiprintf_r+0x7c>
 8003ec4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ec6:	07db      	lsls	r3, r3, #31
 8003ec8:	d50d      	bpl.n	8003ee6 <_vfiprintf_r+0x6e>
 8003eca:	2001      	movs	r0, #1
 8003ecc:	4240      	negs	r0, r0
 8003ece:	b021      	add	sp, #132	; 0x84
 8003ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ed2:	4b7f      	ldr	r3, [pc, #508]	; (80040d0 <_vfiprintf_r+0x258>)
 8003ed4:	429c      	cmp	r4, r3
 8003ed6:	d101      	bne.n	8003edc <_vfiprintf_r+0x64>
 8003ed8:	68b4      	ldr	r4, [r6, #8]
 8003eda:	e7de      	b.n	8003e9a <_vfiprintf_r+0x22>
 8003edc:	4b7d      	ldr	r3, [pc, #500]	; (80040d4 <_vfiprintf_r+0x25c>)
 8003ede:	429c      	cmp	r4, r3
 8003ee0:	d1db      	bne.n	8003e9a <_vfiprintf_r+0x22>
 8003ee2:	68f4      	ldr	r4, [r6, #12]
 8003ee4:	e7d9      	b.n	8003e9a <_vfiprintf_r+0x22>
 8003ee6:	89a3      	ldrh	r3, [r4, #12]
 8003ee8:	059b      	lsls	r3, r3, #22
 8003eea:	d4ee      	bmi.n	8003eca <_vfiprintf_r+0x52>
 8003eec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003eee:	f7ff fe4b 	bl	8003b88 <__retarget_lock_release_recursive>
 8003ef2:	e7ea      	b.n	8003eca <_vfiprintf_r+0x52>
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	ad08      	add	r5, sp, #32
 8003ef8:	616b      	str	r3, [r5, #20]
 8003efa:	3320      	adds	r3, #32
 8003efc:	766b      	strb	r3, [r5, #25]
 8003efe:	3310      	adds	r3, #16
 8003f00:	76ab      	strb	r3, [r5, #26]
 8003f02:	9707      	str	r7, [sp, #28]
 8003f04:	9f03      	ldr	r7, [sp, #12]
 8003f06:	783b      	ldrb	r3, [r7, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <_vfiprintf_r+0x98>
 8003f0c:	2b25      	cmp	r3, #37	; 0x25
 8003f0e:	d14e      	bne.n	8003fae <_vfiprintf_r+0x136>
 8003f10:	9b03      	ldr	r3, [sp, #12]
 8003f12:	1afb      	subs	r3, r7, r3
 8003f14:	9305      	str	r3, [sp, #20]
 8003f16:	9b03      	ldr	r3, [sp, #12]
 8003f18:	429f      	cmp	r7, r3
 8003f1a:	d00d      	beq.n	8003f38 <_vfiprintf_r+0xc0>
 8003f1c:	9b05      	ldr	r3, [sp, #20]
 8003f1e:	0021      	movs	r1, r4
 8003f20:	0030      	movs	r0, r6
 8003f22:	9a03      	ldr	r2, [sp, #12]
 8003f24:	f7ff ff95 	bl	8003e52 <__sfputs_r>
 8003f28:	1c43      	adds	r3, r0, #1
 8003f2a:	d100      	bne.n	8003f2e <_vfiprintf_r+0xb6>
 8003f2c:	e0b5      	b.n	800409a <_vfiprintf_r+0x222>
 8003f2e:	696a      	ldr	r2, [r5, #20]
 8003f30:	9b05      	ldr	r3, [sp, #20]
 8003f32:	4694      	mov	ip, r2
 8003f34:	4463      	add	r3, ip
 8003f36:	616b      	str	r3, [r5, #20]
 8003f38:	783b      	ldrb	r3, [r7, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d100      	bne.n	8003f40 <_vfiprintf_r+0xc8>
 8003f3e:	e0ac      	b.n	800409a <_vfiprintf_r+0x222>
 8003f40:	2201      	movs	r2, #1
 8003f42:	1c7b      	adds	r3, r7, #1
 8003f44:	9303      	str	r3, [sp, #12]
 8003f46:	2300      	movs	r3, #0
 8003f48:	4252      	negs	r2, r2
 8003f4a:	606a      	str	r2, [r5, #4]
 8003f4c:	a904      	add	r1, sp, #16
 8003f4e:	3254      	adds	r2, #84	; 0x54
 8003f50:	1852      	adds	r2, r2, r1
 8003f52:	602b      	str	r3, [r5, #0]
 8003f54:	60eb      	str	r3, [r5, #12]
 8003f56:	60ab      	str	r3, [r5, #8]
 8003f58:	7013      	strb	r3, [r2, #0]
 8003f5a:	65ab      	str	r3, [r5, #88]	; 0x58
 8003f5c:	9b03      	ldr	r3, [sp, #12]
 8003f5e:	2205      	movs	r2, #5
 8003f60:	7819      	ldrb	r1, [r3, #0]
 8003f62:	485d      	ldr	r0, [pc, #372]	; (80040d8 <_vfiprintf_r+0x260>)
 8003f64:	f000 fb4a 	bl	80045fc <memchr>
 8003f68:	9b03      	ldr	r3, [sp, #12]
 8003f6a:	1c5f      	adds	r7, r3, #1
 8003f6c:	2800      	cmp	r0, #0
 8003f6e:	d120      	bne.n	8003fb2 <_vfiprintf_r+0x13a>
 8003f70:	682a      	ldr	r2, [r5, #0]
 8003f72:	06d3      	lsls	r3, r2, #27
 8003f74:	d504      	bpl.n	8003f80 <_vfiprintf_r+0x108>
 8003f76:	2353      	movs	r3, #83	; 0x53
 8003f78:	a904      	add	r1, sp, #16
 8003f7a:	185b      	adds	r3, r3, r1
 8003f7c:	2120      	movs	r1, #32
 8003f7e:	7019      	strb	r1, [r3, #0]
 8003f80:	0713      	lsls	r3, r2, #28
 8003f82:	d504      	bpl.n	8003f8e <_vfiprintf_r+0x116>
 8003f84:	2353      	movs	r3, #83	; 0x53
 8003f86:	a904      	add	r1, sp, #16
 8003f88:	185b      	adds	r3, r3, r1
 8003f8a:	212b      	movs	r1, #43	; 0x2b
 8003f8c:	7019      	strb	r1, [r3, #0]
 8003f8e:	9b03      	ldr	r3, [sp, #12]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	2b2a      	cmp	r3, #42	; 0x2a
 8003f94:	d016      	beq.n	8003fc4 <_vfiprintf_r+0x14c>
 8003f96:	2100      	movs	r1, #0
 8003f98:	68eb      	ldr	r3, [r5, #12]
 8003f9a:	9f03      	ldr	r7, [sp, #12]
 8003f9c:	783a      	ldrb	r2, [r7, #0]
 8003f9e:	1c78      	adds	r0, r7, #1
 8003fa0:	3a30      	subs	r2, #48	; 0x30
 8003fa2:	4684      	mov	ip, r0
 8003fa4:	2a09      	cmp	r2, #9
 8003fa6:	d94f      	bls.n	8004048 <_vfiprintf_r+0x1d0>
 8003fa8:	2900      	cmp	r1, #0
 8003faa:	d111      	bne.n	8003fd0 <_vfiprintf_r+0x158>
 8003fac:	e017      	b.n	8003fde <_vfiprintf_r+0x166>
 8003fae:	3701      	adds	r7, #1
 8003fb0:	e7a9      	b.n	8003f06 <_vfiprintf_r+0x8e>
 8003fb2:	4b49      	ldr	r3, [pc, #292]	; (80040d8 <_vfiprintf_r+0x260>)
 8003fb4:	682a      	ldr	r2, [r5, #0]
 8003fb6:	1ac0      	subs	r0, r0, r3
 8003fb8:	2301      	movs	r3, #1
 8003fba:	4083      	lsls	r3, r0
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	602b      	str	r3, [r5, #0]
 8003fc0:	9703      	str	r7, [sp, #12]
 8003fc2:	e7cb      	b.n	8003f5c <_vfiprintf_r+0xe4>
 8003fc4:	9b07      	ldr	r3, [sp, #28]
 8003fc6:	1d19      	adds	r1, r3, #4
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	9107      	str	r1, [sp, #28]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	db01      	blt.n	8003fd4 <_vfiprintf_r+0x15c>
 8003fd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8003fd2:	e004      	b.n	8003fde <_vfiprintf_r+0x166>
 8003fd4:	425b      	negs	r3, r3
 8003fd6:	60eb      	str	r3, [r5, #12]
 8003fd8:	2302      	movs	r3, #2
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	602b      	str	r3, [r5, #0]
 8003fde:	783b      	ldrb	r3, [r7, #0]
 8003fe0:	2b2e      	cmp	r3, #46	; 0x2e
 8003fe2:	d10a      	bne.n	8003ffa <_vfiprintf_r+0x182>
 8003fe4:	787b      	ldrb	r3, [r7, #1]
 8003fe6:	2b2a      	cmp	r3, #42	; 0x2a
 8003fe8:	d137      	bne.n	800405a <_vfiprintf_r+0x1e2>
 8003fea:	9b07      	ldr	r3, [sp, #28]
 8003fec:	3702      	adds	r7, #2
 8003fee:	1d1a      	adds	r2, r3, #4
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	9207      	str	r2, [sp, #28]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	db2d      	blt.n	8004054 <_vfiprintf_r+0x1dc>
 8003ff8:	9309      	str	r3, [sp, #36]	; 0x24
 8003ffa:	2203      	movs	r2, #3
 8003ffc:	7839      	ldrb	r1, [r7, #0]
 8003ffe:	4837      	ldr	r0, [pc, #220]	; (80040dc <_vfiprintf_r+0x264>)
 8004000:	f000 fafc 	bl	80045fc <memchr>
 8004004:	2800      	cmp	r0, #0
 8004006:	d007      	beq.n	8004018 <_vfiprintf_r+0x1a0>
 8004008:	4b34      	ldr	r3, [pc, #208]	; (80040dc <_vfiprintf_r+0x264>)
 800400a:	682a      	ldr	r2, [r5, #0]
 800400c:	1ac0      	subs	r0, r0, r3
 800400e:	2340      	movs	r3, #64	; 0x40
 8004010:	4083      	lsls	r3, r0
 8004012:	4313      	orrs	r3, r2
 8004014:	3701      	adds	r7, #1
 8004016:	602b      	str	r3, [r5, #0]
 8004018:	7839      	ldrb	r1, [r7, #0]
 800401a:	1c7b      	adds	r3, r7, #1
 800401c:	2206      	movs	r2, #6
 800401e:	4830      	ldr	r0, [pc, #192]	; (80040e0 <_vfiprintf_r+0x268>)
 8004020:	9303      	str	r3, [sp, #12]
 8004022:	7629      	strb	r1, [r5, #24]
 8004024:	f000 faea 	bl	80045fc <memchr>
 8004028:	2800      	cmp	r0, #0
 800402a:	d045      	beq.n	80040b8 <_vfiprintf_r+0x240>
 800402c:	4b2d      	ldr	r3, [pc, #180]	; (80040e4 <_vfiprintf_r+0x26c>)
 800402e:	2b00      	cmp	r3, #0
 8004030:	d127      	bne.n	8004082 <_vfiprintf_r+0x20a>
 8004032:	2207      	movs	r2, #7
 8004034:	9b07      	ldr	r3, [sp, #28]
 8004036:	3307      	adds	r3, #7
 8004038:	4393      	bics	r3, r2
 800403a:	3308      	adds	r3, #8
 800403c:	9307      	str	r3, [sp, #28]
 800403e:	696b      	ldr	r3, [r5, #20]
 8004040:	9a04      	ldr	r2, [sp, #16]
 8004042:	189b      	adds	r3, r3, r2
 8004044:	616b      	str	r3, [r5, #20]
 8004046:	e75d      	b.n	8003f04 <_vfiprintf_r+0x8c>
 8004048:	210a      	movs	r1, #10
 800404a:	434b      	muls	r3, r1
 800404c:	4667      	mov	r7, ip
 800404e:	189b      	adds	r3, r3, r2
 8004050:	3909      	subs	r1, #9
 8004052:	e7a3      	b.n	8003f9c <_vfiprintf_r+0x124>
 8004054:	2301      	movs	r3, #1
 8004056:	425b      	negs	r3, r3
 8004058:	e7ce      	b.n	8003ff8 <_vfiprintf_r+0x180>
 800405a:	2300      	movs	r3, #0
 800405c:	001a      	movs	r2, r3
 800405e:	3701      	adds	r7, #1
 8004060:	606b      	str	r3, [r5, #4]
 8004062:	7839      	ldrb	r1, [r7, #0]
 8004064:	1c78      	adds	r0, r7, #1
 8004066:	3930      	subs	r1, #48	; 0x30
 8004068:	4684      	mov	ip, r0
 800406a:	2909      	cmp	r1, #9
 800406c:	d903      	bls.n	8004076 <_vfiprintf_r+0x1fe>
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0c3      	beq.n	8003ffa <_vfiprintf_r+0x182>
 8004072:	9209      	str	r2, [sp, #36]	; 0x24
 8004074:	e7c1      	b.n	8003ffa <_vfiprintf_r+0x182>
 8004076:	230a      	movs	r3, #10
 8004078:	435a      	muls	r2, r3
 800407a:	4667      	mov	r7, ip
 800407c:	1852      	adds	r2, r2, r1
 800407e:	3b09      	subs	r3, #9
 8004080:	e7ef      	b.n	8004062 <_vfiprintf_r+0x1ea>
 8004082:	ab07      	add	r3, sp, #28
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	0022      	movs	r2, r4
 8004088:	0029      	movs	r1, r5
 800408a:	0030      	movs	r0, r6
 800408c:	4b16      	ldr	r3, [pc, #88]	; (80040e8 <_vfiprintf_r+0x270>)
 800408e:	e000      	b.n	8004092 <_vfiprintf_r+0x21a>
 8004090:	bf00      	nop
 8004092:	9004      	str	r0, [sp, #16]
 8004094:	9b04      	ldr	r3, [sp, #16]
 8004096:	3301      	adds	r3, #1
 8004098:	d1d1      	bne.n	800403e <_vfiprintf_r+0x1c6>
 800409a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800409c:	07db      	lsls	r3, r3, #31
 800409e:	d405      	bmi.n	80040ac <_vfiprintf_r+0x234>
 80040a0:	89a3      	ldrh	r3, [r4, #12]
 80040a2:	059b      	lsls	r3, r3, #22
 80040a4:	d402      	bmi.n	80040ac <_vfiprintf_r+0x234>
 80040a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040a8:	f7ff fd6e 	bl	8003b88 <__retarget_lock_release_recursive>
 80040ac:	89a3      	ldrh	r3, [r4, #12]
 80040ae:	065b      	lsls	r3, r3, #25
 80040b0:	d500      	bpl.n	80040b4 <_vfiprintf_r+0x23c>
 80040b2:	e70a      	b.n	8003eca <_vfiprintf_r+0x52>
 80040b4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80040b6:	e70a      	b.n	8003ece <_vfiprintf_r+0x56>
 80040b8:	ab07      	add	r3, sp, #28
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	0022      	movs	r2, r4
 80040be:	0029      	movs	r1, r5
 80040c0:	0030      	movs	r0, r6
 80040c2:	4b09      	ldr	r3, [pc, #36]	; (80040e8 <_vfiprintf_r+0x270>)
 80040c4:	f000 f882 	bl	80041cc <_printf_i>
 80040c8:	e7e3      	b.n	8004092 <_vfiprintf_r+0x21a>
 80040ca:	46c0      	nop			; (mov r8, r8)
 80040cc:	08004b74 	.word	0x08004b74
 80040d0:	08004b94 	.word	0x08004b94
 80040d4:	08004b54 	.word	0x08004b54
 80040d8:	08004bb4 	.word	0x08004bb4
 80040dc:	08004bba 	.word	0x08004bba
 80040e0:	08004bbe 	.word	0x08004bbe
 80040e4:	00000000 	.word	0x00000000
 80040e8:	08003e53 	.word	0x08003e53

080040ec <_printf_common>:
 80040ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040ee:	0015      	movs	r5, r2
 80040f0:	9301      	str	r3, [sp, #4]
 80040f2:	688a      	ldr	r2, [r1, #8]
 80040f4:	690b      	ldr	r3, [r1, #16]
 80040f6:	000c      	movs	r4, r1
 80040f8:	9000      	str	r0, [sp, #0]
 80040fa:	4293      	cmp	r3, r2
 80040fc:	da00      	bge.n	8004100 <_printf_common+0x14>
 80040fe:	0013      	movs	r3, r2
 8004100:	0022      	movs	r2, r4
 8004102:	602b      	str	r3, [r5, #0]
 8004104:	3243      	adds	r2, #67	; 0x43
 8004106:	7812      	ldrb	r2, [r2, #0]
 8004108:	2a00      	cmp	r2, #0
 800410a:	d001      	beq.n	8004110 <_printf_common+0x24>
 800410c:	3301      	adds	r3, #1
 800410e:	602b      	str	r3, [r5, #0]
 8004110:	6823      	ldr	r3, [r4, #0]
 8004112:	069b      	lsls	r3, r3, #26
 8004114:	d502      	bpl.n	800411c <_printf_common+0x30>
 8004116:	682b      	ldr	r3, [r5, #0]
 8004118:	3302      	adds	r3, #2
 800411a:	602b      	str	r3, [r5, #0]
 800411c:	6822      	ldr	r2, [r4, #0]
 800411e:	2306      	movs	r3, #6
 8004120:	0017      	movs	r7, r2
 8004122:	401f      	ands	r7, r3
 8004124:	421a      	tst	r2, r3
 8004126:	d027      	beq.n	8004178 <_printf_common+0x8c>
 8004128:	0023      	movs	r3, r4
 800412a:	3343      	adds	r3, #67	; 0x43
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	1e5a      	subs	r2, r3, #1
 8004130:	4193      	sbcs	r3, r2
 8004132:	6822      	ldr	r2, [r4, #0]
 8004134:	0692      	lsls	r2, r2, #26
 8004136:	d430      	bmi.n	800419a <_printf_common+0xae>
 8004138:	0022      	movs	r2, r4
 800413a:	9901      	ldr	r1, [sp, #4]
 800413c:	9800      	ldr	r0, [sp, #0]
 800413e:	9e08      	ldr	r6, [sp, #32]
 8004140:	3243      	adds	r2, #67	; 0x43
 8004142:	47b0      	blx	r6
 8004144:	1c43      	adds	r3, r0, #1
 8004146:	d025      	beq.n	8004194 <_printf_common+0xa8>
 8004148:	2306      	movs	r3, #6
 800414a:	6820      	ldr	r0, [r4, #0]
 800414c:	682a      	ldr	r2, [r5, #0]
 800414e:	68e1      	ldr	r1, [r4, #12]
 8004150:	2500      	movs	r5, #0
 8004152:	4003      	ands	r3, r0
 8004154:	2b04      	cmp	r3, #4
 8004156:	d103      	bne.n	8004160 <_printf_common+0x74>
 8004158:	1a8d      	subs	r5, r1, r2
 800415a:	43eb      	mvns	r3, r5
 800415c:	17db      	asrs	r3, r3, #31
 800415e:	401d      	ands	r5, r3
 8004160:	68a3      	ldr	r3, [r4, #8]
 8004162:	6922      	ldr	r2, [r4, #16]
 8004164:	4293      	cmp	r3, r2
 8004166:	dd01      	ble.n	800416c <_printf_common+0x80>
 8004168:	1a9b      	subs	r3, r3, r2
 800416a:	18ed      	adds	r5, r5, r3
 800416c:	2700      	movs	r7, #0
 800416e:	42bd      	cmp	r5, r7
 8004170:	d120      	bne.n	80041b4 <_printf_common+0xc8>
 8004172:	2000      	movs	r0, #0
 8004174:	e010      	b.n	8004198 <_printf_common+0xac>
 8004176:	3701      	adds	r7, #1
 8004178:	68e3      	ldr	r3, [r4, #12]
 800417a:	682a      	ldr	r2, [r5, #0]
 800417c:	1a9b      	subs	r3, r3, r2
 800417e:	42bb      	cmp	r3, r7
 8004180:	ddd2      	ble.n	8004128 <_printf_common+0x3c>
 8004182:	0022      	movs	r2, r4
 8004184:	2301      	movs	r3, #1
 8004186:	9901      	ldr	r1, [sp, #4]
 8004188:	9800      	ldr	r0, [sp, #0]
 800418a:	9e08      	ldr	r6, [sp, #32]
 800418c:	3219      	adds	r2, #25
 800418e:	47b0      	blx	r6
 8004190:	1c43      	adds	r3, r0, #1
 8004192:	d1f0      	bne.n	8004176 <_printf_common+0x8a>
 8004194:	2001      	movs	r0, #1
 8004196:	4240      	negs	r0, r0
 8004198:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800419a:	2030      	movs	r0, #48	; 0x30
 800419c:	18e1      	adds	r1, r4, r3
 800419e:	3143      	adds	r1, #67	; 0x43
 80041a0:	7008      	strb	r0, [r1, #0]
 80041a2:	0021      	movs	r1, r4
 80041a4:	1c5a      	adds	r2, r3, #1
 80041a6:	3145      	adds	r1, #69	; 0x45
 80041a8:	7809      	ldrb	r1, [r1, #0]
 80041aa:	18a2      	adds	r2, r4, r2
 80041ac:	3243      	adds	r2, #67	; 0x43
 80041ae:	3302      	adds	r3, #2
 80041b0:	7011      	strb	r1, [r2, #0]
 80041b2:	e7c1      	b.n	8004138 <_printf_common+0x4c>
 80041b4:	0022      	movs	r2, r4
 80041b6:	2301      	movs	r3, #1
 80041b8:	9901      	ldr	r1, [sp, #4]
 80041ba:	9800      	ldr	r0, [sp, #0]
 80041bc:	9e08      	ldr	r6, [sp, #32]
 80041be:	321a      	adds	r2, #26
 80041c0:	47b0      	blx	r6
 80041c2:	1c43      	adds	r3, r0, #1
 80041c4:	d0e6      	beq.n	8004194 <_printf_common+0xa8>
 80041c6:	3701      	adds	r7, #1
 80041c8:	e7d1      	b.n	800416e <_printf_common+0x82>
	...

080041cc <_printf_i>:
 80041cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041ce:	b08b      	sub	sp, #44	; 0x2c
 80041d0:	9206      	str	r2, [sp, #24]
 80041d2:	000a      	movs	r2, r1
 80041d4:	3243      	adds	r2, #67	; 0x43
 80041d6:	9307      	str	r3, [sp, #28]
 80041d8:	9005      	str	r0, [sp, #20]
 80041da:	9204      	str	r2, [sp, #16]
 80041dc:	7e0a      	ldrb	r2, [r1, #24]
 80041de:	000c      	movs	r4, r1
 80041e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80041e2:	2a78      	cmp	r2, #120	; 0x78
 80041e4:	d807      	bhi.n	80041f6 <_printf_i+0x2a>
 80041e6:	2a62      	cmp	r2, #98	; 0x62
 80041e8:	d809      	bhi.n	80041fe <_printf_i+0x32>
 80041ea:	2a00      	cmp	r2, #0
 80041ec:	d100      	bne.n	80041f0 <_printf_i+0x24>
 80041ee:	e0c1      	b.n	8004374 <_printf_i+0x1a8>
 80041f0:	2a58      	cmp	r2, #88	; 0x58
 80041f2:	d100      	bne.n	80041f6 <_printf_i+0x2a>
 80041f4:	e08c      	b.n	8004310 <_printf_i+0x144>
 80041f6:	0026      	movs	r6, r4
 80041f8:	3642      	adds	r6, #66	; 0x42
 80041fa:	7032      	strb	r2, [r6, #0]
 80041fc:	e022      	b.n	8004244 <_printf_i+0x78>
 80041fe:	0010      	movs	r0, r2
 8004200:	3863      	subs	r0, #99	; 0x63
 8004202:	2815      	cmp	r0, #21
 8004204:	d8f7      	bhi.n	80041f6 <_printf_i+0x2a>
 8004206:	f7fb ff7f 	bl	8000108 <__gnu_thumb1_case_shi>
 800420a:	0016      	.short	0x0016
 800420c:	fff6001f 	.word	0xfff6001f
 8004210:	fff6fff6 	.word	0xfff6fff6
 8004214:	001ffff6 	.word	0x001ffff6
 8004218:	fff6fff6 	.word	0xfff6fff6
 800421c:	fff6fff6 	.word	0xfff6fff6
 8004220:	003600a8 	.word	0x003600a8
 8004224:	fff6009a 	.word	0xfff6009a
 8004228:	00b9fff6 	.word	0x00b9fff6
 800422c:	0036fff6 	.word	0x0036fff6
 8004230:	fff6fff6 	.word	0xfff6fff6
 8004234:	009e      	.short	0x009e
 8004236:	0026      	movs	r6, r4
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	3642      	adds	r6, #66	; 0x42
 800423c:	1d11      	adds	r1, r2, #4
 800423e:	6019      	str	r1, [r3, #0]
 8004240:	6813      	ldr	r3, [r2, #0]
 8004242:	7033      	strb	r3, [r6, #0]
 8004244:	2301      	movs	r3, #1
 8004246:	e0a7      	b.n	8004398 <_printf_i+0x1cc>
 8004248:	6808      	ldr	r0, [r1, #0]
 800424a:	6819      	ldr	r1, [r3, #0]
 800424c:	1d0a      	adds	r2, r1, #4
 800424e:	0605      	lsls	r5, r0, #24
 8004250:	d50b      	bpl.n	800426a <_printf_i+0x9e>
 8004252:	680d      	ldr	r5, [r1, #0]
 8004254:	601a      	str	r2, [r3, #0]
 8004256:	2d00      	cmp	r5, #0
 8004258:	da03      	bge.n	8004262 <_printf_i+0x96>
 800425a:	232d      	movs	r3, #45	; 0x2d
 800425c:	9a04      	ldr	r2, [sp, #16]
 800425e:	426d      	negs	r5, r5
 8004260:	7013      	strb	r3, [r2, #0]
 8004262:	4b61      	ldr	r3, [pc, #388]	; (80043e8 <_printf_i+0x21c>)
 8004264:	270a      	movs	r7, #10
 8004266:	9303      	str	r3, [sp, #12]
 8004268:	e01b      	b.n	80042a2 <_printf_i+0xd6>
 800426a:	680d      	ldr	r5, [r1, #0]
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	0641      	lsls	r1, r0, #25
 8004270:	d5f1      	bpl.n	8004256 <_printf_i+0x8a>
 8004272:	b22d      	sxth	r5, r5
 8004274:	e7ef      	b.n	8004256 <_printf_i+0x8a>
 8004276:	680d      	ldr	r5, [r1, #0]
 8004278:	6819      	ldr	r1, [r3, #0]
 800427a:	1d08      	adds	r0, r1, #4
 800427c:	6018      	str	r0, [r3, #0]
 800427e:	062e      	lsls	r6, r5, #24
 8004280:	d501      	bpl.n	8004286 <_printf_i+0xba>
 8004282:	680d      	ldr	r5, [r1, #0]
 8004284:	e003      	b.n	800428e <_printf_i+0xc2>
 8004286:	066d      	lsls	r5, r5, #25
 8004288:	d5fb      	bpl.n	8004282 <_printf_i+0xb6>
 800428a:	680d      	ldr	r5, [r1, #0]
 800428c:	b2ad      	uxth	r5, r5
 800428e:	4b56      	ldr	r3, [pc, #344]	; (80043e8 <_printf_i+0x21c>)
 8004290:	2708      	movs	r7, #8
 8004292:	9303      	str	r3, [sp, #12]
 8004294:	2a6f      	cmp	r2, #111	; 0x6f
 8004296:	d000      	beq.n	800429a <_printf_i+0xce>
 8004298:	3702      	adds	r7, #2
 800429a:	0023      	movs	r3, r4
 800429c:	2200      	movs	r2, #0
 800429e:	3343      	adds	r3, #67	; 0x43
 80042a0:	701a      	strb	r2, [r3, #0]
 80042a2:	6863      	ldr	r3, [r4, #4]
 80042a4:	60a3      	str	r3, [r4, #8]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	db03      	blt.n	80042b2 <_printf_i+0xe6>
 80042aa:	2204      	movs	r2, #4
 80042ac:	6821      	ldr	r1, [r4, #0]
 80042ae:	4391      	bics	r1, r2
 80042b0:	6021      	str	r1, [r4, #0]
 80042b2:	2d00      	cmp	r5, #0
 80042b4:	d102      	bne.n	80042bc <_printf_i+0xf0>
 80042b6:	9e04      	ldr	r6, [sp, #16]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00c      	beq.n	80042d6 <_printf_i+0x10a>
 80042bc:	9e04      	ldr	r6, [sp, #16]
 80042be:	0028      	movs	r0, r5
 80042c0:	0039      	movs	r1, r7
 80042c2:	f7fb ffb1 	bl	8000228 <__aeabi_uidivmod>
 80042c6:	9b03      	ldr	r3, [sp, #12]
 80042c8:	3e01      	subs	r6, #1
 80042ca:	5c5b      	ldrb	r3, [r3, r1]
 80042cc:	7033      	strb	r3, [r6, #0]
 80042ce:	002b      	movs	r3, r5
 80042d0:	0005      	movs	r5, r0
 80042d2:	429f      	cmp	r7, r3
 80042d4:	d9f3      	bls.n	80042be <_printf_i+0xf2>
 80042d6:	2f08      	cmp	r7, #8
 80042d8:	d109      	bne.n	80042ee <_printf_i+0x122>
 80042da:	6823      	ldr	r3, [r4, #0]
 80042dc:	07db      	lsls	r3, r3, #31
 80042de:	d506      	bpl.n	80042ee <_printf_i+0x122>
 80042e0:	6863      	ldr	r3, [r4, #4]
 80042e2:	6922      	ldr	r2, [r4, #16]
 80042e4:	4293      	cmp	r3, r2
 80042e6:	dc02      	bgt.n	80042ee <_printf_i+0x122>
 80042e8:	2330      	movs	r3, #48	; 0x30
 80042ea:	3e01      	subs	r6, #1
 80042ec:	7033      	strb	r3, [r6, #0]
 80042ee:	9b04      	ldr	r3, [sp, #16]
 80042f0:	1b9b      	subs	r3, r3, r6
 80042f2:	6123      	str	r3, [r4, #16]
 80042f4:	9b07      	ldr	r3, [sp, #28]
 80042f6:	0021      	movs	r1, r4
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	9805      	ldr	r0, [sp, #20]
 80042fc:	9b06      	ldr	r3, [sp, #24]
 80042fe:	aa09      	add	r2, sp, #36	; 0x24
 8004300:	f7ff fef4 	bl	80040ec <_printf_common>
 8004304:	1c43      	adds	r3, r0, #1
 8004306:	d14c      	bne.n	80043a2 <_printf_i+0x1d6>
 8004308:	2001      	movs	r0, #1
 800430a:	4240      	negs	r0, r0
 800430c:	b00b      	add	sp, #44	; 0x2c
 800430e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004310:	3145      	adds	r1, #69	; 0x45
 8004312:	700a      	strb	r2, [r1, #0]
 8004314:	4a34      	ldr	r2, [pc, #208]	; (80043e8 <_printf_i+0x21c>)
 8004316:	9203      	str	r2, [sp, #12]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	6821      	ldr	r1, [r4, #0]
 800431c:	ca20      	ldmia	r2!, {r5}
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	0608      	lsls	r0, r1, #24
 8004322:	d516      	bpl.n	8004352 <_printf_i+0x186>
 8004324:	07cb      	lsls	r3, r1, #31
 8004326:	d502      	bpl.n	800432e <_printf_i+0x162>
 8004328:	2320      	movs	r3, #32
 800432a:	4319      	orrs	r1, r3
 800432c:	6021      	str	r1, [r4, #0]
 800432e:	2710      	movs	r7, #16
 8004330:	2d00      	cmp	r5, #0
 8004332:	d1b2      	bne.n	800429a <_printf_i+0xce>
 8004334:	2320      	movs	r3, #32
 8004336:	6822      	ldr	r2, [r4, #0]
 8004338:	439a      	bics	r2, r3
 800433a:	6022      	str	r2, [r4, #0]
 800433c:	e7ad      	b.n	800429a <_printf_i+0xce>
 800433e:	2220      	movs	r2, #32
 8004340:	6809      	ldr	r1, [r1, #0]
 8004342:	430a      	orrs	r2, r1
 8004344:	6022      	str	r2, [r4, #0]
 8004346:	0022      	movs	r2, r4
 8004348:	2178      	movs	r1, #120	; 0x78
 800434a:	3245      	adds	r2, #69	; 0x45
 800434c:	7011      	strb	r1, [r2, #0]
 800434e:	4a27      	ldr	r2, [pc, #156]	; (80043ec <_printf_i+0x220>)
 8004350:	e7e1      	b.n	8004316 <_printf_i+0x14a>
 8004352:	0648      	lsls	r0, r1, #25
 8004354:	d5e6      	bpl.n	8004324 <_printf_i+0x158>
 8004356:	b2ad      	uxth	r5, r5
 8004358:	e7e4      	b.n	8004324 <_printf_i+0x158>
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	680d      	ldr	r5, [r1, #0]
 800435e:	1d10      	adds	r0, r2, #4
 8004360:	6949      	ldr	r1, [r1, #20]
 8004362:	6018      	str	r0, [r3, #0]
 8004364:	6813      	ldr	r3, [r2, #0]
 8004366:	062e      	lsls	r6, r5, #24
 8004368:	d501      	bpl.n	800436e <_printf_i+0x1a2>
 800436a:	6019      	str	r1, [r3, #0]
 800436c:	e002      	b.n	8004374 <_printf_i+0x1a8>
 800436e:	066d      	lsls	r5, r5, #25
 8004370:	d5fb      	bpl.n	800436a <_printf_i+0x19e>
 8004372:	8019      	strh	r1, [r3, #0]
 8004374:	2300      	movs	r3, #0
 8004376:	9e04      	ldr	r6, [sp, #16]
 8004378:	6123      	str	r3, [r4, #16]
 800437a:	e7bb      	b.n	80042f4 <_printf_i+0x128>
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	1d11      	adds	r1, r2, #4
 8004380:	6019      	str	r1, [r3, #0]
 8004382:	6816      	ldr	r6, [r2, #0]
 8004384:	2100      	movs	r1, #0
 8004386:	0030      	movs	r0, r6
 8004388:	6862      	ldr	r2, [r4, #4]
 800438a:	f000 f937 	bl	80045fc <memchr>
 800438e:	2800      	cmp	r0, #0
 8004390:	d001      	beq.n	8004396 <_printf_i+0x1ca>
 8004392:	1b80      	subs	r0, r0, r6
 8004394:	6060      	str	r0, [r4, #4]
 8004396:	6863      	ldr	r3, [r4, #4]
 8004398:	6123      	str	r3, [r4, #16]
 800439a:	2300      	movs	r3, #0
 800439c:	9a04      	ldr	r2, [sp, #16]
 800439e:	7013      	strb	r3, [r2, #0]
 80043a0:	e7a8      	b.n	80042f4 <_printf_i+0x128>
 80043a2:	6923      	ldr	r3, [r4, #16]
 80043a4:	0032      	movs	r2, r6
 80043a6:	9906      	ldr	r1, [sp, #24]
 80043a8:	9805      	ldr	r0, [sp, #20]
 80043aa:	9d07      	ldr	r5, [sp, #28]
 80043ac:	47a8      	blx	r5
 80043ae:	1c43      	adds	r3, r0, #1
 80043b0:	d0aa      	beq.n	8004308 <_printf_i+0x13c>
 80043b2:	6823      	ldr	r3, [r4, #0]
 80043b4:	079b      	lsls	r3, r3, #30
 80043b6:	d415      	bmi.n	80043e4 <_printf_i+0x218>
 80043b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043ba:	68e0      	ldr	r0, [r4, #12]
 80043bc:	4298      	cmp	r0, r3
 80043be:	daa5      	bge.n	800430c <_printf_i+0x140>
 80043c0:	0018      	movs	r0, r3
 80043c2:	e7a3      	b.n	800430c <_printf_i+0x140>
 80043c4:	0022      	movs	r2, r4
 80043c6:	2301      	movs	r3, #1
 80043c8:	9906      	ldr	r1, [sp, #24]
 80043ca:	9805      	ldr	r0, [sp, #20]
 80043cc:	9e07      	ldr	r6, [sp, #28]
 80043ce:	3219      	adds	r2, #25
 80043d0:	47b0      	blx	r6
 80043d2:	1c43      	adds	r3, r0, #1
 80043d4:	d098      	beq.n	8004308 <_printf_i+0x13c>
 80043d6:	3501      	adds	r5, #1
 80043d8:	68e3      	ldr	r3, [r4, #12]
 80043da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043dc:	1a9b      	subs	r3, r3, r2
 80043de:	42ab      	cmp	r3, r5
 80043e0:	dcf0      	bgt.n	80043c4 <_printf_i+0x1f8>
 80043e2:	e7e9      	b.n	80043b8 <_printf_i+0x1ec>
 80043e4:	2500      	movs	r5, #0
 80043e6:	e7f7      	b.n	80043d8 <_printf_i+0x20c>
 80043e8:	08004bc5 	.word	0x08004bc5
 80043ec:	08004bd6 	.word	0x08004bd6

080043f0 <_putc_r>:
 80043f0:	b570      	push	{r4, r5, r6, lr}
 80043f2:	0006      	movs	r6, r0
 80043f4:	000d      	movs	r5, r1
 80043f6:	0014      	movs	r4, r2
 80043f8:	2800      	cmp	r0, #0
 80043fa:	d004      	beq.n	8004406 <_putc_r+0x16>
 80043fc:	6983      	ldr	r3, [r0, #24]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <_putc_r+0x16>
 8004402:	f7ff fb1f 	bl	8003a44 <__sinit>
 8004406:	4b1c      	ldr	r3, [pc, #112]	; (8004478 <_putc_r+0x88>)
 8004408:	429c      	cmp	r4, r3
 800440a:	d124      	bne.n	8004456 <_putc_r+0x66>
 800440c:	6874      	ldr	r4, [r6, #4]
 800440e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004410:	07db      	lsls	r3, r3, #31
 8004412:	d405      	bmi.n	8004420 <_putc_r+0x30>
 8004414:	89a3      	ldrh	r3, [r4, #12]
 8004416:	059b      	lsls	r3, r3, #22
 8004418:	d402      	bmi.n	8004420 <_putc_r+0x30>
 800441a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800441c:	f7ff fbb3 	bl	8003b86 <__retarget_lock_acquire_recursive>
 8004420:	68a3      	ldr	r3, [r4, #8]
 8004422:	3b01      	subs	r3, #1
 8004424:	60a3      	str	r3, [r4, #8]
 8004426:	2b00      	cmp	r3, #0
 8004428:	da05      	bge.n	8004436 <_putc_r+0x46>
 800442a:	69a2      	ldr	r2, [r4, #24]
 800442c:	4293      	cmp	r3, r2
 800442e:	db1c      	blt.n	800446a <_putc_r+0x7a>
 8004430:	b2eb      	uxtb	r3, r5
 8004432:	2b0a      	cmp	r3, #10
 8004434:	d019      	beq.n	800446a <_putc_r+0x7a>
 8004436:	6823      	ldr	r3, [r4, #0]
 8004438:	1c5a      	adds	r2, r3, #1
 800443a:	6022      	str	r2, [r4, #0]
 800443c:	701d      	strb	r5, [r3, #0]
 800443e:	b2ed      	uxtb	r5, r5
 8004440:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004442:	07db      	lsls	r3, r3, #31
 8004444:	d405      	bmi.n	8004452 <_putc_r+0x62>
 8004446:	89a3      	ldrh	r3, [r4, #12]
 8004448:	059b      	lsls	r3, r3, #22
 800444a:	d402      	bmi.n	8004452 <_putc_r+0x62>
 800444c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800444e:	f7ff fb9b 	bl	8003b88 <__retarget_lock_release_recursive>
 8004452:	0028      	movs	r0, r5
 8004454:	bd70      	pop	{r4, r5, r6, pc}
 8004456:	4b09      	ldr	r3, [pc, #36]	; (800447c <_putc_r+0x8c>)
 8004458:	429c      	cmp	r4, r3
 800445a:	d101      	bne.n	8004460 <_putc_r+0x70>
 800445c:	68b4      	ldr	r4, [r6, #8]
 800445e:	e7d6      	b.n	800440e <_putc_r+0x1e>
 8004460:	4b07      	ldr	r3, [pc, #28]	; (8004480 <_putc_r+0x90>)
 8004462:	429c      	cmp	r4, r3
 8004464:	d1d3      	bne.n	800440e <_putc_r+0x1e>
 8004466:	68f4      	ldr	r4, [r6, #12]
 8004468:	e7d1      	b.n	800440e <_putc_r+0x1e>
 800446a:	0029      	movs	r1, r5
 800446c:	0022      	movs	r2, r4
 800446e:	0030      	movs	r0, r6
 8004470:	f7ff f8ec 	bl	800364c <__swbuf_r>
 8004474:	0005      	movs	r5, r0
 8004476:	e7e3      	b.n	8004440 <_putc_r+0x50>
 8004478:	08004b74 	.word	0x08004b74
 800447c:	08004b94 	.word	0x08004b94
 8004480:	08004b54 	.word	0x08004b54

08004484 <_sbrk_r>:
 8004484:	2300      	movs	r3, #0
 8004486:	b570      	push	{r4, r5, r6, lr}
 8004488:	4d06      	ldr	r5, [pc, #24]	; (80044a4 <_sbrk_r+0x20>)
 800448a:	0004      	movs	r4, r0
 800448c:	0008      	movs	r0, r1
 800448e:	602b      	str	r3, [r5, #0]
 8004490:	f7fc ff08 	bl	80012a4 <_sbrk>
 8004494:	1c43      	adds	r3, r0, #1
 8004496:	d103      	bne.n	80044a0 <_sbrk_r+0x1c>
 8004498:	682b      	ldr	r3, [r5, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d000      	beq.n	80044a0 <_sbrk_r+0x1c>
 800449e:	6023      	str	r3, [r4, #0]
 80044a0:	bd70      	pop	{r4, r5, r6, pc}
 80044a2:	46c0      	nop			; (mov r8, r8)
 80044a4:	200004c4 	.word	0x200004c4

080044a8 <__sread>:
 80044a8:	b570      	push	{r4, r5, r6, lr}
 80044aa:	000c      	movs	r4, r1
 80044ac:	250e      	movs	r5, #14
 80044ae:	5f49      	ldrsh	r1, [r1, r5]
 80044b0:	f000 f8c0 	bl	8004634 <_read_r>
 80044b4:	2800      	cmp	r0, #0
 80044b6:	db03      	blt.n	80044c0 <__sread+0x18>
 80044b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80044ba:	181b      	adds	r3, r3, r0
 80044bc:	6563      	str	r3, [r4, #84]	; 0x54
 80044be:	bd70      	pop	{r4, r5, r6, pc}
 80044c0:	89a3      	ldrh	r3, [r4, #12]
 80044c2:	4a02      	ldr	r2, [pc, #8]	; (80044cc <__sread+0x24>)
 80044c4:	4013      	ands	r3, r2
 80044c6:	81a3      	strh	r3, [r4, #12]
 80044c8:	e7f9      	b.n	80044be <__sread+0x16>
 80044ca:	46c0      	nop			; (mov r8, r8)
 80044cc:	ffffefff 	.word	0xffffefff

080044d0 <__swrite>:
 80044d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d2:	001f      	movs	r7, r3
 80044d4:	898b      	ldrh	r3, [r1, #12]
 80044d6:	0005      	movs	r5, r0
 80044d8:	000c      	movs	r4, r1
 80044da:	0016      	movs	r6, r2
 80044dc:	05db      	lsls	r3, r3, #23
 80044de:	d505      	bpl.n	80044ec <__swrite+0x1c>
 80044e0:	230e      	movs	r3, #14
 80044e2:	5ec9      	ldrsh	r1, [r1, r3]
 80044e4:	2200      	movs	r2, #0
 80044e6:	2302      	movs	r3, #2
 80044e8:	f000 f874 	bl	80045d4 <_lseek_r>
 80044ec:	89a3      	ldrh	r3, [r4, #12]
 80044ee:	4a05      	ldr	r2, [pc, #20]	; (8004504 <__swrite+0x34>)
 80044f0:	0028      	movs	r0, r5
 80044f2:	4013      	ands	r3, r2
 80044f4:	81a3      	strh	r3, [r4, #12]
 80044f6:	0032      	movs	r2, r6
 80044f8:	230e      	movs	r3, #14
 80044fa:	5ee1      	ldrsh	r1, [r4, r3]
 80044fc:	003b      	movs	r3, r7
 80044fe:	f000 f81f 	bl	8004540 <_write_r>
 8004502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004504:	ffffefff 	.word	0xffffefff

08004508 <__sseek>:
 8004508:	b570      	push	{r4, r5, r6, lr}
 800450a:	000c      	movs	r4, r1
 800450c:	250e      	movs	r5, #14
 800450e:	5f49      	ldrsh	r1, [r1, r5]
 8004510:	f000 f860 	bl	80045d4 <_lseek_r>
 8004514:	89a3      	ldrh	r3, [r4, #12]
 8004516:	1c42      	adds	r2, r0, #1
 8004518:	d103      	bne.n	8004522 <__sseek+0x1a>
 800451a:	4a05      	ldr	r2, [pc, #20]	; (8004530 <__sseek+0x28>)
 800451c:	4013      	ands	r3, r2
 800451e:	81a3      	strh	r3, [r4, #12]
 8004520:	bd70      	pop	{r4, r5, r6, pc}
 8004522:	2280      	movs	r2, #128	; 0x80
 8004524:	0152      	lsls	r2, r2, #5
 8004526:	4313      	orrs	r3, r2
 8004528:	81a3      	strh	r3, [r4, #12]
 800452a:	6560      	str	r0, [r4, #84]	; 0x54
 800452c:	e7f8      	b.n	8004520 <__sseek+0x18>
 800452e:	46c0      	nop			; (mov r8, r8)
 8004530:	ffffefff 	.word	0xffffefff

08004534 <__sclose>:
 8004534:	b510      	push	{r4, lr}
 8004536:	230e      	movs	r3, #14
 8004538:	5ec9      	ldrsh	r1, [r1, r3]
 800453a:	f000 f815 	bl	8004568 <_close_r>
 800453e:	bd10      	pop	{r4, pc}

08004540 <_write_r>:
 8004540:	b570      	push	{r4, r5, r6, lr}
 8004542:	0004      	movs	r4, r0
 8004544:	0008      	movs	r0, r1
 8004546:	0011      	movs	r1, r2
 8004548:	001a      	movs	r2, r3
 800454a:	2300      	movs	r3, #0
 800454c:	4d05      	ldr	r5, [pc, #20]	; (8004564 <_write_r+0x24>)
 800454e:	602b      	str	r3, [r5, #0]
 8004550:	f7fc fe60 	bl	8001214 <_write>
 8004554:	1c43      	adds	r3, r0, #1
 8004556:	d103      	bne.n	8004560 <_write_r+0x20>
 8004558:	682b      	ldr	r3, [r5, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d000      	beq.n	8004560 <_write_r+0x20>
 800455e:	6023      	str	r3, [r4, #0]
 8004560:	bd70      	pop	{r4, r5, r6, pc}
 8004562:	46c0      	nop			; (mov r8, r8)
 8004564:	200004c4 	.word	0x200004c4

08004568 <_close_r>:
 8004568:	2300      	movs	r3, #0
 800456a:	b570      	push	{r4, r5, r6, lr}
 800456c:	4d06      	ldr	r5, [pc, #24]	; (8004588 <_close_r+0x20>)
 800456e:	0004      	movs	r4, r0
 8004570:	0008      	movs	r0, r1
 8004572:	602b      	str	r3, [r5, #0]
 8004574:	f7fc fe6a 	bl	800124c <_close>
 8004578:	1c43      	adds	r3, r0, #1
 800457a:	d103      	bne.n	8004584 <_close_r+0x1c>
 800457c:	682b      	ldr	r3, [r5, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d000      	beq.n	8004584 <_close_r+0x1c>
 8004582:	6023      	str	r3, [r4, #0]
 8004584:	bd70      	pop	{r4, r5, r6, pc}
 8004586:	46c0      	nop			; (mov r8, r8)
 8004588:	200004c4 	.word	0x200004c4

0800458c <_fstat_r>:
 800458c:	2300      	movs	r3, #0
 800458e:	b570      	push	{r4, r5, r6, lr}
 8004590:	4d06      	ldr	r5, [pc, #24]	; (80045ac <_fstat_r+0x20>)
 8004592:	0004      	movs	r4, r0
 8004594:	0008      	movs	r0, r1
 8004596:	0011      	movs	r1, r2
 8004598:	602b      	str	r3, [r5, #0]
 800459a:	f7fc fe61 	bl	8001260 <_fstat>
 800459e:	1c43      	adds	r3, r0, #1
 80045a0:	d103      	bne.n	80045aa <_fstat_r+0x1e>
 80045a2:	682b      	ldr	r3, [r5, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d000      	beq.n	80045aa <_fstat_r+0x1e>
 80045a8:	6023      	str	r3, [r4, #0]
 80045aa:	bd70      	pop	{r4, r5, r6, pc}
 80045ac:	200004c4 	.word	0x200004c4

080045b0 <_isatty_r>:
 80045b0:	2300      	movs	r3, #0
 80045b2:	b570      	push	{r4, r5, r6, lr}
 80045b4:	4d06      	ldr	r5, [pc, #24]	; (80045d0 <_isatty_r+0x20>)
 80045b6:	0004      	movs	r4, r0
 80045b8:	0008      	movs	r0, r1
 80045ba:	602b      	str	r3, [r5, #0]
 80045bc:	f7fc fe5e 	bl	800127c <_isatty>
 80045c0:	1c43      	adds	r3, r0, #1
 80045c2:	d103      	bne.n	80045cc <_isatty_r+0x1c>
 80045c4:	682b      	ldr	r3, [r5, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d000      	beq.n	80045cc <_isatty_r+0x1c>
 80045ca:	6023      	str	r3, [r4, #0]
 80045cc:	bd70      	pop	{r4, r5, r6, pc}
 80045ce:	46c0      	nop			; (mov r8, r8)
 80045d0:	200004c4 	.word	0x200004c4

080045d4 <_lseek_r>:
 80045d4:	b570      	push	{r4, r5, r6, lr}
 80045d6:	0004      	movs	r4, r0
 80045d8:	0008      	movs	r0, r1
 80045da:	0011      	movs	r1, r2
 80045dc:	001a      	movs	r2, r3
 80045de:	2300      	movs	r3, #0
 80045e0:	4d05      	ldr	r5, [pc, #20]	; (80045f8 <_lseek_r+0x24>)
 80045e2:	602b      	str	r3, [r5, #0]
 80045e4:	f7fc fe53 	bl	800128e <_lseek>
 80045e8:	1c43      	adds	r3, r0, #1
 80045ea:	d103      	bne.n	80045f4 <_lseek_r+0x20>
 80045ec:	682b      	ldr	r3, [r5, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d000      	beq.n	80045f4 <_lseek_r+0x20>
 80045f2:	6023      	str	r3, [r4, #0]
 80045f4:	bd70      	pop	{r4, r5, r6, pc}
 80045f6:	46c0      	nop			; (mov r8, r8)
 80045f8:	200004c4 	.word	0x200004c4

080045fc <memchr>:
 80045fc:	b2c9      	uxtb	r1, r1
 80045fe:	1882      	adds	r2, r0, r2
 8004600:	4290      	cmp	r0, r2
 8004602:	d101      	bne.n	8004608 <memchr+0xc>
 8004604:	2000      	movs	r0, #0
 8004606:	4770      	bx	lr
 8004608:	7803      	ldrb	r3, [r0, #0]
 800460a:	428b      	cmp	r3, r1
 800460c:	d0fb      	beq.n	8004606 <memchr+0xa>
 800460e:	3001      	adds	r0, #1
 8004610:	e7f6      	b.n	8004600 <memchr+0x4>
	...

08004614 <__malloc_lock>:
 8004614:	b510      	push	{r4, lr}
 8004616:	4802      	ldr	r0, [pc, #8]	; (8004620 <__malloc_lock+0xc>)
 8004618:	f7ff fab5 	bl	8003b86 <__retarget_lock_acquire_recursive>
 800461c:	bd10      	pop	{r4, pc}
 800461e:	46c0      	nop			; (mov r8, r8)
 8004620:	200004b8 	.word	0x200004b8

08004624 <__malloc_unlock>:
 8004624:	b510      	push	{r4, lr}
 8004626:	4802      	ldr	r0, [pc, #8]	; (8004630 <__malloc_unlock+0xc>)
 8004628:	f7ff faae 	bl	8003b88 <__retarget_lock_release_recursive>
 800462c:	bd10      	pop	{r4, pc}
 800462e:	46c0      	nop			; (mov r8, r8)
 8004630:	200004b8 	.word	0x200004b8

08004634 <_read_r>:
 8004634:	b570      	push	{r4, r5, r6, lr}
 8004636:	0004      	movs	r4, r0
 8004638:	0008      	movs	r0, r1
 800463a:	0011      	movs	r1, r2
 800463c:	001a      	movs	r2, r3
 800463e:	2300      	movs	r3, #0
 8004640:	4d05      	ldr	r5, [pc, #20]	; (8004658 <_read_r+0x24>)
 8004642:	602b      	str	r3, [r5, #0]
 8004644:	f7fc fdc9 	bl	80011da <_read>
 8004648:	1c43      	adds	r3, r0, #1
 800464a:	d103      	bne.n	8004654 <_read_r+0x20>
 800464c:	682b      	ldr	r3, [r5, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d000      	beq.n	8004654 <_read_r+0x20>
 8004652:	6023      	str	r3, [r4, #0]
 8004654:	bd70      	pop	{r4, r5, r6, pc}
 8004656:	46c0      	nop			; (mov r8, r8)
 8004658:	200004c4 	.word	0x200004c4

0800465c <_init>:
 800465c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800465e:	46c0      	nop			; (mov r8, r8)
 8004660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004662:	bc08      	pop	{r3}
 8004664:	469e      	mov	lr, r3
 8004666:	4770      	bx	lr

08004668 <_fini>:
 8004668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800466a:	46c0      	nop			; (mov r8, r8)
 800466c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800466e:	bc08      	pop	{r3}
 8004670:	469e      	mov	lr, r3
 8004672:	4770      	bx	lr
